// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	ec2iface "github.com/aws/aws-sdk-go/service/ec2/ec2iface"
)

type FakeEC2API struct {
	AcceptReservedInstancesExchangeQuoteStub        func(*ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)
	acceptReservedInstancesExchangeQuoteMutex       sync.RWMutex
	acceptReservedInstancesExchangeQuoteArgsForCall []struct {
		arg1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}
	acceptReservedInstancesExchangeQuoteReturns struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}
	acceptReservedInstancesExchangeQuoteReturnsOnCall map[int]struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}
	AcceptReservedInstancesExchangeQuoteRequestStub        func(*ec2.AcceptReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.AcceptReservedInstancesExchangeQuoteOutput)
	acceptReservedInstancesExchangeQuoteRequestMutex       sync.RWMutex
	acceptReservedInstancesExchangeQuoteRequestArgsForCall []struct {
		arg1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}
	acceptReservedInstancesExchangeQuoteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	}
	acceptReservedInstancesExchangeQuoteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	}
	AcceptReservedInstancesExchangeQuoteWithContextStub        func(aws.Context, *ec2.AcceptReservedInstancesExchangeQuoteInput, ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)
	acceptReservedInstancesExchangeQuoteWithContextMutex       sync.RWMutex
	acceptReservedInstancesExchangeQuoteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AcceptReservedInstancesExchangeQuoteInput
		arg3 []request.Option
	}
	acceptReservedInstancesExchangeQuoteWithContextReturns struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}
	acceptReservedInstancesExchangeQuoteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}
	AcceptTransitGatewayVpcAttachmentStub        func(*ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)
	acceptTransitGatewayVpcAttachmentMutex       sync.RWMutex
	acceptTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}
	acceptTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}
	acceptTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}
	AcceptTransitGatewayVpcAttachmentRequestStub        func(*ec2.AcceptTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayVpcAttachmentOutput)
	acceptTransitGatewayVpcAttachmentRequestMutex       sync.RWMutex
	acceptTransitGatewayVpcAttachmentRequestArgsForCall []struct {
		arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}
	acceptTransitGatewayVpcAttachmentRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	}
	acceptTransitGatewayVpcAttachmentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	}
	AcceptTransitGatewayVpcAttachmentWithContextStub        func(aws.Context, *ec2.AcceptTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)
	acceptTransitGatewayVpcAttachmentWithContextMutex       sync.RWMutex
	acceptTransitGatewayVpcAttachmentWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AcceptTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}
	acceptTransitGatewayVpcAttachmentWithContextReturns struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}
	acceptTransitGatewayVpcAttachmentWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}
	AcceptVpcEndpointConnectionsStub        func(*ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error)
	acceptVpcEndpointConnectionsMutex       sync.RWMutex
	acceptVpcEndpointConnectionsArgsForCall []struct {
		arg1 *ec2.AcceptVpcEndpointConnectionsInput
	}
	acceptVpcEndpointConnectionsReturns struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}
	acceptVpcEndpointConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}
	AcceptVpcEndpointConnectionsRequestStub        func(*ec2.AcceptVpcEndpointConnectionsInput) (*request.Request, *ec2.AcceptVpcEndpointConnectionsOutput)
	acceptVpcEndpointConnectionsRequestMutex       sync.RWMutex
	acceptVpcEndpointConnectionsRequestArgsForCall []struct {
		arg1 *ec2.AcceptVpcEndpointConnectionsInput
	}
	acceptVpcEndpointConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcEndpointConnectionsOutput
	}
	acceptVpcEndpointConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcEndpointConnectionsOutput
	}
	AcceptVpcEndpointConnectionsWithContextStub        func(aws.Context, *ec2.AcceptVpcEndpointConnectionsInput, ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error)
	acceptVpcEndpointConnectionsWithContextMutex       sync.RWMutex
	acceptVpcEndpointConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AcceptVpcEndpointConnectionsInput
		arg3 []request.Option
	}
	acceptVpcEndpointConnectionsWithContextReturns struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}
	acceptVpcEndpointConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}
	AcceptVpcPeeringConnectionStub        func(*ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error)
	acceptVpcPeeringConnectionMutex       sync.RWMutex
	acceptVpcPeeringConnectionArgsForCall []struct {
		arg1 *ec2.AcceptVpcPeeringConnectionInput
	}
	acceptVpcPeeringConnectionReturns struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}
	acceptVpcPeeringConnectionReturnsOnCall map[int]struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}
	AcceptVpcPeeringConnectionRequestStub        func(*ec2.AcceptVpcPeeringConnectionInput) (*request.Request, *ec2.AcceptVpcPeeringConnectionOutput)
	acceptVpcPeeringConnectionRequestMutex       sync.RWMutex
	acceptVpcPeeringConnectionRequestArgsForCall []struct {
		arg1 *ec2.AcceptVpcPeeringConnectionInput
	}
	acceptVpcPeeringConnectionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcPeeringConnectionOutput
	}
	acceptVpcPeeringConnectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcPeeringConnectionOutput
	}
	AcceptVpcPeeringConnectionWithContextStub        func(aws.Context, *ec2.AcceptVpcPeeringConnectionInput, ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error)
	acceptVpcPeeringConnectionWithContextMutex       sync.RWMutex
	acceptVpcPeeringConnectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AcceptVpcPeeringConnectionInput
		arg3 []request.Option
	}
	acceptVpcPeeringConnectionWithContextReturns struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}
	acceptVpcPeeringConnectionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}
	AdvertiseByoipCidrStub        func(*ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error)
	advertiseByoipCidrMutex       sync.RWMutex
	advertiseByoipCidrArgsForCall []struct {
		arg1 *ec2.AdvertiseByoipCidrInput
	}
	advertiseByoipCidrReturns struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}
	advertiseByoipCidrReturnsOnCall map[int]struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}
	AdvertiseByoipCidrRequestStub        func(*ec2.AdvertiseByoipCidrInput) (*request.Request, *ec2.AdvertiseByoipCidrOutput)
	advertiseByoipCidrRequestMutex       sync.RWMutex
	advertiseByoipCidrRequestArgsForCall []struct {
		arg1 *ec2.AdvertiseByoipCidrInput
	}
	advertiseByoipCidrRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AdvertiseByoipCidrOutput
	}
	advertiseByoipCidrRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AdvertiseByoipCidrOutput
	}
	AdvertiseByoipCidrWithContextStub        func(aws.Context, *ec2.AdvertiseByoipCidrInput, ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error)
	advertiseByoipCidrWithContextMutex       sync.RWMutex
	advertiseByoipCidrWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AdvertiseByoipCidrInput
		arg3 []request.Option
	}
	advertiseByoipCidrWithContextReturns struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}
	advertiseByoipCidrWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}
	AllocateAddressStub        func(*ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error)
	allocateAddressMutex       sync.RWMutex
	allocateAddressArgsForCall []struct {
		arg1 *ec2.AllocateAddressInput
	}
	allocateAddressReturns struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}
	allocateAddressReturnsOnCall map[int]struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}
	AllocateAddressRequestStub        func(*ec2.AllocateAddressInput) (*request.Request, *ec2.AllocateAddressOutput)
	allocateAddressRequestMutex       sync.RWMutex
	allocateAddressRequestArgsForCall []struct {
		arg1 *ec2.AllocateAddressInput
	}
	allocateAddressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AllocateAddressOutput
	}
	allocateAddressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AllocateAddressOutput
	}
	AllocateAddressWithContextStub        func(aws.Context, *ec2.AllocateAddressInput, ...request.Option) (*ec2.AllocateAddressOutput, error)
	allocateAddressWithContextMutex       sync.RWMutex
	allocateAddressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AllocateAddressInput
		arg3 []request.Option
	}
	allocateAddressWithContextReturns struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}
	allocateAddressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}
	AllocateHostsStub        func(*ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error)
	allocateHostsMutex       sync.RWMutex
	allocateHostsArgsForCall []struct {
		arg1 *ec2.AllocateHostsInput
	}
	allocateHostsReturns struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}
	allocateHostsReturnsOnCall map[int]struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}
	AllocateHostsRequestStub        func(*ec2.AllocateHostsInput) (*request.Request, *ec2.AllocateHostsOutput)
	allocateHostsRequestMutex       sync.RWMutex
	allocateHostsRequestArgsForCall []struct {
		arg1 *ec2.AllocateHostsInput
	}
	allocateHostsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AllocateHostsOutput
	}
	allocateHostsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AllocateHostsOutput
	}
	AllocateHostsWithContextStub        func(aws.Context, *ec2.AllocateHostsInput, ...request.Option) (*ec2.AllocateHostsOutput, error)
	allocateHostsWithContextMutex       sync.RWMutex
	allocateHostsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AllocateHostsInput
		arg3 []request.Option
	}
	allocateHostsWithContextReturns struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}
	allocateHostsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}
	ApplySecurityGroupsToClientVpnTargetNetworkStub        func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)
	applySecurityGroupsToClientVpnTargetNetworkMutex       sync.RWMutex
	applySecurityGroupsToClientVpnTargetNetworkArgsForCall []struct {
		arg1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}
	applySecurityGroupsToClientVpnTargetNetworkReturns struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}
	applySecurityGroupsToClientVpnTargetNetworkReturnsOnCall map[int]struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}
	ApplySecurityGroupsToClientVpnTargetNetworkRequestStub        func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*request.Request, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
	applySecurityGroupsToClientVpnTargetNetworkRequestMutex       sync.RWMutex
	applySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall []struct {
		arg1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}
	applySecurityGroupsToClientVpnTargetNetworkRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	}
	applySecurityGroupsToClientVpnTargetNetworkRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	}
	ApplySecurityGroupsToClientVpnTargetNetworkWithContextStub        func(aws.Context, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)
	applySecurityGroupsToClientVpnTargetNetworkWithContextMutex       sync.RWMutex
	applySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		arg3 []request.Option
	}
	applySecurityGroupsToClientVpnTargetNetworkWithContextReturns struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}
	applySecurityGroupsToClientVpnTargetNetworkWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}
	AssignIpv6AddressesStub        func(*ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error)
	assignIpv6AddressesMutex       sync.RWMutex
	assignIpv6AddressesArgsForCall []struct {
		arg1 *ec2.AssignIpv6AddressesInput
	}
	assignIpv6AddressesReturns struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}
	assignIpv6AddressesReturnsOnCall map[int]struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}
	AssignIpv6AddressesRequestStub        func(*ec2.AssignIpv6AddressesInput) (*request.Request, *ec2.AssignIpv6AddressesOutput)
	assignIpv6AddressesRequestMutex       sync.RWMutex
	assignIpv6AddressesRequestArgsForCall []struct {
		arg1 *ec2.AssignIpv6AddressesInput
	}
	assignIpv6AddressesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssignIpv6AddressesOutput
	}
	assignIpv6AddressesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssignIpv6AddressesOutput
	}
	AssignIpv6AddressesWithContextStub        func(aws.Context, *ec2.AssignIpv6AddressesInput, ...request.Option) (*ec2.AssignIpv6AddressesOutput, error)
	assignIpv6AddressesWithContextMutex       sync.RWMutex
	assignIpv6AddressesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssignIpv6AddressesInput
		arg3 []request.Option
	}
	assignIpv6AddressesWithContextReturns struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}
	assignIpv6AddressesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}
	AssignPrivateIpAddressesStub        func(*ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error)
	assignPrivateIpAddressesMutex       sync.RWMutex
	assignPrivateIpAddressesArgsForCall []struct {
		arg1 *ec2.AssignPrivateIpAddressesInput
	}
	assignPrivateIpAddressesReturns struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}
	assignPrivateIpAddressesReturnsOnCall map[int]struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}
	AssignPrivateIpAddressesRequestStub        func(*ec2.AssignPrivateIpAddressesInput) (*request.Request, *ec2.AssignPrivateIpAddressesOutput)
	assignPrivateIpAddressesRequestMutex       sync.RWMutex
	assignPrivateIpAddressesRequestArgsForCall []struct {
		arg1 *ec2.AssignPrivateIpAddressesInput
	}
	assignPrivateIpAddressesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssignPrivateIpAddressesOutput
	}
	assignPrivateIpAddressesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssignPrivateIpAddressesOutput
	}
	AssignPrivateIpAddressesWithContextStub        func(aws.Context, *ec2.AssignPrivateIpAddressesInput, ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error)
	assignPrivateIpAddressesWithContextMutex       sync.RWMutex
	assignPrivateIpAddressesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssignPrivateIpAddressesInput
		arg3 []request.Option
	}
	assignPrivateIpAddressesWithContextReturns struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}
	assignPrivateIpAddressesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}
	AssociateAddressStub        func(*ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error)
	associateAddressMutex       sync.RWMutex
	associateAddressArgsForCall []struct {
		arg1 *ec2.AssociateAddressInput
	}
	associateAddressReturns struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}
	associateAddressReturnsOnCall map[int]struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}
	AssociateAddressRequestStub        func(*ec2.AssociateAddressInput) (*request.Request, *ec2.AssociateAddressOutput)
	associateAddressRequestMutex       sync.RWMutex
	associateAddressRequestArgsForCall []struct {
		arg1 *ec2.AssociateAddressInput
	}
	associateAddressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateAddressOutput
	}
	associateAddressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateAddressOutput
	}
	AssociateAddressWithContextStub        func(aws.Context, *ec2.AssociateAddressInput, ...request.Option) (*ec2.AssociateAddressOutput, error)
	associateAddressWithContextMutex       sync.RWMutex
	associateAddressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateAddressInput
		arg3 []request.Option
	}
	associateAddressWithContextReturns struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}
	associateAddressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}
	AssociateClientVpnTargetNetworkStub        func(*ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error)
	associateClientVpnTargetNetworkMutex       sync.RWMutex
	associateClientVpnTargetNetworkArgsForCall []struct {
		arg1 *ec2.AssociateClientVpnTargetNetworkInput
	}
	associateClientVpnTargetNetworkReturns struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}
	associateClientVpnTargetNetworkReturnsOnCall map[int]struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}
	AssociateClientVpnTargetNetworkRequestStub        func(*ec2.AssociateClientVpnTargetNetworkInput) (*request.Request, *ec2.AssociateClientVpnTargetNetworkOutput)
	associateClientVpnTargetNetworkRequestMutex       sync.RWMutex
	associateClientVpnTargetNetworkRequestArgsForCall []struct {
		arg1 *ec2.AssociateClientVpnTargetNetworkInput
	}
	associateClientVpnTargetNetworkRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateClientVpnTargetNetworkOutput
	}
	associateClientVpnTargetNetworkRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateClientVpnTargetNetworkOutput
	}
	AssociateClientVpnTargetNetworkWithContextStub        func(aws.Context, *ec2.AssociateClientVpnTargetNetworkInput, ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error)
	associateClientVpnTargetNetworkWithContextMutex       sync.RWMutex
	associateClientVpnTargetNetworkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateClientVpnTargetNetworkInput
		arg3 []request.Option
	}
	associateClientVpnTargetNetworkWithContextReturns struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}
	associateClientVpnTargetNetworkWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}
	AssociateDhcpOptionsStub        func(*ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error)
	associateDhcpOptionsMutex       sync.RWMutex
	associateDhcpOptionsArgsForCall []struct {
		arg1 *ec2.AssociateDhcpOptionsInput
	}
	associateDhcpOptionsReturns struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}
	associateDhcpOptionsReturnsOnCall map[int]struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}
	AssociateDhcpOptionsRequestStub        func(*ec2.AssociateDhcpOptionsInput) (*request.Request, *ec2.AssociateDhcpOptionsOutput)
	associateDhcpOptionsRequestMutex       sync.RWMutex
	associateDhcpOptionsRequestArgsForCall []struct {
		arg1 *ec2.AssociateDhcpOptionsInput
	}
	associateDhcpOptionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateDhcpOptionsOutput
	}
	associateDhcpOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateDhcpOptionsOutput
	}
	AssociateDhcpOptionsWithContextStub        func(aws.Context, *ec2.AssociateDhcpOptionsInput, ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error)
	associateDhcpOptionsWithContextMutex       sync.RWMutex
	associateDhcpOptionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateDhcpOptionsInput
		arg3 []request.Option
	}
	associateDhcpOptionsWithContextReturns struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}
	associateDhcpOptionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}
	AssociateIamInstanceProfileStub        func(*ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error)
	associateIamInstanceProfileMutex       sync.RWMutex
	associateIamInstanceProfileArgsForCall []struct {
		arg1 *ec2.AssociateIamInstanceProfileInput
	}
	associateIamInstanceProfileReturns struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}
	associateIamInstanceProfileReturnsOnCall map[int]struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}
	AssociateIamInstanceProfileRequestStub        func(*ec2.AssociateIamInstanceProfileInput) (*request.Request, *ec2.AssociateIamInstanceProfileOutput)
	associateIamInstanceProfileRequestMutex       sync.RWMutex
	associateIamInstanceProfileRequestArgsForCall []struct {
		arg1 *ec2.AssociateIamInstanceProfileInput
	}
	associateIamInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateIamInstanceProfileOutput
	}
	associateIamInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateIamInstanceProfileOutput
	}
	AssociateIamInstanceProfileWithContextStub        func(aws.Context, *ec2.AssociateIamInstanceProfileInput, ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error)
	associateIamInstanceProfileWithContextMutex       sync.RWMutex
	associateIamInstanceProfileWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateIamInstanceProfileInput
		arg3 []request.Option
	}
	associateIamInstanceProfileWithContextReturns struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}
	associateIamInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}
	AssociateRouteTableStub        func(*ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error)
	associateRouteTableMutex       sync.RWMutex
	associateRouteTableArgsForCall []struct {
		arg1 *ec2.AssociateRouteTableInput
	}
	associateRouteTableReturns struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}
	associateRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}
	AssociateRouteTableRequestStub        func(*ec2.AssociateRouteTableInput) (*request.Request, *ec2.AssociateRouteTableOutput)
	associateRouteTableRequestMutex       sync.RWMutex
	associateRouteTableRequestArgsForCall []struct {
		arg1 *ec2.AssociateRouteTableInput
	}
	associateRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateRouteTableOutput
	}
	associateRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateRouteTableOutput
	}
	AssociateRouteTableWithContextStub        func(aws.Context, *ec2.AssociateRouteTableInput, ...request.Option) (*ec2.AssociateRouteTableOutput, error)
	associateRouteTableWithContextMutex       sync.RWMutex
	associateRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateRouteTableInput
		arg3 []request.Option
	}
	associateRouteTableWithContextReturns struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}
	associateRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}
	AssociateSubnetCidrBlockStub        func(*ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error)
	associateSubnetCidrBlockMutex       sync.RWMutex
	associateSubnetCidrBlockArgsForCall []struct {
		arg1 *ec2.AssociateSubnetCidrBlockInput
	}
	associateSubnetCidrBlockReturns struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}
	associateSubnetCidrBlockReturnsOnCall map[int]struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}
	AssociateSubnetCidrBlockRequestStub        func(*ec2.AssociateSubnetCidrBlockInput) (*request.Request, *ec2.AssociateSubnetCidrBlockOutput)
	associateSubnetCidrBlockRequestMutex       sync.RWMutex
	associateSubnetCidrBlockRequestArgsForCall []struct {
		arg1 *ec2.AssociateSubnetCidrBlockInput
	}
	associateSubnetCidrBlockRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateSubnetCidrBlockOutput
	}
	associateSubnetCidrBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateSubnetCidrBlockOutput
	}
	AssociateSubnetCidrBlockWithContextStub        func(aws.Context, *ec2.AssociateSubnetCidrBlockInput, ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error)
	associateSubnetCidrBlockWithContextMutex       sync.RWMutex
	associateSubnetCidrBlockWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateSubnetCidrBlockInput
		arg3 []request.Option
	}
	associateSubnetCidrBlockWithContextReturns struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}
	associateSubnetCidrBlockWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}
	AssociateTransitGatewayRouteTableStub        func(*ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error)
	associateTransitGatewayRouteTableMutex       sync.RWMutex
	associateTransitGatewayRouteTableArgsForCall []struct {
		arg1 *ec2.AssociateTransitGatewayRouteTableInput
	}
	associateTransitGatewayRouteTableReturns struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}
	associateTransitGatewayRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}
	AssociateTransitGatewayRouteTableRequestStub        func(*ec2.AssociateTransitGatewayRouteTableInput) (*request.Request, *ec2.AssociateTransitGatewayRouteTableOutput)
	associateTransitGatewayRouteTableRequestMutex       sync.RWMutex
	associateTransitGatewayRouteTableRequestArgsForCall []struct {
		arg1 *ec2.AssociateTransitGatewayRouteTableInput
	}
	associateTransitGatewayRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateTransitGatewayRouteTableOutput
	}
	associateTransitGatewayRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateTransitGatewayRouteTableOutput
	}
	AssociateTransitGatewayRouteTableWithContextStub        func(aws.Context, *ec2.AssociateTransitGatewayRouteTableInput, ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error)
	associateTransitGatewayRouteTableWithContextMutex       sync.RWMutex
	associateTransitGatewayRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateTransitGatewayRouteTableInput
		arg3 []request.Option
	}
	associateTransitGatewayRouteTableWithContextReturns struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}
	associateTransitGatewayRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}
	AssociateVpcCidrBlockStub        func(*ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error)
	associateVpcCidrBlockMutex       sync.RWMutex
	associateVpcCidrBlockArgsForCall []struct {
		arg1 *ec2.AssociateVpcCidrBlockInput
	}
	associateVpcCidrBlockReturns struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}
	associateVpcCidrBlockReturnsOnCall map[int]struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}
	AssociateVpcCidrBlockRequestStub        func(*ec2.AssociateVpcCidrBlockInput) (*request.Request, *ec2.AssociateVpcCidrBlockOutput)
	associateVpcCidrBlockRequestMutex       sync.RWMutex
	associateVpcCidrBlockRequestArgsForCall []struct {
		arg1 *ec2.AssociateVpcCidrBlockInput
	}
	associateVpcCidrBlockRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AssociateVpcCidrBlockOutput
	}
	associateVpcCidrBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AssociateVpcCidrBlockOutput
	}
	AssociateVpcCidrBlockWithContextStub        func(aws.Context, *ec2.AssociateVpcCidrBlockInput, ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error)
	associateVpcCidrBlockWithContextMutex       sync.RWMutex
	associateVpcCidrBlockWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AssociateVpcCidrBlockInput
		arg3 []request.Option
	}
	associateVpcCidrBlockWithContextReturns struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}
	associateVpcCidrBlockWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}
	AttachClassicLinkVpcStub        func(*ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error)
	attachClassicLinkVpcMutex       sync.RWMutex
	attachClassicLinkVpcArgsForCall []struct {
		arg1 *ec2.AttachClassicLinkVpcInput
	}
	attachClassicLinkVpcReturns struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}
	attachClassicLinkVpcReturnsOnCall map[int]struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}
	AttachClassicLinkVpcRequestStub        func(*ec2.AttachClassicLinkVpcInput) (*request.Request, *ec2.AttachClassicLinkVpcOutput)
	attachClassicLinkVpcRequestMutex       sync.RWMutex
	attachClassicLinkVpcRequestArgsForCall []struct {
		arg1 *ec2.AttachClassicLinkVpcInput
	}
	attachClassicLinkVpcRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AttachClassicLinkVpcOutput
	}
	attachClassicLinkVpcRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AttachClassicLinkVpcOutput
	}
	AttachClassicLinkVpcWithContextStub        func(aws.Context, *ec2.AttachClassicLinkVpcInput, ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error)
	attachClassicLinkVpcWithContextMutex       sync.RWMutex
	attachClassicLinkVpcWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AttachClassicLinkVpcInput
		arg3 []request.Option
	}
	attachClassicLinkVpcWithContextReturns struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}
	attachClassicLinkVpcWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}
	AttachInternetGatewayStub        func(*ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error)
	attachInternetGatewayMutex       sync.RWMutex
	attachInternetGatewayArgsForCall []struct {
		arg1 *ec2.AttachInternetGatewayInput
	}
	attachInternetGatewayReturns struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}
	attachInternetGatewayReturnsOnCall map[int]struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}
	AttachInternetGatewayRequestStub        func(*ec2.AttachInternetGatewayInput) (*request.Request, *ec2.AttachInternetGatewayOutput)
	attachInternetGatewayRequestMutex       sync.RWMutex
	attachInternetGatewayRequestArgsForCall []struct {
		arg1 *ec2.AttachInternetGatewayInput
	}
	attachInternetGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AttachInternetGatewayOutput
	}
	attachInternetGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AttachInternetGatewayOutput
	}
	AttachInternetGatewayWithContextStub        func(aws.Context, *ec2.AttachInternetGatewayInput, ...request.Option) (*ec2.AttachInternetGatewayOutput, error)
	attachInternetGatewayWithContextMutex       sync.RWMutex
	attachInternetGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AttachInternetGatewayInput
		arg3 []request.Option
	}
	attachInternetGatewayWithContextReturns struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}
	attachInternetGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}
	AttachNetworkInterfaceStub        func(*ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error)
	attachNetworkInterfaceMutex       sync.RWMutex
	attachNetworkInterfaceArgsForCall []struct {
		arg1 *ec2.AttachNetworkInterfaceInput
	}
	attachNetworkInterfaceReturns struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}
	attachNetworkInterfaceReturnsOnCall map[int]struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}
	AttachNetworkInterfaceRequestStub        func(*ec2.AttachNetworkInterfaceInput) (*request.Request, *ec2.AttachNetworkInterfaceOutput)
	attachNetworkInterfaceRequestMutex       sync.RWMutex
	attachNetworkInterfaceRequestArgsForCall []struct {
		arg1 *ec2.AttachNetworkInterfaceInput
	}
	attachNetworkInterfaceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AttachNetworkInterfaceOutput
	}
	attachNetworkInterfaceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AttachNetworkInterfaceOutput
	}
	AttachNetworkInterfaceWithContextStub        func(aws.Context, *ec2.AttachNetworkInterfaceInput, ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error)
	attachNetworkInterfaceWithContextMutex       sync.RWMutex
	attachNetworkInterfaceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AttachNetworkInterfaceInput
		arg3 []request.Option
	}
	attachNetworkInterfaceWithContextReturns struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}
	attachNetworkInterfaceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}
	AttachVolumeStub        func(*ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error)
	attachVolumeMutex       sync.RWMutex
	attachVolumeArgsForCall []struct {
		arg1 *ec2.AttachVolumeInput
	}
	attachVolumeReturns struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	attachVolumeReturnsOnCall map[int]struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	AttachVolumeRequestStub        func(*ec2.AttachVolumeInput) (*request.Request, *ec2.VolumeAttachment)
	attachVolumeRequestMutex       sync.RWMutex
	attachVolumeRequestArgsForCall []struct {
		arg1 *ec2.AttachVolumeInput
	}
	attachVolumeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}
	attachVolumeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}
	AttachVolumeWithContextStub        func(aws.Context, *ec2.AttachVolumeInput, ...request.Option) (*ec2.VolumeAttachment, error)
	attachVolumeWithContextMutex       sync.RWMutex
	attachVolumeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AttachVolumeInput
		arg3 []request.Option
	}
	attachVolumeWithContextReturns struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	attachVolumeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	AttachVpnGatewayStub        func(*ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error)
	attachVpnGatewayMutex       sync.RWMutex
	attachVpnGatewayArgsForCall []struct {
		arg1 *ec2.AttachVpnGatewayInput
	}
	attachVpnGatewayReturns struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}
	attachVpnGatewayReturnsOnCall map[int]struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}
	AttachVpnGatewayRequestStub        func(*ec2.AttachVpnGatewayInput) (*request.Request, *ec2.AttachVpnGatewayOutput)
	attachVpnGatewayRequestMutex       sync.RWMutex
	attachVpnGatewayRequestArgsForCall []struct {
		arg1 *ec2.AttachVpnGatewayInput
	}
	attachVpnGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AttachVpnGatewayOutput
	}
	attachVpnGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AttachVpnGatewayOutput
	}
	AttachVpnGatewayWithContextStub        func(aws.Context, *ec2.AttachVpnGatewayInput, ...request.Option) (*ec2.AttachVpnGatewayOutput, error)
	attachVpnGatewayWithContextMutex       sync.RWMutex
	attachVpnGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AttachVpnGatewayInput
		arg3 []request.Option
	}
	attachVpnGatewayWithContextReturns struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}
	attachVpnGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}
	AuthorizeClientVpnIngressStub        func(*ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error)
	authorizeClientVpnIngressMutex       sync.RWMutex
	authorizeClientVpnIngressArgsForCall []struct {
		arg1 *ec2.AuthorizeClientVpnIngressInput
	}
	authorizeClientVpnIngressReturns struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}
	authorizeClientVpnIngressReturnsOnCall map[int]struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}
	AuthorizeClientVpnIngressRequestStub        func(*ec2.AuthorizeClientVpnIngressInput) (*request.Request, *ec2.AuthorizeClientVpnIngressOutput)
	authorizeClientVpnIngressRequestMutex       sync.RWMutex
	authorizeClientVpnIngressRequestArgsForCall []struct {
		arg1 *ec2.AuthorizeClientVpnIngressInput
	}
	authorizeClientVpnIngressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AuthorizeClientVpnIngressOutput
	}
	authorizeClientVpnIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AuthorizeClientVpnIngressOutput
	}
	AuthorizeClientVpnIngressWithContextStub        func(aws.Context, *ec2.AuthorizeClientVpnIngressInput, ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error)
	authorizeClientVpnIngressWithContextMutex       sync.RWMutex
	authorizeClientVpnIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AuthorizeClientVpnIngressInput
		arg3 []request.Option
	}
	authorizeClientVpnIngressWithContextReturns struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}
	authorizeClientVpnIngressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}
	AuthorizeSecurityGroupEgressStub        func(*ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error)
	authorizeSecurityGroupEgressMutex       sync.RWMutex
	authorizeSecurityGroupEgressArgsForCall []struct {
		arg1 *ec2.AuthorizeSecurityGroupEgressInput
	}
	authorizeSecurityGroupEgressReturns struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}
	authorizeSecurityGroupEgressReturnsOnCall map[int]struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}
	AuthorizeSecurityGroupEgressRequestStub        func(*ec2.AuthorizeSecurityGroupEgressInput) (*request.Request, *ec2.AuthorizeSecurityGroupEgressOutput)
	authorizeSecurityGroupEgressRequestMutex       sync.RWMutex
	authorizeSecurityGroupEgressRequestArgsForCall []struct {
		arg1 *ec2.AuthorizeSecurityGroupEgressInput
	}
	authorizeSecurityGroupEgressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupEgressOutput
	}
	authorizeSecurityGroupEgressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupEgressOutput
	}
	AuthorizeSecurityGroupEgressWithContextStub        func(aws.Context, *ec2.AuthorizeSecurityGroupEgressInput, ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error)
	authorizeSecurityGroupEgressWithContextMutex       sync.RWMutex
	authorizeSecurityGroupEgressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AuthorizeSecurityGroupEgressInput
		arg3 []request.Option
	}
	authorizeSecurityGroupEgressWithContextReturns struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}
	authorizeSecurityGroupEgressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}
	AuthorizeSecurityGroupIngressStub        func(*ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error)
	authorizeSecurityGroupIngressMutex       sync.RWMutex
	authorizeSecurityGroupIngressArgsForCall []struct {
		arg1 *ec2.AuthorizeSecurityGroupIngressInput
	}
	authorizeSecurityGroupIngressReturns struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}
	authorizeSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}
	AuthorizeSecurityGroupIngressRequestStub        func(*ec2.AuthorizeSecurityGroupIngressInput) (*request.Request, *ec2.AuthorizeSecurityGroupIngressOutput)
	authorizeSecurityGroupIngressRequestMutex       sync.RWMutex
	authorizeSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *ec2.AuthorizeSecurityGroupIngressInput
	}
	authorizeSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupIngressOutput
	}
	authorizeSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupIngressOutput
	}
	AuthorizeSecurityGroupIngressWithContextStub        func(aws.Context, *ec2.AuthorizeSecurityGroupIngressInput, ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error)
	authorizeSecurityGroupIngressWithContextMutex       sync.RWMutex
	authorizeSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.AuthorizeSecurityGroupIngressInput
		arg3 []request.Option
	}
	authorizeSecurityGroupIngressWithContextReturns struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}
	authorizeSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}
	BundleInstanceStub        func(*ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error)
	bundleInstanceMutex       sync.RWMutex
	bundleInstanceArgsForCall []struct {
		arg1 *ec2.BundleInstanceInput
	}
	bundleInstanceReturns struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}
	bundleInstanceReturnsOnCall map[int]struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}
	BundleInstanceRequestStub        func(*ec2.BundleInstanceInput) (*request.Request, *ec2.BundleInstanceOutput)
	bundleInstanceRequestMutex       sync.RWMutex
	bundleInstanceRequestArgsForCall []struct {
		arg1 *ec2.BundleInstanceInput
	}
	bundleInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.BundleInstanceOutput
	}
	bundleInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.BundleInstanceOutput
	}
	BundleInstanceWithContextStub        func(aws.Context, *ec2.BundleInstanceInput, ...request.Option) (*ec2.BundleInstanceOutput, error)
	bundleInstanceWithContextMutex       sync.RWMutex
	bundleInstanceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.BundleInstanceInput
		arg3 []request.Option
	}
	bundleInstanceWithContextReturns struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}
	bundleInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}
	CancelBundleTaskStub        func(*ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error)
	cancelBundleTaskMutex       sync.RWMutex
	cancelBundleTaskArgsForCall []struct {
		arg1 *ec2.CancelBundleTaskInput
	}
	cancelBundleTaskReturns struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}
	cancelBundleTaskReturnsOnCall map[int]struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}
	CancelBundleTaskRequestStub        func(*ec2.CancelBundleTaskInput) (*request.Request, *ec2.CancelBundleTaskOutput)
	cancelBundleTaskRequestMutex       sync.RWMutex
	cancelBundleTaskRequestArgsForCall []struct {
		arg1 *ec2.CancelBundleTaskInput
	}
	cancelBundleTaskRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelBundleTaskOutput
	}
	cancelBundleTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelBundleTaskOutput
	}
	CancelBundleTaskWithContextStub        func(aws.Context, *ec2.CancelBundleTaskInput, ...request.Option) (*ec2.CancelBundleTaskOutput, error)
	cancelBundleTaskWithContextMutex       sync.RWMutex
	cancelBundleTaskWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelBundleTaskInput
		arg3 []request.Option
	}
	cancelBundleTaskWithContextReturns struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}
	cancelBundleTaskWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}
	CancelCapacityReservationStub        func(*ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error)
	cancelCapacityReservationMutex       sync.RWMutex
	cancelCapacityReservationArgsForCall []struct {
		arg1 *ec2.CancelCapacityReservationInput
	}
	cancelCapacityReservationReturns struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}
	cancelCapacityReservationReturnsOnCall map[int]struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}
	CancelCapacityReservationRequestStub        func(*ec2.CancelCapacityReservationInput) (*request.Request, *ec2.CancelCapacityReservationOutput)
	cancelCapacityReservationRequestMutex       sync.RWMutex
	cancelCapacityReservationRequestArgsForCall []struct {
		arg1 *ec2.CancelCapacityReservationInput
	}
	cancelCapacityReservationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelCapacityReservationOutput
	}
	cancelCapacityReservationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelCapacityReservationOutput
	}
	CancelCapacityReservationWithContextStub        func(aws.Context, *ec2.CancelCapacityReservationInput, ...request.Option) (*ec2.CancelCapacityReservationOutput, error)
	cancelCapacityReservationWithContextMutex       sync.RWMutex
	cancelCapacityReservationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelCapacityReservationInput
		arg3 []request.Option
	}
	cancelCapacityReservationWithContextReturns struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}
	cancelCapacityReservationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}
	CancelConversionTaskStub        func(*ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error)
	cancelConversionTaskMutex       sync.RWMutex
	cancelConversionTaskArgsForCall []struct {
		arg1 *ec2.CancelConversionTaskInput
	}
	cancelConversionTaskReturns struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}
	cancelConversionTaskReturnsOnCall map[int]struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}
	CancelConversionTaskRequestStub        func(*ec2.CancelConversionTaskInput) (*request.Request, *ec2.CancelConversionTaskOutput)
	cancelConversionTaskRequestMutex       sync.RWMutex
	cancelConversionTaskRequestArgsForCall []struct {
		arg1 *ec2.CancelConversionTaskInput
	}
	cancelConversionTaskRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelConversionTaskOutput
	}
	cancelConversionTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelConversionTaskOutput
	}
	CancelConversionTaskWithContextStub        func(aws.Context, *ec2.CancelConversionTaskInput, ...request.Option) (*ec2.CancelConversionTaskOutput, error)
	cancelConversionTaskWithContextMutex       sync.RWMutex
	cancelConversionTaskWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelConversionTaskInput
		arg3 []request.Option
	}
	cancelConversionTaskWithContextReturns struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}
	cancelConversionTaskWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}
	CancelExportTaskStub        func(*ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error)
	cancelExportTaskMutex       sync.RWMutex
	cancelExportTaskArgsForCall []struct {
		arg1 *ec2.CancelExportTaskInput
	}
	cancelExportTaskReturns struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}
	cancelExportTaskReturnsOnCall map[int]struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}
	CancelExportTaskRequestStub        func(*ec2.CancelExportTaskInput) (*request.Request, *ec2.CancelExportTaskOutput)
	cancelExportTaskRequestMutex       sync.RWMutex
	cancelExportTaskRequestArgsForCall []struct {
		arg1 *ec2.CancelExportTaskInput
	}
	cancelExportTaskRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelExportTaskOutput
	}
	cancelExportTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelExportTaskOutput
	}
	CancelExportTaskWithContextStub        func(aws.Context, *ec2.CancelExportTaskInput, ...request.Option) (*ec2.CancelExportTaskOutput, error)
	cancelExportTaskWithContextMutex       sync.RWMutex
	cancelExportTaskWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelExportTaskInput
		arg3 []request.Option
	}
	cancelExportTaskWithContextReturns struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}
	cancelExportTaskWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}
	CancelImportTaskStub        func(*ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error)
	cancelImportTaskMutex       sync.RWMutex
	cancelImportTaskArgsForCall []struct {
		arg1 *ec2.CancelImportTaskInput
	}
	cancelImportTaskReturns struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}
	cancelImportTaskReturnsOnCall map[int]struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}
	CancelImportTaskRequestStub        func(*ec2.CancelImportTaskInput) (*request.Request, *ec2.CancelImportTaskOutput)
	cancelImportTaskRequestMutex       sync.RWMutex
	cancelImportTaskRequestArgsForCall []struct {
		arg1 *ec2.CancelImportTaskInput
	}
	cancelImportTaskRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelImportTaskOutput
	}
	cancelImportTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelImportTaskOutput
	}
	CancelImportTaskWithContextStub        func(aws.Context, *ec2.CancelImportTaskInput, ...request.Option) (*ec2.CancelImportTaskOutput, error)
	cancelImportTaskWithContextMutex       sync.RWMutex
	cancelImportTaskWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelImportTaskInput
		arg3 []request.Option
	}
	cancelImportTaskWithContextReturns struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}
	cancelImportTaskWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}
	CancelReservedInstancesListingStub        func(*ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error)
	cancelReservedInstancesListingMutex       sync.RWMutex
	cancelReservedInstancesListingArgsForCall []struct {
		arg1 *ec2.CancelReservedInstancesListingInput
	}
	cancelReservedInstancesListingReturns struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}
	cancelReservedInstancesListingReturnsOnCall map[int]struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}
	CancelReservedInstancesListingRequestStub        func(*ec2.CancelReservedInstancesListingInput) (*request.Request, *ec2.CancelReservedInstancesListingOutput)
	cancelReservedInstancesListingRequestMutex       sync.RWMutex
	cancelReservedInstancesListingRequestArgsForCall []struct {
		arg1 *ec2.CancelReservedInstancesListingInput
	}
	cancelReservedInstancesListingRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelReservedInstancesListingOutput
	}
	cancelReservedInstancesListingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelReservedInstancesListingOutput
	}
	CancelReservedInstancesListingWithContextStub        func(aws.Context, *ec2.CancelReservedInstancesListingInput, ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error)
	cancelReservedInstancesListingWithContextMutex       sync.RWMutex
	cancelReservedInstancesListingWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelReservedInstancesListingInput
		arg3 []request.Option
	}
	cancelReservedInstancesListingWithContextReturns struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}
	cancelReservedInstancesListingWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}
	CancelSpotFleetRequestsStub        func(*ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error)
	cancelSpotFleetRequestsMutex       sync.RWMutex
	cancelSpotFleetRequestsArgsForCall []struct {
		arg1 *ec2.CancelSpotFleetRequestsInput
	}
	cancelSpotFleetRequestsReturns struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}
	cancelSpotFleetRequestsReturnsOnCall map[int]struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}
	CancelSpotFleetRequestsRequestStub        func(*ec2.CancelSpotFleetRequestsInput) (*request.Request, *ec2.CancelSpotFleetRequestsOutput)
	cancelSpotFleetRequestsRequestMutex       sync.RWMutex
	cancelSpotFleetRequestsRequestArgsForCall []struct {
		arg1 *ec2.CancelSpotFleetRequestsInput
	}
	cancelSpotFleetRequestsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelSpotFleetRequestsOutput
	}
	cancelSpotFleetRequestsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelSpotFleetRequestsOutput
	}
	CancelSpotFleetRequestsWithContextStub        func(aws.Context, *ec2.CancelSpotFleetRequestsInput, ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error)
	cancelSpotFleetRequestsWithContextMutex       sync.RWMutex
	cancelSpotFleetRequestsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelSpotFleetRequestsInput
		arg3 []request.Option
	}
	cancelSpotFleetRequestsWithContextReturns struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}
	cancelSpotFleetRequestsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}
	CancelSpotInstanceRequestsStub        func(*ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error)
	cancelSpotInstanceRequestsMutex       sync.RWMutex
	cancelSpotInstanceRequestsArgsForCall []struct {
		arg1 *ec2.CancelSpotInstanceRequestsInput
	}
	cancelSpotInstanceRequestsReturns struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}
	cancelSpotInstanceRequestsReturnsOnCall map[int]struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}
	CancelSpotInstanceRequestsRequestStub        func(*ec2.CancelSpotInstanceRequestsInput) (*request.Request, *ec2.CancelSpotInstanceRequestsOutput)
	cancelSpotInstanceRequestsRequestMutex       sync.RWMutex
	cancelSpotInstanceRequestsRequestArgsForCall []struct {
		arg1 *ec2.CancelSpotInstanceRequestsInput
	}
	cancelSpotInstanceRequestsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CancelSpotInstanceRequestsOutput
	}
	cancelSpotInstanceRequestsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CancelSpotInstanceRequestsOutput
	}
	CancelSpotInstanceRequestsWithContextStub        func(aws.Context, *ec2.CancelSpotInstanceRequestsInput, ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error)
	cancelSpotInstanceRequestsWithContextMutex       sync.RWMutex
	cancelSpotInstanceRequestsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CancelSpotInstanceRequestsInput
		arg3 []request.Option
	}
	cancelSpotInstanceRequestsWithContextReturns struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}
	cancelSpotInstanceRequestsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}
	ConfirmProductInstanceStub        func(*ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error)
	confirmProductInstanceMutex       sync.RWMutex
	confirmProductInstanceArgsForCall []struct {
		arg1 *ec2.ConfirmProductInstanceInput
	}
	confirmProductInstanceReturns struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}
	confirmProductInstanceReturnsOnCall map[int]struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}
	ConfirmProductInstanceRequestStub        func(*ec2.ConfirmProductInstanceInput) (*request.Request, *ec2.ConfirmProductInstanceOutput)
	confirmProductInstanceRequestMutex       sync.RWMutex
	confirmProductInstanceRequestArgsForCall []struct {
		arg1 *ec2.ConfirmProductInstanceInput
	}
	confirmProductInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ConfirmProductInstanceOutput
	}
	confirmProductInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ConfirmProductInstanceOutput
	}
	ConfirmProductInstanceWithContextStub        func(aws.Context, *ec2.ConfirmProductInstanceInput, ...request.Option) (*ec2.ConfirmProductInstanceOutput, error)
	confirmProductInstanceWithContextMutex       sync.RWMutex
	confirmProductInstanceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ConfirmProductInstanceInput
		arg3 []request.Option
	}
	confirmProductInstanceWithContextReturns struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}
	confirmProductInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}
	CopyFpgaImageStub        func(*ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error)
	copyFpgaImageMutex       sync.RWMutex
	copyFpgaImageArgsForCall []struct {
		arg1 *ec2.CopyFpgaImageInput
	}
	copyFpgaImageReturns struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}
	copyFpgaImageReturnsOnCall map[int]struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}
	CopyFpgaImageRequestStub        func(*ec2.CopyFpgaImageInput) (*request.Request, *ec2.CopyFpgaImageOutput)
	copyFpgaImageRequestMutex       sync.RWMutex
	copyFpgaImageRequestArgsForCall []struct {
		arg1 *ec2.CopyFpgaImageInput
	}
	copyFpgaImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CopyFpgaImageOutput
	}
	copyFpgaImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CopyFpgaImageOutput
	}
	CopyFpgaImageWithContextStub        func(aws.Context, *ec2.CopyFpgaImageInput, ...request.Option) (*ec2.CopyFpgaImageOutput, error)
	copyFpgaImageWithContextMutex       sync.RWMutex
	copyFpgaImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CopyFpgaImageInput
		arg3 []request.Option
	}
	copyFpgaImageWithContextReturns struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}
	copyFpgaImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}
	CopyImageStub        func(*ec2.CopyImageInput) (*ec2.CopyImageOutput, error)
	copyImageMutex       sync.RWMutex
	copyImageArgsForCall []struct {
		arg1 *ec2.CopyImageInput
	}
	copyImageReturns struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}
	copyImageReturnsOnCall map[int]struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}
	CopyImageRequestStub        func(*ec2.CopyImageInput) (*request.Request, *ec2.CopyImageOutput)
	copyImageRequestMutex       sync.RWMutex
	copyImageRequestArgsForCall []struct {
		arg1 *ec2.CopyImageInput
	}
	copyImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CopyImageOutput
	}
	copyImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CopyImageOutput
	}
	CopyImageWithContextStub        func(aws.Context, *ec2.CopyImageInput, ...request.Option) (*ec2.CopyImageOutput, error)
	copyImageWithContextMutex       sync.RWMutex
	copyImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CopyImageInput
		arg3 []request.Option
	}
	copyImageWithContextReturns struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}
	copyImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}
	CopySnapshotStub        func(*ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error)
	copySnapshotMutex       sync.RWMutex
	copySnapshotArgsForCall []struct {
		arg1 *ec2.CopySnapshotInput
	}
	copySnapshotReturns struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}
	copySnapshotReturnsOnCall map[int]struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}
	CopySnapshotRequestStub        func(*ec2.CopySnapshotInput) (*request.Request, *ec2.CopySnapshotOutput)
	copySnapshotRequestMutex       sync.RWMutex
	copySnapshotRequestArgsForCall []struct {
		arg1 *ec2.CopySnapshotInput
	}
	copySnapshotRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CopySnapshotOutput
	}
	copySnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CopySnapshotOutput
	}
	CopySnapshotWithContextStub        func(aws.Context, *ec2.CopySnapshotInput, ...request.Option) (*ec2.CopySnapshotOutput, error)
	copySnapshotWithContextMutex       sync.RWMutex
	copySnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CopySnapshotInput
		arg3 []request.Option
	}
	copySnapshotWithContextReturns struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}
	copySnapshotWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}
	CreateCapacityReservationStub        func(*ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error)
	createCapacityReservationMutex       sync.RWMutex
	createCapacityReservationArgsForCall []struct {
		arg1 *ec2.CreateCapacityReservationInput
	}
	createCapacityReservationReturns struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}
	createCapacityReservationReturnsOnCall map[int]struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}
	CreateCapacityReservationRequestStub        func(*ec2.CreateCapacityReservationInput) (*request.Request, *ec2.CreateCapacityReservationOutput)
	createCapacityReservationRequestMutex       sync.RWMutex
	createCapacityReservationRequestArgsForCall []struct {
		arg1 *ec2.CreateCapacityReservationInput
	}
	createCapacityReservationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateCapacityReservationOutput
	}
	createCapacityReservationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateCapacityReservationOutput
	}
	CreateCapacityReservationWithContextStub        func(aws.Context, *ec2.CreateCapacityReservationInput, ...request.Option) (*ec2.CreateCapacityReservationOutput, error)
	createCapacityReservationWithContextMutex       sync.RWMutex
	createCapacityReservationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateCapacityReservationInput
		arg3 []request.Option
	}
	createCapacityReservationWithContextReturns struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}
	createCapacityReservationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}
	CreateClientVpnEndpointStub        func(*ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error)
	createClientVpnEndpointMutex       sync.RWMutex
	createClientVpnEndpointArgsForCall []struct {
		arg1 *ec2.CreateClientVpnEndpointInput
	}
	createClientVpnEndpointReturns struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}
	createClientVpnEndpointReturnsOnCall map[int]struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}
	CreateClientVpnEndpointRequestStub        func(*ec2.CreateClientVpnEndpointInput) (*request.Request, *ec2.CreateClientVpnEndpointOutput)
	createClientVpnEndpointRequestMutex       sync.RWMutex
	createClientVpnEndpointRequestArgsForCall []struct {
		arg1 *ec2.CreateClientVpnEndpointInput
	}
	createClientVpnEndpointRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnEndpointOutput
	}
	createClientVpnEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnEndpointOutput
	}
	CreateClientVpnEndpointWithContextStub        func(aws.Context, *ec2.CreateClientVpnEndpointInput, ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error)
	createClientVpnEndpointWithContextMutex       sync.RWMutex
	createClientVpnEndpointWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateClientVpnEndpointInput
		arg3 []request.Option
	}
	createClientVpnEndpointWithContextReturns struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}
	createClientVpnEndpointWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}
	CreateClientVpnRouteStub        func(*ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error)
	createClientVpnRouteMutex       sync.RWMutex
	createClientVpnRouteArgsForCall []struct {
		arg1 *ec2.CreateClientVpnRouteInput
	}
	createClientVpnRouteReturns struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}
	createClientVpnRouteReturnsOnCall map[int]struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}
	CreateClientVpnRouteRequestStub        func(*ec2.CreateClientVpnRouteInput) (*request.Request, *ec2.CreateClientVpnRouteOutput)
	createClientVpnRouteRequestMutex       sync.RWMutex
	createClientVpnRouteRequestArgsForCall []struct {
		arg1 *ec2.CreateClientVpnRouteInput
	}
	createClientVpnRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnRouteOutput
	}
	createClientVpnRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnRouteOutput
	}
	CreateClientVpnRouteWithContextStub        func(aws.Context, *ec2.CreateClientVpnRouteInput, ...request.Option) (*ec2.CreateClientVpnRouteOutput, error)
	createClientVpnRouteWithContextMutex       sync.RWMutex
	createClientVpnRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateClientVpnRouteInput
		arg3 []request.Option
	}
	createClientVpnRouteWithContextReturns struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}
	createClientVpnRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}
	CreateCustomerGatewayStub        func(*ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error)
	createCustomerGatewayMutex       sync.RWMutex
	createCustomerGatewayArgsForCall []struct {
		arg1 *ec2.CreateCustomerGatewayInput
	}
	createCustomerGatewayReturns struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}
	createCustomerGatewayReturnsOnCall map[int]struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}
	CreateCustomerGatewayRequestStub        func(*ec2.CreateCustomerGatewayInput) (*request.Request, *ec2.CreateCustomerGatewayOutput)
	createCustomerGatewayRequestMutex       sync.RWMutex
	createCustomerGatewayRequestArgsForCall []struct {
		arg1 *ec2.CreateCustomerGatewayInput
	}
	createCustomerGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateCustomerGatewayOutput
	}
	createCustomerGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateCustomerGatewayOutput
	}
	CreateCustomerGatewayWithContextStub        func(aws.Context, *ec2.CreateCustomerGatewayInput, ...request.Option) (*ec2.CreateCustomerGatewayOutput, error)
	createCustomerGatewayWithContextMutex       sync.RWMutex
	createCustomerGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateCustomerGatewayInput
		arg3 []request.Option
	}
	createCustomerGatewayWithContextReturns struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}
	createCustomerGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}
	CreateDefaultSubnetStub        func(*ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error)
	createDefaultSubnetMutex       sync.RWMutex
	createDefaultSubnetArgsForCall []struct {
		arg1 *ec2.CreateDefaultSubnetInput
	}
	createDefaultSubnetReturns struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}
	createDefaultSubnetReturnsOnCall map[int]struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}
	CreateDefaultSubnetRequestStub        func(*ec2.CreateDefaultSubnetInput) (*request.Request, *ec2.CreateDefaultSubnetOutput)
	createDefaultSubnetRequestMutex       sync.RWMutex
	createDefaultSubnetRequestArgsForCall []struct {
		arg1 *ec2.CreateDefaultSubnetInput
	}
	createDefaultSubnetRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultSubnetOutput
	}
	createDefaultSubnetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultSubnetOutput
	}
	CreateDefaultSubnetWithContextStub        func(aws.Context, *ec2.CreateDefaultSubnetInput, ...request.Option) (*ec2.CreateDefaultSubnetOutput, error)
	createDefaultSubnetWithContextMutex       sync.RWMutex
	createDefaultSubnetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateDefaultSubnetInput
		arg3 []request.Option
	}
	createDefaultSubnetWithContextReturns struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}
	createDefaultSubnetWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}
	CreateDefaultVpcStub        func(*ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error)
	createDefaultVpcMutex       sync.RWMutex
	createDefaultVpcArgsForCall []struct {
		arg1 *ec2.CreateDefaultVpcInput
	}
	createDefaultVpcReturns struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}
	createDefaultVpcReturnsOnCall map[int]struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}
	CreateDefaultVpcRequestStub        func(*ec2.CreateDefaultVpcInput) (*request.Request, *ec2.CreateDefaultVpcOutput)
	createDefaultVpcRequestMutex       sync.RWMutex
	createDefaultVpcRequestArgsForCall []struct {
		arg1 *ec2.CreateDefaultVpcInput
	}
	createDefaultVpcRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultVpcOutput
	}
	createDefaultVpcRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultVpcOutput
	}
	CreateDefaultVpcWithContextStub        func(aws.Context, *ec2.CreateDefaultVpcInput, ...request.Option) (*ec2.CreateDefaultVpcOutput, error)
	createDefaultVpcWithContextMutex       sync.RWMutex
	createDefaultVpcWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateDefaultVpcInput
		arg3 []request.Option
	}
	createDefaultVpcWithContextReturns struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}
	createDefaultVpcWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}
	CreateDhcpOptionsStub        func(*ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error)
	createDhcpOptionsMutex       sync.RWMutex
	createDhcpOptionsArgsForCall []struct {
		arg1 *ec2.CreateDhcpOptionsInput
	}
	createDhcpOptionsReturns struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}
	createDhcpOptionsReturnsOnCall map[int]struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}
	CreateDhcpOptionsRequestStub        func(*ec2.CreateDhcpOptionsInput) (*request.Request, *ec2.CreateDhcpOptionsOutput)
	createDhcpOptionsRequestMutex       sync.RWMutex
	createDhcpOptionsRequestArgsForCall []struct {
		arg1 *ec2.CreateDhcpOptionsInput
	}
	createDhcpOptionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateDhcpOptionsOutput
	}
	createDhcpOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateDhcpOptionsOutput
	}
	CreateDhcpOptionsWithContextStub        func(aws.Context, *ec2.CreateDhcpOptionsInput, ...request.Option) (*ec2.CreateDhcpOptionsOutput, error)
	createDhcpOptionsWithContextMutex       sync.RWMutex
	createDhcpOptionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateDhcpOptionsInput
		arg3 []request.Option
	}
	createDhcpOptionsWithContextReturns struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}
	createDhcpOptionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}
	CreateEgressOnlyInternetGatewayStub        func(*ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)
	createEgressOnlyInternetGatewayMutex       sync.RWMutex
	createEgressOnlyInternetGatewayArgsForCall []struct {
		arg1 *ec2.CreateEgressOnlyInternetGatewayInput
	}
	createEgressOnlyInternetGatewayReturns struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}
	createEgressOnlyInternetGatewayReturnsOnCall map[int]struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}
	CreateEgressOnlyInternetGatewayRequestStub        func(*ec2.CreateEgressOnlyInternetGatewayInput) (*request.Request, *ec2.CreateEgressOnlyInternetGatewayOutput)
	createEgressOnlyInternetGatewayRequestMutex       sync.RWMutex
	createEgressOnlyInternetGatewayRequestArgsForCall []struct {
		arg1 *ec2.CreateEgressOnlyInternetGatewayInput
	}
	createEgressOnlyInternetGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateEgressOnlyInternetGatewayOutput
	}
	createEgressOnlyInternetGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateEgressOnlyInternetGatewayOutput
	}
	CreateEgressOnlyInternetGatewayWithContextStub        func(aws.Context, *ec2.CreateEgressOnlyInternetGatewayInput, ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)
	createEgressOnlyInternetGatewayWithContextMutex       sync.RWMutex
	createEgressOnlyInternetGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateEgressOnlyInternetGatewayInput
		arg3 []request.Option
	}
	createEgressOnlyInternetGatewayWithContextReturns struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}
	createEgressOnlyInternetGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}
	CreateFleetStub        func(*ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error)
	createFleetMutex       sync.RWMutex
	createFleetArgsForCall []struct {
		arg1 *ec2.CreateFleetInput
	}
	createFleetReturns struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}
	createFleetReturnsOnCall map[int]struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}
	CreateFleetRequestStub        func(*ec2.CreateFleetInput) (*request.Request, *ec2.CreateFleetOutput)
	createFleetRequestMutex       sync.RWMutex
	createFleetRequestArgsForCall []struct {
		arg1 *ec2.CreateFleetInput
	}
	createFleetRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateFleetOutput
	}
	createFleetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateFleetOutput
	}
	CreateFleetWithContextStub        func(aws.Context, *ec2.CreateFleetInput, ...request.Option) (*ec2.CreateFleetOutput, error)
	createFleetWithContextMutex       sync.RWMutex
	createFleetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateFleetInput
		arg3 []request.Option
	}
	createFleetWithContextReturns struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}
	createFleetWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}
	CreateFlowLogsStub        func(*ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error)
	createFlowLogsMutex       sync.RWMutex
	createFlowLogsArgsForCall []struct {
		arg1 *ec2.CreateFlowLogsInput
	}
	createFlowLogsReturns struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}
	createFlowLogsReturnsOnCall map[int]struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}
	CreateFlowLogsRequestStub        func(*ec2.CreateFlowLogsInput) (*request.Request, *ec2.CreateFlowLogsOutput)
	createFlowLogsRequestMutex       sync.RWMutex
	createFlowLogsRequestArgsForCall []struct {
		arg1 *ec2.CreateFlowLogsInput
	}
	createFlowLogsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateFlowLogsOutput
	}
	createFlowLogsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateFlowLogsOutput
	}
	CreateFlowLogsWithContextStub        func(aws.Context, *ec2.CreateFlowLogsInput, ...request.Option) (*ec2.CreateFlowLogsOutput, error)
	createFlowLogsWithContextMutex       sync.RWMutex
	createFlowLogsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateFlowLogsInput
		arg3 []request.Option
	}
	createFlowLogsWithContextReturns struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}
	createFlowLogsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}
	CreateFpgaImageStub        func(*ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error)
	createFpgaImageMutex       sync.RWMutex
	createFpgaImageArgsForCall []struct {
		arg1 *ec2.CreateFpgaImageInput
	}
	createFpgaImageReturns struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}
	createFpgaImageReturnsOnCall map[int]struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}
	CreateFpgaImageRequestStub        func(*ec2.CreateFpgaImageInput) (*request.Request, *ec2.CreateFpgaImageOutput)
	createFpgaImageRequestMutex       sync.RWMutex
	createFpgaImageRequestArgsForCall []struct {
		arg1 *ec2.CreateFpgaImageInput
	}
	createFpgaImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateFpgaImageOutput
	}
	createFpgaImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateFpgaImageOutput
	}
	CreateFpgaImageWithContextStub        func(aws.Context, *ec2.CreateFpgaImageInput, ...request.Option) (*ec2.CreateFpgaImageOutput, error)
	createFpgaImageWithContextMutex       sync.RWMutex
	createFpgaImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateFpgaImageInput
		arg3 []request.Option
	}
	createFpgaImageWithContextReturns struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}
	createFpgaImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}
	CreateImageStub        func(*ec2.CreateImageInput) (*ec2.CreateImageOutput, error)
	createImageMutex       sync.RWMutex
	createImageArgsForCall []struct {
		arg1 *ec2.CreateImageInput
	}
	createImageReturns struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}
	createImageReturnsOnCall map[int]struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}
	CreateImageRequestStub        func(*ec2.CreateImageInput) (*request.Request, *ec2.CreateImageOutput)
	createImageRequestMutex       sync.RWMutex
	createImageRequestArgsForCall []struct {
		arg1 *ec2.CreateImageInput
	}
	createImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateImageOutput
	}
	createImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateImageOutput
	}
	CreateImageWithContextStub        func(aws.Context, *ec2.CreateImageInput, ...request.Option) (*ec2.CreateImageOutput, error)
	createImageWithContextMutex       sync.RWMutex
	createImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateImageInput
		arg3 []request.Option
	}
	createImageWithContextReturns struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}
	createImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}
	CreateInstanceExportTaskStub        func(*ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error)
	createInstanceExportTaskMutex       sync.RWMutex
	createInstanceExportTaskArgsForCall []struct {
		arg1 *ec2.CreateInstanceExportTaskInput
	}
	createInstanceExportTaskReturns struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}
	createInstanceExportTaskReturnsOnCall map[int]struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}
	CreateInstanceExportTaskRequestStub        func(*ec2.CreateInstanceExportTaskInput) (*request.Request, *ec2.CreateInstanceExportTaskOutput)
	createInstanceExportTaskRequestMutex       sync.RWMutex
	createInstanceExportTaskRequestArgsForCall []struct {
		arg1 *ec2.CreateInstanceExportTaskInput
	}
	createInstanceExportTaskRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateInstanceExportTaskOutput
	}
	createInstanceExportTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateInstanceExportTaskOutput
	}
	CreateInstanceExportTaskWithContextStub        func(aws.Context, *ec2.CreateInstanceExportTaskInput, ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error)
	createInstanceExportTaskWithContextMutex       sync.RWMutex
	createInstanceExportTaskWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateInstanceExportTaskInput
		arg3 []request.Option
	}
	createInstanceExportTaskWithContextReturns struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}
	createInstanceExportTaskWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}
	CreateInternetGatewayStub        func(*ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error)
	createInternetGatewayMutex       sync.RWMutex
	createInternetGatewayArgsForCall []struct {
		arg1 *ec2.CreateInternetGatewayInput
	}
	createInternetGatewayReturns struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}
	createInternetGatewayReturnsOnCall map[int]struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}
	CreateInternetGatewayRequestStub        func(*ec2.CreateInternetGatewayInput) (*request.Request, *ec2.CreateInternetGatewayOutput)
	createInternetGatewayRequestMutex       sync.RWMutex
	createInternetGatewayRequestArgsForCall []struct {
		arg1 *ec2.CreateInternetGatewayInput
	}
	createInternetGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateInternetGatewayOutput
	}
	createInternetGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateInternetGatewayOutput
	}
	CreateInternetGatewayWithContextStub        func(aws.Context, *ec2.CreateInternetGatewayInput, ...request.Option) (*ec2.CreateInternetGatewayOutput, error)
	createInternetGatewayWithContextMutex       sync.RWMutex
	createInternetGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateInternetGatewayInput
		arg3 []request.Option
	}
	createInternetGatewayWithContextReturns struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}
	createInternetGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}
	CreateKeyPairStub        func(*ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error)
	createKeyPairMutex       sync.RWMutex
	createKeyPairArgsForCall []struct {
		arg1 *ec2.CreateKeyPairInput
	}
	createKeyPairReturns struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}
	createKeyPairReturnsOnCall map[int]struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}
	CreateKeyPairRequestStub        func(*ec2.CreateKeyPairInput) (*request.Request, *ec2.CreateKeyPairOutput)
	createKeyPairRequestMutex       sync.RWMutex
	createKeyPairRequestArgsForCall []struct {
		arg1 *ec2.CreateKeyPairInput
	}
	createKeyPairRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateKeyPairOutput
	}
	createKeyPairRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateKeyPairOutput
	}
	CreateKeyPairWithContextStub        func(aws.Context, *ec2.CreateKeyPairInput, ...request.Option) (*ec2.CreateKeyPairOutput, error)
	createKeyPairWithContextMutex       sync.RWMutex
	createKeyPairWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateKeyPairInput
		arg3 []request.Option
	}
	createKeyPairWithContextReturns struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}
	createKeyPairWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}
	CreateLaunchTemplateStub        func(*ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error)
	createLaunchTemplateMutex       sync.RWMutex
	createLaunchTemplateArgsForCall []struct {
		arg1 *ec2.CreateLaunchTemplateInput
	}
	createLaunchTemplateReturns struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}
	createLaunchTemplateReturnsOnCall map[int]struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}
	CreateLaunchTemplateRequestStub        func(*ec2.CreateLaunchTemplateInput) (*request.Request, *ec2.CreateLaunchTemplateOutput)
	createLaunchTemplateRequestMutex       sync.RWMutex
	createLaunchTemplateRequestArgsForCall []struct {
		arg1 *ec2.CreateLaunchTemplateInput
	}
	createLaunchTemplateRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateOutput
	}
	createLaunchTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateOutput
	}
	CreateLaunchTemplateVersionStub        func(*ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error)
	createLaunchTemplateVersionMutex       sync.RWMutex
	createLaunchTemplateVersionArgsForCall []struct {
		arg1 *ec2.CreateLaunchTemplateVersionInput
	}
	createLaunchTemplateVersionReturns struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}
	createLaunchTemplateVersionReturnsOnCall map[int]struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}
	CreateLaunchTemplateVersionRequestStub        func(*ec2.CreateLaunchTemplateVersionInput) (*request.Request, *ec2.CreateLaunchTemplateVersionOutput)
	createLaunchTemplateVersionRequestMutex       sync.RWMutex
	createLaunchTemplateVersionRequestArgsForCall []struct {
		arg1 *ec2.CreateLaunchTemplateVersionInput
	}
	createLaunchTemplateVersionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateVersionOutput
	}
	createLaunchTemplateVersionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateVersionOutput
	}
	CreateLaunchTemplateVersionWithContextStub        func(aws.Context, *ec2.CreateLaunchTemplateVersionInput, ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error)
	createLaunchTemplateVersionWithContextMutex       sync.RWMutex
	createLaunchTemplateVersionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateLaunchTemplateVersionInput
		arg3 []request.Option
	}
	createLaunchTemplateVersionWithContextReturns struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}
	createLaunchTemplateVersionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}
	CreateLaunchTemplateWithContextStub        func(aws.Context, *ec2.CreateLaunchTemplateInput, ...request.Option) (*ec2.CreateLaunchTemplateOutput, error)
	createLaunchTemplateWithContextMutex       sync.RWMutex
	createLaunchTemplateWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateLaunchTemplateInput
		arg3 []request.Option
	}
	createLaunchTemplateWithContextReturns struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}
	createLaunchTemplateWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}
	CreateNatGatewayStub        func(*ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error)
	createNatGatewayMutex       sync.RWMutex
	createNatGatewayArgsForCall []struct {
		arg1 *ec2.CreateNatGatewayInput
	}
	createNatGatewayReturns struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}
	createNatGatewayReturnsOnCall map[int]struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}
	CreateNatGatewayRequestStub        func(*ec2.CreateNatGatewayInput) (*request.Request, *ec2.CreateNatGatewayOutput)
	createNatGatewayRequestMutex       sync.RWMutex
	createNatGatewayRequestArgsForCall []struct {
		arg1 *ec2.CreateNatGatewayInput
	}
	createNatGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateNatGatewayOutput
	}
	createNatGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateNatGatewayOutput
	}
	CreateNatGatewayWithContextStub        func(aws.Context, *ec2.CreateNatGatewayInput, ...request.Option) (*ec2.CreateNatGatewayOutput, error)
	createNatGatewayWithContextMutex       sync.RWMutex
	createNatGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateNatGatewayInput
		arg3 []request.Option
	}
	createNatGatewayWithContextReturns struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}
	createNatGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}
	CreateNetworkAclStub        func(*ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error)
	createNetworkAclMutex       sync.RWMutex
	createNetworkAclArgsForCall []struct {
		arg1 *ec2.CreateNetworkAclInput
	}
	createNetworkAclReturns struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}
	createNetworkAclReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}
	CreateNetworkAclEntryStub        func(*ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error)
	createNetworkAclEntryMutex       sync.RWMutex
	createNetworkAclEntryArgsForCall []struct {
		arg1 *ec2.CreateNetworkAclEntryInput
	}
	createNetworkAclEntryReturns struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}
	createNetworkAclEntryReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}
	CreateNetworkAclEntryRequestStub        func(*ec2.CreateNetworkAclEntryInput) (*request.Request, *ec2.CreateNetworkAclEntryOutput)
	createNetworkAclEntryRequestMutex       sync.RWMutex
	createNetworkAclEntryRequestArgsForCall []struct {
		arg1 *ec2.CreateNetworkAclEntryInput
	}
	createNetworkAclEntryRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclEntryOutput
	}
	createNetworkAclEntryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclEntryOutput
	}
	CreateNetworkAclEntryWithContextStub        func(aws.Context, *ec2.CreateNetworkAclEntryInput, ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error)
	createNetworkAclEntryWithContextMutex       sync.RWMutex
	createNetworkAclEntryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkAclEntryInput
		arg3 []request.Option
	}
	createNetworkAclEntryWithContextReturns struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}
	createNetworkAclEntryWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}
	CreateNetworkAclRequestStub        func(*ec2.CreateNetworkAclInput) (*request.Request, *ec2.CreateNetworkAclOutput)
	createNetworkAclRequestMutex       sync.RWMutex
	createNetworkAclRequestArgsForCall []struct {
		arg1 *ec2.CreateNetworkAclInput
	}
	createNetworkAclRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclOutput
	}
	createNetworkAclRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclOutput
	}
	CreateNetworkAclWithContextStub        func(aws.Context, *ec2.CreateNetworkAclInput, ...request.Option) (*ec2.CreateNetworkAclOutput, error)
	createNetworkAclWithContextMutex       sync.RWMutex
	createNetworkAclWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkAclInput
		arg3 []request.Option
	}
	createNetworkAclWithContextReturns struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}
	createNetworkAclWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}
	CreateNetworkInterfaceStub        func(*ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error)
	createNetworkInterfaceMutex       sync.RWMutex
	createNetworkInterfaceArgsForCall []struct {
		arg1 *ec2.CreateNetworkInterfaceInput
	}
	createNetworkInterfaceReturns struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}
	createNetworkInterfaceReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}
	CreateNetworkInterfacePermissionStub        func(*ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error)
	createNetworkInterfacePermissionMutex       sync.RWMutex
	createNetworkInterfacePermissionArgsForCall []struct {
		arg1 *ec2.CreateNetworkInterfacePermissionInput
	}
	createNetworkInterfacePermissionReturns struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}
	createNetworkInterfacePermissionReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}
	CreateNetworkInterfacePermissionRequestStub        func(*ec2.CreateNetworkInterfacePermissionInput) (*request.Request, *ec2.CreateNetworkInterfacePermissionOutput)
	createNetworkInterfacePermissionRequestMutex       sync.RWMutex
	createNetworkInterfacePermissionRequestArgsForCall []struct {
		arg1 *ec2.CreateNetworkInterfacePermissionInput
	}
	createNetworkInterfacePermissionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfacePermissionOutput
	}
	createNetworkInterfacePermissionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfacePermissionOutput
	}
	CreateNetworkInterfacePermissionWithContextStub        func(aws.Context, *ec2.CreateNetworkInterfacePermissionInput, ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error)
	createNetworkInterfacePermissionWithContextMutex       sync.RWMutex
	createNetworkInterfacePermissionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkInterfacePermissionInput
		arg3 []request.Option
	}
	createNetworkInterfacePermissionWithContextReturns struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}
	createNetworkInterfacePermissionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}
	CreateNetworkInterfaceRequestStub        func(*ec2.CreateNetworkInterfaceInput) (*request.Request, *ec2.CreateNetworkInterfaceOutput)
	createNetworkInterfaceRequestMutex       sync.RWMutex
	createNetworkInterfaceRequestArgsForCall []struct {
		arg1 *ec2.CreateNetworkInterfaceInput
	}
	createNetworkInterfaceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfaceOutput
	}
	createNetworkInterfaceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfaceOutput
	}
	CreateNetworkInterfaceWithContextStub        func(aws.Context, *ec2.CreateNetworkInterfaceInput, ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error)
	createNetworkInterfaceWithContextMutex       sync.RWMutex
	createNetworkInterfaceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkInterfaceInput
		arg3 []request.Option
	}
	createNetworkInterfaceWithContextReturns struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}
	createNetworkInterfaceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}
	CreatePlacementGroupStub        func(*ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error)
	createPlacementGroupMutex       sync.RWMutex
	createPlacementGroupArgsForCall []struct {
		arg1 *ec2.CreatePlacementGroupInput
	}
	createPlacementGroupReturns struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}
	createPlacementGroupReturnsOnCall map[int]struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}
	CreatePlacementGroupRequestStub        func(*ec2.CreatePlacementGroupInput) (*request.Request, *ec2.CreatePlacementGroupOutput)
	createPlacementGroupRequestMutex       sync.RWMutex
	createPlacementGroupRequestArgsForCall []struct {
		arg1 *ec2.CreatePlacementGroupInput
	}
	createPlacementGroupRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreatePlacementGroupOutput
	}
	createPlacementGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreatePlacementGroupOutput
	}
	CreatePlacementGroupWithContextStub        func(aws.Context, *ec2.CreatePlacementGroupInput, ...request.Option) (*ec2.CreatePlacementGroupOutput, error)
	createPlacementGroupWithContextMutex       sync.RWMutex
	createPlacementGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreatePlacementGroupInput
		arg3 []request.Option
	}
	createPlacementGroupWithContextReturns struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}
	createPlacementGroupWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}
	CreateReservedInstancesListingStub        func(*ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error)
	createReservedInstancesListingMutex       sync.RWMutex
	createReservedInstancesListingArgsForCall []struct {
		arg1 *ec2.CreateReservedInstancesListingInput
	}
	createReservedInstancesListingReturns struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}
	createReservedInstancesListingReturnsOnCall map[int]struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}
	CreateReservedInstancesListingRequestStub        func(*ec2.CreateReservedInstancesListingInput) (*request.Request, *ec2.CreateReservedInstancesListingOutput)
	createReservedInstancesListingRequestMutex       sync.RWMutex
	createReservedInstancesListingRequestArgsForCall []struct {
		arg1 *ec2.CreateReservedInstancesListingInput
	}
	createReservedInstancesListingRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateReservedInstancesListingOutput
	}
	createReservedInstancesListingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateReservedInstancesListingOutput
	}
	CreateReservedInstancesListingWithContextStub        func(aws.Context, *ec2.CreateReservedInstancesListingInput, ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error)
	createReservedInstancesListingWithContextMutex       sync.RWMutex
	createReservedInstancesListingWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateReservedInstancesListingInput
		arg3 []request.Option
	}
	createReservedInstancesListingWithContextReturns struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}
	createReservedInstancesListingWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}
	CreateRouteStub        func(*ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error)
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		arg1 *ec2.CreateRouteInput
	}
	createRouteReturns struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}
	CreateRouteRequestStub        func(*ec2.CreateRouteInput) (*request.Request, *ec2.CreateRouteOutput)
	createRouteRequestMutex       sync.RWMutex
	createRouteRequestArgsForCall []struct {
		arg1 *ec2.CreateRouteInput
	}
	createRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateRouteOutput
	}
	createRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateRouteOutput
	}
	CreateRouteTableStub        func(*ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error)
	createRouteTableMutex       sync.RWMutex
	createRouteTableArgsForCall []struct {
		arg1 *ec2.CreateRouteTableInput
	}
	createRouteTableReturns struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}
	createRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}
	CreateRouteTableRequestStub        func(*ec2.CreateRouteTableInput) (*request.Request, *ec2.CreateRouteTableOutput)
	createRouteTableRequestMutex       sync.RWMutex
	createRouteTableRequestArgsForCall []struct {
		arg1 *ec2.CreateRouteTableInput
	}
	createRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateRouteTableOutput
	}
	createRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateRouteTableOutput
	}
	CreateRouteTableWithContextStub        func(aws.Context, *ec2.CreateRouteTableInput, ...request.Option) (*ec2.CreateRouteTableOutput, error)
	createRouteTableWithContextMutex       sync.RWMutex
	createRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateRouteTableInput
		arg3 []request.Option
	}
	createRouteTableWithContextReturns struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}
	createRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}
	CreateRouteWithContextStub        func(aws.Context, *ec2.CreateRouteInput, ...request.Option) (*ec2.CreateRouteOutput, error)
	createRouteWithContextMutex       sync.RWMutex
	createRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateRouteInput
		arg3 []request.Option
	}
	createRouteWithContextReturns struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}
	createRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}
	CreateSecurityGroupStub        func(*ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error)
	createSecurityGroupMutex       sync.RWMutex
	createSecurityGroupArgsForCall []struct {
		arg1 *ec2.CreateSecurityGroupInput
	}
	createSecurityGroupReturns struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}
	createSecurityGroupReturnsOnCall map[int]struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}
	CreateSecurityGroupRequestStub        func(*ec2.CreateSecurityGroupInput) (*request.Request, *ec2.CreateSecurityGroupOutput)
	createSecurityGroupRequestMutex       sync.RWMutex
	createSecurityGroupRequestArgsForCall []struct {
		arg1 *ec2.CreateSecurityGroupInput
	}
	createSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateSecurityGroupOutput
	}
	createSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateSecurityGroupOutput
	}
	CreateSecurityGroupWithContextStub        func(aws.Context, *ec2.CreateSecurityGroupInput, ...request.Option) (*ec2.CreateSecurityGroupOutput, error)
	createSecurityGroupWithContextMutex       sync.RWMutex
	createSecurityGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateSecurityGroupInput
		arg3 []request.Option
	}
	createSecurityGroupWithContextReturns struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}
	createSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}
	CreateSnapshotStub        func(*ec2.CreateSnapshotInput) (*ec2.Snapshot, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		arg1 *ec2.CreateSnapshotInput
	}
	createSnapshotReturns struct {
		result1 *ec2.Snapshot
		result2 error
	}
	createSnapshotReturnsOnCall map[int]struct {
		result1 *ec2.Snapshot
		result2 error
	}
	CreateSnapshotRequestStub        func(*ec2.CreateSnapshotInput) (*request.Request, *ec2.Snapshot)
	createSnapshotRequestMutex       sync.RWMutex
	createSnapshotRequestArgsForCall []struct {
		arg1 *ec2.CreateSnapshotInput
	}
	createSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *ec2.Snapshot
	}
	createSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.Snapshot
	}
	CreateSnapshotWithContextStub        func(aws.Context, *ec2.CreateSnapshotInput, ...request.Option) (*ec2.Snapshot, error)
	createSnapshotWithContextMutex       sync.RWMutex
	createSnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateSnapshotInput
		arg3 []request.Option
	}
	createSnapshotWithContextReturns struct {
		result1 *ec2.Snapshot
		result2 error
	}
	createSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *ec2.Snapshot
		result2 error
	}
	CreateSpotDatafeedSubscriptionStub        func(*ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)
	createSpotDatafeedSubscriptionMutex       sync.RWMutex
	createSpotDatafeedSubscriptionArgsForCall []struct {
		arg1 *ec2.CreateSpotDatafeedSubscriptionInput
	}
	createSpotDatafeedSubscriptionReturns struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}
	createSpotDatafeedSubscriptionReturnsOnCall map[int]struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}
	CreateSpotDatafeedSubscriptionRequestStub        func(*ec2.CreateSpotDatafeedSubscriptionInput) (*request.Request, *ec2.CreateSpotDatafeedSubscriptionOutput)
	createSpotDatafeedSubscriptionRequestMutex       sync.RWMutex
	createSpotDatafeedSubscriptionRequestArgsForCall []struct {
		arg1 *ec2.CreateSpotDatafeedSubscriptionInput
	}
	createSpotDatafeedSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateSpotDatafeedSubscriptionOutput
	}
	createSpotDatafeedSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateSpotDatafeedSubscriptionOutput
	}
	CreateSpotDatafeedSubscriptionWithContextStub        func(aws.Context, *ec2.CreateSpotDatafeedSubscriptionInput, ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)
	createSpotDatafeedSubscriptionWithContextMutex       sync.RWMutex
	createSpotDatafeedSubscriptionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateSpotDatafeedSubscriptionInput
		arg3 []request.Option
	}
	createSpotDatafeedSubscriptionWithContextReturns struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}
	createSpotDatafeedSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}
	CreateSubnetStub        func(*ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error)
	createSubnetMutex       sync.RWMutex
	createSubnetArgsForCall []struct {
		arg1 *ec2.CreateSubnetInput
	}
	createSubnetReturns struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}
	createSubnetReturnsOnCall map[int]struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}
	CreateSubnetRequestStub        func(*ec2.CreateSubnetInput) (*request.Request, *ec2.CreateSubnetOutput)
	createSubnetRequestMutex       sync.RWMutex
	createSubnetRequestArgsForCall []struct {
		arg1 *ec2.CreateSubnetInput
	}
	createSubnetRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateSubnetOutput
	}
	createSubnetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateSubnetOutput
	}
	CreateSubnetWithContextStub        func(aws.Context, *ec2.CreateSubnetInput, ...request.Option) (*ec2.CreateSubnetOutput, error)
	createSubnetWithContextMutex       sync.RWMutex
	createSubnetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateSubnetInput
		arg3 []request.Option
	}
	createSubnetWithContextReturns struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}
	createSubnetWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}
	CreateTagsStub        func(*ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)
	createTagsMutex       sync.RWMutex
	createTagsArgsForCall []struct {
		arg1 *ec2.CreateTagsInput
	}
	createTagsReturns struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}
	createTagsReturnsOnCall map[int]struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}
	CreateTagsRequestStub        func(*ec2.CreateTagsInput) (*request.Request, *ec2.CreateTagsOutput)
	createTagsRequestMutex       sync.RWMutex
	createTagsRequestArgsForCall []struct {
		arg1 *ec2.CreateTagsInput
	}
	createTagsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateTagsOutput
	}
	createTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateTagsOutput
	}
	CreateTagsWithContextStub        func(aws.Context, *ec2.CreateTagsInput, ...request.Option) (*ec2.CreateTagsOutput, error)
	createTagsWithContextMutex       sync.RWMutex
	createTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateTagsInput
		arg3 []request.Option
	}
	createTagsWithContextReturns struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}
	createTagsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}
	CreateTransitGatewayStub        func(*ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error)
	createTransitGatewayMutex       sync.RWMutex
	createTransitGatewayArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayInput
	}
	createTransitGatewayReturns struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}
	createTransitGatewayReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}
	CreateTransitGatewayRequestStub        func(*ec2.CreateTransitGatewayInput) (*request.Request, *ec2.CreateTransitGatewayOutput)
	createTransitGatewayRequestMutex       sync.RWMutex
	createTransitGatewayRequestArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayInput
	}
	createTransitGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayOutput
	}
	createTransitGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayOutput
	}
	CreateTransitGatewayRouteStub        func(*ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error)
	createTransitGatewayRouteMutex       sync.RWMutex
	createTransitGatewayRouteArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayRouteInput
	}
	createTransitGatewayRouteReturns struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}
	createTransitGatewayRouteReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}
	CreateTransitGatewayRouteRequestStub        func(*ec2.CreateTransitGatewayRouteInput) (*request.Request, *ec2.CreateTransitGatewayRouteOutput)
	createTransitGatewayRouteRequestMutex       sync.RWMutex
	createTransitGatewayRouteRequestArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayRouteInput
	}
	createTransitGatewayRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteOutput
	}
	createTransitGatewayRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteOutput
	}
	CreateTransitGatewayRouteTableStub        func(*ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error)
	createTransitGatewayRouteTableMutex       sync.RWMutex
	createTransitGatewayRouteTableArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayRouteTableInput
	}
	createTransitGatewayRouteTableReturns struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}
	createTransitGatewayRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}
	CreateTransitGatewayRouteTableRequestStub        func(*ec2.CreateTransitGatewayRouteTableInput) (*request.Request, *ec2.CreateTransitGatewayRouteTableOutput)
	createTransitGatewayRouteTableRequestMutex       sync.RWMutex
	createTransitGatewayRouteTableRequestArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayRouteTableInput
	}
	createTransitGatewayRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteTableOutput
	}
	createTransitGatewayRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteTableOutput
	}
	CreateTransitGatewayRouteTableWithContextStub        func(aws.Context, *ec2.CreateTransitGatewayRouteTableInput, ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error)
	createTransitGatewayRouteTableWithContextMutex       sync.RWMutex
	createTransitGatewayRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayRouteTableInput
		arg3 []request.Option
	}
	createTransitGatewayRouteTableWithContextReturns struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}
	createTransitGatewayRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}
	CreateTransitGatewayRouteWithContextStub        func(aws.Context, *ec2.CreateTransitGatewayRouteInput, ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error)
	createTransitGatewayRouteWithContextMutex       sync.RWMutex
	createTransitGatewayRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayRouteInput
		arg3 []request.Option
	}
	createTransitGatewayRouteWithContextReturns struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}
	createTransitGatewayRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}
	CreateTransitGatewayVpcAttachmentStub        func(*ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)
	createTransitGatewayVpcAttachmentMutex       sync.RWMutex
	createTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}
	createTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}
	createTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}
	CreateTransitGatewayVpcAttachmentRequestStub        func(*ec2.CreateTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayVpcAttachmentOutput)
	createTransitGatewayVpcAttachmentRequestMutex       sync.RWMutex
	createTransitGatewayVpcAttachmentRequestArgsForCall []struct {
		arg1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}
	createTransitGatewayVpcAttachmentRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayVpcAttachmentOutput
	}
	createTransitGatewayVpcAttachmentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayVpcAttachmentOutput
	}
	CreateTransitGatewayVpcAttachmentWithContextStub        func(aws.Context, *ec2.CreateTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)
	createTransitGatewayVpcAttachmentWithContextMutex       sync.RWMutex
	createTransitGatewayVpcAttachmentWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}
	createTransitGatewayVpcAttachmentWithContextReturns struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}
	createTransitGatewayVpcAttachmentWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}
	CreateTransitGatewayWithContextStub        func(aws.Context, *ec2.CreateTransitGatewayInput, ...request.Option) (*ec2.CreateTransitGatewayOutput, error)
	createTransitGatewayWithContextMutex       sync.RWMutex
	createTransitGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayInput
		arg3 []request.Option
	}
	createTransitGatewayWithContextReturns struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}
	createTransitGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}
	CreateVolumeStub        func(*ec2.CreateVolumeInput) (*ec2.Volume, error)
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		arg1 *ec2.CreateVolumeInput
	}
	createVolumeReturns struct {
		result1 *ec2.Volume
		result2 error
	}
	createVolumeReturnsOnCall map[int]struct {
		result1 *ec2.Volume
		result2 error
	}
	CreateVolumeRequestStub        func(*ec2.CreateVolumeInput) (*request.Request, *ec2.Volume)
	createVolumeRequestMutex       sync.RWMutex
	createVolumeRequestArgsForCall []struct {
		arg1 *ec2.CreateVolumeInput
	}
	createVolumeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.Volume
	}
	createVolumeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.Volume
	}
	CreateVolumeWithContextStub        func(aws.Context, *ec2.CreateVolumeInput, ...request.Option) (*ec2.Volume, error)
	createVolumeWithContextMutex       sync.RWMutex
	createVolumeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVolumeInput
		arg3 []request.Option
	}
	createVolumeWithContextReturns struct {
		result1 *ec2.Volume
		result2 error
	}
	createVolumeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.Volume
		result2 error
	}
	CreateVpcStub        func(*ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error)
	createVpcMutex       sync.RWMutex
	createVpcArgsForCall []struct {
		arg1 *ec2.CreateVpcInput
	}
	createVpcReturns struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}
	createVpcReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}
	CreateVpcEndpointStub        func(*ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error)
	createVpcEndpointMutex       sync.RWMutex
	createVpcEndpointArgsForCall []struct {
		arg1 *ec2.CreateVpcEndpointInput
	}
	createVpcEndpointReturns struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}
	createVpcEndpointReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}
	CreateVpcEndpointConnectionNotificationStub        func(*ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)
	createVpcEndpointConnectionNotificationMutex       sync.RWMutex
	createVpcEndpointConnectionNotificationArgsForCall []struct {
		arg1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}
	createVpcEndpointConnectionNotificationReturns struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}
	createVpcEndpointConnectionNotificationReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}
	CreateVpcEndpointConnectionNotificationRequestStub        func(*ec2.CreateVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.CreateVpcEndpointConnectionNotificationOutput)
	createVpcEndpointConnectionNotificationRequestMutex       sync.RWMutex
	createVpcEndpointConnectionNotificationRequestArgsForCall []struct {
		arg1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}
	createVpcEndpointConnectionNotificationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointConnectionNotificationOutput
	}
	createVpcEndpointConnectionNotificationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointConnectionNotificationOutput
	}
	CreateVpcEndpointConnectionNotificationWithContextStub        func(aws.Context, *ec2.CreateVpcEndpointConnectionNotificationInput, ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)
	createVpcEndpointConnectionNotificationWithContextMutex       sync.RWMutex
	createVpcEndpointConnectionNotificationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcEndpointConnectionNotificationInput
		arg3 []request.Option
	}
	createVpcEndpointConnectionNotificationWithContextReturns struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}
	createVpcEndpointConnectionNotificationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}
	CreateVpcEndpointRequestStub        func(*ec2.CreateVpcEndpointInput) (*request.Request, *ec2.CreateVpcEndpointOutput)
	createVpcEndpointRequestMutex       sync.RWMutex
	createVpcEndpointRequestArgsForCall []struct {
		arg1 *ec2.CreateVpcEndpointInput
	}
	createVpcEndpointRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointOutput
	}
	createVpcEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointOutput
	}
	CreateVpcEndpointServiceConfigurationStub        func(*ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)
	createVpcEndpointServiceConfigurationMutex       sync.RWMutex
	createVpcEndpointServiceConfigurationArgsForCall []struct {
		arg1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}
	createVpcEndpointServiceConfigurationReturns struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}
	createVpcEndpointServiceConfigurationReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}
	CreateVpcEndpointServiceConfigurationRequestStub        func(*ec2.CreateVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.CreateVpcEndpointServiceConfigurationOutput)
	createVpcEndpointServiceConfigurationRequestMutex       sync.RWMutex
	createVpcEndpointServiceConfigurationRequestArgsForCall []struct {
		arg1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}
	createVpcEndpointServiceConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointServiceConfigurationOutput
	}
	createVpcEndpointServiceConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointServiceConfigurationOutput
	}
	CreateVpcEndpointServiceConfigurationWithContextStub        func(aws.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)
	createVpcEndpointServiceConfigurationWithContextMutex       sync.RWMutex
	createVpcEndpointServiceConfigurationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcEndpointServiceConfigurationInput
		arg3 []request.Option
	}
	createVpcEndpointServiceConfigurationWithContextReturns struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}
	createVpcEndpointServiceConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}
	CreateVpcEndpointWithContextStub        func(aws.Context, *ec2.CreateVpcEndpointInput, ...request.Option) (*ec2.CreateVpcEndpointOutput, error)
	createVpcEndpointWithContextMutex       sync.RWMutex
	createVpcEndpointWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcEndpointInput
		arg3 []request.Option
	}
	createVpcEndpointWithContextReturns struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}
	createVpcEndpointWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}
	CreateVpcPeeringConnectionStub        func(*ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error)
	createVpcPeeringConnectionMutex       sync.RWMutex
	createVpcPeeringConnectionArgsForCall []struct {
		arg1 *ec2.CreateVpcPeeringConnectionInput
	}
	createVpcPeeringConnectionReturns struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}
	createVpcPeeringConnectionReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}
	CreateVpcPeeringConnectionRequestStub        func(*ec2.CreateVpcPeeringConnectionInput) (*request.Request, *ec2.CreateVpcPeeringConnectionOutput)
	createVpcPeeringConnectionRequestMutex       sync.RWMutex
	createVpcPeeringConnectionRequestArgsForCall []struct {
		arg1 *ec2.CreateVpcPeeringConnectionInput
	}
	createVpcPeeringConnectionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpcPeeringConnectionOutput
	}
	createVpcPeeringConnectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpcPeeringConnectionOutput
	}
	CreateVpcPeeringConnectionWithContextStub        func(aws.Context, *ec2.CreateVpcPeeringConnectionInput, ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error)
	createVpcPeeringConnectionWithContextMutex       sync.RWMutex
	createVpcPeeringConnectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcPeeringConnectionInput
		arg3 []request.Option
	}
	createVpcPeeringConnectionWithContextReturns struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}
	createVpcPeeringConnectionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}
	CreateVpcRequestStub        func(*ec2.CreateVpcInput) (*request.Request, *ec2.CreateVpcOutput)
	createVpcRequestMutex       sync.RWMutex
	createVpcRequestArgsForCall []struct {
		arg1 *ec2.CreateVpcInput
	}
	createVpcRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpcOutput
	}
	createVpcRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpcOutput
	}
	CreateVpcWithContextStub        func(aws.Context, *ec2.CreateVpcInput, ...request.Option) (*ec2.CreateVpcOutput, error)
	createVpcWithContextMutex       sync.RWMutex
	createVpcWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcInput
		arg3 []request.Option
	}
	createVpcWithContextReturns struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}
	createVpcWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}
	CreateVpnConnectionStub        func(*ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error)
	createVpnConnectionMutex       sync.RWMutex
	createVpnConnectionArgsForCall []struct {
		arg1 *ec2.CreateVpnConnectionInput
	}
	createVpnConnectionReturns struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}
	createVpnConnectionReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}
	CreateVpnConnectionRequestStub        func(*ec2.CreateVpnConnectionInput) (*request.Request, *ec2.CreateVpnConnectionOutput)
	createVpnConnectionRequestMutex       sync.RWMutex
	createVpnConnectionRequestArgsForCall []struct {
		arg1 *ec2.CreateVpnConnectionInput
	}
	createVpnConnectionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionOutput
	}
	createVpnConnectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionOutput
	}
	CreateVpnConnectionRouteStub        func(*ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error)
	createVpnConnectionRouteMutex       sync.RWMutex
	createVpnConnectionRouteArgsForCall []struct {
		arg1 *ec2.CreateVpnConnectionRouteInput
	}
	createVpnConnectionRouteReturns struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}
	createVpnConnectionRouteReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}
	CreateVpnConnectionRouteRequestStub        func(*ec2.CreateVpnConnectionRouteInput) (*request.Request, *ec2.CreateVpnConnectionRouteOutput)
	createVpnConnectionRouteRequestMutex       sync.RWMutex
	createVpnConnectionRouteRequestArgsForCall []struct {
		arg1 *ec2.CreateVpnConnectionRouteInput
	}
	createVpnConnectionRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionRouteOutput
	}
	createVpnConnectionRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionRouteOutput
	}
	CreateVpnConnectionRouteWithContextStub        func(aws.Context, *ec2.CreateVpnConnectionRouteInput, ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error)
	createVpnConnectionRouteWithContextMutex       sync.RWMutex
	createVpnConnectionRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpnConnectionRouteInput
		arg3 []request.Option
	}
	createVpnConnectionRouteWithContextReturns struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}
	createVpnConnectionRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}
	CreateVpnConnectionWithContextStub        func(aws.Context, *ec2.CreateVpnConnectionInput, ...request.Option) (*ec2.CreateVpnConnectionOutput, error)
	createVpnConnectionWithContextMutex       sync.RWMutex
	createVpnConnectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpnConnectionInput
		arg3 []request.Option
	}
	createVpnConnectionWithContextReturns struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}
	createVpnConnectionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}
	CreateVpnGatewayStub        func(*ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error)
	createVpnGatewayMutex       sync.RWMutex
	createVpnGatewayArgsForCall []struct {
		arg1 *ec2.CreateVpnGatewayInput
	}
	createVpnGatewayReturns struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}
	createVpnGatewayReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}
	CreateVpnGatewayRequestStub        func(*ec2.CreateVpnGatewayInput) (*request.Request, *ec2.CreateVpnGatewayOutput)
	createVpnGatewayRequestMutex       sync.RWMutex
	createVpnGatewayRequestArgsForCall []struct {
		arg1 *ec2.CreateVpnGatewayInput
	}
	createVpnGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.CreateVpnGatewayOutput
	}
	createVpnGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.CreateVpnGatewayOutput
	}
	CreateVpnGatewayWithContextStub        func(aws.Context, *ec2.CreateVpnGatewayInput, ...request.Option) (*ec2.CreateVpnGatewayOutput, error)
	createVpnGatewayWithContextMutex       sync.RWMutex
	createVpnGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpnGatewayInput
		arg3 []request.Option
	}
	createVpnGatewayWithContextReturns struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}
	createVpnGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}
	DeleteClientVpnEndpointStub        func(*ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error)
	deleteClientVpnEndpointMutex       sync.RWMutex
	deleteClientVpnEndpointArgsForCall []struct {
		arg1 *ec2.DeleteClientVpnEndpointInput
	}
	deleteClientVpnEndpointReturns struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}
	deleteClientVpnEndpointReturnsOnCall map[int]struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}
	DeleteClientVpnEndpointRequestStub        func(*ec2.DeleteClientVpnEndpointInput) (*request.Request, *ec2.DeleteClientVpnEndpointOutput)
	deleteClientVpnEndpointRequestMutex       sync.RWMutex
	deleteClientVpnEndpointRequestArgsForCall []struct {
		arg1 *ec2.DeleteClientVpnEndpointInput
	}
	deleteClientVpnEndpointRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnEndpointOutput
	}
	deleteClientVpnEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnEndpointOutput
	}
	DeleteClientVpnEndpointWithContextStub        func(aws.Context, *ec2.DeleteClientVpnEndpointInput, ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error)
	deleteClientVpnEndpointWithContextMutex       sync.RWMutex
	deleteClientVpnEndpointWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteClientVpnEndpointInput
		arg3 []request.Option
	}
	deleteClientVpnEndpointWithContextReturns struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}
	deleteClientVpnEndpointWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}
	DeleteClientVpnRouteStub        func(*ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error)
	deleteClientVpnRouteMutex       sync.RWMutex
	deleteClientVpnRouteArgsForCall []struct {
		arg1 *ec2.DeleteClientVpnRouteInput
	}
	deleteClientVpnRouteReturns struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}
	deleteClientVpnRouteReturnsOnCall map[int]struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}
	DeleteClientVpnRouteRequestStub        func(*ec2.DeleteClientVpnRouteInput) (*request.Request, *ec2.DeleteClientVpnRouteOutput)
	deleteClientVpnRouteRequestMutex       sync.RWMutex
	deleteClientVpnRouteRequestArgsForCall []struct {
		arg1 *ec2.DeleteClientVpnRouteInput
	}
	deleteClientVpnRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnRouteOutput
	}
	deleteClientVpnRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnRouteOutput
	}
	DeleteClientVpnRouteWithContextStub        func(aws.Context, *ec2.DeleteClientVpnRouteInput, ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error)
	deleteClientVpnRouteWithContextMutex       sync.RWMutex
	deleteClientVpnRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteClientVpnRouteInput
		arg3 []request.Option
	}
	deleteClientVpnRouteWithContextReturns struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}
	deleteClientVpnRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}
	DeleteCustomerGatewayStub        func(*ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error)
	deleteCustomerGatewayMutex       sync.RWMutex
	deleteCustomerGatewayArgsForCall []struct {
		arg1 *ec2.DeleteCustomerGatewayInput
	}
	deleteCustomerGatewayReturns struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}
	deleteCustomerGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}
	DeleteCustomerGatewayRequestStub        func(*ec2.DeleteCustomerGatewayInput) (*request.Request, *ec2.DeleteCustomerGatewayOutput)
	deleteCustomerGatewayRequestMutex       sync.RWMutex
	deleteCustomerGatewayRequestArgsForCall []struct {
		arg1 *ec2.DeleteCustomerGatewayInput
	}
	deleteCustomerGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteCustomerGatewayOutput
	}
	deleteCustomerGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteCustomerGatewayOutput
	}
	DeleteCustomerGatewayWithContextStub        func(aws.Context, *ec2.DeleteCustomerGatewayInput, ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error)
	deleteCustomerGatewayWithContextMutex       sync.RWMutex
	deleteCustomerGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteCustomerGatewayInput
		arg3 []request.Option
	}
	deleteCustomerGatewayWithContextReturns struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}
	deleteCustomerGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}
	DeleteDhcpOptionsStub        func(*ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error)
	deleteDhcpOptionsMutex       sync.RWMutex
	deleteDhcpOptionsArgsForCall []struct {
		arg1 *ec2.DeleteDhcpOptionsInput
	}
	deleteDhcpOptionsReturns struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}
	deleteDhcpOptionsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}
	DeleteDhcpOptionsRequestStub        func(*ec2.DeleteDhcpOptionsInput) (*request.Request, *ec2.DeleteDhcpOptionsOutput)
	deleteDhcpOptionsRequestMutex       sync.RWMutex
	deleteDhcpOptionsRequestArgsForCall []struct {
		arg1 *ec2.DeleteDhcpOptionsInput
	}
	deleteDhcpOptionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteDhcpOptionsOutput
	}
	deleteDhcpOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteDhcpOptionsOutput
	}
	DeleteDhcpOptionsWithContextStub        func(aws.Context, *ec2.DeleteDhcpOptionsInput, ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error)
	deleteDhcpOptionsWithContextMutex       sync.RWMutex
	deleteDhcpOptionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteDhcpOptionsInput
		arg3 []request.Option
	}
	deleteDhcpOptionsWithContextReturns struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}
	deleteDhcpOptionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}
	DeleteEgressOnlyInternetGatewayStub        func(*ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)
	deleteEgressOnlyInternetGatewayMutex       sync.RWMutex
	deleteEgressOnlyInternetGatewayArgsForCall []struct {
		arg1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}
	deleteEgressOnlyInternetGatewayReturns struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}
	deleteEgressOnlyInternetGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}
	DeleteEgressOnlyInternetGatewayRequestStub        func(*ec2.DeleteEgressOnlyInternetGatewayInput) (*request.Request, *ec2.DeleteEgressOnlyInternetGatewayOutput)
	deleteEgressOnlyInternetGatewayRequestMutex       sync.RWMutex
	deleteEgressOnlyInternetGatewayRequestArgsForCall []struct {
		arg1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}
	deleteEgressOnlyInternetGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteEgressOnlyInternetGatewayOutput
	}
	deleteEgressOnlyInternetGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteEgressOnlyInternetGatewayOutput
	}
	DeleteEgressOnlyInternetGatewayWithContextStub        func(aws.Context, *ec2.DeleteEgressOnlyInternetGatewayInput, ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)
	deleteEgressOnlyInternetGatewayWithContextMutex       sync.RWMutex
	deleteEgressOnlyInternetGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteEgressOnlyInternetGatewayInput
		arg3 []request.Option
	}
	deleteEgressOnlyInternetGatewayWithContextReturns struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}
	deleteEgressOnlyInternetGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}
	DeleteFleetsStub        func(*ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error)
	deleteFleetsMutex       sync.RWMutex
	deleteFleetsArgsForCall []struct {
		arg1 *ec2.DeleteFleetsInput
	}
	deleteFleetsReturns struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}
	deleteFleetsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}
	DeleteFleetsRequestStub        func(*ec2.DeleteFleetsInput) (*request.Request, *ec2.DeleteFleetsOutput)
	deleteFleetsRequestMutex       sync.RWMutex
	deleteFleetsRequestArgsForCall []struct {
		arg1 *ec2.DeleteFleetsInput
	}
	deleteFleetsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteFleetsOutput
	}
	deleteFleetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteFleetsOutput
	}
	DeleteFleetsWithContextStub        func(aws.Context, *ec2.DeleteFleetsInput, ...request.Option) (*ec2.DeleteFleetsOutput, error)
	deleteFleetsWithContextMutex       sync.RWMutex
	deleteFleetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteFleetsInput
		arg3 []request.Option
	}
	deleteFleetsWithContextReturns struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}
	deleteFleetsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}
	DeleteFlowLogsStub        func(*ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error)
	deleteFlowLogsMutex       sync.RWMutex
	deleteFlowLogsArgsForCall []struct {
		arg1 *ec2.DeleteFlowLogsInput
	}
	deleteFlowLogsReturns struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}
	deleteFlowLogsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}
	DeleteFlowLogsRequestStub        func(*ec2.DeleteFlowLogsInput) (*request.Request, *ec2.DeleteFlowLogsOutput)
	deleteFlowLogsRequestMutex       sync.RWMutex
	deleteFlowLogsRequestArgsForCall []struct {
		arg1 *ec2.DeleteFlowLogsInput
	}
	deleteFlowLogsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteFlowLogsOutput
	}
	deleteFlowLogsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteFlowLogsOutput
	}
	DeleteFlowLogsWithContextStub        func(aws.Context, *ec2.DeleteFlowLogsInput, ...request.Option) (*ec2.DeleteFlowLogsOutput, error)
	deleteFlowLogsWithContextMutex       sync.RWMutex
	deleteFlowLogsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteFlowLogsInput
		arg3 []request.Option
	}
	deleteFlowLogsWithContextReturns struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}
	deleteFlowLogsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}
	DeleteFpgaImageStub        func(*ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error)
	deleteFpgaImageMutex       sync.RWMutex
	deleteFpgaImageArgsForCall []struct {
		arg1 *ec2.DeleteFpgaImageInput
	}
	deleteFpgaImageReturns struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}
	deleteFpgaImageReturnsOnCall map[int]struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}
	DeleteFpgaImageRequestStub        func(*ec2.DeleteFpgaImageInput) (*request.Request, *ec2.DeleteFpgaImageOutput)
	deleteFpgaImageRequestMutex       sync.RWMutex
	deleteFpgaImageRequestArgsForCall []struct {
		arg1 *ec2.DeleteFpgaImageInput
	}
	deleteFpgaImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteFpgaImageOutput
	}
	deleteFpgaImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteFpgaImageOutput
	}
	DeleteFpgaImageWithContextStub        func(aws.Context, *ec2.DeleteFpgaImageInput, ...request.Option) (*ec2.DeleteFpgaImageOutput, error)
	deleteFpgaImageWithContextMutex       sync.RWMutex
	deleteFpgaImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteFpgaImageInput
		arg3 []request.Option
	}
	deleteFpgaImageWithContextReturns struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}
	deleteFpgaImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}
	DeleteInternetGatewayStub        func(*ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error)
	deleteInternetGatewayMutex       sync.RWMutex
	deleteInternetGatewayArgsForCall []struct {
		arg1 *ec2.DeleteInternetGatewayInput
	}
	deleteInternetGatewayReturns struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}
	deleteInternetGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}
	DeleteInternetGatewayRequestStub        func(*ec2.DeleteInternetGatewayInput) (*request.Request, *ec2.DeleteInternetGatewayOutput)
	deleteInternetGatewayRequestMutex       sync.RWMutex
	deleteInternetGatewayRequestArgsForCall []struct {
		arg1 *ec2.DeleteInternetGatewayInput
	}
	deleteInternetGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteInternetGatewayOutput
	}
	deleteInternetGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteInternetGatewayOutput
	}
	DeleteInternetGatewayWithContextStub        func(aws.Context, *ec2.DeleteInternetGatewayInput, ...request.Option) (*ec2.DeleteInternetGatewayOutput, error)
	deleteInternetGatewayWithContextMutex       sync.RWMutex
	deleteInternetGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteInternetGatewayInput
		arg3 []request.Option
	}
	deleteInternetGatewayWithContextReturns struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}
	deleteInternetGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}
	DeleteKeyPairStub        func(*ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error)
	deleteKeyPairMutex       sync.RWMutex
	deleteKeyPairArgsForCall []struct {
		arg1 *ec2.DeleteKeyPairInput
	}
	deleteKeyPairReturns struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}
	deleteKeyPairReturnsOnCall map[int]struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}
	DeleteKeyPairRequestStub        func(*ec2.DeleteKeyPairInput) (*request.Request, *ec2.DeleteKeyPairOutput)
	deleteKeyPairRequestMutex       sync.RWMutex
	deleteKeyPairRequestArgsForCall []struct {
		arg1 *ec2.DeleteKeyPairInput
	}
	deleteKeyPairRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteKeyPairOutput
	}
	deleteKeyPairRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteKeyPairOutput
	}
	DeleteKeyPairWithContextStub        func(aws.Context, *ec2.DeleteKeyPairInput, ...request.Option) (*ec2.DeleteKeyPairOutput, error)
	deleteKeyPairWithContextMutex       sync.RWMutex
	deleteKeyPairWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteKeyPairInput
		arg3 []request.Option
	}
	deleteKeyPairWithContextReturns struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}
	deleteKeyPairWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}
	DeleteLaunchTemplateStub        func(*ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error)
	deleteLaunchTemplateMutex       sync.RWMutex
	deleteLaunchTemplateArgsForCall []struct {
		arg1 *ec2.DeleteLaunchTemplateInput
	}
	deleteLaunchTemplateReturns struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}
	deleteLaunchTemplateReturnsOnCall map[int]struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}
	DeleteLaunchTemplateRequestStub        func(*ec2.DeleteLaunchTemplateInput) (*request.Request, *ec2.DeleteLaunchTemplateOutput)
	deleteLaunchTemplateRequestMutex       sync.RWMutex
	deleteLaunchTemplateRequestArgsForCall []struct {
		arg1 *ec2.DeleteLaunchTemplateInput
	}
	deleteLaunchTemplateRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateOutput
	}
	deleteLaunchTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateOutput
	}
	DeleteLaunchTemplateVersionsStub        func(*ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error)
	deleteLaunchTemplateVersionsMutex       sync.RWMutex
	deleteLaunchTemplateVersionsArgsForCall []struct {
		arg1 *ec2.DeleteLaunchTemplateVersionsInput
	}
	deleteLaunchTemplateVersionsReturns struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}
	deleteLaunchTemplateVersionsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}
	DeleteLaunchTemplateVersionsRequestStub        func(*ec2.DeleteLaunchTemplateVersionsInput) (*request.Request, *ec2.DeleteLaunchTemplateVersionsOutput)
	deleteLaunchTemplateVersionsRequestMutex       sync.RWMutex
	deleteLaunchTemplateVersionsRequestArgsForCall []struct {
		arg1 *ec2.DeleteLaunchTemplateVersionsInput
	}
	deleteLaunchTemplateVersionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateVersionsOutput
	}
	deleteLaunchTemplateVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateVersionsOutput
	}
	DeleteLaunchTemplateVersionsWithContextStub        func(aws.Context, *ec2.DeleteLaunchTemplateVersionsInput, ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error)
	deleteLaunchTemplateVersionsWithContextMutex       sync.RWMutex
	deleteLaunchTemplateVersionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteLaunchTemplateVersionsInput
		arg3 []request.Option
	}
	deleteLaunchTemplateVersionsWithContextReturns struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}
	deleteLaunchTemplateVersionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}
	DeleteLaunchTemplateWithContextStub        func(aws.Context, *ec2.DeleteLaunchTemplateInput, ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error)
	deleteLaunchTemplateWithContextMutex       sync.RWMutex
	deleteLaunchTemplateWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteLaunchTemplateInput
		arg3 []request.Option
	}
	deleteLaunchTemplateWithContextReturns struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}
	deleteLaunchTemplateWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}
	DeleteNatGatewayStub        func(*ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error)
	deleteNatGatewayMutex       sync.RWMutex
	deleteNatGatewayArgsForCall []struct {
		arg1 *ec2.DeleteNatGatewayInput
	}
	deleteNatGatewayReturns struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}
	deleteNatGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}
	DeleteNatGatewayRequestStub        func(*ec2.DeleteNatGatewayInput) (*request.Request, *ec2.DeleteNatGatewayOutput)
	deleteNatGatewayRequestMutex       sync.RWMutex
	deleteNatGatewayRequestArgsForCall []struct {
		arg1 *ec2.DeleteNatGatewayInput
	}
	deleteNatGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteNatGatewayOutput
	}
	deleteNatGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteNatGatewayOutput
	}
	DeleteNatGatewayWithContextStub        func(aws.Context, *ec2.DeleteNatGatewayInput, ...request.Option) (*ec2.DeleteNatGatewayOutput, error)
	deleteNatGatewayWithContextMutex       sync.RWMutex
	deleteNatGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNatGatewayInput
		arg3 []request.Option
	}
	deleteNatGatewayWithContextReturns struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}
	deleteNatGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}
	DeleteNetworkAclStub        func(*ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error)
	deleteNetworkAclMutex       sync.RWMutex
	deleteNetworkAclArgsForCall []struct {
		arg1 *ec2.DeleteNetworkAclInput
	}
	deleteNetworkAclReturns struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}
	deleteNetworkAclReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}
	DeleteNetworkAclEntryStub        func(*ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error)
	deleteNetworkAclEntryMutex       sync.RWMutex
	deleteNetworkAclEntryArgsForCall []struct {
		arg1 *ec2.DeleteNetworkAclEntryInput
	}
	deleteNetworkAclEntryReturns struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}
	deleteNetworkAclEntryReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}
	DeleteNetworkAclEntryRequestStub        func(*ec2.DeleteNetworkAclEntryInput) (*request.Request, *ec2.DeleteNetworkAclEntryOutput)
	deleteNetworkAclEntryRequestMutex       sync.RWMutex
	deleteNetworkAclEntryRequestArgsForCall []struct {
		arg1 *ec2.DeleteNetworkAclEntryInput
	}
	deleteNetworkAclEntryRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclEntryOutput
	}
	deleteNetworkAclEntryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclEntryOutput
	}
	DeleteNetworkAclEntryWithContextStub        func(aws.Context, *ec2.DeleteNetworkAclEntryInput, ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error)
	deleteNetworkAclEntryWithContextMutex       sync.RWMutex
	deleteNetworkAclEntryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkAclEntryInput
		arg3 []request.Option
	}
	deleteNetworkAclEntryWithContextReturns struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}
	deleteNetworkAclEntryWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}
	DeleteNetworkAclRequestStub        func(*ec2.DeleteNetworkAclInput) (*request.Request, *ec2.DeleteNetworkAclOutput)
	deleteNetworkAclRequestMutex       sync.RWMutex
	deleteNetworkAclRequestArgsForCall []struct {
		arg1 *ec2.DeleteNetworkAclInput
	}
	deleteNetworkAclRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclOutput
	}
	deleteNetworkAclRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclOutput
	}
	DeleteNetworkAclWithContextStub        func(aws.Context, *ec2.DeleteNetworkAclInput, ...request.Option) (*ec2.DeleteNetworkAclOutput, error)
	deleteNetworkAclWithContextMutex       sync.RWMutex
	deleteNetworkAclWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkAclInput
		arg3 []request.Option
	}
	deleteNetworkAclWithContextReturns struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}
	deleteNetworkAclWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}
	DeleteNetworkInterfaceStub        func(*ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error)
	deleteNetworkInterfaceMutex       sync.RWMutex
	deleteNetworkInterfaceArgsForCall []struct {
		arg1 *ec2.DeleteNetworkInterfaceInput
	}
	deleteNetworkInterfaceReturns struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}
	deleteNetworkInterfaceReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}
	DeleteNetworkInterfacePermissionStub        func(*ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error)
	deleteNetworkInterfacePermissionMutex       sync.RWMutex
	deleteNetworkInterfacePermissionArgsForCall []struct {
		arg1 *ec2.DeleteNetworkInterfacePermissionInput
	}
	deleteNetworkInterfacePermissionReturns struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}
	deleteNetworkInterfacePermissionReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}
	DeleteNetworkInterfacePermissionRequestStub        func(*ec2.DeleteNetworkInterfacePermissionInput) (*request.Request, *ec2.DeleteNetworkInterfacePermissionOutput)
	deleteNetworkInterfacePermissionRequestMutex       sync.RWMutex
	deleteNetworkInterfacePermissionRequestArgsForCall []struct {
		arg1 *ec2.DeleteNetworkInterfacePermissionInput
	}
	deleteNetworkInterfacePermissionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfacePermissionOutput
	}
	deleteNetworkInterfacePermissionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfacePermissionOutput
	}
	DeleteNetworkInterfacePermissionWithContextStub        func(aws.Context, *ec2.DeleteNetworkInterfacePermissionInput, ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error)
	deleteNetworkInterfacePermissionWithContextMutex       sync.RWMutex
	deleteNetworkInterfacePermissionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkInterfacePermissionInput
		arg3 []request.Option
	}
	deleteNetworkInterfacePermissionWithContextReturns struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}
	deleteNetworkInterfacePermissionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}
	DeleteNetworkInterfaceRequestStub        func(*ec2.DeleteNetworkInterfaceInput) (*request.Request, *ec2.DeleteNetworkInterfaceOutput)
	deleteNetworkInterfaceRequestMutex       sync.RWMutex
	deleteNetworkInterfaceRequestArgsForCall []struct {
		arg1 *ec2.DeleteNetworkInterfaceInput
	}
	deleteNetworkInterfaceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfaceOutput
	}
	deleteNetworkInterfaceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfaceOutput
	}
	DeleteNetworkInterfaceWithContextStub        func(aws.Context, *ec2.DeleteNetworkInterfaceInput, ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error)
	deleteNetworkInterfaceWithContextMutex       sync.RWMutex
	deleteNetworkInterfaceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkInterfaceInput
		arg3 []request.Option
	}
	deleteNetworkInterfaceWithContextReturns struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}
	deleteNetworkInterfaceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}
	DeletePlacementGroupStub        func(*ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error)
	deletePlacementGroupMutex       sync.RWMutex
	deletePlacementGroupArgsForCall []struct {
		arg1 *ec2.DeletePlacementGroupInput
	}
	deletePlacementGroupReturns struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}
	deletePlacementGroupReturnsOnCall map[int]struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}
	DeletePlacementGroupRequestStub        func(*ec2.DeletePlacementGroupInput) (*request.Request, *ec2.DeletePlacementGroupOutput)
	deletePlacementGroupRequestMutex       sync.RWMutex
	deletePlacementGroupRequestArgsForCall []struct {
		arg1 *ec2.DeletePlacementGroupInput
	}
	deletePlacementGroupRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeletePlacementGroupOutput
	}
	deletePlacementGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeletePlacementGroupOutput
	}
	DeletePlacementGroupWithContextStub        func(aws.Context, *ec2.DeletePlacementGroupInput, ...request.Option) (*ec2.DeletePlacementGroupOutput, error)
	deletePlacementGroupWithContextMutex       sync.RWMutex
	deletePlacementGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeletePlacementGroupInput
		arg3 []request.Option
	}
	deletePlacementGroupWithContextReturns struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}
	deletePlacementGroupWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}
	DeleteRouteStub        func(*ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error)
	deleteRouteMutex       sync.RWMutex
	deleteRouteArgsForCall []struct {
		arg1 *ec2.DeleteRouteInput
	}
	deleteRouteReturns struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}
	deleteRouteReturnsOnCall map[int]struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}
	DeleteRouteRequestStub        func(*ec2.DeleteRouteInput) (*request.Request, *ec2.DeleteRouteOutput)
	deleteRouteRequestMutex       sync.RWMutex
	deleteRouteRequestArgsForCall []struct {
		arg1 *ec2.DeleteRouteInput
	}
	deleteRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteOutput
	}
	deleteRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteOutput
	}
	DeleteRouteTableStub        func(*ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error)
	deleteRouteTableMutex       sync.RWMutex
	deleteRouteTableArgsForCall []struct {
		arg1 *ec2.DeleteRouteTableInput
	}
	deleteRouteTableReturns struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}
	deleteRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}
	DeleteRouteTableRequestStub        func(*ec2.DeleteRouteTableInput) (*request.Request, *ec2.DeleteRouteTableOutput)
	deleteRouteTableRequestMutex       sync.RWMutex
	deleteRouteTableRequestArgsForCall []struct {
		arg1 *ec2.DeleteRouteTableInput
	}
	deleteRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteTableOutput
	}
	deleteRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteTableOutput
	}
	DeleteRouteTableWithContextStub        func(aws.Context, *ec2.DeleteRouteTableInput, ...request.Option) (*ec2.DeleteRouteTableOutput, error)
	deleteRouteTableWithContextMutex       sync.RWMutex
	deleteRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteRouteTableInput
		arg3 []request.Option
	}
	deleteRouteTableWithContextReturns struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}
	deleteRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}
	DeleteRouteWithContextStub        func(aws.Context, *ec2.DeleteRouteInput, ...request.Option) (*ec2.DeleteRouteOutput, error)
	deleteRouteWithContextMutex       sync.RWMutex
	deleteRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteRouteInput
		arg3 []request.Option
	}
	deleteRouteWithContextReturns struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}
	deleteRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}
	DeleteSecurityGroupStub        func(*ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error)
	deleteSecurityGroupMutex       sync.RWMutex
	deleteSecurityGroupArgsForCall []struct {
		arg1 *ec2.DeleteSecurityGroupInput
	}
	deleteSecurityGroupReturns struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}
	deleteSecurityGroupReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}
	DeleteSecurityGroupRequestStub        func(*ec2.DeleteSecurityGroupInput) (*request.Request, *ec2.DeleteSecurityGroupOutput)
	deleteSecurityGroupRequestMutex       sync.RWMutex
	deleteSecurityGroupRequestArgsForCall []struct {
		arg1 *ec2.DeleteSecurityGroupInput
	}
	deleteSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteSecurityGroupOutput
	}
	deleteSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteSecurityGroupOutput
	}
	DeleteSecurityGroupWithContextStub        func(aws.Context, *ec2.DeleteSecurityGroupInput, ...request.Option) (*ec2.DeleteSecurityGroupOutput, error)
	deleteSecurityGroupWithContextMutex       sync.RWMutex
	deleteSecurityGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSecurityGroupInput
		arg3 []request.Option
	}
	deleteSecurityGroupWithContextReturns struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}
	deleteSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}
	DeleteSnapshotStub        func(*ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error)
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		arg1 *ec2.DeleteSnapshotInput
	}
	deleteSnapshotReturns struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}
	deleteSnapshotReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}
	DeleteSnapshotRequestStub        func(*ec2.DeleteSnapshotInput) (*request.Request, *ec2.DeleteSnapshotOutput)
	deleteSnapshotRequestMutex       sync.RWMutex
	deleteSnapshotRequestArgsForCall []struct {
		arg1 *ec2.DeleteSnapshotInput
	}
	deleteSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteSnapshotOutput
	}
	deleteSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteSnapshotOutput
	}
	DeleteSnapshotWithContextStub        func(aws.Context, *ec2.DeleteSnapshotInput, ...request.Option) (*ec2.DeleteSnapshotOutput, error)
	deleteSnapshotWithContextMutex       sync.RWMutex
	deleteSnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSnapshotInput
		arg3 []request.Option
	}
	deleteSnapshotWithContextReturns struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}
	deleteSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}
	DeleteSpotDatafeedSubscriptionStub        func(*ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)
	deleteSpotDatafeedSubscriptionMutex       sync.RWMutex
	deleteSpotDatafeedSubscriptionArgsForCall []struct {
		arg1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}
	deleteSpotDatafeedSubscriptionReturns struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}
	deleteSpotDatafeedSubscriptionReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}
	DeleteSpotDatafeedSubscriptionRequestStub        func(*ec2.DeleteSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DeleteSpotDatafeedSubscriptionOutput)
	deleteSpotDatafeedSubscriptionRequestMutex       sync.RWMutex
	deleteSpotDatafeedSubscriptionRequestArgsForCall []struct {
		arg1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}
	deleteSpotDatafeedSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteSpotDatafeedSubscriptionOutput
	}
	deleteSpotDatafeedSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteSpotDatafeedSubscriptionOutput
	}
	DeleteSpotDatafeedSubscriptionWithContextStub        func(aws.Context, *ec2.DeleteSpotDatafeedSubscriptionInput, ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)
	deleteSpotDatafeedSubscriptionWithContextMutex       sync.RWMutex
	deleteSpotDatafeedSubscriptionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSpotDatafeedSubscriptionInput
		arg3 []request.Option
	}
	deleteSpotDatafeedSubscriptionWithContextReturns struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}
	deleteSpotDatafeedSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}
	DeleteSubnetStub        func(*ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error)
	deleteSubnetMutex       sync.RWMutex
	deleteSubnetArgsForCall []struct {
		arg1 *ec2.DeleteSubnetInput
	}
	deleteSubnetReturns struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}
	deleteSubnetReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}
	DeleteSubnetRequestStub        func(*ec2.DeleteSubnetInput) (*request.Request, *ec2.DeleteSubnetOutput)
	deleteSubnetRequestMutex       sync.RWMutex
	deleteSubnetRequestArgsForCall []struct {
		arg1 *ec2.DeleteSubnetInput
	}
	deleteSubnetRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteSubnetOutput
	}
	deleteSubnetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteSubnetOutput
	}
	DeleteSubnetWithContextStub        func(aws.Context, *ec2.DeleteSubnetInput, ...request.Option) (*ec2.DeleteSubnetOutput, error)
	deleteSubnetWithContextMutex       sync.RWMutex
	deleteSubnetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSubnetInput
		arg3 []request.Option
	}
	deleteSubnetWithContextReturns struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}
	deleteSubnetWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}
	DeleteTagsStub        func(*ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error)
	deleteTagsMutex       sync.RWMutex
	deleteTagsArgsForCall []struct {
		arg1 *ec2.DeleteTagsInput
	}
	deleteTagsReturns struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}
	deleteTagsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}
	DeleteTagsRequestStub        func(*ec2.DeleteTagsInput) (*request.Request, *ec2.DeleteTagsOutput)
	deleteTagsRequestMutex       sync.RWMutex
	deleteTagsRequestArgsForCall []struct {
		arg1 *ec2.DeleteTagsInput
	}
	deleteTagsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteTagsOutput
	}
	deleteTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteTagsOutput
	}
	DeleteTagsWithContextStub        func(aws.Context, *ec2.DeleteTagsInput, ...request.Option) (*ec2.DeleteTagsOutput, error)
	deleteTagsWithContextMutex       sync.RWMutex
	deleteTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTagsInput
		arg3 []request.Option
	}
	deleteTagsWithContextReturns struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}
	deleteTagsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}
	DeleteTransitGatewayStub        func(*ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error)
	deleteTransitGatewayMutex       sync.RWMutex
	deleteTransitGatewayArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayInput
	}
	deleteTransitGatewayReturns struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}
	deleteTransitGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}
	DeleteTransitGatewayRequestStub        func(*ec2.DeleteTransitGatewayInput) (*request.Request, *ec2.DeleteTransitGatewayOutput)
	deleteTransitGatewayRequestMutex       sync.RWMutex
	deleteTransitGatewayRequestArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayInput
	}
	deleteTransitGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayOutput
	}
	deleteTransitGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayOutput
	}
	DeleteTransitGatewayRouteStub        func(*ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error)
	deleteTransitGatewayRouteMutex       sync.RWMutex
	deleteTransitGatewayRouteArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayRouteInput
	}
	deleteTransitGatewayRouteReturns struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}
	deleteTransitGatewayRouteReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}
	DeleteTransitGatewayRouteRequestStub        func(*ec2.DeleteTransitGatewayRouteInput) (*request.Request, *ec2.DeleteTransitGatewayRouteOutput)
	deleteTransitGatewayRouteRequestMutex       sync.RWMutex
	deleteTransitGatewayRouteRequestArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayRouteInput
	}
	deleteTransitGatewayRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteOutput
	}
	deleteTransitGatewayRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteOutput
	}
	DeleteTransitGatewayRouteTableStub        func(*ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error)
	deleteTransitGatewayRouteTableMutex       sync.RWMutex
	deleteTransitGatewayRouteTableArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayRouteTableInput
	}
	deleteTransitGatewayRouteTableReturns struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}
	deleteTransitGatewayRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}
	DeleteTransitGatewayRouteTableRequestStub        func(*ec2.DeleteTransitGatewayRouteTableInput) (*request.Request, *ec2.DeleteTransitGatewayRouteTableOutput)
	deleteTransitGatewayRouteTableRequestMutex       sync.RWMutex
	deleteTransitGatewayRouteTableRequestArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayRouteTableInput
	}
	deleteTransitGatewayRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteTableOutput
	}
	deleteTransitGatewayRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteTableOutput
	}
	DeleteTransitGatewayRouteTableWithContextStub        func(aws.Context, *ec2.DeleteTransitGatewayRouteTableInput, ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error)
	deleteTransitGatewayRouteTableWithContextMutex       sync.RWMutex
	deleteTransitGatewayRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayRouteTableInput
		arg3 []request.Option
	}
	deleteTransitGatewayRouteTableWithContextReturns struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}
	deleteTransitGatewayRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}
	DeleteTransitGatewayRouteWithContextStub        func(aws.Context, *ec2.DeleteTransitGatewayRouteInput, ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error)
	deleteTransitGatewayRouteWithContextMutex       sync.RWMutex
	deleteTransitGatewayRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayRouteInput
		arg3 []request.Option
	}
	deleteTransitGatewayRouteWithContextReturns struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}
	deleteTransitGatewayRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}
	DeleteTransitGatewayVpcAttachmentStub        func(*ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)
	deleteTransitGatewayVpcAttachmentMutex       sync.RWMutex
	deleteTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}
	deleteTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}
	deleteTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}
	DeleteTransitGatewayVpcAttachmentRequestStub        func(*ec2.DeleteTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayVpcAttachmentOutput)
	deleteTransitGatewayVpcAttachmentRequestMutex       sync.RWMutex
	deleteTransitGatewayVpcAttachmentRequestArgsForCall []struct {
		arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}
	deleteTransitGatewayVpcAttachmentRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	}
	deleteTransitGatewayVpcAttachmentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	}
	DeleteTransitGatewayVpcAttachmentWithContextStub        func(aws.Context, *ec2.DeleteTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)
	deleteTransitGatewayVpcAttachmentWithContextMutex       sync.RWMutex
	deleteTransitGatewayVpcAttachmentWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}
	deleteTransitGatewayVpcAttachmentWithContextReturns struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}
	deleteTransitGatewayVpcAttachmentWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}
	DeleteTransitGatewayWithContextStub        func(aws.Context, *ec2.DeleteTransitGatewayInput, ...request.Option) (*ec2.DeleteTransitGatewayOutput, error)
	deleteTransitGatewayWithContextMutex       sync.RWMutex
	deleteTransitGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayInput
		arg3 []request.Option
	}
	deleteTransitGatewayWithContextReturns struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}
	deleteTransitGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}
	DeleteVolumeStub        func(*ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error)
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		arg1 *ec2.DeleteVolumeInput
	}
	deleteVolumeReturns struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}
	deleteVolumeReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}
	DeleteVolumeRequestStub        func(*ec2.DeleteVolumeInput) (*request.Request, *ec2.DeleteVolumeOutput)
	deleteVolumeRequestMutex       sync.RWMutex
	deleteVolumeRequestArgsForCall []struct {
		arg1 *ec2.DeleteVolumeInput
	}
	deleteVolumeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVolumeOutput
	}
	deleteVolumeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVolumeOutput
	}
	DeleteVolumeWithContextStub        func(aws.Context, *ec2.DeleteVolumeInput, ...request.Option) (*ec2.DeleteVolumeOutput, error)
	deleteVolumeWithContextMutex       sync.RWMutex
	deleteVolumeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVolumeInput
		arg3 []request.Option
	}
	deleteVolumeWithContextReturns struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}
	deleteVolumeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}
	DeleteVpcStub        func(*ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error)
	deleteVpcMutex       sync.RWMutex
	deleteVpcArgsForCall []struct {
		arg1 *ec2.DeleteVpcInput
	}
	deleteVpcReturns struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}
	deleteVpcReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}
	DeleteVpcEndpointConnectionNotificationsStub        func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)
	deleteVpcEndpointConnectionNotificationsMutex       sync.RWMutex
	deleteVpcEndpointConnectionNotificationsArgsForCall []struct {
		arg1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}
	deleteVpcEndpointConnectionNotificationsReturns struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	deleteVpcEndpointConnectionNotificationsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	DeleteVpcEndpointConnectionNotificationsRequestStub        func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DeleteVpcEndpointConnectionNotificationsOutput)
	deleteVpcEndpointConnectionNotificationsRequestMutex       sync.RWMutex
	deleteVpcEndpointConnectionNotificationsRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}
	deleteVpcEndpointConnectionNotificationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	}
	deleteVpcEndpointConnectionNotificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	}
	DeleteVpcEndpointConnectionNotificationsWithContextStub        func(aws.Context, *ec2.DeleteVpcEndpointConnectionNotificationsInput, ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)
	deleteVpcEndpointConnectionNotificationsWithContextMutex       sync.RWMutex
	deleteVpcEndpointConnectionNotificationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcEndpointConnectionNotificationsInput
		arg3 []request.Option
	}
	deleteVpcEndpointConnectionNotificationsWithContextReturns struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	deleteVpcEndpointConnectionNotificationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	DeleteVpcEndpointServiceConfigurationsStub        func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)
	deleteVpcEndpointServiceConfigurationsMutex       sync.RWMutex
	deleteVpcEndpointServiceConfigurationsArgsForCall []struct {
		arg1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}
	deleteVpcEndpointServiceConfigurationsReturns struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	deleteVpcEndpointServiceConfigurationsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	DeleteVpcEndpointServiceConfigurationsRequestStub        func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DeleteVpcEndpointServiceConfigurationsOutput)
	deleteVpcEndpointServiceConfigurationsRequestMutex       sync.RWMutex
	deleteVpcEndpointServiceConfigurationsRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}
	deleteVpcEndpointServiceConfigurationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	}
	deleteVpcEndpointServiceConfigurationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	}
	DeleteVpcEndpointServiceConfigurationsWithContextStub        func(aws.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)
	deleteVpcEndpointServiceConfigurationsWithContextMutex       sync.RWMutex
	deleteVpcEndpointServiceConfigurationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		arg3 []request.Option
	}
	deleteVpcEndpointServiceConfigurationsWithContextReturns struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	deleteVpcEndpointServiceConfigurationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	DeleteVpcEndpointsStub        func(*ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error)
	deleteVpcEndpointsMutex       sync.RWMutex
	deleteVpcEndpointsArgsForCall []struct {
		arg1 *ec2.DeleteVpcEndpointsInput
	}
	deleteVpcEndpointsReturns struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}
	deleteVpcEndpointsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}
	DeleteVpcEndpointsRequestStub        func(*ec2.DeleteVpcEndpointsInput) (*request.Request, *ec2.DeleteVpcEndpointsOutput)
	deleteVpcEndpointsRequestMutex       sync.RWMutex
	deleteVpcEndpointsRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpcEndpointsInput
	}
	deleteVpcEndpointsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointsOutput
	}
	deleteVpcEndpointsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointsOutput
	}
	DeleteVpcEndpointsWithContextStub        func(aws.Context, *ec2.DeleteVpcEndpointsInput, ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error)
	deleteVpcEndpointsWithContextMutex       sync.RWMutex
	deleteVpcEndpointsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcEndpointsInput
		arg3 []request.Option
	}
	deleteVpcEndpointsWithContextReturns struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}
	deleteVpcEndpointsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}
	DeleteVpcPeeringConnectionStub        func(*ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error)
	deleteVpcPeeringConnectionMutex       sync.RWMutex
	deleteVpcPeeringConnectionArgsForCall []struct {
		arg1 *ec2.DeleteVpcPeeringConnectionInput
	}
	deleteVpcPeeringConnectionReturns struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}
	deleteVpcPeeringConnectionReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}
	DeleteVpcPeeringConnectionRequestStub        func(*ec2.DeleteVpcPeeringConnectionInput) (*request.Request, *ec2.DeleteVpcPeeringConnectionOutput)
	deleteVpcPeeringConnectionRequestMutex       sync.RWMutex
	deleteVpcPeeringConnectionRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpcPeeringConnectionInput
	}
	deleteVpcPeeringConnectionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcPeeringConnectionOutput
	}
	deleteVpcPeeringConnectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcPeeringConnectionOutput
	}
	DeleteVpcPeeringConnectionWithContextStub        func(aws.Context, *ec2.DeleteVpcPeeringConnectionInput, ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error)
	deleteVpcPeeringConnectionWithContextMutex       sync.RWMutex
	deleteVpcPeeringConnectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcPeeringConnectionInput
		arg3 []request.Option
	}
	deleteVpcPeeringConnectionWithContextReturns struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}
	deleteVpcPeeringConnectionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}
	DeleteVpcRequestStub        func(*ec2.DeleteVpcInput) (*request.Request, *ec2.DeleteVpcOutput)
	deleteVpcRequestMutex       sync.RWMutex
	deleteVpcRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpcInput
	}
	deleteVpcRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcOutput
	}
	deleteVpcRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcOutput
	}
	DeleteVpcWithContextStub        func(aws.Context, *ec2.DeleteVpcInput, ...request.Option) (*ec2.DeleteVpcOutput, error)
	deleteVpcWithContextMutex       sync.RWMutex
	deleteVpcWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcInput
		arg3 []request.Option
	}
	deleteVpcWithContextReturns struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}
	deleteVpcWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}
	DeleteVpnConnectionStub        func(*ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error)
	deleteVpnConnectionMutex       sync.RWMutex
	deleteVpnConnectionArgsForCall []struct {
		arg1 *ec2.DeleteVpnConnectionInput
	}
	deleteVpnConnectionReturns struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}
	deleteVpnConnectionReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}
	DeleteVpnConnectionRequestStub        func(*ec2.DeleteVpnConnectionInput) (*request.Request, *ec2.DeleteVpnConnectionOutput)
	deleteVpnConnectionRequestMutex       sync.RWMutex
	deleteVpnConnectionRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpnConnectionInput
	}
	deleteVpnConnectionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionOutput
	}
	deleteVpnConnectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionOutput
	}
	DeleteVpnConnectionRouteStub        func(*ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error)
	deleteVpnConnectionRouteMutex       sync.RWMutex
	deleteVpnConnectionRouteArgsForCall []struct {
		arg1 *ec2.DeleteVpnConnectionRouteInput
	}
	deleteVpnConnectionRouteReturns struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}
	deleteVpnConnectionRouteReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}
	DeleteVpnConnectionRouteRequestStub        func(*ec2.DeleteVpnConnectionRouteInput) (*request.Request, *ec2.DeleteVpnConnectionRouteOutput)
	deleteVpnConnectionRouteRequestMutex       sync.RWMutex
	deleteVpnConnectionRouteRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpnConnectionRouteInput
	}
	deleteVpnConnectionRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionRouteOutput
	}
	deleteVpnConnectionRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionRouteOutput
	}
	DeleteVpnConnectionRouteWithContextStub        func(aws.Context, *ec2.DeleteVpnConnectionRouteInput, ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error)
	deleteVpnConnectionRouteWithContextMutex       sync.RWMutex
	deleteVpnConnectionRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpnConnectionRouteInput
		arg3 []request.Option
	}
	deleteVpnConnectionRouteWithContextReturns struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}
	deleteVpnConnectionRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}
	DeleteVpnConnectionWithContextStub        func(aws.Context, *ec2.DeleteVpnConnectionInput, ...request.Option) (*ec2.DeleteVpnConnectionOutput, error)
	deleteVpnConnectionWithContextMutex       sync.RWMutex
	deleteVpnConnectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpnConnectionInput
		arg3 []request.Option
	}
	deleteVpnConnectionWithContextReturns struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}
	deleteVpnConnectionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}
	DeleteVpnGatewayStub        func(*ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error)
	deleteVpnGatewayMutex       sync.RWMutex
	deleteVpnGatewayArgsForCall []struct {
		arg1 *ec2.DeleteVpnGatewayInput
	}
	deleteVpnGatewayReturns struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}
	deleteVpnGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}
	DeleteVpnGatewayRequestStub        func(*ec2.DeleteVpnGatewayInput) (*request.Request, *ec2.DeleteVpnGatewayOutput)
	deleteVpnGatewayRequestMutex       sync.RWMutex
	deleteVpnGatewayRequestArgsForCall []struct {
		arg1 *ec2.DeleteVpnGatewayInput
	}
	deleteVpnGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnGatewayOutput
	}
	deleteVpnGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnGatewayOutput
	}
	DeleteVpnGatewayWithContextStub        func(aws.Context, *ec2.DeleteVpnGatewayInput, ...request.Option) (*ec2.DeleteVpnGatewayOutput, error)
	deleteVpnGatewayWithContextMutex       sync.RWMutex
	deleteVpnGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpnGatewayInput
		arg3 []request.Option
	}
	deleteVpnGatewayWithContextReturns struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}
	deleteVpnGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}
	DeprovisionByoipCidrStub        func(*ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error)
	deprovisionByoipCidrMutex       sync.RWMutex
	deprovisionByoipCidrArgsForCall []struct {
		arg1 *ec2.DeprovisionByoipCidrInput
	}
	deprovisionByoipCidrReturns struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}
	deprovisionByoipCidrReturnsOnCall map[int]struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}
	DeprovisionByoipCidrRequestStub        func(*ec2.DeprovisionByoipCidrInput) (*request.Request, *ec2.DeprovisionByoipCidrOutput)
	deprovisionByoipCidrRequestMutex       sync.RWMutex
	deprovisionByoipCidrRequestArgsForCall []struct {
		arg1 *ec2.DeprovisionByoipCidrInput
	}
	deprovisionByoipCidrRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeprovisionByoipCidrOutput
	}
	deprovisionByoipCidrRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeprovisionByoipCidrOutput
	}
	DeprovisionByoipCidrWithContextStub        func(aws.Context, *ec2.DeprovisionByoipCidrInput, ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error)
	deprovisionByoipCidrWithContextMutex       sync.RWMutex
	deprovisionByoipCidrWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeprovisionByoipCidrInput
		arg3 []request.Option
	}
	deprovisionByoipCidrWithContextReturns struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}
	deprovisionByoipCidrWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}
	DeregisterImageStub        func(*ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error)
	deregisterImageMutex       sync.RWMutex
	deregisterImageArgsForCall []struct {
		arg1 *ec2.DeregisterImageInput
	}
	deregisterImageReturns struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}
	deregisterImageReturnsOnCall map[int]struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}
	DeregisterImageRequestStub        func(*ec2.DeregisterImageInput) (*request.Request, *ec2.DeregisterImageOutput)
	deregisterImageRequestMutex       sync.RWMutex
	deregisterImageRequestArgsForCall []struct {
		arg1 *ec2.DeregisterImageInput
	}
	deregisterImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DeregisterImageOutput
	}
	deregisterImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DeregisterImageOutput
	}
	DeregisterImageWithContextStub        func(aws.Context, *ec2.DeregisterImageInput, ...request.Option) (*ec2.DeregisterImageOutput, error)
	deregisterImageWithContextMutex       sync.RWMutex
	deregisterImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DeregisterImageInput
		arg3 []request.Option
	}
	deregisterImageWithContextReturns struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}
	deregisterImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}
	DescribeAccountAttributesStub        func(*ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error)
	describeAccountAttributesMutex       sync.RWMutex
	describeAccountAttributesArgsForCall []struct {
		arg1 *ec2.DescribeAccountAttributesInput
	}
	describeAccountAttributesReturns struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}
	describeAccountAttributesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}
	DescribeAccountAttributesRequestStub        func(*ec2.DescribeAccountAttributesInput) (*request.Request, *ec2.DescribeAccountAttributesOutput)
	describeAccountAttributesRequestMutex       sync.RWMutex
	describeAccountAttributesRequestArgsForCall []struct {
		arg1 *ec2.DescribeAccountAttributesInput
	}
	describeAccountAttributesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeAccountAttributesOutput
	}
	describeAccountAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeAccountAttributesOutput
	}
	DescribeAccountAttributesWithContextStub        func(aws.Context, *ec2.DescribeAccountAttributesInput, ...request.Option) (*ec2.DescribeAccountAttributesOutput, error)
	describeAccountAttributesWithContextMutex       sync.RWMutex
	describeAccountAttributesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAccountAttributesInput
		arg3 []request.Option
	}
	describeAccountAttributesWithContextReturns struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}
	describeAccountAttributesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}
	DescribeAddressesStub        func(*ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error)
	describeAddressesMutex       sync.RWMutex
	describeAddressesArgsForCall []struct {
		arg1 *ec2.DescribeAddressesInput
	}
	describeAddressesReturns struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}
	describeAddressesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}
	DescribeAddressesRequestStub        func(*ec2.DescribeAddressesInput) (*request.Request, *ec2.DescribeAddressesOutput)
	describeAddressesRequestMutex       sync.RWMutex
	describeAddressesRequestArgsForCall []struct {
		arg1 *ec2.DescribeAddressesInput
	}
	describeAddressesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeAddressesOutput
	}
	describeAddressesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeAddressesOutput
	}
	DescribeAddressesWithContextStub        func(aws.Context, *ec2.DescribeAddressesInput, ...request.Option) (*ec2.DescribeAddressesOutput, error)
	describeAddressesWithContextMutex       sync.RWMutex
	describeAddressesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAddressesInput
		arg3 []request.Option
	}
	describeAddressesWithContextReturns struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}
	describeAddressesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}
	DescribeAggregateIdFormatStub        func(*ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error)
	describeAggregateIdFormatMutex       sync.RWMutex
	describeAggregateIdFormatArgsForCall []struct {
		arg1 *ec2.DescribeAggregateIdFormatInput
	}
	describeAggregateIdFormatReturns struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}
	describeAggregateIdFormatReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}
	DescribeAggregateIdFormatRequestStub        func(*ec2.DescribeAggregateIdFormatInput) (*request.Request, *ec2.DescribeAggregateIdFormatOutput)
	describeAggregateIdFormatRequestMutex       sync.RWMutex
	describeAggregateIdFormatRequestArgsForCall []struct {
		arg1 *ec2.DescribeAggregateIdFormatInput
	}
	describeAggregateIdFormatRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeAggregateIdFormatOutput
	}
	describeAggregateIdFormatRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeAggregateIdFormatOutput
	}
	DescribeAggregateIdFormatWithContextStub        func(aws.Context, *ec2.DescribeAggregateIdFormatInput, ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error)
	describeAggregateIdFormatWithContextMutex       sync.RWMutex
	describeAggregateIdFormatWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAggregateIdFormatInput
		arg3 []request.Option
	}
	describeAggregateIdFormatWithContextReturns struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}
	describeAggregateIdFormatWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}
	DescribeAvailabilityZonesStub        func(*ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error)
	describeAvailabilityZonesMutex       sync.RWMutex
	describeAvailabilityZonesArgsForCall []struct {
		arg1 *ec2.DescribeAvailabilityZonesInput
	}
	describeAvailabilityZonesReturns struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}
	describeAvailabilityZonesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}
	DescribeAvailabilityZonesRequestStub        func(*ec2.DescribeAvailabilityZonesInput) (*request.Request, *ec2.DescribeAvailabilityZonesOutput)
	describeAvailabilityZonesRequestMutex       sync.RWMutex
	describeAvailabilityZonesRequestArgsForCall []struct {
		arg1 *ec2.DescribeAvailabilityZonesInput
	}
	describeAvailabilityZonesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeAvailabilityZonesOutput
	}
	describeAvailabilityZonesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeAvailabilityZonesOutput
	}
	DescribeAvailabilityZonesWithContextStub        func(aws.Context, *ec2.DescribeAvailabilityZonesInput, ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error)
	describeAvailabilityZonesWithContextMutex       sync.RWMutex
	describeAvailabilityZonesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAvailabilityZonesInput
		arg3 []request.Option
	}
	describeAvailabilityZonesWithContextReturns struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}
	describeAvailabilityZonesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}
	DescribeBundleTasksStub        func(*ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error)
	describeBundleTasksMutex       sync.RWMutex
	describeBundleTasksArgsForCall []struct {
		arg1 *ec2.DescribeBundleTasksInput
	}
	describeBundleTasksReturns struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}
	describeBundleTasksReturnsOnCall map[int]struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}
	DescribeBundleTasksRequestStub        func(*ec2.DescribeBundleTasksInput) (*request.Request, *ec2.DescribeBundleTasksOutput)
	describeBundleTasksRequestMutex       sync.RWMutex
	describeBundleTasksRequestArgsForCall []struct {
		arg1 *ec2.DescribeBundleTasksInput
	}
	describeBundleTasksRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeBundleTasksOutput
	}
	describeBundleTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeBundleTasksOutput
	}
	DescribeBundleTasksWithContextStub        func(aws.Context, *ec2.DescribeBundleTasksInput, ...request.Option) (*ec2.DescribeBundleTasksOutput, error)
	describeBundleTasksWithContextMutex       sync.RWMutex
	describeBundleTasksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeBundleTasksInput
		arg3 []request.Option
	}
	describeBundleTasksWithContextReturns struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}
	describeBundleTasksWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}
	DescribeByoipCidrsStub        func(*ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error)
	describeByoipCidrsMutex       sync.RWMutex
	describeByoipCidrsArgsForCall []struct {
		arg1 *ec2.DescribeByoipCidrsInput
	}
	describeByoipCidrsReturns struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}
	describeByoipCidrsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}
	DescribeByoipCidrsRequestStub        func(*ec2.DescribeByoipCidrsInput) (*request.Request, *ec2.DescribeByoipCidrsOutput)
	describeByoipCidrsRequestMutex       sync.RWMutex
	describeByoipCidrsRequestArgsForCall []struct {
		arg1 *ec2.DescribeByoipCidrsInput
	}
	describeByoipCidrsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeByoipCidrsOutput
	}
	describeByoipCidrsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeByoipCidrsOutput
	}
	DescribeByoipCidrsWithContextStub        func(aws.Context, *ec2.DescribeByoipCidrsInput, ...request.Option) (*ec2.DescribeByoipCidrsOutput, error)
	describeByoipCidrsWithContextMutex       sync.RWMutex
	describeByoipCidrsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeByoipCidrsInput
		arg3 []request.Option
	}
	describeByoipCidrsWithContextReturns struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}
	describeByoipCidrsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}
	DescribeCapacityReservationsStub        func(*ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error)
	describeCapacityReservationsMutex       sync.RWMutex
	describeCapacityReservationsArgsForCall []struct {
		arg1 *ec2.DescribeCapacityReservationsInput
	}
	describeCapacityReservationsReturns struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}
	describeCapacityReservationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}
	DescribeCapacityReservationsRequestStub        func(*ec2.DescribeCapacityReservationsInput) (*request.Request, *ec2.DescribeCapacityReservationsOutput)
	describeCapacityReservationsRequestMutex       sync.RWMutex
	describeCapacityReservationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeCapacityReservationsInput
	}
	describeCapacityReservationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeCapacityReservationsOutput
	}
	describeCapacityReservationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeCapacityReservationsOutput
	}
	DescribeCapacityReservationsWithContextStub        func(aws.Context, *ec2.DescribeCapacityReservationsInput, ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error)
	describeCapacityReservationsWithContextMutex       sync.RWMutex
	describeCapacityReservationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeCapacityReservationsInput
		arg3 []request.Option
	}
	describeCapacityReservationsWithContextReturns struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}
	describeCapacityReservationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}
	DescribeClassicLinkInstancesStub        func(*ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error)
	describeClassicLinkInstancesMutex       sync.RWMutex
	describeClassicLinkInstancesArgsForCall []struct {
		arg1 *ec2.DescribeClassicLinkInstancesInput
	}
	describeClassicLinkInstancesReturns struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}
	describeClassicLinkInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}
	DescribeClassicLinkInstancesRequestStub        func(*ec2.DescribeClassicLinkInstancesInput) (*request.Request, *ec2.DescribeClassicLinkInstancesOutput)
	describeClassicLinkInstancesRequestMutex       sync.RWMutex
	describeClassicLinkInstancesRequestArgsForCall []struct {
		arg1 *ec2.DescribeClassicLinkInstancesInput
	}
	describeClassicLinkInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeClassicLinkInstancesOutput
	}
	describeClassicLinkInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeClassicLinkInstancesOutput
	}
	DescribeClassicLinkInstancesWithContextStub        func(aws.Context, *ec2.DescribeClassicLinkInstancesInput, ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error)
	describeClassicLinkInstancesWithContextMutex       sync.RWMutex
	describeClassicLinkInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClassicLinkInstancesInput
		arg3 []request.Option
	}
	describeClassicLinkInstancesWithContextReturns struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}
	describeClassicLinkInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}
	DescribeClientVpnAuthorizationRulesStub        func(*ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)
	describeClientVpnAuthorizationRulesMutex       sync.RWMutex
	describeClientVpnAuthorizationRulesArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}
	describeClientVpnAuthorizationRulesReturns struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}
	describeClientVpnAuthorizationRulesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}
	DescribeClientVpnAuthorizationRulesRequestStub        func(*ec2.DescribeClientVpnAuthorizationRulesInput) (*request.Request, *ec2.DescribeClientVpnAuthorizationRulesOutput)
	describeClientVpnAuthorizationRulesRequestMutex       sync.RWMutex
	describeClientVpnAuthorizationRulesRequestArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}
	describeClientVpnAuthorizationRulesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnAuthorizationRulesOutput
	}
	describeClientVpnAuthorizationRulesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnAuthorizationRulesOutput
	}
	DescribeClientVpnAuthorizationRulesWithContextStub        func(aws.Context, *ec2.DescribeClientVpnAuthorizationRulesInput, ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)
	describeClientVpnAuthorizationRulesWithContextMutex       sync.RWMutex
	describeClientVpnAuthorizationRulesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnAuthorizationRulesInput
		arg3 []request.Option
	}
	describeClientVpnAuthorizationRulesWithContextReturns struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}
	describeClientVpnAuthorizationRulesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}
	DescribeClientVpnConnectionsStub        func(*ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error)
	describeClientVpnConnectionsMutex       sync.RWMutex
	describeClientVpnConnectionsArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnConnectionsInput
	}
	describeClientVpnConnectionsReturns struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}
	describeClientVpnConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}
	DescribeClientVpnConnectionsRequestStub        func(*ec2.DescribeClientVpnConnectionsInput) (*request.Request, *ec2.DescribeClientVpnConnectionsOutput)
	describeClientVpnConnectionsRequestMutex       sync.RWMutex
	describeClientVpnConnectionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnConnectionsInput
	}
	describeClientVpnConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnConnectionsOutput
	}
	describeClientVpnConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnConnectionsOutput
	}
	DescribeClientVpnConnectionsWithContextStub        func(aws.Context, *ec2.DescribeClientVpnConnectionsInput, ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error)
	describeClientVpnConnectionsWithContextMutex       sync.RWMutex
	describeClientVpnConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnConnectionsInput
		arg3 []request.Option
	}
	describeClientVpnConnectionsWithContextReturns struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}
	describeClientVpnConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}
	DescribeClientVpnEndpointsStub        func(*ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error)
	describeClientVpnEndpointsMutex       sync.RWMutex
	describeClientVpnEndpointsArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnEndpointsInput
	}
	describeClientVpnEndpointsReturns struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}
	describeClientVpnEndpointsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}
	DescribeClientVpnEndpointsRequestStub        func(*ec2.DescribeClientVpnEndpointsInput) (*request.Request, *ec2.DescribeClientVpnEndpointsOutput)
	describeClientVpnEndpointsRequestMutex       sync.RWMutex
	describeClientVpnEndpointsRequestArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnEndpointsInput
	}
	describeClientVpnEndpointsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnEndpointsOutput
	}
	describeClientVpnEndpointsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnEndpointsOutput
	}
	DescribeClientVpnEndpointsWithContextStub        func(aws.Context, *ec2.DescribeClientVpnEndpointsInput, ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error)
	describeClientVpnEndpointsWithContextMutex       sync.RWMutex
	describeClientVpnEndpointsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnEndpointsInput
		arg3 []request.Option
	}
	describeClientVpnEndpointsWithContextReturns struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}
	describeClientVpnEndpointsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}
	DescribeClientVpnRoutesStub        func(*ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error)
	describeClientVpnRoutesMutex       sync.RWMutex
	describeClientVpnRoutesArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnRoutesInput
	}
	describeClientVpnRoutesReturns struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}
	describeClientVpnRoutesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}
	DescribeClientVpnRoutesRequestStub        func(*ec2.DescribeClientVpnRoutesInput) (*request.Request, *ec2.DescribeClientVpnRoutesOutput)
	describeClientVpnRoutesRequestMutex       sync.RWMutex
	describeClientVpnRoutesRequestArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnRoutesInput
	}
	describeClientVpnRoutesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnRoutesOutput
	}
	describeClientVpnRoutesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnRoutesOutput
	}
	DescribeClientVpnRoutesWithContextStub        func(aws.Context, *ec2.DescribeClientVpnRoutesInput, ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error)
	describeClientVpnRoutesWithContextMutex       sync.RWMutex
	describeClientVpnRoutesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnRoutesInput
		arg3 []request.Option
	}
	describeClientVpnRoutesWithContextReturns struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}
	describeClientVpnRoutesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}
	DescribeClientVpnTargetNetworksStub        func(*ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error)
	describeClientVpnTargetNetworksMutex       sync.RWMutex
	describeClientVpnTargetNetworksArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnTargetNetworksInput
	}
	describeClientVpnTargetNetworksReturns struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}
	describeClientVpnTargetNetworksReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}
	DescribeClientVpnTargetNetworksRequestStub        func(*ec2.DescribeClientVpnTargetNetworksInput) (*request.Request, *ec2.DescribeClientVpnTargetNetworksOutput)
	describeClientVpnTargetNetworksRequestMutex       sync.RWMutex
	describeClientVpnTargetNetworksRequestArgsForCall []struct {
		arg1 *ec2.DescribeClientVpnTargetNetworksInput
	}
	describeClientVpnTargetNetworksRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnTargetNetworksOutput
	}
	describeClientVpnTargetNetworksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnTargetNetworksOutput
	}
	DescribeClientVpnTargetNetworksWithContextStub        func(aws.Context, *ec2.DescribeClientVpnTargetNetworksInput, ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error)
	describeClientVpnTargetNetworksWithContextMutex       sync.RWMutex
	describeClientVpnTargetNetworksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnTargetNetworksInput
		arg3 []request.Option
	}
	describeClientVpnTargetNetworksWithContextReturns struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}
	describeClientVpnTargetNetworksWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}
	DescribeConversionTasksStub        func(*ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error)
	describeConversionTasksMutex       sync.RWMutex
	describeConversionTasksArgsForCall []struct {
		arg1 *ec2.DescribeConversionTasksInput
	}
	describeConversionTasksReturns struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}
	describeConversionTasksReturnsOnCall map[int]struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}
	DescribeConversionTasksRequestStub        func(*ec2.DescribeConversionTasksInput) (*request.Request, *ec2.DescribeConversionTasksOutput)
	describeConversionTasksRequestMutex       sync.RWMutex
	describeConversionTasksRequestArgsForCall []struct {
		arg1 *ec2.DescribeConversionTasksInput
	}
	describeConversionTasksRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeConversionTasksOutput
	}
	describeConversionTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeConversionTasksOutput
	}
	DescribeConversionTasksWithContextStub        func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.Option) (*ec2.DescribeConversionTasksOutput, error)
	describeConversionTasksWithContextMutex       sync.RWMutex
	describeConversionTasksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.Option
	}
	describeConversionTasksWithContextReturns struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}
	describeConversionTasksWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}
	DescribeCustomerGatewaysStub        func(*ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error)
	describeCustomerGatewaysMutex       sync.RWMutex
	describeCustomerGatewaysArgsForCall []struct {
		arg1 *ec2.DescribeCustomerGatewaysInput
	}
	describeCustomerGatewaysReturns struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}
	describeCustomerGatewaysReturnsOnCall map[int]struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}
	DescribeCustomerGatewaysRequestStub        func(*ec2.DescribeCustomerGatewaysInput) (*request.Request, *ec2.DescribeCustomerGatewaysOutput)
	describeCustomerGatewaysRequestMutex       sync.RWMutex
	describeCustomerGatewaysRequestArgsForCall []struct {
		arg1 *ec2.DescribeCustomerGatewaysInput
	}
	describeCustomerGatewaysRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeCustomerGatewaysOutput
	}
	describeCustomerGatewaysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeCustomerGatewaysOutput
	}
	DescribeCustomerGatewaysWithContextStub        func(aws.Context, *ec2.DescribeCustomerGatewaysInput, ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error)
	describeCustomerGatewaysWithContextMutex       sync.RWMutex
	describeCustomerGatewaysWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeCustomerGatewaysInput
		arg3 []request.Option
	}
	describeCustomerGatewaysWithContextReturns struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}
	describeCustomerGatewaysWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}
	DescribeDhcpOptionsStub        func(*ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error)
	describeDhcpOptionsMutex       sync.RWMutex
	describeDhcpOptionsArgsForCall []struct {
		arg1 *ec2.DescribeDhcpOptionsInput
	}
	describeDhcpOptionsReturns struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}
	describeDhcpOptionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}
	DescribeDhcpOptionsRequestStub        func(*ec2.DescribeDhcpOptionsInput) (*request.Request, *ec2.DescribeDhcpOptionsOutput)
	describeDhcpOptionsRequestMutex       sync.RWMutex
	describeDhcpOptionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeDhcpOptionsInput
	}
	describeDhcpOptionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeDhcpOptionsOutput
	}
	describeDhcpOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeDhcpOptionsOutput
	}
	DescribeDhcpOptionsWithContextStub        func(aws.Context, *ec2.DescribeDhcpOptionsInput, ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error)
	describeDhcpOptionsWithContextMutex       sync.RWMutex
	describeDhcpOptionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeDhcpOptionsInput
		arg3 []request.Option
	}
	describeDhcpOptionsWithContextReturns struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}
	describeDhcpOptionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}
	DescribeEgressOnlyInternetGatewaysStub        func(*ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)
	describeEgressOnlyInternetGatewaysMutex       sync.RWMutex
	describeEgressOnlyInternetGatewaysArgsForCall []struct {
		arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}
	describeEgressOnlyInternetGatewaysReturns struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}
	describeEgressOnlyInternetGatewaysReturnsOnCall map[int]struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}
	DescribeEgressOnlyInternetGatewaysRequestStub        func(*ec2.DescribeEgressOnlyInternetGatewaysInput) (*request.Request, *ec2.DescribeEgressOnlyInternetGatewaysOutput)
	describeEgressOnlyInternetGatewaysRequestMutex       sync.RWMutex
	describeEgressOnlyInternetGatewaysRequestArgsForCall []struct {
		arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}
	describeEgressOnlyInternetGatewaysRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	}
	describeEgressOnlyInternetGatewaysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	}
	DescribeEgressOnlyInternetGatewaysWithContextStub        func(aws.Context, *ec2.DescribeEgressOnlyInternetGatewaysInput, ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)
	describeEgressOnlyInternetGatewaysWithContextMutex       sync.RWMutex
	describeEgressOnlyInternetGatewaysWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeEgressOnlyInternetGatewaysInput
		arg3 []request.Option
	}
	describeEgressOnlyInternetGatewaysWithContextReturns struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}
	describeEgressOnlyInternetGatewaysWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}
	DescribeElasticGpusStub        func(*ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error)
	describeElasticGpusMutex       sync.RWMutex
	describeElasticGpusArgsForCall []struct {
		arg1 *ec2.DescribeElasticGpusInput
	}
	describeElasticGpusReturns struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}
	describeElasticGpusReturnsOnCall map[int]struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}
	DescribeElasticGpusRequestStub        func(*ec2.DescribeElasticGpusInput) (*request.Request, *ec2.DescribeElasticGpusOutput)
	describeElasticGpusRequestMutex       sync.RWMutex
	describeElasticGpusRequestArgsForCall []struct {
		arg1 *ec2.DescribeElasticGpusInput
	}
	describeElasticGpusRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeElasticGpusOutput
	}
	describeElasticGpusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeElasticGpusOutput
	}
	DescribeElasticGpusWithContextStub        func(aws.Context, *ec2.DescribeElasticGpusInput, ...request.Option) (*ec2.DescribeElasticGpusOutput, error)
	describeElasticGpusWithContextMutex       sync.RWMutex
	describeElasticGpusWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeElasticGpusInput
		arg3 []request.Option
	}
	describeElasticGpusWithContextReturns struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}
	describeElasticGpusWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}
	DescribeExportTasksStub        func(*ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error)
	describeExportTasksMutex       sync.RWMutex
	describeExportTasksArgsForCall []struct {
		arg1 *ec2.DescribeExportTasksInput
	}
	describeExportTasksReturns struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}
	describeExportTasksReturnsOnCall map[int]struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}
	DescribeExportTasksRequestStub        func(*ec2.DescribeExportTasksInput) (*request.Request, *ec2.DescribeExportTasksOutput)
	describeExportTasksRequestMutex       sync.RWMutex
	describeExportTasksRequestArgsForCall []struct {
		arg1 *ec2.DescribeExportTasksInput
	}
	describeExportTasksRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeExportTasksOutput
	}
	describeExportTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeExportTasksOutput
	}
	DescribeExportTasksWithContextStub        func(aws.Context, *ec2.DescribeExportTasksInput, ...request.Option) (*ec2.DescribeExportTasksOutput, error)
	describeExportTasksWithContextMutex       sync.RWMutex
	describeExportTasksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeExportTasksInput
		arg3 []request.Option
	}
	describeExportTasksWithContextReturns struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}
	describeExportTasksWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}
	DescribeFleetHistoryStub        func(*ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error)
	describeFleetHistoryMutex       sync.RWMutex
	describeFleetHistoryArgsForCall []struct {
		arg1 *ec2.DescribeFleetHistoryInput
	}
	describeFleetHistoryReturns struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}
	describeFleetHistoryReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}
	DescribeFleetHistoryRequestStub        func(*ec2.DescribeFleetHistoryInput) (*request.Request, *ec2.DescribeFleetHistoryOutput)
	describeFleetHistoryRequestMutex       sync.RWMutex
	describeFleetHistoryRequestArgsForCall []struct {
		arg1 *ec2.DescribeFleetHistoryInput
	}
	describeFleetHistoryRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetHistoryOutput
	}
	describeFleetHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetHistoryOutput
	}
	DescribeFleetHistoryWithContextStub        func(aws.Context, *ec2.DescribeFleetHistoryInput, ...request.Option) (*ec2.DescribeFleetHistoryOutput, error)
	describeFleetHistoryWithContextMutex       sync.RWMutex
	describeFleetHistoryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFleetHistoryInput
		arg3 []request.Option
	}
	describeFleetHistoryWithContextReturns struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}
	describeFleetHistoryWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}
	DescribeFleetInstancesStub        func(*ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error)
	describeFleetInstancesMutex       sync.RWMutex
	describeFleetInstancesArgsForCall []struct {
		arg1 *ec2.DescribeFleetInstancesInput
	}
	describeFleetInstancesReturns struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}
	describeFleetInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}
	DescribeFleetInstancesRequestStub        func(*ec2.DescribeFleetInstancesInput) (*request.Request, *ec2.DescribeFleetInstancesOutput)
	describeFleetInstancesRequestMutex       sync.RWMutex
	describeFleetInstancesRequestArgsForCall []struct {
		arg1 *ec2.DescribeFleetInstancesInput
	}
	describeFleetInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetInstancesOutput
	}
	describeFleetInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetInstancesOutput
	}
	DescribeFleetInstancesWithContextStub        func(aws.Context, *ec2.DescribeFleetInstancesInput, ...request.Option) (*ec2.DescribeFleetInstancesOutput, error)
	describeFleetInstancesWithContextMutex       sync.RWMutex
	describeFleetInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFleetInstancesInput
		arg3 []request.Option
	}
	describeFleetInstancesWithContextReturns struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}
	describeFleetInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}
	DescribeFleetsStub        func(*ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error)
	describeFleetsMutex       sync.RWMutex
	describeFleetsArgsForCall []struct {
		arg1 *ec2.DescribeFleetsInput
	}
	describeFleetsReturns struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}
	describeFleetsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}
	DescribeFleetsRequestStub        func(*ec2.DescribeFleetsInput) (*request.Request, *ec2.DescribeFleetsOutput)
	describeFleetsRequestMutex       sync.RWMutex
	describeFleetsRequestArgsForCall []struct {
		arg1 *ec2.DescribeFleetsInput
	}
	describeFleetsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetsOutput
	}
	describeFleetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetsOutput
	}
	DescribeFleetsWithContextStub        func(aws.Context, *ec2.DescribeFleetsInput, ...request.Option) (*ec2.DescribeFleetsOutput, error)
	describeFleetsWithContextMutex       sync.RWMutex
	describeFleetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFleetsInput
		arg3 []request.Option
	}
	describeFleetsWithContextReturns struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}
	describeFleetsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}
	DescribeFlowLogsStub        func(*ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error)
	describeFlowLogsMutex       sync.RWMutex
	describeFlowLogsArgsForCall []struct {
		arg1 *ec2.DescribeFlowLogsInput
	}
	describeFlowLogsReturns struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}
	describeFlowLogsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}
	DescribeFlowLogsRequestStub        func(*ec2.DescribeFlowLogsInput) (*request.Request, *ec2.DescribeFlowLogsOutput)
	describeFlowLogsRequestMutex       sync.RWMutex
	describeFlowLogsRequestArgsForCall []struct {
		arg1 *ec2.DescribeFlowLogsInput
	}
	describeFlowLogsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeFlowLogsOutput
	}
	describeFlowLogsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeFlowLogsOutput
	}
	DescribeFlowLogsWithContextStub        func(aws.Context, *ec2.DescribeFlowLogsInput, ...request.Option) (*ec2.DescribeFlowLogsOutput, error)
	describeFlowLogsWithContextMutex       sync.RWMutex
	describeFlowLogsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFlowLogsInput
		arg3 []request.Option
	}
	describeFlowLogsWithContextReturns struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}
	describeFlowLogsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}
	DescribeFpgaImageAttributeStub        func(*ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error)
	describeFpgaImageAttributeMutex       sync.RWMutex
	describeFpgaImageAttributeArgsForCall []struct {
		arg1 *ec2.DescribeFpgaImageAttributeInput
	}
	describeFpgaImageAttributeReturns struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}
	describeFpgaImageAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}
	DescribeFpgaImageAttributeRequestStub        func(*ec2.DescribeFpgaImageAttributeInput) (*request.Request, *ec2.DescribeFpgaImageAttributeOutput)
	describeFpgaImageAttributeRequestMutex       sync.RWMutex
	describeFpgaImageAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeFpgaImageAttributeInput
	}
	describeFpgaImageAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImageAttributeOutput
	}
	describeFpgaImageAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImageAttributeOutput
	}
	DescribeFpgaImageAttributeWithContextStub        func(aws.Context, *ec2.DescribeFpgaImageAttributeInput, ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error)
	describeFpgaImageAttributeWithContextMutex       sync.RWMutex
	describeFpgaImageAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFpgaImageAttributeInput
		arg3 []request.Option
	}
	describeFpgaImageAttributeWithContextReturns struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}
	describeFpgaImageAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}
	DescribeFpgaImagesStub        func(*ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error)
	describeFpgaImagesMutex       sync.RWMutex
	describeFpgaImagesArgsForCall []struct {
		arg1 *ec2.DescribeFpgaImagesInput
	}
	describeFpgaImagesReturns struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}
	describeFpgaImagesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}
	DescribeFpgaImagesRequestStub        func(*ec2.DescribeFpgaImagesInput) (*request.Request, *ec2.DescribeFpgaImagesOutput)
	describeFpgaImagesRequestMutex       sync.RWMutex
	describeFpgaImagesRequestArgsForCall []struct {
		arg1 *ec2.DescribeFpgaImagesInput
	}
	describeFpgaImagesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImagesOutput
	}
	describeFpgaImagesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImagesOutput
	}
	DescribeFpgaImagesWithContextStub        func(aws.Context, *ec2.DescribeFpgaImagesInput, ...request.Option) (*ec2.DescribeFpgaImagesOutput, error)
	describeFpgaImagesWithContextMutex       sync.RWMutex
	describeFpgaImagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFpgaImagesInput
		arg3 []request.Option
	}
	describeFpgaImagesWithContextReturns struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}
	describeFpgaImagesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}
	DescribeHostReservationOfferingsStub        func(*ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error)
	describeHostReservationOfferingsMutex       sync.RWMutex
	describeHostReservationOfferingsArgsForCall []struct {
		arg1 *ec2.DescribeHostReservationOfferingsInput
	}
	describeHostReservationOfferingsReturns struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}
	describeHostReservationOfferingsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}
	DescribeHostReservationOfferingsRequestStub        func(*ec2.DescribeHostReservationOfferingsInput) (*request.Request, *ec2.DescribeHostReservationOfferingsOutput)
	describeHostReservationOfferingsRequestMutex       sync.RWMutex
	describeHostReservationOfferingsRequestArgsForCall []struct {
		arg1 *ec2.DescribeHostReservationOfferingsInput
	}
	describeHostReservationOfferingsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationOfferingsOutput
	}
	describeHostReservationOfferingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationOfferingsOutput
	}
	DescribeHostReservationOfferingsWithContextStub        func(aws.Context, *ec2.DescribeHostReservationOfferingsInput, ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error)
	describeHostReservationOfferingsWithContextMutex       sync.RWMutex
	describeHostReservationOfferingsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeHostReservationOfferingsInput
		arg3 []request.Option
	}
	describeHostReservationOfferingsWithContextReturns struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}
	describeHostReservationOfferingsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}
	DescribeHostReservationsStub        func(*ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error)
	describeHostReservationsMutex       sync.RWMutex
	describeHostReservationsArgsForCall []struct {
		arg1 *ec2.DescribeHostReservationsInput
	}
	describeHostReservationsReturns struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}
	describeHostReservationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}
	DescribeHostReservationsRequestStub        func(*ec2.DescribeHostReservationsInput) (*request.Request, *ec2.DescribeHostReservationsOutput)
	describeHostReservationsRequestMutex       sync.RWMutex
	describeHostReservationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeHostReservationsInput
	}
	describeHostReservationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationsOutput
	}
	describeHostReservationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationsOutput
	}
	DescribeHostReservationsWithContextStub        func(aws.Context, *ec2.DescribeHostReservationsInput, ...request.Option) (*ec2.DescribeHostReservationsOutput, error)
	describeHostReservationsWithContextMutex       sync.RWMutex
	describeHostReservationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeHostReservationsInput
		arg3 []request.Option
	}
	describeHostReservationsWithContextReturns struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}
	describeHostReservationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}
	DescribeHostsStub        func(*ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error)
	describeHostsMutex       sync.RWMutex
	describeHostsArgsForCall []struct {
		arg1 *ec2.DescribeHostsInput
	}
	describeHostsReturns struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}
	describeHostsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}
	DescribeHostsRequestStub        func(*ec2.DescribeHostsInput) (*request.Request, *ec2.DescribeHostsOutput)
	describeHostsRequestMutex       sync.RWMutex
	describeHostsRequestArgsForCall []struct {
		arg1 *ec2.DescribeHostsInput
	}
	describeHostsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeHostsOutput
	}
	describeHostsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeHostsOutput
	}
	DescribeHostsWithContextStub        func(aws.Context, *ec2.DescribeHostsInput, ...request.Option) (*ec2.DescribeHostsOutput, error)
	describeHostsWithContextMutex       sync.RWMutex
	describeHostsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeHostsInput
		arg3 []request.Option
	}
	describeHostsWithContextReturns struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}
	describeHostsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}
	DescribeIamInstanceProfileAssociationsStub        func(*ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)
	describeIamInstanceProfileAssociationsMutex       sync.RWMutex
	describeIamInstanceProfileAssociationsArgsForCall []struct {
		arg1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}
	describeIamInstanceProfileAssociationsReturns struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}
	describeIamInstanceProfileAssociationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}
	DescribeIamInstanceProfileAssociationsRequestStub        func(*ec2.DescribeIamInstanceProfileAssociationsInput) (*request.Request, *ec2.DescribeIamInstanceProfileAssociationsOutput)
	describeIamInstanceProfileAssociationsRequestMutex       sync.RWMutex
	describeIamInstanceProfileAssociationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}
	describeIamInstanceProfileAssociationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeIamInstanceProfileAssociationsOutput
	}
	describeIamInstanceProfileAssociationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeIamInstanceProfileAssociationsOutput
	}
	DescribeIamInstanceProfileAssociationsWithContextStub        func(aws.Context, *ec2.DescribeIamInstanceProfileAssociationsInput, ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)
	describeIamInstanceProfileAssociationsWithContextMutex       sync.RWMutex
	describeIamInstanceProfileAssociationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeIamInstanceProfileAssociationsInput
		arg3 []request.Option
	}
	describeIamInstanceProfileAssociationsWithContextReturns struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}
	describeIamInstanceProfileAssociationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}
	DescribeIdFormatStub        func(*ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error)
	describeIdFormatMutex       sync.RWMutex
	describeIdFormatArgsForCall []struct {
		arg1 *ec2.DescribeIdFormatInput
	}
	describeIdFormatReturns struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}
	describeIdFormatReturnsOnCall map[int]struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}
	DescribeIdFormatRequestStub        func(*ec2.DescribeIdFormatInput) (*request.Request, *ec2.DescribeIdFormatOutput)
	describeIdFormatRequestMutex       sync.RWMutex
	describeIdFormatRequestArgsForCall []struct {
		arg1 *ec2.DescribeIdFormatInput
	}
	describeIdFormatRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeIdFormatOutput
	}
	describeIdFormatRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeIdFormatOutput
	}
	DescribeIdFormatWithContextStub        func(aws.Context, *ec2.DescribeIdFormatInput, ...request.Option) (*ec2.DescribeIdFormatOutput, error)
	describeIdFormatWithContextMutex       sync.RWMutex
	describeIdFormatWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeIdFormatInput
		arg3 []request.Option
	}
	describeIdFormatWithContextReturns struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}
	describeIdFormatWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}
	DescribeIdentityIdFormatStub        func(*ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error)
	describeIdentityIdFormatMutex       sync.RWMutex
	describeIdentityIdFormatArgsForCall []struct {
		arg1 *ec2.DescribeIdentityIdFormatInput
	}
	describeIdentityIdFormatReturns struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}
	describeIdentityIdFormatReturnsOnCall map[int]struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}
	DescribeIdentityIdFormatRequestStub        func(*ec2.DescribeIdentityIdFormatInput) (*request.Request, *ec2.DescribeIdentityIdFormatOutput)
	describeIdentityIdFormatRequestMutex       sync.RWMutex
	describeIdentityIdFormatRequestArgsForCall []struct {
		arg1 *ec2.DescribeIdentityIdFormatInput
	}
	describeIdentityIdFormatRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeIdentityIdFormatOutput
	}
	describeIdentityIdFormatRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeIdentityIdFormatOutput
	}
	DescribeIdentityIdFormatWithContextStub        func(aws.Context, *ec2.DescribeIdentityIdFormatInput, ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error)
	describeIdentityIdFormatWithContextMutex       sync.RWMutex
	describeIdentityIdFormatWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeIdentityIdFormatInput
		arg3 []request.Option
	}
	describeIdentityIdFormatWithContextReturns struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}
	describeIdentityIdFormatWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}
	DescribeImageAttributeStub        func(*ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error)
	describeImageAttributeMutex       sync.RWMutex
	describeImageAttributeArgsForCall []struct {
		arg1 *ec2.DescribeImageAttributeInput
	}
	describeImageAttributeReturns struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}
	describeImageAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}
	DescribeImageAttributeRequestStub        func(*ec2.DescribeImageAttributeInput) (*request.Request, *ec2.DescribeImageAttributeOutput)
	describeImageAttributeRequestMutex       sync.RWMutex
	describeImageAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeImageAttributeInput
	}
	describeImageAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeImageAttributeOutput
	}
	describeImageAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeImageAttributeOutput
	}
	DescribeImageAttributeWithContextStub        func(aws.Context, *ec2.DescribeImageAttributeInput, ...request.Option) (*ec2.DescribeImageAttributeOutput, error)
	describeImageAttributeWithContextMutex       sync.RWMutex
	describeImageAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImageAttributeInput
		arg3 []request.Option
	}
	describeImageAttributeWithContextReturns struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}
	describeImageAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}
	DescribeImagesStub        func(*ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error)
	describeImagesMutex       sync.RWMutex
	describeImagesArgsForCall []struct {
		arg1 *ec2.DescribeImagesInput
	}
	describeImagesReturns struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}
	describeImagesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}
	DescribeImagesRequestStub        func(*ec2.DescribeImagesInput) (*request.Request, *ec2.DescribeImagesOutput)
	describeImagesRequestMutex       sync.RWMutex
	describeImagesRequestArgsForCall []struct {
		arg1 *ec2.DescribeImagesInput
	}
	describeImagesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeImagesOutput
	}
	describeImagesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeImagesOutput
	}
	DescribeImagesWithContextStub        func(aws.Context, *ec2.DescribeImagesInput, ...request.Option) (*ec2.DescribeImagesOutput, error)
	describeImagesWithContextMutex       sync.RWMutex
	describeImagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImagesInput
		arg3 []request.Option
	}
	describeImagesWithContextReturns struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}
	describeImagesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}
	DescribeImportImageTasksStub        func(*ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error)
	describeImportImageTasksMutex       sync.RWMutex
	describeImportImageTasksArgsForCall []struct {
		arg1 *ec2.DescribeImportImageTasksInput
	}
	describeImportImageTasksReturns struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}
	describeImportImageTasksReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}
	DescribeImportImageTasksRequestStub        func(*ec2.DescribeImportImageTasksInput) (*request.Request, *ec2.DescribeImportImageTasksOutput)
	describeImportImageTasksRequestMutex       sync.RWMutex
	describeImportImageTasksRequestArgsForCall []struct {
		arg1 *ec2.DescribeImportImageTasksInput
	}
	describeImportImageTasksRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeImportImageTasksOutput
	}
	describeImportImageTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeImportImageTasksOutput
	}
	DescribeImportImageTasksWithContextStub        func(aws.Context, *ec2.DescribeImportImageTasksInput, ...request.Option) (*ec2.DescribeImportImageTasksOutput, error)
	describeImportImageTasksWithContextMutex       sync.RWMutex
	describeImportImageTasksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImportImageTasksInput
		arg3 []request.Option
	}
	describeImportImageTasksWithContextReturns struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}
	describeImportImageTasksWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}
	DescribeImportSnapshotTasksStub        func(*ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error)
	describeImportSnapshotTasksMutex       sync.RWMutex
	describeImportSnapshotTasksArgsForCall []struct {
		arg1 *ec2.DescribeImportSnapshotTasksInput
	}
	describeImportSnapshotTasksReturns struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}
	describeImportSnapshotTasksReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}
	DescribeImportSnapshotTasksRequestStub        func(*ec2.DescribeImportSnapshotTasksInput) (*request.Request, *ec2.DescribeImportSnapshotTasksOutput)
	describeImportSnapshotTasksRequestMutex       sync.RWMutex
	describeImportSnapshotTasksRequestArgsForCall []struct {
		arg1 *ec2.DescribeImportSnapshotTasksInput
	}
	describeImportSnapshotTasksRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeImportSnapshotTasksOutput
	}
	describeImportSnapshotTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeImportSnapshotTasksOutput
	}
	DescribeImportSnapshotTasksWithContextStub        func(aws.Context, *ec2.DescribeImportSnapshotTasksInput, ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error)
	describeImportSnapshotTasksWithContextMutex       sync.RWMutex
	describeImportSnapshotTasksWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImportSnapshotTasksInput
		arg3 []request.Option
	}
	describeImportSnapshotTasksWithContextReturns struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}
	describeImportSnapshotTasksWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}
	DescribeInstanceAttributeStub        func(*ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error)
	describeInstanceAttributeMutex       sync.RWMutex
	describeInstanceAttributeArgsForCall []struct {
		arg1 *ec2.DescribeInstanceAttributeInput
	}
	describeInstanceAttributeReturns struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}
	describeInstanceAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}
	DescribeInstanceAttributeRequestStub        func(*ec2.DescribeInstanceAttributeInput) (*request.Request, *ec2.DescribeInstanceAttributeOutput)
	describeInstanceAttributeRequestMutex       sync.RWMutex
	describeInstanceAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeInstanceAttributeInput
	}
	describeInstanceAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceAttributeOutput
	}
	describeInstanceAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceAttributeOutput
	}
	DescribeInstanceAttributeWithContextStub        func(aws.Context, *ec2.DescribeInstanceAttributeInput, ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error)
	describeInstanceAttributeWithContextMutex       sync.RWMutex
	describeInstanceAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceAttributeInput
		arg3 []request.Option
	}
	describeInstanceAttributeWithContextReturns struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}
	describeInstanceAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}
	DescribeInstanceCreditSpecificationsStub        func(*ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)
	describeInstanceCreditSpecificationsMutex       sync.RWMutex
	describeInstanceCreditSpecificationsArgsForCall []struct {
		arg1 *ec2.DescribeInstanceCreditSpecificationsInput
	}
	describeInstanceCreditSpecificationsReturns struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}
	describeInstanceCreditSpecificationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}
	DescribeInstanceCreditSpecificationsRequestStub        func(*ec2.DescribeInstanceCreditSpecificationsInput) (*request.Request, *ec2.DescribeInstanceCreditSpecificationsOutput)
	describeInstanceCreditSpecificationsRequestMutex       sync.RWMutex
	describeInstanceCreditSpecificationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeInstanceCreditSpecificationsInput
	}
	describeInstanceCreditSpecificationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceCreditSpecificationsOutput
	}
	describeInstanceCreditSpecificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceCreditSpecificationsOutput
	}
	DescribeInstanceCreditSpecificationsWithContextStub        func(aws.Context, *ec2.DescribeInstanceCreditSpecificationsInput, ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)
	describeInstanceCreditSpecificationsWithContextMutex       sync.RWMutex
	describeInstanceCreditSpecificationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceCreditSpecificationsInput
		arg3 []request.Option
	}
	describeInstanceCreditSpecificationsWithContextReturns struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}
	describeInstanceCreditSpecificationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}
	DescribeInstanceStatusStub        func(*ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error)
	describeInstanceStatusMutex       sync.RWMutex
	describeInstanceStatusArgsForCall []struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}
	describeInstanceStatusReturns struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}
	describeInstanceStatusReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}
	DescribeInstanceStatusPagesStub        func(*ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool) error
	describeInstanceStatusPagesMutex       sync.RWMutex
	describeInstanceStatusPagesArgsForCall []struct {
		arg1 *ec2.DescribeInstanceStatusInput
		arg2 func(*ec2.DescribeInstanceStatusOutput, bool) bool
	}
	describeInstanceStatusPagesReturns struct {
		result1 error
	}
	describeInstanceStatusPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstanceStatusPagesWithContextStub        func(aws.Context, *ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool, ...request.Option) error
	describeInstanceStatusPagesWithContextMutex       sync.RWMutex
	describeInstanceStatusPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 func(*ec2.DescribeInstanceStatusOutput, bool) bool
		arg4 []request.Option
	}
	describeInstanceStatusPagesWithContextReturns struct {
		result1 error
	}
	describeInstanceStatusPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstanceStatusRequestStub        func(*ec2.DescribeInstanceStatusInput) (*request.Request, *ec2.DescribeInstanceStatusOutput)
	describeInstanceStatusRequestMutex       sync.RWMutex
	describeInstanceStatusRequestArgsForCall []struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}
	describeInstanceStatusRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceStatusOutput
	}
	describeInstanceStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceStatusOutput
	}
	DescribeInstanceStatusWithContextStub        func(aws.Context, *ec2.DescribeInstanceStatusInput, ...request.Option) (*ec2.DescribeInstanceStatusOutput, error)
	describeInstanceStatusWithContextMutex       sync.RWMutex
	describeInstanceStatusWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 []request.Option
	}
	describeInstanceStatusWithContextReturns struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}
	describeInstanceStatusWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}
	DescribeInstancesStub        func(*ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)
	describeInstancesMutex       sync.RWMutex
	describeInstancesArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	describeInstancesReturns struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	describeInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	DescribeInstancesPagesStub        func(*ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool) error
	describeInstancesPagesMutex       sync.RWMutex
	describeInstancesPagesArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
		arg2 func(*ec2.DescribeInstancesOutput, bool) bool
	}
	describeInstancesPagesReturns struct {
		result1 error
	}
	describeInstancesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancesPagesWithContextStub        func(aws.Context, *ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool, ...request.Option) error
	describeInstancesPagesWithContextMutex       sync.RWMutex
	describeInstancesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 func(*ec2.DescribeInstancesOutput, bool) bool
		arg4 []request.Option
	}
	describeInstancesPagesWithContextReturns struct {
		result1 error
	}
	describeInstancesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeInstancesRequestStub        func(*ec2.DescribeInstancesInput) (*request.Request, *ec2.DescribeInstancesOutput)
	describeInstancesRequestMutex       sync.RWMutex
	describeInstancesRequestArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	describeInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeInstancesOutput
	}
	describeInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeInstancesOutput
	}
	DescribeInstancesWithContextStub        func(aws.Context, *ec2.DescribeInstancesInput, ...request.Option) (*ec2.DescribeInstancesOutput, error)
	describeInstancesWithContextMutex       sync.RWMutex
	describeInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.Option
	}
	describeInstancesWithContextReturns struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	describeInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	DescribeInternetGatewaysStub        func(*ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error)
	describeInternetGatewaysMutex       sync.RWMutex
	describeInternetGatewaysArgsForCall []struct {
		arg1 *ec2.DescribeInternetGatewaysInput
	}
	describeInternetGatewaysReturns struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}
	describeInternetGatewaysReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}
	DescribeInternetGatewaysRequestStub        func(*ec2.DescribeInternetGatewaysInput) (*request.Request, *ec2.DescribeInternetGatewaysOutput)
	describeInternetGatewaysRequestMutex       sync.RWMutex
	describeInternetGatewaysRequestArgsForCall []struct {
		arg1 *ec2.DescribeInternetGatewaysInput
	}
	describeInternetGatewaysRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeInternetGatewaysOutput
	}
	describeInternetGatewaysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeInternetGatewaysOutput
	}
	DescribeInternetGatewaysWithContextStub        func(aws.Context, *ec2.DescribeInternetGatewaysInput, ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error)
	describeInternetGatewaysWithContextMutex       sync.RWMutex
	describeInternetGatewaysWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInternetGatewaysInput
		arg3 []request.Option
	}
	describeInternetGatewaysWithContextReturns struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}
	describeInternetGatewaysWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}
	DescribeKeyPairsStub        func(*ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error)
	describeKeyPairsMutex       sync.RWMutex
	describeKeyPairsArgsForCall []struct {
		arg1 *ec2.DescribeKeyPairsInput
	}
	describeKeyPairsReturns struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}
	describeKeyPairsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}
	DescribeKeyPairsRequestStub        func(*ec2.DescribeKeyPairsInput) (*request.Request, *ec2.DescribeKeyPairsOutput)
	describeKeyPairsRequestMutex       sync.RWMutex
	describeKeyPairsRequestArgsForCall []struct {
		arg1 *ec2.DescribeKeyPairsInput
	}
	describeKeyPairsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeKeyPairsOutput
	}
	describeKeyPairsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeKeyPairsOutput
	}
	DescribeKeyPairsWithContextStub        func(aws.Context, *ec2.DescribeKeyPairsInput, ...request.Option) (*ec2.DescribeKeyPairsOutput, error)
	describeKeyPairsWithContextMutex       sync.RWMutex
	describeKeyPairsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeKeyPairsInput
		arg3 []request.Option
	}
	describeKeyPairsWithContextReturns struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}
	describeKeyPairsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}
	DescribeLaunchTemplateVersionsStub        func(*ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error)
	describeLaunchTemplateVersionsMutex       sync.RWMutex
	describeLaunchTemplateVersionsArgsForCall []struct {
		arg1 *ec2.DescribeLaunchTemplateVersionsInput
	}
	describeLaunchTemplateVersionsReturns struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}
	describeLaunchTemplateVersionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}
	DescribeLaunchTemplateVersionsRequestStub        func(*ec2.DescribeLaunchTemplateVersionsInput) (*request.Request, *ec2.DescribeLaunchTemplateVersionsOutput)
	describeLaunchTemplateVersionsRequestMutex       sync.RWMutex
	describeLaunchTemplateVersionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeLaunchTemplateVersionsInput
	}
	describeLaunchTemplateVersionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplateVersionsOutput
	}
	describeLaunchTemplateVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplateVersionsOutput
	}
	DescribeLaunchTemplateVersionsWithContextStub        func(aws.Context, *ec2.DescribeLaunchTemplateVersionsInput, ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error)
	describeLaunchTemplateVersionsWithContextMutex       sync.RWMutex
	describeLaunchTemplateVersionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeLaunchTemplateVersionsInput
		arg3 []request.Option
	}
	describeLaunchTemplateVersionsWithContextReturns struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}
	describeLaunchTemplateVersionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}
	DescribeLaunchTemplatesStub        func(*ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error)
	describeLaunchTemplatesMutex       sync.RWMutex
	describeLaunchTemplatesArgsForCall []struct {
		arg1 *ec2.DescribeLaunchTemplatesInput
	}
	describeLaunchTemplatesReturns struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}
	describeLaunchTemplatesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}
	DescribeLaunchTemplatesRequestStub        func(*ec2.DescribeLaunchTemplatesInput) (*request.Request, *ec2.DescribeLaunchTemplatesOutput)
	describeLaunchTemplatesRequestMutex       sync.RWMutex
	describeLaunchTemplatesRequestArgsForCall []struct {
		arg1 *ec2.DescribeLaunchTemplatesInput
	}
	describeLaunchTemplatesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplatesOutput
	}
	describeLaunchTemplatesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplatesOutput
	}
	DescribeLaunchTemplatesWithContextStub        func(aws.Context, *ec2.DescribeLaunchTemplatesInput, ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error)
	describeLaunchTemplatesWithContextMutex       sync.RWMutex
	describeLaunchTemplatesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeLaunchTemplatesInput
		arg3 []request.Option
	}
	describeLaunchTemplatesWithContextReturns struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}
	describeLaunchTemplatesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}
	DescribeMovingAddressesStub        func(*ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error)
	describeMovingAddressesMutex       sync.RWMutex
	describeMovingAddressesArgsForCall []struct {
		arg1 *ec2.DescribeMovingAddressesInput
	}
	describeMovingAddressesReturns struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}
	describeMovingAddressesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}
	DescribeMovingAddressesRequestStub        func(*ec2.DescribeMovingAddressesInput) (*request.Request, *ec2.DescribeMovingAddressesOutput)
	describeMovingAddressesRequestMutex       sync.RWMutex
	describeMovingAddressesRequestArgsForCall []struct {
		arg1 *ec2.DescribeMovingAddressesInput
	}
	describeMovingAddressesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeMovingAddressesOutput
	}
	describeMovingAddressesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeMovingAddressesOutput
	}
	DescribeMovingAddressesWithContextStub        func(aws.Context, *ec2.DescribeMovingAddressesInput, ...request.Option) (*ec2.DescribeMovingAddressesOutput, error)
	describeMovingAddressesWithContextMutex       sync.RWMutex
	describeMovingAddressesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeMovingAddressesInput
		arg3 []request.Option
	}
	describeMovingAddressesWithContextReturns struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}
	describeMovingAddressesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}
	DescribeNatGatewaysStub        func(*ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error)
	describeNatGatewaysMutex       sync.RWMutex
	describeNatGatewaysArgsForCall []struct {
		arg1 *ec2.DescribeNatGatewaysInput
	}
	describeNatGatewaysReturns struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}
	describeNatGatewaysReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}
	DescribeNatGatewaysPagesStub        func(*ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool) error
	describeNatGatewaysPagesMutex       sync.RWMutex
	describeNatGatewaysPagesArgsForCall []struct {
		arg1 *ec2.DescribeNatGatewaysInput
		arg2 func(*ec2.DescribeNatGatewaysOutput, bool) bool
	}
	describeNatGatewaysPagesReturns struct {
		result1 error
	}
	describeNatGatewaysPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeNatGatewaysPagesWithContextStub        func(aws.Context, *ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool, ...request.Option) error
	describeNatGatewaysPagesWithContextMutex       sync.RWMutex
	describeNatGatewaysPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNatGatewaysInput
		arg3 func(*ec2.DescribeNatGatewaysOutput, bool) bool
		arg4 []request.Option
	}
	describeNatGatewaysPagesWithContextReturns struct {
		result1 error
	}
	describeNatGatewaysPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeNatGatewaysRequestStub        func(*ec2.DescribeNatGatewaysInput) (*request.Request, *ec2.DescribeNatGatewaysOutput)
	describeNatGatewaysRequestMutex       sync.RWMutex
	describeNatGatewaysRequestArgsForCall []struct {
		arg1 *ec2.DescribeNatGatewaysInput
	}
	describeNatGatewaysRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeNatGatewaysOutput
	}
	describeNatGatewaysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeNatGatewaysOutput
	}
	DescribeNatGatewaysWithContextStub        func(aws.Context, *ec2.DescribeNatGatewaysInput, ...request.Option) (*ec2.DescribeNatGatewaysOutput, error)
	describeNatGatewaysWithContextMutex       sync.RWMutex
	describeNatGatewaysWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNatGatewaysInput
		arg3 []request.Option
	}
	describeNatGatewaysWithContextReturns struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}
	describeNatGatewaysWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}
	DescribeNetworkAclsStub        func(*ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error)
	describeNetworkAclsMutex       sync.RWMutex
	describeNetworkAclsArgsForCall []struct {
		arg1 *ec2.DescribeNetworkAclsInput
	}
	describeNetworkAclsReturns struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}
	describeNetworkAclsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}
	DescribeNetworkAclsRequestStub        func(*ec2.DescribeNetworkAclsInput) (*request.Request, *ec2.DescribeNetworkAclsOutput)
	describeNetworkAclsRequestMutex       sync.RWMutex
	describeNetworkAclsRequestArgsForCall []struct {
		arg1 *ec2.DescribeNetworkAclsInput
	}
	describeNetworkAclsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkAclsOutput
	}
	describeNetworkAclsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkAclsOutput
	}
	DescribeNetworkAclsWithContextStub        func(aws.Context, *ec2.DescribeNetworkAclsInput, ...request.Option) (*ec2.DescribeNetworkAclsOutput, error)
	describeNetworkAclsWithContextMutex       sync.RWMutex
	describeNetworkAclsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkAclsInput
		arg3 []request.Option
	}
	describeNetworkAclsWithContextReturns struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}
	describeNetworkAclsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}
	DescribeNetworkInterfaceAttributeStub        func(*ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)
	describeNetworkInterfaceAttributeMutex       sync.RWMutex
	describeNetworkInterfaceAttributeArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfaceAttributeInput
	}
	describeNetworkInterfaceAttributeReturns struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}
	describeNetworkInterfaceAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}
	DescribeNetworkInterfaceAttributeRequestStub        func(*ec2.DescribeNetworkInterfaceAttributeInput) (*request.Request, *ec2.DescribeNetworkInterfaceAttributeOutput)
	describeNetworkInterfaceAttributeRequestMutex       sync.RWMutex
	describeNetworkInterfaceAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfaceAttributeInput
	}
	describeNetworkInterfaceAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfaceAttributeOutput
	}
	describeNetworkInterfaceAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfaceAttributeOutput
	}
	DescribeNetworkInterfaceAttributeWithContextStub        func(aws.Context, *ec2.DescribeNetworkInterfaceAttributeInput, ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)
	describeNetworkInterfaceAttributeWithContextMutex       sync.RWMutex
	describeNetworkInterfaceAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfaceAttributeInput
		arg3 []request.Option
	}
	describeNetworkInterfaceAttributeWithContextReturns struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}
	describeNetworkInterfaceAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}
	DescribeNetworkInterfacePermissionsStub        func(*ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)
	describeNetworkInterfacePermissionsMutex       sync.RWMutex
	describeNetworkInterfacePermissionsArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfacePermissionsInput
	}
	describeNetworkInterfacePermissionsReturns struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}
	describeNetworkInterfacePermissionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}
	DescribeNetworkInterfacePermissionsRequestStub        func(*ec2.DescribeNetworkInterfacePermissionsInput) (*request.Request, *ec2.DescribeNetworkInterfacePermissionsOutput)
	describeNetworkInterfacePermissionsRequestMutex       sync.RWMutex
	describeNetworkInterfacePermissionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfacePermissionsInput
	}
	describeNetworkInterfacePermissionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacePermissionsOutput
	}
	describeNetworkInterfacePermissionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacePermissionsOutput
	}
	DescribeNetworkInterfacePermissionsWithContextStub        func(aws.Context, *ec2.DescribeNetworkInterfacePermissionsInput, ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)
	describeNetworkInterfacePermissionsWithContextMutex       sync.RWMutex
	describeNetworkInterfacePermissionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacePermissionsInput
		arg3 []request.Option
	}
	describeNetworkInterfacePermissionsWithContextReturns struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}
	describeNetworkInterfacePermissionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}
	DescribeNetworkInterfacesStub        func(*ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error)
	describeNetworkInterfacesMutex       sync.RWMutex
	describeNetworkInterfacesArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
	}
	describeNetworkInterfacesReturns struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}
	describeNetworkInterfacesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}
	DescribeNetworkInterfacesPagesStub        func(*ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error
	describeNetworkInterfacesPagesMutex       sync.RWMutex
	describeNetworkInterfacesPagesArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
		arg2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
	}
	describeNetworkInterfacesPagesReturns struct {
		result1 error
	}
	describeNetworkInterfacesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeNetworkInterfacesPagesWithContextStub        func(aws.Context, *ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, ...request.Option) error
	describeNetworkInterfacesPagesWithContextMutex       sync.RWMutex
	describeNetworkInterfacesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacesInput
		arg3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
		arg4 []request.Option
	}
	describeNetworkInterfacesPagesWithContextReturns struct {
		result1 error
	}
	describeNetworkInterfacesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeNetworkInterfacesRequestStub        func(*ec2.DescribeNetworkInterfacesInput) (*request.Request, *ec2.DescribeNetworkInterfacesOutput)
	describeNetworkInterfacesRequestMutex       sync.RWMutex
	describeNetworkInterfacesRequestArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
	}
	describeNetworkInterfacesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacesOutput
	}
	describeNetworkInterfacesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacesOutput
	}
	DescribeNetworkInterfacesWithContextStub        func(aws.Context, *ec2.DescribeNetworkInterfacesInput, ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error)
	describeNetworkInterfacesWithContextMutex       sync.RWMutex
	describeNetworkInterfacesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacesInput
		arg3 []request.Option
	}
	describeNetworkInterfacesWithContextReturns struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}
	describeNetworkInterfacesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}
	DescribePlacementGroupsStub        func(*ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error)
	describePlacementGroupsMutex       sync.RWMutex
	describePlacementGroupsArgsForCall []struct {
		arg1 *ec2.DescribePlacementGroupsInput
	}
	describePlacementGroupsReturns struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}
	describePlacementGroupsReturnsOnCall map[int]struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}
	DescribePlacementGroupsRequestStub        func(*ec2.DescribePlacementGroupsInput) (*request.Request, *ec2.DescribePlacementGroupsOutput)
	describePlacementGroupsRequestMutex       sync.RWMutex
	describePlacementGroupsRequestArgsForCall []struct {
		arg1 *ec2.DescribePlacementGroupsInput
	}
	describePlacementGroupsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribePlacementGroupsOutput
	}
	describePlacementGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribePlacementGroupsOutput
	}
	DescribePlacementGroupsWithContextStub        func(aws.Context, *ec2.DescribePlacementGroupsInput, ...request.Option) (*ec2.DescribePlacementGroupsOutput, error)
	describePlacementGroupsWithContextMutex       sync.RWMutex
	describePlacementGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribePlacementGroupsInput
		arg3 []request.Option
	}
	describePlacementGroupsWithContextReturns struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}
	describePlacementGroupsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}
	DescribePrefixListsStub        func(*ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error)
	describePrefixListsMutex       sync.RWMutex
	describePrefixListsArgsForCall []struct {
		arg1 *ec2.DescribePrefixListsInput
	}
	describePrefixListsReturns struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}
	describePrefixListsReturnsOnCall map[int]struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}
	DescribePrefixListsRequestStub        func(*ec2.DescribePrefixListsInput) (*request.Request, *ec2.DescribePrefixListsOutput)
	describePrefixListsRequestMutex       sync.RWMutex
	describePrefixListsRequestArgsForCall []struct {
		arg1 *ec2.DescribePrefixListsInput
	}
	describePrefixListsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribePrefixListsOutput
	}
	describePrefixListsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribePrefixListsOutput
	}
	DescribePrefixListsWithContextStub        func(aws.Context, *ec2.DescribePrefixListsInput, ...request.Option) (*ec2.DescribePrefixListsOutput, error)
	describePrefixListsWithContextMutex       sync.RWMutex
	describePrefixListsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribePrefixListsInput
		arg3 []request.Option
	}
	describePrefixListsWithContextReturns struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}
	describePrefixListsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}
	DescribePrincipalIdFormatStub        func(*ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error)
	describePrincipalIdFormatMutex       sync.RWMutex
	describePrincipalIdFormatArgsForCall []struct {
		arg1 *ec2.DescribePrincipalIdFormatInput
	}
	describePrincipalIdFormatReturns struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}
	describePrincipalIdFormatReturnsOnCall map[int]struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}
	DescribePrincipalIdFormatRequestStub        func(*ec2.DescribePrincipalIdFormatInput) (*request.Request, *ec2.DescribePrincipalIdFormatOutput)
	describePrincipalIdFormatRequestMutex       sync.RWMutex
	describePrincipalIdFormatRequestArgsForCall []struct {
		arg1 *ec2.DescribePrincipalIdFormatInput
	}
	describePrincipalIdFormatRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribePrincipalIdFormatOutput
	}
	describePrincipalIdFormatRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribePrincipalIdFormatOutput
	}
	DescribePrincipalIdFormatWithContextStub        func(aws.Context, *ec2.DescribePrincipalIdFormatInput, ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error)
	describePrincipalIdFormatWithContextMutex       sync.RWMutex
	describePrincipalIdFormatWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribePrincipalIdFormatInput
		arg3 []request.Option
	}
	describePrincipalIdFormatWithContextReturns struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}
	describePrincipalIdFormatWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}
	DescribePublicIpv4PoolsStub        func(*ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error)
	describePublicIpv4PoolsMutex       sync.RWMutex
	describePublicIpv4PoolsArgsForCall []struct {
		arg1 *ec2.DescribePublicIpv4PoolsInput
	}
	describePublicIpv4PoolsReturns struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}
	describePublicIpv4PoolsReturnsOnCall map[int]struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}
	DescribePublicIpv4PoolsRequestStub        func(*ec2.DescribePublicIpv4PoolsInput) (*request.Request, *ec2.DescribePublicIpv4PoolsOutput)
	describePublicIpv4PoolsRequestMutex       sync.RWMutex
	describePublicIpv4PoolsRequestArgsForCall []struct {
		arg1 *ec2.DescribePublicIpv4PoolsInput
	}
	describePublicIpv4PoolsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribePublicIpv4PoolsOutput
	}
	describePublicIpv4PoolsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribePublicIpv4PoolsOutput
	}
	DescribePublicIpv4PoolsWithContextStub        func(aws.Context, *ec2.DescribePublicIpv4PoolsInput, ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error)
	describePublicIpv4PoolsWithContextMutex       sync.RWMutex
	describePublicIpv4PoolsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribePublicIpv4PoolsInput
		arg3 []request.Option
	}
	describePublicIpv4PoolsWithContextReturns struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}
	describePublicIpv4PoolsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}
	DescribeRegionsStub        func(*ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error)
	describeRegionsMutex       sync.RWMutex
	describeRegionsArgsForCall []struct {
		arg1 *ec2.DescribeRegionsInput
	}
	describeRegionsReturns struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}
	describeRegionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}
	DescribeRegionsRequestStub        func(*ec2.DescribeRegionsInput) (*request.Request, *ec2.DescribeRegionsOutput)
	describeRegionsRequestMutex       sync.RWMutex
	describeRegionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeRegionsInput
	}
	describeRegionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeRegionsOutput
	}
	describeRegionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeRegionsOutput
	}
	DescribeRegionsWithContextStub        func(aws.Context, *ec2.DescribeRegionsInput, ...request.Option) (*ec2.DescribeRegionsOutput, error)
	describeRegionsWithContextMutex       sync.RWMutex
	describeRegionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeRegionsInput
		arg3 []request.Option
	}
	describeRegionsWithContextReturns struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}
	describeRegionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}
	DescribeReservedInstancesStub        func(*ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error)
	describeReservedInstancesMutex       sync.RWMutex
	describeReservedInstancesArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesInput
	}
	describeReservedInstancesReturns struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}
	describeReservedInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}
	DescribeReservedInstancesListingsStub        func(*ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error)
	describeReservedInstancesListingsMutex       sync.RWMutex
	describeReservedInstancesListingsArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesListingsInput
	}
	describeReservedInstancesListingsReturns struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}
	describeReservedInstancesListingsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}
	DescribeReservedInstancesListingsRequestStub        func(*ec2.DescribeReservedInstancesListingsInput) (*request.Request, *ec2.DescribeReservedInstancesListingsOutput)
	describeReservedInstancesListingsRequestMutex       sync.RWMutex
	describeReservedInstancesListingsRequestArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesListingsInput
	}
	describeReservedInstancesListingsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesListingsOutput
	}
	describeReservedInstancesListingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesListingsOutput
	}
	DescribeReservedInstancesListingsWithContextStub        func(aws.Context, *ec2.DescribeReservedInstancesListingsInput, ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error)
	describeReservedInstancesListingsWithContextMutex       sync.RWMutex
	describeReservedInstancesListingsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesListingsInput
		arg3 []request.Option
	}
	describeReservedInstancesListingsWithContextReturns struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}
	describeReservedInstancesListingsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}
	DescribeReservedInstancesModificationsStub        func(*ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error)
	describeReservedInstancesModificationsMutex       sync.RWMutex
	describeReservedInstancesModificationsArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesModificationsInput
	}
	describeReservedInstancesModificationsReturns struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}
	describeReservedInstancesModificationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}
	DescribeReservedInstancesModificationsPagesStub        func(*ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error
	describeReservedInstancesModificationsPagesMutex       sync.RWMutex
	describeReservedInstancesModificationsPagesArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesModificationsInput
		arg2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
	}
	describeReservedInstancesModificationsPagesReturns struct {
		result1 error
	}
	describeReservedInstancesModificationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedInstancesModificationsPagesWithContextStub        func(aws.Context, *ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, ...request.Option) error
	describeReservedInstancesModificationsPagesWithContextMutex       sync.RWMutex
	describeReservedInstancesModificationsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesModificationsInput
		arg3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedInstancesModificationsPagesWithContextReturns struct {
		result1 error
	}
	describeReservedInstancesModificationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedInstancesModificationsRequestStub        func(*ec2.DescribeReservedInstancesModificationsInput) (*request.Request, *ec2.DescribeReservedInstancesModificationsOutput)
	describeReservedInstancesModificationsRequestMutex       sync.RWMutex
	describeReservedInstancesModificationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesModificationsInput
	}
	describeReservedInstancesModificationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesModificationsOutput
	}
	describeReservedInstancesModificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesModificationsOutput
	}
	DescribeReservedInstancesModificationsWithContextStub        func(aws.Context, *ec2.DescribeReservedInstancesModificationsInput, ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error)
	describeReservedInstancesModificationsWithContextMutex       sync.RWMutex
	describeReservedInstancesModificationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesModificationsInput
		arg3 []request.Option
	}
	describeReservedInstancesModificationsWithContextReturns struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}
	describeReservedInstancesModificationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}
	DescribeReservedInstancesOfferingsStub        func(*ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error)
	describeReservedInstancesOfferingsMutex       sync.RWMutex
	describeReservedInstancesOfferingsArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesOfferingsInput
	}
	describeReservedInstancesOfferingsReturns struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}
	describeReservedInstancesOfferingsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}
	DescribeReservedInstancesOfferingsPagesStub        func(*ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error
	describeReservedInstancesOfferingsPagesMutex       sync.RWMutex
	describeReservedInstancesOfferingsPagesArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesOfferingsInput
		arg2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
	}
	describeReservedInstancesOfferingsPagesReturns struct {
		result1 error
	}
	describeReservedInstancesOfferingsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedInstancesOfferingsPagesWithContextStub        func(aws.Context, *ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, ...request.Option) error
	describeReservedInstancesOfferingsPagesWithContextMutex       sync.RWMutex
	describeReservedInstancesOfferingsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesOfferingsInput
		arg3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedInstancesOfferingsPagesWithContextReturns struct {
		result1 error
	}
	describeReservedInstancesOfferingsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedInstancesOfferingsRequestStub        func(*ec2.DescribeReservedInstancesOfferingsInput) (*request.Request, *ec2.DescribeReservedInstancesOfferingsOutput)
	describeReservedInstancesOfferingsRequestMutex       sync.RWMutex
	describeReservedInstancesOfferingsRequestArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesOfferingsInput
	}
	describeReservedInstancesOfferingsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOfferingsOutput
	}
	describeReservedInstancesOfferingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOfferingsOutput
	}
	DescribeReservedInstancesOfferingsWithContextStub        func(aws.Context, *ec2.DescribeReservedInstancesOfferingsInput, ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error)
	describeReservedInstancesOfferingsWithContextMutex       sync.RWMutex
	describeReservedInstancesOfferingsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesOfferingsInput
		arg3 []request.Option
	}
	describeReservedInstancesOfferingsWithContextReturns struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}
	describeReservedInstancesOfferingsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}
	DescribeReservedInstancesRequestStub        func(*ec2.DescribeReservedInstancesInput) (*request.Request, *ec2.DescribeReservedInstancesOutput)
	describeReservedInstancesRequestMutex       sync.RWMutex
	describeReservedInstancesRequestArgsForCall []struct {
		arg1 *ec2.DescribeReservedInstancesInput
	}
	describeReservedInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOutput
	}
	describeReservedInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOutput
	}
	DescribeReservedInstancesWithContextStub        func(aws.Context, *ec2.DescribeReservedInstancesInput, ...request.Option) (*ec2.DescribeReservedInstancesOutput, error)
	describeReservedInstancesWithContextMutex       sync.RWMutex
	describeReservedInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesInput
		arg3 []request.Option
	}
	describeReservedInstancesWithContextReturns struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}
	describeReservedInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}
	DescribeRouteTablesStub        func(*ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error)
	describeRouteTablesMutex       sync.RWMutex
	describeRouteTablesArgsForCall []struct {
		arg1 *ec2.DescribeRouteTablesInput
	}
	describeRouteTablesReturns struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}
	describeRouteTablesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}
	DescribeRouteTablesPagesStub        func(*ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool) error
	describeRouteTablesPagesMutex       sync.RWMutex
	describeRouteTablesPagesArgsForCall []struct {
		arg1 *ec2.DescribeRouteTablesInput
		arg2 func(*ec2.DescribeRouteTablesOutput, bool) bool
	}
	describeRouteTablesPagesReturns struct {
		result1 error
	}
	describeRouteTablesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeRouteTablesPagesWithContextStub        func(aws.Context, *ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool, ...request.Option) error
	describeRouteTablesPagesWithContextMutex       sync.RWMutex
	describeRouteTablesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeRouteTablesInput
		arg3 func(*ec2.DescribeRouteTablesOutput, bool) bool
		arg4 []request.Option
	}
	describeRouteTablesPagesWithContextReturns struct {
		result1 error
	}
	describeRouteTablesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeRouteTablesRequestStub        func(*ec2.DescribeRouteTablesInput) (*request.Request, *ec2.DescribeRouteTablesOutput)
	describeRouteTablesRequestMutex       sync.RWMutex
	describeRouteTablesRequestArgsForCall []struct {
		arg1 *ec2.DescribeRouteTablesInput
	}
	describeRouteTablesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeRouteTablesOutput
	}
	describeRouteTablesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeRouteTablesOutput
	}
	DescribeRouteTablesWithContextStub        func(aws.Context, *ec2.DescribeRouteTablesInput, ...request.Option) (*ec2.DescribeRouteTablesOutput, error)
	describeRouteTablesWithContextMutex       sync.RWMutex
	describeRouteTablesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeRouteTablesInput
		arg3 []request.Option
	}
	describeRouteTablesWithContextReturns struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}
	describeRouteTablesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}
	DescribeScheduledInstanceAvailabilityStub        func(*ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)
	describeScheduledInstanceAvailabilityMutex       sync.RWMutex
	describeScheduledInstanceAvailabilityArgsForCall []struct {
		arg1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}
	describeScheduledInstanceAvailabilityReturns struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}
	describeScheduledInstanceAvailabilityReturnsOnCall map[int]struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}
	DescribeScheduledInstanceAvailabilityRequestStub        func(*ec2.DescribeScheduledInstanceAvailabilityInput) (*request.Request, *ec2.DescribeScheduledInstanceAvailabilityOutput)
	describeScheduledInstanceAvailabilityRequestMutex       sync.RWMutex
	describeScheduledInstanceAvailabilityRequestArgsForCall []struct {
		arg1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}
	describeScheduledInstanceAvailabilityRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstanceAvailabilityOutput
	}
	describeScheduledInstanceAvailabilityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstanceAvailabilityOutput
	}
	DescribeScheduledInstanceAvailabilityWithContextStub        func(aws.Context, *ec2.DescribeScheduledInstanceAvailabilityInput, ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)
	describeScheduledInstanceAvailabilityWithContextMutex       sync.RWMutex
	describeScheduledInstanceAvailabilityWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeScheduledInstanceAvailabilityInput
		arg3 []request.Option
	}
	describeScheduledInstanceAvailabilityWithContextReturns struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}
	describeScheduledInstanceAvailabilityWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}
	DescribeScheduledInstancesStub        func(*ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error)
	describeScheduledInstancesMutex       sync.RWMutex
	describeScheduledInstancesArgsForCall []struct {
		arg1 *ec2.DescribeScheduledInstancesInput
	}
	describeScheduledInstancesReturns struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}
	describeScheduledInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}
	DescribeScheduledInstancesRequestStub        func(*ec2.DescribeScheduledInstancesInput) (*request.Request, *ec2.DescribeScheduledInstancesOutput)
	describeScheduledInstancesRequestMutex       sync.RWMutex
	describeScheduledInstancesRequestArgsForCall []struct {
		arg1 *ec2.DescribeScheduledInstancesInput
	}
	describeScheduledInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstancesOutput
	}
	describeScheduledInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstancesOutput
	}
	DescribeScheduledInstancesWithContextStub        func(aws.Context, *ec2.DescribeScheduledInstancesInput, ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error)
	describeScheduledInstancesWithContextMutex       sync.RWMutex
	describeScheduledInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeScheduledInstancesInput
		arg3 []request.Option
	}
	describeScheduledInstancesWithContextReturns struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}
	describeScheduledInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}
	DescribeSecurityGroupReferencesStub        func(*ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error)
	describeSecurityGroupReferencesMutex       sync.RWMutex
	describeSecurityGroupReferencesArgsForCall []struct {
		arg1 *ec2.DescribeSecurityGroupReferencesInput
	}
	describeSecurityGroupReferencesReturns struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}
	describeSecurityGroupReferencesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}
	DescribeSecurityGroupReferencesRequestStub        func(*ec2.DescribeSecurityGroupReferencesInput) (*request.Request, *ec2.DescribeSecurityGroupReferencesOutput)
	describeSecurityGroupReferencesRequestMutex       sync.RWMutex
	describeSecurityGroupReferencesRequestArgsForCall []struct {
		arg1 *ec2.DescribeSecurityGroupReferencesInput
	}
	describeSecurityGroupReferencesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupReferencesOutput
	}
	describeSecurityGroupReferencesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupReferencesOutput
	}
	DescribeSecurityGroupReferencesWithContextStub        func(aws.Context, *ec2.DescribeSecurityGroupReferencesInput, ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error)
	describeSecurityGroupReferencesWithContextMutex       sync.RWMutex
	describeSecurityGroupReferencesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSecurityGroupReferencesInput
		arg3 []request.Option
	}
	describeSecurityGroupReferencesWithContextReturns struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}
	describeSecurityGroupReferencesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}
	DescribeSecurityGroupsStub        func(*ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error)
	describeSecurityGroupsMutex       sync.RWMutex
	describeSecurityGroupsArgsForCall []struct {
		arg1 *ec2.DescribeSecurityGroupsInput
	}
	describeSecurityGroupsReturns struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}
	describeSecurityGroupsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}
	DescribeSecurityGroupsPagesStub        func(*ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error
	describeSecurityGroupsPagesMutex       sync.RWMutex
	describeSecurityGroupsPagesArgsForCall []struct {
		arg1 *ec2.DescribeSecurityGroupsInput
		arg2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
	}
	describeSecurityGroupsPagesReturns struct {
		result1 error
	}
	describeSecurityGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSecurityGroupsPagesWithContextStub        func(aws.Context, *ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool, ...request.Option) error
	describeSecurityGroupsPagesWithContextMutex       sync.RWMutex
	describeSecurityGroupsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSecurityGroupsInput
		arg3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeSecurityGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeSecurityGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSecurityGroupsRequestStub        func(*ec2.DescribeSecurityGroupsInput) (*request.Request, *ec2.DescribeSecurityGroupsOutput)
	describeSecurityGroupsRequestMutex       sync.RWMutex
	describeSecurityGroupsRequestArgsForCall []struct {
		arg1 *ec2.DescribeSecurityGroupsInput
	}
	describeSecurityGroupsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupsOutput
	}
	describeSecurityGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupsOutput
	}
	DescribeSecurityGroupsWithContextStub        func(aws.Context, *ec2.DescribeSecurityGroupsInput, ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error)
	describeSecurityGroupsWithContextMutex       sync.RWMutex
	describeSecurityGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSecurityGroupsInput
		arg3 []request.Option
	}
	describeSecurityGroupsWithContextReturns struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}
	describeSecurityGroupsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}
	DescribeSnapshotAttributeStub        func(*ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error)
	describeSnapshotAttributeMutex       sync.RWMutex
	describeSnapshotAttributeArgsForCall []struct {
		arg1 *ec2.DescribeSnapshotAttributeInput
	}
	describeSnapshotAttributeReturns struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}
	describeSnapshotAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}
	DescribeSnapshotAttributeRequestStub        func(*ec2.DescribeSnapshotAttributeInput) (*request.Request, *ec2.DescribeSnapshotAttributeOutput)
	describeSnapshotAttributeRequestMutex       sync.RWMutex
	describeSnapshotAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeSnapshotAttributeInput
	}
	describeSnapshotAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotAttributeOutput
	}
	describeSnapshotAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotAttributeOutput
	}
	DescribeSnapshotAttributeWithContextStub        func(aws.Context, *ec2.DescribeSnapshotAttributeInput, ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error)
	describeSnapshotAttributeWithContextMutex       sync.RWMutex
	describeSnapshotAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotAttributeInput
		arg3 []request.Option
	}
	describeSnapshotAttributeWithContextReturns struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}
	describeSnapshotAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}
	DescribeSnapshotsStub        func(*ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error)
	describeSnapshotsMutex       sync.RWMutex
	describeSnapshotsArgsForCall []struct {
		arg1 *ec2.DescribeSnapshotsInput
	}
	describeSnapshotsReturns struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}
	describeSnapshotsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}
	DescribeSnapshotsPagesStub        func(*ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool) error
	describeSnapshotsPagesMutex       sync.RWMutex
	describeSnapshotsPagesArgsForCall []struct {
		arg1 *ec2.DescribeSnapshotsInput
		arg2 func(*ec2.DescribeSnapshotsOutput, bool) bool
	}
	describeSnapshotsPagesReturns struct {
		result1 error
	}
	describeSnapshotsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSnapshotsPagesWithContextStub        func(aws.Context, *ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool, ...request.Option) error
	describeSnapshotsPagesWithContextMutex       sync.RWMutex
	describeSnapshotsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotsInput
		arg3 func(*ec2.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}
	describeSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSnapshotsRequestStub        func(*ec2.DescribeSnapshotsInput) (*request.Request, *ec2.DescribeSnapshotsOutput)
	describeSnapshotsRequestMutex       sync.RWMutex
	describeSnapshotsRequestArgsForCall []struct {
		arg1 *ec2.DescribeSnapshotsInput
	}
	describeSnapshotsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotsOutput
	}
	describeSnapshotsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotsOutput
	}
	DescribeSnapshotsWithContextStub        func(aws.Context, *ec2.DescribeSnapshotsInput, ...request.Option) (*ec2.DescribeSnapshotsOutput, error)
	describeSnapshotsWithContextMutex       sync.RWMutex
	describeSnapshotsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotsInput
		arg3 []request.Option
	}
	describeSnapshotsWithContextReturns struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}
	describeSnapshotsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}
	DescribeSpotDatafeedSubscriptionStub        func(*ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)
	describeSpotDatafeedSubscriptionMutex       sync.RWMutex
	describeSpotDatafeedSubscriptionArgsForCall []struct {
		arg1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}
	describeSpotDatafeedSubscriptionReturns struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}
	describeSpotDatafeedSubscriptionReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}
	DescribeSpotDatafeedSubscriptionRequestStub        func(*ec2.DescribeSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DescribeSpotDatafeedSubscriptionOutput)
	describeSpotDatafeedSubscriptionRequestMutex       sync.RWMutex
	describeSpotDatafeedSubscriptionRequestArgsForCall []struct {
		arg1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}
	describeSpotDatafeedSubscriptionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotDatafeedSubscriptionOutput
	}
	describeSpotDatafeedSubscriptionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotDatafeedSubscriptionOutput
	}
	DescribeSpotDatafeedSubscriptionWithContextStub        func(aws.Context, *ec2.DescribeSpotDatafeedSubscriptionInput, ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)
	describeSpotDatafeedSubscriptionWithContextMutex       sync.RWMutex
	describeSpotDatafeedSubscriptionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotDatafeedSubscriptionInput
		arg3 []request.Option
	}
	describeSpotDatafeedSubscriptionWithContextReturns struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}
	describeSpotDatafeedSubscriptionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}
	DescribeSpotFleetInstancesStub        func(*ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error)
	describeSpotFleetInstancesMutex       sync.RWMutex
	describeSpotFleetInstancesArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetInstancesInput
	}
	describeSpotFleetInstancesReturns struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}
	describeSpotFleetInstancesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}
	DescribeSpotFleetInstancesRequestStub        func(*ec2.DescribeSpotFleetInstancesInput) (*request.Request, *ec2.DescribeSpotFleetInstancesOutput)
	describeSpotFleetInstancesRequestMutex       sync.RWMutex
	describeSpotFleetInstancesRequestArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetInstancesInput
	}
	describeSpotFleetInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetInstancesOutput
	}
	describeSpotFleetInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetInstancesOutput
	}
	DescribeSpotFleetInstancesWithContextStub        func(aws.Context, *ec2.DescribeSpotFleetInstancesInput, ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error)
	describeSpotFleetInstancesWithContextMutex       sync.RWMutex
	describeSpotFleetInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetInstancesInput
		arg3 []request.Option
	}
	describeSpotFleetInstancesWithContextReturns struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}
	describeSpotFleetInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}
	DescribeSpotFleetRequestHistoryStub        func(*ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)
	describeSpotFleetRequestHistoryMutex       sync.RWMutex
	describeSpotFleetRequestHistoryArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetRequestHistoryInput
	}
	describeSpotFleetRequestHistoryReturns struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}
	describeSpotFleetRequestHistoryReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}
	DescribeSpotFleetRequestHistoryRequestStub        func(*ec2.DescribeSpotFleetRequestHistoryInput) (*request.Request, *ec2.DescribeSpotFleetRequestHistoryOutput)
	describeSpotFleetRequestHistoryRequestMutex       sync.RWMutex
	describeSpotFleetRequestHistoryRequestArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetRequestHistoryInput
	}
	describeSpotFleetRequestHistoryRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestHistoryOutput
	}
	describeSpotFleetRequestHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestHistoryOutput
	}
	DescribeSpotFleetRequestHistoryWithContextStub        func(aws.Context, *ec2.DescribeSpotFleetRequestHistoryInput, ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)
	describeSpotFleetRequestHistoryWithContextMutex       sync.RWMutex
	describeSpotFleetRequestHistoryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetRequestHistoryInput
		arg3 []request.Option
	}
	describeSpotFleetRequestHistoryWithContextReturns struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}
	describeSpotFleetRequestHistoryWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}
	DescribeSpotFleetRequestsStub        func(*ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error)
	describeSpotFleetRequestsMutex       sync.RWMutex
	describeSpotFleetRequestsArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetRequestsInput
	}
	describeSpotFleetRequestsReturns struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}
	describeSpotFleetRequestsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}
	DescribeSpotFleetRequestsPagesStub        func(*ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error
	describeSpotFleetRequestsPagesMutex       sync.RWMutex
	describeSpotFleetRequestsPagesArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetRequestsInput
		arg2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
	}
	describeSpotFleetRequestsPagesReturns struct {
		result1 error
	}
	describeSpotFleetRequestsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSpotFleetRequestsPagesWithContextStub        func(aws.Context, *ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, ...request.Option) error
	describeSpotFleetRequestsPagesWithContextMutex       sync.RWMutex
	describeSpotFleetRequestsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetRequestsInput
		arg3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
		arg4 []request.Option
	}
	describeSpotFleetRequestsPagesWithContextReturns struct {
		result1 error
	}
	describeSpotFleetRequestsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSpotFleetRequestsRequestStub        func(*ec2.DescribeSpotFleetRequestsInput) (*request.Request, *ec2.DescribeSpotFleetRequestsOutput)
	describeSpotFleetRequestsRequestMutex       sync.RWMutex
	describeSpotFleetRequestsRequestArgsForCall []struct {
		arg1 *ec2.DescribeSpotFleetRequestsInput
	}
	describeSpotFleetRequestsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestsOutput
	}
	describeSpotFleetRequestsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestsOutput
	}
	DescribeSpotFleetRequestsWithContextStub        func(aws.Context, *ec2.DescribeSpotFleetRequestsInput, ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error)
	describeSpotFleetRequestsWithContextMutex       sync.RWMutex
	describeSpotFleetRequestsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetRequestsInput
		arg3 []request.Option
	}
	describeSpotFleetRequestsWithContextReturns struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}
	describeSpotFleetRequestsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}
	DescribeSpotInstanceRequestsStub        func(*ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error)
	describeSpotInstanceRequestsMutex       sync.RWMutex
	describeSpotInstanceRequestsArgsForCall []struct {
		arg1 *ec2.DescribeSpotInstanceRequestsInput
	}
	describeSpotInstanceRequestsReturns struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}
	describeSpotInstanceRequestsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}
	DescribeSpotInstanceRequestsRequestStub        func(*ec2.DescribeSpotInstanceRequestsInput) (*request.Request, *ec2.DescribeSpotInstanceRequestsOutput)
	describeSpotInstanceRequestsRequestMutex       sync.RWMutex
	describeSpotInstanceRequestsRequestArgsForCall []struct {
		arg1 *ec2.DescribeSpotInstanceRequestsInput
	}
	describeSpotInstanceRequestsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotInstanceRequestsOutput
	}
	describeSpotInstanceRequestsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotInstanceRequestsOutput
	}
	DescribeSpotInstanceRequestsWithContextStub        func(aws.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error)
	describeSpotInstanceRequestsWithContextMutex       sync.RWMutex
	describeSpotInstanceRequestsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotInstanceRequestsInput
		arg3 []request.Option
	}
	describeSpotInstanceRequestsWithContextReturns struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}
	describeSpotInstanceRequestsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}
	DescribeSpotPriceHistoryStub        func(*ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error)
	describeSpotPriceHistoryMutex       sync.RWMutex
	describeSpotPriceHistoryArgsForCall []struct {
		arg1 *ec2.DescribeSpotPriceHistoryInput
	}
	describeSpotPriceHistoryReturns struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}
	describeSpotPriceHistoryReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}
	DescribeSpotPriceHistoryPagesStub        func(*ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error
	describeSpotPriceHistoryPagesMutex       sync.RWMutex
	describeSpotPriceHistoryPagesArgsForCall []struct {
		arg1 *ec2.DescribeSpotPriceHistoryInput
		arg2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
	}
	describeSpotPriceHistoryPagesReturns struct {
		result1 error
	}
	describeSpotPriceHistoryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSpotPriceHistoryPagesWithContextStub        func(aws.Context, *ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, ...request.Option) error
	describeSpotPriceHistoryPagesWithContextMutex       sync.RWMutex
	describeSpotPriceHistoryPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotPriceHistoryInput
		arg3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
		arg4 []request.Option
	}
	describeSpotPriceHistoryPagesWithContextReturns struct {
		result1 error
	}
	describeSpotPriceHistoryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSpotPriceHistoryRequestStub        func(*ec2.DescribeSpotPriceHistoryInput) (*request.Request, *ec2.DescribeSpotPriceHistoryOutput)
	describeSpotPriceHistoryRequestMutex       sync.RWMutex
	describeSpotPriceHistoryRequestArgsForCall []struct {
		arg1 *ec2.DescribeSpotPriceHistoryInput
	}
	describeSpotPriceHistoryRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotPriceHistoryOutput
	}
	describeSpotPriceHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotPriceHistoryOutput
	}
	DescribeSpotPriceHistoryWithContextStub        func(aws.Context, *ec2.DescribeSpotPriceHistoryInput, ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error)
	describeSpotPriceHistoryWithContextMutex       sync.RWMutex
	describeSpotPriceHistoryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotPriceHistoryInput
		arg3 []request.Option
	}
	describeSpotPriceHistoryWithContextReturns struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}
	describeSpotPriceHistoryWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}
	DescribeStaleSecurityGroupsStub        func(*ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error)
	describeStaleSecurityGroupsMutex       sync.RWMutex
	describeStaleSecurityGroupsArgsForCall []struct {
		arg1 *ec2.DescribeStaleSecurityGroupsInput
	}
	describeStaleSecurityGroupsReturns struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}
	describeStaleSecurityGroupsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}
	DescribeStaleSecurityGroupsRequestStub        func(*ec2.DescribeStaleSecurityGroupsInput) (*request.Request, *ec2.DescribeStaleSecurityGroupsOutput)
	describeStaleSecurityGroupsRequestMutex       sync.RWMutex
	describeStaleSecurityGroupsRequestArgsForCall []struct {
		arg1 *ec2.DescribeStaleSecurityGroupsInput
	}
	describeStaleSecurityGroupsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeStaleSecurityGroupsOutput
	}
	describeStaleSecurityGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeStaleSecurityGroupsOutput
	}
	DescribeStaleSecurityGroupsWithContextStub        func(aws.Context, *ec2.DescribeStaleSecurityGroupsInput, ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error)
	describeStaleSecurityGroupsWithContextMutex       sync.RWMutex
	describeStaleSecurityGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeStaleSecurityGroupsInput
		arg3 []request.Option
	}
	describeStaleSecurityGroupsWithContextReturns struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}
	describeStaleSecurityGroupsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}
	DescribeSubnetsStub        func(*ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error)
	describeSubnetsMutex       sync.RWMutex
	describeSubnetsArgsForCall []struct {
		arg1 *ec2.DescribeSubnetsInput
	}
	describeSubnetsReturns struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}
	describeSubnetsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}
	DescribeSubnetsRequestStub        func(*ec2.DescribeSubnetsInput) (*request.Request, *ec2.DescribeSubnetsOutput)
	describeSubnetsRequestMutex       sync.RWMutex
	describeSubnetsRequestArgsForCall []struct {
		arg1 *ec2.DescribeSubnetsInput
	}
	describeSubnetsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeSubnetsOutput
	}
	describeSubnetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeSubnetsOutput
	}
	DescribeSubnetsWithContextStub        func(aws.Context, *ec2.DescribeSubnetsInput, ...request.Option) (*ec2.DescribeSubnetsOutput, error)
	describeSubnetsWithContextMutex       sync.RWMutex
	describeSubnetsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSubnetsInput
		arg3 []request.Option
	}
	describeSubnetsWithContextReturns struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}
	describeSubnetsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}
	DescribeTagsStub        func(*ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error)
	describeTagsMutex       sync.RWMutex
	describeTagsArgsForCall []struct {
		arg1 *ec2.DescribeTagsInput
	}
	describeTagsReturns struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}
	describeTagsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}
	DescribeTagsPagesStub        func(*ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool) error
	describeTagsPagesMutex       sync.RWMutex
	describeTagsPagesArgsForCall []struct {
		arg1 *ec2.DescribeTagsInput
		arg2 func(*ec2.DescribeTagsOutput, bool) bool
	}
	describeTagsPagesReturns struct {
		result1 error
	}
	describeTagsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeTagsPagesWithContextStub        func(aws.Context, *ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool, ...request.Option) error
	describeTagsPagesWithContextMutex       sync.RWMutex
	describeTagsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTagsInput
		arg3 func(*ec2.DescribeTagsOutput, bool) bool
		arg4 []request.Option
	}
	describeTagsPagesWithContextReturns struct {
		result1 error
	}
	describeTagsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeTagsRequestStub        func(*ec2.DescribeTagsInput) (*request.Request, *ec2.DescribeTagsOutput)
	describeTagsRequestMutex       sync.RWMutex
	describeTagsRequestArgsForCall []struct {
		arg1 *ec2.DescribeTagsInput
	}
	describeTagsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeTagsOutput
	}
	describeTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeTagsOutput
	}
	DescribeTagsWithContextStub        func(aws.Context, *ec2.DescribeTagsInput, ...request.Option) (*ec2.DescribeTagsOutput, error)
	describeTagsWithContextMutex       sync.RWMutex
	describeTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTagsInput
		arg3 []request.Option
	}
	describeTagsWithContextReturns struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}
	describeTagsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}
	DescribeTransitGatewayAttachmentsStub        func(*ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)
	describeTransitGatewayAttachmentsMutex       sync.RWMutex
	describeTransitGatewayAttachmentsArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayAttachmentsInput
	}
	describeTransitGatewayAttachmentsReturns struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}
	describeTransitGatewayAttachmentsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}
	DescribeTransitGatewayAttachmentsRequestStub        func(*ec2.DescribeTransitGatewayAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayAttachmentsOutput)
	describeTransitGatewayAttachmentsRequestMutex       sync.RWMutex
	describeTransitGatewayAttachmentsRequestArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayAttachmentsInput
	}
	describeTransitGatewayAttachmentsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayAttachmentsOutput
	}
	describeTransitGatewayAttachmentsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayAttachmentsOutput
	}
	DescribeTransitGatewayAttachmentsWithContextStub        func(aws.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)
	describeTransitGatewayAttachmentsWithContextMutex       sync.RWMutex
	describeTransitGatewayAttachmentsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewayAttachmentsInput
		arg3 []request.Option
	}
	describeTransitGatewayAttachmentsWithContextReturns struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}
	describeTransitGatewayAttachmentsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}
	DescribeTransitGatewayRouteTablesStub        func(*ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)
	describeTransitGatewayRouteTablesMutex       sync.RWMutex
	describeTransitGatewayRouteTablesArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayRouteTablesInput
	}
	describeTransitGatewayRouteTablesReturns struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}
	describeTransitGatewayRouteTablesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}
	DescribeTransitGatewayRouteTablesRequestStub        func(*ec2.DescribeTransitGatewayRouteTablesInput) (*request.Request, *ec2.DescribeTransitGatewayRouteTablesOutput)
	describeTransitGatewayRouteTablesRequestMutex       sync.RWMutex
	describeTransitGatewayRouteTablesRequestArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayRouteTablesInput
	}
	describeTransitGatewayRouteTablesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayRouteTablesOutput
	}
	describeTransitGatewayRouteTablesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayRouteTablesOutput
	}
	DescribeTransitGatewayRouteTablesWithContextStub        func(aws.Context, *ec2.DescribeTransitGatewayRouteTablesInput, ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)
	describeTransitGatewayRouteTablesWithContextMutex       sync.RWMutex
	describeTransitGatewayRouteTablesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewayRouteTablesInput
		arg3 []request.Option
	}
	describeTransitGatewayRouteTablesWithContextReturns struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}
	describeTransitGatewayRouteTablesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}
	DescribeTransitGatewayVpcAttachmentsStub        func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)
	describeTransitGatewayVpcAttachmentsMutex       sync.RWMutex
	describeTransitGatewayVpcAttachmentsArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}
	describeTransitGatewayVpcAttachmentsReturns struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}
	describeTransitGatewayVpcAttachmentsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}
	DescribeTransitGatewayVpcAttachmentsRequestStub        func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayVpcAttachmentsOutput)
	describeTransitGatewayVpcAttachmentsRequestMutex       sync.RWMutex
	describeTransitGatewayVpcAttachmentsRequestArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}
	describeTransitGatewayVpcAttachmentsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	}
	describeTransitGatewayVpcAttachmentsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	}
	DescribeTransitGatewayVpcAttachmentsWithContextStub        func(aws.Context, *ec2.DescribeTransitGatewayVpcAttachmentsInput, ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)
	describeTransitGatewayVpcAttachmentsWithContextMutex       sync.RWMutex
	describeTransitGatewayVpcAttachmentsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		arg3 []request.Option
	}
	describeTransitGatewayVpcAttachmentsWithContextReturns struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}
	describeTransitGatewayVpcAttachmentsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}
	DescribeTransitGatewaysStub        func(*ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error)
	describeTransitGatewaysMutex       sync.RWMutex
	describeTransitGatewaysArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewaysInput
	}
	describeTransitGatewaysReturns struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}
	describeTransitGatewaysReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}
	DescribeTransitGatewaysRequestStub        func(*ec2.DescribeTransitGatewaysInput) (*request.Request, *ec2.DescribeTransitGatewaysOutput)
	describeTransitGatewaysRequestMutex       sync.RWMutex
	describeTransitGatewaysRequestArgsForCall []struct {
		arg1 *ec2.DescribeTransitGatewaysInput
	}
	describeTransitGatewaysRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewaysOutput
	}
	describeTransitGatewaysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewaysOutput
	}
	DescribeTransitGatewaysWithContextStub        func(aws.Context, *ec2.DescribeTransitGatewaysInput, ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error)
	describeTransitGatewaysWithContextMutex       sync.RWMutex
	describeTransitGatewaysWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewaysInput
		arg3 []request.Option
	}
	describeTransitGatewaysWithContextReturns struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}
	describeTransitGatewaysWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}
	DescribeVolumeAttributeStub        func(*ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error)
	describeVolumeAttributeMutex       sync.RWMutex
	describeVolumeAttributeArgsForCall []struct {
		arg1 *ec2.DescribeVolumeAttributeInput
	}
	describeVolumeAttributeReturns struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}
	describeVolumeAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}
	DescribeVolumeAttributeRequestStub        func(*ec2.DescribeVolumeAttributeInput) (*request.Request, *ec2.DescribeVolumeAttributeOutput)
	describeVolumeAttributeRequestMutex       sync.RWMutex
	describeVolumeAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeVolumeAttributeInput
	}
	describeVolumeAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeAttributeOutput
	}
	describeVolumeAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeAttributeOutput
	}
	DescribeVolumeAttributeWithContextStub        func(aws.Context, *ec2.DescribeVolumeAttributeInput, ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error)
	describeVolumeAttributeWithContextMutex       sync.RWMutex
	describeVolumeAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumeAttributeInput
		arg3 []request.Option
	}
	describeVolumeAttributeWithContextReturns struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}
	describeVolumeAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}
	DescribeVolumeStatusStub        func(*ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error)
	describeVolumeStatusMutex       sync.RWMutex
	describeVolumeStatusArgsForCall []struct {
		arg1 *ec2.DescribeVolumeStatusInput
	}
	describeVolumeStatusReturns struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}
	describeVolumeStatusReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}
	DescribeVolumeStatusPagesStub        func(*ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool) error
	describeVolumeStatusPagesMutex       sync.RWMutex
	describeVolumeStatusPagesArgsForCall []struct {
		arg1 *ec2.DescribeVolumeStatusInput
		arg2 func(*ec2.DescribeVolumeStatusOutput, bool) bool
	}
	describeVolumeStatusPagesReturns struct {
		result1 error
	}
	describeVolumeStatusPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeVolumeStatusPagesWithContextStub        func(aws.Context, *ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool, ...request.Option) error
	describeVolumeStatusPagesWithContextMutex       sync.RWMutex
	describeVolumeStatusPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumeStatusInput
		arg3 func(*ec2.DescribeVolumeStatusOutput, bool) bool
		arg4 []request.Option
	}
	describeVolumeStatusPagesWithContextReturns struct {
		result1 error
	}
	describeVolumeStatusPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeVolumeStatusRequestStub        func(*ec2.DescribeVolumeStatusInput) (*request.Request, *ec2.DescribeVolumeStatusOutput)
	describeVolumeStatusRequestMutex       sync.RWMutex
	describeVolumeStatusRequestArgsForCall []struct {
		arg1 *ec2.DescribeVolumeStatusInput
	}
	describeVolumeStatusRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeStatusOutput
	}
	describeVolumeStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeStatusOutput
	}
	DescribeVolumeStatusWithContextStub        func(aws.Context, *ec2.DescribeVolumeStatusInput, ...request.Option) (*ec2.DescribeVolumeStatusOutput, error)
	describeVolumeStatusWithContextMutex       sync.RWMutex
	describeVolumeStatusWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumeStatusInput
		arg3 []request.Option
	}
	describeVolumeStatusWithContextReturns struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}
	describeVolumeStatusWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}
	DescribeVolumesStub        func(*ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)
	describeVolumesMutex       sync.RWMutex
	describeVolumesArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
	}
	describeVolumesReturns struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}
	describeVolumesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}
	DescribeVolumesModificationsStub        func(*ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error)
	describeVolumesModificationsMutex       sync.RWMutex
	describeVolumesModificationsArgsForCall []struct {
		arg1 *ec2.DescribeVolumesModificationsInput
	}
	describeVolumesModificationsReturns struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}
	describeVolumesModificationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}
	DescribeVolumesModificationsRequestStub        func(*ec2.DescribeVolumesModificationsInput) (*request.Request, *ec2.DescribeVolumesModificationsOutput)
	describeVolumesModificationsRequestMutex       sync.RWMutex
	describeVolumesModificationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVolumesModificationsInput
	}
	describeVolumesModificationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesModificationsOutput
	}
	describeVolumesModificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesModificationsOutput
	}
	DescribeVolumesModificationsWithContextStub        func(aws.Context, *ec2.DescribeVolumesModificationsInput, ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error)
	describeVolumesModificationsWithContextMutex       sync.RWMutex
	describeVolumesModificationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesModificationsInput
		arg3 []request.Option
	}
	describeVolumesModificationsWithContextReturns struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}
	describeVolumesModificationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}
	DescribeVolumesPagesStub        func(*ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool) error
	describeVolumesPagesMutex       sync.RWMutex
	describeVolumesPagesArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
		arg2 func(*ec2.DescribeVolumesOutput, bool) bool
	}
	describeVolumesPagesReturns struct {
		result1 error
	}
	describeVolumesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeVolumesPagesWithContextStub        func(aws.Context, *ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool, ...request.Option) error
	describeVolumesPagesWithContextMutex       sync.RWMutex
	describeVolumesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 func(*ec2.DescribeVolumesOutput, bool) bool
		arg4 []request.Option
	}
	describeVolumesPagesWithContextReturns struct {
		result1 error
	}
	describeVolumesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeVolumesRequestStub        func(*ec2.DescribeVolumesInput) (*request.Request, *ec2.DescribeVolumesOutput)
	describeVolumesRequestMutex       sync.RWMutex
	describeVolumesRequestArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
	}
	describeVolumesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesOutput
	}
	describeVolumesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesOutput
	}
	DescribeVolumesWithContextStub        func(aws.Context, *ec2.DescribeVolumesInput, ...request.Option) (*ec2.DescribeVolumesOutput, error)
	describeVolumesWithContextMutex       sync.RWMutex
	describeVolumesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.Option
	}
	describeVolumesWithContextReturns struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}
	describeVolumesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}
	DescribeVpcAttributeStub        func(*ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error)
	describeVpcAttributeMutex       sync.RWMutex
	describeVpcAttributeArgsForCall []struct {
		arg1 *ec2.DescribeVpcAttributeInput
	}
	describeVpcAttributeReturns struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}
	describeVpcAttributeReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}
	DescribeVpcAttributeRequestStub        func(*ec2.DescribeVpcAttributeInput) (*request.Request, *ec2.DescribeVpcAttributeOutput)
	describeVpcAttributeRequestMutex       sync.RWMutex
	describeVpcAttributeRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcAttributeInput
	}
	describeVpcAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcAttributeOutput
	}
	describeVpcAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcAttributeOutput
	}
	DescribeVpcAttributeWithContextStub        func(aws.Context, *ec2.DescribeVpcAttributeInput, ...request.Option) (*ec2.DescribeVpcAttributeOutput, error)
	describeVpcAttributeWithContextMutex       sync.RWMutex
	describeVpcAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcAttributeInput
		arg3 []request.Option
	}
	describeVpcAttributeWithContextReturns struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}
	describeVpcAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}
	DescribeVpcClassicLinkStub        func(*ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error)
	describeVpcClassicLinkMutex       sync.RWMutex
	describeVpcClassicLinkArgsForCall []struct {
		arg1 *ec2.DescribeVpcClassicLinkInput
	}
	describeVpcClassicLinkReturns struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}
	describeVpcClassicLinkReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}
	DescribeVpcClassicLinkDnsSupportStub        func(*ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)
	describeVpcClassicLinkDnsSupportMutex       sync.RWMutex
	describeVpcClassicLinkDnsSupportArgsForCall []struct {
		arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}
	describeVpcClassicLinkDnsSupportReturns struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}
	describeVpcClassicLinkDnsSupportReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}
	DescribeVpcClassicLinkDnsSupportRequestStub        func(*ec2.DescribeVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DescribeVpcClassicLinkDnsSupportOutput)
	describeVpcClassicLinkDnsSupportRequestMutex       sync.RWMutex
	describeVpcClassicLinkDnsSupportRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}
	describeVpcClassicLinkDnsSupportRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	}
	describeVpcClassicLinkDnsSupportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	}
	DescribeVpcClassicLinkDnsSupportWithContextStub        func(aws.Context, *ec2.DescribeVpcClassicLinkDnsSupportInput, ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)
	describeVpcClassicLinkDnsSupportWithContextMutex       sync.RWMutex
	describeVpcClassicLinkDnsSupportWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcClassicLinkDnsSupportInput
		arg3 []request.Option
	}
	describeVpcClassicLinkDnsSupportWithContextReturns struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}
	describeVpcClassicLinkDnsSupportWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}
	DescribeVpcClassicLinkRequestStub        func(*ec2.DescribeVpcClassicLinkInput) (*request.Request, *ec2.DescribeVpcClassicLinkOutput)
	describeVpcClassicLinkRequestMutex       sync.RWMutex
	describeVpcClassicLinkRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcClassicLinkInput
	}
	describeVpcClassicLinkRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkOutput
	}
	describeVpcClassicLinkRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkOutput
	}
	DescribeVpcClassicLinkWithContextStub        func(aws.Context, *ec2.DescribeVpcClassicLinkInput, ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error)
	describeVpcClassicLinkWithContextMutex       sync.RWMutex
	describeVpcClassicLinkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcClassicLinkInput
		arg3 []request.Option
	}
	describeVpcClassicLinkWithContextReturns struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}
	describeVpcClassicLinkWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}
	DescribeVpcEndpointConnectionNotificationsStub        func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)
	describeVpcEndpointConnectionNotificationsMutex       sync.RWMutex
	describeVpcEndpointConnectionNotificationsArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}
	describeVpcEndpointConnectionNotificationsReturns struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	describeVpcEndpointConnectionNotificationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	DescribeVpcEndpointConnectionNotificationsRequestStub        func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionNotificationsOutput)
	describeVpcEndpointConnectionNotificationsRequestMutex       sync.RWMutex
	describeVpcEndpointConnectionNotificationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}
	describeVpcEndpointConnectionNotificationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	}
	describeVpcEndpointConnectionNotificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	}
	DescribeVpcEndpointConnectionNotificationsWithContextStub        func(aws.Context, *ec2.DescribeVpcEndpointConnectionNotificationsInput, ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)
	describeVpcEndpointConnectionNotificationsWithContextMutex       sync.RWMutex
	describeVpcEndpointConnectionNotificationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		arg3 []request.Option
	}
	describeVpcEndpointConnectionNotificationsWithContextReturns struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	describeVpcEndpointConnectionNotificationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}
	DescribeVpcEndpointConnectionsStub        func(*ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error)
	describeVpcEndpointConnectionsMutex       sync.RWMutex
	describeVpcEndpointConnectionsArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointConnectionsInput
	}
	describeVpcEndpointConnectionsReturns struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}
	describeVpcEndpointConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}
	DescribeVpcEndpointConnectionsRequestStub        func(*ec2.DescribeVpcEndpointConnectionsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionsOutput)
	describeVpcEndpointConnectionsRequestMutex       sync.RWMutex
	describeVpcEndpointConnectionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointConnectionsInput
	}
	describeVpcEndpointConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionsOutput
	}
	describeVpcEndpointConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionsOutput
	}
	DescribeVpcEndpointConnectionsWithContextStub        func(aws.Context, *ec2.DescribeVpcEndpointConnectionsInput, ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error)
	describeVpcEndpointConnectionsWithContextMutex       sync.RWMutex
	describeVpcEndpointConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointConnectionsInput
		arg3 []request.Option
	}
	describeVpcEndpointConnectionsWithContextReturns struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}
	describeVpcEndpointConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}
	DescribeVpcEndpointServiceConfigurationsStub        func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)
	describeVpcEndpointServiceConfigurationsMutex       sync.RWMutex
	describeVpcEndpointServiceConfigurationsArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}
	describeVpcEndpointServiceConfigurationsReturns struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	describeVpcEndpointServiceConfigurationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	DescribeVpcEndpointServiceConfigurationsRequestStub        func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DescribeVpcEndpointServiceConfigurationsOutput)
	describeVpcEndpointServiceConfigurationsRequestMutex       sync.RWMutex
	describeVpcEndpointServiceConfigurationsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}
	describeVpcEndpointServiceConfigurationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	}
	describeVpcEndpointServiceConfigurationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	}
	DescribeVpcEndpointServiceConfigurationsWithContextStub        func(aws.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)
	describeVpcEndpointServiceConfigurationsWithContextMutex       sync.RWMutex
	describeVpcEndpointServiceConfigurationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		arg3 []request.Option
	}
	describeVpcEndpointServiceConfigurationsWithContextReturns struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	describeVpcEndpointServiceConfigurationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	DescribeVpcEndpointServicePermissionsStub        func(*ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)
	describeVpcEndpointServicePermissionsMutex       sync.RWMutex
	describeVpcEndpointServicePermissionsArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}
	describeVpcEndpointServicePermissionsReturns struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}
	describeVpcEndpointServicePermissionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}
	DescribeVpcEndpointServicePermissionsRequestStub        func(*ec2.DescribeVpcEndpointServicePermissionsInput) (*request.Request, *ec2.DescribeVpcEndpointServicePermissionsOutput)
	describeVpcEndpointServicePermissionsRequestMutex       sync.RWMutex
	describeVpcEndpointServicePermissionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}
	describeVpcEndpointServicePermissionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicePermissionsOutput
	}
	describeVpcEndpointServicePermissionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicePermissionsOutput
	}
	DescribeVpcEndpointServicePermissionsWithContextStub        func(aws.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)
	describeVpcEndpointServicePermissionsWithContextMutex       sync.RWMutex
	describeVpcEndpointServicePermissionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointServicePermissionsInput
		arg3 []request.Option
	}
	describeVpcEndpointServicePermissionsWithContextReturns struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}
	describeVpcEndpointServicePermissionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}
	DescribeVpcEndpointServicesStub        func(*ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error)
	describeVpcEndpointServicesMutex       sync.RWMutex
	describeVpcEndpointServicesArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointServicesInput
	}
	describeVpcEndpointServicesReturns struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}
	describeVpcEndpointServicesReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}
	DescribeVpcEndpointServicesRequestStub        func(*ec2.DescribeVpcEndpointServicesInput) (*request.Request, *ec2.DescribeVpcEndpointServicesOutput)
	describeVpcEndpointServicesRequestMutex       sync.RWMutex
	describeVpcEndpointServicesRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointServicesInput
	}
	describeVpcEndpointServicesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicesOutput
	}
	describeVpcEndpointServicesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicesOutput
	}
	DescribeVpcEndpointServicesWithContextStub        func(aws.Context, *ec2.DescribeVpcEndpointServicesInput, ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error)
	describeVpcEndpointServicesWithContextMutex       sync.RWMutex
	describeVpcEndpointServicesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointServicesInput
		arg3 []request.Option
	}
	describeVpcEndpointServicesWithContextReturns struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}
	describeVpcEndpointServicesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}
	DescribeVpcEndpointsStub        func(*ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error)
	describeVpcEndpointsMutex       sync.RWMutex
	describeVpcEndpointsArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointsInput
	}
	describeVpcEndpointsReturns struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}
	describeVpcEndpointsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}
	DescribeVpcEndpointsRequestStub        func(*ec2.DescribeVpcEndpointsInput) (*request.Request, *ec2.DescribeVpcEndpointsOutput)
	describeVpcEndpointsRequestMutex       sync.RWMutex
	describeVpcEndpointsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcEndpointsInput
	}
	describeVpcEndpointsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointsOutput
	}
	describeVpcEndpointsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointsOutput
	}
	DescribeVpcEndpointsWithContextStub        func(aws.Context, *ec2.DescribeVpcEndpointsInput, ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error)
	describeVpcEndpointsWithContextMutex       sync.RWMutex
	describeVpcEndpointsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointsInput
		arg3 []request.Option
	}
	describeVpcEndpointsWithContextReturns struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}
	describeVpcEndpointsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}
	DescribeVpcPeeringConnectionsStub        func(*ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error)
	describeVpcPeeringConnectionsMutex       sync.RWMutex
	describeVpcPeeringConnectionsArgsForCall []struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	describeVpcPeeringConnectionsReturns struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}
	describeVpcPeeringConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}
	DescribeVpcPeeringConnectionsRequestStub        func(*ec2.DescribeVpcPeeringConnectionsInput) (*request.Request, *ec2.DescribeVpcPeeringConnectionsOutput)
	describeVpcPeeringConnectionsRequestMutex       sync.RWMutex
	describeVpcPeeringConnectionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	describeVpcPeeringConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcPeeringConnectionsOutput
	}
	describeVpcPeeringConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcPeeringConnectionsOutput
	}
	DescribeVpcPeeringConnectionsWithContextStub        func(aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error)
	describeVpcPeeringConnectionsWithContextMutex       sync.RWMutex
	describeVpcPeeringConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcPeeringConnectionsInput
		arg3 []request.Option
	}
	describeVpcPeeringConnectionsWithContextReturns struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}
	describeVpcPeeringConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}
	DescribeVpcsStub        func(*ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error)
	describeVpcsMutex       sync.RWMutex
	describeVpcsArgsForCall []struct {
		arg1 *ec2.DescribeVpcsInput
	}
	describeVpcsReturns struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}
	describeVpcsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}
	DescribeVpcsRequestStub        func(*ec2.DescribeVpcsInput) (*request.Request, *ec2.DescribeVpcsOutput)
	describeVpcsRequestMutex       sync.RWMutex
	describeVpcsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpcsInput
	}
	describeVpcsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcsOutput
	}
	describeVpcsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcsOutput
	}
	DescribeVpcsWithContextStub        func(aws.Context, *ec2.DescribeVpcsInput, ...request.Option) (*ec2.DescribeVpcsOutput, error)
	describeVpcsWithContextMutex       sync.RWMutex
	describeVpcsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcsInput
		arg3 []request.Option
	}
	describeVpcsWithContextReturns struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}
	describeVpcsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}
	DescribeVpnConnectionsStub        func(*ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error)
	describeVpnConnectionsMutex       sync.RWMutex
	describeVpnConnectionsArgsForCall []struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}
	describeVpnConnectionsReturns struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}
	describeVpnConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}
	DescribeVpnConnectionsRequestStub        func(*ec2.DescribeVpnConnectionsInput) (*request.Request, *ec2.DescribeVpnConnectionsOutput)
	describeVpnConnectionsRequestMutex       sync.RWMutex
	describeVpnConnectionsRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}
	describeVpnConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnConnectionsOutput
	}
	describeVpnConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnConnectionsOutput
	}
	DescribeVpnConnectionsWithContextStub        func(aws.Context, *ec2.DescribeVpnConnectionsInput, ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error)
	describeVpnConnectionsWithContextMutex       sync.RWMutex
	describeVpnConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnConnectionsInput
		arg3 []request.Option
	}
	describeVpnConnectionsWithContextReturns struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}
	describeVpnConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}
	DescribeVpnGatewaysStub        func(*ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error)
	describeVpnGatewaysMutex       sync.RWMutex
	describeVpnGatewaysArgsForCall []struct {
		arg1 *ec2.DescribeVpnGatewaysInput
	}
	describeVpnGatewaysReturns struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}
	describeVpnGatewaysReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}
	DescribeVpnGatewaysRequestStub        func(*ec2.DescribeVpnGatewaysInput) (*request.Request, *ec2.DescribeVpnGatewaysOutput)
	describeVpnGatewaysRequestMutex       sync.RWMutex
	describeVpnGatewaysRequestArgsForCall []struct {
		arg1 *ec2.DescribeVpnGatewaysInput
	}
	describeVpnGatewaysRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnGatewaysOutput
	}
	describeVpnGatewaysRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnGatewaysOutput
	}
	DescribeVpnGatewaysWithContextStub        func(aws.Context, *ec2.DescribeVpnGatewaysInput, ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error)
	describeVpnGatewaysWithContextMutex       sync.RWMutex
	describeVpnGatewaysWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnGatewaysInput
		arg3 []request.Option
	}
	describeVpnGatewaysWithContextReturns struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}
	describeVpnGatewaysWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}
	DetachClassicLinkVpcStub        func(*ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error)
	detachClassicLinkVpcMutex       sync.RWMutex
	detachClassicLinkVpcArgsForCall []struct {
		arg1 *ec2.DetachClassicLinkVpcInput
	}
	detachClassicLinkVpcReturns struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}
	detachClassicLinkVpcReturnsOnCall map[int]struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}
	DetachClassicLinkVpcRequestStub        func(*ec2.DetachClassicLinkVpcInput) (*request.Request, *ec2.DetachClassicLinkVpcOutput)
	detachClassicLinkVpcRequestMutex       sync.RWMutex
	detachClassicLinkVpcRequestArgsForCall []struct {
		arg1 *ec2.DetachClassicLinkVpcInput
	}
	detachClassicLinkVpcRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DetachClassicLinkVpcOutput
	}
	detachClassicLinkVpcRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DetachClassicLinkVpcOutput
	}
	DetachClassicLinkVpcWithContextStub        func(aws.Context, *ec2.DetachClassicLinkVpcInput, ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error)
	detachClassicLinkVpcWithContextMutex       sync.RWMutex
	detachClassicLinkVpcWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DetachClassicLinkVpcInput
		arg3 []request.Option
	}
	detachClassicLinkVpcWithContextReturns struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}
	detachClassicLinkVpcWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}
	DetachInternetGatewayStub        func(*ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error)
	detachInternetGatewayMutex       sync.RWMutex
	detachInternetGatewayArgsForCall []struct {
		arg1 *ec2.DetachInternetGatewayInput
	}
	detachInternetGatewayReturns struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}
	detachInternetGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}
	DetachInternetGatewayRequestStub        func(*ec2.DetachInternetGatewayInput) (*request.Request, *ec2.DetachInternetGatewayOutput)
	detachInternetGatewayRequestMutex       sync.RWMutex
	detachInternetGatewayRequestArgsForCall []struct {
		arg1 *ec2.DetachInternetGatewayInput
	}
	detachInternetGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DetachInternetGatewayOutput
	}
	detachInternetGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DetachInternetGatewayOutput
	}
	DetachInternetGatewayWithContextStub        func(aws.Context, *ec2.DetachInternetGatewayInput, ...request.Option) (*ec2.DetachInternetGatewayOutput, error)
	detachInternetGatewayWithContextMutex       sync.RWMutex
	detachInternetGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DetachInternetGatewayInput
		arg3 []request.Option
	}
	detachInternetGatewayWithContextReturns struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}
	detachInternetGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}
	DetachNetworkInterfaceStub        func(*ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error)
	detachNetworkInterfaceMutex       sync.RWMutex
	detachNetworkInterfaceArgsForCall []struct {
		arg1 *ec2.DetachNetworkInterfaceInput
	}
	detachNetworkInterfaceReturns struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}
	detachNetworkInterfaceReturnsOnCall map[int]struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}
	DetachNetworkInterfaceRequestStub        func(*ec2.DetachNetworkInterfaceInput) (*request.Request, *ec2.DetachNetworkInterfaceOutput)
	detachNetworkInterfaceRequestMutex       sync.RWMutex
	detachNetworkInterfaceRequestArgsForCall []struct {
		arg1 *ec2.DetachNetworkInterfaceInput
	}
	detachNetworkInterfaceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DetachNetworkInterfaceOutput
	}
	detachNetworkInterfaceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DetachNetworkInterfaceOutput
	}
	DetachNetworkInterfaceWithContextStub        func(aws.Context, *ec2.DetachNetworkInterfaceInput, ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error)
	detachNetworkInterfaceWithContextMutex       sync.RWMutex
	detachNetworkInterfaceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DetachNetworkInterfaceInput
		arg3 []request.Option
	}
	detachNetworkInterfaceWithContextReturns struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}
	detachNetworkInterfaceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}
	DetachVolumeStub        func(*ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error)
	detachVolumeMutex       sync.RWMutex
	detachVolumeArgsForCall []struct {
		arg1 *ec2.DetachVolumeInput
	}
	detachVolumeReturns struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	detachVolumeReturnsOnCall map[int]struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	DetachVolumeRequestStub        func(*ec2.DetachVolumeInput) (*request.Request, *ec2.VolumeAttachment)
	detachVolumeRequestMutex       sync.RWMutex
	detachVolumeRequestArgsForCall []struct {
		arg1 *ec2.DetachVolumeInput
	}
	detachVolumeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}
	detachVolumeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}
	DetachVolumeWithContextStub        func(aws.Context, *ec2.DetachVolumeInput, ...request.Option) (*ec2.VolumeAttachment, error)
	detachVolumeWithContextMutex       sync.RWMutex
	detachVolumeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DetachVolumeInput
		arg3 []request.Option
	}
	detachVolumeWithContextReturns struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	detachVolumeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}
	DetachVpnGatewayStub        func(*ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error)
	detachVpnGatewayMutex       sync.RWMutex
	detachVpnGatewayArgsForCall []struct {
		arg1 *ec2.DetachVpnGatewayInput
	}
	detachVpnGatewayReturns struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}
	detachVpnGatewayReturnsOnCall map[int]struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}
	DetachVpnGatewayRequestStub        func(*ec2.DetachVpnGatewayInput) (*request.Request, *ec2.DetachVpnGatewayOutput)
	detachVpnGatewayRequestMutex       sync.RWMutex
	detachVpnGatewayRequestArgsForCall []struct {
		arg1 *ec2.DetachVpnGatewayInput
	}
	detachVpnGatewayRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DetachVpnGatewayOutput
	}
	detachVpnGatewayRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DetachVpnGatewayOutput
	}
	DetachVpnGatewayWithContextStub        func(aws.Context, *ec2.DetachVpnGatewayInput, ...request.Option) (*ec2.DetachVpnGatewayOutput, error)
	detachVpnGatewayWithContextMutex       sync.RWMutex
	detachVpnGatewayWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DetachVpnGatewayInput
		arg3 []request.Option
	}
	detachVpnGatewayWithContextReturns struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}
	detachVpnGatewayWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}
	DisableTransitGatewayRouteTablePropagationStub        func(*ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)
	disableTransitGatewayRouteTablePropagationMutex       sync.RWMutex
	disableTransitGatewayRouteTablePropagationArgsForCall []struct {
		arg1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}
	disableTransitGatewayRouteTablePropagationReturns struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	disableTransitGatewayRouteTablePropagationReturnsOnCall map[int]struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	DisableTransitGatewayRouteTablePropagationRequestStub        func(*ec2.DisableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.DisableTransitGatewayRouteTablePropagationOutput)
	disableTransitGatewayRouteTablePropagationRequestMutex       sync.RWMutex
	disableTransitGatewayRouteTablePropagationRequestArgsForCall []struct {
		arg1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}
	disableTransitGatewayRouteTablePropagationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	}
	disableTransitGatewayRouteTablePropagationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	}
	DisableTransitGatewayRouteTablePropagationWithContextStub        func(aws.Context, *ec2.DisableTransitGatewayRouteTablePropagationInput, ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)
	disableTransitGatewayRouteTablePropagationWithContextMutex       sync.RWMutex
	disableTransitGatewayRouteTablePropagationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisableTransitGatewayRouteTablePropagationInput
		arg3 []request.Option
	}
	disableTransitGatewayRouteTablePropagationWithContextReturns struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	disableTransitGatewayRouteTablePropagationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	DisableVgwRoutePropagationStub        func(*ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error)
	disableVgwRoutePropagationMutex       sync.RWMutex
	disableVgwRoutePropagationArgsForCall []struct {
		arg1 *ec2.DisableVgwRoutePropagationInput
	}
	disableVgwRoutePropagationReturns struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}
	disableVgwRoutePropagationReturnsOnCall map[int]struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}
	DisableVgwRoutePropagationRequestStub        func(*ec2.DisableVgwRoutePropagationInput) (*request.Request, *ec2.DisableVgwRoutePropagationOutput)
	disableVgwRoutePropagationRequestMutex       sync.RWMutex
	disableVgwRoutePropagationRequestArgsForCall []struct {
		arg1 *ec2.DisableVgwRoutePropagationInput
	}
	disableVgwRoutePropagationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisableVgwRoutePropagationOutput
	}
	disableVgwRoutePropagationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisableVgwRoutePropagationOutput
	}
	DisableVgwRoutePropagationWithContextStub        func(aws.Context, *ec2.DisableVgwRoutePropagationInput, ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error)
	disableVgwRoutePropagationWithContextMutex       sync.RWMutex
	disableVgwRoutePropagationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisableVgwRoutePropagationInput
		arg3 []request.Option
	}
	disableVgwRoutePropagationWithContextReturns struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}
	disableVgwRoutePropagationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}
	DisableVpcClassicLinkStub        func(*ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error)
	disableVpcClassicLinkMutex       sync.RWMutex
	disableVpcClassicLinkArgsForCall []struct {
		arg1 *ec2.DisableVpcClassicLinkInput
	}
	disableVpcClassicLinkReturns struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}
	disableVpcClassicLinkReturnsOnCall map[int]struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}
	DisableVpcClassicLinkDnsSupportStub        func(*ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)
	disableVpcClassicLinkDnsSupportMutex       sync.RWMutex
	disableVpcClassicLinkDnsSupportArgsForCall []struct {
		arg1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}
	disableVpcClassicLinkDnsSupportReturns struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	disableVpcClassicLinkDnsSupportReturnsOnCall map[int]struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	DisableVpcClassicLinkDnsSupportRequestStub        func(*ec2.DisableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DisableVpcClassicLinkDnsSupportOutput)
	disableVpcClassicLinkDnsSupportRequestMutex       sync.RWMutex
	disableVpcClassicLinkDnsSupportRequestArgsForCall []struct {
		arg1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}
	disableVpcClassicLinkDnsSupportRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkDnsSupportOutput
	}
	disableVpcClassicLinkDnsSupportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkDnsSupportOutput
	}
	DisableVpcClassicLinkDnsSupportWithContextStub        func(aws.Context, *ec2.DisableVpcClassicLinkDnsSupportInput, ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)
	disableVpcClassicLinkDnsSupportWithContextMutex       sync.RWMutex
	disableVpcClassicLinkDnsSupportWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisableVpcClassicLinkDnsSupportInput
		arg3 []request.Option
	}
	disableVpcClassicLinkDnsSupportWithContextReturns struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	disableVpcClassicLinkDnsSupportWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	DisableVpcClassicLinkRequestStub        func(*ec2.DisableVpcClassicLinkInput) (*request.Request, *ec2.DisableVpcClassicLinkOutput)
	disableVpcClassicLinkRequestMutex       sync.RWMutex
	disableVpcClassicLinkRequestArgsForCall []struct {
		arg1 *ec2.DisableVpcClassicLinkInput
	}
	disableVpcClassicLinkRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkOutput
	}
	disableVpcClassicLinkRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkOutput
	}
	DisableVpcClassicLinkWithContextStub        func(aws.Context, *ec2.DisableVpcClassicLinkInput, ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error)
	disableVpcClassicLinkWithContextMutex       sync.RWMutex
	disableVpcClassicLinkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisableVpcClassicLinkInput
		arg3 []request.Option
	}
	disableVpcClassicLinkWithContextReturns struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}
	disableVpcClassicLinkWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}
	DisassociateAddressStub        func(*ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error)
	disassociateAddressMutex       sync.RWMutex
	disassociateAddressArgsForCall []struct {
		arg1 *ec2.DisassociateAddressInput
	}
	disassociateAddressReturns struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}
	disassociateAddressReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}
	DisassociateAddressRequestStub        func(*ec2.DisassociateAddressInput) (*request.Request, *ec2.DisassociateAddressOutput)
	disassociateAddressRequestMutex       sync.RWMutex
	disassociateAddressRequestArgsForCall []struct {
		arg1 *ec2.DisassociateAddressInput
	}
	disassociateAddressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateAddressOutput
	}
	disassociateAddressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateAddressOutput
	}
	DisassociateAddressWithContextStub        func(aws.Context, *ec2.DisassociateAddressInput, ...request.Option) (*ec2.DisassociateAddressOutput, error)
	disassociateAddressWithContextMutex       sync.RWMutex
	disassociateAddressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateAddressInput
		arg3 []request.Option
	}
	disassociateAddressWithContextReturns struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}
	disassociateAddressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}
	DisassociateClientVpnTargetNetworkStub        func(*ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)
	disassociateClientVpnTargetNetworkMutex       sync.RWMutex
	disassociateClientVpnTargetNetworkArgsForCall []struct {
		arg1 *ec2.DisassociateClientVpnTargetNetworkInput
	}
	disassociateClientVpnTargetNetworkReturns struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}
	disassociateClientVpnTargetNetworkReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}
	DisassociateClientVpnTargetNetworkRequestStub        func(*ec2.DisassociateClientVpnTargetNetworkInput) (*request.Request, *ec2.DisassociateClientVpnTargetNetworkOutput)
	disassociateClientVpnTargetNetworkRequestMutex       sync.RWMutex
	disassociateClientVpnTargetNetworkRequestArgsForCall []struct {
		arg1 *ec2.DisassociateClientVpnTargetNetworkInput
	}
	disassociateClientVpnTargetNetworkRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateClientVpnTargetNetworkOutput
	}
	disassociateClientVpnTargetNetworkRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateClientVpnTargetNetworkOutput
	}
	DisassociateClientVpnTargetNetworkWithContextStub        func(aws.Context, *ec2.DisassociateClientVpnTargetNetworkInput, ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)
	disassociateClientVpnTargetNetworkWithContextMutex       sync.RWMutex
	disassociateClientVpnTargetNetworkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateClientVpnTargetNetworkInput
		arg3 []request.Option
	}
	disassociateClientVpnTargetNetworkWithContextReturns struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}
	disassociateClientVpnTargetNetworkWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}
	DisassociateIamInstanceProfileStub        func(*ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error)
	disassociateIamInstanceProfileMutex       sync.RWMutex
	disassociateIamInstanceProfileArgsForCall []struct {
		arg1 *ec2.DisassociateIamInstanceProfileInput
	}
	disassociateIamInstanceProfileReturns struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}
	disassociateIamInstanceProfileReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}
	DisassociateIamInstanceProfileRequestStub        func(*ec2.DisassociateIamInstanceProfileInput) (*request.Request, *ec2.DisassociateIamInstanceProfileOutput)
	disassociateIamInstanceProfileRequestMutex       sync.RWMutex
	disassociateIamInstanceProfileRequestArgsForCall []struct {
		arg1 *ec2.DisassociateIamInstanceProfileInput
	}
	disassociateIamInstanceProfileRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateIamInstanceProfileOutput
	}
	disassociateIamInstanceProfileRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateIamInstanceProfileOutput
	}
	DisassociateIamInstanceProfileWithContextStub        func(aws.Context, *ec2.DisassociateIamInstanceProfileInput, ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error)
	disassociateIamInstanceProfileWithContextMutex       sync.RWMutex
	disassociateIamInstanceProfileWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateIamInstanceProfileInput
		arg3 []request.Option
	}
	disassociateIamInstanceProfileWithContextReturns struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}
	disassociateIamInstanceProfileWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}
	DisassociateRouteTableStub        func(*ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error)
	disassociateRouteTableMutex       sync.RWMutex
	disassociateRouteTableArgsForCall []struct {
		arg1 *ec2.DisassociateRouteTableInput
	}
	disassociateRouteTableReturns struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}
	disassociateRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}
	DisassociateRouteTableRequestStub        func(*ec2.DisassociateRouteTableInput) (*request.Request, *ec2.DisassociateRouteTableOutput)
	disassociateRouteTableRequestMutex       sync.RWMutex
	disassociateRouteTableRequestArgsForCall []struct {
		arg1 *ec2.DisassociateRouteTableInput
	}
	disassociateRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateRouteTableOutput
	}
	disassociateRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateRouteTableOutput
	}
	DisassociateRouteTableWithContextStub        func(aws.Context, *ec2.DisassociateRouteTableInput, ...request.Option) (*ec2.DisassociateRouteTableOutput, error)
	disassociateRouteTableWithContextMutex       sync.RWMutex
	disassociateRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateRouteTableInput
		arg3 []request.Option
	}
	disassociateRouteTableWithContextReturns struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}
	disassociateRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}
	DisassociateSubnetCidrBlockStub        func(*ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error)
	disassociateSubnetCidrBlockMutex       sync.RWMutex
	disassociateSubnetCidrBlockArgsForCall []struct {
		arg1 *ec2.DisassociateSubnetCidrBlockInput
	}
	disassociateSubnetCidrBlockReturns struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}
	disassociateSubnetCidrBlockReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}
	DisassociateSubnetCidrBlockRequestStub        func(*ec2.DisassociateSubnetCidrBlockInput) (*request.Request, *ec2.DisassociateSubnetCidrBlockOutput)
	disassociateSubnetCidrBlockRequestMutex       sync.RWMutex
	disassociateSubnetCidrBlockRequestArgsForCall []struct {
		arg1 *ec2.DisassociateSubnetCidrBlockInput
	}
	disassociateSubnetCidrBlockRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateSubnetCidrBlockOutput
	}
	disassociateSubnetCidrBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateSubnetCidrBlockOutput
	}
	DisassociateSubnetCidrBlockWithContextStub        func(aws.Context, *ec2.DisassociateSubnetCidrBlockInput, ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error)
	disassociateSubnetCidrBlockWithContextMutex       sync.RWMutex
	disassociateSubnetCidrBlockWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateSubnetCidrBlockInput
		arg3 []request.Option
	}
	disassociateSubnetCidrBlockWithContextReturns struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}
	disassociateSubnetCidrBlockWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}
	DisassociateTransitGatewayRouteTableStub        func(*ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)
	disassociateTransitGatewayRouteTableMutex       sync.RWMutex
	disassociateTransitGatewayRouteTableArgsForCall []struct {
		arg1 *ec2.DisassociateTransitGatewayRouteTableInput
	}
	disassociateTransitGatewayRouteTableReturns struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}
	disassociateTransitGatewayRouteTableReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}
	DisassociateTransitGatewayRouteTableRequestStub        func(*ec2.DisassociateTransitGatewayRouteTableInput) (*request.Request, *ec2.DisassociateTransitGatewayRouteTableOutput)
	disassociateTransitGatewayRouteTableRequestMutex       sync.RWMutex
	disassociateTransitGatewayRouteTableRequestArgsForCall []struct {
		arg1 *ec2.DisassociateTransitGatewayRouteTableInput
	}
	disassociateTransitGatewayRouteTableRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateTransitGatewayRouteTableOutput
	}
	disassociateTransitGatewayRouteTableRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateTransitGatewayRouteTableOutput
	}
	DisassociateTransitGatewayRouteTableWithContextStub        func(aws.Context, *ec2.DisassociateTransitGatewayRouteTableInput, ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)
	disassociateTransitGatewayRouteTableWithContextMutex       sync.RWMutex
	disassociateTransitGatewayRouteTableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateTransitGatewayRouteTableInput
		arg3 []request.Option
	}
	disassociateTransitGatewayRouteTableWithContextReturns struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}
	disassociateTransitGatewayRouteTableWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}
	DisassociateVpcCidrBlockStub        func(*ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error)
	disassociateVpcCidrBlockMutex       sync.RWMutex
	disassociateVpcCidrBlockArgsForCall []struct {
		arg1 *ec2.DisassociateVpcCidrBlockInput
	}
	disassociateVpcCidrBlockReturns struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}
	disassociateVpcCidrBlockReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}
	DisassociateVpcCidrBlockRequestStub        func(*ec2.DisassociateVpcCidrBlockInput) (*request.Request, *ec2.DisassociateVpcCidrBlockOutput)
	disassociateVpcCidrBlockRequestMutex       sync.RWMutex
	disassociateVpcCidrBlockRequestArgsForCall []struct {
		arg1 *ec2.DisassociateVpcCidrBlockInput
	}
	disassociateVpcCidrBlockRequestReturns struct {
		result1 *request.Request
		result2 *ec2.DisassociateVpcCidrBlockOutput
	}
	disassociateVpcCidrBlockRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.DisassociateVpcCidrBlockOutput
	}
	DisassociateVpcCidrBlockWithContextStub        func(aws.Context, *ec2.DisassociateVpcCidrBlockInput, ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error)
	disassociateVpcCidrBlockWithContextMutex       sync.RWMutex
	disassociateVpcCidrBlockWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateVpcCidrBlockInput
		arg3 []request.Option
	}
	disassociateVpcCidrBlockWithContextReturns struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}
	disassociateVpcCidrBlockWithContextReturnsOnCall map[int]struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}
	EnableTransitGatewayRouteTablePropagationStub        func(*ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)
	enableTransitGatewayRouteTablePropagationMutex       sync.RWMutex
	enableTransitGatewayRouteTablePropagationArgsForCall []struct {
		arg1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}
	enableTransitGatewayRouteTablePropagationReturns struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	enableTransitGatewayRouteTablePropagationReturnsOnCall map[int]struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	EnableTransitGatewayRouteTablePropagationRequestStub        func(*ec2.EnableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.EnableTransitGatewayRouteTablePropagationOutput)
	enableTransitGatewayRouteTablePropagationRequestMutex       sync.RWMutex
	enableTransitGatewayRouteTablePropagationRequestArgsForCall []struct {
		arg1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}
	enableTransitGatewayRouteTablePropagationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	}
	enableTransitGatewayRouteTablePropagationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	}
	EnableTransitGatewayRouteTablePropagationWithContextStub        func(aws.Context, *ec2.EnableTransitGatewayRouteTablePropagationInput, ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)
	enableTransitGatewayRouteTablePropagationWithContextMutex       sync.RWMutex
	enableTransitGatewayRouteTablePropagationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.EnableTransitGatewayRouteTablePropagationInput
		arg3 []request.Option
	}
	enableTransitGatewayRouteTablePropagationWithContextReturns struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	enableTransitGatewayRouteTablePropagationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}
	EnableVgwRoutePropagationStub        func(*ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error)
	enableVgwRoutePropagationMutex       sync.RWMutex
	enableVgwRoutePropagationArgsForCall []struct {
		arg1 *ec2.EnableVgwRoutePropagationInput
	}
	enableVgwRoutePropagationReturns struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}
	enableVgwRoutePropagationReturnsOnCall map[int]struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}
	EnableVgwRoutePropagationRequestStub        func(*ec2.EnableVgwRoutePropagationInput) (*request.Request, *ec2.EnableVgwRoutePropagationOutput)
	enableVgwRoutePropagationRequestMutex       sync.RWMutex
	enableVgwRoutePropagationRequestArgsForCall []struct {
		arg1 *ec2.EnableVgwRoutePropagationInput
	}
	enableVgwRoutePropagationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.EnableVgwRoutePropagationOutput
	}
	enableVgwRoutePropagationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.EnableVgwRoutePropagationOutput
	}
	EnableVgwRoutePropagationWithContextStub        func(aws.Context, *ec2.EnableVgwRoutePropagationInput, ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error)
	enableVgwRoutePropagationWithContextMutex       sync.RWMutex
	enableVgwRoutePropagationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.EnableVgwRoutePropagationInput
		arg3 []request.Option
	}
	enableVgwRoutePropagationWithContextReturns struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}
	enableVgwRoutePropagationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}
	EnableVolumeIOStub        func(*ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error)
	enableVolumeIOMutex       sync.RWMutex
	enableVolumeIOArgsForCall []struct {
		arg1 *ec2.EnableVolumeIOInput
	}
	enableVolumeIOReturns struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}
	enableVolumeIOReturnsOnCall map[int]struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}
	EnableVolumeIORequestStub        func(*ec2.EnableVolumeIOInput) (*request.Request, *ec2.EnableVolumeIOOutput)
	enableVolumeIORequestMutex       sync.RWMutex
	enableVolumeIORequestArgsForCall []struct {
		arg1 *ec2.EnableVolumeIOInput
	}
	enableVolumeIORequestReturns struct {
		result1 *request.Request
		result2 *ec2.EnableVolumeIOOutput
	}
	enableVolumeIORequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.EnableVolumeIOOutput
	}
	EnableVolumeIOWithContextStub        func(aws.Context, *ec2.EnableVolumeIOInput, ...request.Option) (*ec2.EnableVolumeIOOutput, error)
	enableVolumeIOWithContextMutex       sync.RWMutex
	enableVolumeIOWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.EnableVolumeIOInput
		arg3 []request.Option
	}
	enableVolumeIOWithContextReturns struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}
	enableVolumeIOWithContextReturnsOnCall map[int]struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}
	EnableVpcClassicLinkStub        func(*ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error)
	enableVpcClassicLinkMutex       sync.RWMutex
	enableVpcClassicLinkArgsForCall []struct {
		arg1 *ec2.EnableVpcClassicLinkInput
	}
	enableVpcClassicLinkReturns struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}
	enableVpcClassicLinkReturnsOnCall map[int]struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}
	EnableVpcClassicLinkDnsSupportStub        func(*ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)
	enableVpcClassicLinkDnsSupportMutex       sync.RWMutex
	enableVpcClassicLinkDnsSupportArgsForCall []struct {
		arg1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}
	enableVpcClassicLinkDnsSupportReturns struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	enableVpcClassicLinkDnsSupportReturnsOnCall map[int]struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	EnableVpcClassicLinkDnsSupportRequestStub        func(*ec2.EnableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.EnableVpcClassicLinkDnsSupportOutput)
	enableVpcClassicLinkDnsSupportRequestMutex       sync.RWMutex
	enableVpcClassicLinkDnsSupportRequestArgsForCall []struct {
		arg1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}
	enableVpcClassicLinkDnsSupportRequestReturns struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkDnsSupportOutput
	}
	enableVpcClassicLinkDnsSupportRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkDnsSupportOutput
	}
	EnableVpcClassicLinkDnsSupportWithContextStub        func(aws.Context, *ec2.EnableVpcClassicLinkDnsSupportInput, ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)
	enableVpcClassicLinkDnsSupportWithContextMutex       sync.RWMutex
	enableVpcClassicLinkDnsSupportWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.EnableVpcClassicLinkDnsSupportInput
		arg3 []request.Option
	}
	enableVpcClassicLinkDnsSupportWithContextReturns struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	enableVpcClassicLinkDnsSupportWithContextReturnsOnCall map[int]struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}
	EnableVpcClassicLinkRequestStub        func(*ec2.EnableVpcClassicLinkInput) (*request.Request, *ec2.EnableVpcClassicLinkOutput)
	enableVpcClassicLinkRequestMutex       sync.RWMutex
	enableVpcClassicLinkRequestArgsForCall []struct {
		arg1 *ec2.EnableVpcClassicLinkInput
	}
	enableVpcClassicLinkRequestReturns struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkOutput
	}
	enableVpcClassicLinkRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkOutput
	}
	EnableVpcClassicLinkWithContextStub        func(aws.Context, *ec2.EnableVpcClassicLinkInput, ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error)
	enableVpcClassicLinkWithContextMutex       sync.RWMutex
	enableVpcClassicLinkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.EnableVpcClassicLinkInput
		arg3 []request.Option
	}
	enableVpcClassicLinkWithContextReturns struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}
	enableVpcClassicLinkWithContextReturnsOnCall map[int]struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}
	ExportClientVpnClientCertificateRevocationListStub        func(*ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)
	exportClientVpnClientCertificateRevocationListMutex       sync.RWMutex
	exportClientVpnClientCertificateRevocationListArgsForCall []struct {
		arg1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}
	exportClientVpnClientCertificateRevocationListReturns struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	exportClientVpnClientCertificateRevocationListReturnsOnCall map[int]struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	ExportClientVpnClientCertificateRevocationListRequestStub        func(*ec2.ExportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ExportClientVpnClientCertificateRevocationListOutput)
	exportClientVpnClientCertificateRevocationListRequestMutex       sync.RWMutex
	exportClientVpnClientCertificateRevocationListRequestArgsForCall []struct {
		arg1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}
	exportClientVpnClientCertificateRevocationListRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	}
	exportClientVpnClientCertificateRevocationListRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	}
	ExportClientVpnClientCertificateRevocationListWithContextStub        func(aws.Context, *ec2.ExportClientVpnClientCertificateRevocationListInput, ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)
	exportClientVpnClientCertificateRevocationListWithContextMutex       sync.RWMutex
	exportClientVpnClientCertificateRevocationListWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ExportClientVpnClientCertificateRevocationListInput
		arg3 []request.Option
	}
	exportClientVpnClientCertificateRevocationListWithContextReturns struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	exportClientVpnClientCertificateRevocationListWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	ExportClientVpnClientConfigurationStub        func(*ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error)
	exportClientVpnClientConfigurationMutex       sync.RWMutex
	exportClientVpnClientConfigurationArgsForCall []struct {
		arg1 *ec2.ExportClientVpnClientConfigurationInput
	}
	exportClientVpnClientConfigurationReturns struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}
	exportClientVpnClientConfigurationReturnsOnCall map[int]struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}
	ExportClientVpnClientConfigurationRequestStub        func(*ec2.ExportClientVpnClientConfigurationInput) (*request.Request, *ec2.ExportClientVpnClientConfigurationOutput)
	exportClientVpnClientConfigurationRequestMutex       sync.RWMutex
	exportClientVpnClientConfigurationRequestArgsForCall []struct {
		arg1 *ec2.ExportClientVpnClientConfigurationInput
	}
	exportClientVpnClientConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientConfigurationOutput
	}
	exportClientVpnClientConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientConfigurationOutput
	}
	ExportClientVpnClientConfigurationWithContextStub        func(aws.Context, *ec2.ExportClientVpnClientConfigurationInput, ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error)
	exportClientVpnClientConfigurationWithContextMutex       sync.RWMutex
	exportClientVpnClientConfigurationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ExportClientVpnClientConfigurationInput
		arg3 []request.Option
	}
	exportClientVpnClientConfigurationWithContextReturns struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}
	exportClientVpnClientConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}
	ExportTransitGatewayRoutesStub        func(*ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error)
	exportTransitGatewayRoutesMutex       sync.RWMutex
	exportTransitGatewayRoutesArgsForCall []struct {
		arg1 *ec2.ExportTransitGatewayRoutesInput
	}
	exportTransitGatewayRoutesReturns struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}
	exportTransitGatewayRoutesReturnsOnCall map[int]struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}
	ExportTransitGatewayRoutesRequestStub        func(*ec2.ExportTransitGatewayRoutesInput) (*request.Request, *ec2.ExportTransitGatewayRoutesOutput)
	exportTransitGatewayRoutesRequestMutex       sync.RWMutex
	exportTransitGatewayRoutesRequestArgsForCall []struct {
		arg1 *ec2.ExportTransitGatewayRoutesInput
	}
	exportTransitGatewayRoutesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ExportTransitGatewayRoutesOutput
	}
	exportTransitGatewayRoutesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ExportTransitGatewayRoutesOutput
	}
	ExportTransitGatewayRoutesWithContextStub        func(aws.Context, *ec2.ExportTransitGatewayRoutesInput, ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error)
	exportTransitGatewayRoutesWithContextMutex       sync.RWMutex
	exportTransitGatewayRoutesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ExportTransitGatewayRoutesInput
		arg3 []request.Option
	}
	exportTransitGatewayRoutesWithContextReturns struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}
	exportTransitGatewayRoutesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}
	GetConsoleOutputStub        func(*ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error)
	getConsoleOutputMutex       sync.RWMutex
	getConsoleOutputArgsForCall []struct {
		arg1 *ec2.GetConsoleOutputInput
	}
	getConsoleOutputReturns struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}
	getConsoleOutputReturnsOnCall map[int]struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}
	GetConsoleOutputRequestStub        func(*ec2.GetConsoleOutputInput) (*request.Request, *ec2.GetConsoleOutputOutput)
	getConsoleOutputRequestMutex       sync.RWMutex
	getConsoleOutputRequestArgsForCall []struct {
		arg1 *ec2.GetConsoleOutputInput
	}
	getConsoleOutputRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetConsoleOutputOutput
	}
	getConsoleOutputRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetConsoleOutputOutput
	}
	GetConsoleOutputWithContextStub        func(aws.Context, *ec2.GetConsoleOutputInput, ...request.Option) (*ec2.GetConsoleOutputOutput, error)
	getConsoleOutputWithContextMutex       sync.RWMutex
	getConsoleOutputWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetConsoleOutputInput
		arg3 []request.Option
	}
	getConsoleOutputWithContextReturns struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}
	getConsoleOutputWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}
	GetConsoleScreenshotStub        func(*ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error)
	getConsoleScreenshotMutex       sync.RWMutex
	getConsoleScreenshotArgsForCall []struct {
		arg1 *ec2.GetConsoleScreenshotInput
	}
	getConsoleScreenshotReturns struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}
	getConsoleScreenshotReturnsOnCall map[int]struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}
	GetConsoleScreenshotRequestStub        func(*ec2.GetConsoleScreenshotInput) (*request.Request, *ec2.GetConsoleScreenshotOutput)
	getConsoleScreenshotRequestMutex       sync.RWMutex
	getConsoleScreenshotRequestArgsForCall []struct {
		arg1 *ec2.GetConsoleScreenshotInput
	}
	getConsoleScreenshotRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetConsoleScreenshotOutput
	}
	getConsoleScreenshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetConsoleScreenshotOutput
	}
	GetConsoleScreenshotWithContextStub        func(aws.Context, *ec2.GetConsoleScreenshotInput, ...request.Option) (*ec2.GetConsoleScreenshotOutput, error)
	getConsoleScreenshotWithContextMutex       sync.RWMutex
	getConsoleScreenshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetConsoleScreenshotInput
		arg3 []request.Option
	}
	getConsoleScreenshotWithContextReturns struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}
	getConsoleScreenshotWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}
	GetHostReservationPurchasePreviewStub        func(*ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error)
	getHostReservationPurchasePreviewMutex       sync.RWMutex
	getHostReservationPurchasePreviewArgsForCall []struct {
		arg1 *ec2.GetHostReservationPurchasePreviewInput
	}
	getHostReservationPurchasePreviewReturns struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}
	getHostReservationPurchasePreviewReturnsOnCall map[int]struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}
	GetHostReservationPurchasePreviewRequestStub        func(*ec2.GetHostReservationPurchasePreviewInput) (*request.Request, *ec2.GetHostReservationPurchasePreviewOutput)
	getHostReservationPurchasePreviewRequestMutex       sync.RWMutex
	getHostReservationPurchasePreviewRequestArgsForCall []struct {
		arg1 *ec2.GetHostReservationPurchasePreviewInput
	}
	getHostReservationPurchasePreviewRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetHostReservationPurchasePreviewOutput
	}
	getHostReservationPurchasePreviewRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetHostReservationPurchasePreviewOutput
	}
	GetHostReservationPurchasePreviewWithContextStub        func(aws.Context, *ec2.GetHostReservationPurchasePreviewInput, ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error)
	getHostReservationPurchasePreviewWithContextMutex       sync.RWMutex
	getHostReservationPurchasePreviewWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetHostReservationPurchasePreviewInput
		arg3 []request.Option
	}
	getHostReservationPurchasePreviewWithContextReturns struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}
	getHostReservationPurchasePreviewWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}
	GetLaunchTemplateDataStub        func(*ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error)
	getLaunchTemplateDataMutex       sync.RWMutex
	getLaunchTemplateDataArgsForCall []struct {
		arg1 *ec2.GetLaunchTemplateDataInput
	}
	getLaunchTemplateDataReturns struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}
	getLaunchTemplateDataReturnsOnCall map[int]struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}
	GetLaunchTemplateDataRequestStub        func(*ec2.GetLaunchTemplateDataInput) (*request.Request, *ec2.GetLaunchTemplateDataOutput)
	getLaunchTemplateDataRequestMutex       sync.RWMutex
	getLaunchTemplateDataRequestArgsForCall []struct {
		arg1 *ec2.GetLaunchTemplateDataInput
	}
	getLaunchTemplateDataRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetLaunchTemplateDataOutput
	}
	getLaunchTemplateDataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetLaunchTemplateDataOutput
	}
	GetLaunchTemplateDataWithContextStub        func(aws.Context, *ec2.GetLaunchTemplateDataInput, ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error)
	getLaunchTemplateDataWithContextMutex       sync.RWMutex
	getLaunchTemplateDataWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetLaunchTemplateDataInput
		arg3 []request.Option
	}
	getLaunchTemplateDataWithContextReturns struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}
	getLaunchTemplateDataWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}
	GetPasswordDataStub        func(*ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error)
	getPasswordDataMutex       sync.RWMutex
	getPasswordDataArgsForCall []struct {
		arg1 *ec2.GetPasswordDataInput
	}
	getPasswordDataReturns struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}
	getPasswordDataReturnsOnCall map[int]struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}
	GetPasswordDataRequestStub        func(*ec2.GetPasswordDataInput) (*request.Request, *ec2.GetPasswordDataOutput)
	getPasswordDataRequestMutex       sync.RWMutex
	getPasswordDataRequestArgsForCall []struct {
		arg1 *ec2.GetPasswordDataInput
	}
	getPasswordDataRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetPasswordDataOutput
	}
	getPasswordDataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetPasswordDataOutput
	}
	GetPasswordDataWithContextStub        func(aws.Context, *ec2.GetPasswordDataInput, ...request.Option) (*ec2.GetPasswordDataOutput, error)
	getPasswordDataWithContextMutex       sync.RWMutex
	getPasswordDataWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetPasswordDataInput
		arg3 []request.Option
	}
	getPasswordDataWithContextReturns struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}
	getPasswordDataWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}
	GetReservedInstancesExchangeQuoteStub        func(*ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)
	getReservedInstancesExchangeQuoteMutex       sync.RWMutex
	getReservedInstancesExchangeQuoteArgsForCall []struct {
		arg1 *ec2.GetReservedInstancesExchangeQuoteInput
	}
	getReservedInstancesExchangeQuoteReturns struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}
	getReservedInstancesExchangeQuoteReturnsOnCall map[int]struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}
	GetReservedInstancesExchangeQuoteRequestStub        func(*ec2.GetReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.GetReservedInstancesExchangeQuoteOutput)
	getReservedInstancesExchangeQuoteRequestMutex       sync.RWMutex
	getReservedInstancesExchangeQuoteRequestArgsForCall []struct {
		arg1 *ec2.GetReservedInstancesExchangeQuoteInput
	}
	getReservedInstancesExchangeQuoteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetReservedInstancesExchangeQuoteOutput
	}
	getReservedInstancesExchangeQuoteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetReservedInstancesExchangeQuoteOutput
	}
	GetReservedInstancesExchangeQuoteWithContextStub        func(aws.Context, *ec2.GetReservedInstancesExchangeQuoteInput, ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)
	getReservedInstancesExchangeQuoteWithContextMutex       sync.RWMutex
	getReservedInstancesExchangeQuoteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetReservedInstancesExchangeQuoteInput
		arg3 []request.Option
	}
	getReservedInstancesExchangeQuoteWithContextReturns struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}
	getReservedInstancesExchangeQuoteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}
	GetTransitGatewayAttachmentPropagationsStub        func(*ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)
	getTransitGatewayAttachmentPropagationsMutex       sync.RWMutex
	getTransitGatewayAttachmentPropagationsArgsForCall []struct {
		arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}
	getTransitGatewayAttachmentPropagationsReturns struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}
	getTransitGatewayAttachmentPropagationsReturnsOnCall map[int]struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}
	GetTransitGatewayAttachmentPropagationsRequestStub        func(*ec2.GetTransitGatewayAttachmentPropagationsInput) (*request.Request, *ec2.GetTransitGatewayAttachmentPropagationsOutput)
	getTransitGatewayAttachmentPropagationsRequestMutex       sync.RWMutex
	getTransitGatewayAttachmentPropagationsRequestArgsForCall []struct {
		arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}
	getTransitGatewayAttachmentPropagationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	}
	getTransitGatewayAttachmentPropagationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	}
	GetTransitGatewayAttachmentPropagationsWithContextStub        func(aws.Context, *ec2.GetTransitGatewayAttachmentPropagationsInput, ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)
	getTransitGatewayAttachmentPropagationsWithContextMutex       sync.RWMutex
	getTransitGatewayAttachmentPropagationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetTransitGatewayAttachmentPropagationsInput
		arg3 []request.Option
	}
	getTransitGatewayAttachmentPropagationsWithContextReturns struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}
	getTransitGatewayAttachmentPropagationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}
	GetTransitGatewayRouteTableAssociationsStub        func(*ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)
	getTransitGatewayRouteTableAssociationsMutex       sync.RWMutex
	getTransitGatewayRouteTableAssociationsArgsForCall []struct {
		arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}
	getTransitGatewayRouteTableAssociationsReturns struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}
	getTransitGatewayRouteTableAssociationsReturnsOnCall map[int]struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}
	GetTransitGatewayRouteTableAssociationsRequestStub        func(*ec2.GetTransitGatewayRouteTableAssociationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTableAssociationsOutput)
	getTransitGatewayRouteTableAssociationsRequestMutex       sync.RWMutex
	getTransitGatewayRouteTableAssociationsRequestArgsForCall []struct {
		arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}
	getTransitGatewayRouteTableAssociationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	}
	getTransitGatewayRouteTableAssociationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	}
	GetTransitGatewayRouteTableAssociationsWithContextStub        func(aws.Context, *ec2.GetTransitGatewayRouteTableAssociationsInput, ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)
	getTransitGatewayRouteTableAssociationsWithContextMutex       sync.RWMutex
	getTransitGatewayRouteTableAssociationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetTransitGatewayRouteTableAssociationsInput
		arg3 []request.Option
	}
	getTransitGatewayRouteTableAssociationsWithContextReturns struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}
	getTransitGatewayRouteTableAssociationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}
	GetTransitGatewayRouteTablePropagationsStub        func(*ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)
	getTransitGatewayRouteTablePropagationsMutex       sync.RWMutex
	getTransitGatewayRouteTablePropagationsArgsForCall []struct {
		arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}
	getTransitGatewayRouteTablePropagationsReturns struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}
	getTransitGatewayRouteTablePropagationsReturnsOnCall map[int]struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}
	GetTransitGatewayRouteTablePropagationsRequestStub        func(*ec2.GetTransitGatewayRouteTablePropagationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTablePropagationsOutput)
	getTransitGatewayRouteTablePropagationsRequestMutex       sync.RWMutex
	getTransitGatewayRouteTablePropagationsRequestArgsForCall []struct {
		arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}
	getTransitGatewayRouteTablePropagationsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	}
	getTransitGatewayRouteTablePropagationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	}
	GetTransitGatewayRouteTablePropagationsWithContextStub        func(aws.Context, *ec2.GetTransitGatewayRouteTablePropagationsInput, ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)
	getTransitGatewayRouteTablePropagationsWithContextMutex       sync.RWMutex
	getTransitGatewayRouteTablePropagationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetTransitGatewayRouteTablePropagationsInput
		arg3 []request.Option
	}
	getTransitGatewayRouteTablePropagationsWithContextReturns struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}
	getTransitGatewayRouteTablePropagationsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}
	ImportClientVpnClientCertificateRevocationListStub        func(*ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)
	importClientVpnClientCertificateRevocationListMutex       sync.RWMutex
	importClientVpnClientCertificateRevocationListArgsForCall []struct {
		arg1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}
	importClientVpnClientCertificateRevocationListReturns struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	importClientVpnClientCertificateRevocationListReturnsOnCall map[int]struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	ImportClientVpnClientCertificateRevocationListRequestStub        func(*ec2.ImportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ImportClientVpnClientCertificateRevocationListOutput)
	importClientVpnClientCertificateRevocationListRequestMutex       sync.RWMutex
	importClientVpnClientCertificateRevocationListRequestArgsForCall []struct {
		arg1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}
	importClientVpnClientCertificateRevocationListRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	}
	importClientVpnClientCertificateRevocationListRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	}
	ImportClientVpnClientCertificateRevocationListWithContextStub        func(aws.Context, *ec2.ImportClientVpnClientCertificateRevocationListInput, ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)
	importClientVpnClientCertificateRevocationListWithContextMutex       sync.RWMutex
	importClientVpnClientCertificateRevocationListWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ImportClientVpnClientCertificateRevocationListInput
		arg3 []request.Option
	}
	importClientVpnClientCertificateRevocationListWithContextReturns struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	importClientVpnClientCertificateRevocationListWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}
	ImportImageStub        func(*ec2.ImportImageInput) (*ec2.ImportImageOutput, error)
	importImageMutex       sync.RWMutex
	importImageArgsForCall []struct {
		arg1 *ec2.ImportImageInput
	}
	importImageReturns struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}
	importImageReturnsOnCall map[int]struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}
	ImportImageRequestStub        func(*ec2.ImportImageInput) (*request.Request, *ec2.ImportImageOutput)
	importImageRequestMutex       sync.RWMutex
	importImageRequestArgsForCall []struct {
		arg1 *ec2.ImportImageInput
	}
	importImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ImportImageOutput
	}
	importImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ImportImageOutput
	}
	ImportImageWithContextStub        func(aws.Context, *ec2.ImportImageInput, ...request.Option) (*ec2.ImportImageOutput, error)
	importImageWithContextMutex       sync.RWMutex
	importImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ImportImageInput
		arg3 []request.Option
	}
	importImageWithContextReturns struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}
	importImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}
	ImportInstanceStub        func(*ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error)
	importInstanceMutex       sync.RWMutex
	importInstanceArgsForCall []struct {
		arg1 *ec2.ImportInstanceInput
	}
	importInstanceReturns struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}
	importInstanceReturnsOnCall map[int]struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}
	ImportInstanceRequestStub        func(*ec2.ImportInstanceInput) (*request.Request, *ec2.ImportInstanceOutput)
	importInstanceRequestMutex       sync.RWMutex
	importInstanceRequestArgsForCall []struct {
		arg1 *ec2.ImportInstanceInput
	}
	importInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ImportInstanceOutput
	}
	importInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ImportInstanceOutput
	}
	ImportInstanceWithContextStub        func(aws.Context, *ec2.ImportInstanceInput, ...request.Option) (*ec2.ImportInstanceOutput, error)
	importInstanceWithContextMutex       sync.RWMutex
	importInstanceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ImportInstanceInput
		arg3 []request.Option
	}
	importInstanceWithContextReturns struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}
	importInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}
	ImportKeyPairStub        func(*ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error)
	importKeyPairMutex       sync.RWMutex
	importKeyPairArgsForCall []struct {
		arg1 *ec2.ImportKeyPairInput
	}
	importKeyPairReturns struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}
	importKeyPairReturnsOnCall map[int]struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}
	ImportKeyPairRequestStub        func(*ec2.ImportKeyPairInput) (*request.Request, *ec2.ImportKeyPairOutput)
	importKeyPairRequestMutex       sync.RWMutex
	importKeyPairRequestArgsForCall []struct {
		arg1 *ec2.ImportKeyPairInput
	}
	importKeyPairRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ImportKeyPairOutput
	}
	importKeyPairRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ImportKeyPairOutput
	}
	ImportKeyPairWithContextStub        func(aws.Context, *ec2.ImportKeyPairInput, ...request.Option) (*ec2.ImportKeyPairOutput, error)
	importKeyPairWithContextMutex       sync.RWMutex
	importKeyPairWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ImportKeyPairInput
		arg3 []request.Option
	}
	importKeyPairWithContextReturns struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}
	importKeyPairWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}
	ImportSnapshotStub        func(*ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error)
	importSnapshotMutex       sync.RWMutex
	importSnapshotArgsForCall []struct {
		arg1 *ec2.ImportSnapshotInput
	}
	importSnapshotReturns struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}
	importSnapshotReturnsOnCall map[int]struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}
	ImportSnapshotRequestStub        func(*ec2.ImportSnapshotInput) (*request.Request, *ec2.ImportSnapshotOutput)
	importSnapshotRequestMutex       sync.RWMutex
	importSnapshotRequestArgsForCall []struct {
		arg1 *ec2.ImportSnapshotInput
	}
	importSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ImportSnapshotOutput
	}
	importSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ImportSnapshotOutput
	}
	ImportSnapshotWithContextStub        func(aws.Context, *ec2.ImportSnapshotInput, ...request.Option) (*ec2.ImportSnapshotOutput, error)
	importSnapshotWithContextMutex       sync.RWMutex
	importSnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ImportSnapshotInput
		arg3 []request.Option
	}
	importSnapshotWithContextReturns struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}
	importSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}
	ImportVolumeStub        func(*ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error)
	importVolumeMutex       sync.RWMutex
	importVolumeArgsForCall []struct {
		arg1 *ec2.ImportVolumeInput
	}
	importVolumeReturns struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}
	importVolumeReturnsOnCall map[int]struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}
	ImportVolumeRequestStub        func(*ec2.ImportVolumeInput) (*request.Request, *ec2.ImportVolumeOutput)
	importVolumeRequestMutex       sync.RWMutex
	importVolumeRequestArgsForCall []struct {
		arg1 *ec2.ImportVolumeInput
	}
	importVolumeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ImportVolumeOutput
	}
	importVolumeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ImportVolumeOutput
	}
	ImportVolumeWithContextStub        func(aws.Context, *ec2.ImportVolumeInput, ...request.Option) (*ec2.ImportVolumeOutput, error)
	importVolumeWithContextMutex       sync.RWMutex
	importVolumeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ImportVolumeInput
		arg3 []request.Option
	}
	importVolumeWithContextReturns struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}
	importVolumeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}
	ModifyCapacityReservationStub        func(*ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error)
	modifyCapacityReservationMutex       sync.RWMutex
	modifyCapacityReservationArgsForCall []struct {
		arg1 *ec2.ModifyCapacityReservationInput
	}
	modifyCapacityReservationReturns struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}
	modifyCapacityReservationReturnsOnCall map[int]struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}
	ModifyCapacityReservationRequestStub        func(*ec2.ModifyCapacityReservationInput) (*request.Request, *ec2.ModifyCapacityReservationOutput)
	modifyCapacityReservationRequestMutex       sync.RWMutex
	modifyCapacityReservationRequestArgsForCall []struct {
		arg1 *ec2.ModifyCapacityReservationInput
	}
	modifyCapacityReservationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyCapacityReservationOutput
	}
	modifyCapacityReservationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyCapacityReservationOutput
	}
	ModifyCapacityReservationWithContextStub        func(aws.Context, *ec2.ModifyCapacityReservationInput, ...request.Option) (*ec2.ModifyCapacityReservationOutput, error)
	modifyCapacityReservationWithContextMutex       sync.RWMutex
	modifyCapacityReservationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyCapacityReservationInput
		arg3 []request.Option
	}
	modifyCapacityReservationWithContextReturns struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}
	modifyCapacityReservationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}
	ModifyClientVpnEndpointStub        func(*ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error)
	modifyClientVpnEndpointMutex       sync.RWMutex
	modifyClientVpnEndpointArgsForCall []struct {
		arg1 *ec2.ModifyClientVpnEndpointInput
	}
	modifyClientVpnEndpointReturns struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}
	modifyClientVpnEndpointReturnsOnCall map[int]struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}
	ModifyClientVpnEndpointRequestStub        func(*ec2.ModifyClientVpnEndpointInput) (*request.Request, *ec2.ModifyClientVpnEndpointOutput)
	modifyClientVpnEndpointRequestMutex       sync.RWMutex
	modifyClientVpnEndpointRequestArgsForCall []struct {
		arg1 *ec2.ModifyClientVpnEndpointInput
	}
	modifyClientVpnEndpointRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyClientVpnEndpointOutput
	}
	modifyClientVpnEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyClientVpnEndpointOutput
	}
	ModifyClientVpnEndpointWithContextStub        func(aws.Context, *ec2.ModifyClientVpnEndpointInput, ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error)
	modifyClientVpnEndpointWithContextMutex       sync.RWMutex
	modifyClientVpnEndpointWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyClientVpnEndpointInput
		arg3 []request.Option
	}
	modifyClientVpnEndpointWithContextReturns struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}
	modifyClientVpnEndpointWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}
	ModifyFleetStub        func(*ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error)
	modifyFleetMutex       sync.RWMutex
	modifyFleetArgsForCall []struct {
		arg1 *ec2.ModifyFleetInput
	}
	modifyFleetReturns struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}
	modifyFleetReturnsOnCall map[int]struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}
	ModifyFleetRequestStub        func(*ec2.ModifyFleetInput) (*request.Request, *ec2.ModifyFleetOutput)
	modifyFleetRequestMutex       sync.RWMutex
	modifyFleetRequestArgsForCall []struct {
		arg1 *ec2.ModifyFleetInput
	}
	modifyFleetRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyFleetOutput
	}
	modifyFleetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyFleetOutput
	}
	ModifyFleetWithContextStub        func(aws.Context, *ec2.ModifyFleetInput, ...request.Option) (*ec2.ModifyFleetOutput, error)
	modifyFleetWithContextMutex       sync.RWMutex
	modifyFleetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyFleetInput
		arg3 []request.Option
	}
	modifyFleetWithContextReturns struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}
	modifyFleetWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}
	ModifyFpgaImageAttributeStub        func(*ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error)
	modifyFpgaImageAttributeMutex       sync.RWMutex
	modifyFpgaImageAttributeArgsForCall []struct {
		arg1 *ec2.ModifyFpgaImageAttributeInput
	}
	modifyFpgaImageAttributeReturns struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}
	modifyFpgaImageAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}
	ModifyFpgaImageAttributeRequestStub        func(*ec2.ModifyFpgaImageAttributeInput) (*request.Request, *ec2.ModifyFpgaImageAttributeOutput)
	modifyFpgaImageAttributeRequestMutex       sync.RWMutex
	modifyFpgaImageAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifyFpgaImageAttributeInput
	}
	modifyFpgaImageAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyFpgaImageAttributeOutput
	}
	modifyFpgaImageAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyFpgaImageAttributeOutput
	}
	ModifyFpgaImageAttributeWithContextStub        func(aws.Context, *ec2.ModifyFpgaImageAttributeInput, ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error)
	modifyFpgaImageAttributeWithContextMutex       sync.RWMutex
	modifyFpgaImageAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyFpgaImageAttributeInput
		arg3 []request.Option
	}
	modifyFpgaImageAttributeWithContextReturns struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}
	modifyFpgaImageAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}
	ModifyHostsStub        func(*ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error)
	modifyHostsMutex       sync.RWMutex
	modifyHostsArgsForCall []struct {
		arg1 *ec2.ModifyHostsInput
	}
	modifyHostsReturns struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}
	modifyHostsReturnsOnCall map[int]struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}
	ModifyHostsRequestStub        func(*ec2.ModifyHostsInput) (*request.Request, *ec2.ModifyHostsOutput)
	modifyHostsRequestMutex       sync.RWMutex
	modifyHostsRequestArgsForCall []struct {
		arg1 *ec2.ModifyHostsInput
	}
	modifyHostsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyHostsOutput
	}
	modifyHostsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyHostsOutput
	}
	ModifyHostsWithContextStub        func(aws.Context, *ec2.ModifyHostsInput, ...request.Option) (*ec2.ModifyHostsOutput, error)
	modifyHostsWithContextMutex       sync.RWMutex
	modifyHostsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyHostsInput
		arg3 []request.Option
	}
	modifyHostsWithContextReturns struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}
	modifyHostsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}
	ModifyIdFormatStub        func(*ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error)
	modifyIdFormatMutex       sync.RWMutex
	modifyIdFormatArgsForCall []struct {
		arg1 *ec2.ModifyIdFormatInput
	}
	modifyIdFormatReturns struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}
	modifyIdFormatReturnsOnCall map[int]struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}
	ModifyIdFormatRequestStub        func(*ec2.ModifyIdFormatInput) (*request.Request, *ec2.ModifyIdFormatOutput)
	modifyIdFormatRequestMutex       sync.RWMutex
	modifyIdFormatRequestArgsForCall []struct {
		arg1 *ec2.ModifyIdFormatInput
	}
	modifyIdFormatRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyIdFormatOutput
	}
	modifyIdFormatRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyIdFormatOutput
	}
	ModifyIdFormatWithContextStub        func(aws.Context, *ec2.ModifyIdFormatInput, ...request.Option) (*ec2.ModifyIdFormatOutput, error)
	modifyIdFormatWithContextMutex       sync.RWMutex
	modifyIdFormatWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyIdFormatInput
		arg3 []request.Option
	}
	modifyIdFormatWithContextReturns struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}
	modifyIdFormatWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}
	ModifyIdentityIdFormatStub        func(*ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error)
	modifyIdentityIdFormatMutex       sync.RWMutex
	modifyIdentityIdFormatArgsForCall []struct {
		arg1 *ec2.ModifyIdentityIdFormatInput
	}
	modifyIdentityIdFormatReturns struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}
	modifyIdentityIdFormatReturnsOnCall map[int]struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}
	ModifyIdentityIdFormatRequestStub        func(*ec2.ModifyIdentityIdFormatInput) (*request.Request, *ec2.ModifyIdentityIdFormatOutput)
	modifyIdentityIdFormatRequestMutex       sync.RWMutex
	modifyIdentityIdFormatRequestArgsForCall []struct {
		arg1 *ec2.ModifyIdentityIdFormatInput
	}
	modifyIdentityIdFormatRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyIdentityIdFormatOutput
	}
	modifyIdentityIdFormatRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyIdentityIdFormatOutput
	}
	ModifyIdentityIdFormatWithContextStub        func(aws.Context, *ec2.ModifyIdentityIdFormatInput, ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error)
	modifyIdentityIdFormatWithContextMutex       sync.RWMutex
	modifyIdentityIdFormatWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyIdentityIdFormatInput
		arg3 []request.Option
	}
	modifyIdentityIdFormatWithContextReturns struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}
	modifyIdentityIdFormatWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}
	ModifyImageAttributeStub        func(*ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error)
	modifyImageAttributeMutex       sync.RWMutex
	modifyImageAttributeArgsForCall []struct {
		arg1 *ec2.ModifyImageAttributeInput
	}
	modifyImageAttributeReturns struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}
	modifyImageAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}
	ModifyImageAttributeRequestStub        func(*ec2.ModifyImageAttributeInput) (*request.Request, *ec2.ModifyImageAttributeOutput)
	modifyImageAttributeRequestMutex       sync.RWMutex
	modifyImageAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifyImageAttributeInput
	}
	modifyImageAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyImageAttributeOutput
	}
	modifyImageAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyImageAttributeOutput
	}
	ModifyImageAttributeWithContextStub        func(aws.Context, *ec2.ModifyImageAttributeInput, ...request.Option) (*ec2.ModifyImageAttributeOutput, error)
	modifyImageAttributeWithContextMutex       sync.RWMutex
	modifyImageAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyImageAttributeInput
		arg3 []request.Option
	}
	modifyImageAttributeWithContextReturns struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}
	modifyImageAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}
	ModifyInstanceAttributeStub        func(*ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error)
	modifyInstanceAttributeMutex       sync.RWMutex
	modifyInstanceAttributeArgsForCall []struct {
		arg1 *ec2.ModifyInstanceAttributeInput
	}
	modifyInstanceAttributeReturns struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}
	modifyInstanceAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}
	ModifyInstanceAttributeRequestStub        func(*ec2.ModifyInstanceAttributeInput) (*request.Request, *ec2.ModifyInstanceAttributeOutput)
	modifyInstanceAttributeRequestMutex       sync.RWMutex
	modifyInstanceAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifyInstanceAttributeInput
	}
	modifyInstanceAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceAttributeOutput
	}
	modifyInstanceAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceAttributeOutput
	}
	ModifyInstanceAttributeWithContextStub        func(aws.Context, *ec2.ModifyInstanceAttributeInput, ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error)
	modifyInstanceAttributeWithContextMutex       sync.RWMutex
	modifyInstanceAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstanceAttributeInput
		arg3 []request.Option
	}
	modifyInstanceAttributeWithContextReturns struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}
	modifyInstanceAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}
	ModifyInstanceCapacityReservationAttributesStub        func(*ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)
	modifyInstanceCapacityReservationAttributesMutex       sync.RWMutex
	modifyInstanceCapacityReservationAttributesArgsForCall []struct {
		arg1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}
	modifyInstanceCapacityReservationAttributesReturns struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}
	modifyInstanceCapacityReservationAttributesReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}
	ModifyInstanceCapacityReservationAttributesRequestStub        func(*ec2.ModifyInstanceCapacityReservationAttributesInput) (*request.Request, *ec2.ModifyInstanceCapacityReservationAttributesOutput)
	modifyInstanceCapacityReservationAttributesRequestMutex       sync.RWMutex
	modifyInstanceCapacityReservationAttributesRequestArgsForCall []struct {
		arg1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}
	modifyInstanceCapacityReservationAttributesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	}
	modifyInstanceCapacityReservationAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	}
	ModifyInstanceCapacityReservationAttributesWithContextStub        func(aws.Context, *ec2.ModifyInstanceCapacityReservationAttributesInput, ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)
	modifyInstanceCapacityReservationAttributesWithContextMutex       sync.RWMutex
	modifyInstanceCapacityReservationAttributesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstanceCapacityReservationAttributesInput
		arg3 []request.Option
	}
	modifyInstanceCapacityReservationAttributesWithContextReturns struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}
	modifyInstanceCapacityReservationAttributesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}
	ModifyInstanceCreditSpecificationStub        func(*ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error)
	modifyInstanceCreditSpecificationMutex       sync.RWMutex
	modifyInstanceCreditSpecificationArgsForCall []struct {
		arg1 *ec2.ModifyInstanceCreditSpecificationInput
	}
	modifyInstanceCreditSpecificationReturns struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}
	modifyInstanceCreditSpecificationReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}
	ModifyInstanceCreditSpecificationRequestStub        func(*ec2.ModifyInstanceCreditSpecificationInput) (*request.Request, *ec2.ModifyInstanceCreditSpecificationOutput)
	modifyInstanceCreditSpecificationRequestMutex       sync.RWMutex
	modifyInstanceCreditSpecificationRequestArgsForCall []struct {
		arg1 *ec2.ModifyInstanceCreditSpecificationInput
	}
	modifyInstanceCreditSpecificationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCreditSpecificationOutput
	}
	modifyInstanceCreditSpecificationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCreditSpecificationOutput
	}
	ModifyInstanceCreditSpecificationWithContextStub        func(aws.Context, *ec2.ModifyInstanceCreditSpecificationInput, ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error)
	modifyInstanceCreditSpecificationWithContextMutex       sync.RWMutex
	modifyInstanceCreditSpecificationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstanceCreditSpecificationInput
		arg3 []request.Option
	}
	modifyInstanceCreditSpecificationWithContextReturns struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}
	modifyInstanceCreditSpecificationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}
	ModifyInstancePlacementStub        func(*ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error)
	modifyInstancePlacementMutex       sync.RWMutex
	modifyInstancePlacementArgsForCall []struct {
		arg1 *ec2.ModifyInstancePlacementInput
	}
	modifyInstancePlacementReturns struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}
	modifyInstancePlacementReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}
	ModifyInstancePlacementRequestStub        func(*ec2.ModifyInstancePlacementInput) (*request.Request, *ec2.ModifyInstancePlacementOutput)
	modifyInstancePlacementRequestMutex       sync.RWMutex
	modifyInstancePlacementRequestArgsForCall []struct {
		arg1 *ec2.ModifyInstancePlacementInput
	}
	modifyInstancePlacementRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyInstancePlacementOutput
	}
	modifyInstancePlacementRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyInstancePlacementOutput
	}
	ModifyInstancePlacementWithContextStub        func(aws.Context, *ec2.ModifyInstancePlacementInput, ...request.Option) (*ec2.ModifyInstancePlacementOutput, error)
	modifyInstancePlacementWithContextMutex       sync.RWMutex
	modifyInstancePlacementWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstancePlacementInput
		arg3 []request.Option
	}
	modifyInstancePlacementWithContextReturns struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}
	modifyInstancePlacementWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}
	ModifyLaunchTemplateStub        func(*ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error)
	modifyLaunchTemplateMutex       sync.RWMutex
	modifyLaunchTemplateArgsForCall []struct {
		arg1 *ec2.ModifyLaunchTemplateInput
	}
	modifyLaunchTemplateReturns struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}
	modifyLaunchTemplateReturnsOnCall map[int]struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}
	ModifyLaunchTemplateRequestStub        func(*ec2.ModifyLaunchTemplateInput) (*request.Request, *ec2.ModifyLaunchTemplateOutput)
	modifyLaunchTemplateRequestMutex       sync.RWMutex
	modifyLaunchTemplateRequestArgsForCall []struct {
		arg1 *ec2.ModifyLaunchTemplateInput
	}
	modifyLaunchTemplateRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyLaunchTemplateOutput
	}
	modifyLaunchTemplateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyLaunchTemplateOutput
	}
	ModifyLaunchTemplateWithContextStub        func(aws.Context, *ec2.ModifyLaunchTemplateInput, ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error)
	modifyLaunchTemplateWithContextMutex       sync.RWMutex
	modifyLaunchTemplateWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyLaunchTemplateInput
		arg3 []request.Option
	}
	modifyLaunchTemplateWithContextReturns struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}
	modifyLaunchTemplateWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}
	ModifyNetworkInterfaceAttributeStub        func(*ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)
	modifyNetworkInterfaceAttributeMutex       sync.RWMutex
	modifyNetworkInterfaceAttributeArgsForCall []struct {
		arg1 *ec2.ModifyNetworkInterfaceAttributeInput
	}
	modifyNetworkInterfaceAttributeReturns struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}
	modifyNetworkInterfaceAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}
	ModifyNetworkInterfaceAttributeRequestStub        func(*ec2.ModifyNetworkInterfaceAttributeInput) (*request.Request, *ec2.ModifyNetworkInterfaceAttributeOutput)
	modifyNetworkInterfaceAttributeRequestMutex       sync.RWMutex
	modifyNetworkInterfaceAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifyNetworkInterfaceAttributeInput
	}
	modifyNetworkInterfaceAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyNetworkInterfaceAttributeOutput
	}
	modifyNetworkInterfaceAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyNetworkInterfaceAttributeOutput
	}
	ModifyNetworkInterfaceAttributeWithContextStub        func(aws.Context, *ec2.ModifyNetworkInterfaceAttributeInput, ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)
	modifyNetworkInterfaceAttributeWithContextMutex       sync.RWMutex
	modifyNetworkInterfaceAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyNetworkInterfaceAttributeInput
		arg3 []request.Option
	}
	modifyNetworkInterfaceAttributeWithContextReturns struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}
	modifyNetworkInterfaceAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}
	ModifyReservedInstancesStub        func(*ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error)
	modifyReservedInstancesMutex       sync.RWMutex
	modifyReservedInstancesArgsForCall []struct {
		arg1 *ec2.ModifyReservedInstancesInput
	}
	modifyReservedInstancesReturns struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}
	modifyReservedInstancesReturnsOnCall map[int]struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}
	ModifyReservedInstancesRequestStub        func(*ec2.ModifyReservedInstancesInput) (*request.Request, *ec2.ModifyReservedInstancesOutput)
	modifyReservedInstancesRequestMutex       sync.RWMutex
	modifyReservedInstancesRequestArgsForCall []struct {
		arg1 *ec2.ModifyReservedInstancesInput
	}
	modifyReservedInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyReservedInstancesOutput
	}
	modifyReservedInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyReservedInstancesOutput
	}
	ModifyReservedInstancesWithContextStub        func(aws.Context, *ec2.ModifyReservedInstancesInput, ...request.Option) (*ec2.ModifyReservedInstancesOutput, error)
	modifyReservedInstancesWithContextMutex       sync.RWMutex
	modifyReservedInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyReservedInstancesInput
		arg3 []request.Option
	}
	modifyReservedInstancesWithContextReturns struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}
	modifyReservedInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}
	ModifySnapshotAttributeStub        func(*ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error)
	modifySnapshotAttributeMutex       sync.RWMutex
	modifySnapshotAttributeArgsForCall []struct {
		arg1 *ec2.ModifySnapshotAttributeInput
	}
	modifySnapshotAttributeReturns struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}
	modifySnapshotAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}
	ModifySnapshotAttributeRequestStub        func(*ec2.ModifySnapshotAttributeInput) (*request.Request, *ec2.ModifySnapshotAttributeOutput)
	modifySnapshotAttributeRequestMutex       sync.RWMutex
	modifySnapshotAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifySnapshotAttributeInput
	}
	modifySnapshotAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifySnapshotAttributeOutput
	}
	modifySnapshotAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifySnapshotAttributeOutput
	}
	ModifySnapshotAttributeWithContextStub        func(aws.Context, *ec2.ModifySnapshotAttributeInput, ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error)
	modifySnapshotAttributeWithContextMutex       sync.RWMutex
	modifySnapshotAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifySnapshotAttributeInput
		arg3 []request.Option
	}
	modifySnapshotAttributeWithContextReturns struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}
	modifySnapshotAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}
	ModifySpotFleetRequestStub        func(*ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error)
	modifySpotFleetRequestMutex       sync.RWMutex
	modifySpotFleetRequestArgsForCall []struct {
		arg1 *ec2.ModifySpotFleetRequestInput
	}
	modifySpotFleetRequestReturns struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}
	modifySpotFleetRequestReturnsOnCall map[int]struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}
	ModifySpotFleetRequestRequestStub        func(*ec2.ModifySpotFleetRequestInput) (*request.Request, *ec2.ModifySpotFleetRequestOutput)
	modifySpotFleetRequestRequestMutex       sync.RWMutex
	modifySpotFleetRequestRequestArgsForCall []struct {
		arg1 *ec2.ModifySpotFleetRequestInput
	}
	modifySpotFleetRequestRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifySpotFleetRequestOutput
	}
	modifySpotFleetRequestRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifySpotFleetRequestOutput
	}
	ModifySpotFleetRequestWithContextStub        func(aws.Context, *ec2.ModifySpotFleetRequestInput, ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error)
	modifySpotFleetRequestWithContextMutex       sync.RWMutex
	modifySpotFleetRequestWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifySpotFleetRequestInput
		arg3 []request.Option
	}
	modifySpotFleetRequestWithContextReturns struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}
	modifySpotFleetRequestWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}
	ModifySubnetAttributeStub        func(*ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error)
	modifySubnetAttributeMutex       sync.RWMutex
	modifySubnetAttributeArgsForCall []struct {
		arg1 *ec2.ModifySubnetAttributeInput
	}
	modifySubnetAttributeReturns struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}
	modifySubnetAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}
	ModifySubnetAttributeRequestStub        func(*ec2.ModifySubnetAttributeInput) (*request.Request, *ec2.ModifySubnetAttributeOutput)
	modifySubnetAttributeRequestMutex       sync.RWMutex
	modifySubnetAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifySubnetAttributeInput
	}
	modifySubnetAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifySubnetAttributeOutput
	}
	modifySubnetAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifySubnetAttributeOutput
	}
	ModifySubnetAttributeWithContextStub        func(aws.Context, *ec2.ModifySubnetAttributeInput, ...request.Option) (*ec2.ModifySubnetAttributeOutput, error)
	modifySubnetAttributeWithContextMutex       sync.RWMutex
	modifySubnetAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifySubnetAttributeInput
		arg3 []request.Option
	}
	modifySubnetAttributeWithContextReturns struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}
	modifySubnetAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}
	ModifyTransitGatewayVpcAttachmentStub        func(*ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)
	modifyTransitGatewayVpcAttachmentMutex       sync.RWMutex
	modifyTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}
	modifyTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}
	modifyTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}
	ModifyTransitGatewayVpcAttachmentRequestStub        func(*ec2.ModifyTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.ModifyTransitGatewayVpcAttachmentOutput)
	modifyTransitGatewayVpcAttachmentRequestMutex       sync.RWMutex
	modifyTransitGatewayVpcAttachmentRequestArgsForCall []struct {
		arg1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}
	modifyTransitGatewayVpcAttachmentRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	}
	modifyTransitGatewayVpcAttachmentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	}
	ModifyTransitGatewayVpcAttachmentWithContextStub        func(aws.Context, *ec2.ModifyTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)
	modifyTransitGatewayVpcAttachmentWithContextMutex       sync.RWMutex
	modifyTransitGatewayVpcAttachmentWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}
	modifyTransitGatewayVpcAttachmentWithContextReturns struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}
	modifyTransitGatewayVpcAttachmentWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}
	ModifyVolumeStub        func(*ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error)
	modifyVolumeMutex       sync.RWMutex
	modifyVolumeArgsForCall []struct {
		arg1 *ec2.ModifyVolumeInput
	}
	modifyVolumeReturns struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}
	modifyVolumeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}
	ModifyVolumeAttributeStub        func(*ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error)
	modifyVolumeAttributeMutex       sync.RWMutex
	modifyVolumeAttributeArgsForCall []struct {
		arg1 *ec2.ModifyVolumeAttributeInput
	}
	modifyVolumeAttributeReturns struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}
	modifyVolumeAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}
	ModifyVolumeAttributeRequestStub        func(*ec2.ModifyVolumeAttributeInput) (*request.Request, *ec2.ModifyVolumeAttributeOutput)
	modifyVolumeAttributeRequestMutex       sync.RWMutex
	modifyVolumeAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifyVolumeAttributeInput
	}
	modifyVolumeAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeAttributeOutput
	}
	modifyVolumeAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeAttributeOutput
	}
	ModifyVolumeAttributeWithContextStub        func(aws.Context, *ec2.ModifyVolumeAttributeInput, ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error)
	modifyVolumeAttributeWithContextMutex       sync.RWMutex
	modifyVolumeAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVolumeAttributeInput
		arg3 []request.Option
	}
	modifyVolumeAttributeWithContextReturns struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}
	modifyVolumeAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}
	ModifyVolumeRequestStub        func(*ec2.ModifyVolumeInput) (*request.Request, *ec2.ModifyVolumeOutput)
	modifyVolumeRequestMutex       sync.RWMutex
	modifyVolumeRequestArgsForCall []struct {
		arg1 *ec2.ModifyVolumeInput
	}
	modifyVolumeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeOutput
	}
	modifyVolumeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeOutput
	}
	ModifyVolumeWithContextStub        func(aws.Context, *ec2.ModifyVolumeInput, ...request.Option) (*ec2.ModifyVolumeOutput, error)
	modifyVolumeWithContextMutex       sync.RWMutex
	modifyVolumeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVolumeInput
		arg3 []request.Option
	}
	modifyVolumeWithContextReturns struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}
	modifyVolumeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}
	ModifyVpcAttributeStub        func(*ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error)
	modifyVpcAttributeMutex       sync.RWMutex
	modifyVpcAttributeArgsForCall []struct {
		arg1 *ec2.ModifyVpcAttributeInput
	}
	modifyVpcAttributeReturns struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}
	modifyVpcAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}
	ModifyVpcAttributeRequestStub        func(*ec2.ModifyVpcAttributeInput) (*request.Request, *ec2.ModifyVpcAttributeOutput)
	modifyVpcAttributeRequestMutex       sync.RWMutex
	modifyVpcAttributeRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcAttributeInput
	}
	modifyVpcAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcAttributeOutput
	}
	modifyVpcAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcAttributeOutput
	}
	ModifyVpcAttributeWithContextStub        func(aws.Context, *ec2.ModifyVpcAttributeInput, ...request.Option) (*ec2.ModifyVpcAttributeOutput, error)
	modifyVpcAttributeWithContextMutex       sync.RWMutex
	modifyVpcAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcAttributeInput
		arg3 []request.Option
	}
	modifyVpcAttributeWithContextReturns struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}
	modifyVpcAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}
	ModifyVpcEndpointStub        func(*ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error)
	modifyVpcEndpointMutex       sync.RWMutex
	modifyVpcEndpointArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointInput
	}
	modifyVpcEndpointReturns struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}
	modifyVpcEndpointReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}
	ModifyVpcEndpointConnectionNotificationStub        func(*ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)
	modifyVpcEndpointConnectionNotificationMutex       sync.RWMutex
	modifyVpcEndpointConnectionNotificationArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}
	modifyVpcEndpointConnectionNotificationReturns struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}
	modifyVpcEndpointConnectionNotificationReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}
	ModifyVpcEndpointConnectionNotificationRequestStub        func(*ec2.ModifyVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.ModifyVpcEndpointConnectionNotificationOutput)
	modifyVpcEndpointConnectionNotificationRequestMutex       sync.RWMutex
	modifyVpcEndpointConnectionNotificationRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}
	modifyVpcEndpointConnectionNotificationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	}
	modifyVpcEndpointConnectionNotificationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	}
	ModifyVpcEndpointConnectionNotificationWithContextStub        func(aws.Context, *ec2.ModifyVpcEndpointConnectionNotificationInput, ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)
	modifyVpcEndpointConnectionNotificationWithContextMutex       sync.RWMutex
	modifyVpcEndpointConnectionNotificationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointConnectionNotificationInput
		arg3 []request.Option
	}
	modifyVpcEndpointConnectionNotificationWithContextReturns struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}
	modifyVpcEndpointConnectionNotificationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}
	ModifyVpcEndpointRequestStub        func(*ec2.ModifyVpcEndpointInput) (*request.Request, *ec2.ModifyVpcEndpointOutput)
	modifyVpcEndpointRequestMutex       sync.RWMutex
	modifyVpcEndpointRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointInput
	}
	modifyVpcEndpointRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointOutput
	}
	modifyVpcEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointOutput
	}
	ModifyVpcEndpointServiceConfigurationStub        func(*ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)
	modifyVpcEndpointServiceConfigurationMutex       sync.RWMutex
	modifyVpcEndpointServiceConfigurationArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}
	modifyVpcEndpointServiceConfigurationReturns struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}
	modifyVpcEndpointServiceConfigurationReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}
	ModifyVpcEndpointServiceConfigurationRequestStub        func(*ec2.ModifyVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.ModifyVpcEndpointServiceConfigurationOutput)
	modifyVpcEndpointServiceConfigurationRequestMutex       sync.RWMutex
	modifyVpcEndpointServiceConfigurationRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}
	modifyVpcEndpointServiceConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	}
	modifyVpcEndpointServiceConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	}
	ModifyVpcEndpointServiceConfigurationWithContextStub        func(aws.Context, *ec2.ModifyVpcEndpointServiceConfigurationInput, ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)
	modifyVpcEndpointServiceConfigurationWithContextMutex       sync.RWMutex
	modifyVpcEndpointServiceConfigurationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointServiceConfigurationInput
		arg3 []request.Option
	}
	modifyVpcEndpointServiceConfigurationWithContextReturns struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}
	modifyVpcEndpointServiceConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}
	ModifyVpcEndpointServicePermissionsStub        func(*ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)
	modifyVpcEndpointServicePermissionsMutex       sync.RWMutex
	modifyVpcEndpointServicePermissionsArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}
	modifyVpcEndpointServicePermissionsReturns struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}
	modifyVpcEndpointServicePermissionsReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}
	ModifyVpcEndpointServicePermissionsRequestStub        func(*ec2.ModifyVpcEndpointServicePermissionsInput) (*request.Request, *ec2.ModifyVpcEndpointServicePermissionsOutput)
	modifyVpcEndpointServicePermissionsRequestMutex       sync.RWMutex
	modifyVpcEndpointServicePermissionsRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}
	modifyVpcEndpointServicePermissionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServicePermissionsOutput
	}
	modifyVpcEndpointServicePermissionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServicePermissionsOutput
	}
	ModifyVpcEndpointServicePermissionsWithContextStub        func(aws.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)
	modifyVpcEndpointServicePermissionsWithContextMutex       sync.RWMutex
	modifyVpcEndpointServicePermissionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointServicePermissionsInput
		arg3 []request.Option
	}
	modifyVpcEndpointServicePermissionsWithContextReturns struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}
	modifyVpcEndpointServicePermissionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}
	ModifyVpcEndpointWithContextStub        func(aws.Context, *ec2.ModifyVpcEndpointInput, ...request.Option) (*ec2.ModifyVpcEndpointOutput, error)
	modifyVpcEndpointWithContextMutex       sync.RWMutex
	modifyVpcEndpointWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointInput
		arg3 []request.Option
	}
	modifyVpcEndpointWithContextReturns struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}
	modifyVpcEndpointWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}
	ModifyVpcPeeringConnectionOptionsStub        func(*ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)
	modifyVpcPeeringConnectionOptionsMutex       sync.RWMutex
	modifyVpcPeeringConnectionOptionsArgsForCall []struct {
		arg1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}
	modifyVpcPeeringConnectionOptionsReturns struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}
	modifyVpcPeeringConnectionOptionsReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}
	ModifyVpcPeeringConnectionOptionsRequestStub        func(*ec2.ModifyVpcPeeringConnectionOptionsInput) (*request.Request, *ec2.ModifyVpcPeeringConnectionOptionsOutput)
	modifyVpcPeeringConnectionOptionsRequestMutex       sync.RWMutex
	modifyVpcPeeringConnectionOptionsRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}
	modifyVpcPeeringConnectionOptionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	}
	modifyVpcPeeringConnectionOptionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	}
	ModifyVpcPeeringConnectionOptionsWithContextStub        func(aws.Context, *ec2.ModifyVpcPeeringConnectionOptionsInput, ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)
	modifyVpcPeeringConnectionOptionsWithContextMutex       sync.RWMutex
	modifyVpcPeeringConnectionOptionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcPeeringConnectionOptionsInput
		arg3 []request.Option
	}
	modifyVpcPeeringConnectionOptionsWithContextReturns struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}
	modifyVpcPeeringConnectionOptionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}
	ModifyVpcTenancyStub        func(*ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error)
	modifyVpcTenancyMutex       sync.RWMutex
	modifyVpcTenancyArgsForCall []struct {
		arg1 *ec2.ModifyVpcTenancyInput
	}
	modifyVpcTenancyReturns struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}
	modifyVpcTenancyReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}
	ModifyVpcTenancyRequestStub        func(*ec2.ModifyVpcTenancyInput) (*request.Request, *ec2.ModifyVpcTenancyOutput)
	modifyVpcTenancyRequestMutex       sync.RWMutex
	modifyVpcTenancyRequestArgsForCall []struct {
		arg1 *ec2.ModifyVpcTenancyInput
	}
	modifyVpcTenancyRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcTenancyOutput
	}
	modifyVpcTenancyRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcTenancyOutput
	}
	ModifyVpcTenancyWithContextStub        func(aws.Context, *ec2.ModifyVpcTenancyInput, ...request.Option) (*ec2.ModifyVpcTenancyOutput, error)
	modifyVpcTenancyWithContextMutex       sync.RWMutex
	modifyVpcTenancyWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcTenancyInput
		arg3 []request.Option
	}
	modifyVpcTenancyWithContextReturns struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}
	modifyVpcTenancyWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}
	MonitorInstancesStub        func(*ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error)
	monitorInstancesMutex       sync.RWMutex
	monitorInstancesArgsForCall []struct {
		arg1 *ec2.MonitorInstancesInput
	}
	monitorInstancesReturns struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}
	monitorInstancesReturnsOnCall map[int]struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}
	MonitorInstancesRequestStub        func(*ec2.MonitorInstancesInput) (*request.Request, *ec2.MonitorInstancesOutput)
	monitorInstancesRequestMutex       sync.RWMutex
	monitorInstancesRequestArgsForCall []struct {
		arg1 *ec2.MonitorInstancesInput
	}
	monitorInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.MonitorInstancesOutput
	}
	monitorInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.MonitorInstancesOutput
	}
	MonitorInstancesWithContextStub        func(aws.Context, *ec2.MonitorInstancesInput, ...request.Option) (*ec2.MonitorInstancesOutput, error)
	monitorInstancesWithContextMutex       sync.RWMutex
	monitorInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.MonitorInstancesInput
		arg3 []request.Option
	}
	monitorInstancesWithContextReturns struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}
	monitorInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}
	MoveAddressToVpcStub        func(*ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error)
	moveAddressToVpcMutex       sync.RWMutex
	moveAddressToVpcArgsForCall []struct {
		arg1 *ec2.MoveAddressToVpcInput
	}
	moveAddressToVpcReturns struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}
	moveAddressToVpcReturnsOnCall map[int]struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}
	MoveAddressToVpcRequestStub        func(*ec2.MoveAddressToVpcInput) (*request.Request, *ec2.MoveAddressToVpcOutput)
	moveAddressToVpcRequestMutex       sync.RWMutex
	moveAddressToVpcRequestArgsForCall []struct {
		arg1 *ec2.MoveAddressToVpcInput
	}
	moveAddressToVpcRequestReturns struct {
		result1 *request.Request
		result2 *ec2.MoveAddressToVpcOutput
	}
	moveAddressToVpcRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.MoveAddressToVpcOutput
	}
	MoveAddressToVpcWithContextStub        func(aws.Context, *ec2.MoveAddressToVpcInput, ...request.Option) (*ec2.MoveAddressToVpcOutput, error)
	moveAddressToVpcWithContextMutex       sync.RWMutex
	moveAddressToVpcWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.MoveAddressToVpcInput
		arg3 []request.Option
	}
	moveAddressToVpcWithContextReturns struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}
	moveAddressToVpcWithContextReturnsOnCall map[int]struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}
	ProvisionByoipCidrStub        func(*ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error)
	provisionByoipCidrMutex       sync.RWMutex
	provisionByoipCidrArgsForCall []struct {
		arg1 *ec2.ProvisionByoipCidrInput
	}
	provisionByoipCidrReturns struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}
	provisionByoipCidrReturnsOnCall map[int]struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}
	ProvisionByoipCidrRequestStub        func(*ec2.ProvisionByoipCidrInput) (*request.Request, *ec2.ProvisionByoipCidrOutput)
	provisionByoipCidrRequestMutex       sync.RWMutex
	provisionByoipCidrRequestArgsForCall []struct {
		arg1 *ec2.ProvisionByoipCidrInput
	}
	provisionByoipCidrRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ProvisionByoipCidrOutput
	}
	provisionByoipCidrRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ProvisionByoipCidrOutput
	}
	ProvisionByoipCidrWithContextStub        func(aws.Context, *ec2.ProvisionByoipCidrInput, ...request.Option) (*ec2.ProvisionByoipCidrOutput, error)
	provisionByoipCidrWithContextMutex       sync.RWMutex
	provisionByoipCidrWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ProvisionByoipCidrInput
		arg3 []request.Option
	}
	provisionByoipCidrWithContextReturns struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}
	provisionByoipCidrWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}
	PurchaseHostReservationStub        func(*ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error)
	purchaseHostReservationMutex       sync.RWMutex
	purchaseHostReservationArgsForCall []struct {
		arg1 *ec2.PurchaseHostReservationInput
	}
	purchaseHostReservationReturns struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}
	purchaseHostReservationReturnsOnCall map[int]struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}
	PurchaseHostReservationRequestStub        func(*ec2.PurchaseHostReservationInput) (*request.Request, *ec2.PurchaseHostReservationOutput)
	purchaseHostReservationRequestMutex       sync.RWMutex
	purchaseHostReservationRequestArgsForCall []struct {
		arg1 *ec2.PurchaseHostReservationInput
	}
	purchaseHostReservationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.PurchaseHostReservationOutput
	}
	purchaseHostReservationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.PurchaseHostReservationOutput
	}
	PurchaseHostReservationWithContextStub        func(aws.Context, *ec2.PurchaseHostReservationInput, ...request.Option) (*ec2.PurchaseHostReservationOutput, error)
	purchaseHostReservationWithContextMutex       sync.RWMutex
	purchaseHostReservationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.PurchaseHostReservationInput
		arg3 []request.Option
	}
	purchaseHostReservationWithContextReturns struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}
	purchaseHostReservationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}
	PurchaseReservedInstancesOfferingStub        func(*ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error)
	purchaseReservedInstancesOfferingMutex       sync.RWMutex
	purchaseReservedInstancesOfferingArgsForCall []struct {
		arg1 *ec2.PurchaseReservedInstancesOfferingInput
	}
	purchaseReservedInstancesOfferingReturns struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}
	purchaseReservedInstancesOfferingReturnsOnCall map[int]struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}
	PurchaseReservedInstancesOfferingRequestStub        func(*ec2.PurchaseReservedInstancesOfferingInput) (*request.Request, *ec2.PurchaseReservedInstancesOfferingOutput)
	purchaseReservedInstancesOfferingRequestMutex       sync.RWMutex
	purchaseReservedInstancesOfferingRequestArgsForCall []struct {
		arg1 *ec2.PurchaseReservedInstancesOfferingInput
	}
	purchaseReservedInstancesOfferingRequestReturns struct {
		result1 *request.Request
		result2 *ec2.PurchaseReservedInstancesOfferingOutput
	}
	purchaseReservedInstancesOfferingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.PurchaseReservedInstancesOfferingOutput
	}
	PurchaseReservedInstancesOfferingWithContextStub        func(aws.Context, *ec2.PurchaseReservedInstancesOfferingInput, ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error)
	purchaseReservedInstancesOfferingWithContextMutex       sync.RWMutex
	purchaseReservedInstancesOfferingWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.PurchaseReservedInstancesOfferingInput
		arg3 []request.Option
	}
	purchaseReservedInstancesOfferingWithContextReturns struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}
	purchaseReservedInstancesOfferingWithContextReturnsOnCall map[int]struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}
	PurchaseScheduledInstancesStub        func(*ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error)
	purchaseScheduledInstancesMutex       sync.RWMutex
	purchaseScheduledInstancesArgsForCall []struct {
		arg1 *ec2.PurchaseScheduledInstancesInput
	}
	purchaseScheduledInstancesReturns struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}
	purchaseScheduledInstancesReturnsOnCall map[int]struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}
	PurchaseScheduledInstancesRequestStub        func(*ec2.PurchaseScheduledInstancesInput) (*request.Request, *ec2.PurchaseScheduledInstancesOutput)
	purchaseScheduledInstancesRequestMutex       sync.RWMutex
	purchaseScheduledInstancesRequestArgsForCall []struct {
		arg1 *ec2.PurchaseScheduledInstancesInput
	}
	purchaseScheduledInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.PurchaseScheduledInstancesOutput
	}
	purchaseScheduledInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.PurchaseScheduledInstancesOutput
	}
	PurchaseScheduledInstancesWithContextStub        func(aws.Context, *ec2.PurchaseScheduledInstancesInput, ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error)
	purchaseScheduledInstancesWithContextMutex       sync.RWMutex
	purchaseScheduledInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.PurchaseScheduledInstancesInput
		arg3 []request.Option
	}
	purchaseScheduledInstancesWithContextReturns struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}
	purchaseScheduledInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}
	RebootInstancesStub        func(*ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error)
	rebootInstancesMutex       sync.RWMutex
	rebootInstancesArgsForCall []struct {
		arg1 *ec2.RebootInstancesInput
	}
	rebootInstancesReturns struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}
	rebootInstancesReturnsOnCall map[int]struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}
	RebootInstancesRequestStub        func(*ec2.RebootInstancesInput) (*request.Request, *ec2.RebootInstancesOutput)
	rebootInstancesRequestMutex       sync.RWMutex
	rebootInstancesRequestArgsForCall []struct {
		arg1 *ec2.RebootInstancesInput
	}
	rebootInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RebootInstancesOutput
	}
	rebootInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RebootInstancesOutput
	}
	RebootInstancesWithContextStub        func(aws.Context, *ec2.RebootInstancesInput, ...request.Option) (*ec2.RebootInstancesOutput, error)
	rebootInstancesWithContextMutex       sync.RWMutex
	rebootInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RebootInstancesInput
		arg3 []request.Option
	}
	rebootInstancesWithContextReturns struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}
	rebootInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}
	RegisterImageStub        func(*ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error)
	registerImageMutex       sync.RWMutex
	registerImageArgsForCall []struct {
		arg1 *ec2.RegisterImageInput
	}
	registerImageReturns struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}
	registerImageReturnsOnCall map[int]struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}
	RegisterImageRequestStub        func(*ec2.RegisterImageInput) (*request.Request, *ec2.RegisterImageOutput)
	registerImageRequestMutex       sync.RWMutex
	registerImageRequestArgsForCall []struct {
		arg1 *ec2.RegisterImageInput
	}
	registerImageRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RegisterImageOutput
	}
	registerImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RegisterImageOutput
	}
	RegisterImageWithContextStub        func(aws.Context, *ec2.RegisterImageInput, ...request.Option) (*ec2.RegisterImageOutput, error)
	registerImageWithContextMutex       sync.RWMutex
	registerImageWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RegisterImageInput
		arg3 []request.Option
	}
	registerImageWithContextReturns struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}
	registerImageWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}
	RejectTransitGatewayVpcAttachmentStub        func(*ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)
	rejectTransitGatewayVpcAttachmentMutex       sync.RWMutex
	rejectTransitGatewayVpcAttachmentArgsForCall []struct {
		arg1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}
	rejectTransitGatewayVpcAttachmentReturns struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}
	rejectTransitGatewayVpcAttachmentReturnsOnCall map[int]struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}
	RejectTransitGatewayVpcAttachmentRequestStub        func(*ec2.RejectTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayVpcAttachmentOutput)
	rejectTransitGatewayVpcAttachmentRequestMutex       sync.RWMutex
	rejectTransitGatewayVpcAttachmentRequestArgsForCall []struct {
		arg1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}
	rejectTransitGatewayVpcAttachmentRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RejectTransitGatewayVpcAttachmentOutput
	}
	rejectTransitGatewayVpcAttachmentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RejectTransitGatewayVpcAttachmentOutput
	}
	RejectTransitGatewayVpcAttachmentWithContextStub        func(aws.Context, *ec2.RejectTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)
	rejectTransitGatewayVpcAttachmentWithContextMutex       sync.RWMutex
	rejectTransitGatewayVpcAttachmentWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RejectTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}
	rejectTransitGatewayVpcAttachmentWithContextReturns struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}
	rejectTransitGatewayVpcAttachmentWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}
	RejectVpcEndpointConnectionsStub        func(*ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error)
	rejectVpcEndpointConnectionsMutex       sync.RWMutex
	rejectVpcEndpointConnectionsArgsForCall []struct {
		arg1 *ec2.RejectVpcEndpointConnectionsInput
	}
	rejectVpcEndpointConnectionsReturns struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}
	rejectVpcEndpointConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}
	RejectVpcEndpointConnectionsRequestStub        func(*ec2.RejectVpcEndpointConnectionsInput) (*request.Request, *ec2.RejectVpcEndpointConnectionsOutput)
	rejectVpcEndpointConnectionsRequestMutex       sync.RWMutex
	rejectVpcEndpointConnectionsRequestArgsForCall []struct {
		arg1 *ec2.RejectVpcEndpointConnectionsInput
	}
	rejectVpcEndpointConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RejectVpcEndpointConnectionsOutput
	}
	rejectVpcEndpointConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RejectVpcEndpointConnectionsOutput
	}
	RejectVpcEndpointConnectionsWithContextStub        func(aws.Context, *ec2.RejectVpcEndpointConnectionsInput, ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error)
	rejectVpcEndpointConnectionsWithContextMutex       sync.RWMutex
	rejectVpcEndpointConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RejectVpcEndpointConnectionsInput
		arg3 []request.Option
	}
	rejectVpcEndpointConnectionsWithContextReturns struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}
	rejectVpcEndpointConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}
	RejectVpcPeeringConnectionStub        func(*ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error)
	rejectVpcPeeringConnectionMutex       sync.RWMutex
	rejectVpcPeeringConnectionArgsForCall []struct {
		arg1 *ec2.RejectVpcPeeringConnectionInput
	}
	rejectVpcPeeringConnectionReturns struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}
	rejectVpcPeeringConnectionReturnsOnCall map[int]struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}
	RejectVpcPeeringConnectionRequestStub        func(*ec2.RejectVpcPeeringConnectionInput) (*request.Request, *ec2.RejectVpcPeeringConnectionOutput)
	rejectVpcPeeringConnectionRequestMutex       sync.RWMutex
	rejectVpcPeeringConnectionRequestArgsForCall []struct {
		arg1 *ec2.RejectVpcPeeringConnectionInput
	}
	rejectVpcPeeringConnectionRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RejectVpcPeeringConnectionOutput
	}
	rejectVpcPeeringConnectionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RejectVpcPeeringConnectionOutput
	}
	RejectVpcPeeringConnectionWithContextStub        func(aws.Context, *ec2.RejectVpcPeeringConnectionInput, ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error)
	rejectVpcPeeringConnectionWithContextMutex       sync.RWMutex
	rejectVpcPeeringConnectionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RejectVpcPeeringConnectionInput
		arg3 []request.Option
	}
	rejectVpcPeeringConnectionWithContextReturns struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}
	rejectVpcPeeringConnectionWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}
	ReleaseAddressStub        func(*ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error)
	releaseAddressMutex       sync.RWMutex
	releaseAddressArgsForCall []struct {
		arg1 *ec2.ReleaseAddressInput
	}
	releaseAddressReturns struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}
	releaseAddressReturnsOnCall map[int]struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}
	ReleaseAddressRequestStub        func(*ec2.ReleaseAddressInput) (*request.Request, *ec2.ReleaseAddressOutput)
	releaseAddressRequestMutex       sync.RWMutex
	releaseAddressRequestArgsForCall []struct {
		arg1 *ec2.ReleaseAddressInput
	}
	releaseAddressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReleaseAddressOutput
	}
	releaseAddressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReleaseAddressOutput
	}
	ReleaseAddressWithContextStub        func(aws.Context, *ec2.ReleaseAddressInput, ...request.Option) (*ec2.ReleaseAddressOutput, error)
	releaseAddressWithContextMutex       sync.RWMutex
	releaseAddressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReleaseAddressInput
		arg3 []request.Option
	}
	releaseAddressWithContextReturns struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}
	releaseAddressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}
	ReleaseHostsStub        func(*ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error)
	releaseHostsMutex       sync.RWMutex
	releaseHostsArgsForCall []struct {
		arg1 *ec2.ReleaseHostsInput
	}
	releaseHostsReturns struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}
	releaseHostsReturnsOnCall map[int]struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}
	ReleaseHostsRequestStub        func(*ec2.ReleaseHostsInput) (*request.Request, *ec2.ReleaseHostsOutput)
	releaseHostsRequestMutex       sync.RWMutex
	releaseHostsRequestArgsForCall []struct {
		arg1 *ec2.ReleaseHostsInput
	}
	releaseHostsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReleaseHostsOutput
	}
	releaseHostsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReleaseHostsOutput
	}
	ReleaseHostsWithContextStub        func(aws.Context, *ec2.ReleaseHostsInput, ...request.Option) (*ec2.ReleaseHostsOutput, error)
	releaseHostsWithContextMutex       sync.RWMutex
	releaseHostsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReleaseHostsInput
		arg3 []request.Option
	}
	releaseHostsWithContextReturns struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}
	releaseHostsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}
	ReplaceIamInstanceProfileAssociationStub        func(*ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)
	replaceIamInstanceProfileAssociationMutex       sync.RWMutex
	replaceIamInstanceProfileAssociationArgsForCall []struct {
		arg1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}
	replaceIamInstanceProfileAssociationReturns struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}
	replaceIamInstanceProfileAssociationReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}
	ReplaceIamInstanceProfileAssociationRequestStub        func(*ec2.ReplaceIamInstanceProfileAssociationInput) (*request.Request, *ec2.ReplaceIamInstanceProfileAssociationOutput)
	replaceIamInstanceProfileAssociationRequestMutex       sync.RWMutex
	replaceIamInstanceProfileAssociationRequestArgsForCall []struct {
		arg1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}
	replaceIamInstanceProfileAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReplaceIamInstanceProfileAssociationOutput
	}
	replaceIamInstanceProfileAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReplaceIamInstanceProfileAssociationOutput
	}
	ReplaceIamInstanceProfileAssociationWithContextStub        func(aws.Context, *ec2.ReplaceIamInstanceProfileAssociationInput, ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)
	replaceIamInstanceProfileAssociationWithContextMutex       sync.RWMutex
	replaceIamInstanceProfileAssociationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceIamInstanceProfileAssociationInput
		arg3 []request.Option
	}
	replaceIamInstanceProfileAssociationWithContextReturns struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}
	replaceIamInstanceProfileAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}
	ReplaceNetworkAclAssociationStub        func(*ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error)
	replaceNetworkAclAssociationMutex       sync.RWMutex
	replaceNetworkAclAssociationArgsForCall []struct {
		arg1 *ec2.ReplaceNetworkAclAssociationInput
	}
	replaceNetworkAclAssociationReturns struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}
	replaceNetworkAclAssociationReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}
	ReplaceNetworkAclAssociationRequestStub        func(*ec2.ReplaceNetworkAclAssociationInput) (*request.Request, *ec2.ReplaceNetworkAclAssociationOutput)
	replaceNetworkAclAssociationRequestMutex       sync.RWMutex
	replaceNetworkAclAssociationRequestArgsForCall []struct {
		arg1 *ec2.ReplaceNetworkAclAssociationInput
	}
	replaceNetworkAclAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclAssociationOutput
	}
	replaceNetworkAclAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclAssociationOutput
	}
	ReplaceNetworkAclAssociationWithContextStub        func(aws.Context, *ec2.ReplaceNetworkAclAssociationInput, ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error)
	replaceNetworkAclAssociationWithContextMutex       sync.RWMutex
	replaceNetworkAclAssociationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceNetworkAclAssociationInput
		arg3 []request.Option
	}
	replaceNetworkAclAssociationWithContextReturns struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}
	replaceNetworkAclAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}
	ReplaceNetworkAclEntryStub        func(*ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error)
	replaceNetworkAclEntryMutex       sync.RWMutex
	replaceNetworkAclEntryArgsForCall []struct {
		arg1 *ec2.ReplaceNetworkAclEntryInput
	}
	replaceNetworkAclEntryReturns struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}
	replaceNetworkAclEntryReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}
	ReplaceNetworkAclEntryRequestStub        func(*ec2.ReplaceNetworkAclEntryInput) (*request.Request, *ec2.ReplaceNetworkAclEntryOutput)
	replaceNetworkAclEntryRequestMutex       sync.RWMutex
	replaceNetworkAclEntryRequestArgsForCall []struct {
		arg1 *ec2.ReplaceNetworkAclEntryInput
	}
	replaceNetworkAclEntryRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclEntryOutput
	}
	replaceNetworkAclEntryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclEntryOutput
	}
	ReplaceNetworkAclEntryWithContextStub        func(aws.Context, *ec2.ReplaceNetworkAclEntryInput, ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error)
	replaceNetworkAclEntryWithContextMutex       sync.RWMutex
	replaceNetworkAclEntryWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceNetworkAclEntryInput
		arg3 []request.Option
	}
	replaceNetworkAclEntryWithContextReturns struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}
	replaceNetworkAclEntryWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}
	ReplaceRouteStub        func(*ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error)
	replaceRouteMutex       sync.RWMutex
	replaceRouteArgsForCall []struct {
		arg1 *ec2.ReplaceRouteInput
	}
	replaceRouteReturns struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}
	replaceRouteReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}
	ReplaceRouteRequestStub        func(*ec2.ReplaceRouteInput) (*request.Request, *ec2.ReplaceRouteOutput)
	replaceRouteRequestMutex       sync.RWMutex
	replaceRouteRequestArgsForCall []struct {
		arg1 *ec2.ReplaceRouteInput
	}
	replaceRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteOutput
	}
	replaceRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteOutput
	}
	ReplaceRouteTableAssociationStub        func(*ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error)
	replaceRouteTableAssociationMutex       sync.RWMutex
	replaceRouteTableAssociationArgsForCall []struct {
		arg1 *ec2.ReplaceRouteTableAssociationInput
	}
	replaceRouteTableAssociationReturns struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}
	replaceRouteTableAssociationReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}
	ReplaceRouteTableAssociationRequestStub        func(*ec2.ReplaceRouteTableAssociationInput) (*request.Request, *ec2.ReplaceRouteTableAssociationOutput)
	replaceRouteTableAssociationRequestMutex       sync.RWMutex
	replaceRouteTableAssociationRequestArgsForCall []struct {
		arg1 *ec2.ReplaceRouteTableAssociationInput
	}
	replaceRouteTableAssociationRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteTableAssociationOutput
	}
	replaceRouteTableAssociationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteTableAssociationOutput
	}
	ReplaceRouteTableAssociationWithContextStub        func(aws.Context, *ec2.ReplaceRouteTableAssociationInput, ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error)
	replaceRouteTableAssociationWithContextMutex       sync.RWMutex
	replaceRouteTableAssociationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceRouteTableAssociationInput
		arg3 []request.Option
	}
	replaceRouteTableAssociationWithContextReturns struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}
	replaceRouteTableAssociationWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}
	ReplaceRouteWithContextStub        func(aws.Context, *ec2.ReplaceRouteInput, ...request.Option) (*ec2.ReplaceRouteOutput, error)
	replaceRouteWithContextMutex       sync.RWMutex
	replaceRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceRouteInput
		arg3 []request.Option
	}
	replaceRouteWithContextReturns struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}
	replaceRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}
	ReplaceTransitGatewayRouteStub        func(*ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error)
	replaceTransitGatewayRouteMutex       sync.RWMutex
	replaceTransitGatewayRouteArgsForCall []struct {
		arg1 *ec2.ReplaceTransitGatewayRouteInput
	}
	replaceTransitGatewayRouteReturns struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}
	replaceTransitGatewayRouteReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}
	ReplaceTransitGatewayRouteRequestStub        func(*ec2.ReplaceTransitGatewayRouteInput) (*request.Request, *ec2.ReplaceTransitGatewayRouteOutput)
	replaceTransitGatewayRouteRequestMutex       sync.RWMutex
	replaceTransitGatewayRouteRequestArgsForCall []struct {
		arg1 *ec2.ReplaceTransitGatewayRouteInput
	}
	replaceTransitGatewayRouteRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReplaceTransitGatewayRouteOutput
	}
	replaceTransitGatewayRouteRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReplaceTransitGatewayRouteOutput
	}
	ReplaceTransitGatewayRouteWithContextStub        func(aws.Context, *ec2.ReplaceTransitGatewayRouteInput, ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error)
	replaceTransitGatewayRouteWithContextMutex       sync.RWMutex
	replaceTransitGatewayRouteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceTransitGatewayRouteInput
		arg3 []request.Option
	}
	replaceTransitGatewayRouteWithContextReturns struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}
	replaceTransitGatewayRouteWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}
	ReportInstanceStatusStub        func(*ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error)
	reportInstanceStatusMutex       sync.RWMutex
	reportInstanceStatusArgsForCall []struct {
		arg1 *ec2.ReportInstanceStatusInput
	}
	reportInstanceStatusReturns struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}
	reportInstanceStatusReturnsOnCall map[int]struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}
	ReportInstanceStatusRequestStub        func(*ec2.ReportInstanceStatusInput) (*request.Request, *ec2.ReportInstanceStatusOutput)
	reportInstanceStatusRequestMutex       sync.RWMutex
	reportInstanceStatusRequestArgsForCall []struct {
		arg1 *ec2.ReportInstanceStatusInput
	}
	reportInstanceStatusRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ReportInstanceStatusOutput
	}
	reportInstanceStatusRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ReportInstanceStatusOutput
	}
	ReportInstanceStatusWithContextStub        func(aws.Context, *ec2.ReportInstanceStatusInput, ...request.Option) (*ec2.ReportInstanceStatusOutput, error)
	reportInstanceStatusWithContextMutex       sync.RWMutex
	reportInstanceStatusWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ReportInstanceStatusInput
		arg3 []request.Option
	}
	reportInstanceStatusWithContextReturns struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}
	reportInstanceStatusWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}
	RequestSpotFleetStub        func(*ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error)
	requestSpotFleetMutex       sync.RWMutex
	requestSpotFleetArgsForCall []struct {
		arg1 *ec2.RequestSpotFleetInput
	}
	requestSpotFleetReturns struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}
	requestSpotFleetReturnsOnCall map[int]struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}
	RequestSpotFleetRequestStub        func(*ec2.RequestSpotFleetInput) (*request.Request, *ec2.RequestSpotFleetOutput)
	requestSpotFleetRequestMutex       sync.RWMutex
	requestSpotFleetRequestArgsForCall []struct {
		arg1 *ec2.RequestSpotFleetInput
	}
	requestSpotFleetRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RequestSpotFleetOutput
	}
	requestSpotFleetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RequestSpotFleetOutput
	}
	RequestSpotFleetWithContextStub        func(aws.Context, *ec2.RequestSpotFleetInput, ...request.Option) (*ec2.RequestSpotFleetOutput, error)
	requestSpotFleetWithContextMutex       sync.RWMutex
	requestSpotFleetWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RequestSpotFleetInput
		arg3 []request.Option
	}
	requestSpotFleetWithContextReturns struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}
	requestSpotFleetWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}
	RequestSpotInstancesStub        func(*ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error)
	requestSpotInstancesMutex       sync.RWMutex
	requestSpotInstancesArgsForCall []struct {
		arg1 *ec2.RequestSpotInstancesInput
	}
	requestSpotInstancesReturns struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}
	requestSpotInstancesReturnsOnCall map[int]struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}
	RequestSpotInstancesRequestStub        func(*ec2.RequestSpotInstancesInput) (*request.Request, *ec2.RequestSpotInstancesOutput)
	requestSpotInstancesRequestMutex       sync.RWMutex
	requestSpotInstancesRequestArgsForCall []struct {
		arg1 *ec2.RequestSpotInstancesInput
	}
	requestSpotInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RequestSpotInstancesOutput
	}
	requestSpotInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RequestSpotInstancesOutput
	}
	RequestSpotInstancesWithContextStub        func(aws.Context, *ec2.RequestSpotInstancesInput, ...request.Option) (*ec2.RequestSpotInstancesOutput, error)
	requestSpotInstancesWithContextMutex       sync.RWMutex
	requestSpotInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RequestSpotInstancesInput
		arg3 []request.Option
	}
	requestSpotInstancesWithContextReturns struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}
	requestSpotInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}
	ResetFpgaImageAttributeStub        func(*ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error)
	resetFpgaImageAttributeMutex       sync.RWMutex
	resetFpgaImageAttributeArgsForCall []struct {
		arg1 *ec2.ResetFpgaImageAttributeInput
	}
	resetFpgaImageAttributeReturns struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}
	resetFpgaImageAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}
	ResetFpgaImageAttributeRequestStub        func(*ec2.ResetFpgaImageAttributeInput) (*request.Request, *ec2.ResetFpgaImageAttributeOutput)
	resetFpgaImageAttributeRequestMutex       sync.RWMutex
	resetFpgaImageAttributeRequestArgsForCall []struct {
		arg1 *ec2.ResetFpgaImageAttributeInput
	}
	resetFpgaImageAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ResetFpgaImageAttributeOutput
	}
	resetFpgaImageAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ResetFpgaImageAttributeOutput
	}
	ResetFpgaImageAttributeWithContextStub        func(aws.Context, *ec2.ResetFpgaImageAttributeInput, ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error)
	resetFpgaImageAttributeWithContextMutex       sync.RWMutex
	resetFpgaImageAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ResetFpgaImageAttributeInput
		arg3 []request.Option
	}
	resetFpgaImageAttributeWithContextReturns struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}
	resetFpgaImageAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}
	ResetImageAttributeStub        func(*ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error)
	resetImageAttributeMutex       sync.RWMutex
	resetImageAttributeArgsForCall []struct {
		arg1 *ec2.ResetImageAttributeInput
	}
	resetImageAttributeReturns struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}
	resetImageAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}
	ResetImageAttributeRequestStub        func(*ec2.ResetImageAttributeInput) (*request.Request, *ec2.ResetImageAttributeOutput)
	resetImageAttributeRequestMutex       sync.RWMutex
	resetImageAttributeRequestArgsForCall []struct {
		arg1 *ec2.ResetImageAttributeInput
	}
	resetImageAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ResetImageAttributeOutput
	}
	resetImageAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ResetImageAttributeOutput
	}
	ResetImageAttributeWithContextStub        func(aws.Context, *ec2.ResetImageAttributeInput, ...request.Option) (*ec2.ResetImageAttributeOutput, error)
	resetImageAttributeWithContextMutex       sync.RWMutex
	resetImageAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ResetImageAttributeInput
		arg3 []request.Option
	}
	resetImageAttributeWithContextReturns struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}
	resetImageAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}
	ResetInstanceAttributeStub        func(*ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error)
	resetInstanceAttributeMutex       sync.RWMutex
	resetInstanceAttributeArgsForCall []struct {
		arg1 *ec2.ResetInstanceAttributeInput
	}
	resetInstanceAttributeReturns struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}
	resetInstanceAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}
	ResetInstanceAttributeRequestStub        func(*ec2.ResetInstanceAttributeInput) (*request.Request, *ec2.ResetInstanceAttributeOutput)
	resetInstanceAttributeRequestMutex       sync.RWMutex
	resetInstanceAttributeRequestArgsForCall []struct {
		arg1 *ec2.ResetInstanceAttributeInput
	}
	resetInstanceAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ResetInstanceAttributeOutput
	}
	resetInstanceAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ResetInstanceAttributeOutput
	}
	ResetInstanceAttributeWithContextStub        func(aws.Context, *ec2.ResetInstanceAttributeInput, ...request.Option) (*ec2.ResetInstanceAttributeOutput, error)
	resetInstanceAttributeWithContextMutex       sync.RWMutex
	resetInstanceAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ResetInstanceAttributeInput
		arg3 []request.Option
	}
	resetInstanceAttributeWithContextReturns struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}
	resetInstanceAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}
	ResetNetworkInterfaceAttributeStub        func(*ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error)
	resetNetworkInterfaceAttributeMutex       sync.RWMutex
	resetNetworkInterfaceAttributeArgsForCall []struct {
		arg1 *ec2.ResetNetworkInterfaceAttributeInput
	}
	resetNetworkInterfaceAttributeReturns struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}
	resetNetworkInterfaceAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}
	ResetNetworkInterfaceAttributeRequestStub        func(*ec2.ResetNetworkInterfaceAttributeInput) (*request.Request, *ec2.ResetNetworkInterfaceAttributeOutput)
	resetNetworkInterfaceAttributeRequestMutex       sync.RWMutex
	resetNetworkInterfaceAttributeRequestArgsForCall []struct {
		arg1 *ec2.ResetNetworkInterfaceAttributeInput
	}
	resetNetworkInterfaceAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ResetNetworkInterfaceAttributeOutput
	}
	resetNetworkInterfaceAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ResetNetworkInterfaceAttributeOutput
	}
	ResetNetworkInterfaceAttributeWithContextStub        func(aws.Context, *ec2.ResetNetworkInterfaceAttributeInput, ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error)
	resetNetworkInterfaceAttributeWithContextMutex       sync.RWMutex
	resetNetworkInterfaceAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ResetNetworkInterfaceAttributeInput
		arg3 []request.Option
	}
	resetNetworkInterfaceAttributeWithContextReturns struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}
	resetNetworkInterfaceAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}
	ResetSnapshotAttributeStub        func(*ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error)
	resetSnapshotAttributeMutex       sync.RWMutex
	resetSnapshotAttributeArgsForCall []struct {
		arg1 *ec2.ResetSnapshotAttributeInput
	}
	resetSnapshotAttributeReturns struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}
	resetSnapshotAttributeReturnsOnCall map[int]struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}
	ResetSnapshotAttributeRequestStub        func(*ec2.ResetSnapshotAttributeInput) (*request.Request, *ec2.ResetSnapshotAttributeOutput)
	resetSnapshotAttributeRequestMutex       sync.RWMutex
	resetSnapshotAttributeRequestArgsForCall []struct {
		arg1 *ec2.ResetSnapshotAttributeInput
	}
	resetSnapshotAttributeRequestReturns struct {
		result1 *request.Request
		result2 *ec2.ResetSnapshotAttributeOutput
	}
	resetSnapshotAttributeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.ResetSnapshotAttributeOutput
	}
	ResetSnapshotAttributeWithContextStub        func(aws.Context, *ec2.ResetSnapshotAttributeInput, ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error)
	resetSnapshotAttributeWithContextMutex       sync.RWMutex
	resetSnapshotAttributeWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.ResetSnapshotAttributeInput
		arg3 []request.Option
	}
	resetSnapshotAttributeWithContextReturns struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}
	resetSnapshotAttributeWithContextReturnsOnCall map[int]struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}
	RestoreAddressToClassicStub        func(*ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error)
	restoreAddressToClassicMutex       sync.RWMutex
	restoreAddressToClassicArgsForCall []struct {
		arg1 *ec2.RestoreAddressToClassicInput
	}
	restoreAddressToClassicReturns struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}
	restoreAddressToClassicReturnsOnCall map[int]struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}
	RestoreAddressToClassicRequestStub        func(*ec2.RestoreAddressToClassicInput) (*request.Request, *ec2.RestoreAddressToClassicOutput)
	restoreAddressToClassicRequestMutex       sync.RWMutex
	restoreAddressToClassicRequestArgsForCall []struct {
		arg1 *ec2.RestoreAddressToClassicInput
	}
	restoreAddressToClassicRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RestoreAddressToClassicOutput
	}
	restoreAddressToClassicRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RestoreAddressToClassicOutput
	}
	RestoreAddressToClassicWithContextStub        func(aws.Context, *ec2.RestoreAddressToClassicInput, ...request.Option) (*ec2.RestoreAddressToClassicOutput, error)
	restoreAddressToClassicWithContextMutex       sync.RWMutex
	restoreAddressToClassicWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RestoreAddressToClassicInput
		arg3 []request.Option
	}
	restoreAddressToClassicWithContextReturns struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}
	restoreAddressToClassicWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}
	RevokeClientVpnIngressStub        func(*ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error)
	revokeClientVpnIngressMutex       sync.RWMutex
	revokeClientVpnIngressArgsForCall []struct {
		arg1 *ec2.RevokeClientVpnIngressInput
	}
	revokeClientVpnIngressReturns struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}
	revokeClientVpnIngressReturnsOnCall map[int]struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}
	RevokeClientVpnIngressRequestStub        func(*ec2.RevokeClientVpnIngressInput) (*request.Request, *ec2.RevokeClientVpnIngressOutput)
	revokeClientVpnIngressRequestMutex       sync.RWMutex
	revokeClientVpnIngressRequestArgsForCall []struct {
		arg1 *ec2.RevokeClientVpnIngressInput
	}
	revokeClientVpnIngressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RevokeClientVpnIngressOutput
	}
	revokeClientVpnIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RevokeClientVpnIngressOutput
	}
	RevokeClientVpnIngressWithContextStub        func(aws.Context, *ec2.RevokeClientVpnIngressInput, ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error)
	revokeClientVpnIngressWithContextMutex       sync.RWMutex
	revokeClientVpnIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RevokeClientVpnIngressInput
		arg3 []request.Option
	}
	revokeClientVpnIngressWithContextReturns struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}
	revokeClientVpnIngressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}
	RevokeSecurityGroupEgressStub        func(*ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error)
	revokeSecurityGroupEgressMutex       sync.RWMutex
	revokeSecurityGroupEgressArgsForCall []struct {
		arg1 *ec2.RevokeSecurityGroupEgressInput
	}
	revokeSecurityGroupEgressReturns struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}
	revokeSecurityGroupEgressReturnsOnCall map[int]struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}
	RevokeSecurityGroupEgressRequestStub        func(*ec2.RevokeSecurityGroupEgressInput) (*request.Request, *ec2.RevokeSecurityGroupEgressOutput)
	revokeSecurityGroupEgressRequestMutex       sync.RWMutex
	revokeSecurityGroupEgressRequestArgsForCall []struct {
		arg1 *ec2.RevokeSecurityGroupEgressInput
	}
	revokeSecurityGroupEgressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupEgressOutput
	}
	revokeSecurityGroupEgressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupEgressOutput
	}
	RevokeSecurityGroupEgressWithContextStub        func(aws.Context, *ec2.RevokeSecurityGroupEgressInput, ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error)
	revokeSecurityGroupEgressWithContextMutex       sync.RWMutex
	revokeSecurityGroupEgressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RevokeSecurityGroupEgressInput
		arg3 []request.Option
	}
	revokeSecurityGroupEgressWithContextReturns struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}
	revokeSecurityGroupEgressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}
	RevokeSecurityGroupIngressStub        func(*ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error)
	revokeSecurityGroupIngressMutex       sync.RWMutex
	revokeSecurityGroupIngressArgsForCall []struct {
		arg1 *ec2.RevokeSecurityGroupIngressInput
	}
	revokeSecurityGroupIngressReturns struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}
	revokeSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}
	RevokeSecurityGroupIngressRequestStub        func(*ec2.RevokeSecurityGroupIngressInput) (*request.Request, *ec2.RevokeSecurityGroupIngressOutput)
	revokeSecurityGroupIngressRequestMutex       sync.RWMutex
	revokeSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *ec2.RevokeSecurityGroupIngressInput
	}
	revokeSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupIngressOutput
	}
	revokeSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupIngressOutput
	}
	RevokeSecurityGroupIngressWithContextStub        func(aws.Context, *ec2.RevokeSecurityGroupIngressInput, ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error)
	revokeSecurityGroupIngressWithContextMutex       sync.RWMutex
	revokeSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RevokeSecurityGroupIngressInput
		arg3 []request.Option
	}
	revokeSecurityGroupIngressWithContextReturns struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}
	revokeSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}
	RunInstancesStub        func(*ec2.RunInstancesInput) (*ec2.Reservation, error)
	runInstancesMutex       sync.RWMutex
	runInstancesArgsForCall []struct {
		arg1 *ec2.RunInstancesInput
	}
	runInstancesReturns struct {
		result1 *ec2.Reservation
		result2 error
	}
	runInstancesReturnsOnCall map[int]struct {
		result1 *ec2.Reservation
		result2 error
	}
	RunInstancesRequestStub        func(*ec2.RunInstancesInput) (*request.Request, *ec2.Reservation)
	runInstancesRequestMutex       sync.RWMutex
	runInstancesRequestArgsForCall []struct {
		arg1 *ec2.RunInstancesInput
	}
	runInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.Reservation
	}
	runInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.Reservation
	}
	RunInstancesWithContextStub        func(aws.Context, *ec2.RunInstancesInput, ...request.Option) (*ec2.Reservation, error)
	runInstancesWithContextMutex       sync.RWMutex
	runInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RunInstancesInput
		arg3 []request.Option
	}
	runInstancesWithContextReturns struct {
		result1 *ec2.Reservation
		result2 error
	}
	runInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.Reservation
		result2 error
	}
	RunScheduledInstancesStub        func(*ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error)
	runScheduledInstancesMutex       sync.RWMutex
	runScheduledInstancesArgsForCall []struct {
		arg1 *ec2.RunScheduledInstancesInput
	}
	runScheduledInstancesReturns struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}
	runScheduledInstancesReturnsOnCall map[int]struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}
	RunScheduledInstancesRequestStub        func(*ec2.RunScheduledInstancesInput) (*request.Request, *ec2.RunScheduledInstancesOutput)
	runScheduledInstancesRequestMutex       sync.RWMutex
	runScheduledInstancesRequestArgsForCall []struct {
		arg1 *ec2.RunScheduledInstancesInput
	}
	runScheduledInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.RunScheduledInstancesOutput
	}
	runScheduledInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.RunScheduledInstancesOutput
	}
	RunScheduledInstancesWithContextStub        func(aws.Context, *ec2.RunScheduledInstancesInput, ...request.Option) (*ec2.RunScheduledInstancesOutput, error)
	runScheduledInstancesWithContextMutex       sync.RWMutex
	runScheduledInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.RunScheduledInstancesInput
		arg3 []request.Option
	}
	runScheduledInstancesWithContextReturns struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}
	runScheduledInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}
	SearchTransitGatewayRoutesStub        func(*ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)
	searchTransitGatewayRoutesMutex       sync.RWMutex
	searchTransitGatewayRoutesArgsForCall []struct {
		arg1 *ec2.SearchTransitGatewayRoutesInput
	}
	searchTransitGatewayRoutesReturns struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}
	searchTransitGatewayRoutesReturnsOnCall map[int]struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}
	SearchTransitGatewayRoutesRequestStub        func(*ec2.SearchTransitGatewayRoutesInput) (*request.Request, *ec2.SearchTransitGatewayRoutesOutput)
	searchTransitGatewayRoutesRequestMutex       sync.RWMutex
	searchTransitGatewayRoutesRequestArgsForCall []struct {
		arg1 *ec2.SearchTransitGatewayRoutesInput
	}
	searchTransitGatewayRoutesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.SearchTransitGatewayRoutesOutput
	}
	searchTransitGatewayRoutesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.SearchTransitGatewayRoutesOutput
	}
	SearchTransitGatewayRoutesWithContextStub        func(aws.Context, *ec2.SearchTransitGatewayRoutesInput, ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error)
	searchTransitGatewayRoutesWithContextMutex       sync.RWMutex
	searchTransitGatewayRoutesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.SearchTransitGatewayRoutesInput
		arg3 []request.Option
	}
	searchTransitGatewayRoutesWithContextReturns struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}
	searchTransitGatewayRoutesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}
	StartInstancesStub        func(*ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error)
	startInstancesMutex       sync.RWMutex
	startInstancesArgsForCall []struct {
		arg1 *ec2.StartInstancesInput
	}
	startInstancesReturns struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}
	startInstancesReturnsOnCall map[int]struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}
	StartInstancesRequestStub        func(*ec2.StartInstancesInput) (*request.Request, *ec2.StartInstancesOutput)
	startInstancesRequestMutex       sync.RWMutex
	startInstancesRequestArgsForCall []struct {
		arg1 *ec2.StartInstancesInput
	}
	startInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.StartInstancesOutput
	}
	startInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.StartInstancesOutput
	}
	StartInstancesWithContextStub        func(aws.Context, *ec2.StartInstancesInput, ...request.Option) (*ec2.StartInstancesOutput, error)
	startInstancesWithContextMutex       sync.RWMutex
	startInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.StartInstancesInput
		arg3 []request.Option
	}
	startInstancesWithContextReturns struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}
	startInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}
	StopInstancesStub        func(*ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error)
	stopInstancesMutex       sync.RWMutex
	stopInstancesArgsForCall []struct {
		arg1 *ec2.StopInstancesInput
	}
	stopInstancesReturns struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}
	stopInstancesReturnsOnCall map[int]struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}
	StopInstancesRequestStub        func(*ec2.StopInstancesInput) (*request.Request, *ec2.StopInstancesOutput)
	stopInstancesRequestMutex       sync.RWMutex
	stopInstancesRequestArgsForCall []struct {
		arg1 *ec2.StopInstancesInput
	}
	stopInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.StopInstancesOutput
	}
	stopInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.StopInstancesOutput
	}
	StopInstancesWithContextStub        func(aws.Context, *ec2.StopInstancesInput, ...request.Option) (*ec2.StopInstancesOutput, error)
	stopInstancesWithContextMutex       sync.RWMutex
	stopInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.StopInstancesInput
		arg3 []request.Option
	}
	stopInstancesWithContextReturns struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}
	stopInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}
	TerminateClientVpnConnectionsStub        func(*ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error)
	terminateClientVpnConnectionsMutex       sync.RWMutex
	terminateClientVpnConnectionsArgsForCall []struct {
		arg1 *ec2.TerminateClientVpnConnectionsInput
	}
	terminateClientVpnConnectionsReturns struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}
	terminateClientVpnConnectionsReturnsOnCall map[int]struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}
	TerminateClientVpnConnectionsRequestStub        func(*ec2.TerminateClientVpnConnectionsInput) (*request.Request, *ec2.TerminateClientVpnConnectionsOutput)
	terminateClientVpnConnectionsRequestMutex       sync.RWMutex
	terminateClientVpnConnectionsRequestArgsForCall []struct {
		arg1 *ec2.TerminateClientVpnConnectionsInput
	}
	terminateClientVpnConnectionsRequestReturns struct {
		result1 *request.Request
		result2 *ec2.TerminateClientVpnConnectionsOutput
	}
	terminateClientVpnConnectionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.TerminateClientVpnConnectionsOutput
	}
	TerminateClientVpnConnectionsWithContextStub        func(aws.Context, *ec2.TerminateClientVpnConnectionsInput, ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error)
	terminateClientVpnConnectionsWithContextMutex       sync.RWMutex
	terminateClientVpnConnectionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.TerminateClientVpnConnectionsInput
		arg3 []request.Option
	}
	terminateClientVpnConnectionsWithContextReturns struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}
	terminateClientVpnConnectionsWithContextReturnsOnCall map[int]struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}
	TerminateInstancesStub        func(*ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)
	terminateInstancesMutex       sync.RWMutex
	terminateInstancesArgsForCall []struct {
		arg1 *ec2.TerminateInstancesInput
	}
	terminateInstancesReturns struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}
	terminateInstancesReturnsOnCall map[int]struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}
	TerminateInstancesRequestStub        func(*ec2.TerminateInstancesInput) (*request.Request, *ec2.TerminateInstancesOutput)
	terminateInstancesRequestMutex       sync.RWMutex
	terminateInstancesRequestArgsForCall []struct {
		arg1 *ec2.TerminateInstancesInput
	}
	terminateInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.TerminateInstancesOutput
	}
	terminateInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.TerminateInstancesOutput
	}
	TerminateInstancesWithContextStub        func(aws.Context, *ec2.TerminateInstancesInput, ...request.Option) (*ec2.TerminateInstancesOutput, error)
	terminateInstancesWithContextMutex       sync.RWMutex
	terminateInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.TerminateInstancesInput
		arg3 []request.Option
	}
	terminateInstancesWithContextReturns struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}
	terminateInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}
	UnassignIpv6AddressesStub        func(*ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error)
	unassignIpv6AddressesMutex       sync.RWMutex
	unassignIpv6AddressesArgsForCall []struct {
		arg1 *ec2.UnassignIpv6AddressesInput
	}
	unassignIpv6AddressesReturns struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}
	unassignIpv6AddressesReturnsOnCall map[int]struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}
	UnassignIpv6AddressesRequestStub        func(*ec2.UnassignIpv6AddressesInput) (*request.Request, *ec2.UnassignIpv6AddressesOutput)
	unassignIpv6AddressesRequestMutex       sync.RWMutex
	unassignIpv6AddressesRequestArgsForCall []struct {
		arg1 *ec2.UnassignIpv6AddressesInput
	}
	unassignIpv6AddressesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.UnassignIpv6AddressesOutput
	}
	unassignIpv6AddressesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.UnassignIpv6AddressesOutput
	}
	UnassignIpv6AddressesWithContextStub        func(aws.Context, *ec2.UnassignIpv6AddressesInput, ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error)
	unassignIpv6AddressesWithContextMutex       sync.RWMutex
	unassignIpv6AddressesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.UnassignIpv6AddressesInput
		arg3 []request.Option
	}
	unassignIpv6AddressesWithContextReturns struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}
	unassignIpv6AddressesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}
	UnassignPrivateIpAddressesStub        func(*ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error)
	unassignPrivateIpAddressesMutex       sync.RWMutex
	unassignPrivateIpAddressesArgsForCall []struct {
		arg1 *ec2.UnassignPrivateIpAddressesInput
	}
	unassignPrivateIpAddressesReturns struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}
	unassignPrivateIpAddressesReturnsOnCall map[int]struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}
	UnassignPrivateIpAddressesRequestStub        func(*ec2.UnassignPrivateIpAddressesInput) (*request.Request, *ec2.UnassignPrivateIpAddressesOutput)
	unassignPrivateIpAddressesRequestMutex       sync.RWMutex
	unassignPrivateIpAddressesRequestArgsForCall []struct {
		arg1 *ec2.UnassignPrivateIpAddressesInput
	}
	unassignPrivateIpAddressesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.UnassignPrivateIpAddressesOutput
	}
	unassignPrivateIpAddressesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.UnassignPrivateIpAddressesOutput
	}
	UnassignPrivateIpAddressesWithContextStub        func(aws.Context, *ec2.UnassignPrivateIpAddressesInput, ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error)
	unassignPrivateIpAddressesWithContextMutex       sync.RWMutex
	unassignPrivateIpAddressesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.UnassignPrivateIpAddressesInput
		arg3 []request.Option
	}
	unassignPrivateIpAddressesWithContextReturns struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}
	unassignPrivateIpAddressesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}
	UnmonitorInstancesStub        func(*ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error)
	unmonitorInstancesMutex       sync.RWMutex
	unmonitorInstancesArgsForCall []struct {
		arg1 *ec2.UnmonitorInstancesInput
	}
	unmonitorInstancesReturns struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}
	unmonitorInstancesReturnsOnCall map[int]struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}
	UnmonitorInstancesRequestStub        func(*ec2.UnmonitorInstancesInput) (*request.Request, *ec2.UnmonitorInstancesOutput)
	unmonitorInstancesRequestMutex       sync.RWMutex
	unmonitorInstancesRequestArgsForCall []struct {
		arg1 *ec2.UnmonitorInstancesInput
	}
	unmonitorInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ec2.UnmonitorInstancesOutput
	}
	unmonitorInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.UnmonitorInstancesOutput
	}
	UnmonitorInstancesWithContextStub        func(aws.Context, *ec2.UnmonitorInstancesInput, ...request.Option) (*ec2.UnmonitorInstancesOutput, error)
	unmonitorInstancesWithContextMutex       sync.RWMutex
	unmonitorInstancesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.UnmonitorInstancesInput
		arg3 []request.Option
	}
	unmonitorInstancesWithContextReturns struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}
	unmonitorInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}
	UpdateSecurityGroupRuleDescriptionsEgressStub        func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)
	updateSecurityGroupRuleDescriptionsEgressMutex       sync.RWMutex
	updateSecurityGroupRuleDescriptionsEgressArgsForCall []struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}
	updateSecurityGroupRuleDescriptionsEgressReturns struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}
	updateSecurityGroupRuleDescriptionsEgressReturnsOnCall map[int]struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}
	UpdateSecurityGroupRuleDescriptionsEgressRequestStub        func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
	updateSecurityGroupRuleDescriptionsEgressRequestMutex       sync.RWMutex
	updateSecurityGroupRuleDescriptionsEgressRequestArgsForCall []struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}
	updateSecurityGroupRuleDescriptionsEgressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	}
	updateSecurityGroupRuleDescriptionsEgressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	}
	UpdateSecurityGroupRuleDescriptionsEgressWithContextStub        func(aws.Context, *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)
	updateSecurityGroupRuleDescriptionsEgressWithContextMutex       sync.RWMutex
	updateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		arg3 []request.Option
	}
	updateSecurityGroupRuleDescriptionsEgressWithContextReturns struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}
	updateSecurityGroupRuleDescriptionsEgressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}
	UpdateSecurityGroupRuleDescriptionsIngressStub        func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)
	updateSecurityGroupRuleDescriptionsIngressMutex       sync.RWMutex
	updateSecurityGroupRuleDescriptionsIngressArgsForCall []struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}
	updateSecurityGroupRuleDescriptionsIngressReturns struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}
	updateSecurityGroupRuleDescriptionsIngressReturnsOnCall map[int]struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}
	UpdateSecurityGroupRuleDescriptionsIngressRequestStub        func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
	updateSecurityGroupRuleDescriptionsIngressRequestMutex       sync.RWMutex
	updateSecurityGroupRuleDescriptionsIngressRequestArgsForCall []struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}
	updateSecurityGroupRuleDescriptionsIngressRequestReturns struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	}
	updateSecurityGroupRuleDescriptionsIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	}
	UpdateSecurityGroupRuleDescriptionsIngressWithContextStub        func(aws.Context, *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)
	updateSecurityGroupRuleDescriptionsIngressWithContextMutex       sync.RWMutex
	updateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		arg3 []request.Option
	}
	updateSecurityGroupRuleDescriptionsIngressWithContextReturns struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}
	updateSecurityGroupRuleDescriptionsIngressWithContextReturnsOnCall map[int]struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}
	WaitUntilBundleTaskCompleteStub        func(*ec2.DescribeBundleTasksInput) error
	waitUntilBundleTaskCompleteMutex       sync.RWMutex
	waitUntilBundleTaskCompleteArgsForCall []struct {
		arg1 *ec2.DescribeBundleTasksInput
	}
	waitUntilBundleTaskCompleteReturns struct {
		result1 error
	}
	waitUntilBundleTaskCompleteReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilBundleTaskCompleteWithContextStub        func(aws.Context, *ec2.DescribeBundleTasksInput, ...request.WaiterOption) error
	waitUntilBundleTaskCompleteWithContextMutex       sync.RWMutex
	waitUntilBundleTaskCompleteWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeBundleTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilBundleTaskCompleteWithContextReturns struct {
		result1 error
	}
	waitUntilBundleTaskCompleteWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilConversionTaskCancelledStub        func(*ec2.DescribeConversionTasksInput) error
	waitUntilConversionTaskCancelledMutex       sync.RWMutex
	waitUntilConversionTaskCancelledArgsForCall []struct {
		arg1 *ec2.DescribeConversionTasksInput
	}
	waitUntilConversionTaskCancelledReturns struct {
		result1 error
	}
	waitUntilConversionTaskCancelledReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilConversionTaskCancelledWithContextStub        func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error
	waitUntilConversionTaskCancelledWithContextMutex       sync.RWMutex
	waitUntilConversionTaskCancelledWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilConversionTaskCancelledWithContextReturns struct {
		result1 error
	}
	waitUntilConversionTaskCancelledWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilConversionTaskCompletedStub        func(*ec2.DescribeConversionTasksInput) error
	waitUntilConversionTaskCompletedMutex       sync.RWMutex
	waitUntilConversionTaskCompletedArgsForCall []struct {
		arg1 *ec2.DescribeConversionTasksInput
	}
	waitUntilConversionTaskCompletedReturns struct {
		result1 error
	}
	waitUntilConversionTaskCompletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilConversionTaskCompletedWithContextStub        func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error
	waitUntilConversionTaskCompletedWithContextMutex       sync.RWMutex
	waitUntilConversionTaskCompletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilConversionTaskCompletedWithContextReturns struct {
		result1 error
	}
	waitUntilConversionTaskCompletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilConversionTaskDeletedStub        func(*ec2.DescribeConversionTasksInput) error
	waitUntilConversionTaskDeletedMutex       sync.RWMutex
	waitUntilConversionTaskDeletedArgsForCall []struct {
		arg1 *ec2.DescribeConversionTasksInput
	}
	waitUntilConversionTaskDeletedReturns struct {
		result1 error
	}
	waitUntilConversionTaskDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilConversionTaskDeletedWithContextStub        func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error
	waitUntilConversionTaskDeletedWithContextMutex       sync.RWMutex
	waitUntilConversionTaskDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilConversionTaskDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilConversionTaskDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCustomerGatewayAvailableStub        func(*ec2.DescribeCustomerGatewaysInput) error
	waitUntilCustomerGatewayAvailableMutex       sync.RWMutex
	waitUntilCustomerGatewayAvailableArgsForCall []struct {
		arg1 *ec2.DescribeCustomerGatewaysInput
	}
	waitUntilCustomerGatewayAvailableReturns struct {
		result1 error
	}
	waitUntilCustomerGatewayAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCustomerGatewayAvailableWithContextStub        func(aws.Context, *ec2.DescribeCustomerGatewaysInput, ...request.WaiterOption) error
	waitUntilCustomerGatewayAvailableWithContextMutex       sync.RWMutex
	waitUntilCustomerGatewayAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeCustomerGatewaysInput
		arg3 []request.WaiterOption
	}
	waitUntilCustomerGatewayAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilCustomerGatewayAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilExportTaskCancelledStub        func(*ec2.DescribeExportTasksInput) error
	waitUntilExportTaskCancelledMutex       sync.RWMutex
	waitUntilExportTaskCancelledArgsForCall []struct {
		arg1 *ec2.DescribeExportTasksInput
	}
	waitUntilExportTaskCancelledReturns struct {
		result1 error
	}
	waitUntilExportTaskCancelledReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilExportTaskCancelledWithContextStub        func(aws.Context, *ec2.DescribeExportTasksInput, ...request.WaiterOption) error
	waitUntilExportTaskCancelledWithContextMutex       sync.RWMutex
	waitUntilExportTaskCancelledWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeExportTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilExportTaskCancelledWithContextReturns struct {
		result1 error
	}
	waitUntilExportTaskCancelledWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilExportTaskCompletedStub        func(*ec2.DescribeExportTasksInput) error
	waitUntilExportTaskCompletedMutex       sync.RWMutex
	waitUntilExportTaskCompletedArgsForCall []struct {
		arg1 *ec2.DescribeExportTasksInput
	}
	waitUntilExportTaskCompletedReturns struct {
		result1 error
	}
	waitUntilExportTaskCompletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilExportTaskCompletedWithContextStub        func(aws.Context, *ec2.DescribeExportTasksInput, ...request.WaiterOption) error
	waitUntilExportTaskCompletedWithContextMutex       sync.RWMutex
	waitUntilExportTaskCompletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeExportTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilExportTaskCompletedWithContextReturns struct {
		result1 error
	}
	waitUntilExportTaskCompletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilImageAvailableStub        func(*ec2.DescribeImagesInput) error
	waitUntilImageAvailableMutex       sync.RWMutex
	waitUntilImageAvailableArgsForCall []struct {
		arg1 *ec2.DescribeImagesInput
	}
	waitUntilImageAvailableReturns struct {
		result1 error
	}
	waitUntilImageAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilImageAvailableWithContextStub        func(aws.Context, *ec2.DescribeImagesInput, ...request.WaiterOption) error
	waitUntilImageAvailableWithContextMutex       sync.RWMutex
	waitUntilImageAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImagesInput
		arg3 []request.WaiterOption
	}
	waitUntilImageAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilImageAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilImageExistsStub        func(*ec2.DescribeImagesInput) error
	waitUntilImageExistsMutex       sync.RWMutex
	waitUntilImageExistsArgsForCall []struct {
		arg1 *ec2.DescribeImagesInput
	}
	waitUntilImageExistsReturns struct {
		result1 error
	}
	waitUntilImageExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilImageExistsWithContextStub        func(aws.Context, *ec2.DescribeImagesInput, ...request.WaiterOption) error
	waitUntilImageExistsWithContextMutex       sync.RWMutex
	waitUntilImageExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImagesInput
		arg3 []request.WaiterOption
	}
	waitUntilImageExistsWithContextReturns struct {
		result1 error
	}
	waitUntilImageExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceExistsStub        func(*ec2.DescribeInstancesInput) error
	waitUntilInstanceExistsMutex       sync.RWMutex
	waitUntilInstanceExistsArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	waitUntilInstanceExistsReturns struct {
		result1 error
	}
	waitUntilInstanceExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceExistsWithContextStub        func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error
	waitUntilInstanceExistsWithContextMutex       sync.RWMutex
	waitUntilInstanceExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}
	waitUntilInstanceExistsWithContextReturns struct {
		result1 error
	}
	waitUntilInstanceExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceRunningStub        func(*ec2.DescribeInstancesInput) error
	waitUntilInstanceRunningMutex       sync.RWMutex
	waitUntilInstanceRunningArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	waitUntilInstanceRunningReturns struct {
		result1 error
	}
	waitUntilInstanceRunningReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceRunningWithContextStub        func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error
	waitUntilInstanceRunningWithContextMutex       sync.RWMutex
	waitUntilInstanceRunningWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}
	waitUntilInstanceRunningWithContextReturns struct {
		result1 error
	}
	waitUntilInstanceRunningWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceStatusOkStub        func(*ec2.DescribeInstanceStatusInput) error
	waitUntilInstanceStatusOkMutex       sync.RWMutex
	waitUntilInstanceStatusOkArgsForCall []struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}
	waitUntilInstanceStatusOkReturns struct {
		result1 error
	}
	waitUntilInstanceStatusOkReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceStatusOkWithContextStub        func(aws.Context, *ec2.DescribeInstanceStatusInput, ...request.WaiterOption) error
	waitUntilInstanceStatusOkWithContextMutex       sync.RWMutex
	waitUntilInstanceStatusOkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 []request.WaiterOption
	}
	waitUntilInstanceStatusOkWithContextReturns struct {
		result1 error
	}
	waitUntilInstanceStatusOkWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceStoppedStub        func(*ec2.DescribeInstancesInput) error
	waitUntilInstanceStoppedMutex       sync.RWMutex
	waitUntilInstanceStoppedArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	waitUntilInstanceStoppedReturns struct {
		result1 error
	}
	waitUntilInstanceStoppedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceStoppedWithContextStub        func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error
	waitUntilInstanceStoppedWithContextMutex       sync.RWMutex
	waitUntilInstanceStoppedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}
	waitUntilInstanceStoppedWithContextReturns struct {
		result1 error
	}
	waitUntilInstanceStoppedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceTerminatedStub        func(*ec2.DescribeInstancesInput) error
	waitUntilInstanceTerminatedMutex       sync.RWMutex
	waitUntilInstanceTerminatedArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	waitUntilInstanceTerminatedReturns struct {
		result1 error
	}
	waitUntilInstanceTerminatedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInstanceTerminatedWithContextStub        func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error
	waitUntilInstanceTerminatedWithContextMutex       sync.RWMutex
	waitUntilInstanceTerminatedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}
	waitUntilInstanceTerminatedWithContextReturns struct {
		result1 error
	}
	waitUntilInstanceTerminatedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilKeyPairExistsStub        func(*ec2.DescribeKeyPairsInput) error
	waitUntilKeyPairExistsMutex       sync.RWMutex
	waitUntilKeyPairExistsArgsForCall []struct {
		arg1 *ec2.DescribeKeyPairsInput
	}
	waitUntilKeyPairExistsReturns struct {
		result1 error
	}
	waitUntilKeyPairExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilKeyPairExistsWithContextStub        func(aws.Context, *ec2.DescribeKeyPairsInput, ...request.WaiterOption) error
	waitUntilKeyPairExistsWithContextMutex       sync.RWMutex
	waitUntilKeyPairExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeKeyPairsInput
		arg3 []request.WaiterOption
	}
	waitUntilKeyPairExistsWithContextReturns struct {
		result1 error
	}
	waitUntilKeyPairExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilNatGatewayAvailableStub        func(*ec2.DescribeNatGatewaysInput) error
	waitUntilNatGatewayAvailableMutex       sync.RWMutex
	waitUntilNatGatewayAvailableArgsForCall []struct {
		arg1 *ec2.DescribeNatGatewaysInput
	}
	waitUntilNatGatewayAvailableReturns struct {
		result1 error
	}
	waitUntilNatGatewayAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilNatGatewayAvailableWithContextStub        func(aws.Context, *ec2.DescribeNatGatewaysInput, ...request.WaiterOption) error
	waitUntilNatGatewayAvailableWithContextMutex       sync.RWMutex
	waitUntilNatGatewayAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNatGatewaysInput
		arg3 []request.WaiterOption
	}
	waitUntilNatGatewayAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilNatGatewayAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilNetworkInterfaceAvailableStub        func(*ec2.DescribeNetworkInterfacesInput) error
	waitUntilNetworkInterfaceAvailableMutex       sync.RWMutex
	waitUntilNetworkInterfaceAvailableArgsForCall []struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
	}
	waitUntilNetworkInterfaceAvailableReturns struct {
		result1 error
	}
	waitUntilNetworkInterfaceAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilNetworkInterfaceAvailableWithContextStub        func(aws.Context, *ec2.DescribeNetworkInterfacesInput, ...request.WaiterOption) error
	waitUntilNetworkInterfaceAvailableWithContextMutex       sync.RWMutex
	waitUntilNetworkInterfaceAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacesInput
		arg3 []request.WaiterOption
	}
	waitUntilNetworkInterfaceAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilNetworkInterfaceAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilPasswordDataAvailableStub        func(*ec2.GetPasswordDataInput) error
	waitUntilPasswordDataAvailableMutex       sync.RWMutex
	waitUntilPasswordDataAvailableArgsForCall []struct {
		arg1 *ec2.GetPasswordDataInput
	}
	waitUntilPasswordDataAvailableReturns struct {
		result1 error
	}
	waitUntilPasswordDataAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilPasswordDataAvailableWithContextStub        func(aws.Context, *ec2.GetPasswordDataInput, ...request.WaiterOption) error
	waitUntilPasswordDataAvailableWithContextMutex       sync.RWMutex
	waitUntilPasswordDataAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.GetPasswordDataInput
		arg3 []request.WaiterOption
	}
	waitUntilPasswordDataAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilPasswordDataAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSnapshotCompletedStub        func(*ec2.DescribeSnapshotsInput) error
	waitUntilSnapshotCompletedMutex       sync.RWMutex
	waitUntilSnapshotCompletedArgsForCall []struct {
		arg1 *ec2.DescribeSnapshotsInput
	}
	waitUntilSnapshotCompletedReturns struct {
		result1 error
	}
	waitUntilSnapshotCompletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSnapshotCompletedWithContextStub        func(aws.Context, *ec2.DescribeSnapshotsInput, ...request.WaiterOption) error
	waitUntilSnapshotCompletedWithContextMutex       sync.RWMutex
	waitUntilSnapshotCompletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotsInput
		arg3 []request.WaiterOption
	}
	waitUntilSnapshotCompletedWithContextReturns struct {
		result1 error
	}
	waitUntilSnapshotCompletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSpotInstanceRequestFulfilledStub        func(*ec2.DescribeSpotInstanceRequestsInput) error
	waitUntilSpotInstanceRequestFulfilledMutex       sync.RWMutex
	waitUntilSpotInstanceRequestFulfilledArgsForCall []struct {
		arg1 *ec2.DescribeSpotInstanceRequestsInput
	}
	waitUntilSpotInstanceRequestFulfilledReturns struct {
		result1 error
	}
	waitUntilSpotInstanceRequestFulfilledReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSpotInstanceRequestFulfilledWithContextStub        func(aws.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.WaiterOption) error
	waitUntilSpotInstanceRequestFulfilledWithContextMutex       sync.RWMutex
	waitUntilSpotInstanceRequestFulfilledWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotInstanceRequestsInput
		arg3 []request.WaiterOption
	}
	waitUntilSpotInstanceRequestFulfilledWithContextReturns struct {
		result1 error
	}
	waitUntilSpotInstanceRequestFulfilledWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSubnetAvailableStub        func(*ec2.DescribeSubnetsInput) error
	waitUntilSubnetAvailableMutex       sync.RWMutex
	waitUntilSubnetAvailableArgsForCall []struct {
		arg1 *ec2.DescribeSubnetsInput
	}
	waitUntilSubnetAvailableReturns struct {
		result1 error
	}
	waitUntilSubnetAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSubnetAvailableWithContextStub        func(aws.Context, *ec2.DescribeSubnetsInput, ...request.WaiterOption) error
	waitUntilSubnetAvailableWithContextMutex       sync.RWMutex
	waitUntilSubnetAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSubnetsInput
		arg3 []request.WaiterOption
	}
	waitUntilSubnetAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilSubnetAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSystemStatusOkStub        func(*ec2.DescribeInstanceStatusInput) error
	waitUntilSystemStatusOkMutex       sync.RWMutex
	waitUntilSystemStatusOkArgsForCall []struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}
	waitUntilSystemStatusOkReturns struct {
		result1 error
	}
	waitUntilSystemStatusOkReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilSystemStatusOkWithContextStub        func(aws.Context, *ec2.DescribeInstanceStatusInput, ...request.WaiterOption) error
	waitUntilSystemStatusOkWithContextMutex       sync.RWMutex
	waitUntilSystemStatusOkWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 []request.WaiterOption
	}
	waitUntilSystemStatusOkWithContextReturns struct {
		result1 error
	}
	waitUntilSystemStatusOkWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVolumeAvailableStub        func(*ec2.DescribeVolumesInput) error
	waitUntilVolumeAvailableMutex       sync.RWMutex
	waitUntilVolumeAvailableArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
	}
	waitUntilVolumeAvailableReturns struct {
		result1 error
	}
	waitUntilVolumeAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVolumeAvailableWithContextStub        func(aws.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error
	waitUntilVolumeAvailableWithContextMutex       sync.RWMutex
	waitUntilVolumeAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.WaiterOption
	}
	waitUntilVolumeAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilVolumeAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVolumeDeletedStub        func(*ec2.DescribeVolumesInput) error
	waitUntilVolumeDeletedMutex       sync.RWMutex
	waitUntilVolumeDeletedArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
	}
	waitUntilVolumeDeletedReturns struct {
		result1 error
	}
	waitUntilVolumeDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVolumeDeletedWithContextStub        func(aws.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error
	waitUntilVolumeDeletedWithContextMutex       sync.RWMutex
	waitUntilVolumeDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.WaiterOption
	}
	waitUntilVolumeDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilVolumeDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVolumeInUseStub        func(*ec2.DescribeVolumesInput) error
	waitUntilVolumeInUseMutex       sync.RWMutex
	waitUntilVolumeInUseArgsForCall []struct {
		arg1 *ec2.DescribeVolumesInput
	}
	waitUntilVolumeInUseReturns struct {
		result1 error
	}
	waitUntilVolumeInUseReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVolumeInUseWithContextStub        func(aws.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error
	waitUntilVolumeInUseWithContextMutex       sync.RWMutex
	waitUntilVolumeInUseWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.WaiterOption
	}
	waitUntilVolumeInUseWithContextReturns struct {
		result1 error
	}
	waitUntilVolumeInUseWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcAvailableStub        func(*ec2.DescribeVpcsInput) error
	waitUntilVpcAvailableMutex       sync.RWMutex
	waitUntilVpcAvailableArgsForCall []struct {
		arg1 *ec2.DescribeVpcsInput
	}
	waitUntilVpcAvailableReturns struct {
		result1 error
	}
	waitUntilVpcAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcAvailableWithContextStub        func(aws.Context, *ec2.DescribeVpcsInput, ...request.WaiterOption) error
	waitUntilVpcAvailableWithContextMutex       sync.RWMutex
	waitUntilVpcAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcsInput
		arg3 []request.WaiterOption
	}
	waitUntilVpcAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilVpcAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcExistsStub        func(*ec2.DescribeVpcsInput) error
	waitUntilVpcExistsMutex       sync.RWMutex
	waitUntilVpcExistsArgsForCall []struct {
		arg1 *ec2.DescribeVpcsInput
	}
	waitUntilVpcExistsReturns struct {
		result1 error
	}
	waitUntilVpcExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcExistsWithContextStub        func(aws.Context, *ec2.DescribeVpcsInput, ...request.WaiterOption) error
	waitUntilVpcExistsWithContextMutex       sync.RWMutex
	waitUntilVpcExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcsInput
		arg3 []request.WaiterOption
	}
	waitUntilVpcExistsWithContextReturns struct {
		result1 error
	}
	waitUntilVpcExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcPeeringConnectionDeletedStub        func(*ec2.DescribeVpcPeeringConnectionsInput) error
	waitUntilVpcPeeringConnectionDeletedMutex       sync.RWMutex
	waitUntilVpcPeeringConnectionDeletedArgsForCall []struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	waitUntilVpcPeeringConnectionDeletedReturns struct {
		result1 error
	}
	waitUntilVpcPeeringConnectionDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcPeeringConnectionDeletedWithContextStub        func(aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.WaiterOption) error
	waitUntilVpcPeeringConnectionDeletedWithContextMutex       sync.RWMutex
	waitUntilVpcPeeringConnectionDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcPeeringConnectionsInput
		arg3 []request.WaiterOption
	}
	waitUntilVpcPeeringConnectionDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilVpcPeeringConnectionDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcPeeringConnectionExistsStub        func(*ec2.DescribeVpcPeeringConnectionsInput) error
	waitUntilVpcPeeringConnectionExistsMutex       sync.RWMutex
	waitUntilVpcPeeringConnectionExistsArgsForCall []struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}
	waitUntilVpcPeeringConnectionExistsReturns struct {
		result1 error
	}
	waitUntilVpcPeeringConnectionExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpcPeeringConnectionExistsWithContextStub        func(aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.WaiterOption) error
	waitUntilVpcPeeringConnectionExistsWithContextMutex       sync.RWMutex
	waitUntilVpcPeeringConnectionExistsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcPeeringConnectionsInput
		arg3 []request.WaiterOption
	}
	waitUntilVpcPeeringConnectionExistsWithContextReturns struct {
		result1 error
	}
	waitUntilVpcPeeringConnectionExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpnConnectionAvailableStub        func(*ec2.DescribeVpnConnectionsInput) error
	waitUntilVpnConnectionAvailableMutex       sync.RWMutex
	waitUntilVpnConnectionAvailableArgsForCall []struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}
	waitUntilVpnConnectionAvailableReturns struct {
		result1 error
	}
	waitUntilVpnConnectionAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpnConnectionAvailableWithContextStub        func(aws.Context, *ec2.DescribeVpnConnectionsInput, ...request.WaiterOption) error
	waitUntilVpnConnectionAvailableWithContextMutex       sync.RWMutex
	waitUntilVpnConnectionAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnConnectionsInput
		arg3 []request.WaiterOption
	}
	waitUntilVpnConnectionAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilVpnConnectionAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpnConnectionDeletedStub        func(*ec2.DescribeVpnConnectionsInput) error
	waitUntilVpnConnectionDeletedMutex       sync.RWMutex
	waitUntilVpnConnectionDeletedArgsForCall []struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}
	waitUntilVpnConnectionDeletedReturns struct {
		result1 error
	}
	waitUntilVpnConnectionDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilVpnConnectionDeletedWithContextStub        func(aws.Context, *ec2.DescribeVpnConnectionsInput, ...request.WaiterOption) error
	waitUntilVpnConnectionDeletedWithContextMutex       sync.RWMutex
	waitUntilVpnConnectionDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnConnectionsInput
		arg3 []request.WaiterOption
	}
	waitUntilVpnConnectionDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilVpnConnectionDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WithdrawByoipCidrStub        func(*ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error)
	withdrawByoipCidrMutex       sync.RWMutex
	withdrawByoipCidrArgsForCall []struct {
		arg1 *ec2.WithdrawByoipCidrInput
	}
	withdrawByoipCidrReturns struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}
	withdrawByoipCidrReturnsOnCall map[int]struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}
	WithdrawByoipCidrRequestStub        func(*ec2.WithdrawByoipCidrInput) (*request.Request, *ec2.WithdrawByoipCidrOutput)
	withdrawByoipCidrRequestMutex       sync.RWMutex
	withdrawByoipCidrRequestArgsForCall []struct {
		arg1 *ec2.WithdrawByoipCidrInput
	}
	withdrawByoipCidrRequestReturns struct {
		result1 *request.Request
		result2 *ec2.WithdrawByoipCidrOutput
	}
	withdrawByoipCidrRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ec2.WithdrawByoipCidrOutput
	}
	WithdrawByoipCidrWithContextStub        func(aws.Context, *ec2.WithdrawByoipCidrInput, ...request.Option) (*ec2.WithdrawByoipCidrOutput, error)
	withdrawByoipCidrWithContextMutex       sync.RWMutex
	withdrawByoipCidrWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *ec2.WithdrawByoipCidrInput
		arg3 []request.Option
	}
	withdrawByoipCidrWithContextReturns struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}
	withdrawByoipCidrWithContextReturnsOnCall map[int]struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuote(arg1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	fake.acceptReservedInstancesExchangeQuoteMutex.Lock()
	ret, specificReturn := fake.acceptReservedInstancesExchangeQuoteReturnsOnCall[len(fake.acceptReservedInstancesExchangeQuoteArgsForCall)]
	fake.acceptReservedInstancesExchangeQuoteArgsForCall = append(fake.acceptReservedInstancesExchangeQuoteArgsForCall, struct {
		arg1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}{arg1})
	fake.recordInvocation("AcceptReservedInstancesExchangeQuote", []interface{}{arg1})
	fake.acceptReservedInstancesExchangeQuoteMutex.Unlock()
	if fake.AcceptReservedInstancesExchangeQuoteStub != nil {
		return fake.AcceptReservedInstancesExchangeQuoteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptReservedInstancesExchangeQuoteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteCallCount() int {
	fake.acceptReservedInstancesExchangeQuoteMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteMutex.RUnlock()
	return len(fake.acceptReservedInstancesExchangeQuoteArgsForCall)
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteCalls(stub func(*ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)) {
	fake.acceptReservedInstancesExchangeQuoteMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteStub = stub
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteArgsForCall(i int) *ec2.AcceptReservedInstancesExchangeQuoteInput {
	fake.acceptReservedInstancesExchangeQuoteMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteMutex.RUnlock()
	argsForCall := fake.acceptReservedInstancesExchangeQuoteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteReturns(result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.acceptReservedInstancesExchangeQuoteMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteStub = nil
	fake.acceptReservedInstancesExchangeQuoteReturns = struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteReturnsOnCall(i int, result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.acceptReservedInstancesExchangeQuoteMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteStub = nil
	if fake.acceptReservedInstancesExchangeQuoteReturnsOnCall == nil {
		fake.acceptReservedInstancesExchangeQuoteReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
			result2 error
		})
	}
	fake.acceptReservedInstancesExchangeQuoteReturnsOnCall[i] = struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteRequest(arg1 *ec2.AcceptReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.Lock()
	ret, specificReturn := fake.acceptReservedInstancesExchangeQuoteRequestReturnsOnCall[len(fake.acceptReservedInstancesExchangeQuoteRequestArgsForCall)]
	fake.acceptReservedInstancesExchangeQuoteRequestArgsForCall = append(fake.acceptReservedInstancesExchangeQuoteRequestArgsForCall, struct {
		arg1 *ec2.AcceptReservedInstancesExchangeQuoteInput
	}{arg1})
	fake.recordInvocation("AcceptReservedInstancesExchangeQuoteRequest", []interface{}{arg1})
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.Unlock()
	if fake.AcceptReservedInstancesExchangeQuoteRequestStub != nil {
		return fake.AcceptReservedInstancesExchangeQuoteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptReservedInstancesExchangeQuoteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteRequestCallCount() int {
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteRequestMutex.RUnlock()
	return len(fake.acceptReservedInstancesExchangeQuoteRequestArgsForCall)
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteRequestCalls(stub func(*ec2.AcceptReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.AcceptReservedInstancesExchangeQuoteOutput)) {
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteRequestMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteRequestStub = stub
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteRequestArgsForCall(i int) *ec2.AcceptReservedInstancesExchangeQuoteInput {
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteRequestMutex.RUnlock()
	argsForCall := fake.acceptReservedInstancesExchangeQuoteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteRequestReturns(result1 *request.Request, result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteRequestMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteRequestStub = nil
	fake.acceptReservedInstancesExchangeQuoteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteRequestMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteRequestStub = nil
	if fake.acceptReservedInstancesExchangeQuoteRequestReturnsOnCall == nil {
		fake.acceptReservedInstancesExchangeQuoteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		})
	}
	fake.acceptReservedInstancesExchangeQuoteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteWithContext(arg1 aws.Context, arg2 *ec2.AcceptReservedInstancesExchangeQuoteInput, arg3 ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Lock()
	ret, specificReturn := fake.acceptReservedInstancesExchangeQuoteWithContextReturnsOnCall[len(fake.acceptReservedInstancesExchangeQuoteWithContextArgsForCall)]
	fake.acceptReservedInstancesExchangeQuoteWithContextArgsForCall = append(fake.acceptReservedInstancesExchangeQuoteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AcceptReservedInstancesExchangeQuoteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AcceptReservedInstancesExchangeQuoteWithContext", []interface{}{arg1, arg2, arg3})
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	if fake.AcceptReservedInstancesExchangeQuoteWithContextStub != nil {
		return fake.AcceptReservedInstancesExchangeQuoteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptReservedInstancesExchangeQuoteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteWithContextCallCount() int {
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteWithContextMutex.RUnlock()
	return len(fake.acceptReservedInstancesExchangeQuoteWithContextArgsForCall)
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteWithContextCalls(stub func(aws.Context, *ec2.AcceptReservedInstancesExchangeQuoteInput, ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)) {
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteWithContextStub = stub
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteWithContextArgsForCall(i int) (aws.Context, *ec2.AcceptReservedInstancesExchangeQuoteInput, []request.Option) {
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteWithContextMutex.RUnlock()
	argsForCall := fake.acceptReservedInstancesExchangeQuoteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteWithContextReturns(result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteWithContextStub = nil
	fake.acceptReservedInstancesExchangeQuoteWithContextReturns = struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptReservedInstancesExchangeQuoteWithContextReturnsOnCall(i int, result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Lock()
	defer fake.acceptReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	fake.AcceptReservedInstancesExchangeQuoteWithContextStub = nil
	if fake.acceptReservedInstancesExchangeQuoteWithContextReturnsOnCall == nil {
		fake.acceptReservedInstancesExchangeQuoteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
			result2 error
		})
	}
	fake.acceptReservedInstancesExchangeQuoteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachment(arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.acceptTransitGatewayVpcAttachmentReturnsOnCall[len(fake.acceptTransitGatewayVpcAttachmentArgsForCall)]
	fake.acceptTransitGatewayVpcAttachmentArgsForCall = append(fake.acceptTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("AcceptTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.AcceptTransitGatewayVpcAttachmentStub != nil {
		return fake.AcceptTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentCallCount() int {
	fake.acceptTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.acceptTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentCalls(stub func(*ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.AcceptTransitGatewayVpcAttachmentInput {
	fake.acceptTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.acceptTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentReturns(result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentStub = nil
	fake.acceptTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.acceptTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentStub = nil
	if fake.acceptTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.acceptTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.acceptTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentRequest(arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.Lock()
	ret, specificReturn := fake.acceptTransitGatewayVpcAttachmentRequestReturnsOnCall[len(fake.acceptTransitGatewayVpcAttachmentRequestArgsForCall)]
	fake.acceptTransitGatewayVpcAttachmentRequestArgsForCall = append(fake.acceptTransitGatewayVpcAttachmentRequestArgsForCall, struct {
		arg1 *ec2.AcceptTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("AcceptTransitGatewayVpcAttachmentRequest", []interface{}{arg1})
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.Unlock()
	if fake.AcceptTransitGatewayVpcAttachmentRequestStub != nil {
		return fake.AcceptTransitGatewayVpcAttachmentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptTransitGatewayVpcAttachmentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentRequestCallCount() int {
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	return len(fake.acceptTransitGatewayVpcAttachmentRequestArgsForCall)
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentRequestCalls(stub func(*ec2.AcceptTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.AcceptTransitGatewayVpcAttachmentOutput)) {
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentRequestStub = stub
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentRequestArgsForCall(i int) *ec2.AcceptTransitGatewayVpcAttachmentInput {
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	argsForCall := fake.acceptTransitGatewayVpcAttachmentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentRequestReturns(result1 *request.Request, result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentRequestStub = nil
	fake.acceptTransitGatewayVpcAttachmentRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentRequestStub = nil
	if fake.acceptTransitGatewayVpcAttachmentRequestReturnsOnCall == nil {
		fake.acceptTransitGatewayVpcAttachmentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		})
	}
	fake.acceptTransitGatewayVpcAttachmentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentWithContext(arg1 aws.Context, arg2 *ec2.AcceptTransitGatewayVpcAttachmentInput, arg3 ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Lock()
	ret, specificReturn := fake.acceptTransitGatewayVpcAttachmentWithContextReturnsOnCall[len(fake.acceptTransitGatewayVpcAttachmentWithContextArgsForCall)]
	fake.acceptTransitGatewayVpcAttachmentWithContextArgsForCall = append(fake.acceptTransitGatewayVpcAttachmentWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AcceptTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AcceptTransitGatewayVpcAttachmentWithContext", []interface{}{arg1, arg2, arg3})
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	if fake.AcceptTransitGatewayVpcAttachmentWithContextStub != nil {
		return fake.AcceptTransitGatewayVpcAttachmentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptTransitGatewayVpcAttachmentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentWithContextCallCount() int {
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	return len(fake.acceptTransitGatewayVpcAttachmentWithContextArgsForCall)
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentWithContextCalls(stub func(aws.Context, *ec2.AcceptTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)) {
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentWithContextStub = stub
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentWithContextArgsForCall(i int) (aws.Context, *ec2.AcceptTransitGatewayVpcAttachmentInput, []request.Option) {
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	argsForCall := fake.acceptTransitGatewayVpcAttachmentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentWithContextReturns(result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentWithContextStub = nil
	fake.acceptTransitGatewayVpcAttachmentWithContextReturns = struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptTransitGatewayVpcAttachmentWithContextReturnsOnCall(i int, result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.acceptTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.AcceptTransitGatewayVpcAttachmentWithContextStub = nil
	if fake.acceptTransitGatewayVpcAttachmentWithContextReturnsOnCall == nil {
		fake.acceptTransitGatewayVpcAttachmentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.acceptTransitGatewayVpcAttachmentWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcEndpointConnections(arg1 *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	fake.acceptVpcEndpointConnectionsMutex.Lock()
	ret, specificReturn := fake.acceptVpcEndpointConnectionsReturnsOnCall[len(fake.acceptVpcEndpointConnectionsArgsForCall)]
	fake.acceptVpcEndpointConnectionsArgsForCall = append(fake.acceptVpcEndpointConnectionsArgsForCall, struct {
		arg1 *ec2.AcceptVpcEndpointConnectionsInput
	}{arg1})
	fake.recordInvocation("AcceptVpcEndpointConnections", []interface{}{arg1})
	fake.acceptVpcEndpointConnectionsMutex.Unlock()
	if fake.AcceptVpcEndpointConnectionsStub != nil {
		return fake.AcceptVpcEndpointConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptVpcEndpointConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsCallCount() int {
	fake.acceptVpcEndpointConnectionsMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsMutex.RUnlock()
	return len(fake.acceptVpcEndpointConnectionsArgsForCall)
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsCalls(stub func(*ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error)) {
	fake.acceptVpcEndpointConnectionsMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsStub = stub
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsArgsForCall(i int) *ec2.AcceptVpcEndpointConnectionsInput {
	fake.acceptVpcEndpointConnectionsMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsMutex.RUnlock()
	argsForCall := fake.acceptVpcEndpointConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsReturns(result1 *ec2.AcceptVpcEndpointConnectionsOutput, result2 error) {
	fake.acceptVpcEndpointConnectionsMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsStub = nil
	fake.acceptVpcEndpointConnectionsReturns = struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsReturnsOnCall(i int, result1 *ec2.AcceptVpcEndpointConnectionsOutput, result2 error) {
	fake.acceptVpcEndpointConnectionsMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsStub = nil
	if fake.acceptVpcEndpointConnectionsReturnsOnCall == nil {
		fake.acceptVpcEndpointConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptVpcEndpointConnectionsOutput
			result2 error
		})
	}
	fake.acceptVpcEndpointConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsRequest(arg1 *ec2.AcceptVpcEndpointConnectionsInput) (*request.Request, *ec2.AcceptVpcEndpointConnectionsOutput) {
	fake.acceptVpcEndpointConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.acceptVpcEndpointConnectionsRequestReturnsOnCall[len(fake.acceptVpcEndpointConnectionsRequestArgsForCall)]
	fake.acceptVpcEndpointConnectionsRequestArgsForCall = append(fake.acceptVpcEndpointConnectionsRequestArgsForCall, struct {
		arg1 *ec2.AcceptVpcEndpointConnectionsInput
	}{arg1})
	fake.recordInvocation("AcceptVpcEndpointConnectionsRequest", []interface{}{arg1})
	fake.acceptVpcEndpointConnectionsRequestMutex.Unlock()
	if fake.AcceptVpcEndpointConnectionsRequestStub != nil {
		return fake.AcceptVpcEndpointConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptVpcEndpointConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsRequestCallCount() int {
	fake.acceptVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsRequestMutex.RUnlock()
	return len(fake.acceptVpcEndpointConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsRequestCalls(stub func(*ec2.AcceptVpcEndpointConnectionsInput) (*request.Request, *ec2.AcceptVpcEndpointConnectionsOutput)) {
	fake.acceptVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsRequestMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsRequestStub = stub
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsRequestArgsForCall(i int) *ec2.AcceptVpcEndpointConnectionsInput {
	fake.acceptVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsRequestMutex.RUnlock()
	argsForCall := fake.acceptVpcEndpointConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsRequestReturns(result1 *request.Request, result2 *ec2.AcceptVpcEndpointConnectionsOutput) {
	fake.acceptVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsRequestMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsRequestStub = nil
	fake.acceptVpcEndpointConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcEndpointConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AcceptVpcEndpointConnectionsOutput) {
	fake.acceptVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsRequestMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsRequestStub = nil
	if fake.acceptVpcEndpointConnectionsRequestReturnsOnCall == nil {
		fake.acceptVpcEndpointConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AcceptVpcEndpointConnectionsOutput
		})
	}
	fake.acceptVpcEndpointConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcEndpointConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsWithContext(arg1 aws.Context, arg2 *ec2.AcceptVpcEndpointConnectionsInput, arg3 ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	fake.acceptVpcEndpointConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.acceptVpcEndpointConnectionsWithContextReturnsOnCall[len(fake.acceptVpcEndpointConnectionsWithContextArgsForCall)]
	fake.acceptVpcEndpointConnectionsWithContextArgsForCall = append(fake.acceptVpcEndpointConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AcceptVpcEndpointConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AcceptVpcEndpointConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.acceptVpcEndpointConnectionsWithContextMutex.Unlock()
	if fake.AcceptVpcEndpointConnectionsWithContextStub != nil {
		return fake.AcceptVpcEndpointConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptVpcEndpointConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsWithContextCallCount() int {
	fake.acceptVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsWithContextMutex.RUnlock()
	return len(fake.acceptVpcEndpointConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsWithContextCalls(stub func(aws.Context, *ec2.AcceptVpcEndpointConnectionsInput, ...request.Option) (*ec2.AcceptVpcEndpointConnectionsOutput, error)) {
	fake.acceptVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.AcceptVpcEndpointConnectionsInput, []request.Option) {
	fake.acceptVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.acceptVpcEndpointConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsWithContextReturns(result1 *ec2.AcceptVpcEndpointConnectionsOutput, result2 error) {
	fake.acceptVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsWithContextStub = nil
	fake.acceptVpcEndpointConnectionsWithContextReturns = struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcEndpointConnectionsWithContextReturnsOnCall(i int, result1 *ec2.AcceptVpcEndpointConnectionsOutput, result2 error) {
	fake.acceptVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.acceptVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.AcceptVpcEndpointConnectionsWithContextStub = nil
	if fake.acceptVpcEndpointConnectionsWithContextReturnsOnCall == nil {
		fake.acceptVpcEndpointConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptVpcEndpointConnectionsOutput
			result2 error
		})
	}
	fake.acceptVpcEndpointConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AcceptVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcPeeringConnection(arg1 *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	fake.acceptVpcPeeringConnectionMutex.Lock()
	ret, specificReturn := fake.acceptVpcPeeringConnectionReturnsOnCall[len(fake.acceptVpcPeeringConnectionArgsForCall)]
	fake.acceptVpcPeeringConnectionArgsForCall = append(fake.acceptVpcPeeringConnectionArgsForCall, struct {
		arg1 *ec2.AcceptVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("AcceptVpcPeeringConnection", []interface{}{arg1})
	fake.acceptVpcPeeringConnectionMutex.Unlock()
	if fake.AcceptVpcPeeringConnectionStub != nil {
		return fake.AcceptVpcPeeringConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptVpcPeeringConnectionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionCallCount() int {
	fake.acceptVpcPeeringConnectionMutex.RLock()
	defer fake.acceptVpcPeeringConnectionMutex.RUnlock()
	return len(fake.acceptVpcPeeringConnectionArgsForCall)
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionCalls(stub func(*ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error)) {
	fake.acceptVpcPeeringConnectionMutex.Lock()
	defer fake.acceptVpcPeeringConnectionMutex.Unlock()
	fake.AcceptVpcPeeringConnectionStub = stub
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionArgsForCall(i int) *ec2.AcceptVpcPeeringConnectionInput {
	fake.acceptVpcPeeringConnectionMutex.RLock()
	defer fake.acceptVpcPeeringConnectionMutex.RUnlock()
	argsForCall := fake.acceptVpcPeeringConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionReturns(result1 *ec2.AcceptVpcPeeringConnectionOutput, result2 error) {
	fake.acceptVpcPeeringConnectionMutex.Lock()
	defer fake.acceptVpcPeeringConnectionMutex.Unlock()
	fake.AcceptVpcPeeringConnectionStub = nil
	fake.acceptVpcPeeringConnectionReturns = struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionReturnsOnCall(i int, result1 *ec2.AcceptVpcPeeringConnectionOutput, result2 error) {
	fake.acceptVpcPeeringConnectionMutex.Lock()
	defer fake.acceptVpcPeeringConnectionMutex.Unlock()
	fake.AcceptVpcPeeringConnectionStub = nil
	if fake.acceptVpcPeeringConnectionReturnsOnCall == nil {
		fake.acceptVpcPeeringConnectionReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.acceptVpcPeeringConnectionReturnsOnCall[i] = struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionRequest(arg1 *ec2.AcceptVpcPeeringConnectionInput) (*request.Request, *ec2.AcceptVpcPeeringConnectionOutput) {
	fake.acceptVpcPeeringConnectionRequestMutex.Lock()
	ret, specificReturn := fake.acceptVpcPeeringConnectionRequestReturnsOnCall[len(fake.acceptVpcPeeringConnectionRequestArgsForCall)]
	fake.acceptVpcPeeringConnectionRequestArgsForCall = append(fake.acceptVpcPeeringConnectionRequestArgsForCall, struct {
		arg1 *ec2.AcceptVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("AcceptVpcPeeringConnectionRequest", []interface{}{arg1})
	fake.acceptVpcPeeringConnectionRequestMutex.Unlock()
	if fake.AcceptVpcPeeringConnectionRequestStub != nil {
		return fake.AcceptVpcPeeringConnectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptVpcPeeringConnectionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionRequestCallCount() int {
	fake.acceptVpcPeeringConnectionRequestMutex.RLock()
	defer fake.acceptVpcPeeringConnectionRequestMutex.RUnlock()
	return len(fake.acceptVpcPeeringConnectionRequestArgsForCall)
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionRequestCalls(stub func(*ec2.AcceptVpcPeeringConnectionInput) (*request.Request, *ec2.AcceptVpcPeeringConnectionOutput)) {
	fake.acceptVpcPeeringConnectionRequestMutex.Lock()
	defer fake.acceptVpcPeeringConnectionRequestMutex.Unlock()
	fake.AcceptVpcPeeringConnectionRequestStub = stub
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionRequestArgsForCall(i int) *ec2.AcceptVpcPeeringConnectionInput {
	fake.acceptVpcPeeringConnectionRequestMutex.RLock()
	defer fake.acceptVpcPeeringConnectionRequestMutex.RUnlock()
	argsForCall := fake.acceptVpcPeeringConnectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionRequestReturns(result1 *request.Request, result2 *ec2.AcceptVpcPeeringConnectionOutput) {
	fake.acceptVpcPeeringConnectionRequestMutex.Lock()
	defer fake.acceptVpcPeeringConnectionRequestMutex.Unlock()
	fake.AcceptVpcPeeringConnectionRequestStub = nil
	fake.acceptVpcPeeringConnectionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AcceptVpcPeeringConnectionOutput) {
	fake.acceptVpcPeeringConnectionRequestMutex.Lock()
	defer fake.acceptVpcPeeringConnectionRequestMutex.Unlock()
	fake.AcceptVpcPeeringConnectionRequestStub = nil
	if fake.acceptVpcPeeringConnectionRequestReturnsOnCall == nil {
		fake.acceptVpcPeeringConnectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AcceptVpcPeeringConnectionOutput
		})
	}
	fake.acceptVpcPeeringConnectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AcceptVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionWithContext(arg1 aws.Context, arg2 *ec2.AcceptVpcPeeringConnectionInput, arg3 ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	fake.acceptVpcPeeringConnectionWithContextMutex.Lock()
	ret, specificReturn := fake.acceptVpcPeeringConnectionWithContextReturnsOnCall[len(fake.acceptVpcPeeringConnectionWithContextArgsForCall)]
	fake.acceptVpcPeeringConnectionWithContextArgsForCall = append(fake.acceptVpcPeeringConnectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AcceptVpcPeeringConnectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AcceptVpcPeeringConnectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.acceptVpcPeeringConnectionWithContextMutex.Unlock()
	if fake.AcceptVpcPeeringConnectionWithContextStub != nil {
		return fake.AcceptVpcPeeringConnectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.acceptVpcPeeringConnectionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionWithContextCallCount() int {
	fake.acceptVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.acceptVpcPeeringConnectionWithContextMutex.RUnlock()
	return len(fake.acceptVpcPeeringConnectionWithContextArgsForCall)
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionWithContextCalls(stub func(aws.Context, *ec2.AcceptVpcPeeringConnectionInput, ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error)) {
	fake.acceptVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.acceptVpcPeeringConnectionWithContextMutex.Unlock()
	fake.AcceptVpcPeeringConnectionWithContextStub = stub
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionWithContextArgsForCall(i int) (aws.Context, *ec2.AcceptVpcPeeringConnectionInput, []request.Option) {
	fake.acceptVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.acceptVpcPeeringConnectionWithContextMutex.RUnlock()
	argsForCall := fake.acceptVpcPeeringConnectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionWithContextReturns(result1 *ec2.AcceptVpcPeeringConnectionOutput, result2 error) {
	fake.acceptVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.acceptVpcPeeringConnectionWithContextMutex.Unlock()
	fake.AcceptVpcPeeringConnectionWithContextStub = nil
	fake.acceptVpcPeeringConnectionWithContextReturns = struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AcceptVpcPeeringConnectionWithContextReturnsOnCall(i int, result1 *ec2.AcceptVpcPeeringConnectionOutput, result2 error) {
	fake.acceptVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.acceptVpcPeeringConnectionWithContextMutex.Unlock()
	fake.AcceptVpcPeeringConnectionWithContextStub = nil
	if fake.acceptVpcPeeringConnectionWithContextReturnsOnCall == nil {
		fake.acceptVpcPeeringConnectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AcceptVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.acceptVpcPeeringConnectionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AcceptVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AdvertiseByoipCidr(arg1 *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error) {
	fake.advertiseByoipCidrMutex.Lock()
	ret, specificReturn := fake.advertiseByoipCidrReturnsOnCall[len(fake.advertiseByoipCidrArgsForCall)]
	fake.advertiseByoipCidrArgsForCall = append(fake.advertiseByoipCidrArgsForCall, struct {
		arg1 *ec2.AdvertiseByoipCidrInput
	}{arg1})
	fake.recordInvocation("AdvertiseByoipCidr", []interface{}{arg1})
	fake.advertiseByoipCidrMutex.Unlock()
	if fake.AdvertiseByoipCidrStub != nil {
		return fake.AdvertiseByoipCidrStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.advertiseByoipCidrReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AdvertiseByoipCidrCallCount() int {
	fake.advertiseByoipCidrMutex.RLock()
	defer fake.advertiseByoipCidrMutex.RUnlock()
	return len(fake.advertiseByoipCidrArgsForCall)
}

func (fake *FakeEC2API) AdvertiseByoipCidrCalls(stub func(*ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error)) {
	fake.advertiseByoipCidrMutex.Lock()
	defer fake.advertiseByoipCidrMutex.Unlock()
	fake.AdvertiseByoipCidrStub = stub
}

func (fake *FakeEC2API) AdvertiseByoipCidrArgsForCall(i int) *ec2.AdvertiseByoipCidrInput {
	fake.advertiseByoipCidrMutex.RLock()
	defer fake.advertiseByoipCidrMutex.RUnlock()
	argsForCall := fake.advertiseByoipCidrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AdvertiseByoipCidrReturns(result1 *ec2.AdvertiseByoipCidrOutput, result2 error) {
	fake.advertiseByoipCidrMutex.Lock()
	defer fake.advertiseByoipCidrMutex.Unlock()
	fake.AdvertiseByoipCidrStub = nil
	fake.advertiseByoipCidrReturns = struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AdvertiseByoipCidrReturnsOnCall(i int, result1 *ec2.AdvertiseByoipCidrOutput, result2 error) {
	fake.advertiseByoipCidrMutex.Lock()
	defer fake.advertiseByoipCidrMutex.Unlock()
	fake.AdvertiseByoipCidrStub = nil
	if fake.advertiseByoipCidrReturnsOnCall == nil {
		fake.advertiseByoipCidrReturnsOnCall = make(map[int]struct {
			result1 *ec2.AdvertiseByoipCidrOutput
			result2 error
		})
	}
	fake.advertiseByoipCidrReturnsOnCall[i] = struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AdvertiseByoipCidrRequest(arg1 *ec2.AdvertiseByoipCidrInput) (*request.Request, *ec2.AdvertiseByoipCidrOutput) {
	fake.advertiseByoipCidrRequestMutex.Lock()
	ret, specificReturn := fake.advertiseByoipCidrRequestReturnsOnCall[len(fake.advertiseByoipCidrRequestArgsForCall)]
	fake.advertiseByoipCidrRequestArgsForCall = append(fake.advertiseByoipCidrRequestArgsForCall, struct {
		arg1 *ec2.AdvertiseByoipCidrInput
	}{arg1})
	fake.recordInvocation("AdvertiseByoipCidrRequest", []interface{}{arg1})
	fake.advertiseByoipCidrRequestMutex.Unlock()
	if fake.AdvertiseByoipCidrRequestStub != nil {
		return fake.AdvertiseByoipCidrRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.advertiseByoipCidrRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AdvertiseByoipCidrRequestCallCount() int {
	fake.advertiseByoipCidrRequestMutex.RLock()
	defer fake.advertiseByoipCidrRequestMutex.RUnlock()
	return len(fake.advertiseByoipCidrRequestArgsForCall)
}

func (fake *FakeEC2API) AdvertiseByoipCidrRequestCalls(stub func(*ec2.AdvertiseByoipCidrInput) (*request.Request, *ec2.AdvertiseByoipCidrOutput)) {
	fake.advertiseByoipCidrRequestMutex.Lock()
	defer fake.advertiseByoipCidrRequestMutex.Unlock()
	fake.AdvertiseByoipCidrRequestStub = stub
}

func (fake *FakeEC2API) AdvertiseByoipCidrRequestArgsForCall(i int) *ec2.AdvertiseByoipCidrInput {
	fake.advertiseByoipCidrRequestMutex.RLock()
	defer fake.advertiseByoipCidrRequestMutex.RUnlock()
	argsForCall := fake.advertiseByoipCidrRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AdvertiseByoipCidrRequestReturns(result1 *request.Request, result2 *ec2.AdvertiseByoipCidrOutput) {
	fake.advertiseByoipCidrRequestMutex.Lock()
	defer fake.advertiseByoipCidrRequestMutex.Unlock()
	fake.AdvertiseByoipCidrRequestStub = nil
	fake.advertiseByoipCidrRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AdvertiseByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AdvertiseByoipCidrRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AdvertiseByoipCidrOutput) {
	fake.advertiseByoipCidrRequestMutex.Lock()
	defer fake.advertiseByoipCidrRequestMutex.Unlock()
	fake.AdvertiseByoipCidrRequestStub = nil
	if fake.advertiseByoipCidrRequestReturnsOnCall == nil {
		fake.advertiseByoipCidrRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AdvertiseByoipCidrOutput
		})
	}
	fake.advertiseByoipCidrRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AdvertiseByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AdvertiseByoipCidrWithContext(arg1 aws.Context, arg2 *ec2.AdvertiseByoipCidrInput, arg3 ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error) {
	fake.advertiseByoipCidrWithContextMutex.Lock()
	ret, specificReturn := fake.advertiseByoipCidrWithContextReturnsOnCall[len(fake.advertiseByoipCidrWithContextArgsForCall)]
	fake.advertiseByoipCidrWithContextArgsForCall = append(fake.advertiseByoipCidrWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AdvertiseByoipCidrInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AdvertiseByoipCidrWithContext", []interface{}{arg1, arg2, arg3})
	fake.advertiseByoipCidrWithContextMutex.Unlock()
	if fake.AdvertiseByoipCidrWithContextStub != nil {
		return fake.AdvertiseByoipCidrWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.advertiseByoipCidrWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AdvertiseByoipCidrWithContextCallCount() int {
	fake.advertiseByoipCidrWithContextMutex.RLock()
	defer fake.advertiseByoipCidrWithContextMutex.RUnlock()
	return len(fake.advertiseByoipCidrWithContextArgsForCall)
}

func (fake *FakeEC2API) AdvertiseByoipCidrWithContextCalls(stub func(aws.Context, *ec2.AdvertiseByoipCidrInput, ...request.Option) (*ec2.AdvertiseByoipCidrOutput, error)) {
	fake.advertiseByoipCidrWithContextMutex.Lock()
	defer fake.advertiseByoipCidrWithContextMutex.Unlock()
	fake.AdvertiseByoipCidrWithContextStub = stub
}

func (fake *FakeEC2API) AdvertiseByoipCidrWithContextArgsForCall(i int) (aws.Context, *ec2.AdvertiseByoipCidrInput, []request.Option) {
	fake.advertiseByoipCidrWithContextMutex.RLock()
	defer fake.advertiseByoipCidrWithContextMutex.RUnlock()
	argsForCall := fake.advertiseByoipCidrWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AdvertiseByoipCidrWithContextReturns(result1 *ec2.AdvertiseByoipCidrOutput, result2 error) {
	fake.advertiseByoipCidrWithContextMutex.Lock()
	defer fake.advertiseByoipCidrWithContextMutex.Unlock()
	fake.AdvertiseByoipCidrWithContextStub = nil
	fake.advertiseByoipCidrWithContextReturns = struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AdvertiseByoipCidrWithContextReturnsOnCall(i int, result1 *ec2.AdvertiseByoipCidrOutput, result2 error) {
	fake.advertiseByoipCidrWithContextMutex.Lock()
	defer fake.advertiseByoipCidrWithContextMutex.Unlock()
	fake.AdvertiseByoipCidrWithContextStub = nil
	if fake.advertiseByoipCidrWithContextReturnsOnCall == nil {
		fake.advertiseByoipCidrWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AdvertiseByoipCidrOutput
			result2 error
		})
	}
	fake.advertiseByoipCidrWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AdvertiseByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateAddress(arg1 *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	fake.allocateAddressMutex.Lock()
	ret, specificReturn := fake.allocateAddressReturnsOnCall[len(fake.allocateAddressArgsForCall)]
	fake.allocateAddressArgsForCall = append(fake.allocateAddressArgsForCall, struct {
		arg1 *ec2.AllocateAddressInput
	}{arg1})
	fake.recordInvocation("AllocateAddress", []interface{}{arg1})
	fake.allocateAddressMutex.Unlock()
	if fake.AllocateAddressStub != nil {
		return fake.AllocateAddressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allocateAddressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AllocateAddressCallCount() int {
	fake.allocateAddressMutex.RLock()
	defer fake.allocateAddressMutex.RUnlock()
	return len(fake.allocateAddressArgsForCall)
}

func (fake *FakeEC2API) AllocateAddressCalls(stub func(*ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error)) {
	fake.allocateAddressMutex.Lock()
	defer fake.allocateAddressMutex.Unlock()
	fake.AllocateAddressStub = stub
}

func (fake *FakeEC2API) AllocateAddressArgsForCall(i int) *ec2.AllocateAddressInput {
	fake.allocateAddressMutex.RLock()
	defer fake.allocateAddressMutex.RUnlock()
	argsForCall := fake.allocateAddressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AllocateAddressReturns(result1 *ec2.AllocateAddressOutput, result2 error) {
	fake.allocateAddressMutex.Lock()
	defer fake.allocateAddressMutex.Unlock()
	fake.AllocateAddressStub = nil
	fake.allocateAddressReturns = struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateAddressReturnsOnCall(i int, result1 *ec2.AllocateAddressOutput, result2 error) {
	fake.allocateAddressMutex.Lock()
	defer fake.allocateAddressMutex.Unlock()
	fake.AllocateAddressStub = nil
	if fake.allocateAddressReturnsOnCall == nil {
		fake.allocateAddressReturnsOnCall = make(map[int]struct {
			result1 *ec2.AllocateAddressOutput
			result2 error
		})
	}
	fake.allocateAddressReturnsOnCall[i] = struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateAddressRequest(arg1 *ec2.AllocateAddressInput) (*request.Request, *ec2.AllocateAddressOutput) {
	fake.allocateAddressRequestMutex.Lock()
	ret, specificReturn := fake.allocateAddressRequestReturnsOnCall[len(fake.allocateAddressRequestArgsForCall)]
	fake.allocateAddressRequestArgsForCall = append(fake.allocateAddressRequestArgsForCall, struct {
		arg1 *ec2.AllocateAddressInput
	}{arg1})
	fake.recordInvocation("AllocateAddressRequest", []interface{}{arg1})
	fake.allocateAddressRequestMutex.Unlock()
	if fake.AllocateAddressRequestStub != nil {
		return fake.AllocateAddressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allocateAddressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AllocateAddressRequestCallCount() int {
	fake.allocateAddressRequestMutex.RLock()
	defer fake.allocateAddressRequestMutex.RUnlock()
	return len(fake.allocateAddressRequestArgsForCall)
}

func (fake *FakeEC2API) AllocateAddressRequestCalls(stub func(*ec2.AllocateAddressInput) (*request.Request, *ec2.AllocateAddressOutput)) {
	fake.allocateAddressRequestMutex.Lock()
	defer fake.allocateAddressRequestMutex.Unlock()
	fake.AllocateAddressRequestStub = stub
}

func (fake *FakeEC2API) AllocateAddressRequestArgsForCall(i int) *ec2.AllocateAddressInput {
	fake.allocateAddressRequestMutex.RLock()
	defer fake.allocateAddressRequestMutex.RUnlock()
	argsForCall := fake.allocateAddressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AllocateAddressRequestReturns(result1 *request.Request, result2 *ec2.AllocateAddressOutput) {
	fake.allocateAddressRequestMutex.Lock()
	defer fake.allocateAddressRequestMutex.Unlock()
	fake.AllocateAddressRequestStub = nil
	fake.allocateAddressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AllocateAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateAddressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AllocateAddressOutput) {
	fake.allocateAddressRequestMutex.Lock()
	defer fake.allocateAddressRequestMutex.Unlock()
	fake.AllocateAddressRequestStub = nil
	if fake.allocateAddressRequestReturnsOnCall == nil {
		fake.allocateAddressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AllocateAddressOutput
		})
	}
	fake.allocateAddressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AllocateAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateAddressWithContext(arg1 aws.Context, arg2 *ec2.AllocateAddressInput, arg3 ...request.Option) (*ec2.AllocateAddressOutput, error) {
	fake.allocateAddressWithContextMutex.Lock()
	ret, specificReturn := fake.allocateAddressWithContextReturnsOnCall[len(fake.allocateAddressWithContextArgsForCall)]
	fake.allocateAddressWithContextArgsForCall = append(fake.allocateAddressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AllocateAddressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AllocateAddressWithContext", []interface{}{arg1, arg2, arg3})
	fake.allocateAddressWithContextMutex.Unlock()
	if fake.AllocateAddressWithContextStub != nil {
		return fake.AllocateAddressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allocateAddressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AllocateAddressWithContextCallCount() int {
	fake.allocateAddressWithContextMutex.RLock()
	defer fake.allocateAddressWithContextMutex.RUnlock()
	return len(fake.allocateAddressWithContextArgsForCall)
}

func (fake *FakeEC2API) AllocateAddressWithContextCalls(stub func(aws.Context, *ec2.AllocateAddressInput, ...request.Option) (*ec2.AllocateAddressOutput, error)) {
	fake.allocateAddressWithContextMutex.Lock()
	defer fake.allocateAddressWithContextMutex.Unlock()
	fake.AllocateAddressWithContextStub = stub
}

func (fake *FakeEC2API) AllocateAddressWithContextArgsForCall(i int) (aws.Context, *ec2.AllocateAddressInput, []request.Option) {
	fake.allocateAddressWithContextMutex.RLock()
	defer fake.allocateAddressWithContextMutex.RUnlock()
	argsForCall := fake.allocateAddressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AllocateAddressWithContextReturns(result1 *ec2.AllocateAddressOutput, result2 error) {
	fake.allocateAddressWithContextMutex.Lock()
	defer fake.allocateAddressWithContextMutex.Unlock()
	fake.AllocateAddressWithContextStub = nil
	fake.allocateAddressWithContextReturns = struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateAddressWithContextReturnsOnCall(i int, result1 *ec2.AllocateAddressOutput, result2 error) {
	fake.allocateAddressWithContextMutex.Lock()
	defer fake.allocateAddressWithContextMutex.Unlock()
	fake.AllocateAddressWithContextStub = nil
	if fake.allocateAddressWithContextReturnsOnCall == nil {
		fake.allocateAddressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AllocateAddressOutput
			result2 error
		})
	}
	fake.allocateAddressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AllocateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateHosts(arg1 *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
	fake.allocateHostsMutex.Lock()
	ret, specificReturn := fake.allocateHostsReturnsOnCall[len(fake.allocateHostsArgsForCall)]
	fake.allocateHostsArgsForCall = append(fake.allocateHostsArgsForCall, struct {
		arg1 *ec2.AllocateHostsInput
	}{arg1})
	fake.recordInvocation("AllocateHosts", []interface{}{arg1})
	fake.allocateHostsMutex.Unlock()
	if fake.AllocateHostsStub != nil {
		return fake.AllocateHostsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allocateHostsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AllocateHostsCallCount() int {
	fake.allocateHostsMutex.RLock()
	defer fake.allocateHostsMutex.RUnlock()
	return len(fake.allocateHostsArgsForCall)
}

func (fake *FakeEC2API) AllocateHostsCalls(stub func(*ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error)) {
	fake.allocateHostsMutex.Lock()
	defer fake.allocateHostsMutex.Unlock()
	fake.AllocateHostsStub = stub
}

func (fake *FakeEC2API) AllocateHostsArgsForCall(i int) *ec2.AllocateHostsInput {
	fake.allocateHostsMutex.RLock()
	defer fake.allocateHostsMutex.RUnlock()
	argsForCall := fake.allocateHostsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AllocateHostsReturns(result1 *ec2.AllocateHostsOutput, result2 error) {
	fake.allocateHostsMutex.Lock()
	defer fake.allocateHostsMutex.Unlock()
	fake.AllocateHostsStub = nil
	fake.allocateHostsReturns = struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateHostsReturnsOnCall(i int, result1 *ec2.AllocateHostsOutput, result2 error) {
	fake.allocateHostsMutex.Lock()
	defer fake.allocateHostsMutex.Unlock()
	fake.AllocateHostsStub = nil
	if fake.allocateHostsReturnsOnCall == nil {
		fake.allocateHostsReturnsOnCall = make(map[int]struct {
			result1 *ec2.AllocateHostsOutput
			result2 error
		})
	}
	fake.allocateHostsReturnsOnCall[i] = struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateHostsRequest(arg1 *ec2.AllocateHostsInput) (*request.Request, *ec2.AllocateHostsOutput) {
	fake.allocateHostsRequestMutex.Lock()
	ret, specificReturn := fake.allocateHostsRequestReturnsOnCall[len(fake.allocateHostsRequestArgsForCall)]
	fake.allocateHostsRequestArgsForCall = append(fake.allocateHostsRequestArgsForCall, struct {
		arg1 *ec2.AllocateHostsInput
	}{arg1})
	fake.recordInvocation("AllocateHostsRequest", []interface{}{arg1})
	fake.allocateHostsRequestMutex.Unlock()
	if fake.AllocateHostsRequestStub != nil {
		return fake.AllocateHostsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allocateHostsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AllocateHostsRequestCallCount() int {
	fake.allocateHostsRequestMutex.RLock()
	defer fake.allocateHostsRequestMutex.RUnlock()
	return len(fake.allocateHostsRequestArgsForCall)
}

func (fake *FakeEC2API) AllocateHostsRequestCalls(stub func(*ec2.AllocateHostsInput) (*request.Request, *ec2.AllocateHostsOutput)) {
	fake.allocateHostsRequestMutex.Lock()
	defer fake.allocateHostsRequestMutex.Unlock()
	fake.AllocateHostsRequestStub = stub
}

func (fake *FakeEC2API) AllocateHostsRequestArgsForCall(i int) *ec2.AllocateHostsInput {
	fake.allocateHostsRequestMutex.RLock()
	defer fake.allocateHostsRequestMutex.RUnlock()
	argsForCall := fake.allocateHostsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AllocateHostsRequestReturns(result1 *request.Request, result2 *ec2.AllocateHostsOutput) {
	fake.allocateHostsRequestMutex.Lock()
	defer fake.allocateHostsRequestMutex.Unlock()
	fake.AllocateHostsRequestStub = nil
	fake.allocateHostsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AllocateHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateHostsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AllocateHostsOutput) {
	fake.allocateHostsRequestMutex.Lock()
	defer fake.allocateHostsRequestMutex.Unlock()
	fake.AllocateHostsRequestStub = nil
	if fake.allocateHostsRequestReturnsOnCall == nil {
		fake.allocateHostsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AllocateHostsOutput
		})
	}
	fake.allocateHostsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AllocateHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateHostsWithContext(arg1 aws.Context, arg2 *ec2.AllocateHostsInput, arg3 ...request.Option) (*ec2.AllocateHostsOutput, error) {
	fake.allocateHostsWithContextMutex.Lock()
	ret, specificReturn := fake.allocateHostsWithContextReturnsOnCall[len(fake.allocateHostsWithContextArgsForCall)]
	fake.allocateHostsWithContextArgsForCall = append(fake.allocateHostsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AllocateHostsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AllocateHostsWithContext", []interface{}{arg1, arg2, arg3})
	fake.allocateHostsWithContextMutex.Unlock()
	if fake.AllocateHostsWithContextStub != nil {
		return fake.AllocateHostsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.allocateHostsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AllocateHostsWithContextCallCount() int {
	fake.allocateHostsWithContextMutex.RLock()
	defer fake.allocateHostsWithContextMutex.RUnlock()
	return len(fake.allocateHostsWithContextArgsForCall)
}

func (fake *FakeEC2API) AllocateHostsWithContextCalls(stub func(aws.Context, *ec2.AllocateHostsInput, ...request.Option) (*ec2.AllocateHostsOutput, error)) {
	fake.allocateHostsWithContextMutex.Lock()
	defer fake.allocateHostsWithContextMutex.Unlock()
	fake.AllocateHostsWithContextStub = stub
}

func (fake *FakeEC2API) AllocateHostsWithContextArgsForCall(i int) (aws.Context, *ec2.AllocateHostsInput, []request.Option) {
	fake.allocateHostsWithContextMutex.RLock()
	defer fake.allocateHostsWithContextMutex.RUnlock()
	argsForCall := fake.allocateHostsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AllocateHostsWithContextReturns(result1 *ec2.AllocateHostsOutput, result2 error) {
	fake.allocateHostsWithContextMutex.Lock()
	defer fake.allocateHostsWithContextMutex.Unlock()
	fake.AllocateHostsWithContextStub = nil
	fake.allocateHostsWithContextReturns = struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AllocateHostsWithContextReturnsOnCall(i int, result1 *ec2.AllocateHostsOutput, result2 error) {
	fake.allocateHostsWithContextMutex.Lock()
	defer fake.allocateHostsWithContextMutex.Unlock()
	fake.AllocateHostsWithContextStub = nil
	if fake.allocateHostsWithContextReturnsOnCall == nil {
		fake.allocateHostsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AllocateHostsOutput
			result2 error
		})
	}
	fake.allocateHostsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AllocateHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetwork(arg1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Lock()
	ret, specificReturn := fake.applySecurityGroupsToClientVpnTargetNetworkReturnsOnCall[len(fake.applySecurityGroupsToClientVpnTargetNetworkArgsForCall)]
	fake.applySecurityGroupsToClientVpnTargetNetworkArgsForCall = append(fake.applySecurityGroupsToClientVpnTargetNetworkArgsForCall, struct {
		arg1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}{arg1})
	fake.recordInvocation("ApplySecurityGroupsToClientVpnTargetNetwork", []interface{}{arg1})
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Unlock()
	if fake.ApplySecurityGroupsToClientVpnTargetNetworkStub != nil {
		return fake.ApplySecurityGroupsToClientVpnTargetNetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.applySecurityGroupsToClientVpnTargetNetworkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkCallCount() int {
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkMutex.RUnlock()
	return len(fake.applySecurityGroupsToClientVpnTargetNetworkArgsForCall)
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkCalls(stub func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)) {
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkStub = stub
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkArgsForCall(i int) *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput {
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkMutex.RUnlock()
	argsForCall := fake.applySecurityGroupsToClientVpnTargetNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkReturns(result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, result2 error) {
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkStub = nil
	fake.applySecurityGroupsToClientVpnTargetNetworkReturns = struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkReturnsOnCall(i int, result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, result2 error) {
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkStub = nil
	if fake.applySecurityGroupsToClientVpnTargetNetworkReturnsOnCall == nil {
		fake.applySecurityGroupsToClientVpnTargetNetworkReturnsOnCall = make(map[int]struct {
			result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
			result2 error
		})
	}
	fake.applySecurityGroupsToClientVpnTargetNetworkReturnsOnCall[i] = struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkRequest(arg1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*request.Request, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Lock()
	ret, specificReturn := fake.applySecurityGroupsToClientVpnTargetNetworkRequestReturnsOnCall[len(fake.applySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall)]
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall = append(fake.applySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall, struct {
		arg1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	}{arg1})
	fake.recordInvocation("ApplySecurityGroupsToClientVpnTargetNetworkRequest", []interface{}{arg1})
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Unlock()
	if fake.ApplySecurityGroupsToClientVpnTargetNetworkRequestStub != nil {
		return fake.ApplySecurityGroupsToClientVpnTargetNetworkRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.applySecurityGroupsToClientVpnTargetNetworkRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkRequestCallCount() int {
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.RUnlock()
	return len(fake.applySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall)
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkRequestCalls(stub func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*request.Request, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)) {
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkRequestStub = stub
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall(i int) *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput {
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.RUnlock()
	argsForCall := fake.applySecurityGroupsToClientVpnTargetNetworkRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkRequestReturns(result1 *request.Request, result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkRequestStub = nil
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkRequestStub = nil
	if fake.applySecurityGroupsToClientVpnTargetNetworkRequestReturnsOnCall == nil {
		fake.applySecurityGroupsToClientVpnTargetNetworkRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		})
	}
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContext(arg1 aws.Context, arg2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, arg3 ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Lock()
	ret, specificReturn := fake.applySecurityGroupsToClientVpnTargetNetworkWithContextReturnsOnCall[len(fake.applySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall)]
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall = append(fake.applySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ApplySecurityGroupsToClientVpnTargetNetworkWithContext", []interface{}{arg1, arg2, arg3})
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Unlock()
	if fake.ApplySecurityGroupsToClientVpnTargetNetworkWithContextStub != nil {
		return fake.ApplySecurityGroupsToClientVpnTargetNetworkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.applySecurityGroupsToClientVpnTargetNetworkWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContextCallCount() int {
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.RUnlock()
	return len(fake.applySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall)
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContextCalls(stub func(aws.Context, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, ...request.Option) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)) {
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkWithContextStub = stub
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall(i int) (aws.Context, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, []request.Option) {
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.RUnlock()
	argsForCall := fake.applySecurityGroupsToClientVpnTargetNetworkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContextReturns(result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, result2 error) {
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkWithContextStub = nil
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextReturns = struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContextReturnsOnCall(i int, result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, result2 error) {
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.ApplySecurityGroupsToClientVpnTargetNetworkWithContextStub = nil
	if fake.applySecurityGroupsToClientVpnTargetNetworkWithContextReturnsOnCall == nil {
		fake.applySecurityGroupsToClientVpnTargetNetworkWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
			result2 error
		})
	}
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignIpv6Addresses(arg1 *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
	fake.assignIpv6AddressesMutex.Lock()
	ret, specificReturn := fake.assignIpv6AddressesReturnsOnCall[len(fake.assignIpv6AddressesArgsForCall)]
	fake.assignIpv6AddressesArgsForCall = append(fake.assignIpv6AddressesArgsForCall, struct {
		arg1 *ec2.AssignIpv6AddressesInput
	}{arg1})
	fake.recordInvocation("AssignIpv6Addresses", []interface{}{arg1})
	fake.assignIpv6AddressesMutex.Unlock()
	if fake.AssignIpv6AddressesStub != nil {
		return fake.AssignIpv6AddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assignIpv6AddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssignIpv6AddressesCallCount() int {
	fake.assignIpv6AddressesMutex.RLock()
	defer fake.assignIpv6AddressesMutex.RUnlock()
	return len(fake.assignIpv6AddressesArgsForCall)
}

func (fake *FakeEC2API) AssignIpv6AddressesCalls(stub func(*ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error)) {
	fake.assignIpv6AddressesMutex.Lock()
	defer fake.assignIpv6AddressesMutex.Unlock()
	fake.AssignIpv6AddressesStub = stub
}

func (fake *FakeEC2API) AssignIpv6AddressesArgsForCall(i int) *ec2.AssignIpv6AddressesInput {
	fake.assignIpv6AddressesMutex.RLock()
	defer fake.assignIpv6AddressesMutex.RUnlock()
	argsForCall := fake.assignIpv6AddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssignIpv6AddressesReturns(result1 *ec2.AssignIpv6AddressesOutput, result2 error) {
	fake.assignIpv6AddressesMutex.Lock()
	defer fake.assignIpv6AddressesMutex.Unlock()
	fake.AssignIpv6AddressesStub = nil
	fake.assignIpv6AddressesReturns = struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignIpv6AddressesReturnsOnCall(i int, result1 *ec2.AssignIpv6AddressesOutput, result2 error) {
	fake.assignIpv6AddressesMutex.Lock()
	defer fake.assignIpv6AddressesMutex.Unlock()
	fake.AssignIpv6AddressesStub = nil
	if fake.assignIpv6AddressesReturnsOnCall == nil {
		fake.assignIpv6AddressesReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssignIpv6AddressesOutput
			result2 error
		})
	}
	fake.assignIpv6AddressesReturnsOnCall[i] = struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignIpv6AddressesRequest(arg1 *ec2.AssignIpv6AddressesInput) (*request.Request, *ec2.AssignIpv6AddressesOutput) {
	fake.assignIpv6AddressesRequestMutex.Lock()
	ret, specificReturn := fake.assignIpv6AddressesRequestReturnsOnCall[len(fake.assignIpv6AddressesRequestArgsForCall)]
	fake.assignIpv6AddressesRequestArgsForCall = append(fake.assignIpv6AddressesRequestArgsForCall, struct {
		arg1 *ec2.AssignIpv6AddressesInput
	}{arg1})
	fake.recordInvocation("AssignIpv6AddressesRequest", []interface{}{arg1})
	fake.assignIpv6AddressesRequestMutex.Unlock()
	if fake.AssignIpv6AddressesRequestStub != nil {
		return fake.AssignIpv6AddressesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assignIpv6AddressesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssignIpv6AddressesRequestCallCount() int {
	fake.assignIpv6AddressesRequestMutex.RLock()
	defer fake.assignIpv6AddressesRequestMutex.RUnlock()
	return len(fake.assignIpv6AddressesRequestArgsForCall)
}

func (fake *FakeEC2API) AssignIpv6AddressesRequestCalls(stub func(*ec2.AssignIpv6AddressesInput) (*request.Request, *ec2.AssignIpv6AddressesOutput)) {
	fake.assignIpv6AddressesRequestMutex.Lock()
	defer fake.assignIpv6AddressesRequestMutex.Unlock()
	fake.AssignIpv6AddressesRequestStub = stub
}

func (fake *FakeEC2API) AssignIpv6AddressesRequestArgsForCall(i int) *ec2.AssignIpv6AddressesInput {
	fake.assignIpv6AddressesRequestMutex.RLock()
	defer fake.assignIpv6AddressesRequestMutex.RUnlock()
	argsForCall := fake.assignIpv6AddressesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssignIpv6AddressesRequestReturns(result1 *request.Request, result2 *ec2.AssignIpv6AddressesOutput) {
	fake.assignIpv6AddressesRequestMutex.Lock()
	defer fake.assignIpv6AddressesRequestMutex.Unlock()
	fake.AssignIpv6AddressesRequestStub = nil
	fake.assignIpv6AddressesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssignIpv6AddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssignIpv6AddressesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssignIpv6AddressesOutput) {
	fake.assignIpv6AddressesRequestMutex.Lock()
	defer fake.assignIpv6AddressesRequestMutex.Unlock()
	fake.AssignIpv6AddressesRequestStub = nil
	if fake.assignIpv6AddressesRequestReturnsOnCall == nil {
		fake.assignIpv6AddressesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssignIpv6AddressesOutput
		})
	}
	fake.assignIpv6AddressesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssignIpv6AddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssignIpv6AddressesWithContext(arg1 aws.Context, arg2 *ec2.AssignIpv6AddressesInput, arg3 ...request.Option) (*ec2.AssignIpv6AddressesOutput, error) {
	fake.assignIpv6AddressesWithContextMutex.Lock()
	ret, specificReturn := fake.assignIpv6AddressesWithContextReturnsOnCall[len(fake.assignIpv6AddressesWithContextArgsForCall)]
	fake.assignIpv6AddressesWithContextArgsForCall = append(fake.assignIpv6AddressesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssignIpv6AddressesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssignIpv6AddressesWithContext", []interface{}{arg1, arg2, arg3})
	fake.assignIpv6AddressesWithContextMutex.Unlock()
	if fake.AssignIpv6AddressesWithContextStub != nil {
		return fake.AssignIpv6AddressesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assignIpv6AddressesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssignIpv6AddressesWithContextCallCount() int {
	fake.assignIpv6AddressesWithContextMutex.RLock()
	defer fake.assignIpv6AddressesWithContextMutex.RUnlock()
	return len(fake.assignIpv6AddressesWithContextArgsForCall)
}

func (fake *FakeEC2API) AssignIpv6AddressesWithContextCalls(stub func(aws.Context, *ec2.AssignIpv6AddressesInput, ...request.Option) (*ec2.AssignIpv6AddressesOutput, error)) {
	fake.assignIpv6AddressesWithContextMutex.Lock()
	defer fake.assignIpv6AddressesWithContextMutex.Unlock()
	fake.AssignIpv6AddressesWithContextStub = stub
}

func (fake *FakeEC2API) AssignIpv6AddressesWithContextArgsForCall(i int) (aws.Context, *ec2.AssignIpv6AddressesInput, []request.Option) {
	fake.assignIpv6AddressesWithContextMutex.RLock()
	defer fake.assignIpv6AddressesWithContextMutex.RUnlock()
	argsForCall := fake.assignIpv6AddressesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssignIpv6AddressesWithContextReturns(result1 *ec2.AssignIpv6AddressesOutput, result2 error) {
	fake.assignIpv6AddressesWithContextMutex.Lock()
	defer fake.assignIpv6AddressesWithContextMutex.Unlock()
	fake.AssignIpv6AddressesWithContextStub = nil
	fake.assignIpv6AddressesWithContextReturns = struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignIpv6AddressesWithContextReturnsOnCall(i int, result1 *ec2.AssignIpv6AddressesOutput, result2 error) {
	fake.assignIpv6AddressesWithContextMutex.Lock()
	defer fake.assignIpv6AddressesWithContextMutex.Unlock()
	fake.AssignIpv6AddressesWithContextStub = nil
	if fake.assignIpv6AddressesWithContextReturnsOnCall == nil {
		fake.assignIpv6AddressesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssignIpv6AddressesOutput
			result2 error
		})
	}
	fake.assignIpv6AddressesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignPrivateIpAddresses(arg1 *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
	fake.assignPrivateIpAddressesMutex.Lock()
	ret, specificReturn := fake.assignPrivateIpAddressesReturnsOnCall[len(fake.assignPrivateIpAddressesArgsForCall)]
	fake.assignPrivateIpAddressesArgsForCall = append(fake.assignPrivateIpAddressesArgsForCall, struct {
		arg1 *ec2.AssignPrivateIpAddressesInput
	}{arg1})
	fake.recordInvocation("AssignPrivateIpAddresses", []interface{}{arg1})
	fake.assignPrivateIpAddressesMutex.Unlock()
	if fake.AssignPrivateIpAddressesStub != nil {
		return fake.AssignPrivateIpAddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assignPrivateIpAddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssignPrivateIpAddressesCallCount() int {
	fake.assignPrivateIpAddressesMutex.RLock()
	defer fake.assignPrivateIpAddressesMutex.RUnlock()
	return len(fake.assignPrivateIpAddressesArgsForCall)
}

func (fake *FakeEC2API) AssignPrivateIpAddressesCalls(stub func(*ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error)) {
	fake.assignPrivateIpAddressesMutex.Lock()
	defer fake.assignPrivateIpAddressesMutex.Unlock()
	fake.AssignPrivateIpAddressesStub = stub
}

func (fake *FakeEC2API) AssignPrivateIpAddressesArgsForCall(i int) *ec2.AssignPrivateIpAddressesInput {
	fake.assignPrivateIpAddressesMutex.RLock()
	defer fake.assignPrivateIpAddressesMutex.RUnlock()
	argsForCall := fake.assignPrivateIpAddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssignPrivateIpAddressesReturns(result1 *ec2.AssignPrivateIpAddressesOutput, result2 error) {
	fake.assignPrivateIpAddressesMutex.Lock()
	defer fake.assignPrivateIpAddressesMutex.Unlock()
	fake.AssignPrivateIpAddressesStub = nil
	fake.assignPrivateIpAddressesReturns = struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignPrivateIpAddressesReturnsOnCall(i int, result1 *ec2.AssignPrivateIpAddressesOutput, result2 error) {
	fake.assignPrivateIpAddressesMutex.Lock()
	defer fake.assignPrivateIpAddressesMutex.Unlock()
	fake.AssignPrivateIpAddressesStub = nil
	if fake.assignPrivateIpAddressesReturnsOnCall == nil {
		fake.assignPrivateIpAddressesReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssignPrivateIpAddressesOutput
			result2 error
		})
	}
	fake.assignPrivateIpAddressesReturnsOnCall[i] = struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignPrivateIpAddressesRequest(arg1 *ec2.AssignPrivateIpAddressesInput) (*request.Request, *ec2.AssignPrivateIpAddressesOutput) {
	fake.assignPrivateIpAddressesRequestMutex.Lock()
	ret, specificReturn := fake.assignPrivateIpAddressesRequestReturnsOnCall[len(fake.assignPrivateIpAddressesRequestArgsForCall)]
	fake.assignPrivateIpAddressesRequestArgsForCall = append(fake.assignPrivateIpAddressesRequestArgsForCall, struct {
		arg1 *ec2.AssignPrivateIpAddressesInput
	}{arg1})
	fake.recordInvocation("AssignPrivateIpAddressesRequest", []interface{}{arg1})
	fake.assignPrivateIpAddressesRequestMutex.Unlock()
	if fake.AssignPrivateIpAddressesRequestStub != nil {
		return fake.AssignPrivateIpAddressesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assignPrivateIpAddressesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssignPrivateIpAddressesRequestCallCount() int {
	fake.assignPrivateIpAddressesRequestMutex.RLock()
	defer fake.assignPrivateIpAddressesRequestMutex.RUnlock()
	return len(fake.assignPrivateIpAddressesRequestArgsForCall)
}

func (fake *FakeEC2API) AssignPrivateIpAddressesRequestCalls(stub func(*ec2.AssignPrivateIpAddressesInput) (*request.Request, *ec2.AssignPrivateIpAddressesOutput)) {
	fake.assignPrivateIpAddressesRequestMutex.Lock()
	defer fake.assignPrivateIpAddressesRequestMutex.Unlock()
	fake.AssignPrivateIpAddressesRequestStub = stub
}

func (fake *FakeEC2API) AssignPrivateIpAddressesRequestArgsForCall(i int) *ec2.AssignPrivateIpAddressesInput {
	fake.assignPrivateIpAddressesRequestMutex.RLock()
	defer fake.assignPrivateIpAddressesRequestMutex.RUnlock()
	argsForCall := fake.assignPrivateIpAddressesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssignPrivateIpAddressesRequestReturns(result1 *request.Request, result2 *ec2.AssignPrivateIpAddressesOutput) {
	fake.assignPrivateIpAddressesRequestMutex.Lock()
	defer fake.assignPrivateIpAddressesRequestMutex.Unlock()
	fake.AssignPrivateIpAddressesRequestStub = nil
	fake.assignPrivateIpAddressesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssignPrivateIpAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssignPrivateIpAddressesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssignPrivateIpAddressesOutput) {
	fake.assignPrivateIpAddressesRequestMutex.Lock()
	defer fake.assignPrivateIpAddressesRequestMutex.Unlock()
	fake.AssignPrivateIpAddressesRequestStub = nil
	if fake.assignPrivateIpAddressesRequestReturnsOnCall == nil {
		fake.assignPrivateIpAddressesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssignPrivateIpAddressesOutput
		})
	}
	fake.assignPrivateIpAddressesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssignPrivateIpAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssignPrivateIpAddressesWithContext(arg1 aws.Context, arg2 *ec2.AssignPrivateIpAddressesInput, arg3 ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error) {
	fake.assignPrivateIpAddressesWithContextMutex.Lock()
	ret, specificReturn := fake.assignPrivateIpAddressesWithContextReturnsOnCall[len(fake.assignPrivateIpAddressesWithContextArgsForCall)]
	fake.assignPrivateIpAddressesWithContextArgsForCall = append(fake.assignPrivateIpAddressesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssignPrivateIpAddressesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssignPrivateIpAddressesWithContext", []interface{}{arg1, arg2, arg3})
	fake.assignPrivateIpAddressesWithContextMutex.Unlock()
	if fake.AssignPrivateIpAddressesWithContextStub != nil {
		return fake.AssignPrivateIpAddressesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.assignPrivateIpAddressesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssignPrivateIpAddressesWithContextCallCount() int {
	fake.assignPrivateIpAddressesWithContextMutex.RLock()
	defer fake.assignPrivateIpAddressesWithContextMutex.RUnlock()
	return len(fake.assignPrivateIpAddressesWithContextArgsForCall)
}

func (fake *FakeEC2API) AssignPrivateIpAddressesWithContextCalls(stub func(aws.Context, *ec2.AssignPrivateIpAddressesInput, ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error)) {
	fake.assignPrivateIpAddressesWithContextMutex.Lock()
	defer fake.assignPrivateIpAddressesWithContextMutex.Unlock()
	fake.AssignPrivateIpAddressesWithContextStub = stub
}

func (fake *FakeEC2API) AssignPrivateIpAddressesWithContextArgsForCall(i int) (aws.Context, *ec2.AssignPrivateIpAddressesInput, []request.Option) {
	fake.assignPrivateIpAddressesWithContextMutex.RLock()
	defer fake.assignPrivateIpAddressesWithContextMutex.RUnlock()
	argsForCall := fake.assignPrivateIpAddressesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssignPrivateIpAddressesWithContextReturns(result1 *ec2.AssignPrivateIpAddressesOutput, result2 error) {
	fake.assignPrivateIpAddressesWithContextMutex.Lock()
	defer fake.assignPrivateIpAddressesWithContextMutex.Unlock()
	fake.AssignPrivateIpAddressesWithContextStub = nil
	fake.assignPrivateIpAddressesWithContextReturns = struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssignPrivateIpAddressesWithContextReturnsOnCall(i int, result1 *ec2.AssignPrivateIpAddressesOutput, result2 error) {
	fake.assignPrivateIpAddressesWithContextMutex.Lock()
	defer fake.assignPrivateIpAddressesWithContextMutex.Unlock()
	fake.AssignPrivateIpAddressesWithContextStub = nil
	if fake.assignPrivateIpAddressesWithContextReturnsOnCall == nil {
		fake.assignPrivateIpAddressesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssignPrivateIpAddressesOutput
			result2 error
		})
	}
	fake.assignPrivateIpAddressesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateAddress(arg1 *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	fake.associateAddressMutex.Lock()
	ret, specificReturn := fake.associateAddressReturnsOnCall[len(fake.associateAddressArgsForCall)]
	fake.associateAddressArgsForCall = append(fake.associateAddressArgsForCall, struct {
		arg1 *ec2.AssociateAddressInput
	}{arg1})
	fake.recordInvocation("AssociateAddress", []interface{}{arg1})
	fake.associateAddressMutex.Unlock()
	if fake.AssociateAddressStub != nil {
		return fake.AssociateAddressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateAddressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateAddressCallCount() int {
	fake.associateAddressMutex.RLock()
	defer fake.associateAddressMutex.RUnlock()
	return len(fake.associateAddressArgsForCall)
}

func (fake *FakeEC2API) AssociateAddressCalls(stub func(*ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error)) {
	fake.associateAddressMutex.Lock()
	defer fake.associateAddressMutex.Unlock()
	fake.AssociateAddressStub = stub
}

func (fake *FakeEC2API) AssociateAddressArgsForCall(i int) *ec2.AssociateAddressInput {
	fake.associateAddressMutex.RLock()
	defer fake.associateAddressMutex.RUnlock()
	argsForCall := fake.associateAddressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateAddressReturns(result1 *ec2.AssociateAddressOutput, result2 error) {
	fake.associateAddressMutex.Lock()
	defer fake.associateAddressMutex.Unlock()
	fake.AssociateAddressStub = nil
	fake.associateAddressReturns = struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateAddressReturnsOnCall(i int, result1 *ec2.AssociateAddressOutput, result2 error) {
	fake.associateAddressMutex.Lock()
	defer fake.associateAddressMutex.Unlock()
	fake.AssociateAddressStub = nil
	if fake.associateAddressReturnsOnCall == nil {
		fake.associateAddressReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateAddressOutput
			result2 error
		})
	}
	fake.associateAddressReturnsOnCall[i] = struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateAddressRequest(arg1 *ec2.AssociateAddressInput) (*request.Request, *ec2.AssociateAddressOutput) {
	fake.associateAddressRequestMutex.Lock()
	ret, specificReturn := fake.associateAddressRequestReturnsOnCall[len(fake.associateAddressRequestArgsForCall)]
	fake.associateAddressRequestArgsForCall = append(fake.associateAddressRequestArgsForCall, struct {
		arg1 *ec2.AssociateAddressInput
	}{arg1})
	fake.recordInvocation("AssociateAddressRequest", []interface{}{arg1})
	fake.associateAddressRequestMutex.Unlock()
	if fake.AssociateAddressRequestStub != nil {
		return fake.AssociateAddressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateAddressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateAddressRequestCallCount() int {
	fake.associateAddressRequestMutex.RLock()
	defer fake.associateAddressRequestMutex.RUnlock()
	return len(fake.associateAddressRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateAddressRequestCalls(stub func(*ec2.AssociateAddressInput) (*request.Request, *ec2.AssociateAddressOutput)) {
	fake.associateAddressRequestMutex.Lock()
	defer fake.associateAddressRequestMutex.Unlock()
	fake.AssociateAddressRequestStub = stub
}

func (fake *FakeEC2API) AssociateAddressRequestArgsForCall(i int) *ec2.AssociateAddressInput {
	fake.associateAddressRequestMutex.RLock()
	defer fake.associateAddressRequestMutex.RUnlock()
	argsForCall := fake.associateAddressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateAddressRequestReturns(result1 *request.Request, result2 *ec2.AssociateAddressOutput) {
	fake.associateAddressRequestMutex.Lock()
	defer fake.associateAddressRequestMutex.Unlock()
	fake.AssociateAddressRequestStub = nil
	fake.associateAddressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateAddressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateAddressOutput) {
	fake.associateAddressRequestMutex.Lock()
	defer fake.associateAddressRequestMutex.Unlock()
	fake.AssociateAddressRequestStub = nil
	if fake.associateAddressRequestReturnsOnCall == nil {
		fake.associateAddressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateAddressOutput
		})
	}
	fake.associateAddressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateAddressWithContext(arg1 aws.Context, arg2 *ec2.AssociateAddressInput, arg3 ...request.Option) (*ec2.AssociateAddressOutput, error) {
	fake.associateAddressWithContextMutex.Lock()
	ret, specificReturn := fake.associateAddressWithContextReturnsOnCall[len(fake.associateAddressWithContextArgsForCall)]
	fake.associateAddressWithContextArgsForCall = append(fake.associateAddressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateAddressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateAddressWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateAddressWithContextMutex.Unlock()
	if fake.AssociateAddressWithContextStub != nil {
		return fake.AssociateAddressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateAddressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateAddressWithContextCallCount() int {
	fake.associateAddressWithContextMutex.RLock()
	defer fake.associateAddressWithContextMutex.RUnlock()
	return len(fake.associateAddressWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateAddressWithContextCalls(stub func(aws.Context, *ec2.AssociateAddressInput, ...request.Option) (*ec2.AssociateAddressOutput, error)) {
	fake.associateAddressWithContextMutex.Lock()
	defer fake.associateAddressWithContextMutex.Unlock()
	fake.AssociateAddressWithContextStub = stub
}

func (fake *FakeEC2API) AssociateAddressWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateAddressInput, []request.Option) {
	fake.associateAddressWithContextMutex.RLock()
	defer fake.associateAddressWithContextMutex.RUnlock()
	argsForCall := fake.associateAddressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateAddressWithContextReturns(result1 *ec2.AssociateAddressOutput, result2 error) {
	fake.associateAddressWithContextMutex.Lock()
	defer fake.associateAddressWithContextMutex.Unlock()
	fake.AssociateAddressWithContextStub = nil
	fake.associateAddressWithContextReturns = struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateAddressWithContextReturnsOnCall(i int, result1 *ec2.AssociateAddressOutput, result2 error) {
	fake.associateAddressWithContextMutex.Lock()
	defer fake.associateAddressWithContextMutex.Unlock()
	fake.AssociateAddressWithContextStub = nil
	if fake.associateAddressWithContextReturnsOnCall == nil {
		fake.associateAddressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateAddressOutput
			result2 error
		})
	}
	fake.associateAddressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetwork(arg1 *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	fake.associateClientVpnTargetNetworkMutex.Lock()
	ret, specificReturn := fake.associateClientVpnTargetNetworkReturnsOnCall[len(fake.associateClientVpnTargetNetworkArgsForCall)]
	fake.associateClientVpnTargetNetworkArgsForCall = append(fake.associateClientVpnTargetNetworkArgsForCall, struct {
		arg1 *ec2.AssociateClientVpnTargetNetworkInput
	}{arg1})
	fake.recordInvocation("AssociateClientVpnTargetNetwork", []interface{}{arg1})
	fake.associateClientVpnTargetNetworkMutex.Unlock()
	if fake.AssociateClientVpnTargetNetworkStub != nil {
		return fake.AssociateClientVpnTargetNetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateClientVpnTargetNetworkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkCallCount() int {
	fake.associateClientVpnTargetNetworkMutex.RLock()
	defer fake.associateClientVpnTargetNetworkMutex.RUnlock()
	return len(fake.associateClientVpnTargetNetworkArgsForCall)
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkCalls(stub func(*ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error)) {
	fake.associateClientVpnTargetNetworkMutex.Lock()
	defer fake.associateClientVpnTargetNetworkMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkStub = stub
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkArgsForCall(i int) *ec2.AssociateClientVpnTargetNetworkInput {
	fake.associateClientVpnTargetNetworkMutex.RLock()
	defer fake.associateClientVpnTargetNetworkMutex.RUnlock()
	argsForCall := fake.associateClientVpnTargetNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkReturns(result1 *ec2.AssociateClientVpnTargetNetworkOutput, result2 error) {
	fake.associateClientVpnTargetNetworkMutex.Lock()
	defer fake.associateClientVpnTargetNetworkMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkStub = nil
	fake.associateClientVpnTargetNetworkReturns = struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkReturnsOnCall(i int, result1 *ec2.AssociateClientVpnTargetNetworkOutput, result2 error) {
	fake.associateClientVpnTargetNetworkMutex.Lock()
	defer fake.associateClientVpnTargetNetworkMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkStub = nil
	if fake.associateClientVpnTargetNetworkReturnsOnCall == nil {
		fake.associateClientVpnTargetNetworkReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateClientVpnTargetNetworkOutput
			result2 error
		})
	}
	fake.associateClientVpnTargetNetworkReturnsOnCall[i] = struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkRequest(arg1 *ec2.AssociateClientVpnTargetNetworkInput) (*request.Request, *ec2.AssociateClientVpnTargetNetworkOutput) {
	fake.associateClientVpnTargetNetworkRequestMutex.Lock()
	ret, specificReturn := fake.associateClientVpnTargetNetworkRequestReturnsOnCall[len(fake.associateClientVpnTargetNetworkRequestArgsForCall)]
	fake.associateClientVpnTargetNetworkRequestArgsForCall = append(fake.associateClientVpnTargetNetworkRequestArgsForCall, struct {
		arg1 *ec2.AssociateClientVpnTargetNetworkInput
	}{arg1})
	fake.recordInvocation("AssociateClientVpnTargetNetworkRequest", []interface{}{arg1})
	fake.associateClientVpnTargetNetworkRequestMutex.Unlock()
	if fake.AssociateClientVpnTargetNetworkRequestStub != nil {
		return fake.AssociateClientVpnTargetNetworkRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateClientVpnTargetNetworkRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkRequestCallCount() int {
	fake.associateClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.associateClientVpnTargetNetworkRequestMutex.RUnlock()
	return len(fake.associateClientVpnTargetNetworkRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkRequestCalls(stub func(*ec2.AssociateClientVpnTargetNetworkInput) (*request.Request, *ec2.AssociateClientVpnTargetNetworkOutput)) {
	fake.associateClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.associateClientVpnTargetNetworkRequestMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkRequestStub = stub
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkRequestArgsForCall(i int) *ec2.AssociateClientVpnTargetNetworkInput {
	fake.associateClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.associateClientVpnTargetNetworkRequestMutex.RUnlock()
	argsForCall := fake.associateClientVpnTargetNetworkRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkRequestReturns(result1 *request.Request, result2 *ec2.AssociateClientVpnTargetNetworkOutput) {
	fake.associateClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.associateClientVpnTargetNetworkRequestMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkRequestStub = nil
	fake.associateClientVpnTargetNetworkRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateClientVpnTargetNetworkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateClientVpnTargetNetworkOutput) {
	fake.associateClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.associateClientVpnTargetNetworkRequestMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkRequestStub = nil
	if fake.associateClientVpnTargetNetworkRequestReturnsOnCall == nil {
		fake.associateClientVpnTargetNetworkRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateClientVpnTargetNetworkOutput
		})
	}
	fake.associateClientVpnTargetNetworkRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateClientVpnTargetNetworkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkWithContext(arg1 aws.Context, arg2 *ec2.AssociateClientVpnTargetNetworkInput, arg3 ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	fake.associateClientVpnTargetNetworkWithContextMutex.Lock()
	ret, specificReturn := fake.associateClientVpnTargetNetworkWithContextReturnsOnCall[len(fake.associateClientVpnTargetNetworkWithContextArgsForCall)]
	fake.associateClientVpnTargetNetworkWithContextArgsForCall = append(fake.associateClientVpnTargetNetworkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateClientVpnTargetNetworkInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateClientVpnTargetNetworkWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateClientVpnTargetNetworkWithContextMutex.Unlock()
	if fake.AssociateClientVpnTargetNetworkWithContextStub != nil {
		return fake.AssociateClientVpnTargetNetworkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateClientVpnTargetNetworkWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkWithContextCallCount() int {
	fake.associateClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.associateClientVpnTargetNetworkWithContextMutex.RUnlock()
	return len(fake.associateClientVpnTargetNetworkWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkWithContextCalls(stub func(aws.Context, *ec2.AssociateClientVpnTargetNetworkInput, ...request.Option) (*ec2.AssociateClientVpnTargetNetworkOutput, error)) {
	fake.associateClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.associateClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkWithContextStub = stub
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateClientVpnTargetNetworkInput, []request.Option) {
	fake.associateClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.associateClientVpnTargetNetworkWithContextMutex.RUnlock()
	argsForCall := fake.associateClientVpnTargetNetworkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkWithContextReturns(result1 *ec2.AssociateClientVpnTargetNetworkOutput, result2 error) {
	fake.associateClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.associateClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkWithContextStub = nil
	fake.associateClientVpnTargetNetworkWithContextReturns = struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateClientVpnTargetNetworkWithContextReturnsOnCall(i int, result1 *ec2.AssociateClientVpnTargetNetworkOutput, result2 error) {
	fake.associateClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.associateClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.AssociateClientVpnTargetNetworkWithContextStub = nil
	if fake.associateClientVpnTargetNetworkWithContextReturnsOnCall == nil {
		fake.associateClientVpnTargetNetworkWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateClientVpnTargetNetworkOutput
			result2 error
		})
	}
	fake.associateClientVpnTargetNetworkWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateDhcpOptions(arg1 *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
	fake.associateDhcpOptionsMutex.Lock()
	ret, specificReturn := fake.associateDhcpOptionsReturnsOnCall[len(fake.associateDhcpOptionsArgsForCall)]
	fake.associateDhcpOptionsArgsForCall = append(fake.associateDhcpOptionsArgsForCall, struct {
		arg1 *ec2.AssociateDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("AssociateDhcpOptions", []interface{}{arg1})
	fake.associateDhcpOptionsMutex.Unlock()
	if fake.AssociateDhcpOptionsStub != nil {
		return fake.AssociateDhcpOptionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateDhcpOptionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateDhcpOptionsCallCount() int {
	fake.associateDhcpOptionsMutex.RLock()
	defer fake.associateDhcpOptionsMutex.RUnlock()
	return len(fake.associateDhcpOptionsArgsForCall)
}

func (fake *FakeEC2API) AssociateDhcpOptionsCalls(stub func(*ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error)) {
	fake.associateDhcpOptionsMutex.Lock()
	defer fake.associateDhcpOptionsMutex.Unlock()
	fake.AssociateDhcpOptionsStub = stub
}

func (fake *FakeEC2API) AssociateDhcpOptionsArgsForCall(i int) *ec2.AssociateDhcpOptionsInput {
	fake.associateDhcpOptionsMutex.RLock()
	defer fake.associateDhcpOptionsMutex.RUnlock()
	argsForCall := fake.associateDhcpOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateDhcpOptionsReturns(result1 *ec2.AssociateDhcpOptionsOutput, result2 error) {
	fake.associateDhcpOptionsMutex.Lock()
	defer fake.associateDhcpOptionsMutex.Unlock()
	fake.AssociateDhcpOptionsStub = nil
	fake.associateDhcpOptionsReturns = struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateDhcpOptionsReturnsOnCall(i int, result1 *ec2.AssociateDhcpOptionsOutput, result2 error) {
	fake.associateDhcpOptionsMutex.Lock()
	defer fake.associateDhcpOptionsMutex.Unlock()
	fake.AssociateDhcpOptionsStub = nil
	if fake.associateDhcpOptionsReturnsOnCall == nil {
		fake.associateDhcpOptionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateDhcpOptionsOutput
			result2 error
		})
	}
	fake.associateDhcpOptionsReturnsOnCall[i] = struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateDhcpOptionsRequest(arg1 *ec2.AssociateDhcpOptionsInput) (*request.Request, *ec2.AssociateDhcpOptionsOutput) {
	fake.associateDhcpOptionsRequestMutex.Lock()
	ret, specificReturn := fake.associateDhcpOptionsRequestReturnsOnCall[len(fake.associateDhcpOptionsRequestArgsForCall)]
	fake.associateDhcpOptionsRequestArgsForCall = append(fake.associateDhcpOptionsRequestArgsForCall, struct {
		arg1 *ec2.AssociateDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("AssociateDhcpOptionsRequest", []interface{}{arg1})
	fake.associateDhcpOptionsRequestMutex.Unlock()
	if fake.AssociateDhcpOptionsRequestStub != nil {
		return fake.AssociateDhcpOptionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateDhcpOptionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateDhcpOptionsRequestCallCount() int {
	fake.associateDhcpOptionsRequestMutex.RLock()
	defer fake.associateDhcpOptionsRequestMutex.RUnlock()
	return len(fake.associateDhcpOptionsRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateDhcpOptionsRequestCalls(stub func(*ec2.AssociateDhcpOptionsInput) (*request.Request, *ec2.AssociateDhcpOptionsOutput)) {
	fake.associateDhcpOptionsRequestMutex.Lock()
	defer fake.associateDhcpOptionsRequestMutex.Unlock()
	fake.AssociateDhcpOptionsRequestStub = stub
}

func (fake *FakeEC2API) AssociateDhcpOptionsRequestArgsForCall(i int) *ec2.AssociateDhcpOptionsInput {
	fake.associateDhcpOptionsRequestMutex.RLock()
	defer fake.associateDhcpOptionsRequestMutex.RUnlock()
	argsForCall := fake.associateDhcpOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateDhcpOptionsRequestReturns(result1 *request.Request, result2 *ec2.AssociateDhcpOptionsOutput) {
	fake.associateDhcpOptionsRequestMutex.Lock()
	defer fake.associateDhcpOptionsRequestMutex.Unlock()
	fake.AssociateDhcpOptionsRequestStub = nil
	fake.associateDhcpOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateDhcpOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateDhcpOptionsOutput) {
	fake.associateDhcpOptionsRequestMutex.Lock()
	defer fake.associateDhcpOptionsRequestMutex.Unlock()
	fake.AssociateDhcpOptionsRequestStub = nil
	if fake.associateDhcpOptionsRequestReturnsOnCall == nil {
		fake.associateDhcpOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateDhcpOptionsOutput
		})
	}
	fake.associateDhcpOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateDhcpOptionsWithContext(arg1 aws.Context, arg2 *ec2.AssociateDhcpOptionsInput, arg3 ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error) {
	fake.associateDhcpOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.associateDhcpOptionsWithContextReturnsOnCall[len(fake.associateDhcpOptionsWithContextArgsForCall)]
	fake.associateDhcpOptionsWithContextArgsForCall = append(fake.associateDhcpOptionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateDhcpOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateDhcpOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateDhcpOptionsWithContextMutex.Unlock()
	if fake.AssociateDhcpOptionsWithContextStub != nil {
		return fake.AssociateDhcpOptionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateDhcpOptionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateDhcpOptionsWithContextCallCount() int {
	fake.associateDhcpOptionsWithContextMutex.RLock()
	defer fake.associateDhcpOptionsWithContextMutex.RUnlock()
	return len(fake.associateDhcpOptionsWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateDhcpOptionsWithContextCalls(stub func(aws.Context, *ec2.AssociateDhcpOptionsInput, ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error)) {
	fake.associateDhcpOptionsWithContextMutex.Lock()
	defer fake.associateDhcpOptionsWithContextMutex.Unlock()
	fake.AssociateDhcpOptionsWithContextStub = stub
}

func (fake *FakeEC2API) AssociateDhcpOptionsWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateDhcpOptionsInput, []request.Option) {
	fake.associateDhcpOptionsWithContextMutex.RLock()
	defer fake.associateDhcpOptionsWithContextMutex.RUnlock()
	argsForCall := fake.associateDhcpOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateDhcpOptionsWithContextReturns(result1 *ec2.AssociateDhcpOptionsOutput, result2 error) {
	fake.associateDhcpOptionsWithContextMutex.Lock()
	defer fake.associateDhcpOptionsWithContextMutex.Unlock()
	fake.AssociateDhcpOptionsWithContextStub = nil
	fake.associateDhcpOptionsWithContextReturns = struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateDhcpOptionsWithContextReturnsOnCall(i int, result1 *ec2.AssociateDhcpOptionsOutput, result2 error) {
	fake.associateDhcpOptionsWithContextMutex.Lock()
	defer fake.associateDhcpOptionsWithContextMutex.Unlock()
	fake.AssociateDhcpOptionsWithContextStub = nil
	if fake.associateDhcpOptionsWithContextReturnsOnCall == nil {
		fake.associateDhcpOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateDhcpOptionsOutput
			result2 error
		})
	}
	fake.associateDhcpOptionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateIamInstanceProfile(arg1 *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
	fake.associateIamInstanceProfileMutex.Lock()
	ret, specificReturn := fake.associateIamInstanceProfileReturnsOnCall[len(fake.associateIamInstanceProfileArgsForCall)]
	fake.associateIamInstanceProfileArgsForCall = append(fake.associateIamInstanceProfileArgsForCall, struct {
		arg1 *ec2.AssociateIamInstanceProfileInput
	}{arg1})
	fake.recordInvocation("AssociateIamInstanceProfile", []interface{}{arg1})
	fake.associateIamInstanceProfileMutex.Unlock()
	if fake.AssociateIamInstanceProfileStub != nil {
		return fake.AssociateIamInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateIamInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateIamInstanceProfileCallCount() int {
	fake.associateIamInstanceProfileMutex.RLock()
	defer fake.associateIamInstanceProfileMutex.RUnlock()
	return len(fake.associateIamInstanceProfileArgsForCall)
}

func (fake *FakeEC2API) AssociateIamInstanceProfileCalls(stub func(*ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error)) {
	fake.associateIamInstanceProfileMutex.Lock()
	defer fake.associateIamInstanceProfileMutex.Unlock()
	fake.AssociateIamInstanceProfileStub = stub
}

func (fake *FakeEC2API) AssociateIamInstanceProfileArgsForCall(i int) *ec2.AssociateIamInstanceProfileInput {
	fake.associateIamInstanceProfileMutex.RLock()
	defer fake.associateIamInstanceProfileMutex.RUnlock()
	argsForCall := fake.associateIamInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateIamInstanceProfileReturns(result1 *ec2.AssociateIamInstanceProfileOutput, result2 error) {
	fake.associateIamInstanceProfileMutex.Lock()
	defer fake.associateIamInstanceProfileMutex.Unlock()
	fake.AssociateIamInstanceProfileStub = nil
	fake.associateIamInstanceProfileReturns = struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateIamInstanceProfileReturnsOnCall(i int, result1 *ec2.AssociateIamInstanceProfileOutput, result2 error) {
	fake.associateIamInstanceProfileMutex.Lock()
	defer fake.associateIamInstanceProfileMutex.Unlock()
	fake.AssociateIamInstanceProfileStub = nil
	if fake.associateIamInstanceProfileReturnsOnCall == nil {
		fake.associateIamInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateIamInstanceProfileOutput
			result2 error
		})
	}
	fake.associateIamInstanceProfileReturnsOnCall[i] = struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateIamInstanceProfileRequest(arg1 *ec2.AssociateIamInstanceProfileInput) (*request.Request, *ec2.AssociateIamInstanceProfileOutput) {
	fake.associateIamInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.associateIamInstanceProfileRequestReturnsOnCall[len(fake.associateIamInstanceProfileRequestArgsForCall)]
	fake.associateIamInstanceProfileRequestArgsForCall = append(fake.associateIamInstanceProfileRequestArgsForCall, struct {
		arg1 *ec2.AssociateIamInstanceProfileInput
	}{arg1})
	fake.recordInvocation("AssociateIamInstanceProfileRequest", []interface{}{arg1})
	fake.associateIamInstanceProfileRequestMutex.Unlock()
	if fake.AssociateIamInstanceProfileRequestStub != nil {
		return fake.AssociateIamInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateIamInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateIamInstanceProfileRequestCallCount() int {
	fake.associateIamInstanceProfileRequestMutex.RLock()
	defer fake.associateIamInstanceProfileRequestMutex.RUnlock()
	return len(fake.associateIamInstanceProfileRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateIamInstanceProfileRequestCalls(stub func(*ec2.AssociateIamInstanceProfileInput) (*request.Request, *ec2.AssociateIamInstanceProfileOutput)) {
	fake.associateIamInstanceProfileRequestMutex.Lock()
	defer fake.associateIamInstanceProfileRequestMutex.Unlock()
	fake.AssociateIamInstanceProfileRequestStub = stub
}

func (fake *FakeEC2API) AssociateIamInstanceProfileRequestArgsForCall(i int) *ec2.AssociateIamInstanceProfileInput {
	fake.associateIamInstanceProfileRequestMutex.RLock()
	defer fake.associateIamInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.associateIamInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateIamInstanceProfileRequestReturns(result1 *request.Request, result2 *ec2.AssociateIamInstanceProfileOutput) {
	fake.associateIamInstanceProfileRequestMutex.Lock()
	defer fake.associateIamInstanceProfileRequestMutex.Unlock()
	fake.AssociateIamInstanceProfileRequestStub = nil
	fake.associateIamInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateIamInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateIamInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateIamInstanceProfileOutput) {
	fake.associateIamInstanceProfileRequestMutex.Lock()
	defer fake.associateIamInstanceProfileRequestMutex.Unlock()
	fake.AssociateIamInstanceProfileRequestStub = nil
	if fake.associateIamInstanceProfileRequestReturnsOnCall == nil {
		fake.associateIamInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateIamInstanceProfileOutput
		})
	}
	fake.associateIamInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateIamInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateIamInstanceProfileWithContext(arg1 aws.Context, arg2 *ec2.AssociateIamInstanceProfileInput, arg3 ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error) {
	fake.associateIamInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.associateIamInstanceProfileWithContextReturnsOnCall[len(fake.associateIamInstanceProfileWithContextArgsForCall)]
	fake.associateIamInstanceProfileWithContextArgsForCall = append(fake.associateIamInstanceProfileWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateIamInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateIamInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateIamInstanceProfileWithContextMutex.Unlock()
	if fake.AssociateIamInstanceProfileWithContextStub != nil {
		return fake.AssociateIamInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateIamInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateIamInstanceProfileWithContextCallCount() int {
	fake.associateIamInstanceProfileWithContextMutex.RLock()
	defer fake.associateIamInstanceProfileWithContextMutex.RUnlock()
	return len(fake.associateIamInstanceProfileWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateIamInstanceProfileWithContextCalls(stub func(aws.Context, *ec2.AssociateIamInstanceProfileInput, ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error)) {
	fake.associateIamInstanceProfileWithContextMutex.Lock()
	defer fake.associateIamInstanceProfileWithContextMutex.Unlock()
	fake.AssociateIamInstanceProfileWithContextStub = stub
}

func (fake *FakeEC2API) AssociateIamInstanceProfileWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateIamInstanceProfileInput, []request.Option) {
	fake.associateIamInstanceProfileWithContextMutex.RLock()
	defer fake.associateIamInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.associateIamInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateIamInstanceProfileWithContextReturns(result1 *ec2.AssociateIamInstanceProfileOutput, result2 error) {
	fake.associateIamInstanceProfileWithContextMutex.Lock()
	defer fake.associateIamInstanceProfileWithContextMutex.Unlock()
	fake.AssociateIamInstanceProfileWithContextStub = nil
	fake.associateIamInstanceProfileWithContextReturns = struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateIamInstanceProfileWithContextReturnsOnCall(i int, result1 *ec2.AssociateIamInstanceProfileOutput, result2 error) {
	fake.associateIamInstanceProfileWithContextMutex.Lock()
	defer fake.associateIamInstanceProfileWithContextMutex.Unlock()
	fake.AssociateIamInstanceProfileWithContextStub = nil
	if fake.associateIamInstanceProfileWithContextReturnsOnCall == nil {
		fake.associateIamInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateIamInstanceProfileOutput
			result2 error
		})
	}
	fake.associateIamInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateRouteTable(arg1 *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	fake.associateRouteTableMutex.Lock()
	ret, specificReturn := fake.associateRouteTableReturnsOnCall[len(fake.associateRouteTableArgsForCall)]
	fake.associateRouteTableArgsForCall = append(fake.associateRouteTableArgsForCall, struct {
		arg1 *ec2.AssociateRouteTableInput
	}{arg1})
	fake.recordInvocation("AssociateRouteTable", []interface{}{arg1})
	fake.associateRouteTableMutex.Unlock()
	if fake.AssociateRouteTableStub != nil {
		return fake.AssociateRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateRouteTableCallCount() int {
	fake.associateRouteTableMutex.RLock()
	defer fake.associateRouteTableMutex.RUnlock()
	return len(fake.associateRouteTableArgsForCall)
}

func (fake *FakeEC2API) AssociateRouteTableCalls(stub func(*ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error)) {
	fake.associateRouteTableMutex.Lock()
	defer fake.associateRouteTableMutex.Unlock()
	fake.AssociateRouteTableStub = stub
}

func (fake *FakeEC2API) AssociateRouteTableArgsForCall(i int) *ec2.AssociateRouteTableInput {
	fake.associateRouteTableMutex.RLock()
	defer fake.associateRouteTableMutex.RUnlock()
	argsForCall := fake.associateRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateRouteTableReturns(result1 *ec2.AssociateRouteTableOutput, result2 error) {
	fake.associateRouteTableMutex.Lock()
	defer fake.associateRouteTableMutex.Unlock()
	fake.AssociateRouteTableStub = nil
	fake.associateRouteTableReturns = struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateRouteTableReturnsOnCall(i int, result1 *ec2.AssociateRouteTableOutput, result2 error) {
	fake.associateRouteTableMutex.Lock()
	defer fake.associateRouteTableMutex.Unlock()
	fake.AssociateRouteTableStub = nil
	if fake.associateRouteTableReturnsOnCall == nil {
		fake.associateRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateRouteTableOutput
			result2 error
		})
	}
	fake.associateRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateRouteTableRequest(arg1 *ec2.AssociateRouteTableInput) (*request.Request, *ec2.AssociateRouteTableOutput) {
	fake.associateRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.associateRouteTableRequestReturnsOnCall[len(fake.associateRouteTableRequestArgsForCall)]
	fake.associateRouteTableRequestArgsForCall = append(fake.associateRouteTableRequestArgsForCall, struct {
		arg1 *ec2.AssociateRouteTableInput
	}{arg1})
	fake.recordInvocation("AssociateRouteTableRequest", []interface{}{arg1})
	fake.associateRouteTableRequestMutex.Unlock()
	if fake.AssociateRouteTableRequestStub != nil {
		return fake.AssociateRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateRouteTableRequestCallCount() int {
	fake.associateRouteTableRequestMutex.RLock()
	defer fake.associateRouteTableRequestMutex.RUnlock()
	return len(fake.associateRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateRouteTableRequestCalls(stub func(*ec2.AssociateRouteTableInput) (*request.Request, *ec2.AssociateRouteTableOutput)) {
	fake.associateRouteTableRequestMutex.Lock()
	defer fake.associateRouteTableRequestMutex.Unlock()
	fake.AssociateRouteTableRequestStub = stub
}

func (fake *FakeEC2API) AssociateRouteTableRequestArgsForCall(i int) *ec2.AssociateRouteTableInput {
	fake.associateRouteTableRequestMutex.RLock()
	defer fake.associateRouteTableRequestMutex.RUnlock()
	argsForCall := fake.associateRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateRouteTableRequestReturns(result1 *request.Request, result2 *ec2.AssociateRouteTableOutput) {
	fake.associateRouteTableRequestMutex.Lock()
	defer fake.associateRouteTableRequestMutex.Unlock()
	fake.AssociateRouteTableRequestStub = nil
	fake.associateRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateRouteTableOutput) {
	fake.associateRouteTableRequestMutex.Lock()
	defer fake.associateRouteTableRequestMutex.Unlock()
	fake.AssociateRouteTableRequestStub = nil
	if fake.associateRouteTableRequestReturnsOnCall == nil {
		fake.associateRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateRouteTableOutput
		})
	}
	fake.associateRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateRouteTableWithContext(arg1 aws.Context, arg2 *ec2.AssociateRouteTableInput, arg3 ...request.Option) (*ec2.AssociateRouteTableOutput, error) {
	fake.associateRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.associateRouteTableWithContextReturnsOnCall[len(fake.associateRouteTableWithContextArgsForCall)]
	fake.associateRouteTableWithContextArgsForCall = append(fake.associateRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateRouteTableWithContextMutex.Unlock()
	if fake.AssociateRouteTableWithContextStub != nil {
		return fake.AssociateRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateRouteTableWithContextCallCount() int {
	fake.associateRouteTableWithContextMutex.RLock()
	defer fake.associateRouteTableWithContextMutex.RUnlock()
	return len(fake.associateRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateRouteTableWithContextCalls(stub func(aws.Context, *ec2.AssociateRouteTableInput, ...request.Option) (*ec2.AssociateRouteTableOutput, error)) {
	fake.associateRouteTableWithContextMutex.Lock()
	defer fake.associateRouteTableWithContextMutex.Unlock()
	fake.AssociateRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) AssociateRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateRouteTableInput, []request.Option) {
	fake.associateRouteTableWithContextMutex.RLock()
	defer fake.associateRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.associateRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateRouteTableWithContextReturns(result1 *ec2.AssociateRouteTableOutput, result2 error) {
	fake.associateRouteTableWithContextMutex.Lock()
	defer fake.associateRouteTableWithContextMutex.Unlock()
	fake.AssociateRouteTableWithContextStub = nil
	fake.associateRouteTableWithContextReturns = struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateRouteTableWithContextReturnsOnCall(i int, result1 *ec2.AssociateRouteTableOutput, result2 error) {
	fake.associateRouteTableWithContextMutex.Lock()
	defer fake.associateRouteTableWithContextMutex.Unlock()
	fake.AssociateRouteTableWithContextStub = nil
	if fake.associateRouteTableWithContextReturnsOnCall == nil {
		fake.associateRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateRouteTableOutput
			result2 error
		})
	}
	fake.associateRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateSubnetCidrBlock(arg1 *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	fake.associateSubnetCidrBlockMutex.Lock()
	ret, specificReturn := fake.associateSubnetCidrBlockReturnsOnCall[len(fake.associateSubnetCidrBlockArgsForCall)]
	fake.associateSubnetCidrBlockArgsForCall = append(fake.associateSubnetCidrBlockArgsForCall, struct {
		arg1 *ec2.AssociateSubnetCidrBlockInput
	}{arg1})
	fake.recordInvocation("AssociateSubnetCidrBlock", []interface{}{arg1})
	fake.associateSubnetCidrBlockMutex.Unlock()
	if fake.AssociateSubnetCidrBlockStub != nil {
		return fake.AssociateSubnetCidrBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSubnetCidrBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockCallCount() int {
	fake.associateSubnetCidrBlockMutex.RLock()
	defer fake.associateSubnetCidrBlockMutex.RUnlock()
	return len(fake.associateSubnetCidrBlockArgsForCall)
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockCalls(stub func(*ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error)) {
	fake.associateSubnetCidrBlockMutex.Lock()
	defer fake.associateSubnetCidrBlockMutex.Unlock()
	fake.AssociateSubnetCidrBlockStub = stub
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockArgsForCall(i int) *ec2.AssociateSubnetCidrBlockInput {
	fake.associateSubnetCidrBlockMutex.RLock()
	defer fake.associateSubnetCidrBlockMutex.RUnlock()
	argsForCall := fake.associateSubnetCidrBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockReturns(result1 *ec2.AssociateSubnetCidrBlockOutput, result2 error) {
	fake.associateSubnetCidrBlockMutex.Lock()
	defer fake.associateSubnetCidrBlockMutex.Unlock()
	fake.AssociateSubnetCidrBlockStub = nil
	fake.associateSubnetCidrBlockReturns = struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockReturnsOnCall(i int, result1 *ec2.AssociateSubnetCidrBlockOutput, result2 error) {
	fake.associateSubnetCidrBlockMutex.Lock()
	defer fake.associateSubnetCidrBlockMutex.Unlock()
	fake.AssociateSubnetCidrBlockStub = nil
	if fake.associateSubnetCidrBlockReturnsOnCall == nil {
		fake.associateSubnetCidrBlockReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateSubnetCidrBlockOutput
			result2 error
		})
	}
	fake.associateSubnetCidrBlockReturnsOnCall[i] = struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockRequest(arg1 *ec2.AssociateSubnetCidrBlockInput) (*request.Request, *ec2.AssociateSubnetCidrBlockOutput) {
	fake.associateSubnetCidrBlockRequestMutex.Lock()
	ret, specificReturn := fake.associateSubnetCidrBlockRequestReturnsOnCall[len(fake.associateSubnetCidrBlockRequestArgsForCall)]
	fake.associateSubnetCidrBlockRequestArgsForCall = append(fake.associateSubnetCidrBlockRequestArgsForCall, struct {
		arg1 *ec2.AssociateSubnetCidrBlockInput
	}{arg1})
	fake.recordInvocation("AssociateSubnetCidrBlockRequest", []interface{}{arg1})
	fake.associateSubnetCidrBlockRequestMutex.Unlock()
	if fake.AssociateSubnetCidrBlockRequestStub != nil {
		return fake.AssociateSubnetCidrBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSubnetCidrBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockRequestCallCount() int {
	fake.associateSubnetCidrBlockRequestMutex.RLock()
	defer fake.associateSubnetCidrBlockRequestMutex.RUnlock()
	return len(fake.associateSubnetCidrBlockRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockRequestCalls(stub func(*ec2.AssociateSubnetCidrBlockInput) (*request.Request, *ec2.AssociateSubnetCidrBlockOutput)) {
	fake.associateSubnetCidrBlockRequestMutex.Lock()
	defer fake.associateSubnetCidrBlockRequestMutex.Unlock()
	fake.AssociateSubnetCidrBlockRequestStub = stub
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockRequestArgsForCall(i int) *ec2.AssociateSubnetCidrBlockInput {
	fake.associateSubnetCidrBlockRequestMutex.RLock()
	defer fake.associateSubnetCidrBlockRequestMutex.RUnlock()
	argsForCall := fake.associateSubnetCidrBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockRequestReturns(result1 *request.Request, result2 *ec2.AssociateSubnetCidrBlockOutput) {
	fake.associateSubnetCidrBlockRequestMutex.Lock()
	defer fake.associateSubnetCidrBlockRequestMutex.Unlock()
	fake.AssociateSubnetCidrBlockRequestStub = nil
	fake.associateSubnetCidrBlockRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateSubnetCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateSubnetCidrBlockOutput) {
	fake.associateSubnetCidrBlockRequestMutex.Lock()
	defer fake.associateSubnetCidrBlockRequestMutex.Unlock()
	fake.AssociateSubnetCidrBlockRequestStub = nil
	if fake.associateSubnetCidrBlockRequestReturnsOnCall == nil {
		fake.associateSubnetCidrBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateSubnetCidrBlockOutput
		})
	}
	fake.associateSubnetCidrBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateSubnetCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockWithContext(arg1 aws.Context, arg2 *ec2.AssociateSubnetCidrBlockInput, arg3 ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	fake.associateSubnetCidrBlockWithContextMutex.Lock()
	ret, specificReturn := fake.associateSubnetCidrBlockWithContextReturnsOnCall[len(fake.associateSubnetCidrBlockWithContextArgsForCall)]
	fake.associateSubnetCidrBlockWithContextArgsForCall = append(fake.associateSubnetCidrBlockWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateSubnetCidrBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateSubnetCidrBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateSubnetCidrBlockWithContextMutex.Unlock()
	if fake.AssociateSubnetCidrBlockWithContextStub != nil {
		return fake.AssociateSubnetCidrBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSubnetCidrBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockWithContextCallCount() int {
	fake.associateSubnetCidrBlockWithContextMutex.RLock()
	defer fake.associateSubnetCidrBlockWithContextMutex.RUnlock()
	return len(fake.associateSubnetCidrBlockWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockWithContextCalls(stub func(aws.Context, *ec2.AssociateSubnetCidrBlockInput, ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error)) {
	fake.associateSubnetCidrBlockWithContextMutex.Lock()
	defer fake.associateSubnetCidrBlockWithContextMutex.Unlock()
	fake.AssociateSubnetCidrBlockWithContextStub = stub
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateSubnetCidrBlockInput, []request.Option) {
	fake.associateSubnetCidrBlockWithContextMutex.RLock()
	defer fake.associateSubnetCidrBlockWithContextMutex.RUnlock()
	argsForCall := fake.associateSubnetCidrBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockWithContextReturns(result1 *ec2.AssociateSubnetCidrBlockOutput, result2 error) {
	fake.associateSubnetCidrBlockWithContextMutex.Lock()
	defer fake.associateSubnetCidrBlockWithContextMutex.Unlock()
	fake.AssociateSubnetCidrBlockWithContextStub = nil
	fake.associateSubnetCidrBlockWithContextReturns = struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateSubnetCidrBlockWithContextReturnsOnCall(i int, result1 *ec2.AssociateSubnetCidrBlockOutput, result2 error) {
	fake.associateSubnetCidrBlockWithContextMutex.Lock()
	defer fake.associateSubnetCidrBlockWithContextMutex.Unlock()
	fake.AssociateSubnetCidrBlockWithContextStub = nil
	if fake.associateSubnetCidrBlockWithContextReturnsOnCall == nil {
		fake.associateSubnetCidrBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateSubnetCidrBlockOutput
			result2 error
		})
	}
	fake.associateSubnetCidrBlockWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTable(arg1 *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	fake.associateTransitGatewayRouteTableMutex.Lock()
	ret, specificReturn := fake.associateTransitGatewayRouteTableReturnsOnCall[len(fake.associateTransitGatewayRouteTableArgsForCall)]
	fake.associateTransitGatewayRouteTableArgsForCall = append(fake.associateTransitGatewayRouteTableArgsForCall, struct {
		arg1 *ec2.AssociateTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("AssociateTransitGatewayRouteTable", []interface{}{arg1})
	fake.associateTransitGatewayRouteTableMutex.Unlock()
	if fake.AssociateTransitGatewayRouteTableStub != nil {
		return fake.AssociateTransitGatewayRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateTransitGatewayRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableCallCount() int {
	fake.associateTransitGatewayRouteTableMutex.RLock()
	defer fake.associateTransitGatewayRouteTableMutex.RUnlock()
	return len(fake.associateTransitGatewayRouteTableArgsForCall)
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableCalls(stub func(*ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error)) {
	fake.associateTransitGatewayRouteTableMutex.Lock()
	defer fake.associateTransitGatewayRouteTableMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableStub = stub
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableArgsForCall(i int) *ec2.AssociateTransitGatewayRouteTableInput {
	fake.associateTransitGatewayRouteTableMutex.RLock()
	defer fake.associateTransitGatewayRouteTableMutex.RUnlock()
	argsForCall := fake.associateTransitGatewayRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableReturns(result1 *ec2.AssociateTransitGatewayRouteTableOutput, result2 error) {
	fake.associateTransitGatewayRouteTableMutex.Lock()
	defer fake.associateTransitGatewayRouteTableMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableStub = nil
	fake.associateTransitGatewayRouteTableReturns = struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableReturnsOnCall(i int, result1 *ec2.AssociateTransitGatewayRouteTableOutput, result2 error) {
	fake.associateTransitGatewayRouteTableMutex.Lock()
	defer fake.associateTransitGatewayRouteTableMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableStub = nil
	if fake.associateTransitGatewayRouteTableReturnsOnCall == nil {
		fake.associateTransitGatewayRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.associateTransitGatewayRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableRequest(arg1 *ec2.AssociateTransitGatewayRouteTableInput) (*request.Request, *ec2.AssociateTransitGatewayRouteTableOutput) {
	fake.associateTransitGatewayRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.associateTransitGatewayRouteTableRequestReturnsOnCall[len(fake.associateTransitGatewayRouteTableRequestArgsForCall)]
	fake.associateTransitGatewayRouteTableRequestArgsForCall = append(fake.associateTransitGatewayRouteTableRequestArgsForCall, struct {
		arg1 *ec2.AssociateTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("AssociateTransitGatewayRouteTableRequest", []interface{}{arg1})
	fake.associateTransitGatewayRouteTableRequestMutex.Unlock()
	if fake.AssociateTransitGatewayRouteTableRequestStub != nil {
		return fake.AssociateTransitGatewayRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateTransitGatewayRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableRequestCallCount() int {
	fake.associateTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.associateTransitGatewayRouteTableRequestMutex.RUnlock()
	return len(fake.associateTransitGatewayRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableRequestCalls(stub func(*ec2.AssociateTransitGatewayRouteTableInput) (*request.Request, *ec2.AssociateTransitGatewayRouteTableOutput)) {
	fake.associateTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.associateTransitGatewayRouteTableRequestMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableRequestStub = stub
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableRequestArgsForCall(i int) *ec2.AssociateTransitGatewayRouteTableInput {
	fake.associateTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.associateTransitGatewayRouteTableRequestMutex.RUnlock()
	argsForCall := fake.associateTransitGatewayRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableRequestReturns(result1 *request.Request, result2 *ec2.AssociateTransitGatewayRouteTableOutput) {
	fake.associateTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.associateTransitGatewayRouteTableRequestMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableRequestStub = nil
	fake.associateTransitGatewayRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateTransitGatewayRouteTableOutput) {
	fake.associateTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.associateTransitGatewayRouteTableRequestMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableRequestStub = nil
	if fake.associateTransitGatewayRouteTableRequestReturnsOnCall == nil {
		fake.associateTransitGatewayRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateTransitGatewayRouteTableOutput
		})
	}
	fake.associateTransitGatewayRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableWithContext(arg1 aws.Context, arg2 *ec2.AssociateTransitGatewayRouteTableInput, arg3 ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	fake.associateTransitGatewayRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.associateTransitGatewayRouteTableWithContextReturnsOnCall[len(fake.associateTransitGatewayRouteTableWithContextArgsForCall)]
	fake.associateTransitGatewayRouteTableWithContextArgsForCall = append(fake.associateTransitGatewayRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateTransitGatewayRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateTransitGatewayRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateTransitGatewayRouteTableWithContextMutex.Unlock()
	if fake.AssociateTransitGatewayRouteTableWithContextStub != nil {
		return fake.AssociateTransitGatewayRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateTransitGatewayRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableWithContextCallCount() int {
	fake.associateTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.associateTransitGatewayRouteTableWithContextMutex.RUnlock()
	return len(fake.associateTransitGatewayRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableWithContextCalls(stub func(aws.Context, *ec2.AssociateTransitGatewayRouteTableInput, ...request.Option) (*ec2.AssociateTransitGatewayRouteTableOutput, error)) {
	fake.associateTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.associateTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateTransitGatewayRouteTableInput, []request.Option) {
	fake.associateTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.associateTransitGatewayRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.associateTransitGatewayRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableWithContextReturns(result1 *ec2.AssociateTransitGatewayRouteTableOutput, result2 error) {
	fake.associateTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.associateTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableWithContextStub = nil
	fake.associateTransitGatewayRouteTableWithContextReturns = struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateTransitGatewayRouteTableWithContextReturnsOnCall(i int, result1 *ec2.AssociateTransitGatewayRouteTableOutput, result2 error) {
	fake.associateTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.associateTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.AssociateTransitGatewayRouteTableWithContextStub = nil
	if fake.associateTransitGatewayRouteTableWithContextReturnsOnCall == nil {
		fake.associateTransitGatewayRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.associateTransitGatewayRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateVpcCidrBlock(arg1 *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
	fake.associateVpcCidrBlockMutex.Lock()
	ret, specificReturn := fake.associateVpcCidrBlockReturnsOnCall[len(fake.associateVpcCidrBlockArgsForCall)]
	fake.associateVpcCidrBlockArgsForCall = append(fake.associateVpcCidrBlockArgsForCall, struct {
		arg1 *ec2.AssociateVpcCidrBlockInput
	}{arg1})
	fake.recordInvocation("AssociateVpcCidrBlock", []interface{}{arg1})
	fake.associateVpcCidrBlockMutex.Unlock()
	if fake.AssociateVpcCidrBlockStub != nil {
		return fake.AssociateVpcCidrBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateVpcCidrBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateVpcCidrBlockCallCount() int {
	fake.associateVpcCidrBlockMutex.RLock()
	defer fake.associateVpcCidrBlockMutex.RUnlock()
	return len(fake.associateVpcCidrBlockArgsForCall)
}

func (fake *FakeEC2API) AssociateVpcCidrBlockCalls(stub func(*ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error)) {
	fake.associateVpcCidrBlockMutex.Lock()
	defer fake.associateVpcCidrBlockMutex.Unlock()
	fake.AssociateVpcCidrBlockStub = stub
}

func (fake *FakeEC2API) AssociateVpcCidrBlockArgsForCall(i int) *ec2.AssociateVpcCidrBlockInput {
	fake.associateVpcCidrBlockMutex.RLock()
	defer fake.associateVpcCidrBlockMutex.RUnlock()
	argsForCall := fake.associateVpcCidrBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateVpcCidrBlockReturns(result1 *ec2.AssociateVpcCidrBlockOutput, result2 error) {
	fake.associateVpcCidrBlockMutex.Lock()
	defer fake.associateVpcCidrBlockMutex.Unlock()
	fake.AssociateVpcCidrBlockStub = nil
	fake.associateVpcCidrBlockReturns = struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateVpcCidrBlockReturnsOnCall(i int, result1 *ec2.AssociateVpcCidrBlockOutput, result2 error) {
	fake.associateVpcCidrBlockMutex.Lock()
	defer fake.associateVpcCidrBlockMutex.Unlock()
	fake.AssociateVpcCidrBlockStub = nil
	if fake.associateVpcCidrBlockReturnsOnCall == nil {
		fake.associateVpcCidrBlockReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateVpcCidrBlockOutput
			result2 error
		})
	}
	fake.associateVpcCidrBlockReturnsOnCall[i] = struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateVpcCidrBlockRequest(arg1 *ec2.AssociateVpcCidrBlockInput) (*request.Request, *ec2.AssociateVpcCidrBlockOutput) {
	fake.associateVpcCidrBlockRequestMutex.Lock()
	ret, specificReturn := fake.associateVpcCidrBlockRequestReturnsOnCall[len(fake.associateVpcCidrBlockRequestArgsForCall)]
	fake.associateVpcCidrBlockRequestArgsForCall = append(fake.associateVpcCidrBlockRequestArgsForCall, struct {
		arg1 *ec2.AssociateVpcCidrBlockInput
	}{arg1})
	fake.recordInvocation("AssociateVpcCidrBlockRequest", []interface{}{arg1})
	fake.associateVpcCidrBlockRequestMutex.Unlock()
	if fake.AssociateVpcCidrBlockRequestStub != nil {
		return fake.AssociateVpcCidrBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateVpcCidrBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateVpcCidrBlockRequestCallCount() int {
	fake.associateVpcCidrBlockRequestMutex.RLock()
	defer fake.associateVpcCidrBlockRequestMutex.RUnlock()
	return len(fake.associateVpcCidrBlockRequestArgsForCall)
}

func (fake *FakeEC2API) AssociateVpcCidrBlockRequestCalls(stub func(*ec2.AssociateVpcCidrBlockInput) (*request.Request, *ec2.AssociateVpcCidrBlockOutput)) {
	fake.associateVpcCidrBlockRequestMutex.Lock()
	defer fake.associateVpcCidrBlockRequestMutex.Unlock()
	fake.AssociateVpcCidrBlockRequestStub = stub
}

func (fake *FakeEC2API) AssociateVpcCidrBlockRequestArgsForCall(i int) *ec2.AssociateVpcCidrBlockInput {
	fake.associateVpcCidrBlockRequestMutex.RLock()
	defer fake.associateVpcCidrBlockRequestMutex.RUnlock()
	argsForCall := fake.associateVpcCidrBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AssociateVpcCidrBlockRequestReturns(result1 *request.Request, result2 *ec2.AssociateVpcCidrBlockOutput) {
	fake.associateVpcCidrBlockRequestMutex.Lock()
	defer fake.associateVpcCidrBlockRequestMutex.Unlock()
	fake.AssociateVpcCidrBlockRequestStub = nil
	fake.associateVpcCidrBlockRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AssociateVpcCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateVpcCidrBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AssociateVpcCidrBlockOutput) {
	fake.associateVpcCidrBlockRequestMutex.Lock()
	defer fake.associateVpcCidrBlockRequestMutex.Unlock()
	fake.AssociateVpcCidrBlockRequestStub = nil
	if fake.associateVpcCidrBlockRequestReturnsOnCall == nil {
		fake.associateVpcCidrBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AssociateVpcCidrBlockOutput
		})
	}
	fake.associateVpcCidrBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AssociateVpcCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateVpcCidrBlockWithContext(arg1 aws.Context, arg2 *ec2.AssociateVpcCidrBlockInput, arg3 ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error) {
	fake.associateVpcCidrBlockWithContextMutex.Lock()
	ret, specificReturn := fake.associateVpcCidrBlockWithContextReturnsOnCall[len(fake.associateVpcCidrBlockWithContextArgsForCall)]
	fake.associateVpcCidrBlockWithContextArgsForCall = append(fake.associateVpcCidrBlockWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AssociateVpcCidrBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateVpcCidrBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.associateVpcCidrBlockWithContextMutex.Unlock()
	if fake.AssociateVpcCidrBlockWithContextStub != nil {
		return fake.AssociateVpcCidrBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateVpcCidrBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AssociateVpcCidrBlockWithContextCallCount() int {
	fake.associateVpcCidrBlockWithContextMutex.RLock()
	defer fake.associateVpcCidrBlockWithContextMutex.RUnlock()
	return len(fake.associateVpcCidrBlockWithContextArgsForCall)
}

func (fake *FakeEC2API) AssociateVpcCidrBlockWithContextCalls(stub func(aws.Context, *ec2.AssociateVpcCidrBlockInput, ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error)) {
	fake.associateVpcCidrBlockWithContextMutex.Lock()
	defer fake.associateVpcCidrBlockWithContextMutex.Unlock()
	fake.AssociateVpcCidrBlockWithContextStub = stub
}

func (fake *FakeEC2API) AssociateVpcCidrBlockWithContextArgsForCall(i int) (aws.Context, *ec2.AssociateVpcCidrBlockInput, []request.Option) {
	fake.associateVpcCidrBlockWithContextMutex.RLock()
	defer fake.associateVpcCidrBlockWithContextMutex.RUnlock()
	argsForCall := fake.associateVpcCidrBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AssociateVpcCidrBlockWithContextReturns(result1 *ec2.AssociateVpcCidrBlockOutput, result2 error) {
	fake.associateVpcCidrBlockWithContextMutex.Lock()
	defer fake.associateVpcCidrBlockWithContextMutex.Unlock()
	fake.AssociateVpcCidrBlockWithContextStub = nil
	fake.associateVpcCidrBlockWithContextReturns = struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AssociateVpcCidrBlockWithContextReturnsOnCall(i int, result1 *ec2.AssociateVpcCidrBlockOutput, result2 error) {
	fake.associateVpcCidrBlockWithContextMutex.Lock()
	defer fake.associateVpcCidrBlockWithContextMutex.Unlock()
	fake.AssociateVpcCidrBlockWithContextStub = nil
	if fake.associateVpcCidrBlockWithContextReturnsOnCall == nil {
		fake.associateVpcCidrBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AssociateVpcCidrBlockOutput
			result2 error
		})
	}
	fake.associateVpcCidrBlockWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AssociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachClassicLinkVpc(arg1 *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
	fake.attachClassicLinkVpcMutex.Lock()
	ret, specificReturn := fake.attachClassicLinkVpcReturnsOnCall[len(fake.attachClassicLinkVpcArgsForCall)]
	fake.attachClassicLinkVpcArgsForCall = append(fake.attachClassicLinkVpcArgsForCall, struct {
		arg1 *ec2.AttachClassicLinkVpcInput
	}{arg1})
	fake.recordInvocation("AttachClassicLinkVpc", []interface{}{arg1})
	fake.attachClassicLinkVpcMutex.Unlock()
	if fake.AttachClassicLinkVpcStub != nil {
		return fake.AttachClassicLinkVpcStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachClassicLinkVpcReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachClassicLinkVpcCallCount() int {
	fake.attachClassicLinkVpcMutex.RLock()
	defer fake.attachClassicLinkVpcMutex.RUnlock()
	return len(fake.attachClassicLinkVpcArgsForCall)
}

func (fake *FakeEC2API) AttachClassicLinkVpcCalls(stub func(*ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error)) {
	fake.attachClassicLinkVpcMutex.Lock()
	defer fake.attachClassicLinkVpcMutex.Unlock()
	fake.AttachClassicLinkVpcStub = stub
}

func (fake *FakeEC2API) AttachClassicLinkVpcArgsForCall(i int) *ec2.AttachClassicLinkVpcInput {
	fake.attachClassicLinkVpcMutex.RLock()
	defer fake.attachClassicLinkVpcMutex.RUnlock()
	argsForCall := fake.attachClassicLinkVpcArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachClassicLinkVpcReturns(result1 *ec2.AttachClassicLinkVpcOutput, result2 error) {
	fake.attachClassicLinkVpcMutex.Lock()
	defer fake.attachClassicLinkVpcMutex.Unlock()
	fake.AttachClassicLinkVpcStub = nil
	fake.attachClassicLinkVpcReturns = struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachClassicLinkVpcReturnsOnCall(i int, result1 *ec2.AttachClassicLinkVpcOutput, result2 error) {
	fake.attachClassicLinkVpcMutex.Lock()
	defer fake.attachClassicLinkVpcMutex.Unlock()
	fake.AttachClassicLinkVpcStub = nil
	if fake.attachClassicLinkVpcReturnsOnCall == nil {
		fake.attachClassicLinkVpcReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachClassicLinkVpcOutput
			result2 error
		})
	}
	fake.attachClassicLinkVpcReturnsOnCall[i] = struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachClassicLinkVpcRequest(arg1 *ec2.AttachClassicLinkVpcInput) (*request.Request, *ec2.AttachClassicLinkVpcOutput) {
	fake.attachClassicLinkVpcRequestMutex.Lock()
	ret, specificReturn := fake.attachClassicLinkVpcRequestReturnsOnCall[len(fake.attachClassicLinkVpcRequestArgsForCall)]
	fake.attachClassicLinkVpcRequestArgsForCall = append(fake.attachClassicLinkVpcRequestArgsForCall, struct {
		arg1 *ec2.AttachClassicLinkVpcInput
	}{arg1})
	fake.recordInvocation("AttachClassicLinkVpcRequest", []interface{}{arg1})
	fake.attachClassicLinkVpcRequestMutex.Unlock()
	if fake.AttachClassicLinkVpcRequestStub != nil {
		return fake.AttachClassicLinkVpcRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachClassicLinkVpcRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachClassicLinkVpcRequestCallCount() int {
	fake.attachClassicLinkVpcRequestMutex.RLock()
	defer fake.attachClassicLinkVpcRequestMutex.RUnlock()
	return len(fake.attachClassicLinkVpcRequestArgsForCall)
}

func (fake *FakeEC2API) AttachClassicLinkVpcRequestCalls(stub func(*ec2.AttachClassicLinkVpcInput) (*request.Request, *ec2.AttachClassicLinkVpcOutput)) {
	fake.attachClassicLinkVpcRequestMutex.Lock()
	defer fake.attachClassicLinkVpcRequestMutex.Unlock()
	fake.AttachClassicLinkVpcRequestStub = stub
}

func (fake *FakeEC2API) AttachClassicLinkVpcRequestArgsForCall(i int) *ec2.AttachClassicLinkVpcInput {
	fake.attachClassicLinkVpcRequestMutex.RLock()
	defer fake.attachClassicLinkVpcRequestMutex.RUnlock()
	argsForCall := fake.attachClassicLinkVpcRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachClassicLinkVpcRequestReturns(result1 *request.Request, result2 *ec2.AttachClassicLinkVpcOutput) {
	fake.attachClassicLinkVpcRequestMutex.Lock()
	defer fake.attachClassicLinkVpcRequestMutex.Unlock()
	fake.AttachClassicLinkVpcRequestStub = nil
	fake.attachClassicLinkVpcRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AttachClassicLinkVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachClassicLinkVpcRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AttachClassicLinkVpcOutput) {
	fake.attachClassicLinkVpcRequestMutex.Lock()
	defer fake.attachClassicLinkVpcRequestMutex.Unlock()
	fake.AttachClassicLinkVpcRequestStub = nil
	if fake.attachClassicLinkVpcRequestReturnsOnCall == nil {
		fake.attachClassicLinkVpcRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AttachClassicLinkVpcOutput
		})
	}
	fake.attachClassicLinkVpcRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AttachClassicLinkVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachClassicLinkVpcWithContext(arg1 aws.Context, arg2 *ec2.AttachClassicLinkVpcInput, arg3 ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error) {
	fake.attachClassicLinkVpcWithContextMutex.Lock()
	ret, specificReturn := fake.attachClassicLinkVpcWithContextReturnsOnCall[len(fake.attachClassicLinkVpcWithContextArgsForCall)]
	fake.attachClassicLinkVpcWithContextArgsForCall = append(fake.attachClassicLinkVpcWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AttachClassicLinkVpcInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachClassicLinkVpcWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachClassicLinkVpcWithContextMutex.Unlock()
	if fake.AttachClassicLinkVpcWithContextStub != nil {
		return fake.AttachClassicLinkVpcWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachClassicLinkVpcWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachClassicLinkVpcWithContextCallCount() int {
	fake.attachClassicLinkVpcWithContextMutex.RLock()
	defer fake.attachClassicLinkVpcWithContextMutex.RUnlock()
	return len(fake.attachClassicLinkVpcWithContextArgsForCall)
}

func (fake *FakeEC2API) AttachClassicLinkVpcWithContextCalls(stub func(aws.Context, *ec2.AttachClassicLinkVpcInput, ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error)) {
	fake.attachClassicLinkVpcWithContextMutex.Lock()
	defer fake.attachClassicLinkVpcWithContextMutex.Unlock()
	fake.AttachClassicLinkVpcWithContextStub = stub
}

func (fake *FakeEC2API) AttachClassicLinkVpcWithContextArgsForCall(i int) (aws.Context, *ec2.AttachClassicLinkVpcInput, []request.Option) {
	fake.attachClassicLinkVpcWithContextMutex.RLock()
	defer fake.attachClassicLinkVpcWithContextMutex.RUnlock()
	argsForCall := fake.attachClassicLinkVpcWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AttachClassicLinkVpcWithContextReturns(result1 *ec2.AttachClassicLinkVpcOutput, result2 error) {
	fake.attachClassicLinkVpcWithContextMutex.Lock()
	defer fake.attachClassicLinkVpcWithContextMutex.Unlock()
	fake.AttachClassicLinkVpcWithContextStub = nil
	fake.attachClassicLinkVpcWithContextReturns = struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachClassicLinkVpcWithContextReturnsOnCall(i int, result1 *ec2.AttachClassicLinkVpcOutput, result2 error) {
	fake.attachClassicLinkVpcWithContextMutex.Lock()
	defer fake.attachClassicLinkVpcWithContextMutex.Unlock()
	fake.AttachClassicLinkVpcWithContextStub = nil
	if fake.attachClassicLinkVpcWithContextReturnsOnCall == nil {
		fake.attachClassicLinkVpcWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachClassicLinkVpcOutput
			result2 error
		})
	}
	fake.attachClassicLinkVpcWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AttachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachInternetGateway(arg1 *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	fake.attachInternetGatewayMutex.Lock()
	ret, specificReturn := fake.attachInternetGatewayReturnsOnCall[len(fake.attachInternetGatewayArgsForCall)]
	fake.attachInternetGatewayArgsForCall = append(fake.attachInternetGatewayArgsForCall, struct {
		arg1 *ec2.AttachInternetGatewayInput
	}{arg1})
	fake.recordInvocation("AttachInternetGateway", []interface{}{arg1})
	fake.attachInternetGatewayMutex.Unlock()
	if fake.AttachInternetGatewayStub != nil {
		return fake.AttachInternetGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachInternetGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachInternetGatewayCallCount() int {
	fake.attachInternetGatewayMutex.RLock()
	defer fake.attachInternetGatewayMutex.RUnlock()
	return len(fake.attachInternetGatewayArgsForCall)
}

func (fake *FakeEC2API) AttachInternetGatewayCalls(stub func(*ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error)) {
	fake.attachInternetGatewayMutex.Lock()
	defer fake.attachInternetGatewayMutex.Unlock()
	fake.AttachInternetGatewayStub = stub
}

func (fake *FakeEC2API) AttachInternetGatewayArgsForCall(i int) *ec2.AttachInternetGatewayInput {
	fake.attachInternetGatewayMutex.RLock()
	defer fake.attachInternetGatewayMutex.RUnlock()
	argsForCall := fake.attachInternetGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachInternetGatewayReturns(result1 *ec2.AttachInternetGatewayOutput, result2 error) {
	fake.attachInternetGatewayMutex.Lock()
	defer fake.attachInternetGatewayMutex.Unlock()
	fake.AttachInternetGatewayStub = nil
	fake.attachInternetGatewayReturns = struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachInternetGatewayReturnsOnCall(i int, result1 *ec2.AttachInternetGatewayOutput, result2 error) {
	fake.attachInternetGatewayMutex.Lock()
	defer fake.attachInternetGatewayMutex.Unlock()
	fake.AttachInternetGatewayStub = nil
	if fake.attachInternetGatewayReturnsOnCall == nil {
		fake.attachInternetGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachInternetGatewayOutput
			result2 error
		})
	}
	fake.attachInternetGatewayReturnsOnCall[i] = struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachInternetGatewayRequest(arg1 *ec2.AttachInternetGatewayInput) (*request.Request, *ec2.AttachInternetGatewayOutput) {
	fake.attachInternetGatewayRequestMutex.Lock()
	ret, specificReturn := fake.attachInternetGatewayRequestReturnsOnCall[len(fake.attachInternetGatewayRequestArgsForCall)]
	fake.attachInternetGatewayRequestArgsForCall = append(fake.attachInternetGatewayRequestArgsForCall, struct {
		arg1 *ec2.AttachInternetGatewayInput
	}{arg1})
	fake.recordInvocation("AttachInternetGatewayRequest", []interface{}{arg1})
	fake.attachInternetGatewayRequestMutex.Unlock()
	if fake.AttachInternetGatewayRequestStub != nil {
		return fake.AttachInternetGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachInternetGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachInternetGatewayRequestCallCount() int {
	fake.attachInternetGatewayRequestMutex.RLock()
	defer fake.attachInternetGatewayRequestMutex.RUnlock()
	return len(fake.attachInternetGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) AttachInternetGatewayRequestCalls(stub func(*ec2.AttachInternetGatewayInput) (*request.Request, *ec2.AttachInternetGatewayOutput)) {
	fake.attachInternetGatewayRequestMutex.Lock()
	defer fake.attachInternetGatewayRequestMutex.Unlock()
	fake.AttachInternetGatewayRequestStub = stub
}

func (fake *FakeEC2API) AttachInternetGatewayRequestArgsForCall(i int) *ec2.AttachInternetGatewayInput {
	fake.attachInternetGatewayRequestMutex.RLock()
	defer fake.attachInternetGatewayRequestMutex.RUnlock()
	argsForCall := fake.attachInternetGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachInternetGatewayRequestReturns(result1 *request.Request, result2 *ec2.AttachInternetGatewayOutput) {
	fake.attachInternetGatewayRequestMutex.Lock()
	defer fake.attachInternetGatewayRequestMutex.Unlock()
	fake.AttachInternetGatewayRequestStub = nil
	fake.attachInternetGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AttachInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachInternetGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AttachInternetGatewayOutput) {
	fake.attachInternetGatewayRequestMutex.Lock()
	defer fake.attachInternetGatewayRequestMutex.Unlock()
	fake.AttachInternetGatewayRequestStub = nil
	if fake.attachInternetGatewayRequestReturnsOnCall == nil {
		fake.attachInternetGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AttachInternetGatewayOutput
		})
	}
	fake.attachInternetGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AttachInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachInternetGatewayWithContext(arg1 aws.Context, arg2 *ec2.AttachInternetGatewayInput, arg3 ...request.Option) (*ec2.AttachInternetGatewayOutput, error) {
	fake.attachInternetGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.attachInternetGatewayWithContextReturnsOnCall[len(fake.attachInternetGatewayWithContextArgsForCall)]
	fake.attachInternetGatewayWithContextArgsForCall = append(fake.attachInternetGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AttachInternetGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachInternetGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachInternetGatewayWithContextMutex.Unlock()
	if fake.AttachInternetGatewayWithContextStub != nil {
		return fake.AttachInternetGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachInternetGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachInternetGatewayWithContextCallCount() int {
	fake.attachInternetGatewayWithContextMutex.RLock()
	defer fake.attachInternetGatewayWithContextMutex.RUnlock()
	return len(fake.attachInternetGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) AttachInternetGatewayWithContextCalls(stub func(aws.Context, *ec2.AttachInternetGatewayInput, ...request.Option) (*ec2.AttachInternetGatewayOutput, error)) {
	fake.attachInternetGatewayWithContextMutex.Lock()
	defer fake.attachInternetGatewayWithContextMutex.Unlock()
	fake.AttachInternetGatewayWithContextStub = stub
}

func (fake *FakeEC2API) AttachInternetGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.AttachInternetGatewayInput, []request.Option) {
	fake.attachInternetGatewayWithContextMutex.RLock()
	defer fake.attachInternetGatewayWithContextMutex.RUnlock()
	argsForCall := fake.attachInternetGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AttachInternetGatewayWithContextReturns(result1 *ec2.AttachInternetGatewayOutput, result2 error) {
	fake.attachInternetGatewayWithContextMutex.Lock()
	defer fake.attachInternetGatewayWithContextMutex.Unlock()
	fake.AttachInternetGatewayWithContextStub = nil
	fake.attachInternetGatewayWithContextReturns = struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachInternetGatewayWithContextReturnsOnCall(i int, result1 *ec2.AttachInternetGatewayOutput, result2 error) {
	fake.attachInternetGatewayWithContextMutex.Lock()
	defer fake.attachInternetGatewayWithContextMutex.Unlock()
	fake.AttachInternetGatewayWithContextStub = nil
	if fake.attachInternetGatewayWithContextReturnsOnCall == nil {
		fake.attachInternetGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachInternetGatewayOutput
			result2 error
		})
	}
	fake.attachInternetGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AttachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachNetworkInterface(arg1 *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	fake.attachNetworkInterfaceMutex.Lock()
	ret, specificReturn := fake.attachNetworkInterfaceReturnsOnCall[len(fake.attachNetworkInterfaceArgsForCall)]
	fake.attachNetworkInterfaceArgsForCall = append(fake.attachNetworkInterfaceArgsForCall, struct {
		arg1 *ec2.AttachNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("AttachNetworkInterface", []interface{}{arg1})
	fake.attachNetworkInterfaceMutex.Unlock()
	if fake.AttachNetworkInterfaceStub != nil {
		return fake.AttachNetworkInterfaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachNetworkInterfaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachNetworkInterfaceCallCount() int {
	fake.attachNetworkInterfaceMutex.RLock()
	defer fake.attachNetworkInterfaceMutex.RUnlock()
	return len(fake.attachNetworkInterfaceArgsForCall)
}

func (fake *FakeEC2API) AttachNetworkInterfaceCalls(stub func(*ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error)) {
	fake.attachNetworkInterfaceMutex.Lock()
	defer fake.attachNetworkInterfaceMutex.Unlock()
	fake.AttachNetworkInterfaceStub = stub
}

func (fake *FakeEC2API) AttachNetworkInterfaceArgsForCall(i int) *ec2.AttachNetworkInterfaceInput {
	fake.attachNetworkInterfaceMutex.RLock()
	defer fake.attachNetworkInterfaceMutex.RUnlock()
	argsForCall := fake.attachNetworkInterfaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachNetworkInterfaceReturns(result1 *ec2.AttachNetworkInterfaceOutput, result2 error) {
	fake.attachNetworkInterfaceMutex.Lock()
	defer fake.attachNetworkInterfaceMutex.Unlock()
	fake.AttachNetworkInterfaceStub = nil
	fake.attachNetworkInterfaceReturns = struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachNetworkInterfaceReturnsOnCall(i int, result1 *ec2.AttachNetworkInterfaceOutput, result2 error) {
	fake.attachNetworkInterfaceMutex.Lock()
	defer fake.attachNetworkInterfaceMutex.Unlock()
	fake.AttachNetworkInterfaceStub = nil
	if fake.attachNetworkInterfaceReturnsOnCall == nil {
		fake.attachNetworkInterfaceReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachNetworkInterfaceOutput
			result2 error
		})
	}
	fake.attachNetworkInterfaceReturnsOnCall[i] = struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachNetworkInterfaceRequest(arg1 *ec2.AttachNetworkInterfaceInput) (*request.Request, *ec2.AttachNetworkInterfaceOutput) {
	fake.attachNetworkInterfaceRequestMutex.Lock()
	ret, specificReturn := fake.attachNetworkInterfaceRequestReturnsOnCall[len(fake.attachNetworkInterfaceRequestArgsForCall)]
	fake.attachNetworkInterfaceRequestArgsForCall = append(fake.attachNetworkInterfaceRequestArgsForCall, struct {
		arg1 *ec2.AttachNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("AttachNetworkInterfaceRequest", []interface{}{arg1})
	fake.attachNetworkInterfaceRequestMutex.Unlock()
	if fake.AttachNetworkInterfaceRequestStub != nil {
		return fake.AttachNetworkInterfaceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachNetworkInterfaceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachNetworkInterfaceRequestCallCount() int {
	fake.attachNetworkInterfaceRequestMutex.RLock()
	defer fake.attachNetworkInterfaceRequestMutex.RUnlock()
	return len(fake.attachNetworkInterfaceRequestArgsForCall)
}

func (fake *FakeEC2API) AttachNetworkInterfaceRequestCalls(stub func(*ec2.AttachNetworkInterfaceInput) (*request.Request, *ec2.AttachNetworkInterfaceOutput)) {
	fake.attachNetworkInterfaceRequestMutex.Lock()
	defer fake.attachNetworkInterfaceRequestMutex.Unlock()
	fake.AttachNetworkInterfaceRequestStub = stub
}

func (fake *FakeEC2API) AttachNetworkInterfaceRequestArgsForCall(i int) *ec2.AttachNetworkInterfaceInput {
	fake.attachNetworkInterfaceRequestMutex.RLock()
	defer fake.attachNetworkInterfaceRequestMutex.RUnlock()
	argsForCall := fake.attachNetworkInterfaceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachNetworkInterfaceRequestReturns(result1 *request.Request, result2 *ec2.AttachNetworkInterfaceOutput) {
	fake.attachNetworkInterfaceRequestMutex.Lock()
	defer fake.attachNetworkInterfaceRequestMutex.Unlock()
	fake.AttachNetworkInterfaceRequestStub = nil
	fake.attachNetworkInterfaceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AttachNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachNetworkInterfaceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AttachNetworkInterfaceOutput) {
	fake.attachNetworkInterfaceRequestMutex.Lock()
	defer fake.attachNetworkInterfaceRequestMutex.Unlock()
	fake.AttachNetworkInterfaceRequestStub = nil
	if fake.attachNetworkInterfaceRequestReturnsOnCall == nil {
		fake.attachNetworkInterfaceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AttachNetworkInterfaceOutput
		})
	}
	fake.attachNetworkInterfaceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AttachNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachNetworkInterfaceWithContext(arg1 aws.Context, arg2 *ec2.AttachNetworkInterfaceInput, arg3 ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error) {
	fake.attachNetworkInterfaceWithContextMutex.Lock()
	ret, specificReturn := fake.attachNetworkInterfaceWithContextReturnsOnCall[len(fake.attachNetworkInterfaceWithContextArgsForCall)]
	fake.attachNetworkInterfaceWithContextArgsForCall = append(fake.attachNetworkInterfaceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AttachNetworkInterfaceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachNetworkInterfaceWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachNetworkInterfaceWithContextMutex.Unlock()
	if fake.AttachNetworkInterfaceWithContextStub != nil {
		return fake.AttachNetworkInterfaceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachNetworkInterfaceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachNetworkInterfaceWithContextCallCount() int {
	fake.attachNetworkInterfaceWithContextMutex.RLock()
	defer fake.attachNetworkInterfaceWithContextMutex.RUnlock()
	return len(fake.attachNetworkInterfaceWithContextArgsForCall)
}

func (fake *FakeEC2API) AttachNetworkInterfaceWithContextCalls(stub func(aws.Context, *ec2.AttachNetworkInterfaceInput, ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error)) {
	fake.attachNetworkInterfaceWithContextMutex.Lock()
	defer fake.attachNetworkInterfaceWithContextMutex.Unlock()
	fake.AttachNetworkInterfaceWithContextStub = stub
}

func (fake *FakeEC2API) AttachNetworkInterfaceWithContextArgsForCall(i int) (aws.Context, *ec2.AttachNetworkInterfaceInput, []request.Option) {
	fake.attachNetworkInterfaceWithContextMutex.RLock()
	defer fake.attachNetworkInterfaceWithContextMutex.RUnlock()
	argsForCall := fake.attachNetworkInterfaceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AttachNetworkInterfaceWithContextReturns(result1 *ec2.AttachNetworkInterfaceOutput, result2 error) {
	fake.attachNetworkInterfaceWithContextMutex.Lock()
	defer fake.attachNetworkInterfaceWithContextMutex.Unlock()
	fake.AttachNetworkInterfaceWithContextStub = nil
	fake.attachNetworkInterfaceWithContextReturns = struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachNetworkInterfaceWithContextReturnsOnCall(i int, result1 *ec2.AttachNetworkInterfaceOutput, result2 error) {
	fake.attachNetworkInterfaceWithContextMutex.Lock()
	defer fake.attachNetworkInterfaceWithContextMutex.Unlock()
	fake.AttachNetworkInterfaceWithContextStub = nil
	if fake.attachNetworkInterfaceWithContextReturnsOnCall == nil {
		fake.attachNetworkInterfaceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachNetworkInterfaceOutput
			result2 error
		})
	}
	fake.attachNetworkInterfaceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AttachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVolume(arg1 *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	fake.attachVolumeMutex.Lock()
	ret, specificReturn := fake.attachVolumeReturnsOnCall[len(fake.attachVolumeArgsForCall)]
	fake.attachVolumeArgsForCall = append(fake.attachVolumeArgsForCall, struct {
		arg1 *ec2.AttachVolumeInput
	}{arg1})
	fake.recordInvocation("AttachVolume", []interface{}{arg1})
	fake.attachVolumeMutex.Unlock()
	if fake.AttachVolumeStub != nil {
		return fake.AttachVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachVolumeCallCount() int {
	fake.attachVolumeMutex.RLock()
	defer fake.attachVolumeMutex.RUnlock()
	return len(fake.attachVolumeArgsForCall)
}

func (fake *FakeEC2API) AttachVolumeCalls(stub func(*ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error)) {
	fake.attachVolumeMutex.Lock()
	defer fake.attachVolumeMutex.Unlock()
	fake.AttachVolumeStub = stub
}

func (fake *FakeEC2API) AttachVolumeArgsForCall(i int) *ec2.AttachVolumeInput {
	fake.attachVolumeMutex.RLock()
	defer fake.attachVolumeMutex.RUnlock()
	argsForCall := fake.attachVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachVolumeReturns(result1 *ec2.VolumeAttachment, result2 error) {
	fake.attachVolumeMutex.Lock()
	defer fake.attachVolumeMutex.Unlock()
	fake.AttachVolumeStub = nil
	fake.attachVolumeReturns = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVolumeReturnsOnCall(i int, result1 *ec2.VolumeAttachment, result2 error) {
	fake.attachVolumeMutex.Lock()
	defer fake.attachVolumeMutex.Unlock()
	fake.AttachVolumeStub = nil
	if fake.attachVolumeReturnsOnCall == nil {
		fake.attachVolumeReturnsOnCall = make(map[int]struct {
			result1 *ec2.VolumeAttachment
			result2 error
		})
	}
	fake.attachVolumeReturnsOnCall[i] = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVolumeRequest(arg1 *ec2.AttachVolumeInput) (*request.Request, *ec2.VolumeAttachment) {
	fake.attachVolumeRequestMutex.Lock()
	ret, specificReturn := fake.attachVolumeRequestReturnsOnCall[len(fake.attachVolumeRequestArgsForCall)]
	fake.attachVolumeRequestArgsForCall = append(fake.attachVolumeRequestArgsForCall, struct {
		arg1 *ec2.AttachVolumeInput
	}{arg1})
	fake.recordInvocation("AttachVolumeRequest", []interface{}{arg1})
	fake.attachVolumeRequestMutex.Unlock()
	if fake.AttachVolumeRequestStub != nil {
		return fake.AttachVolumeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachVolumeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachVolumeRequestCallCount() int {
	fake.attachVolumeRequestMutex.RLock()
	defer fake.attachVolumeRequestMutex.RUnlock()
	return len(fake.attachVolumeRequestArgsForCall)
}

func (fake *FakeEC2API) AttachVolumeRequestCalls(stub func(*ec2.AttachVolumeInput) (*request.Request, *ec2.VolumeAttachment)) {
	fake.attachVolumeRequestMutex.Lock()
	defer fake.attachVolumeRequestMutex.Unlock()
	fake.AttachVolumeRequestStub = stub
}

func (fake *FakeEC2API) AttachVolumeRequestArgsForCall(i int) *ec2.AttachVolumeInput {
	fake.attachVolumeRequestMutex.RLock()
	defer fake.attachVolumeRequestMutex.RUnlock()
	argsForCall := fake.attachVolumeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachVolumeRequestReturns(result1 *request.Request, result2 *ec2.VolumeAttachment) {
	fake.attachVolumeRequestMutex.Lock()
	defer fake.attachVolumeRequestMutex.Unlock()
	fake.AttachVolumeRequestStub = nil
	fake.attachVolumeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVolumeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.VolumeAttachment) {
	fake.attachVolumeRequestMutex.Lock()
	defer fake.attachVolumeRequestMutex.Unlock()
	fake.AttachVolumeRequestStub = nil
	if fake.attachVolumeRequestReturnsOnCall == nil {
		fake.attachVolumeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.VolumeAttachment
		})
	}
	fake.attachVolumeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVolumeWithContext(arg1 aws.Context, arg2 *ec2.AttachVolumeInput, arg3 ...request.Option) (*ec2.VolumeAttachment, error) {
	fake.attachVolumeWithContextMutex.Lock()
	ret, specificReturn := fake.attachVolumeWithContextReturnsOnCall[len(fake.attachVolumeWithContextArgsForCall)]
	fake.attachVolumeWithContextArgsForCall = append(fake.attachVolumeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AttachVolumeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachVolumeWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachVolumeWithContextMutex.Unlock()
	if fake.AttachVolumeWithContextStub != nil {
		return fake.AttachVolumeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachVolumeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachVolumeWithContextCallCount() int {
	fake.attachVolumeWithContextMutex.RLock()
	defer fake.attachVolumeWithContextMutex.RUnlock()
	return len(fake.attachVolumeWithContextArgsForCall)
}

func (fake *FakeEC2API) AttachVolumeWithContextCalls(stub func(aws.Context, *ec2.AttachVolumeInput, ...request.Option) (*ec2.VolumeAttachment, error)) {
	fake.attachVolumeWithContextMutex.Lock()
	defer fake.attachVolumeWithContextMutex.Unlock()
	fake.AttachVolumeWithContextStub = stub
}

func (fake *FakeEC2API) AttachVolumeWithContextArgsForCall(i int) (aws.Context, *ec2.AttachVolumeInput, []request.Option) {
	fake.attachVolumeWithContextMutex.RLock()
	defer fake.attachVolumeWithContextMutex.RUnlock()
	argsForCall := fake.attachVolumeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AttachVolumeWithContextReturns(result1 *ec2.VolumeAttachment, result2 error) {
	fake.attachVolumeWithContextMutex.Lock()
	defer fake.attachVolumeWithContextMutex.Unlock()
	fake.AttachVolumeWithContextStub = nil
	fake.attachVolumeWithContextReturns = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVolumeWithContextReturnsOnCall(i int, result1 *ec2.VolumeAttachment, result2 error) {
	fake.attachVolumeWithContextMutex.Lock()
	defer fake.attachVolumeWithContextMutex.Unlock()
	fake.AttachVolumeWithContextStub = nil
	if fake.attachVolumeWithContextReturnsOnCall == nil {
		fake.attachVolumeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.VolumeAttachment
			result2 error
		})
	}
	fake.attachVolumeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVpnGateway(arg1 *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
	fake.attachVpnGatewayMutex.Lock()
	ret, specificReturn := fake.attachVpnGatewayReturnsOnCall[len(fake.attachVpnGatewayArgsForCall)]
	fake.attachVpnGatewayArgsForCall = append(fake.attachVpnGatewayArgsForCall, struct {
		arg1 *ec2.AttachVpnGatewayInput
	}{arg1})
	fake.recordInvocation("AttachVpnGateway", []interface{}{arg1})
	fake.attachVpnGatewayMutex.Unlock()
	if fake.AttachVpnGatewayStub != nil {
		return fake.AttachVpnGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachVpnGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachVpnGatewayCallCount() int {
	fake.attachVpnGatewayMutex.RLock()
	defer fake.attachVpnGatewayMutex.RUnlock()
	return len(fake.attachVpnGatewayArgsForCall)
}

func (fake *FakeEC2API) AttachVpnGatewayCalls(stub func(*ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error)) {
	fake.attachVpnGatewayMutex.Lock()
	defer fake.attachVpnGatewayMutex.Unlock()
	fake.AttachVpnGatewayStub = stub
}

func (fake *FakeEC2API) AttachVpnGatewayArgsForCall(i int) *ec2.AttachVpnGatewayInput {
	fake.attachVpnGatewayMutex.RLock()
	defer fake.attachVpnGatewayMutex.RUnlock()
	argsForCall := fake.attachVpnGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachVpnGatewayReturns(result1 *ec2.AttachVpnGatewayOutput, result2 error) {
	fake.attachVpnGatewayMutex.Lock()
	defer fake.attachVpnGatewayMutex.Unlock()
	fake.AttachVpnGatewayStub = nil
	fake.attachVpnGatewayReturns = struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVpnGatewayReturnsOnCall(i int, result1 *ec2.AttachVpnGatewayOutput, result2 error) {
	fake.attachVpnGatewayMutex.Lock()
	defer fake.attachVpnGatewayMutex.Unlock()
	fake.AttachVpnGatewayStub = nil
	if fake.attachVpnGatewayReturnsOnCall == nil {
		fake.attachVpnGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachVpnGatewayOutput
			result2 error
		})
	}
	fake.attachVpnGatewayReturnsOnCall[i] = struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVpnGatewayRequest(arg1 *ec2.AttachVpnGatewayInput) (*request.Request, *ec2.AttachVpnGatewayOutput) {
	fake.attachVpnGatewayRequestMutex.Lock()
	ret, specificReturn := fake.attachVpnGatewayRequestReturnsOnCall[len(fake.attachVpnGatewayRequestArgsForCall)]
	fake.attachVpnGatewayRequestArgsForCall = append(fake.attachVpnGatewayRequestArgsForCall, struct {
		arg1 *ec2.AttachVpnGatewayInput
	}{arg1})
	fake.recordInvocation("AttachVpnGatewayRequest", []interface{}{arg1})
	fake.attachVpnGatewayRequestMutex.Unlock()
	if fake.AttachVpnGatewayRequestStub != nil {
		return fake.AttachVpnGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachVpnGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachVpnGatewayRequestCallCount() int {
	fake.attachVpnGatewayRequestMutex.RLock()
	defer fake.attachVpnGatewayRequestMutex.RUnlock()
	return len(fake.attachVpnGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) AttachVpnGatewayRequestCalls(stub func(*ec2.AttachVpnGatewayInput) (*request.Request, *ec2.AttachVpnGatewayOutput)) {
	fake.attachVpnGatewayRequestMutex.Lock()
	defer fake.attachVpnGatewayRequestMutex.Unlock()
	fake.AttachVpnGatewayRequestStub = stub
}

func (fake *FakeEC2API) AttachVpnGatewayRequestArgsForCall(i int) *ec2.AttachVpnGatewayInput {
	fake.attachVpnGatewayRequestMutex.RLock()
	defer fake.attachVpnGatewayRequestMutex.RUnlock()
	argsForCall := fake.attachVpnGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AttachVpnGatewayRequestReturns(result1 *request.Request, result2 *ec2.AttachVpnGatewayOutput) {
	fake.attachVpnGatewayRequestMutex.Lock()
	defer fake.attachVpnGatewayRequestMutex.Unlock()
	fake.AttachVpnGatewayRequestStub = nil
	fake.attachVpnGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AttachVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVpnGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AttachVpnGatewayOutput) {
	fake.attachVpnGatewayRequestMutex.Lock()
	defer fake.attachVpnGatewayRequestMutex.Unlock()
	fake.AttachVpnGatewayRequestStub = nil
	if fake.attachVpnGatewayRequestReturnsOnCall == nil {
		fake.attachVpnGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AttachVpnGatewayOutput
		})
	}
	fake.attachVpnGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AttachVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVpnGatewayWithContext(arg1 aws.Context, arg2 *ec2.AttachVpnGatewayInput, arg3 ...request.Option) (*ec2.AttachVpnGatewayOutput, error) {
	fake.attachVpnGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.attachVpnGatewayWithContextReturnsOnCall[len(fake.attachVpnGatewayWithContextArgsForCall)]
	fake.attachVpnGatewayWithContextArgsForCall = append(fake.attachVpnGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AttachVpnGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AttachVpnGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.attachVpnGatewayWithContextMutex.Unlock()
	if fake.AttachVpnGatewayWithContextStub != nil {
		return fake.AttachVpnGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachVpnGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AttachVpnGatewayWithContextCallCount() int {
	fake.attachVpnGatewayWithContextMutex.RLock()
	defer fake.attachVpnGatewayWithContextMutex.RUnlock()
	return len(fake.attachVpnGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) AttachVpnGatewayWithContextCalls(stub func(aws.Context, *ec2.AttachVpnGatewayInput, ...request.Option) (*ec2.AttachVpnGatewayOutput, error)) {
	fake.attachVpnGatewayWithContextMutex.Lock()
	defer fake.attachVpnGatewayWithContextMutex.Unlock()
	fake.AttachVpnGatewayWithContextStub = stub
}

func (fake *FakeEC2API) AttachVpnGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.AttachVpnGatewayInput, []request.Option) {
	fake.attachVpnGatewayWithContextMutex.RLock()
	defer fake.attachVpnGatewayWithContextMutex.RUnlock()
	argsForCall := fake.attachVpnGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AttachVpnGatewayWithContextReturns(result1 *ec2.AttachVpnGatewayOutput, result2 error) {
	fake.attachVpnGatewayWithContextMutex.Lock()
	defer fake.attachVpnGatewayWithContextMutex.Unlock()
	fake.AttachVpnGatewayWithContextStub = nil
	fake.attachVpnGatewayWithContextReturns = struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AttachVpnGatewayWithContextReturnsOnCall(i int, result1 *ec2.AttachVpnGatewayOutput, result2 error) {
	fake.attachVpnGatewayWithContextMutex.Lock()
	defer fake.attachVpnGatewayWithContextMutex.Unlock()
	fake.AttachVpnGatewayWithContextStub = nil
	if fake.attachVpnGatewayWithContextReturnsOnCall == nil {
		fake.attachVpnGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AttachVpnGatewayOutput
			result2 error
		})
	}
	fake.attachVpnGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AttachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeClientVpnIngress(arg1 *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	fake.authorizeClientVpnIngressMutex.Lock()
	ret, specificReturn := fake.authorizeClientVpnIngressReturnsOnCall[len(fake.authorizeClientVpnIngressArgsForCall)]
	fake.authorizeClientVpnIngressArgsForCall = append(fake.authorizeClientVpnIngressArgsForCall, struct {
		arg1 *ec2.AuthorizeClientVpnIngressInput
	}{arg1})
	fake.recordInvocation("AuthorizeClientVpnIngress", []interface{}{arg1})
	fake.authorizeClientVpnIngressMutex.Unlock()
	if fake.AuthorizeClientVpnIngressStub != nil {
		return fake.AuthorizeClientVpnIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeClientVpnIngressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressCallCount() int {
	fake.authorizeClientVpnIngressMutex.RLock()
	defer fake.authorizeClientVpnIngressMutex.RUnlock()
	return len(fake.authorizeClientVpnIngressArgsForCall)
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressCalls(stub func(*ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error)) {
	fake.authorizeClientVpnIngressMutex.Lock()
	defer fake.authorizeClientVpnIngressMutex.Unlock()
	fake.AuthorizeClientVpnIngressStub = stub
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressArgsForCall(i int) *ec2.AuthorizeClientVpnIngressInput {
	fake.authorizeClientVpnIngressMutex.RLock()
	defer fake.authorizeClientVpnIngressMutex.RUnlock()
	argsForCall := fake.authorizeClientVpnIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressReturns(result1 *ec2.AuthorizeClientVpnIngressOutput, result2 error) {
	fake.authorizeClientVpnIngressMutex.Lock()
	defer fake.authorizeClientVpnIngressMutex.Unlock()
	fake.AuthorizeClientVpnIngressStub = nil
	fake.authorizeClientVpnIngressReturns = struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressReturnsOnCall(i int, result1 *ec2.AuthorizeClientVpnIngressOutput, result2 error) {
	fake.authorizeClientVpnIngressMutex.Lock()
	defer fake.authorizeClientVpnIngressMutex.Unlock()
	fake.AuthorizeClientVpnIngressStub = nil
	if fake.authorizeClientVpnIngressReturnsOnCall == nil {
		fake.authorizeClientVpnIngressReturnsOnCall = make(map[int]struct {
			result1 *ec2.AuthorizeClientVpnIngressOutput
			result2 error
		})
	}
	fake.authorizeClientVpnIngressReturnsOnCall[i] = struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressRequest(arg1 *ec2.AuthorizeClientVpnIngressInput) (*request.Request, *ec2.AuthorizeClientVpnIngressOutput) {
	fake.authorizeClientVpnIngressRequestMutex.Lock()
	ret, specificReturn := fake.authorizeClientVpnIngressRequestReturnsOnCall[len(fake.authorizeClientVpnIngressRequestArgsForCall)]
	fake.authorizeClientVpnIngressRequestArgsForCall = append(fake.authorizeClientVpnIngressRequestArgsForCall, struct {
		arg1 *ec2.AuthorizeClientVpnIngressInput
	}{arg1})
	fake.recordInvocation("AuthorizeClientVpnIngressRequest", []interface{}{arg1})
	fake.authorizeClientVpnIngressRequestMutex.Unlock()
	if fake.AuthorizeClientVpnIngressRequestStub != nil {
		return fake.AuthorizeClientVpnIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeClientVpnIngressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressRequestCallCount() int {
	fake.authorizeClientVpnIngressRequestMutex.RLock()
	defer fake.authorizeClientVpnIngressRequestMutex.RUnlock()
	return len(fake.authorizeClientVpnIngressRequestArgsForCall)
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressRequestCalls(stub func(*ec2.AuthorizeClientVpnIngressInput) (*request.Request, *ec2.AuthorizeClientVpnIngressOutput)) {
	fake.authorizeClientVpnIngressRequestMutex.Lock()
	defer fake.authorizeClientVpnIngressRequestMutex.Unlock()
	fake.AuthorizeClientVpnIngressRequestStub = stub
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressRequestArgsForCall(i int) *ec2.AuthorizeClientVpnIngressInput {
	fake.authorizeClientVpnIngressRequestMutex.RLock()
	defer fake.authorizeClientVpnIngressRequestMutex.RUnlock()
	argsForCall := fake.authorizeClientVpnIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressRequestReturns(result1 *request.Request, result2 *ec2.AuthorizeClientVpnIngressOutput) {
	fake.authorizeClientVpnIngressRequestMutex.Lock()
	defer fake.authorizeClientVpnIngressRequestMutex.Unlock()
	fake.AuthorizeClientVpnIngressRequestStub = nil
	fake.authorizeClientVpnIngressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AuthorizeClientVpnIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AuthorizeClientVpnIngressOutput) {
	fake.authorizeClientVpnIngressRequestMutex.Lock()
	defer fake.authorizeClientVpnIngressRequestMutex.Unlock()
	fake.AuthorizeClientVpnIngressRequestStub = nil
	if fake.authorizeClientVpnIngressRequestReturnsOnCall == nil {
		fake.authorizeClientVpnIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AuthorizeClientVpnIngressOutput
		})
	}
	fake.authorizeClientVpnIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AuthorizeClientVpnIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressWithContext(arg1 aws.Context, arg2 *ec2.AuthorizeClientVpnIngressInput, arg3 ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	fake.authorizeClientVpnIngressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeClientVpnIngressWithContextReturnsOnCall[len(fake.authorizeClientVpnIngressWithContextArgsForCall)]
	fake.authorizeClientVpnIngressWithContextArgsForCall = append(fake.authorizeClientVpnIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AuthorizeClientVpnIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AuthorizeClientVpnIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.authorizeClientVpnIngressWithContextMutex.Unlock()
	if fake.AuthorizeClientVpnIngressWithContextStub != nil {
		return fake.AuthorizeClientVpnIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeClientVpnIngressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressWithContextCallCount() int {
	fake.authorizeClientVpnIngressWithContextMutex.RLock()
	defer fake.authorizeClientVpnIngressWithContextMutex.RUnlock()
	return len(fake.authorizeClientVpnIngressWithContextArgsForCall)
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressWithContextCalls(stub func(aws.Context, *ec2.AuthorizeClientVpnIngressInput, ...request.Option) (*ec2.AuthorizeClientVpnIngressOutput, error)) {
	fake.authorizeClientVpnIngressWithContextMutex.Lock()
	defer fake.authorizeClientVpnIngressWithContextMutex.Unlock()
	fake.AuthorizeClientVpnIngressWithContextStub = stub
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressWithContextArgsForCall(i int) (aws.Context, *ec2.AuthorizeClientVpnIngressInput, []request.Option) {
	fake.authorizeClientVpnIngressWithContextMutex.RLock()
	defer fake.authorizeClientVpnIngressWithContextMutex.RUnlock()
	argsForCall := fake.authorizeClientVpnIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressWithContextReturns(result1 *ec2.AuthorizeClientVpnIngressOutput, result2 error) {
	fake.authorizeClientVpnIngressWithContextMutex.Lock()
	defer fake.authorizeClientVpnIngressWithContextMutex.Unlock()
	fake.AuthorizeClientVpnIngressWithContextStub = nil
	fake.authorizeClientVpnIngressWithContextReturns = struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeClientVpnIngressWithContextReturnsOnCall(i int, result1 *ec2.AuthorizeClientVpnIngressOutput, result2 error) {
	fake.authorizeClientVpnIngressWithContextMutex.Lock()
	defer fake.authorizeClientVpnIngressWithContextMutex.Unlock()
	fake.AuthorizeClientVpnIngressWithContextStub = nil
	if fake.authorizeClientVpnIngressWithContextReturnsOnCall == nil {
		fake.authorizeClientVpnIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AuthorizeClientVpnIngressOutput
			result2 error
		})
	}
	fake.authorizeClientVpnIngressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AuthorizeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgress(arg1 *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	fake.authorizeSecurityGroupEgressMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupEgressReturnsOnCall[len(fake.authorizeSecurityGroupEgressArgsForCall)]
	fake.authorizeSecurityGroupEgressArgsForCall = append(fake.authorizeSecurityGroupEgressArgsForCall, struct {
		arg1 *ec2.AuthorizeSecurityGroupEgressInput
	}{arg1})
	fake.recordInvocation("AuthorizeSecurityGroupEgress", []interface{}{arg1})
	fake.authorizeSecurityGroupEgressMutex.Unlock()
	if fake.AuthorizeSecurityGroupEgressStub != nil {
		return fake.AuthorizeSecurityGroupEgressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeSecurityGroupEgressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressCallCount() int {
	fake.authorizeSecurityGroupEgressMutex.RLock()
	defer fake.authorizeSecurityGroupEgressMutex.RUnlock()
	return len(fake.authorizeSecurityGroupEgressArgsForCall)
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressCalls(stub func(*ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error)) {
	fake.authorizeSecurityGroupEgressMutex.Lock()
	defer fake.authorizeSecurityGroupEgressMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressStub = stub
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressArgsForCall(i int) *ec2.AuthorizeSecurityGroupEgressInput {
	fake.authorizeSecurityGroupEgressMutex.RLock()
	defer fake.authorizeSecurityGroupEgressMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupEgressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressReturns(result1 *ec2.AuthorizeSecurityGroupEgressOutput, result2 error) {
	fake.authorizeSecurityGroupEgressMutex.Lock()
	defer fake.authorizeSecurityGroupEgressMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressStub = nil
	fake.authorizeSecurityGroupEgressReturns = struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressReturnsOnCall(i int, result1 *ec2.AuthorizeSecurityGroupEgressOutput, result2 error) {
	fake.authorizeSecurityGroupEgressMutex.Lock()
	defer fake.authorizeSecurityGroupEgressMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressStub = nil
	if fake.authorizeSecurityGroupEgressReturnsOnCall == nil {
		fake.authorizeSecurityGroupEgressReturnsOnCall = make(map[int]struct {
			result1 *ec2.AuthorizeSecurityGroupEgressOutput
			result2 error
		})
	}
	fake.authorizeSecurityGroupEgressReturnsOnCall[i] = struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressRequest(arg1 *ec2.AuthorizeSecurityGroupEgressInput) (*request.Request, *ec2.AuthorizeSecurityGroupEgressOutput) {
	fake.authorizeSecurityGroupEgressRequestMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupEgressRequestReturnsOnCall[len(fake.authorizeSecurityGroupEgressRequestArgsForCall)]
	fake.authorizeSecurityGroupEgressRequestArgsForCall = append(fake.authorizeSecurityGroupEgressRequestArgsForCall, struct {
		arg1 *ec2.AuthorizeSecurityGroupEgressInput
	}{arg1})
	fake.recordInvocation("AuthorizeSecurityGroupEgressRequest", []interface{}{arg1})
	fake.authorizeSecurityGroupEgressRequestMutex.Unlock()
	if fake.AuthorizeSecurityGroupEgressRequestStub != nil {
		return fake.AuthorizeSecurityGroupEgressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeSecurityGroupEgressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressRequestCallCount() int {
	fake.authorizeSecurityGroupEgressRequestMutex.RLock()
	defer fake.authorizeSecurityGroupEgressRequestMutex.RUnlock()
	return len(fake.authorizeSecurityGroupEgressRequestArgsForCall)
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressRequestCalls(stub func(*ec2.AuthorizeSecurityGroupEgressInput) (*request.Request, *ec2.AuthorizeSecurityGroupEgressOutput)) {
	fake.authorizeSecurityGroupEgressRequestMutex.Lock()
	defer fake.authorizeSecurityGroupEgressRequestMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressRequestStub = stub
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressRequestArgsForCall(i int) *ec2.AuthorizeSecurityGroupEgressInput {
	fake.authorizeSecurityGroupEgressRequestMutex.RLock()
	defer fake.authorizeSecurityGroupEgressRequestMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupEgressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressRequestReturns(result1 *request.Request, result2 *ec2.AuthorizeSecurityGroupEgressOutput) {
	fake.authorizeSecurityGroupEgressRequestMutex.Lock()
	defer fake.authorizeSecurityGroupEgressRequestMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressRequestStub = nil
	fake.authorizeSecurityGroupEgressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupEgressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AuthorizeSecurityGroupEgressOutput) {
	fake.authorizeSecurityGroupEgressRequestMutex.Lock()
	defer fake.authorizeSecurityGroupEgressRequestMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressRequestStub = nil
	if fake.authorizeSecurityGroupEgressRequestReturnsOnCall == nil {
		fake.authorizeSecurityGroupEgressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AuthorizeSecurityGroupEgressOutput
		})
	}
	fake.authorizeSecurityGroupEgressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupEgressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressWithContext(arg1 aws.Context, arg2 *ec2.AuthorizeSecurityGroupEgressInput, arg3 ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	fake.authorizeSecurityGroupEgressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupEgressWithContextReturnsOnCall[len(fake.authorizeSecurityGroupEgressWithContextArgsForCall)]
	fake.authorizeSecurityGroupEgressWithContextArgsForCall = append(fake.authorizeSecurityGroupEgressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AuthorizeSecurityGroupEgressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AuthorizeSecurityGroupEgressWithContext", []interface{}{arg1, arg2, arg3})
	fake.authorizeSecurityGroupEgressWithContextMutex.Unlock()
	if fake.AuthorizeSecurityGroupEgressWithContextStub != nil {
		return fake.AuthorizeSecurityGroupEgressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeSecurityGroupEgressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressWithContextCallCount() int {
	fake.authorizeSecurityGroupEgressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupEgressWithContextMutex.RUnlock()
	return len(fake.authorizeSecurityGroupEgressWithContextArgsForCall)
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressWithContextCalls(stub func(aws.Context, *ec2.AuthorizeSecurityGroupEgressInput, ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error)) {
	fake.authorizeSecurityGroupEgressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupEgressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressWithContextStub = stub
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressWithContextArgsForCall(i int) (aws.Context, *ec2.AuthorizeSecurityGroupEgressInput, []request.Option) {
	fake.authorizeSecurityGroupEgressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupEgressWithContextMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupEgressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressWithContextReturns(result1 *ec2.AuthorizeSecurityGroupEgressOutput, result2 error) {
	fake.authorizeSecurityGroupEgressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupEgressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressWithContextStub = nil
	fake.authorizeSecurityGroupEgressWithContextReturns = struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupEgressWithContextReturnsOnCall(i int, result1 *ec2.AuthorizeSecurityGroupEgressOutput, result2 error) {
	fake.authorizeSecurityGroupEgressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupEgressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupEgressWithContextStub = nil
	if fake.authorizeSecurityGroupEgressWithContextReturnsOnCall == nil {
		fake.authorizeSecurityGroupEgressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AuthorizeSecurityGroupEgressOutput
			result2 error
		})
	}
	fake.authorizeSecurityGroupEgressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AuthorizeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngress(arg1 *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	fake.authorizeSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupIngressReturnsOnCall[len(fake.authorizeSecurityGroupIngressArgsForCall)]
	fake.authorizeSecurityGroupIngressArgsForCall = append(fake.authorizeSecurityGroupIngressArgsForCall, struct {
		arg1 *ec2.AuthorizeSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("AuthorizeSecurityGroupIngress", []interface{}{arg1})
	fake.authorizeSecurityGroupIngressMutex.Unlock()
	if fake.AuthorizeSecurityGroupIngressStub != nil {
		return fake.AuthorizeSecurityGroupIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeSecurityGroupIngressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressCallCount() int {
	fake.authorizeSecurityGroupIngressMutex.RLock()
	defer fake.authorizeSecurityGroupIngressMutex.RUnlock()
	return len(fake.authorizeSecurityGroupIngressArgsForCall)
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressCalls(stub func(*ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error)) {
	fake.authorizeSecurityGroupIngressMutex.Lock()
	defer fake.authorizeSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressStub = stub
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressArgsForCall(i int) *ec2.AuthorizeSecurityGroupIngressInput {
	fake.authorizeSecurityGroupIngressMutex.RLock()
	defer fake.authorizeSecurityGroupIngressMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressReturns(result1 *ec2.AuthorizeSecurityGroupIngressOutput, result2 error) {
	fake.authorizeSecurityGroupIngressMutex.Lock()
	defer fake.authorizeSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressStub = nil
	fake.authorizeSecurityGroupIngressReturns = struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressReturnsOnCall(i int, result1 *ec2.AuthorizeSecurityGroupIngressOutput, result2 error) {
	fake.authorizeSecurityGroupIngressMutex.Lock()
	defer fake.authorizeSecurityGroupIngressMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressStub = nil
	if fake.authorizeSecurityGroupIngressReturnsOnCall == nil {
		fake.authorizeSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *ec2.AuthorizeSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressRequest(arg1 *ec2.AuthorizeSecurityGroupIngressInput) (*request.Request, *ec2.AuthorizeSecurityGroupIngressOutput) {
	fake.authorizeSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupIngressRequestReturnsOnCall[len(fake.authorizeSecurityGroupIngressRequestArgsForCall)]
	fake.authorizeSecurityGroupIngressRequestArgsForCall = append(fake.authorizeSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *ec2.AuthorizeSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("AuthorizeSecurityGroupIngressRequest", []interface{}{arg1})
	fake.authorizeSecurityGroupIngressRequestMutex.Unlock()
	if fake.AuthorizeSecurityGroupIngressRequestStub != nil {
		return fake.AuthorizeSecurityGroupIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeSecurityGroupIngressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressRequestCallCount() int {
	fake.authorizeSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.authorizeSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressRequestCalls(stub func(*ec2.AuthorizeSecurityGroupIngressInput) (*request.Request, *ec2.AuthorizeSecurityGroupIngressOutput)) {
	fake.authorizeSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressRequestStub = stub
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressRequestArgsForCall(i int) *ec2.AuthorizeSecurityGroupIngressInput {
	fake.authorizeSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeSecurityGroupIngressRequestMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *ec2.AuthorizeSecurityGroupIngressOutput) {
	fake.authorizeSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressRequestStub = nil
	fake.authorizeSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.AuthorizeSecurityGroupIngressOutput) {
	fake.authorizeSecurityGroupIngressRequestMutex.Lock()
	defer fake.authorizeSecurityGroupIngressRequestMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressRequestStub = nil
	if fake.authorizeSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.authorizeSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.AuthorizeSecurityGroupIngressOutput
		})
	}
	fake.authorizeSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.AuthorizeSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressWithContext(arg1 aws.Context, arg2 *ec2.AuthorizeSecurityGroupIngressInput, arg3 ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeSecurityGroupIngressWithContextReturnsOnCall[len(fake.authorizeSecurityGroupIngressWithContextArgsForCall)]
	fake.authorizeSecurityGroupIngressWithContextArgsForCall = append(fake.authorizeSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.AuthorizeSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AuthorizeSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	if fake.AuthorizeSecurityGroupIngressWithContextStub != nil {
		return fake.AuthorizeSecurityGroupIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizeSecurityGroupIngressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressWithContextCallCount() int {
	fake.authorizeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.authorizeSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressWithContextCalls(stub func(aws.Context, *ec2.AuthorizeSecurityGroupIngressInput, ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error)) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressWithContextArgsForCall(i int) (aws.Context, *ec2.AuthorizeSecurityGroupIngressInput, []request.Option) {
	fake.authorizeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.authorizeSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressWithContextReturns(result1 *ec2.AuthorizeSecurityGroupIngressOutput, result2 error) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressWithContextStub = nil
	fake.authorizeSecurityGroupIngressWithContextReturns = struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) AuthorizeSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *ec2.AuthorizeSecurityGroupIngressOutput, result2 error) {
	fake.authorizeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.Unlock()
	fake.AuthorizeSecurityGroupIngressWithContextStub = nil
	if fake.authorizeSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.authorizeSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.AuthorizeSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.AuthorizeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) BundleInstance(arg1 *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	fake.bundleInstanceMutex.Lock()
	ret, specificReturn := fake.bundleInstanceReturnsOnCall[len(fake.bundleInstanceArgsForCall)]
	fake.bundleInstanceArgsForCall = append(fake.bundleInstanceArgsForCall, struct {
		arg1 *ec2.BundleInstanceInput
	}{arg1})
	fake.recordInvocation("BundleInstance", []interface{}{arg1})
	fake.bundleInstanceMutex.Unlock()
	if fake.BundleInstanceStub != nil {
		return fake.BundleInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.bundleInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) BundleInstanceCallCount() int {
	fake.bundleInstanceMutex.RLock()
	defer fake.bundleInstanceMutex.RUnlock()
	return len(fake.bundleInstanceArgsForCall)
}

func (fake *FakeEC2API) BundleInstanceCalls(stub func(*ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error)) {
	fake.bundleInstanceMutex.Lock()
	defer fake.bundleInstanceMutex.Unlock()
	fake.BundleInstanceStub = stub
}

func (fake *FakeEC2API) BundleInstanceArgsForCall(i int) *ec2.BundleInstanceInput {
	fake.bundleInstanceMutex.RLock()
	defer fake.bundleInstanceMutex.RUnlock()
	argsForCall := fake.bundleInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) BundleInstanceReturns(result1 *ec2.BundleInstanceOutput, result2 error) {
	fake.bundleInstanceMutex.Lock()
	defer fake.bundleInstanceMutex.Unlock()
	fake.BundleInstanceStub = nil
	fake.bundleInstanceReturns = struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) BundleInstanceReturnsOnCall(i int, result1 *ec2.BundleInstanceOutput, result2 error) {
	fake.bundleInstanceMutex.Lock()
	defer fake.bundleInstanceMutex.Unlock()
	fake.BundleInstanceStub = nil
	if fake.bundleInstanceReturnsOnCall == nil {
		fake.bundleInstanceReturnsOnCall = make(map[int]struct {
			result1 *ec2.BundleInstanceOutput
			result2 error
		})
	}
	fake.bundleInstanceReturnsOnCall[i] = struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) BundleInstanceRequest(arg1 *ec2.BundleInstanceInput) (*request.Request, *ec2.BundleInstanceOutput) {
	fake.bundleInstanceRequestMutex.Lock()
	ret, specificReturn := fake.bundleInstanceRequestReturnsOnCall[len(fake.bundleInstanceRequestArgsForCall)]
	fake.bundleInstanceRequestArgsForCall = append(fake.bundleInstanceRequestArgsForCall, struct {
		arg1 *ec2.BundleInstanceInput
	}{arg1})
	fake.recordInvocation("BundleInstanceRequest", []interface{}{arg1})
	fake.bundleInstanceRequestMutex.Unlock()
	if fake.BundleInstanceRequestStub != nil {
		return fake.BundleInstanceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.bundleInstanceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) BundleInstanceRequestCallCount() int {
	fake.bundleInstanceRequestMutex.RLock()
	defer fake.bundleInstanceRequestMutex.RUnlock()
	return len(fake.bundleInstanceRequestArgsForCall)
}

func (fake *FakeEC2API) BundleInstanceRequestCalls(stub func(*ec2.BundleInstanceInput) (*request.Request, *ec2.BundleInstanceOutput)) {
	fake.bundleInstanceRequestMutex.Lock()
	defer fake.bundleInstanceRequestMutex.Unlock()
	fake.BundleInstanceRequestStub = stub
}

func (fake *FakeEC2API) BundleInstanceRequestArgsForCall(i int) *ec2.BundleInstanceInput {
	fake.bundleInstanceRequestMutex.RLock()
	defer fake.bundleInstanceRequestMutex.RUnlock()
	argsForCall := fake.bundleInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) BundleInstanceRequestReturns(result1 *request.Request, result2 *ec2.BundleInstanceOutput) {
	fake.bundleInstanceRequestMutex.Lock()
	defer fake.bundleInstanceRequestMutex.Unlock()
	fake.BundleInstanceRequestStub = nil
	fake.bundleInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.BundleInstanceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) BundleInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.BundleInstanceOutput) {
	fake.bundleInstanceRequestMutex.Lock()
	defer fake.bundleInstanceRequestMutex.Unlock()
	fake.BundleInstanceRequestStub = nil
	if fake.bundleInstanceRequestReturnsOnCall == nil {
		fake.bundleInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.BundleInstanceOutput
		})
	}
	fake.bundleInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.BundleInstanceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) BundleInstanceWithContext(arg1 aws.Context, arg2 *ec2.BundleInstanceInput, arg3 ...request.Option) (*ec2.BundleInstanceOutput, error) {
	fake.bundleInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.bundleInstanceWithContextReturnsOnCall[len(fake.bundleInstanceWithContextArgsForCall)]
	fake.bundleInstanceWithContextArgsForCall = append(fake.bundleInstanceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.BundleInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("BundleInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.bundleInstanceWithContextMutex.Unlock()
	if fake.BundleInstanceWithContextStub != nil {
		return fake.BundleInstanceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.bundleInstanceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) BundleInstanceWithContextCallCount() int {
	fake.bundleInstanceWithContextMutex.RLock()
	defer fake.bundleInstanceWithContextMutex.RUnlock()
	return len(fake.bundleInstanceWithContextArgsForCall)
}

func (fake *FakeEC2API) BundleInstanceWithContextCalls(stub func(aws.Context, *ec2.BundleInstanceInput, ...request.Option) (*ec2.BundleInstanceOutput, error)) {
	fake.bundleInstanceWithContextMutex.Lock()
	defer fake.bundleInstanceWithContextMutex.Unlock()
	fake.BundleInstanceWithContextStub = stub
}

func (fake *FakeEC2API) BundleInstanceWithContextArgsForCall(i int) (aws.Context, *ec2.BundleInstanceInput, []request.Option) {
	fake.bundleInstanceWithContextMutex.RLock()
	defer fake.bundleInstanceWithContextMutex.RUnlock()
	argsForCall := fake.bundleInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) BundleInstanceWithContextReturns(result1 *ec2.BundleInstanceOutput, result2 error) {
	fake.bundleInstanceWithContextMutex.Lock()
	defer fake.bundleInstanceWithContextMutex.Unlock()
	fake.BundleInstanceWithContextStub = nil
	fake.bundleInstanceWithContextReturns = struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) BundleInstanceWithContextReturnsOnCall(i int, result1 *ec2.BundleInstanceOutput, result2 error) {
	fake.bundleInstanceWithContextMutex.Lock()
	defer fake.bundleInstanceWithContextMutex.Unlock()
	fake.BundleInstanceWithContextStub = nil
	if fake.bundleInstanceWithContextReturnsOnCall == nil {
		fake.bundleInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.BundleInstanceOutput
			result2 error
		})
	}
	fake.bundleInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.BundleInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelBundleTask(arg1 *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	fake.cancelBundleTaskMutex.Lock()
	ret, specificReturn := fake.cancelBundleTaskReturnsOnCall[len(fake.cancelBundleTaskArgsForCall)]
	fake.cancelBundleTaskArgsForCall = append(fake.cancelBundleTaskArgsForCall, struct {
		arg1 *ec2.CancelBundleTaskInput
	}{arg1})
	fake.recordInvocation("CancelBundleTask", []interface{}{arg1})
	fake.cancelBundleTaskMutex.Unlock()
	if fake.CancelBundleTaskStub != nil {
		return fake.CancelBundleTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelBundleTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelBundleTaskCallCount() int {
	fake.cancelBundleTaskMutex.RLock()
	defer fake.cancelBundleTaskMutex.RUnlock()
	return len(fake.cancelBundleTaskArgsForCall)
}

func (fake *FakeEC2API) CancelBundleTaskCalls(stub func(*ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error)) {
	fake.cancelBundleTaskMutex.Lock()
	defer fake.cancelBundleTaskMutex.Unlock()
	fake.CancelBundleTaskStub = stub
}

func (fake *FakeEC2API) CancelBundleTaskArgsForCall(i int) *ec2.CancelBundleTaskInput {
	fake.cancelBundleTaskMutex.RLock()
	defer fake.cancelBundleTaskMutex.RUnlock()
	argsForCall := fake.cancelBundleTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelBundleTaskReturns(result1 *ec2.CancelBundleTaskOutput, result2 error) {
	fake.cancelBundleTaskMutex.Lock()
	defer fake.cancelBundleTaskMutex.Unlock()
	fake.CancelBundleTaskStub = nil
	fake.cancelBundleTaskReturns = struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelBundleTaskReturnsOnCall(i int, result1 *ec2.CancelBundleTaskOutput, result2 error) {
	fake.cancelBundleTaskMutex.Lock()
	defer fake.cancelBundleTaskMutex.Unlock()
	fake.CancelBundleTaskStub = nil
	if fake.cancelBundleTaskReturnsOnCall == nil {
		fake.cancelBundleTaskReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelBundleTaskOutput
			result2 error
		})
	}
	fake.cancelBundleTaskReturnsOnCall[i] = struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelBundleTaskRequest(arg1 *ec2.CancelBundleTaskInput) (*request.Request, *ec2.CancelBundleTaskOutput) {
	fake.cancelBundleTaskRequestMutex.Lock()
	ret, specificReturn := fake.cancelBundleTaskRequestReturnsOnCall[len(fake.cancelBundleTaskRequestArgsForCall)]
	fake.cancelBundleTaskRequestArgsForCall = append(fake.cancelBundleTaskRequestArgsForCall, struct {
		arg1 *ec2.CancelBundleTaskInput
	}{arg1})
	fake.recordInvocation("CancelBundleTaskRequest", []interface{}{arg1})
	fake.cancelBundleTaskRequestMutex.Unlock()
	if fake.CancelBundleTaskRequestStub != nil {
		return fake.CancelBundleTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelBundleTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelBundleTaskRequestCallCount() int {
	fake.cancelBundleTaskRequestMutex.RLock()
	defer fake.cancelBundleTaskRequestMutex.RUnlock()
	return len(fake.cancelBundleTaskRequestArgsForCall)
}

func (fake *FakeEC2API) CancelBundleTaskRequestCalls(stub func(*ec2.CancelBundleTaskInput) (*request.Request, *ec2.CancelBundleTaskOutput)) {
	fake.cancelBundleTaskRequestMutex.Lock()
	defer fake.cancelBundleTaskRequestMutex.Unlock()
	fake.CancelBundleTaskRequestStub = stub
}

func (fake *FakeEC2API) CancelBundleTaskRequestArgsForCall(i int) *ec2.CancelBundleTaskInput {
	fake.cancelBundleTaskRequestMutex.RLock()
	defer fake.cancelBundleTaskRequestMutex.RUnlock()
	argsForCall := fake.cancelBundleTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelBundleTaskRequestReturns(result1 *request.Request, result2 *ec2.CancelBundleTaskOutput) {
	fake.cancelBundleTaskRequestMutex.Lock()
	defer fake.cancelBundleTaskRequestMutex.Unlock()
	fake.CancelBundleTaskRequestStub = nil
	fake.cancelBundleTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelBundleTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelBundleTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelBundleTaskOutput) {
	fake.cancelBundleTaskRequestMutex.Lock()
	defer fake.cancelBundleTaskRequestMutex.Unlock()
	fake.CancelBundleTaskRequestStub = nil
	if fake.cancelBundleTaskRequestReturnsOnCall == nil {
		fake.cancelBundleTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelBundleTaskOutput
		})
	}
	fake.cancelBundleTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelBundleTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelBundleTaskWithContext(arg1 aws.Context, arg2 *ec2.CancelBundleTaskInput, arg3 ...request.Option) (*ec2.CancelBundleTaskOutput, error) {
	fake.cancelBundleTaskWithContextMutex.Lock()
	ret, specificReturn := fake.cancelBundleTaskWithContextReturnsOnCall[len(fake.cancelBundleTaskWithContextArgsForCall)]
	fake.cancelBundleTaskWithContextArgsForCall = append(fake.cancelBundleTaskWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelBundleTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelBundleTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelBundleTaskWithContextMutex.Unlock()
	if fake.CancelBundleTaskWithContextStub != nil {
		return fake.CancelBundleTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelBundleTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelBundleTaskWithContextCallCount() int {
	fake.cancelBundleTaskWithContextMutex.RLock()
	defer fake.cancelBundleTaskWithContextMutex.RUnlock()
	return len(fake.cancelBundleTaskWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelBundleTaskWithContextCalls(stub func(aws.Context, *ec2.CancelBundleTaskInput, ...request.Option) (*ec2.CancelBundleTaskOutput, error)) {
	fake.cancelBundleTaskWithContextMutex.Lock()
	defer fake.cancelBundleTaskWithContextMutex.Unlock()
	fake.CancelBundleTaskWithContextStub = stub
}

func (fake *FakeEC2API) CancelBundleTaskWithContextArgsForCall(i int) (aws.Context, *ec2.CancelBundleTaskInput, []request.Option) {
	fake.cancelBundleTaskWithContextMutex.RLock()
	defer fake.cancelBundleTaskWithContextMutex.RUnlock()
	argsForCall := fake.cancelBundleTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelBundleTaskWithContextReturns(result1 *ec2.CancelBundleTaskOutput, result2 error) {
	fake.cancelBundleTaskWithContextMutex.Lock()
	defer fake.cancelBundleTaskWithContextMutex.Unlock()
	fake.CancelBundleTaskWithContextStub = nil
	fake.cancelBundleTaskWithContextReturns = struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelBundleTaskWithContextReturnsOnCall(i int, result1 *ec2.CancelBundleTaskOutput, result2 error) {
	fake.cancelBundleTaskWithContextMutex.Lock()
	defer fake.cancelBundleTaskWithContextMutex.Unlock()
	fake.CancelBundleTaskWithContextStub = nil
	if fake.cancelBundleTaskWithContextReturnsOnCall == nil {
		fake.cancelBundleTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelBundleTaskOutput
			result2 error
		})
	}
	fake.cancelBundleTaskWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelBundleTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelCapacityReservation(arg1 *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error) {
	fake.cancelCapacityReservationMutex.Lock()
	ret, specificReturn := fake.cancelCapacityReservationReturnsOnCall[len(fake.cancelCapacityReservationArgsForCall)]
	fake.cancelCapacityReservationArgsForCall = append(fake.cancelCapacityReservationArgsForCall, struct {
		arg1 *ec2.CancelCapacityReservationInput
	}{arg1})
	fake.recordInvocation("CancelCapacityReservation", []interface{}{arg1})
	fake.cancelCapacityReservationMutex.Unlock()
	if fake.CancelCapacityReservationStub != nil {
		return fake.CancelCapacityReservationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelCapacityReservationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelCapacityReservationCallCount() int {
	fake.cancelCapacityReservationMutex.RLock()
	defer fake.cancelCapacityReservationMutex.RUnlock()
	return len(fake.cancelCapacityReservationArgsForCall)
}

func (fake *FakeEC2API) CancelCapacityReservationCalls(stub func(*ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error)) {
	fake.cancelCapacityReservationMutex.Lock()
	defer fake.cancelCapacityReservationMutex.Unlock()
	fake.CancelCapacityReservationStub = stub
}

func (fake *FakeEC2API) CancelCapacityReservationArgsForCall(i int) *ec2.CancelCapacityReservationInput {
	fake.cancelCapacityReservationMutex.RLock()
	defer fake.cancelCapacityReservationMutex.RUnlock()
	argsForCall := fake.cancelCapacityReservationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelCapacityReservationReturns(result1 *ec2.CancelCapacityReservationOutput, result2 error) {
	fake.cancelCapacityReservationMutex.Lock()
	defer fake.cancelCapacityReservationMutex.Unlock()
	fake.CancelCapacityReservationStub = nil
	fake.cancelCapacityReservationReturns = struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelCapacityReservationReturnsOnCall(i int, result1 *ec2.CancelCapacityReservationOutput, result2 error) {
	fake.cancelCapacityReservationMutex.Lock()
	defer fake.cancelCapacityReservationMutex.Unlock()
	fake.CancelCapacityReservationStub = nil
	if fake.cancelCapacityReservationReturnsOnCall == nil {
		fake.cancelCapacityReservationReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelCapacityReservationOutput
			result2 error
		})
	}
	fake.cancelCapacityReservationReturnsOnCall[i] = struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelCapacityReservationRequest(arg1 *ec2.CancelCapacityReservationInput) (*request.Request, *ec2.CancelCapacityReservationOutput) {
	fake.cancelCapacityReservationRequestMutex.Lock()
	ret, specificReturn := fake.cancelCapacityReservationRequestReturnsOnCall[len(fake.cancelCapacityReservationRequestArgsForCall)]
	fake.cancelCapacityReservationRequestArgsForCall = append(fake.cancelCapacityReservationRequestArgsForCall, struct {
		arg1 *ec2.CancelCapacityReservationInput
	}{arg1})
	fake.recordInvocation("CancelCapacityReservationRequest", []interface{}{arg1})
	fake.cancelCapacityReservationRequestMutex.Unlock()
	if fake.CancelCapacityReservationRequestStub != nil {
		return fake.CancelCapacityReservationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelCapacityReservationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelCapacityReservationRequestCallCount() int {
	fake.cancelCapacityReservationRequestMutex.RLock()
	defer fake.cancelCapacityReservationRequestMutex.RUnlock()
	return len(fake.cancelCapacityReservationRequestArgsForCall)
}

func (fake *FakeEC2API) CancelCapacityReservationRequestCalls(stub func(*ec2.CancelCapacityReservationInput) (*request.Request, *ec2.CancelCapacityReservationOutput)) {
	fake.cancelCapacityReservationRequestMutex.Lock()
	defer fake.cancelCapacityReservationRequestMutex.Unlock()
	fake.CancelCapacityReservationRequestStub = stub
}

func (fake *FakeEC2API) CancelCapacityReservationRequestArgsForCall(i int) *ec2.CancelCapacityReservationInput {
	fake.cancelCapacityReservationRequestMutex.RLock()
	defer fake.cancelCapacityReservationRequestMutex.RUnlock()
	argsForCall := fake.cancelCapacityReservationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelCapacityReservationRequestReturns(result1 *request.Request, result2 *ec2.CancelCapacityReservationOutput) {
	fake.cancelCapacityReservationRequestMutex.Lock()
	defer fake.cancelCapacityReservationRequestMutex.Unlock()
	fake.CancelCapacityReservationRequestStub = nil
	fake.cancelCapacityReservationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelCapacityReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelCapacityReservationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelCapacityReservationOutput) {
	fake.cancelCapacityReservationRequestMutex.Lock()
	defer fake.cancelCapacityReservationRequestMutex.Unlock()
	fake.CancelCapacityReservationRequestStub = nil
	if fake.cancelCapacityReservationRequestReturnsOnCall == nil {
		fake.cancelCapacityReservationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelCapacityReservationOutput
		})
	}
	fake.cancelCapacityReservationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelCapacityReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelCapacityReservationWithContext(arg1 aws.Context, arg2 *ec2.CancelCapacityReservationInput, arg3 ...request.Option) (*ec2.CancelCapacityReservationOutput, error) {
	fake.cancelCapacityReservationWithContextMutex.Lock()
	ret, specificReturn := fake.cancelCapacityReservationWithContextReturnsOnCall[len(fake.cancelCapacityReservationWithContextArgsForCall)]
	fake.cancelCapacityReservationWithContextArgsForCall = append(fake.cancelCapacityReservationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelCapacityReservationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelCapacityReservationWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelCapacityReservationWithContextMutex.Unlock()
	if fake.CancelCapacityReservationWithContextStub != nil {
		return fake.CancelCapacityReservationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelCapacityReservationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelCapacityReservationWithContextCallCount() int {
	fake.cancelCapacityReservationWithContextMutex.RLock()
	defer fake.cancelCapacityReservationWithContextMutex.RUnlock()
	return len(fake.cancelCapacityReservationWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelCapacityReservationWithContextCalls(stub func(aws.Context, *ec2.CancelCapacityReservationInput, ...request.Option) (*ec2.CancelCapacityReservationOutput, error)) {
	fake.cancelCapacityReservationWithContextMutex.Lock()
	defer fake.cancelCapacityReservationWithContextMutex.Unlock()
	fake.CancelCapacityReservationWithContextStub = stub
}

func (fake *FakeEC2API) CancelCapacityReservationWithContextArgsForCall(i int) (aws.Context, *ec2.CancelCapacityReservationInput, []request.Option) {
	fake.cancelCapacityReservationWithContextMutex.RLock()
	defer fake.cancelCapacityReservationWithContextMutex.RUnlock()
	argsForCall := fake.cancelCapacityReservationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelCapacityReservationWithContextReturns(result1 *ec2.CancelCapacityReservationOutput, result2 error) {
	fake.cancelCapacityReservationWithContextMutex.Lock()
	defer fake.cancelCapacityReservationWithContextMutex.Unlock()
	fake.CancelCapacityReservationWithContextStub = nil
	fake.cancelCapacityReservationWithContextReturns = struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelCapacityReservationWithContextReturnsOnCall(i int, result1 *ec2.CancelCapacityReservationOutput, result2 error) {
	fake.cancelCapacityReservationWithContextMutex.Lock()
	defer fake.cancelCapacityReservationWithContextMutex.Unlock()
	fake.CancelCapacityReservationWithContextStub = nil
	if fake.cancelCapacityReservationWithContextReturnsOnCall == nil {
		fake.cancelCapacityReservationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelCapacityReservationOutput
			result2 error
		})
	}
	fake.cancelCapacityReservationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelConversionTask(arg1 *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	fake.cancelConversionTaskMutex.Lock()
	ret, specificReturn := fake.cancelConversionTaskReturnsOnCall[len(fake.cancelConversionTaskArgsForCall)]
	fake.cancelConversionTaskArgsForCall = append(fake.cancelConversionTaskArgsForCall, struct {
		arg1 *ec2.CancelConversionTaskInput
	}{arg1})
	fake.recordInvocation("CancelConversionTask", []interface{}{arg1})
	fake.cancelConversionTaskMutex.Unlock()
	if fake.CancelConversionTaskStub != nil {
		return fake.CancelConversionTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelConversionTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelConversionTaskCallCount() int {
	fake.cancelConversionTaskMutex.RLock()
	defer fake.cancelConversionTaskMutex.RUnlock()
	return len(fake.cancelConversionTaskArgsForCall)
}

func (fake *FakeEC2API) CancelConversionTaskCalls(stub func(*ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error)) {
	fake.cancelConversionTaskMutex.Lock()
	defer fake.cancelConversionTaskMutex.Unlock()
	fake.CancelConversionTaskStub = stub
}

func (fake *FakeEC2API) CancelConversionTaskArgsForCall(i int) *ec2.CancelConversionTaskInput {
	fake.cancelConversionTaskMutex.RLock()
	defer fake.cancelConversionTaskMutex.RUnlock()
	argsForCall := fake.cancelConversionTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelConversionTaskReturns(result1 *ec2.CancelConversionTaskOutput, result2 error) {
	fake.cancelConversionTaskMutex.Lock()
	defer fake.cancelConversionTaskMutex.Unlock()
	fake.CancelConversionTaskStub = nil
	fake.cancelConversionTaskReturns = struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelConversionTaskReturnsOnCall(i int, result1 *ec2.CancelConversionTaskOutput, result2 error) {
	fake.cancelConversionTaskMutex.Lock()
	defer fake.cancelConversionTaskMutex.Unlock()
	fake.CancelConversionTaskStub = nil
	if fake.cancelConversionTaskReturnsOnCall == nil {
		fake.cancelConversionTaskReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelConversionTaskOutput
			result2 error
		})
	}
	fake.cancelConversionTaskReturnsOnCall[i] = struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelConversionTaskRequest(arg1 *ec2.CancelConversionTaskInput) (*request.Request, *ec2.CancelConversionTaskOutput) {
	fake.cancelConversionTaskRequestMutex.Lock()
	ret, specificReturn := fake.cancelConversionTaskRequestReturnsOnCall[len(fake.cancelConversionTaskRequestArgsForCall)]
	fake.cancelConversionTaskRequestArgsForCall = append(fake.cancelConversionTaskRequestArgsForCall, struct {
		arg1 *ec2.CancelConversionTaskInput
	}{arg1})
	fake.recordInvocation("CancelConversionTaskRequest", []interface{}{arg1})
	fake.cancelConversionTaskRequestMutex.Unlock()
	if fake.CancelConversionTaskRequestStub != nil {
		return fake.CancelConversionTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelConversionTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelConversionTaskRequestCallCount() int {
	fake.cancelConversionTaskRequestMutex.RLock()
	defer fake.cancelConversionTaskRequestMutex.RUnlock()
	return len(fake.cancelConversionTaskRequestArgsForCall)
}

func (fake *FakeEC2API) CancelConversionTaskRequestCalls(stub func(*ec2.CancelConversionTaskInput) (*request.Request, *ec2.CancelConversionTaskOutput)) {
	fake.cancelConversionTaskRequestMutex.Lock()
	defer fake.cancelConversionTaskRequestMutex.Unlock()
	fake.CancelConversionTaskRequestStub = stub
}

func (fake *FakeEC2API) CancelConversionTaskRequestArgsForCall(i int) *ec2.CancelConversionTaskInput {
	fake.cancelConversionTaskRequestMutex.RLock()
	defer fake.cancelConversionTaskRequestMutex.RUnlock()
	argsForCall := fake.cancelConversionTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelConversionTaskRequestReturns(result1 *request.Request, result2 *ec2.CancelConversionTaskOutput) {
	fake.cancelConversionTaskRequestMutex.Lock()
	defer fake.cancelConversionTaskRequestMutex.Unlock()
	fake.CancelConversionTaskRequestStub = nil
	fake.cancelConversionTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelConversionTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelConversionTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelConversionTaskOutput) {
	fake.cancelConversionTaskRequestMutex.Lock()
	defer fake.cancelConversionTaskRequestMutex.Unlock()
	fake.CancelConversionTaskRequestStub = nil
	if fake.cancelConversionTaskRequestReturnsOnCall == nil {
		fake.cancelConversionTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelConversionTaskOutput
		})
	}
	fake.cancelConversionTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelConversionTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelConversionTaskWithContext(arg1 aws.Context, arg2 *ec2.CancelConversionTaskInput, arg3 ...request.Option) (*ec2.CancelConversionTaskOutput, error) {
	fake.cancelConversionTaskWithContextMutex.Lock()
	ret, specificReturn := fake.cancelConversionTaskWithContextReturnsOnCall[len(fake.cancelConversionTaskWithContextArgsForCall)]
	fake.cancelConversionTaskWithContextArgsForCall = append(fake.cancelConversionTaskWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelConversionTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelConversionTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelConversionTaskWithContextMutex.Unlock()
	if fake.CancelConversionTaskWithContextStub != nil {
		return fake.CancelConversionTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelConversionTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelConversionTaskWithContextCallCount() int {
	fake.cancelConversionTaskWithContextMutex.RLock()
	defer fake.cancelConversionTaskWithContextMutex.RUnlock()
	return len(fake.cancelConversionTaskWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelConversionTaskWithContextCalls(stub func(aws.Context, *ec2.CancelConversionTaskInput, ...request.Option) (*ec2.CancelConversionTaskOutput, error)) {
	fake.cancelConversionTaskWithContextMutex.Lock()
	defer fake.cancelConversionTaskWithContextMutex.Unlock()
	fake.CancelConversionTaskWithContextStub = stub
}

func (fake *FakeEC2API) CancelConversionTaskWithContextArgsForCall(i int) (aws.Context, *ec2.CancelConversionTaskInput, []request.Option) {
	fake.cancelConversionTaskWithContextMutex.RLock()
	defer fake.cancelConversionTaskWithContextMutex.RUnlock()
	argsForCall := fake.cancelConversionTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelConversionTaskWithContextReturns(result1 *ec2.CancelConversionTaskOutput, result2 error) {
	fake.cancelConversionTaskWithContextMutex.Lock()
	defer fake.cancelConversionTaskWithContextMutex.Unlock()
	fake.CancelConversionTaskWithContextStub = nil
	fake.cancelConversionTaskWithContextReturns = struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelConversionTaskWithContextReturnsOnCall(i int, result1 *ec2.CancelConversionTaskOutput, result2 error) {
	fake.cancelConversionTaskWithContextMutex.Lock()
	defer fake.cancelConversionTaskWithContextMutex.Unlock()
	fake.CancelConversionTaskWithContextStub = nil
	if fake.cancelConversionTaskWithContextReturnsOnCall == nil {
		fake.cancelConversionTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelConversionTaskOutput
			result2 error
		})
	}
	fake.cancelConversionTaskWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelConversionTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelExportTask(arg1 *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	fake.cancelExportTaskMutex.Lock()
	ret, specificReturn := fake.cancelExportTaskReturnsOnCall[len(fake.cancelExportTaskArgsForCall)]
	fake.cancelExportTaskArgsForCall = append(fake.cancelExportTaskArgsForCall, struct {
		arg1 *ec2.CancelExportTaskInput
	}{arg1})
	fake.recordInvocation("CancelExportTask", []interface{}{arg1})
	fake.cancelExportTaskMutex.Unlock()
	if fake.CancelExportTaskStub != nil {
		return fake.CancelExportTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelExportTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelExportTaskCallCount() int {
	fake.cancelExportTaskMutex.RLock()
	defer fake.cancelExportTaskMutex.RUnlock()
	return len(fake.cancelExportTaskArgsForCall)
}

func (fake *FakeEC2API) CancelExportTaskCalls(stub func(*ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error)) {
	fake.cancelExportTaskMutex.Lock()
	defer fake.cancelExportTaskMutex.Unlock()
	fake.CancelExportTaskStub = stub
}

func (fake *FakeEC2API) CancelExportTaskArgsForCall(i int) *ec2.CancelExportTaskInput {
	fake.cancelExportTaskMutex.RLock()
	defer fake.cancelExportTaskMutex.RUnlock()
	argsForCall := fake.cancelExportTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelExportTaskReturns(result1 *ec2.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskMutex.Lock()
	defer fake.cancelExportTaskMutex.Unlock()
	fake.CancelExportTaskStub = nil
	fake.cancelExportTaskReturns = struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelExportTaskReturnsOnCall(i int, result1 *ec2.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskMutex.Lock()
	defer fake.cancelExportTaskMutex.Unlock()
	fake.CancelExportTaskStub = nil
	if fake.cancelExportTaskReturnsOnCall == nil {
		fake.cancelExportTaskReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelExportTaskOutput
			result2 error
		})
	}
	fake.cancelExportTaskReturnsOnCall[i] = struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelExportTaskRequest(arg1 *ec2.CancelExportTaskInput) (*request.Request, *ec2.CancelExportTaskOutput) {
	fake.cancelExportTaskRequestMutex.Lock()
	ret, specificReturn := fake.cancelExportTaskRequestReturnsOnCall[len(fake.cancelExportTaskRequestArgsForCall)]
	fake.cancelExportTaskRequestArgsForCall = append(fake.cancelExportTaskRequestArgsForCall, struct {
		arg1 *ec2.CancelExportTaskInput
	}{arg1})
	fake.recordInvocation("CancelExportTaskRequest", []interface{}{arg1})
	fake.cancelExportTaskRequestMutex.Unlock()
	if fake.CancelExportTaskRequestStub != nil {
		return fake.CancelExportTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelExportTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelExportTaskRequestCallCount() int {
	fake.cancelExportTaskRequestMutex.RLock()
	defer fake.cancelExportTaskRequestMutex.RUnlock()
	return len(fake.cancelExportTaskRequestArgsForCall)
}

func (fake *FakeEC2API) CancelExportTaskRequestCalls(stub func(*ec2.CancelExportTaskInput) (*request.Request, *ec2.CancelExportTaskOutput)) {
	fake.cancelExportTaskRequestMutex.Lock()
	defer fake.cancelExportTaskRequestMutex.Unlock()
	fake.CancelExportTaskRequestStub = stub
}

func (fake *FakeEC2API) CancelExportTaskRequestArgsForCall(i int) *ec2.CancelExportTaskInput {
	fake.cancelExportTaskRequestMutex.RLock()
	defer fake.cancelExportTaskRequestMutex.RUnlock()
	argsForCall := fake.cancelExportTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelExportTaskRequestReturns(result1 *request.Request, result2 *ec2.CancelExportTaskOutput) {
	fake.cancelExportTaskRequestMutex.Lock()
	defer fake.cancelExportTaskRequestMutex.Unlock()
	fake.CancelExportTaskRequestStub = nil
	fake.cancelExportTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelExportTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelExportTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelExportTaskOutput) {
	fake.cancelExportTaskRequestMutex.Lock()
	defer fake.cancelExportTaskRequestMutex.Unlock()
	fake.CancelExportTaskRequestStub = nil
	if fake.cancelExportTaskRequestReturnsOnCall == nil {
		fake.cancelExportTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelExportTaskOutput
		})
	}
	fake.cancelExportTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelExportTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelExportTaskWithContext(arg1 aws.Context, arg2 *ec2.CancelExportTaskInput, arg3 ...request.Option) (*ec2.CancelExportTaskOutput, error) {
	fake.cancelExportTaskWithContextMutex.Lock()
	ret, specificReturn := fake.cancelExportTaskWithContextReturnsOnCall[len(fake.cancelExportTaskWithContextArgsForCall)]
	fake.cancelExportTaskWithContextArgsForCall = append(fake.cancelExportTaskWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelExportTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelExportTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelExportTaskWithContextMutex.Unlock()
	if fake.CancelExportTaskWithContextStub != nil {
		return fake.CancelExportTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelExportTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelExportTaskWithContextCallCount() int {
	fake.cancelExportTaskWithContextMutex.RLock()
	defer fake.cancelExportTaskWithContextMutex.RUnlock()
	return len(fake.cancelExportTaskWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelExportTaskWithContextCalls(stub func(aws.Context, *ec2.CancelExportTaskInput, ...request.Option) (*ec2.CancelExportTaskOutput, error)) {
	fake.cancelExportTaskWithContextMutex.Lock()
	defer fake.cancelExportTaskWithContextMutex.Unlock()
	fake.CancelExportTaskWithContextStub = stub
}

func (fake *FakeEC2API) CancelExportTaskWithContextArgsForCall(i int) (aws.Context, *ec2.CancelExportTaskInput, []request.Option) {
	fake.cancelExportTaskWithContextMutex.RLock()
	defer fake.cancelExportTaskWithContextMutex.RUnlock()
	argsForCall := fake.cancelExportTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelExportTaskWithContextReturns(result1 *ec2.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskWithContextMutex.Lock()
	defer fake.cancelExportTaskWithContextMutex.Unlock()
	fake.CancelExportTaskWithContextStub = nil
	fake.cancelExportTaskWithContextReturns = struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelExportTaskWithContextReturnsOnCall(i int, result1 *ec2.CancelExportTaskOutput, result2 error) {
	fake.cancelExportTaskWithContextMutex.Lock()
	defer fake.cancelExportTaskWithContextMutex.Unlock()
	fake.CancelExportTaskWithContextStub = nil
	if fake.cancelExportTaskWithContextReturnsOnCall == nil {
		fake.cancelExportTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelExportTaskOutput
			result2 error
		})
	}
	fake.cancelExportTaskWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelImportTask(arg1 *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	fake.cancelImportTaskMutex.Lock()
	ret, specificReturn := fake.cancelImportTaskReturnsOnCall[len(fake.cancelImportTaskArgsForCall)]
	fake.cancelImportTaskArgsForCall = append(fake.cancelImportTaskArgsForCall, struct {
		arg1 *ec2.CancelImportTaskInput
	}{arg1})
	fake.recordInvocation("CancelImportTask", []interface{}{arg1})
	fake.cancelImportTaskMutex.Unlock()
	if fake.CancelImportTaskStub != nil {
		return fake.CancelImportTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelImportTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelImportTaskCallCount() int {
	fake.cancelImportTaskMutex.RLock()
	defer fake.cancelImportTaskMutex.RUnlock()
	return len(fake.cancelImportTaskArgsForCall)
}

func (fake *FakeEC2API) CancelImportTaskCalls(stub func(*ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error)) {
	fake.cancelImportTaskMutex.Lock()
	defer fake.cancelImportTaskMutex.Unlock()
	fake.CancelImportTaskStub = stub
}

func (fake *FakeEC2API) CancelImportTaskArgsForCall(i int) *ec2.CancelImportTaskInput {
	fake.cancelImportTaskMutex.RLock()
	defer fake.cancelImportTaskMutex.RUnlock()
	argsForCall := fake.cancelImportTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelImportTaskReturns(result1 *ec2.CancelImportTaskOutput, result2 error) {
	fake.cancelImportTaskMutex.Lock()
	defer fake.cancelImportTaskMutex.Unlock()
	fake.CancelImportTaskStub = nil
	fake.cancelImportTaskReturns = struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelImportTaskReturnsOnCall(i int, result1 *ec2.CancelImportTaskOutput, result2 error) {
	fake.cancelImportTaskMutex.Lock()
	defer fake.cancelImportTaskMutex.Unlock()
	fake.CancelImportTaskStub = nil
	if fake.cancelImportTaskReturnsOnCall == nil {
		fake.cancelImportTaskReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelImportTaskOutput
			result2 error
		})
	}
	fake.cancelImportTaskReturnsOnCall[i] = struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelImportTaskRequest(arg1 *ec2.CancelImportTaskInput) (*request.Request, *ec2.CancelImportTaskOutput) {
	fake.cancelImportTaskRequestMutex.Lock()
	ret, specificReturn := fake.cancelImportTaskRequestReturnsOnCall[len(fake.cancelImportTaskRequestArgsForCall)]
	fake.cancelImportTaskRequestArgsForCall = append(fake.cancelImportTaskRequestArgsForCall, struct {
		arg1 *ec2.CancelImportTaskInput
	}{arg1})
	fake.recordInvocation("CancelImportTaskRequest", []interface{}{arg1})
	fake.cancelImportTaskRequestMutex.Unlock()
	if fake.CancelImportTaskRequestStub != nil {
		return fake.CancelImportTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelImportTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelImportTaskRequestCallCount() int {
	fake.cancelImportTaskRequestMutex.RLock()
	defer fake.cancelImportTaskRequestMutex.RUnlock()
	return len(fake.cancelImportTaskRequestArgsForCall)
}

func (fake *FakeEC2API) CancelImportTaskRequestCalls(stub func(*ec2.CancelImportTaskInput) (*request.Request, *ec2.CancelImportTaskOutput)) {
	fake.cancelImportTaskRequestMutex.Lock()
	defer fake.cancelImportTaskRequestMutex.Unlock()
	fake.CancelImportTaskRequestStub = stub
}

func (fake *FakeEC2API) CancelImportTaskRequestArgsForCall(i int) *ec2.CancelImportTaskInput {
	fake.cancelImportTaskRequestMutex.RLock()
	defer fake.cancelImportTaskRequestMutex.RUnlock()
	argsForCall := fake.cancelImportTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelImportTaskRequestReturns(result1 *request.Request, result2 *ec2.CancelImportTaskOutput) {
	fake.cancelImportTaskRequestMutex.Lock()
	defer fake.cancelImportTaskRequestMutex.Unlock()
	fake.CancelImportTaskRequestStub = nil
	fake.cancelImportTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelImportTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelImportTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelImportTaskOutput) {
	fake.cancelImportTaskRequestMutex.Lock()
	defer fake.cancelImportTaskRequestMutex.Unlock()
	fake.CancelImportTaskRequestStub = nil
	if fake.cancelImportTaskRequestReturnsOnCall == nil {
		fake.cancelImportTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelImportTaskOutput
		})
	}
	fake.cancelImportTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelImportTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelImportTaskWithContext(arg1 aws.Context, arg2 *ec2.CancelImportTaskInput, arg3 ...request.Option) (*ec2.CancelImportTaskOutput, error) {
	fake.cancelImportTaskWithContextMutex.Lock()
	ret, specificReturn := fake.cancelImportTaskWithContextReturnsOnCall[len(fake.cancelImportTaskWithContextArgsForCall)]
	fake.cancelImportTaskWithContextArgsForCall = append(fake.cancelImportTaskWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelImportTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelImportTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelImportTaskWithContextMutex.Unlock()
	if fake.CancelImportTaskWithContextStub != nil {
		return fake.CancelImportTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelImportTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelImportTaskWithContextCallCount() int {
	fake.cancelImportTaskWithContextMutex.RLock()
	defer fake.cancelImportTaskWithContextMutex.RUnlock()
	return len(fake.cancelImportTaskWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelImportTaskWithContextCalls(stub func(aws.Context, *ec2.CancelImportTaskInput, ...request.Option) (*ec2.CancelImportTaskOutput, error)) {
	fake.cancelImportTaskWithContextMutex.Lock()
	defer fake.cancelImportTaskWithContextMutex.Unlock()
	fake.CancelImportTaskWithContextStub = stub
}

func (fake *FakeEC2API) CancelImportTaskWithContextArgsForCall(i int) (aws.Context, *ec2.CancelImportTaskInput, []request.Option) {
	fake.cancelImportTaskWithContextMutex.RLock()
	defer fake.cancelImportTaskWithContextMutex.RUnlock()
	argsForCall := fake.cancelImportTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelImportTaskWithContextReturns(result1 *ec2.CancelImportTaskOutput, result2 error) {
	fake.cancelImportTaskWithContextMutex.Lock()
	defer fake.cancelImportTaskWithContextMutex.Unlock()
	fake.CancelImportTaskWithContextStub = nil
	fake.cancelImportTaskWithContextReturns = struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelImportTaskWithContextReturnsOnCall(i int, result1 *ec2.CancelImportTaskOutput, result2 error) {
	fake.cancelImportTaskWithContextMutex.Lock()
	defer fake.cancelImportTaskWithContextMutex.Unlock()
	fake.CancelImportTaskWithContextStub = nil
	if fake.cancelImportTaskWithContextReturnsOnCall == nil {
		fake.cancelImportTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelImportTaskOutput
			result2 error
		})
	}
	fake.cancelImportTaskWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelImportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelReservedInstancesListing(arg1 *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	fake.cancelReservedInstancesListingMutex.Lock()
	ret, specificReturn := fake.cancelReservedInstancesListingReturnsOnCall[len(fake.cancelReservedInstancesListingArgsForCall)]
	fake.cancelReservedInstancesListingArgsForCall = append(fake.cancelReservedInstancesListingArgsForCall, struct {
		arg1 *ec2.CancelReservedInstancesListingInput
	}{arg1})
	fake.recordInvocation("CancelReservedInstancesListing", []interface{}{arg1})
	fake.cancelReservedInstancesListingMutex.Unlock()
	if fake.CancelReservedInstancesListingStub != nil {
		return fake.CancelReservedInstancesListingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelReservedInstancesListingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelReservedInstancesListingCallCount() int {
	fake.cancelReservedInstancesListingMutex.RLock()
	defer fake.cancelReservedInstancesListingMutex.RUnlock()
	return len(fake.cancelReservedInstancesListingArgsForCall)
}

func (fake *FakeEC2API) CancelReservedInstancesListingCalls(stub func(*ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error)) {
	fake.cancelReservedInstancesListingMutex.Lock()
	defer fake.cancelReservedInstancesListingMutex.Unlock()
	fake.CancelReservedInstancesListingStub = stub
}

func (fake *FakeEC2API) CancelReservedInstancesListingArgsForCall(i int) *ec2.CancelReservedInstancesListingInput {
	fake.cancelReservedInstancesListingMutex.RLock()
	defer fake.cancelReservedInstancesListingMutex.RUnlock()
	argsForCall := fake.cancelReservedInstancesListingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelReservedInstancesListingReturns(result1 *ec2.CancelReservedInstancesListingOutput, result2 error) {
	fake.cancelReservedInstancesListingMutex.Lock()
	defer fake.cancelReservedInstancesListingMutex.Unlock()
	fake.CancelReservedInstancesListingStub = nil
	fake.cancelReservedInstancesListingReturns = struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelReservedInstancesListingReturnsOnCall(i int, result1 *ec2.CancelReservedInstancesListingOutput, result2 error) {
	fake.cancelReservedInstancesListingMutex.Lock()
	defer fake.cancelReservedInstancesListingMutex.Unlock()
	fake.CancelReservedInstancesListingStub = nil
	if fake.cancelReservedInstancesListingReturnsOnCall == nil {
		fake.cancelReservedInstancesListingReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelReservedInstancesListingOutput
			result2 error
		})
	}
	fake.cancelReservedInstancesListingReturnsOnCall[i] = struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelReservedInstancesListingRequest(arg1 *ec2.CancelReservedInstancesListingInput) (*request.Request, *ec2.CancelReservedInstancesListingOutput) {
	fake.cancelReservedInstancesListingRequestMutex.Lock()
	ret, specificReturn := fake.cancelReservedInstancesListingRequestReturnsOnCall[len(fake.cancelReservedInstancesListingRequestArgsForCall)]
	fake.cancelReservedInstancesListingRequestArgsForCall = append(fake.cancelReservedInstancesListingRequestArgsForCall, struct {
		arg1 *ec2.CancelReservedInstancesListingInput
	}{arg1})
	fake.recordInvocation("CancelReservedInstancesListingRequest", []interface{}{arg1})
	fake.cancelReservedInstancesListingRequestMutex.Unlock()
	if fake.CancelReservedInstancesListingRequestStub != nil {
		return fake.CancelReservedInstancesListingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelReservedInstancesListingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelReservedInstancesListingRequestCallCount() int {
	fake.cancelReservedInstancesListingRequestMutex.RLock()
	defer fake.cancelReservedInstancesListingRequestMutex.RUnlock()
	return len(fake.cancelReservedInstancesListingRequestArgsForCall)
}

func (fake *FakeEC2API) CancelReservedInstancesListingRequestCalls(stub func(*ec2.CancelReservedInstancesListingInput) (*request.Request, *ec2.CancelReservedInstancesListingOutput)) {
	fake.cancelReservedInstancesListingRequestMutex.Lock()
	defer fake.cancelReservedInstancesListingRequestMutex.Unlock()
	fake.CancelReservedInstancesListingRequestStub = stub
}

func (fake *FakeEC2API) CancelReservedInstancesListingRequestArgsForCall(i int) *ec2.CancelReservedInstancesListingInput {
	fake.cancelReservedInstancesListingRequestMutex.RLock()
	defer fake.cancelReservedInstancesListingRequestMutex.RUnlock()
	argsForCall := fake.cancelReservedInstancesListingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelReservedInstancesListingRequestReturns(result1 *request.Request, result2 *ec2.CancelReservedInstancesListingOutput) {
	fake.cancelReservedInstancesListingRequestMutex.Lock()
	defer fake.cancelReservedInstancesListingRequestMutex.Unlock()
	fake.CancelReservedInstancesListingRequestStub = nil
	fake.cancelReservedInstancesListingRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelReservedInstancesListingOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelReservedInstancesListingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelReservedInstancesListingOutput) {
	fake.cancelReservedInstancesListingRequestMutex.Lock()
	defer fake.cancelReservedInstancesListingRequestMutex.Unlock()
	fake.CancelReservedInstancesListingRequestStub = nil
	if fake.cancelReservedInstancesListingRequestReturnsOnCall == nil {
		fake.cancelReservedInstancesListingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelReservedInstancesListingOutput
		})
	}
	fake.cancelReservedInstancesListingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelReservedInstancesListingOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelReservedInstancesListingWithContext(arg1 aws.Context, arg2 *ec2.CancelReservedInstancesListingInput, arg3 ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error) {
	fake.cancelReservedInstancesListingWithContextMutex.Lock()
	ret, specificReturn := fake.cancelReservedInstancesListingWithContextReturnsOnCall[len(fake.cancelReservedInstancesListingWithContextArgsForCall)]
	fake.cancelReservedInstancesListingWithContextArgsForCall = append(fake.cancelReservedInstancesListingWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelReservedInstancesListingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelReservedInstancesListingWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelReservedInstancesListingWithContextMutex.Unlock()
	if fake.CancelReservedInstancesListingWithContextStub != nil {
		return fake.CancelReservedInstancesListingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelReservedInstancesListingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelReservedInstancesListingWithContextCallCount() int {
	fake.cancelReservedInstancesListingWithContextMutex.RLock()
	defer fake.cancelReservedInstancesListingWithContextMutex.RUnlock()
	return len(fake.cancelReservedInstancesListingWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelReservedInstancesListingWithContextCalls(stub func(aws.Context, *ec2.CancelReservedInstancesListingInput, ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error)) {
	fake.cancelReservedInstancesListingWithContextMutex.Lock()
	defer fake.cancelReservedInstancesListingWithContextMutex.Unlock()
	fake.CancelReservedInstancesListingWithContextStub = stub
}

func (fake *FakeEC2API) CancelReservedInstancesListingWithContextArgsForCall(i int) (aws.Context, *ec2.CancelReservedInstancesListingInput, []request.Option) {
	fake.cancelReservedInstancesListingWithContextMutex.RLock()
	defer fake.cancelReservedInstancesListingWithContextMutex.RUnlock()
	argsForCall := fake.cancelReservedInstancesListingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelReservedInstancesListingWithContextReturns(result1 *ec2.CancelReservedInstancesListingOutput, result2 error) {
	fake.cancelReservedInstancesListingWithContextMutex.Lock()
	defer fake.cancelReservedInstancesListingWithContextMutex.Unlock()
	fake.CancelReservedInstancesListingWithContextStub = nil
	fake.cancelReservedInstancesListingWithContextReturns = struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelReservedInstancesListingWithContextReturnsOnCall(i int, result1 *ec2.CancelReservedInstancesListingOutput, result2 error) {
	fake.cancelReservedInstancesListingWithContextMutex.Lock()
	defer fake.cancelReservedInstancesListingWithContextMutex.Unlock()
	fake.CancelReservedInstancesListingWithContextStub = nil
	if fake.cancelReservedInstancesListingWithContextReturnsOnCall == nil {
		fake.cancelReservedInstancesListingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelReservedInstancesListingOutput
			result2 error
		})
	}
	fake.cancelReservedInstancesListingWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotFleetRequests(arg1 *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	fake.cancelSpotFleetRequestsMutex.Lock()
	ret, specificReturn := fake.cancelSpotFleetRequestsReturnsOnCall[len(fake.cancelSpotFleetRequestsArgsForCall)]
	fake.cancelSpotFleetRequestsArgsForCall = append(fake.cancelSpotFleetRequestsArgsForCall, struct {
		arg1 *ec2.CancelSpotFleetRequestsInput
	}{arg1})
	fake.recordInvocation("CancelSpotFleetRequests", []interface{}{arg1})
	fake.cancelSpotFleetRequestsMutex.Unlock()
	if fake.CancelSpotFleetRequestsStub != nil {
		return fake.CancelSpotFleetRequestsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelSpotFleetRequestsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelSpotFleetRequestsCallCount() int {
	fake.cancelSpotFleetRequestsMutex.RLock()
	defer fake.cancelSpotFleetRequestsMutex.RUnlock()
	return len(fake.cancelSpotFleetRequestsArgsForCall)
}

func (fake *FakeEC2API) CancelSpotFleetRequestsCalls(stub func(*ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error)) {
	fake.cancelSpotFleetRequestsMutex.Lock()
	defer fake.cancelSpotFleetRequestsMutex.Unlock()
	fake.CancelSpotFleetRequestsStub = stub
}

func (fake *FakeEC2API) CancelSpotFleetRequestsArgsForCall(i int) *ec2.CancelSpotFleetRequestsInput {
	fake.cancelSpotFleetRequestsMutex.RLock()
	defer fake.cancelSpotFleetRequestsMutex.RUnlock()
	argsForCall := fake.cancelSpotFleetRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelSpotFleetRequestsReturns(result1 *ec2.CancelSpotFleetRequestsOutput, result2 error) {
	fake.cancelSpotFleetRequestsMutex.Lock()
	defer fake.cancelSpotFleetRequestsMutex.Unlock()
	fake.CancelSpotFleetRequestsStub = nil
	fake.cancelSpotFleetRequestsReturns = struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotFleetRequestsReturnsOnCall(i int, result1 *ec2.CancelSpotFleetRequestsOutput, result2 error) {
	fake.cancelSpotFleetRequestsMutex.Lock()
	defer fake.cancelSpotFleetRequestsMutex.Unlock()
	fake.CancelSpotFleetRequestsStub = nil
	if fake.cancelSpotFleetRequestsReturnsOnCall == nil {
		fake.cancelSpotFleetRequestsReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelSpotFleetRequestsOutput
			result2 error
		})
	}
	fake.cancelSpotFleetRequestsReturnsOnCall[i] = struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotFleetRequestsRequest(arg1 *ec2.CancelSpotFleetRequestsInput) (*request.Request, *ec2.CancelSpotFleetRequestsOutput) {
	fake.cancelSpotFleetRequestsRequestMutex.Lock()
	ret, specificReturn := fake.cancelSpotFleetRequestsRequestReturnsOnCall[len(fake.cancelSpotFleetRequestsRequestArgsForCall)]
	fake.cancelSpotFleetRequestsRequestArgsForCall = append(fake.cancelSpotFleetRequestsRequestArgsForCall, struct {
		arg1 *ec2.CancelSpotFleetRequestsInput
	}{arg1})
	fake.recordInvocation("CancelSpotFleetRequestsRequest", []interface{}{arg1})
	fake.cancelSpotFleetRequestsRequestMutex.Unlock()
	if fake.CancelSpotFleetRequestsRequestStub != nil {
		return fake.CancelSpotFleetRequestsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelSpotFleetRequestsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelSpotFleetRequestsRequestCallCount() int {
	fake.cancelSpotFleetRequestsRequestMutex.RLock()
	defer fake.cancelSpotFleetRequestsRequestMutex.RUnlock()
	return len(fake.cancelSpotFleetRequestsRequestArgsForCall)
}

func (fake *FakeEC2API) CancelSpotFleetRequestsRequestCalls(stub func(*ec2.CancelSpotFleetRequestsInput) (*request.Request, *ec2.CancelSpotFleetRequestsOutput)) {
	fake.cancelSpotFleetRequestsRequestMutex.Lock()
	defer fake.cancelSpotFleetRequestsRequestMutex.Unlock()
	fake.CancelSpotFleetRequestsRequestStub = stub
}

func (fake *FakeEC2API) CancelSpotFleetRequestsRequestArgsForCall(i int) *ec2.CancelSpotFleetRequestsInput {
	fake.cancelSpotFleetRequestsRequestMutex.RLock()
	defer fake.cancelSpotFleetRequestsRequestMutex.RUnlock()
	argsForCall := fake.cancelSpotFleetRequestsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelSpotFleetRequestsRequestReturns(result1 *request.Request, result2 *ec2.CancelSpotFleetRequestsOutput) {
	fake.cancelSpotFleetRequestsRequestMutex.Lock()
	defer fake.cancelSpotFleetRequestsRequestMutex.Unlock()
	fake.CancelSpotFleetRequestsRequestStub = nil
	fake.cancelSpotFleetRequestsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelSpotFleetRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotFleetRequestsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelSpotFleetRequestsOutput) {
	fake.cancelSpotFleetRequestsRequestMutex.Lock()
	defer fake.cancelSpotFleetRequestsRequestMutex.Unlock()
	fake.CancelSpotFleetRequestsRequestStub = nil
	if fake.cancelSpotFleetRequestsRequestReturnsOnCall == nil {
		fake.cancelSpotFleetRequestsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelSpotFleetRequestsOutput
		})
	}
	fake.cancelSpotFleetRequestsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelSpotFleetRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotFleetRequestsWithContext(arg1 aws.Context, arg2 *ec2.CancelSpotFleetRequestsInput, arg3 ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error) {
	fake.cancelSpotFleetRequestsWithContextMutex.Lock()
	ret, specificReturn := fake.cancelSpotFleetRequestsWithContextReturnsOnCall[len(fake.cancelSpotFleetRequestsWithContextArgsForCall)]
	fake.cancelSpotFleetRequestsWithContextArgsForCall = append(fake.cancelSpotFleetRequestsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelSpotFleetRequestsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelSpotFleetRequestsWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelSpotFleetRequestsWithContextMutex.Unlock()
	if fake.CancelSpotFleetRequestsWithContextStub != nil {
		return fake.CancelSpotFleetRequestsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelSpotFleetRequestsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelSpotFleetRequestsWithContextCallCount() int {
	fake.cancelSpotFleetRequestsWithContextMutex.RLock()
	defer fake.cancelSpotFleetRequestsWithContextMutex.RUnlock()
	return len(fake.cancelSpotFleetRequestsWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelSpotFleetRequestsWithContextCalls(stub func(aws.Context, *ec2.CancelSpotFleetRequestsInput, ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error)) {
	fake.cancelSpotFleetRequestsWithContextMutex.Lock()
	defer fake.cancelSpotFleetRequestsWithContextMutex.Unlock()
	fake.CancelSpotFleetRequestsWithContextStub = stub
}

func (fake *FakeEC2API) CancelSpotFleetRequestsWithContextArgsForCall(i int) (aws.Context, *ec2.CancelSpotFleetRequestsInput, []request.Option) {
	fake.cancelSpotFleetRequestsWithContextMutex.RLock()
	defer fake.cancelSpotFleetRequestsWithContextMutex.RUnlock()
	argsForCall := fake.cancelSpotFleetRequestsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelSpotFleetRequestsWithContextReturns(result1 *ec2.CancelSpotFleetRequestsOutput, result2 error) {
	fake.cancelSpotFleetRequestsWithContextMutex.Lock()
	defer fake.cancelSpotFleetRequestsWithContextMutex.Unlock()
	fake.CancelSpotFleetRequestsWithContextStub = nil
	fake.cancelSpotFleetRequestsWithContextReturns = struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotFleetRequestsWithContextReturnsOnCall(i int, result1 *ec2.CancelSpotFleetRequestsOutput, result2 error) {
	fake.cancelSpotFleetRequestsWithContextMutex.Lock()
	defer fake.cancelSpotFleetRequestsWithContextMutex.Unlock()
	fake.CancelSpotFleetRequestsWithContextStub = nil
	if fake.cancelSpotFleetRequestsWithContextReturnsOnCall == nil {
		fake.cancelSpotFleetRequestsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelSpotFleetRequestsOutput
			result2 error
		})
	}
	fake.cancelSpotFleetRequestsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotInstanceRequests(arg1 *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	fake.cancelSpotInstanceRequestsMutex.Lock()
	ret, specificReturn := fake.cancelSpotInstanceRequestsReturnsOnCall[len(fake.cancelSpotInstanceRequestsArgsForCall)]
	fake.cancelSpotInstanceRequestsArgsForCall = append(fake.cancelSpotInstanceRequestsArgsForCall, struct {
		arg1 *ec2.CancelSpotInstanceRequestsInput
	}{arg1})
	fake.recordInvocation("CancelSpotInstanceRequests", []interface{}{arg1})
	fake.cancelSpotInstanceRequestsMutex.Unlock()
	if fake.CancelSpotInstanceRequestsStub != nil {
		return fake.CancelSpotInstanceRequestsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelSpotInstanceRequestsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsCallCount() int {
	fake.cancelSpotInstanceRequestsMutex.RLock()
	defer fake.cancelSpotInstanceRequestsMutex.RUnlock()
	return len(fake.cancelSpotInstanceRequestsArgsForCall)
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsCalls(stub func(*ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error)) {
	fake.cancelSpotInstanceRequestsMutex.Lock()
	defer fake.cancelSpotInstanceRequestsMutex.Unlock()
	fake.CancelSpotInstanceRequestsStub = stub
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsArgsForCall(i int) *ec2.CancelSpotInstanceRequestsInput {
	fake.cancelSpotInstanceRequestsMutex.RLock()
	defer fake.cancelSpotInstanceRequestsMutex.RUnlock()
	argsForCall := fake.cancelSpotInstanceRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsReturns(result1 *ec2.CancelSpotInstanceRequestsOutput, result2 error) {
	fake.cancelSpotInstanceRequestsMutex.Lock()
	defer fake.cancelSpotInstanceRequestsMutex.Unlock()
	fake.CancelSpotInstanceRequestsStub = nil
	fake.cancelSpotInstanceRequestsReturns = struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsReturnsOnCall(i int, result1 *ec2.CancelSpotInstanceRequestsOutput, result2 error) {
	fake.cancelSpotInstanceRequestsMutex.Lock()
	defer fake.cancelSpotInstanceRequestsMutex.Unlock()
	fake.CancelSpotInstanceRequestsStub = nil
	if fake.cancelSpotInstanceRequestsReturnsOnCall == nil {
		fake.cancelSpotInstanceRequestsReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelSpotInstanceRequestsOutput
			result2 error
		})
	}
	fake.cancelSpotInstanceRequestsReturnsOnCall[i] = struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsRequest(arg1 *ec2.CancelSpotInstanceRequestsInput) (*request.Request, *ec2.CancelSpotInstanceRequestsOutput) {
	fake.cancelSpotInstanceRequestsRequestMutex.Lock()
	ret, specificReturn := fake.cancelSpotInstanceRequestsRequestReturnsOnCall[len(fake.cancelSpotInstanceRequestsRequestArgsForCall)]
	fake.cancelSpotInstanceRequestsRequestArgsForCall = append(fake.cancelSpotInstanceRequestsRequestArgsForCall, struct {
		arg1 *ec2.CancelSpotInstanceRequestsInput
	}{arg1})
	fake.recordInvocation("CancelSpotInstanceRequestsRequest", []interface{}{arg1})
	fake.cancelSpotInstanceRequestsRequestMutex.Unlock()
	if fake.CancelSpotInstanceRequestsRequestStub != nil {
		return fake.CancelSpotInstanceRequestsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelSpotInstanceRequestsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsRequestCallCount() int {
	fake.cancelSpotInstanceRequestsRequestMutex.RLock()
	defer fake.cancelSpotInstanceRequestsRequestMutex.RUnlock()
	return len(fake.cancelSpotInstanceRequestsRequestArgsForCall)
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsRequestCalls(stub func(*ec2.CancelSpotInstanceRequestsInput) (*request.Request, *ec2.CancelSpotInstanceRequestsOutput)) {
	fake.cancelSpotInstanceRequestsRequestMutex.Lock()
	defer fake.cancelSpotInstanceRequestsRequestMutex.Unlock()
	fake.CancelSpotInstanceRequestsRequestStub = stub
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsRequestArgsForCall(i int) *ec2.CancelSpotInstanceRequestsInput {
	fake.cancelSpotInstanceRequestsRequestMutex.RLock()
	defer fake.cancelSpotInstanceRequestsRequestMutex.RUnlock()
	argsForCall := fake.cancelSpotInstanceRequestsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsRequestReturns(result1 *request.Request, result2 *ec2.CancelSpotInstanceRequestsOutput) {
	fake.cancelSpotInstanceRequestsRequestMutex.Lock()
	defer fake.cancelSpotInstanceRequestsRequestMutex.Unlock()
	fake.CancelSpotInstanceRequestsRequestStub = nil
	fake.cancelSpotInstanceRequestsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CancelSpotInstanceRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CancelSpotInstanceRequestsOutput) {
	fake.cancelSpotInstanceRequestsRequestMutex.Lock()
	defer fake.cancelSpotInstanceRequestsRequestMutex.Unlock()
	fake.CancelSpotInstanceRequestsRequestStub = nil
	if fake.cancelSpotInstanceRequestsRequestReturnsOnCall == nil {
		fake.cancelSpotInstanceRequestsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CancelSpotInstanceRequestsOutput
		})
	}
	fake.cancelSpotInstanceRequestsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CancelSpotInstanceRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsWithContext(arg1 aws.Context, arg2 *ec2.CancelSpotInstanceRequestsInput, arg3 ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	fake.cancelSpotInstanceRequestsWithContextMutex.Lock()
	ret, specificReturn := fake.cancelSpotInstanceRequestsWithContextReturnsOnCall[len(fake.cancelSpotInstanceRequestsWithContextArgsForCall)]
	fake.cancelSpotInstanceRequestsWithContextArgsForCall = append(fake.cancelSpotInstanceRequestsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CancelSpotInstanceRequestsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CancelSpotInstanceRequestsWithContext", []interface{}{arg1, arg2, arg3})
	fake.cancelSpotInstanceRequestsWithContextMutex.Unlock()
	if fake.CancelSpotInstanceRequestsWithContextStub != nil {
		return fake.CancelSpotInstanceRequestsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cancelSpotInstanceRequestsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsWithContextCallCount() int {
	fake.cancelSpotInstanceRequestsWithContextMutex.RLock()
	defer fake.cancelSpotInstanceRequestsWithContextMutex.RUnlock()
	return len(fake.cancelSpotInstanceRequestsWithContextArgsForCall)
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsWithContextCalls(stub func(aws.Context, *ec2.CancelSpotInstanceRequestsInput, ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error)) {
	fake.cancelSpotInstanceRequestsWithContextMutex.Lock()
	defer fake.cancelSpotInstanceRequestsWithContextMutex.Unlock()
	fake.CancelSpotInstanceRequestsWithContextStub = stub
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsWithContextArgsForCall(i int) (aws.Context, *ec2.CancelSpotInstanceRequestsInput, []request.Option) {
	fake.cancelSpotInstanceRequestsWithContextMutex.RLock()
	defer fake.cancelSpotInstanceRequestsWithContextMutex.RUnlock()
	argsForCall := fake.cancelSpotInstanceRequestsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsWithContextReturns(result1 *ec2.CancelSpotInstanceRequestsOutput, result2 error) {
	fake.cancelSpotInstanceRequestsWithContextMutex.Lock()
	defer fake.cancelSpotInstanceRequestsWithContextMutex.Unlock()
	fake.CancelSpotInstanceRequestsWithContextStub = nil
	fake.cancelSpotInstanceRequestsWithContextReturns = struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CancelSpotInstanceRequestsWithContextReturnsOnCall(i int, result1 *ec2.CancelSpotInstanceRequestsOutput, result2 error) {
	fake.cancelSpotInstanceRequestsWithContextMutex.Lock()
	defer fake.cancelSpotInstanceRequestsWithContextMutex.Unlock()
	fake.CancelSpotInstanceRequestsWithContextStub = nil
	if fake.cancelSpotInstanceRequestsWithContextReturnsOnCall == nil {
		fake.cancelSpotInstanceRequestsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CancelSpotInstanceRequestsOutput
			result2 error
		})
	}
	fake.cancelSpotInstanceRequestsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CancelSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ConfirmProductInstance(arg1 *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	fake.confirmProductInstanceMutex.Lock()
	ret, specificReturn := fake.confirmProductInstanceReturnsOnCall[len(fake.confirmProductInstanceArgsForCall)]
	fake.confirmProductInstanceArgsForCall = append(fake.confirmProductInstanceArgsForCall, struct {
		arg1 *ec2.ConfirmProductInstanceInput
	}{arg1})
	fake.recordInvocation("ConfirmProductInstance", []interface{}{arg1})
	fake.confirmProductInstanceMutex.Unlock()
	if fake.ConfirmProductInstanceStub != nil {
		return fake.ConfirmProductInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.confirmProductInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ConfirmProductInstanceCallCount() int {
	fake.confirmProductInstanceMutex.RLock()
	defer fake.confirmProductInstanceMutex.RUnlock()
	return len(fake.confirmProductInstanceArgsForCall)
}

func (fake *FakeEC2API) ConfirmProductInstanceCalls(stub func(*ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error)) {
	fake.confirmProductInstanceMutex.Lock()
	defer fake.confirmProductInstanceMutex.Unlock()
	fake.ConfirmProductInstanceStub = stub
}

func (fake *FakeEC2API) ConfirmProductInstanceArgsForCall(i int) *ec2.ConfirmProductInstanceInput {
	fake.confirmProductInstanceMutex.RLock()
	defer fake.confirmProductInstanceMutex.RUnlock()
	argsForCall := fake.confirmProductInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ConfirmProductInstanceReturns(result1 *ec2.ConfirmProductInstanceOutput, result2 error) {
	fake.confirmProductInstanceMutex.Lock()
	defer fake.confirmProductInstanceMutex.Unlock()
	fake.ConfirmProductInstanceStub = nil
	fake.confirmProductInstanceReturns = struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ConfirmProductInstanceReturnsOnCall(i int, result1 *ec2.ConfirmProductInstanceOutput, result2 error) {
	fake.confirmProductInstanceMutex.Lock()
	defer fake.confirmProductInstanceMutex.Unlock()
	fake.ConfirmProductInstanceStub = nil
	if fake.confirmProductInstanceReturnsOnCall == nil {
		fake.confirmProductInstanceReturnsOnCall = make(map[int]struct {
			result1 *ec2.ConfirmProductInstanceOutput
			result2 error
		})
	}
	fake.confirmProductInstanceReturnsOnCall[i] = struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ConfirmProductInstanceRequest(arg1 *ec2.ConfirmProductInstanceInput) (*request.Request, *ec2.ConfirmProductInstanceOutput) {
	fake.confirmProductInstanceRequestMutex.Lock()
	ret, specificReturn := fake.confirmProductInstanceRequestReturnsOnCall[len(fake.confirmProductInstanceRequestArgsForCall)]
	fake.confirmProductInstanceRequestArgsForCall = append(fake.confirmProductInstanceRequestArgsForCall, struct {
		arg1 *ec2.ConfirmProductInstanceInput
	}{arg1})
	fake.recordInvocation("ConfirmProductInstanceRequest", []interface{}{arg1})
	fake.confirmProductInstanceRequestMutex.Unlock()
	if fake.ConfirmProductInstanceRequestStub != nil {
		return fake.ConfirmProductInstanceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.confirmProductInstanceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ConfirmProductInstanceRequestCallCount() int {
	fake.confirmProductInstanceRequestMutex.RLock()
	defer fake.confirmProductInstanceRequestMutex.RUnlock()
	return len(fake.confirmProductInstanceRequestArgsForCall)
}

func (fake *FakeEC2API) ConfirmProductInstanceRequestCalls(stub func(*ec2.ConfirmProductInstanceInput) (*request.Request, *ec2.ConfirmProductInstanceOutput)) {
	fake.confirmProductInstanceRequestMutex.Lock()
	defer fake.confirmProductInstanceRequestMutex.Unlock()
	fake.ConfirmProductInstanceRequestStub = stub
}

func (fake *FakeEC2API) ConfirmProductInstanceRequestArgsForCall(i int) *ec2.ConfirmProductInstanceInput {
	fake.confirmProductInstanceRequestMutex.RLock()
	defer fake.confirmProductInstanceRequestMutex.RUnlock()
	argsForCall := fake.confirmProductInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ConfirmProductInstanceRequestReturns(result1 *request.Request, result2 *ec2.ConfirmProductInstanceOutput) {
	fake.confirmProductInstanceRequestMutex.Lock()
	defer fake.confirmProductInstanceRequestMutex.Unlock()
	fake.ConfirmProductInstanceRequestStub = nil
	fake.confirmProductInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ConfirmProductInstanceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ConfirmProductInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ConfirmProductInstanceOutput) {
	fake.confirmProductInstanceRequestMutex.Lock()
	defer fake.confirmProductInstanceRequestMutex.Unlock()
	fake.ConfirmProductInstanceRequestStub = nil
	if fake.confirmProductInstanceRequestReturnsOnCall == nil {
		fake.confirmProductInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ConfirmProductInstanceOutput
		})
	}
	fake.confirmProductInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ConfirmProductInstanceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ConfirmProductInstanceWithContext(arg1 aws.Context, arg2 *ec2.ConfirmProductInstanceInput, arg3 ...request.Option) (*ec2.ConfirmProductInstanceOutput, error) {
	fake.confirmProductInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.confirmProductInstanceWithContextReturnsOnCall[len(fake.confirmProductInstanceWithContextArgsForCall)]
	fake.confirmProductInstanceWithContextArgsForCall = append(fake.confirmProductInstanceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ConfirmProductInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ConfirmProductInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.confirmProductInstanceWithContextMutex.Unlock()
	if fake.ConfirmProductInstanceWithContextStub != nil {
		return fake.ConfirmProductInstanceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.confirmProductInstanceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ConfirmProductInstanceWithContextCallCount() int {
	fake.confirmProductInstanceWithContextMutex.RLock()
	defer fake.confirmProductInstanceWithContextMutex.RUnlock()
	return len(fake.confirmProductInstanceWithContextArgsForCall)
}

func (fake *FakeEC2API) ConfirmProductInstanceWithContextCalls(stub func(aws.Context, *ec2.ConfirmProductInstanceInput, ...request.Option) (*ec2.ConfirmProductInstanceOutput, error)) {
	fake.confirmProductInstanceWithContextMutex.Lock()
	defer fake.confirmProductInstanceWithContextMutex.Unlock()
	fake.ConfirmProductInstanceWithContextStub = stub
}

func (fake *FakeEC2API) ConfirmProductInstanceWithContextArgsForCall(i int) (aws.Context, *ec2.ConfirmProductInstanceInput, []request.Option) {
	fake.confirmProductInstanceWithContextMutex.RLock()
	defer fake.confirmProductInstanceWithContextMutex.RUnlock()
	argsForCall := fake.confirmProductInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ConfirmProductInstanceWithContextReturns(result1 *ec2.ConfirmProductInstanceOutput, result2 error) {
	fake.confirmProductInstanceWithContextMutex.Lock()
	defer fake.confirmProductInstanceWithContextMutex.Unlock()
	fake.ConfirmProductInstanceWithContextStub = nil
	fake.confirmProductInstanceWithContextReturns = struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ConfirmProductInstanceWithContextReturnsOnCall(i int, result1 *ec2.ConfirmProductInstanceOutput, result2 error) {
	fake.confirmProductInstanceWithContextMutex.Lock()
	defer fake.confirmProductInstanceWithContextMutex.Unlock()
	fake.ConfirmProductInstanceWithContextStub = nil
	if fake.confirmProductInstanceWithContextReturnsOnCall == nil {
		fake.confirmProductInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ConfirmProductInstanceOutput
			result2 error
		})
	}
	fake.confirmProductInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ConfirmProductInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyFpgaImage(arg1 *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
	fake.copyFpgaImageMutex.Lock()
	ret, specificReturn := fake.copyFpgaImageReturnsOnCall[len(fake.copyFpgaImageArgsForCall)]
	fake.copyFpgaImageArgsForCall = append(fake.copyFpgaImageArgsForCall, struct {
		arg1 *ec2.CopyFpgaImageInput
	}{arg1})
	fake.recordInvocation("CopyFpgaImage", []interface{}{arg1})
	fake.copyFpgaImageMutex.Unlock()
	if fake.CopyFpgaImageStub != nil {
		return fake.CopyFpgaImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyFpgaImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopyFpgaImageCallCount() int {
	fake.copyFpgaImageMutex.RLock()
	defer fake.copyFpgaImageMutex.RUnlock()
	return len(fake.copyFpgaImageArgsForCall)
}

func (fake *FakeEC2API) CopyFpgaImageCalls(stub func(*ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error)) {
	fake.copyFpgaImageMutex.Lock()
	defer fake.copyFpgaImageMutex.Unlock()
	fake.CopyFpgaImageStub = stub
}

func (fake *FakeEC2API) CopyFpgaImageArgsForCall(i int) *ec2.CopyFpgaImageInput {
	fake.copyFpgaImageMutex.RLock()
	defer fake.copyFpgaImageMutex.RUnlock()
	argsForCall := fake.copyFpgaImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CopyFpgaImageReturns(result1 *ec2.CopyFpgaImageOutput, result2 error) {
	fake.copyFpgaImageMutex.Lock()
	defer fake.copyFpgaImageMutex.Unlock()
	fake.CopyFpgaImageStub = nil
	fake.copyFpgaImageReturns = struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyFpgaImageReturnsOnCall(i int, result1 *ec2.CopyFpgaImageOutput, result2 error) {
	fake.copyFpgaImageMutex.Lock()
	defer fake.copyFpgaImageMutex.Unlock()
	fake.CopyFpgaImageStub = nil
	if fake.copyFpgaImageReturnsOnCall == nil {
		fake.copyFpgaImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.CopyFpgaImageOutput
			result2 error
		})
	}
	fake.copyFpgaImageReturnsOnCall[i] = struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyFpgaImageRequest(arg1 *ec2.CopyFpgaImageInput) (*request.Request, *ec2.CopyFpgaImageOutput) {
	fake.copyFpgaImageRequestMutex.Lock()
	ret, specificReturn := fake.copyFpgaImageRequestReturnsOnCall[len(fake.copyFpgaImageRequestArgsForCall)]
	fake.copyFpgaImageRequestArgsForCall = append(fake.copyFpgaImageRequestArgsForCall, struct {
		arg1 *ec2.CopyFpgaImageInput
	}{arg1})
	fake.recordInvocation("CopyFpgaImageRequest", []interface{}{arg1})
	fake.copyFpgaImageRequestMutex.Unlock()
	if fake.CopyFpgaImageRequestStub != nil {
		return fake.CopyFpgaImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyFpgaImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopyFpgaImageRequestCallCount() int {
	fake.copyFpgaImageRequestMutex.RLock()
	defer fake.copyFpgaImageRequestMutex.RUnlock()
	return len(fake.copyFpgaImageRequestArgsForCall)
}

func (fake *FakeEC2API) CopyFpgaImageRequestCalls(stub func(*ec2.CopyFpgaImageInput) (*request.Request, *ec2.CopyFpgaImageOutput)) {
	fake.copyFpgaImageRequestMutex.Lock()
	defer fake.copyFpgaImageRequestMutex.Unlock()
	fake.CopyFpgaImageRequestStub = stub
}

func (fake *FakeEC2API) CopyFpgaImageRequestArgsForCall(i int) *ec2.CopyFpgaImageInput {
	fake.copyFpgaImageRequestMutex.RLock()
	defer fake.copyFpgaImageRequestMutex.RUnlock()
	argsForCall := fake.copyFpgaImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CopyFpgaImageRequestReturns(result1 *request.Request, result2 *ec2.CopyFpgaImageOutput) {
	fake.copyFpgaImageRequestMutex.Lock()
	defer fake.copyFpgaImageRequestMutex.Unlock()
	fake.CopyFpgaImageRequestStub = nil
	fake.copyFpgaImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CopyFpgaImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CopyFpgaImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CopyFpgaImageOutput) {
	fake.copyFpgaImageRequestMutex.Lock()
	defer fake.copyFpgaImageRequestMutex.Unlock()
	fake.CopyFpgaImageRequestStub = nil
	if fake.copyFpgaImageRequestReturnsOnCall == nil {
		fake.copyFpgaImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CopyFpgaImageOutput
		})
	}
	fake.copyFpgaImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CopyFpgaImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CopyFpgaImageWithContext(arg1 aws.Context, arg2 *ec2.CopyFpgaImageInput, arg3 ...request.Option) (*ec2.CopyFpgaImageOutput, error) {
	fake.copyFpgaImageWithContextMutex.Lock()
	ret, specificReturn := fake.copyFpgaImageWithContextReturnsOnCall[len(fake.copyFpgaImageWithContextArgsForCall)]
	fake.copyFpgaImageWithContextArgsForCall = append(fake.copyFpgaImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CopyFpgaImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CopyFpgaImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyFpgaImageWithContextMutex.Unlock()
	if fake.CopyFpgaImageWithContextStub != nil {
		return fake.CopyFpgaImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyFpgaImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopyFpgaImageWithContextCallCount() int {
	fake.copyFpgaImageWithContextMutex.RLock()
	defer fake.copyFpgaImageWithContextMutex.RUnlock()
	return len(fake.copyFpgaImageWithContextArgsForCall)
}

func (fake *FakeEC2API) CopyFpgaImageWithContextCalls(stub func(aws.Context, *ec2.CopyFpgaImageInput, ...request.Option) (*ec2.CopyFpgaImageOutput, error)) {
	fake.copyFpgaImageWithContextMutex.Lock()
	defer fake.copyFpgaImageWithContextMutex.Unlock()
	fake.CopyFpgaImageWithContextStub = stub
}

func (fake *FakeEC2API) CopyFpgaImageWithContextArgsForCall(i int) (aws.Context, *ec2.CopyFpgaImageInput, []request.Option) {
	fake.copyFpgaImageWithContextMutex.RLock()
	defer fake.copyFpgaImageWithContextMutex.RUnlock()
	argsForCall := fake.copyFpgaImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CopyFpgaImageWithContextReturns(result1 *ec2.CopyFpgaImageOutput, result2 error) {
	fake.copyFpgaImageWithContextMutex.Lock()
	defer fake.copyFpgaImageWithContextMutex.Unlock()
	fake.CopyFpgaImageWithContextStub = nil
	fake.copyFpgaImageWithContextReturns = struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyFpgaImageWithContextReturnsOnCall(i int, result1 *ec2.CopyFpgaImageOutput, result2 error) {
	fake.copyFpgaImageWithContextMutex.Lock()
	defer fake.copyFpgaImageWithContextMutex.Unlock()
	fake.CopyFpgaImageWithContextStub = nil
	if fake.copyFpgaImageWithContextReturnsOnCall == nil {
		fake.copyFpgaImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CopyFpgaImageOutput
			result2 error
		})
	}
	fake.copyFpgaImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CopyFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyImage(arg1 *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	fake.copyImageMutex.Lock()
	ret, specificReturn := fake.copyImageReturnsOnCall[len(fake.copyImageArgsForCall)]
	fake.copyImageArgsForCall = append(fake.copyImageArgsForCall, struct {
		arg1 *ec2.CopyImageInput
	}{arg1})
	fake.recordInvocation("CopyImage", []interface{}{arg1})
	fake.copyImageMutex.Unlock()
	if fake.CopyImageStub != nil {
		return fake.CopyImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopyImageCallCount() int {
	fake.copyImageMutex.RLock()
	defer fake.copyImageMutex.RUnlock()
	return len(fake.copyImageArgsForCall)
}

func (fake *FakeEC2API) CopyImageCalls(stub func(*ec2.CopyImageInput) (*ec2.CopyImageOutput, error)) {
	fake.copyImageMutex.Lock()
	defer fake.copyImageMutex.Unlock()
	fake.CopyImageStub = stub
}

func (fake *FakeEC2API) CopyImageArgsForCall(i int) *ec2.CopyImageInput {
	fake.copyImageMutex.RLock()
	defer fake.copyImageMutex.RUnlock()
	argsForCall := fake.copyImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CopyImageReturns(result1 *ec2.CopyImageOutput, result2 error) {
	fake.copyImageMutex.Lock()
	defer fake.copyImageMutex.Unlock()
	fake.CopyImageStub = nil
	fake.copyImageReturns = struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyImageReturnsOnCall(i int, result1 *ec2.CopyImageOutput, result2 error) {
	fake.copyImageMutex.Lock()
	defer fake.copyImageMutex.Unlock()
	fake.CopyImageStub = nil
	if fake.copyImageReturnsOnCall == nil {
		fake.copyImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.CopyImageOutput
			result2 error
		})
	}
	fake.copyImageReturnsOnCall[i] = struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyImageRequest(arg1 *ec2.CopyImageInput) (*request.Request, *ec2.CopyImageOutput) {
	fake.copyImageRequestMutex.Lock()
	ret, specificReturn := fake.copyImageRequestReturnsOnCall[len(fake.copyImageRequestArgsForCall)]
	fake.copyImageRequestArgsForCall = append(fake.copyImageRequestArgsForCall, struct {
		arg1 *ec2.CopyImageInput
	}{arg1})
	fake.recordInvocation("CopyImageRequest", []interface{}{arg1})
	fake.copyImageRequestMutex.Unlock()
	if fake.CopyImageRequestStub != nil {
		return fake.CopyImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopyImageRequestCallCount() int {
	fake.copyImageRequestMutex.RLock()
	defer fake.copyImageRequestMutex.RUnlock()
	return len(fake.copyImageRequestArgsForCall)
}

func (fake *FakeEC2API) CopyImageRequestCalls(stub func(*ec2.CopyImageInput) (*request.Request, *ec2.CopyImageOutput)) {
	fake.copyImageRequestMutex.Lock()
	defer fake.copyImageRequestMutex.Unlock()
	fake.CopyImageRequestStub = stub
}

func (fake *FakeEC2API) CopyImageRequestArgsForCall(i int) *ec2.CopyImageInput {
	fake.copyImageRequestMutex.RLock()
	defer fake.copyImageRequestMutex.RUnlock()
	argsForCall := fake.copyImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CopyImageRequestReturns(result1 *request.Request, result2 *ec2.CopyImageOutput) {
	fake.copyImageRequestMutex.Lock()
	defer fake.copyImageRequestMutex.Unlock()
	fake.CopyImageRequestStub = nil
	fake.copyImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CopyImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CopyImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CopyImageOutput) {
	fake.copyImageRequestMutex.Lock()
	defer fake.copyImageRequestMutex.Unlock()
	fake.CopyImageRequestStub = nil
	if fake.copyImageRequestReturnsOnCall == nil {
		fake.copyImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CopyImageOutput
		})
	}
	fake.copyImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CopyImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CopyImageWithContext(arg1 aws.Context, arg2 *ec2.CopyImageInput, arg3 ...request.Option) (*ec2.CopyImageOutput, error) {
	fake.copyImageWithContextMutex.Lock()
	ret, specificReturn := fake.copyImageWithContextReturnsOnCall[len(fake.copyImageWithContextArgsForCall)]
	fake.copyImageWithContextArgsForCall = append(fake.copyImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CopyImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CopyImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.copyImageWithContextMutex.Unlock()
	if fake.CopyImageWithContextStub != nil {
		return fake.CopyImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copyImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopyImageWithContextCallCount() int {
	fake.copyImageWithContextMutex.RLock()
	defer fake.copyImageWithContextMutex.RUnlock()
	return len(fake.copyImageWithContextArgsForCall)
}

func (fake *FakeEC2API) CopyImageWithContextCalls(stub func(aws.Context, *ec2.CopyImageInput, ...request.Option) (*ec2.CopyImageOutput, error)) {
	fake.copyImageWithContextMutex.Lock()
	defer fake.copyImageWithContextMutex.Unlock()
	fake.CopyImageWithContextStub = stub
}

func (fake *FakeEC2API) CopyImageWithContextArgsForCall(i int) (aws.Context, *ec2.CopyImageInput, []request.Option) {
	fake.copyImageWithContextMutex.RLock()
	defer fake.copyImageWithContextMutex.RUnlock()
	argsForCall := fake.copyImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CopyImageWithContextReturns(result1 *ec2.CopyImageOutput, result2 error) {
	fake.copyImageWithContextMutex.Lock()
	defer fake.copyImageWithContextMutex.Unlock()
	fake.CopyImageWithContextStub = nil
	fake.copyImageWithContextReturns = struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopyImageWithContextReturnsOnCall(i int, result1 *ec2.CopyImageOutput, result2 error) {
	fake.copyImageWithContextMutex.Lock()
	defer fake.copyImageWithContextMutex.Unlock()
	fake.CopyImageWithContextStub = nil
	if fake.copyImageWithContextReturnsOnCall == nil {
		fake.copyImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CopyImageOutput
			result2 error
		})
	}
	fake.copyImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CopyImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopySnapshot(arg1 *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	fake.copySnapshotMutex.Lock()
	ret, specificReturn := fake.copySnapshotReturnsOnCall[len(fake.copySnapshotArgsForCall)]
	fake.copySnapshotArgsForCall = append(fake.copySnapshotArgsForCall, struct {
		arg1 *ec2.CopySnapshotInput
	}{arg1})
	fake.recordInvocation("CopySnapshot", []interface{}{arg1})
	fake.copySnapshotMutex.Unlock()
	if fake.CopySnapshotStub != nil {
		return fake.CopySnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copySnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopySnapshotCallCount() int {
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	return len(fake.copySnapshotArgsForCall)
}

func (fake *FakeEC2API) CopySnapshotCalls(stub func(*ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error)) {
	fake.copySnapshotMutex.Lock()
	defer fake.copySnapshotMutex.Unlock()
	fake.CopySnapshotStub = stub
}

func (fake *FakeEC2API) CopySnapshotArgsForCall(i int) *ec2.CopySnapshotInput {
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	argsForCall := fake.copySnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CopySnapshotReturns(result1 *ec2.CopySnapshotOutput, result2 error) {
	fake.copySnapshotMutex.Lock()
	defer fake.copySnapshotMutex.Unlock()
	fake.CopySnapshotStub = nil
	fake.copySnapshotReturns = struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopySnapshotReturnsOnCall(i int, result1 *ec2.CopySnapshotOutput, result2 error) {
	fake.copySnapshotMutex.Lock()
	defer fake.copySnapshotMutex.Unlock()
	fake.CopySnapshotStub = nil
	if fake.copySnapshotReturnsOnCall == nil {
		fake.copySnapshotReturnsOnCall = make(map[int]struct {
			result1 *ec2.CopySnapshotOutput
			result2 error
		})
	}
	fake.copySnapshotReturnsOnCall[i] = struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopySnapshotRequest(arg1 *ec2.CopySnapshotInput) (*request.Request, *ec2.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	ret, specificReturn := fake.copySnapshotRequestReturnsOnCall[len(fake.copySnapshotRequestArgsForCall)]
	fake.copySnapshotRequestArgsForCall = append(fake.copySnapshotRequestArgsForCall, struct {
		arg1 *ec2.CopySnapshotInput
	}{arg1})
	fake.recordInvocation("CopySnapshotRequest", []interface{}{arg1})
	fake.copySnapshotRequestMutex.Unlock()
	if fake.CopySnapshotRequestStub != nil {
		return fake.CopySnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copySnapshotRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopySnapshotRequestCallCount() int {
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	return len(fake.copySnapshotRequestArgsForCall)
}

func (fake *FakeEC2API) CopySnapshotRequestCalls(stub func(*ec2.CopySnapshotInput) (*request.Request, *ec2.CopySnapshotOutput)) {
	fake.copySnapshotRequestMutex.Lock()
	defer fake.copySnapshotRequestMutex.Unlock()
	fake.CopySnapshotRequestStub = stub
}

func (fake *FakeEC2API) CopySnapshotRequestArgsForCall(i int) *ec2.CopySnapshotInput {
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	argsForCall := fake.copySnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CopySnapshotRequestReturns(result1 *request.Request, result2 *ec2.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	defer fake.copySnapshotRequestMutex.Unlock()
	fake.CopySnapshotRequestStub = nil
	fake.copySnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CopySnapshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CopySnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	defer fake.copySnapshotRequestMutex.Unlock()
	fake.CopySnapshotRequestStub = nil
	if fake.copySnapshotRequestReturnsOnCall == nil {
		fake.copySnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CopySnapshotOutput
		})
	}
	fake.copySnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CopySnapshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CopySnapshotWithContext(arg1 aws.Context, arg2 *ec2.CopySnapshotInput, arg3 ...request.Option) (*ec2.CopySnapshotOutput, error) {
	fake.copySnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.copySnapshotWithContextReturnsOnCall[len(fake.copySnapshotWithContextArgsForCall)]
	fake.copySnapshotWithContextArgsForCall = append(fake.copySnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CopySnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CopySnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.copySnapshotWithContextMutex.Unlock()
	if fake.CopySnapshotWithContextStub != nil {
		return fake.CopySnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.copySnapshotWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CopySnapshotWithContextCallCount() int {
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	return len(fake.copySnapshotWithContextArgsForCall)
}

func (fake *FakeEC2API) CopySnapshotWithContextCalls(stub func(aws.Context, *ec2.CopySnapshotInput, ...request.Option) (*ec2.CopySnapshotOutput, error)) {
	fake.copySnapshotWithContextMutex.Lock()
	defer fake.copySnapshotWithContextMutex.Unlock()
	fake.CopySnapshotWithContextStub = stub
}

func (fake *FakeEC2API) CopySnapshotWithContextArgsForCall(i int) (aws.Context, *ec2.CopySnapshotInput, []request.Option) {
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	argsForCall := fake.copySnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CopySnapshotWithContextReturns(result1 *ec2.CopySnapshotOutput, result2 error) {
	fake.copySnapshotWithContextMutex.Lock()
	defer fake.copySnapshotWithContextMutex.Unlock()
	fake.CopySnapshotWithContextStub = nil
	fake.copySnapshotWithContextReturns = struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CopySnapshotWithContextReturnsOnCall(i int, result1 *ec2.CopySnapshotOutput, result2 error) {
	fake.copySnapshotWithContextMutex.Lock()
	defer fake.copySnapshotWithContextMutex.Unlock()
	fake.CopySnapshotWithContextStub = nil
	if fake.copySnapshotWithContextReturnsOnCall == nil {
		fake.copySnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CopySnapshotOutput
			result2 error
		})
	}
	fake.copySnapshotWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCapacityReservation(arg1 *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error) {
	fake.createCapacityReservationMutex.Lock()
	ret, specificReturn := fake.createCapacityReservationReturnsOnCall[len(fake.createCapacityReservationArgsForCall)]
	fake.createCapacityReservationArgsForCall = append(fake.createCapacityReservationArgsForCall, struct {
		arg1 *ec2.CreateCapacityReservationInput
	}{arg1})
	fake.recordInvocation("CreateCapacityReservation", []interface{}{arg1})
	fake.createCapacityReservationMutex.Unlock()
	if fake.CreateCapacityReservationStub != nil {
		return fake.CreateCapacityReservationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCapacityReservationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateCapacityReservationCallCount() int {
	fake.createCapacityReservationMutex.RLock()
	defer fake.createCapacityReservationMutex.RUnlock()
	return len(fake.createCapacityReservationArgsForCall)
}

func (fake *FakeEC2API) CreateCapacityReservationCalls(stub func(*ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error)) {
	fake.createCapacityReservationMutex.Lock()
	defer fake.createCapacityReservationMutex.Unlock()
	fake.CreateCapacityReservationStub = stub
}

func (fake *FakeEC2API) CreateCapacityReservationArgsForCall(i int) *ec2.CreateCapacityReservationInput {
	fake.createCapacityReservationMutex.RLock()
	defer fake.createCapacityReservationMutex.RUnlock()
	argsForCall := fake.createCapacityReservationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateCapacityReservationReturns(result1 *ec2.CreateCapacityReservationOutput, result2 error) {
	fake.createCapacityReservationMutex.Lock()
	defer fake.createCapacityReservationMutex.Unlock()
	fake.CreateCapacityReservationStub = nil
	fake.createCapacityReservationReturns = struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCapacityReservationReturnsOnCall(i int, result1 *ec2.CreateCapacityReservationOutput, result2 error) {
	fake.createCapacityReservationMutex.Lock()
	defer fake.createCapacityReservationMutex.Unlock()
	fake.CreateCapacityReservationStub = nil
	if fake.createCapacityReservationReturnsOnCall == nil {
		fake.createCapacityReservationReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateCapacityReservationOutput
			result2 error
		})
	}
	fake.createCapacityReservationReturnsOnCall[i] = struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCapacityReservationRequest(arg1 *ec2.CreateCapacityReservationInput) (*request.Request, *ec2.CreateCapacityReservationOutput) {
	fake.createCapacityReservationRequestMutex.Lock()
	ret, specificReturn := fake.createCapacityReservationRequestReturnsOnCall[len(fake.createCapacityReservationRequestArgsForCall)]
	fake.createCapacityReservationRequestArgsForCall = append(fake.createCapacityReservationRequestArgsForCall, struct {
		arg1 *ec2.CreateCapacityReservationInput
	}{arg1})
	fake.recordInvocation("CreateCapacityReservationRequest", []interface{}{arg1})
	fake.createCapacityReservationRequestMutex.Unlock()
	if fake.CreateCapacityReservationRequestStub != nil {
		return fake.CreateCapacityReservationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCapacityReservationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateCapacityReservationRequestCallCount() int {
	fake.createCapacityReservationRequestMutex.RLock()
	defer fake.createCapacityReservationRequestMutex.RUnlock()
	return len(fake.createCapacityReservationRequestArgsForCall)
}

func (fake *FakeEC2API) CreateCapacityReservationRequestCalls(stub func(*ec2.CreateCapacityReservationInput) (*request.Request, *ec2.CreateCapacityReservationOutput)) {
	fake.createCapacityReservationRequestMutex.Lock()
	defer fake.createCapacityReservationRequestMutex.Unlock()
	fake.CreateCapacityReservationRequestStub = stub
}

func (fake *FakeEC2API) CreateCapacityReservationRequestArgsForCall(i int) *ec2.CreateCapacityReservationInput {
	fake.createCapacityReservationRequestMutex.RLock()
	defer fake.createCapacityReservationRequestMutex.RUnlock()
	argsForCall := fake.createCapacityReservationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateCapacityReservationRequestReturns(result1 *request.Request, result2 *ec2.CreateCapacityReservationOutput) {
	fake.createCapacityReservationRequestMutex.Lock()
	defer fake.createCapacityReservationRequestMutex.Unlock()
	fake.CreateCapacityReservationRequestStub = nil
	fake.createCapacityReservationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateCapacityReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCapacityReservationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateCapacityReservationOutput) {
	fake.createCapacityReservationRequestMutex.Lock()
	defer fake.createCapacityReservationRequestMutex.Unlock()
	fake.CreateCapacityReservationRequestStub = nil
	if fake.createCapacityReservationRequestReturnsOnCall == nil {
		fake.createCapacityReservationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateCapacityReservationOutput
		})
	}
	fake.createCapacityReservationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateCapacityReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCapacityReservationWithContext(arg1 aws.Context, arg2 *ec2.CreateCapacityReservationInput, arg3 ...request.Option) (*ec2.CreateCapacityReservationOutput, error) {
	fake.createCapacityReservationWithContextMutex.Lock()
	ret, specificReturn := fake.createCapacityReservationWithContextReturnsOnCall[len(fake.createCapacityReservationWithContextArgsForCall)]
	fake.createCapacityReservationWithContextArgsForCall = append(fake.createCapacityReservationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateCapacityReservationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCapacityReservationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCapacityReservationWithContextMutex.Unlock()
	if fake.CreateCapacityReservationWithContextStub != nil {
		return fake.CreateCapacityReservationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCapacityReservationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateCapacityReservationWithContextCallCount() int {
	fake.createCapacityReservationWithContextMutex.RLock()
	defer fake.createCapacityReservationWithContextMutex.RUnlock()
	return len(fake.createCapacityReservationWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateCapacityReservationWithContextCalls(stub func(aws.Context, *ec2.CreateCapacityReservationInput, ...request.Option) (*ec2.CreateCapacityReservationOutput, error)) {
	fake.createCapacityReservationWithContextMutex.Lock()
	defer fake.createCapacityReservationWithContextMutex.Unlock()
	fake.CreateCapacityReservationWithContextStub = stub
}

func (fake *FakeEC2API) CreateCapacityReservationWithContextArgsForCall(i int) (aws.Context, *ec2.CreateCapacityReservationInput, []request.Option) {
	fake.createCapacityReservationWithContextMutex.RLock()
	defer fake.createCapacityReservationWithContextMutex.RUnlock()
	argsForCall := fake.createCapacityReservationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateCapacityReservationWithContextReturns(result1 *ec2.CreateCapacityReservationOutput, result2 error) {
	fake.createCapacityReservationWithContextMutex.Lock()
	defer fake.createCapacityReservationWithContextMutex.Unlock()
	fake.CreateCapacityReservationWithContextStub = nil
	fake.createCapacityReservationWithContextReturns = struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCapacityReservationWithContextReturnsOnCall(i int, result1 *ec2.CreateCapacityReservationOutput, result2 error) {
	fake.createCapacityReservationWithContextMutex.Lock()
	defer fake.createCapacityReservationWithContextMutex.Unlock()
	fake.CreateCapacityReservationWithContextStub = nil
	if fake.createCapacityReservationWithContextReturnsOnCall == nil {
		fake.createCapacityReservationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateCapacityReservationOutput
			result2 error
		})
	}
	fake.createCapacityReservationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnEndpoint(arg1 *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error) {
	fake.createClientVpnEndpointMutex.Lock()
	ret, specificReturn := fake.createClientVpnEndpointReturnsOnCall[len(fake.createClientVpnEndpointArgsForCall)]
	fake.createClientVpnEndpointArgsForCall = append(fake.createClientVpnEndpointArgsForCall, struct {
		arg1 *ec2.CreateClientVpnEndpointInput
	}{arg1})
	fake.recordInvocation("CreateClientVpnEndpoint", []interface{}{arg1})
	fake.createClientVpnEndpointMutex.Unlock()
	if fake.CreateClientVpnEndpointStub != nil {
		return fake.CreateClientVpnEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientVpnEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateClientVpnEndpointCallCount() int {
	fake.createClientVpnEndpointMutex.RLock()
	defer fake.createClientVpnEndpointMutex.RUnlock()
	return len(fake.createClientVpnEndpointArgsForCall)
}

func (fake *FakeEC2API) CreateClientVpnEndpointCalls(stub func(*ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error)) {
	fake.createClientVpnEndpointMutex.Lock()
	defer fake.createClientVpnEndpointMutex.Unlock()
	fake.CreateClientVpnEndpointStub = stub
}

func (fake *FakeEC2API) CreateClientVpnEndpointArgsForCall(i int) *ec2.CreateClientVpnEndpointInput {
	fake.createClientVpnEndpointMutex.RLock()
	defer fake.createClientVpnEndpointMutex.RUnlock()
	argsForCall := fake.createClientVpnEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateClientVpnEndpointReturns(result1 *ec2.CreateClientVpnEndpointOutput, result2 error) {
	fake.createClientVpnEndpointMutex.Lock()
	defer fake.createClientVpnEndpointMutex.Unlock()
	fake.CreateClientVpnEndpointStub = nil
	fake.createClientVpnEndpointReturns = struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnEndpointReturnsOnCall(i int, result1 *ec2.CreateClientVpnEndpointOutput, result2 error) {
	fake.createClientVpnEndpointMutex.Lock()
	defer fake.createClientVpnEndpointMutex.Unlock()
	fake.CreateClientVpnEndpointStub = nil
	if fake.createClientVpnEndpointReturnsOnCall == nil {
		fake.createClientVpnEndpointReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateClientVpnEndpointOutput
			result2 error
		})
	}
	fake.createClientVpnEndpointReturnsOnCall[i] = struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnEndpointRequest(arg1 *ec2.CreateClientVpnEndpointInput) (*request.Request, *ec2.CreateClientVpnEndpointOutput) {
	fake.createClientVpnEndpointRequestMutex.Lock()
	ret, specificReturn := fake.createClientVpnEndpointRequestReturnsOnCall[len(fake.createClientVpnEndpointRequestArgsForCall)]
	fake.createClientVpnEndpointRequestArgsForCall = append(fake.createClientVpnEndpointRequestArgsForCall, struct {
		arg1 *ec2.CreateClientVpnEndpointInput
	}{arg1})
	fake.recordInvocation("CreateClientVpnEndpointRequest", []interface{}{arg1})
	fake.createClientVpnEndpointRequestMutex.Unlock()
	if fake.CreateClientVpnEndpointRequestStub != nil {
		return fake.CreateClientVpnEndpointRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientVpnEndpointRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateClientVpnEndpointRequestCallCount() int {
	fake.createClientVpnEndpointRequestMutex.RLock()
	defer fake.createClientVpnEndpointRequestMutex.RUnlock()
	return len(fake.createClientVpnEndpointRequestArgsForCall)
}

func (fake *FakeEC2API) CreateClientVpnEndpointRequestCalls(stub func(*ec2.CreateClientVpnEndpointInput) (*request.Request, *ec2.CreateClientVpnEndpointOutput)) {
	fake.createClientVpnEndpointRequestMutex.Lock()
	defer fake.createClientVpnEndpointRequestMutex.Unlock()
	fake.CreateClientVpnEndpointRequestStub = stub
}

func (fake *FakeEC2API) CreateClientVpnEndpointRequestArgsForCall(i int) *ec2.CreateClientVpnEndpointInput {
	fake.createClientVpnEndpointRequestMutex.RLock()
	defer fake.createClientVpnEndpointRequestMutex.RUnlock()
	argsForCall := fake.createClientVpnEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateClientVpnEndpointRequestReturns(result1 *request.Request, result2 *ec2.CreateClientVpnEndpointOutput) {
	fake.createClientVpnEndpointRequestMutex.Lock()
	defer fake.createClientVpnEndpointRequestMutex.Unlock()
	fake.CreateClientVpnEndpointRequestStub = nil
	fake.createClientVpnEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateClientVpnEndpointOutput) {
	fake.createClientVpnEndpointRequestMutex.Lock()
	defer fake.createClientVpnEndpointRequestMutex.Unlock()
	fake.CreateClientVpnEndpointRequestStub = nil
	if fake.createClientVpnEndpointRequestReturnsOnCall == nil {
		fake.createClientVpnEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateClientVpnEndpointOutput
		})
	}
	fake.createClientVpnEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnEndpointWithContext(arg1 aws.Context, arg2 *ec2.CreateClientVpnEndpointInput, arg3 ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error) {
	fake.createClientVpnEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.createClientVpnEndpointWithContextReturnsOnCall[len(fake.createClientVpnEndpointWithContextArgsForCall)]
	fake.createClientVpnEndpointWithContextArgsForCall = append(fake.createClientVpnEndpointWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateClientVpnEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateClientVpnEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.createClientVpnEndpointWithContextMutex.Unlock()
	if fake.CreateClientVpnEndpointWithContextStub != nil {
		return fake.CreateClientVpnEndpointWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientVpnEndpointWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateClientVpnEndpointWithContextCallCount() int {
	fake.createClientVpnEndpointWithContextMutex.RLock()
	defer fake.createClientVpnEndpointWithContextMutex.RUnlock()
	return len(fake.createClientVpnEndpointWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateClientVpnEndpointWithContextCalls(stub func(aws.Context, *ec2.CreateClientVpnEndpointInput, ...request.Option) (*ec2.CreateClientVpnEndpointOutput, error)) {
	fake.createClientVpnEndpointWithContextMutex.Lock()
	defer fake.createClientVpnEndpointWithContextMutex.Unlock()
	fake.CreateClientVpnEndpointWithContextStub = stub
}

func (fake *FakeEC2API) CreateClientVpnEndpointWithContextArgsForCall(i int) (aws.Context, *ec2.CreateClientVpnEndpointInput, []request.Option) {
	fake.createClientVpnEndpointWithContextMutex.RLock()
	defer fake.createClientVpnEndpointWithContextMutex.RUnlock()
	argsForCall := fake.createClientVpnEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateClientVpnEndpointWithContextReturns(result1 *ec2.CreateClientVpnEndpointOutput, result2 error) {
	fake.createClientVpnEndpointWithContextMutex.Lock()
	defer fake.createClientVpnEndpointWithContextMutex.Unlock()
	fake.CreateClientVpnEndpointWithContextStub = nil
	fake.createClientVpnEndpointWithContextReturns = struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnEndpointWithContextReturnsOnCall(i int, result1 *ec2.CreateClientVpnEndpointOutput, result2 error) {
	fake.createClientVpnEndpointWithContextMutex.Lock()
	defer fake.createClientVpnEndpointWithContextMutex.Unlock()
	fake.CreateClientVpnEndpointWithContextStub = nil
	if fake.createClientVpnEndpointWithContextReturnsOnCall == nil {
		fake.createClientVpnEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateClientVpnEndpointOutput
			result2 error
		})
	}
	fake.createClientVpnEndpointWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnRoute(arg1 *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error) {
	fake.createClientVpnRouteMutex.Lock()
	ret, specificReturn := fake.createClientVpnRouteReturnsOnCall[len(fake.createClientVpnRouteArgsForCall)]
	fake.createClientVpnRouteArgsForCall = append(fake.createClientVpnRouteArgsForCall, struct {
		arg1 *ec2.CreateClientVpnRouteInput
	}{arg1})
	fake.recordInvocation("CreateClientVpnRoute", []interface{}{arg1})
	fake.createClientVpnRouteMutex.Unlock()
	if fake.CreateClientVpnRouteStub != nil {
		return fake.CreateClientVpnRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientVpnRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateClientVpnRouteCallCount() int {
	fake.createClientVpnRouteMutex.RLock()
	defer fake.createClientVpnRouteMutex.RUnlock()
	return len(fake.createClientVpnRouteArgsForCall)
}

func (fake *FakeEC2API) CreateClientVpnRouteCalls(stub func(*ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error)) {
	fake.createClientVpnRouteMutex.Lock()
	defer fake.createClientVpnRouteMutex.Unlock()
	fake.CreateClientVpnRouteStub = stub
}

func (fake *FakeEC2API) CreateClientVpnRouteArgsForCall(i int) *ec2.CreateClientVpnRouteInput {
	fake.createClientVpnRouteMutex.RLock()
	defer fake.createClientVpnRouteMutex.RUnlock()
	argsForCall := fake.createClientVpnRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateClientVpnRouteReturns(result1 *ec2.CreateClientVpnRouteOutput, result2 error) {
	fake.createClientVpnRouteMutex.Lock()
	defer fake.createClientVpnRouteMutex.Unlock()
	fake.CreateClientVpnRouteStub = nil
	fake.createClientVpnRouteReturns = struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnRouteReturnsOnCall(i int, result1 *ec2.CreateClientVpnRouteOutput, result2 error) {
	fake.createClientVpnRouteMutex.Lock()
	defer fake.createClientVpnRouteMutex.Unlock()
	fake.CreateClientVpnRouteStub = nil
	if fake.createClientVpnRouteReturnsOnCall == nil {
		fake.createClientVpnRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateClientVpnRouteOutput
			result2 error
		})
	}
	fake.createClientVpnRouteReturnsOnCall[i] = struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnRouteRequest(arg1 *ec2.CreateClientVpnRouteInput) (*request.Request, *ec2.CreateClientVpnRouteOutput) {
	fake.createClientVpnRouteRequestMutex.Lock()
	ret, specificReturn := fake.createClientVpnRouteRequestReturnsOnCall[len(fake.createClientVpnRouteRequestArgsForCall)]
	fake.createClientVpnRouteRequestArgsForCall = append(fake.createClientVpnRouteRequestArgsForCall, struct {
		arg1 *ec2.CreateClientVpnRouteInput
	}{arg1})
	fake.recordInvocation("CreateClientVpnRouteRequest", []interface{}{arg1})
	fake.createClientVpnRouteRequestMutex.Unlock()
	if fake.CreateClientVpnRouteRequestStub != nil {
		return fake.CreateClientVpnRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientVpnRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateClientVpnRouteRequestCallCount() int {
	fake.createClientVpnRouteRequestMutex.RLock()
	defer fake.createClientVpnRouteRequestMutex.RUnlock()
	return len(fake.createClientVpnRouteRequestArgsForCall)
}

func (fake *FakeEC2API) CreateClientVpnRouteRequestCalls(stub func(*ec2.CreateClientVpnRouteInput) (*request.Request, *ec2.CreateClientVpnRouteOutput)) {
	fake.createClientVpnRouteRequestMutex.Lock()
	defer fake.createClientVpnRouteRequestMutex.Unlock()
	fake.CreateClientVpnRouteRequestStub = stub
}

func (fake *FakeEC2API) CreateClientVpnRouteRequestArgsForCall(i int) *ec2.CreateClientVpnRouteInput {
	fake.createClientVpnRouteRequestMutex.RLock()
	defer fake.createClientVpnRouteRequestMutex.RUnlock()
	argsForCall := fake.createClientVpnRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateClientVpnRouteRequestReturns(result1 *request.Request, result2 *ec2.CreateClientVpnRouteOutput) {
	fake.createClientVpnRouteRequestMutex.Lock()
	defer fake.createClientVpnRouteRequestMutex.Unlock()
	fake.CreateClientVpnRouteRequestStub = nil
	fake.createClientVpnRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateClientVpnRouteOutput) {
	fake.createClientVpnRouteRequestMutex.Lock()
	defer fake.createClientVpnRouteRequestMutex.Unlock()
	fake.CreateClientVpnRouteRequestStub = nil
	if fake.createClientVpnRouteRequestReturnsOnCall == nil {
		fake.createClientVpnRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateClientVpnRouteOutput
		})
	}
	fake.createClientVpnRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateClientVpnRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnRouteWithContext(arg1 aws.Context, arg2 *ec2.CreateClientVpnRouteInput, arg3 ...request.Option) (*ec2.CreateClientVpnRouteOutput, error) {
	fake.createClientVpnRouteWithContextMutex.Lock()
	ret, specificReturn := fake.createClientVpnRouteWithContextReturnsOnCall[len(fake.createClientVpnRouteWithContextArgsForCall)]
	fake.createClientVpnRouteWithContextArgsForCall = append(fake.createClientVpnRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateClientVpnRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateClientVpnRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.createClientVpnRouteWithContextMutex.Unlock()
	if fake.CreateClientVpnRouteWithContextStub != nil {
		return fake.CreateClientVpnRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClientVpnRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateClientVpnRouteWithContextCallCount() int {
	fake.createClientVpnRouteWithContextMutex.RLock()
	defer fake.createClientVpnRouteWithContextMutex.RUnlock()
	return len(fake.createClientVpnRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateClientVpnRouteWithContextCalls(stub func(aws.Context, *ec2.CreateClientVpnRouteInput, ...request.Option) (*ec2.CreateClientVpnRouteOutput, error)) {
	fake.createClientVpnRouteWithContextMutex.Lock()
	defer fake.createClientVpnRouteWithContextMutex.Unlock()
	fake.CreateClientVpnRouteWithContextStub = stub
}

func (fake *FakeEC2API) CreateClientVpnRouteWithContextArgsForCall(i int) (aws.Context, *ec2.CreateClientVpnRouteInput, []request.Option) {
	fake.createClientVpnRouteWithContextMutex.RLock()
	defer fake.createClientVpnRouteWithContextMutex.RUnlock()
	argsForCall := fake.createClientVpnRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateClientVpnRouteWithContextReturns(result1 *ec2.CreateClientVpnRouteOutput, result2 error) {
	fake.createClientVpnRouteWithContextMutex.Lock()
	defer fake.createClientVpnRouteWithContextMutex.Unlock()
	fake.CreateClientVpnRouteWithContextStub = nil
	fake.createClientVpnRouteWithContextReturns = struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateClientVpnRouteWithContextReturnsOnCall(i int, result1 *ec2.CreateClientVpnRouteOutput, result2 error) {
	fake.createClientVpnRouteWithContextMutex.Lock()
	defer fake.createClientVpnRouteWithContextMutex.Unlock()
	fake.CreateClientVpnRouteWithContextStub = nil
	if fake.createClientVpnRouteWithContextReturnsOnCall == nil {
		fake.createClientVpnRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateClientVpnRouteOutput
			result2 error
		})
	}
	fake.createClientVpnRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCustomerGateway(arg1 *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	fake.createCustomerGatewayMutex.Lock()
	ret, specificReturn := fake.createCustomerGatewayReturnsOnCall[len(fake.createCustomerGatewayArgsForCall)]
	fake.createCustomerGatewayArgsForCall = append(fake.createCustomerGatewayArgsForCall, struct {
		arg1 *ec2.CreateCustomerGatewayInput
	}{arg1})
	fake.recordInvocation("CreateCustomerGateway", []interface{}{arg1})
	fake.createCustomerGatewayMutex.Unlock()
	if fake.CreateCustomerGatewayStub != nil {
		return fake.CreateCustomerGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCustomerGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateCustomerGatewayCallCount() int {
	fake.createCustomerGatewayMutex.RLock()
	defer fake.createCustomerGatewayMutex.RUnlock()
	return len(fake.createCustomerGatewayArgsForCall)
}

func (fake *FakeEC2API) CreateCustomerGatewayCalls(stub func(*ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error)) {
	fake.createCustomerGatewayMutex.Lock()
	defer fake.createCustomerGatewayMutex.Unlock()
	fake.CreateCustomerGatewayStub = stub
}

func (fake *FakeEC2API) CreateCustomerGatewayArgsForCall(i int) *ec2.CreateCustomerGatewayInput {
	fake.createCustomerGatewayMutex.RLock()
	defer fake.createCustomerGatewayMutex.RUnlock()
	argsForCall := fake.createCustomerGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateCustomerGatewayReturns(result1 *ec2.CreateCustomerGatewayOutput, result2 error) {
	fake.createCustomerGatewayMutex.Lock()
	defer fake.createCustomerGatewayMutex.Unlock()
	fake.CreateCustomerGatewayStub = nil
	fake.createCustomerGatewayReturns = struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCustomerGatewayReturnsOnCall(i int, result1 *ec2.CreateCustomerGatewayOutput, result2 error) {
	fake.createCustomerGatewayMutex.Lock()
	defer fake.createCustomerGatewayMutex.Unlock()
	fake.CreateCustomerGatewayStub = nil
	if fake.createCustomerGatewayReturnsOnCall == nil {
		fake.createCustomerGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateCustomerGatewayOutput
			result2 error
		})
	}
	fake.createCustomerGatewayReturnsOnCall[i] = struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCustomerGatewayRequest(arg1 *ec2.CreateCustomerGatewayInput) (*request.Request, *ec2.CreateCustomerGatewayOutput) {
	fake.createCustomerGatewayRequestMutex.Lock()
	ret, specificReturn := fake.createCustomerGatewayRequestReturnsOnCall[len(fake.createCustomerGatewayRequestArgsForCall)]
	fake.createCustomerGatewayRequestArgsForCall = append(fake.createCustomerGatewayRequestArgsForCall, struct {
		arg1 *ec2.CreateCustomerGatewayInput
	}{arg1})
	fake.recordInvocation("CreateCustomerGatewayRequest", []interface{}{arg1})
	fake.createCustomerGatewayRequestMutex.Unlock()
	if fake.CreateCustomerGatewayRequestStub != nil {
		return fake.CreateCustomerGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCustomerGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateCustomerGatewayRequestCallCount() int {
	fake.createCustomerGatewayRequestMutex.RLock()
	defer fake.createCustomerGatewayRequestMutex.RUnlock()
	return len(fake.createCustomerGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) CreateCustomerGatewayRequestCalls(stub func(*ec2.CreateCustomerGatewayInput) (*request.Request, *ec2.CreateCustomerGatewayOutput)) {
	fake.createCustomerGatewayRequestMutex.Lock()
	defer fake.createCustomerGatewayRequestMutex.Unlock()
	fake.CreateCustomerGatewayRequestStub = stub
}

func (fake *FakeEC2API) CreateCustomerGatewayRequestArgsForCall(i int) *ec2.CreateCustomerGatewayInput {
	fake.createCustomerGatewayRequestMutex.RLock()
	defer fake.createCustomerGatewayRequestMutex.RUnlock()
	argsForCall := fake.createCustomerGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateCustomerGatewayRequestReturns(result1 *request.Request, result2 *ec2.CreateCustomerGatewayOutput) {
	fake.createCustomerGatewayRequestMutex.Lock()
	defer fake.createCustomerGatewayRequestMutex.Unlock()
	fake.CreateCustomerGatewayRequestStub = nil
	fake.createCustomerGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateCustomerGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCustomerGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateCustomerGatewayOutput) {
	fake.createCustomerGatewayRequestMutex.Lock()
	defer fake.createCustomerGatewayRequestMutex.Unlock()
	fake.CreateCustomerGatewayRequestStub = nil
	if fake.createCustomerGatewayRequestReturnsOnCall == nil {
		fake.createCustomerGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateCustomerGatewayOutput
		})
	}
	fake.createCustomerGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateCustomerGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCustomerGatewayWithContext(arg1 aws.Context, arg2 *ec2.CreateCustomerGatewayInput, arg3 ...request.Option) (*ec2.CreateCustomerGatewayOutput, error) {
	fake.createCustomerGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.createCustomerGatewayWithContextReturnsOnCall[len(fake.createCustomerGatewayWithContextArgsForCall)]
	fake.createCustomerGatewayWithContextArgsForCall = append(fake.createCustomerGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateCustomerGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCustomerGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCustomerGatewayWithContextMutex.Unlock()
	if fake.CreateCustomerGatewayWithContextStub != nil {
		return fake.CreateCustomerGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCustomerGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateCustomerGatewayWithContextCallCount() int {
	fake.createCustomerGatewayWithContextMutex.RLock()
	defer fake.createCustomerGatewayWithContextMutex.RUnlock()
	return len(fake.createCustomerGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateCustomerGatewayWithContextCalls(stub func(aws.Context, *ec2.CreateCustomerGatewayInput, ...request.Option) (*ec2.CreateCustomerGatewayOutput, error)) {
	fake.createCustomerGatewayWithContextMutex.Lock()
	defer fake.createCustomerGatewayWithContextMutex.Unlock()
	fake.CreateCustomerGatewayWithContextStub = stub
}

func (fake *FakeEC2API) CreateCustomerGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.CreateCustomerGatewayInput, []request.Option) {
	fake.createCustomerGatewayWithContextMutex.RLock()
	defer fake.createCustomerGatewayWithContextMutex.RUnlock()
	argsForCall := fake.createCustomerGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateCustomerGatewayWithContextReturns(result1 *ec2.CreateCustomerGatewayOutput, result2 error) {
	fake.createCustomerGatewayWithContextMutex.Lock()
	defer fake.createCustomerGatewayWithContextMutex.Unlock()
	fake.CreateCustomerGatewayWithContextStub = nil
	fake.createCustomerGatewayWithContextReturns = struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateCustomerGatewayWithContextReturnsOnCall(i int, result1 *ec2.CreateCustomerGatewayOutput, result2 error) {
	fake.createCustomerGatewayWithContextMutex.Lock()
	defer fake.createCustomerGatewayWithContextMutex.Unlock()
	fake.CreateCustomerGatewayWithContextStub = nil
	if fake.createCustomerGatewayWithContextReturnsOnCall == nil {
		fake.createCustomerGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateCustomerGatewayOutput
			result2 error
		})
	}
	fake.createCustomerGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultSubnet(arg1 *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error) {
	fake.createDefaultSubnetMutex.Lock()
	ret, specificReturn := fake.createDefaultSubnetReturnsOnCall[len(fake.createDefaultSubnetArgsForCall)]
	fake.createDefaultSubnetArgsForCall = append(fake.createDefaultSubnetArgsForCall, struct {
		arg1 *ec2.CreateDefaultSubnetInput
	}{arg1})
	fake.recordInvocation("CreateDefaultSubnet", []interface{}{arg1})
	fake.createDefaultSubnetMutex.Unlock()
	if fake.CreateDefaultSubnetStub != nil {
		return fake.CreateDefaultSubnetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDefaultSubnetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDefaultSubnetCallCount() int {
	fake.createDefaultSubnetMutex.RLock()
	defer fake.createDefaultSubnetMutex.RUnlock()
	return len(fake.createDefaultSubnetArgsForCall)
}

func (fake *FakeEC2API) CreateDefaultSubnetCalls(stub func(*ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error)) {
	fake.createDefaultSubnetMutex.Lock()
	defer fake.createDefaultSubnetMutex.Unlock()
	fake.CreateDefaultSubnetStub = stub
}

func (fake *FakeEC2API) CreateDefaultSubnetArgsForCall(i int) *ec2.CreateDefaultSubnetInput {
	fake.createDefaultSubnetMutex.RLock()
	defer fake.createDefaultSubnetMutex.RUnlock()
	argsForCall := fake.createDefaultSubnetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateDefaultSubnetReturns(result1 *ec2.CreateDefaultSubnetOutput, result2 error) {
	fake.createDefaultSubnetMutex.Lock()
	defer fake.createDefaultSubnetMutex.Unlock()
	fake.CreateDefaultSubnetStub = nil
	fake.createDefaultSubnetReturns = struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultSubnetReturnsOnCall(i int, result1 *ec2.CreateDefaultSubnetOutput, result2 error) {
	fake.createDefaultSubnetMutex.Lock()
	defer fake.createDefaultSubnetMutex.Unlock()
	fake.CreateDefaultSubnetStub = nil
	if fake.createDefaultSubnetReturnsOnCall == nil {
		fake.createDefaultSubnetReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateDefaultSubnetOutput
			result2 error
		})
	}
	fake.createDefaultSubnetReturnsOnCall[i] = struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultSubnetRequest(arg1 *ec2.CreateDefaultSubnetInput) (*request.Request, *ec2.CreateDefaultSubnetOutput) {
	fake.createDefaultSubnetRequestMutex.Lock()
	ret, specificReturn := fake.createDefaultSubnetRequestReturnsOnCall[len(fake.createDefaultSubnetRequestArgsForCall)]
	fake.createDefaultSubnetRequestArgsForCall = append(fake.createDefaultSubnetRequestArgsForCall, struct {
		arg1 *ec2.CreateDefaultSubnetInput
	}{arg1})
	fake.recordInvocation("CreateDefaultSubnetRequest", []interface{}{arg1})
	fake.createDefaultSubnetRequestMutex.Unlock()
	if fake.CreateDefaultSubnetRequestStub != nil {
		return fake.CreateDefaultSubnetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDefaultSubnetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDefaultSubnetRequestCallCount() int {
	fake.createDefaultSubnetRequestMutex.RLock()
	defer fake.createDefaultSubnetRequestMutex.RUnlock()
	return len(fake.createDefaultSubnetRequestArgsForCall)
}

func (fake *FakeEC2API) CreateDefaultSubnetRequestCalls(stub func(*ec2.CreateDefaultSubnetInput) (*request.Request, *ec2.CreateDefaultSubnetOutput)) {
	fake.createDefaultSubnetRequestMutex.Lock()
	defer fake.createDefaultSubnetRequestMutex.Unlock()
	fake.CreateDefaultSubnetRequestStub = stub
}

func (fake *FakeEC2API) CreateDefaultSubnetRequestArgsForCall(i int) *ec2.CreateDefaultSubnetInput {
	fake.createDefaultSubnetRequestMutex.RLock()
	defer fake.createDefaultSubnetRequestMutex.RUnlock()
	argsForCall := fake.createDefaultSubnetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateDefaultSubnetRequestReturns(result1 *request.Request, result2 *ec2.CreateDefaultSubnetOutput) {
	fake.createDefaultSubnetRequestMutex.Lock()
	defer fake.createDefaultSubnetRequestMutex.Unlock()
	fake.CreateDefaultSubnetRequestStub = nil
	fake.createDefaultSubnetRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultSubnetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultSubnetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateDefaultSubnetOutput) {
	fake.createDefaultSubnetRequestMutex.Lock()
	defer fake.createDefaultSubnetRequestMutex.Unlock()
	fake.CreateDefaultSubnetRequestStub = nil
	if fake.createDefaultSubnetRequestReturnsOnCall == nil {
		fake.createDefaultSubnetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateDefaultSubnetOutput
		})
	}
	fake.createDefaultSubnetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultSubnetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultSubnetWithContext(arg1 aws.Context, arg2 *ec2.CreateDefaultSubnetInput, arg3 ...request.Option) (*ec2.CreateDefaultSubnetOutput, error) {
	fake.createDefaultSubnetWithContextMutex.Lock()
	ret, specificReturn := fake.createDefaultSubnetWithContextReturnsOnCall[len(fake.createDefaultSubnetWithContextArgsForCall)]
	fake.createDefaultSubnetWithContextArgsForCall = append(fake.createDefaultSubnetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateDefaultSubnetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDefaultSubnetWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDefaultSubnetWithContextMutex.Unlock()
	if fake.CreateDefaultSubnetWithContextStub != nil {
		return fake.CreateDefaultSubnetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDefaultSubnetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDefaultSubnetWithContextCallCount() int {
	fake.createDefaultSubnetWithContextMutex.RLock()
	defer fake.createDefaultSubnetWithContextMutex.RUnlock()
	return len(fake.createDefaultSubnetWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateDefaultSubnetWithContextCalls(stub func(aws.Context, *ec2.CreateDefaultSubnetInput, ...request.Option) (*ec2.CreateDefaultSubnetOutput, error)) {
	fake.createDefaultSubnetWithContextMutex.Lock()
	defer fake.createDefaultSubnetWithContextMutex.Unlock()
	fake.CreateDefaultSubnetWithContextStub = stub
}

func (fake *FakeEC2API) CreateDefaultSubnetWithContextArgsForCall(i int) (aws.Context, *ec2.CreateDefaultSubnetInput, []request.Option) {
	fake.createDefaultSubnetWithContextMutex.RLock()
	defer fake.createDefaultSubnetWithContextMutex.RUnlock()
	argsForCall := fake.createDefaultSubnetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateDefaultSubnetWithContextReturns(result1 *ec2.CreateDefaultSubnetOutput, result2 error) {
	fake.createDefaultSubnetWithContextMutex.Lock()
	defer fake.createDefaultSubnetWithContextMutex.Unlock()
	fake.CreateDefaultSubnetWithContextStub = nil
	fake.createDefaultSubnetWithContextReturns = struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultSubnetWithContextReturnsOnCall(i int, result1 *ec2.CreateDefaultSubnetOutput, result2 error) {
	fake.createDefaultSubnetWithContextMutex.Lock()
	defer fake.createDefaultSubnetWithContextMutex.Unlock()
	fake.CreateDefaultSubnetWithContextStub = nil
	if fake.createDefaultSubnetWithContextReturnsOnCall == nil {
		fake.createDefaultSubnetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateDefaultSubnetOutput
			result2 error
		})
	}
	fake.createDefaultSubnetWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateDefaultSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultVpc(arg1 *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
	fake.createDefaultVpcMutex.Lock()
	ret, specificReturn := fake.createDefaultVpcReturnsOnCall[len(fake.createDefaultVpcArgsForCall)]
	fake.createDefaultVpcArgsForCall = append(fake.createDefaultVpcArgsForCall, struct {
		arg1 *ec2.CreateDefaultVpcInput
	}{arg1})
	fake.recordInvocation("CreateDefaultVpc", []interface{}{arg1})
	fake.createDefaultVpcMutex.Unlock()
	if fake.CreateDefaultVpcStub != nil {
		return fake.CreateDefaultVpcStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDefaultVpcReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDefaultVpcCallCount() int {
	fake.createDefaultVpcMutex.RLock()
	defer fake.createDefaultVpcMutex.RUnlock()
	return len(fake.createDefaultVpcArgsForCall)
}

func (fake *FakeEC2API) CreateDefaultVpcCalls(stub func(*ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error)) {
	fake.createDefaultVpcMutex.Lock()
	defer fake.createDefaultVpcMutex.Unlock()
	fake.CreateDefaultVpcStub = stub
}

func (fake *FakeEC2API) CreateDefaultVpcArgsForCall(i int) *ec2.CreateDefaultVpcInput {
	fake.createDefaultVpcMutex.RLock()
	defer fake.createDefaultVpcMutex.RUnlock()
	argsForCall := fake.createDefaultVpcArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateDefaultVpcReturns(result1 *ec2.CreateDefaultVpcOutput, result2 error) {
	fake.createDefaultVpcMutex.Lock()
	defer fake.createDefaultVpcMutex.Unlock()
	fake.CreateDefaultVpcStub = nil
	fake.createDefaultVpcReturns = struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultVpcReturnsOnCall(i int, result1 *ec2.CreateDefaultVpcOutput, result2 error) {
	fake.createDefaultVpcMutex.Lock()
	defer fake.createDefaultVpcMutex.Unlock()
	fake.CreateDefaultVpcStub = nil
	if fake.createDefaultVpcReturnsOnCall == nil {
		fake.createDefaultVpcReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateDefaultVpcOutput
			result2 error
		})
	}
	fake.createDefaultVpcReturnsOnCall[i] = struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultVpcRequest(arg1 *ec2.CreateDefaultVpcInput) (*request.Request, *ec2.CreateDefaultVpcOutput) {
	fake.createDefaultVpcRequestMutex.Lock()
	ret, specificReturn := fake.createDefaultVpcRequestReturnsOnCall[len(fake.createDefaultVpcRequestArgsForCall)]
	fake.createDefaultVpcRequestArgsForCall = append(fake.createDefaultVpcRequestArgsForCall, struct {
		arg1 *ec2.CreateDefaultVpcInput
	}{arg1})
	fake.recordInvocation("CreateDefaultVpcRequest", []interface{}{arg1})
	fake.createDefaultVpcRequestMutex.Unlock()
	if fake.CreateDefaultVpcRequestStub != nil {
		return fake.CreateDefaultVpcRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDefaultVpcRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDefaultVpcRequestCallCount() int {
	fake.createDefaultVpcRequestMutex.RLock()
	defer fake.createDefaultVpcRequestMutex.RUnlock()
	return len(fake.createDefaultVpcRequestArgsForCall)
}

func (fake *FakeEC2API) CreateDefaultVpcRequestCalls(stub func(*ec2.CreateDefaultVpcInput) (*request.Request, *ec2.CreateDefaultVpcOutput)) {
	fake.createDefaultVpcRequestMutex.Lock()
	defer fake.createDefaultVpcRequestMutex.Unlock()
	fake.CreateDefaultVpcRequestStub = stub
}

func (fake *FakeEC2API) CreateDefaultVpcRequestArgsForCall(i int) *ec2.CreateDefaultVpcInput {
	fake.createDefaultVpcRequestMutex.RLock()
	defer fake.createDefaultVpcRequestMutex.RUnlock()
	argsForCall := fake.createDefaultVpcRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateDefaultVpcRequestReturns(result1 *request.Request, result2 *ec2.CreateDefaultVpcOutput) {
	fake.createDefaultVpcRequestMutex.Lock()
	defer fake.createDefaultVpcRequestMutex.Unlock()
	fake.CreateDefaultVpcRequestStub = nil
	fake.createDefaultVpcRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultVpcRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateDefaultVpcOutput) {
	fake.createDefaultVpcRequestMutex.Lock()
	defer fake.createDefaultVpcRequestMutex.Unlock()
	fake.CreateDefaultVpcRequestStub = nil
	if fake.createDefaultVpcRequestReturnsOnCall == nil {
		fake.createDefaultVpcRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateDefaultVpcOutput
		})
	}
	fake.createDefaultVpcRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateDefaultVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultVpcWithContext(arg1 aws.Context, arg2 *ec2.CreateDefaultVpcInput, arg3 ...request.Option) (*ec2.CreateDefaultVpcOutput, error) {
	fake.createDefaultVpcWithContextMutex.Lock()
	ret, specificReturn := fake.createDefaultVpcWithContextReturnsOnCall[len(fake.createDefaultVpcWithContextArgsForCall)]
	fake.createDefaultVpcWithContextArgsForCall = append(fake.createDefaultVpcWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateDefaultVpcInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDefaultVpcWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDefaultVpcWithContextMutex.Unlock()
	if fake.CreateDefaultVpcWithContextStub != nil {
		return fake.CreateDefaultVpcWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDefaultVpcWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDefaultVpcWithContextCallCount() int {
	fake.createDefaultVpcWithContextMutex.RLock()
	defer fake.createDefaultVpcWithContextMutex.RUnlock()
	return len(fake.createDefaultVpcWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateDefaultVpcWithContextCalls(stub func(aws.Context, *ec2.CreateDefaultVpcInput, ...request.Option) (*ec2.CreateDefaultVpcOutput, error)) {
	fake.createDefaultVpcWithContextMutex.Lock()
	defer fake.createDefaultVpcWithContextMutex.Unlock()
	fake.CreateDefaultVpcWithContextStub = stub
}

func (fake *FakeEC2API) CreateDefaultVpcWithContextArgsForCall(i int) (aws.Context, *ec2.CreateDefaultVpcInput, []request.Option) {
	fake.createDefaultVpcWithContextMutex.RLock()
	defer fake.createDefaultVpcWithContextMutex.RUnlock()
	argsForCall := fake.createDefaultVpcWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateDefaultVpcWithContextReturns(result1 *ec2.CreateDefaultVpcOutput, result2 error) {
	fake.createDefaultVpcWithContextMutex.Lock()
	defer fake.createDefaultVpcWithContextMutex.Unlock()
	fake.CreateDefaultVpcWithContextStub = nil
	fake.createDefaultVpcWithContextReturns = struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDefaultVpcWithContextReturnsOnCall(i int, result1 *ec2.CreateDefaultVpcOutput, result2 error) {
	fake.createDefaultVpcWithContextMutex.Lock()
	defer fake.createDefaultVpcWithContextMutex.Unlock()
	fake.CreateDefaultVpcWithContextStub = nil
	if fake.createDefaultVpcWithContextReturnsOnCall == nil {
		fake.createDefaultVpcWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateDefaultVpcOutput
			result2 error
		})
	}
	fake.createDefaultVpcWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateDefaultVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDhcpOptions(arg1 *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
	fake.createDhcpOptionsMutex.Lock()
	ret, specificReturn := fake.createDhcpOptionsReturnsOnCall[len(fake.createDhcpOptionsArgsForCall)]
	fake.createDhcpOptionsArgsForCall = append(fake.createDhcpOptionsArgsForCall, struct {
		arg1 *ec2.CreateDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("CreateDhcpOptions", []interface{}{arg1})
	fake.createDhcpOptionsMutex.Unlock()
	if fake.CreateDhcpOptionsStub != nil {
		return fake.CreateDhcpOptionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDhcpOptionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDhcpOptionsCallCount() int {
	fake.createDhcpOptionsMutex.RLock()
	defer fake.createDhcpOptionsMutex.RUnlock()
	return len(fake.createDhcpOptionsArgsForCall)
}

func (fake *FakeEC2API) CreateDhcpOptionsCalls(stub func(*ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error)) {
	fake.createDhcpOptionsMutex.Lock()
	defer fake.createDhcpOptionsMutex.Unlock()
	fake.CreateDhcpOptionsStub = stub
}

func (fake *FakeEC2API) CreateDhcpOptionsArgsForCall(i int) *ec2.CreateDhcpOptionsInput {
	fake.createDhcpOptionsMutex.RLock()
	defer fake.createDhcpOptionsMutex.RUnlock()
	argsForCall := fake.createDhcpOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateDhcpOptionsReturns(result1 *ec2.CreateDhcpOptionsOutput, result2 error) {
	fake.createDhcpOptionsMutex.Lock()
	defer fake.createDhcpOptionsMutex.Unlock()
	fake.CreateDhcpOptionsStub = nil
	fake.createDhcpOptionsReturns = struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDhcpOptionsReturnsOnCall(i int, result1 *ec2.CreateDhcpOptionsOutput, result2 error) {
	fake.createDhcpOptionsMutex.Lock()
	defer fake.createDhcpOptionsMutex.Unlock()
	fake.CreateDhcpOptionsStub = nil
	if fake.createDhcpOptionsReturnsOnCall == nil {
		fake.createDhcpOptionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateDhcpOptionsOutput
			result2 error
		})
	}
	fake.createDhcpOptionsReturnsOnCall[i] = struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDhcpOptionsRequest(arg1 *ec2.CreateDhcpOptionsInput) (*request.Request, *ec2.CreateDhcpOptionsOutput) {
	fake.createDhcpOptionsRequestMutex.Lock()
	ret, specificReturn := fake.createDhcpOptionsRequestReturnsOnCall[len(fake.createDhcpOptionsRequestArgsForCall)]
	fake.createDhcpOptionsRequestArgsForCall = append(fake.createDhcpOptionsRequestArgsForCall, struct {
		arg1 *ec2.CreateDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("CreateDhcpOptionsRequest", []interface{}{arg1})
	fake.createDhcpOptionsRequestMutex.Unlock()
	if fake.CreateDhcpOptionsRequestStub != nil {
		return fake.CreateDhcpOptionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDhcpOptionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDhcpOptionsRequestCallCount() int {
	fake.createDhcpOptionsRequestMutex.RLock()
	defer fake.createDhcpOptionsRequestMutex.RUnlock()
	return len(fake.createDhcpOptionsRequestArgsForCall)
}

func (fake *FakeEC2API) CreateDhcpOptionsRequestCalls(stub func(*ec2.CreateDhcpOptionsInput) (*request.Request, *ec2.CreateDhcpOptionsOutput)) {
	fake.createDhcpOptionsRequestMutex.Lock()
	defer fake.createDhcpOptionsRequestMutex.Unlock()
	fake.CreateDhcpOptionsRequestStub = stub
}

func (fake *FakeEC2API) CreateDhcpOptionsRequestArgsForCall(i int) *ec2.CreateDhcpOptionsInput {
	fake.createDhcpOptionsRequestMutex.RLock()
	defer fake.createDhcpOptionsRequestMutex.RUnlock()
	argsForCall := fake.createDhcpOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateDhcpOptionsRequestReturns(result1 *request.Request, result2 *ec2.CreateDhcpOptionsOutput) {
	fake.createDhcpOptionsRequestMutex.Lock()
	defer fake.createDhcpOptionsRequestMutex.Unlock()
	fake.CreateDhcpOptionsRequestStub = nil
	fake.createDhcpOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDhcpOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateDhcpOptionsOutput) {
	fake.createDhcpOptionsRequestMutex.Lock()
	defer fake.createDhcpOptionsRequestMutex.Unlock()
	fake.CreateDhcpOptionsRequestStub = nil
	if fake.createDhcpOptionsRequestReturnsOnCall == nil {
		fake.createDhcpOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateDhcpOptionsOutput
		})
	}
	fake.createDhcpOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDhcpOptionsWithContext(arg1 aws.Context, arg2 *ec2.CreateDhcpOptionsInput, arg3 ...request.Option) (*ec2.CreateDhcpOptionsOutput, error) {
	fake.createDhcpOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.createDhcpOptionsWithContextReturnsOnCall[len(fake.createDhcpOptionsWithContextArgsForCall)]
	fake.createDhcpOptionsWithContextArgsForCall = append(fake.createDhcpOptionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateDhcpOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDhcpOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDhcpOptionsWithContextMutex.Unlock()
	if fake.CreateDhcpOptionsWithContextStub != nil {
		return fake.CreateDhcpOptionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDhcpOptionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateDhcpOptionsWithContextCallCount() int {
	fake.createDhcpOptionsWithContextMutex.RLock()
	defer fake.createDhcpOptionsWithContextMutex.RUnlock()
	return len(fake.createDhcpOptionsWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateDhcpOptionsWithContextCalls(stub func(aws.Context, *ec2.CreateDhcpOptionsInput, ...request.Option) (*ec2.CreateDhcpOptionsOutput, error)) {
	fake.createDhcpOptionsWithContextMutex.Lock()
	defer fake.createDhcpOptionsWithContextMutex.Unlock()
	fake.CreateDhcpOptionsWithContextStub = stub
}

func (fake *FakeEC2API) CreateDhcpOptionsWithContextArgsForCall(i int) (aws.Context, *ec2.CreateDhcpOptionsInput, []request.Option) {
	fake.createDhcpOptionsWithContextMutex.RLock()
	defer fake.createDhcpOptionsWithContextMutex.RUnlock()
	argsForCall := fake.createDhcpOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateDhcpOptionsWithContextReturns(result1 *ec2.CreateDhcpOptionsOutput, result2 error) {
	fake.createDhcpOptionsWithContextMutex.Lock()
	defer fake.createDhcpOptionsWithContextMutex.Unlock()
	fake.CreateDhcpOptionsWithContextStub = nil
	fake.createDhcpOptionsWithContextReturns = struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateDhcpOptionsWithContextReturnsOnCall(i int, result1 *ec2.CreateDhcpOptionsOutput, result2 error) {
	fake.createDhcpOptionsWithContextMutex.Lock()
	defer fake.createDhcpOptionsWithContextMutex.Unlock()
	fake.CreateDhcpOptionsWithContextStub = nil
	if fake.createDhcpOptionsWithContextReturnsOnCall == nil {
		fake.createDhcpOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateDhcpOptionsOutput
			result2 error
		})
	}
	fake.createDhcpOptionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGateway(arg1 *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	fake.createEgressOnlyInternetGatewayMutex.Lock()
	ret, specificReturn := fake.createEgressOnlyInternetGatewayReturnsOnCall[len(fake.createEgressOnlyInternetGatewayArgsForCall)]
	fake.createEgressOnlyInternetGatewayArgsForCall = append(fake.createEgressOnlyInternetGatewayArgsForCall, struct {
		arg1 *ec2.CreateEgressOnlyInternetGatewayInput
	}{arg1})
	fake.recordInvocation("CreateEgressOnlyInternetGateway", []interface{}{arg1})
	fake.createEgressOnlyInternetGatewayMutex.Unlock()
	if fake.CreateEgressOnlyInternetGatewayStub != nil {
		return fake.CreateEgressOnlyInternetGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createEgressOnlyInternetGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayCallCount() int {
	fake.createEgressOnlyInternetGatewayMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayMutex.RUnlock()
	return len(fake.createEgressOnlyInternetGatewayArgsForCall)
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayCalls(stub func(*ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)) {
	fake.createEgressOnlyInternetGatewayMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayStub = stub
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayArgsForCall(i int) *ec2.CreateEgressOnlyInternetGatewayInput {
	fake.createEgressOnlyInternetGatewayMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayMutex.RUnlock()
	argsForCall := fake.createEgressOnlyInternetGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayReturns(result1 *ec2.CreateEgressOnlyInternetGatewayOutput, result2 error) {
	fake.createEgressOnlyInternetGatewayMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayStub = nil
	fake.createEgressOnlyInternetGatewayReturns = struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayReturnsOnCall(i int, result1 *ec2.CreateEgressOnlyInternetGatewayOutput, result2 error) {
	fake.createEgressOnlyInternetGatewayMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayStub = nil
	if fake.createEgressOnlyInternetGatewayReturnsOnCall == nil {
		fake.createEgressOnlyInternetGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateEgressOnlyInternetGatewayOutput
			result2 error
		})
	}
	fake.createEgressOnlyInternetGatewayReturnsOnCall[i] = struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayRequest(arg1 *ec2.CreateEgressOnlyInternetGatewayInput) (*request.Request, *ec2.CreateEgressOnlyInternetGatewayOutput) {
	fake.createEgressOnlyInternetGatewayRequestMutex.Lock()
	ret, specificReturn := fake.createEgressOnlyInternetGatewayRequestReturnsOnCall[len(fake.createEgressOnlyInternetGatewayRequestArgsForCall)]
	fake.createEgressOnlyInternetGatewayRequestArgsForCall = append(fake.createEgressOnlyInternetGatewayRequestArgsForCall, struct {
		arg1 *ec2.CreateEgressOnlyInternetGatewayInput
	}{arg1})
	fake.recordInvocation("CreateEgressOnlyInternetGatewayRequest", []interface{}{arg1})
	fake.createEgressOnlyInternetGatewayRequestMutex.Unlock()
	if fake.CreateEgressOnlyInternetGatewayRequestStub != nil {
		return fake.CreateEgressOnlyInternetGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createEgressOnlyInternetGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayRequestCallCount() int {
	fake.createEgressOnlyInternetGatewayRequestMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayRequestMutex.RUnlock()
	return len(fake.createEgressOnlyInternetGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayRequestCalls(stub func(*ec2.CreateEgressOnlyInternetGatewayInput) (*request.Request, *ec2.CreateEgressOnlyInternetGatewayOutput)) {
	fake.createEgressOnlyInternetGatewayRequestMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayRequestMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayRequestStub = stub
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayRequestArgsForCall(i int) *ec2.CreateEgressOnlyInternetGatewayInput {
	fake.createEgressOnlyInternetGatewayRequestMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayRequestMutex.RUnlock()
	argsForCall := fake.createEgressOnlyInternetGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayRequestReturns(result1 *request.Request, result2 *ec2.CreateEgressOnlyInternetGatewayOutput) {
	fake.createEgressOnlyInternetGatewayRequestMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayRequestMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayRequestStub = nil
	fake.createEgressOnlyInternetGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateEgressOnlyInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateEgressOnlyInternetGatewayOutput) {
	fake.createEgressOnlyInternetGatewayRequestMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayRequestMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayRequestStub = nil
	if fake.createEgressOnlyInternetGatewayRequestReturnsOnCall == nil {
		fake.createEgressOnlyInternetGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateEgressOnlyInternetGatewayOutput
		})
	}
	fake.createEgressOnlyInternetGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateEgressOnlyInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayWithContext(arg1 aws.Context, arg2 *ec2.CreateEgressOnlyInternetGatewayInput, arg3 ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	fake.createEgressOnlyInternetGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.createEgressOnlyInternetGatewayWithContextReturnsOnCall[len(fake.createEgressOnlyInternetGatewayWithContextArgsForCall)]
	fake.createEgressOnlyInternetGatewayWithContextArgsForCall = append(fake.createEgressOnlyInternetGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateEgressOnlyInternetGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateEgressOnlyInternetGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.createEgressOnlyInternetGatewayWithContextMutex.Unlock()
	if fake.CreateEgressOnlyInternetGatewayWithContextStub != nil {
		return fake.CreateEgressOnlyInternetGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createEgressOnlyInternetGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayWithContextCallCount() int {
	fake.createEgressOnlyInternetGatewayWithContextMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayWithContextMutex.RUnlock()
	return len(fake.createEgressOnlyInternetGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayWithContextCalls(stub func(aws.Context, *ec2.CreateEgressOnlyInternetGatewayInput, ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)) {
	fake.createEgressOnlyInternetGatewayWithContextMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayWithContextMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayWithContextStub = stub
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.CreateEgressOnlyInternetGatewayInput, []request.Option) {
	fake.createEgressOnlyInternetGatewayWithContextMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayWithContextMutex.RUnlock()
	argsForCall := fake.createEgressOnlyInternetGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayWithContextReturns(result1 *ec2.CreateEgressOnlyInternetGatewayOutput, result2 error) {
	fake.createEgressOnlyInternetGatewayWithContextMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayWithContextMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayWithContextStub = nil
	fake.createEgressOnlyInternetGatewayWithContextReturns = struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateEgressOnlyInternetGatewayWithContextReturnsOnCall(i int, result1 *ec2.CreateEgressOnlyInternetGatewayOutput, result2 error) {
	fake.createEgressOnlyInternetGatewayWithContextMutex.Lock()
	defer fake.createEgressOnlyInternetGatewayWithContextMutex.Unlock()
	fake.CreateEgressOnlyInternetGatewayWithContextStub = nil
	if fake.createEgressOnlyInternetGatewayWithContextReturnsOnCall == nil {
		fake.createEgressOnlyInternetGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateEgressOnlyInternetGatewayOutput
			result2 error
		})
	}
	fake.createEgressOnlyInternetGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFleet(arg1 *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error) {
	fake.createFleetMutex.Lock()
	ret, specificReturn := fake.createFleetReturnsOnCall[len(fake.createFleetArgsForCall)]
	fake.createFleetArgsForCall = append(fake.createFleetArgsForCall, struct {
		arg1 *ec2.CreateFleetInput
	}{arg1})
	fake.recordInvocation("CreateFleet", []interface{}{arg1})
	fake.createFleetMutex.Unlock()
	if fake.CreateFleetStub != nil {
		return fake.CreateFleetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFleetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFleetCallCount() int {
	fake.createFleetMutex.RLock()
	defer fake.createFleetMutex.RUnlock()
	return len(fake.createFleetArgsForCall)
}

func (fake *FakeEC2API) CreateFleetCalls(stub func(*ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error)) {
	fake.createFleetMutex.Lock()
	defer fake.createFleetMutex.Unlock()
	fake.CreateFleetStub = stub
}

func (fake *FakeEC2API) CreateFleetArgsForCall(i int) *ec2.CreateFleetInput {
	fake.createFleetMutex.RLock()
	defer fake.createFleetMutex.RUnlock()
	argsForCall := fake.createFleetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateFleetReturns(result1 *ec2.CreateFleetOutput, result2 error) {
	fake.createFleetMutex.Lock()
	defer fake.createFleetMutex.Unlock()
	fake.CreateFleetStub = nil
	fake.createFleetReturns = struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFleetReturnsOnCall(i int, result1 *ec2.CreateFleetOutput, result2 error) {
	fake.createFleetMutex.Lock()
	defer fake.createFleetMutex.Unlock()
	fake.CreateFleetStub = nil
	if fake.createFleetReturnsOnCall == nil {
		fake.createFleetReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateFleetOutput
			result2 error
		})
	}
	fake.createFleetReturnsOnCall[i] = struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFleetRequest(arg1 *ec2.CreateFleetInput) (*request.Request, *ec2.CreateFleetOutput) {
	fake.createFleetRequestMutex.Lock()
	ret, specificReturn := fake.createFleetRequestReturnsOnCall[len(fake.createFleetRequestArgsForCall)]
	fake.createFleetRequestArgsForCall = append(fake.createFleetRequestArgsForCall, struct {
		arg1 *ec2.CreateFleetInput
	}{arg1})
	fake.recordInvocation("CreateFleetRequest", []interface{}{arg1})
	fake.createFleetRequestMutex.Unlock()
	if fake.CreateFleetRequestStub != nil {
		return fake.CreateFleetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFleetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFleetRequestCallCount() int {
	fake.createFleetRequestMutex.RLock()
	defer fake.createFleetRequestMutex.RUnlock()
	return len(fake.createFleetRequestArgsForCall)
}

func (fake *FakeEC2API) CreateFleetRequestCalls(stub func(*ec2.CreateFleetInput) (*request.Request, *ec2.CreateFleetOutput)) {
	fake.createFleetRequestMutex.Lock()
	defer fake.createFleetRequestMutex.Unlock()
	fake.CreateFleetRequestStub = stub
}

func (fake *FakeEC2API) CreateFleetRequestArgsForCall(i int) *ec2.CreateFleetInput {
	fake.createFleetRequestMutex.RLock()
	defer fake.createFleetRequestMutex.RUnlock()
	argsForCall := fake.createFleetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateFleetRequestReturns(result1 *request.Request, result2 *ec2.CreateFleetOutput) {
	fake.createFleetRequestMutex.Lock()
	defer fake.createFleetRequestMutex.Unlock()
	fake.CreateFleetRequestStub = nil
	fake.createFleetRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateFleetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFleetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateFleetOutput) {
	fake.createFleetRequestMutex.Lock()
	defer fake.createFleetRequestMutex.Unlock()
	fake.CreateFleetRequestStub = nil
	if fake.createFleetRequestReturnsOnCall == nil {
		fake.createFleetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateFleetOutput
		})
	}
	fake.createFleetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateFleetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFleetWithContext(arg1 aws.Context, arg2 *ec2.CreateFleetInput, arg3 ...request.Option) (*ec2.CreateFleetOutput, error) {
	fake.createFleetWithContextMutex.Lock()
	ret, specificReturn := fake.createFleetWithContextReturnsOnCall[len(fake.createFleetWithContextArgsForCall)]
	fake.createFleetWithContextArgsForCall = append(fake.createFleetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateFleetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateFleetWithContext", []interface{}{arg1, arg2, arg3})
	fake.createFleetWithContextMutex.Unlock()
	if fake.CreateFleetWithContextStub != nil {
		return fake.CreateFleetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFleetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFleetWithContextCallCount() int {
	fake.createFleetWithContextMutex.RLock()
	defer fake.createFleetWithContextMutex.RUnlock()
	return len(fake.createFleetWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateFleetWithContextCalls(stub func(aws.Context, *ec2.CreateFleetInput, ...request.Option) (*ec2.CreateFleetOutput, error)) {
	fake.createFleetWithContextMutex.Lock()
	defer fake.createFleetWithContextMutex.Unlock()
	fake.CreateFleetWithContextStub = stub
}

func (fake *FakeEC2API) CreateFleetWithContextArgsForCall(i int) (aws.Context, *ec2.CreateFleetInput, []request.Option) {
	fake.createFleetWithContextMutex.RLock()
	defer fake.createFleetWithContextMutex.RUnlock()
	argsForCall := fake.createFleetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateFleetWithContextReturns(result1 *ec2.CreateFleetOutput, result2 error) {
	fake.createFleetWithContextMutex.Lock()
	defer fake.createFleetWithContextMutex.Unlock()
	fake.CreateFleetWithContextStub = nil
	fake.createFleetWithContextReturns = struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFleetWithContextReturnsOnCall(i int, result1 *ec2.CreateFleetOutput, result2 error) {
	fake.createFleetWithContextMutex.Lock()
	defer fake.createFleetWithContextMutex.Unlock()
	fake.CreateFleetWithContextStub = nil
	if fake.createFleetWithContextReturnsOnCall == nil {
		fake.createFleetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateFleetOutput
			result2 error
		})
	}
	fake.createFleetWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFlowLogs(arg1 *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	fake.createFlowLogsMutex.Lock()
	ret, specificReturn := fake.createFlowLogsReturnsOnCall[len(fake.createFlowLogsArgsForCall)]
	fake.createFlowLogsArgsForCall = append(fake.createFlowLogsArgsForCall, struct {
		arg1 *ec2.CreateFlowLogsInput
	}{arg1})
	fake.recordInvocation("CreateFlowLogs", []interface{}{arg1})
	fake.createFlowLogsMutex.Unlock()
	if fake.CreateFlowLogsStub != nil {
		return fake.CreateFlowLogsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFlowLogsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFlowLogsCallCount() int {
	fake.createFlowLogsMutex.RLock()
	defer fake.createFlowLogsMutex.RUnlock()
	return len(fake.createFlowLogsArgsForCall)
}

func (fake *FakeEC2API) CreateFlowLogsCalls(stub func(*ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error)) {
	fake.createFlowLogsMutex.Lock()
	defer fake.createFlowLogsMutex.Unlock()
	fake.CreateFlowLogsStub = stub
}

func (fake *FakeEC2API) CreateFlowLogsArgsForCall(i int) *ec2.CreateFlowLogsInput {
	fake.createFlowLogsMutex.RLock()
	defer fake.createFlowLogsMutex.RUnlock()
	argsForCall := fake.createFlowLogsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateFlowLogsReturns(result1 *ec2.CreateFlowLogsOutput, result2 error) {
	fake.createFlowLogsMutex.Lock()
	defer fake.createFlowLogsMutex.Unlock()
	fake.CreateFlowLogsStub = nil
	fake.createFlowLogsReturns = struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFlowLogsReturnsOnCall(i int, result1 *ec2.CreateFlowLogsOutput, result2 error) {
	fake.createFlowLogsMutex.Lock()
	defer fake.createFlowLogsMutex.Unlock()
	fake.CreateFlowLogsStub = nil
	if fake.createFlowLogsReturnsOnCall == nil {
		fake.createFlowLogsReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateFlowLogsOutput
			result2 error
		})
	}
	fake.createFlowLogsReturnsOnCall[i] = struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFlowLogsRequest(arg1 *ec2.CreateFlowLogsInput) (*request.Request, *ec2.CreateFlowLogsOutput) {
	fake.createFlowLogsRequestMutex.Lock()
	ret, specificReturn := fake.createFlowLogsRequestReturnsOnCall[len(fake.createFlowLogsRequestArgsForCall)]
	fake.createFlowLogsRequestArgsForCall = append(fake.createFlowLogsRequestArgsForCall, struct {
		arg1 *ec2.CreateFlowLogsInput
	}{arg1})
	fake.recordInvocation("CreateFlowLogsRequest", []interface{}{arg1})
	fake.createFlowLogsRequestMutex.Unlock()
	if fake.CreateFlowLogsRequestStub != nil {
		return fake.CreateFlowLogsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFlowLogsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFlowLogsRequestCallCount() int {
	fake.createFlowLogsRequestMutex.RLock()
	defer fake.createFlowLogsRequestMutex.RUnlock()
	return len(fake.createFlowLogsRequestArgsForCall)
}

func (fake *FakeEC2API) CreateFlowLogsRequestCalls(stub func(*ec2.CreateFlowLogsInput) (*request.Request, *ec2.CreateFlowLogsOutput)) {
	fake.createFlowLogsRequestMutex.Lock()
	defer fake.createFlowLogsRequestMutex.Unlock()
	fake.CreateFlowLogsRequestStub = stub
}

func (fake *FakeEC2API) CreateFlowLogsRequestArgsForCall(i int) *ec2.CreateFlowLogsInput {
	fake.createFlowLogsRequestMutex.RLock()
	defer fake.createFlowLogsRequestMutex.RUnlock()
	argsForCall := fake.createFlowLogsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateFlowLogsRequestReturns(result1 *request.Request, result2 *ec2.CreateFlowLogsOutput) {
	fake.createFlowLogsRequestMutex.Lock()
	defer fake.createFlowLogsRequestMutex.Unlock()
	fake.CreateFlowLogsRequestStub = nil
	fake.createFlowLogsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateFlowLogsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFlowLogsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateFlowLogsOutput) {
	fake.createFlowLogsRequestMutex.Lock()
	defer fake.createFlowLogsRequestMutex.Unlock()
	fake.CreateFlowLogsRequestStub = nil
	if fake.createFlowLogsRequestReturnsOnCall == nil {
		fake.createFlowLogsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateFlowLogsOutput
		})
	}
	fake.createFlowLogsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateFlowLogsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFlowLogsWithContext(arg1 aws.Context, arg2 *ec2.CreateFlowLogsInput, arg3 ...request.Option) (*ec2.CreateFlowLogsOutput, error) {
	fake.createFlowLogsWithContextMutex.Lock()
	ret, specificReturn := fake.createFlowLogsWithContextReturnsOnCall[len(fake.createFlowLogsWithContextArgsForCall)]
	fake.createFlowLogsWithContextArgsForCall = append(fake.createFlowLogsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateFlowLogsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateFlowLogsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createFlowLogsWithContextMutex.Unlock()
	if fake.CreateFlowLogsWithContextStub != nil {
		return fake.CreateFlowLogsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFlowLogsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFlowLogsWithContextCallCount() int {
	fake.createFlowLogsWithContextMutex.RLock()
	defer fake.createFlowLogsWithContextMutex.RUnlock()
	return len(fake.createFlowLogsWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateFlowLogsWithContextCalls(stub func(aws.Context, *ec2.CreateFlowLogsInput, ...request.Option) (*ec2.CreateFlowLogsOutput, error)) {
	fake.createFlowLogsWithContextMutex.Lock()
	defer fake.createFlowLogsWithContextMutex.Unlock()
	fake.CreateFlowLogsWithContextStub = stub
}

func (fake *FakeEC2API) CreateFlowLogsWithContextArgsForCall(i int) (aws.Context, *ec2.CreateFlowLogsInput, []request.Option) {
	fake.createFlowLogsWithContextMutex.RLock()
	defer fake.createFlowLogsWithContextMutex.RUnlock()
	argsForCall := fake.createFlowLogsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateFlowLogsWithContextReturns(result1 *ec2.CreateFlowLogsOutput, result2 error) {
	fake.createFlowLogsWithContextMutex.Lock()
	defer fake.createFlowLogsWithContextMutex.Unlock()
	fake.CreateFlowLogsWithContextStub = nil
	fake.createFlowLogsWithContextReturns = struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFlowLogsWithContextReturnsOnCall(i int, result1 *ec2.CreateFlowLogsOutput, result2 error) {
	fake.createFlowLogsWithContextMutex.Lock()
	defer fake.createFlowLogsWithContextMutex.Unlock()
	fake.CreateFlowLogsWithContextStub = nil
	if fake.createFlowLogsWithContextReturnsOnCall == nil {
		fake.createFlowLogsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateFlowLogsOutput
			result2 error
		})
	}
	fake.createFlowLogsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFpgaImage(arg1 *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
	fake.createFpgaImageMutex.Lock()
	ret, specificReturn := fake.createFpgaImageReturnsOnCall[len(fake.createFpgaImageArgsForCall)]
	fake.createFpgaImageArgsForCall = append(fake.createFpgaImageArgsForCall, struct {
		arg1 *ec2.CreateFpgaImageInput
	}{arg1})
	fake.recordInvocation("CreateFpgaImage", []interface{}{arg1})
	fake.createFpgaImageMutex.Unlock()
	if fake.CreateFpgaImageStub != nil {
		return fake.CreateFpgaImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFpgaImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFpgaImageCallCount() int {
	fake.createFpgaImageMutex.RLock()
	defer fake.createFpgaImageMutex.RUnlock()
	return len(fake.createFpgaImageArgsForCall)
}

func (fake *FakeEC2API) CreateFpgaImageCalls(stub func(*ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error)) {
	fake.createFpgaImageMutex.Lock()
	defer fake.createFpgaImageMutex.Unlock()
	fake.CreateFpgaImageStub = stub
}

func (fake *FakeEC2API) CreateFpgaImageArgsForCall(i int) *ec2.CreateFpgaImageInput {
	fake.createFpgaImageMutex.RLock()
	defer fake.createFpgaImageMutex.RUnlock()
	argsForCall := fake.createFpgaImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateFpgaImageReturns(result1 *ec2.CreateFpgaImageOutput, result2 error) {
	fake.createFpgaImageMutex.Lock()
	defer fake.createFpgaImageMutex.Unlock()
	fake.CreateFpgaImageStub = nil
	fake.createFpgaImageReturns = struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFpgaImageReturnsOnCall(i int, result1 *ec2.CreateFpgaImageOutput, result2 error) {
	fake.createFpgaImageMutex.Lock()
	defer fake.createFpgaImageMutex.Unlock()
	fake.CreateFpgaImageStub = nil
	if fake.createFpgaImageReturnsOnCall == nil {
		fake.createFpgaImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateFpgaImageOutput
			result2 error
		})
	}
	fake.createFpgaImageReturnsOnCall[i] = struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFpgaImageRequest(arg1 *ec2.CreateFpgaImageInput) (*request.Request, *ec2.CreateFpgaImageOutput) {
	fake.createFpgaImageRequestMutex.Lock()
	ret, specificReturn := fake.createFpgaImageRequestReturnsOnCall[len(fake.createFpgaImageRequestArgsForCall)]
	fake.createFpgaImageRequestArgsForCall = append(fake.createFpgaImageRequestArgsForCall, struct {
		arg1 *ec2.CreateFpgaImageInput
	}{arg1})
	fake.recordInvocation("CreateFpgaImageRequest", []interface{}{arg1})
	fake.createFpgaImageRequestMutex.Unlock()
	if fake.CreateFpgaImageRequestStub != nil {
		return fake.CreateFpgaImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFpgaImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFpgaImageRequestCallCount() int {
	fake.createFpgaImageRequestMutex.RLock()
	defer fake.createFpgaImageRequestMutex.RUnlock()
	return len(fake.createFpgaImageRequestArgsForCall)
}

func (fake *FakeEC2API) CreateFpgaImageRequestCalls(stub func(*ec2.CreateFpgaImageInput) (*request.Request, *ec2.CreateFpgaImageOutput)) {
	fake.createFpgaImageRequestMutex.Lock()
	defer fake.createFpgaImageRequestMutex.Unlock()
	fake.CreateFpgaImageRequestStub = stub
}

func (fake *FakeEC2API) CreateFpgaImageRequestArgsForCall(i int) *ec2.CreateFpgaImageInput {
	fake.createFpgaImageRequestMutex.RLock()
	defer fake.createFpgaImageRequestMutex.RUnlock()
	argsForCall := fake.createFpgaImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateFpgaImageRequestReturns(result1 *request.Request, result2 *ec2.CreateFpgaImageOutput) {
	fake.createFpgaImageRequestMutex.Lock()
	defer fake.createFpgaImageRequestMutex.Unlock()
	fake.CreateFpgaImageRequestStub = nil
	fake.createFpgaImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateFpgaImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFpgaImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateFpgaImageOutput) {
	fake.createFpgaImageRequestMutex.Lock()
	defer fake.createFpgaImageRequestMutex.Unlock()
	fake.CreateFpgaImageRequestStub = nil
	if fake.createFpgaImageRequestReturnsOnCall == nil {
		fake.createFpgaImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateFpgaImageOutput
		})
	}
	fake.createFpgaImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateFpgaImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFpgaImageWithContext(arg1 aws.Context, arg2 *ec2.CreateFpgaImageInput, arg3 ...request.Option) (*ec2.CreateFpgaImageOutput, error) {
	fake.createFpgaImageWithContextMutex.Lock()
	ret, specificReturn := fake.createFpgaImageWithContextReturnsOnCall[len(fake.createFpgaImageWithContextArgsForCall)]
	fake.createFpgaImageWithContextArgsForCall = append(fake.createFpgaImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateFpgaImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateFpgaImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.createFpgaImageWithContextMutex.Unlock()
	if fake.CreateFpgaImageWithContextStub != nil {
		return fake.CreateFpgaImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createFpgaImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateFpgaImageWithContextCallCount() int {
	fake.createFpgaImageWithContextMutex.RLock()
	defer fake.createFpgaImageWithContextMutex.RUnlock()
	return len(fake.createFpgaImageWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateFpgaImageWithContextCalls(stub func(aws.Context, *ec2.CreateFpgaImageInput, ...request.Option) (*ec2.CreateFpgaImageOutput, error)) {
	fake.createFpgaImageWithContextMutex.Lock()
	defer fake.createFpgaImageWithContextMutex.Unlock()
	fake.CreateFpgaImageWithContextStub = stub
}

func (fake *FakeEC2API) CreateFpgaImageWithContextArgsForCall(i int) (aws.Context, *ec2.CreateFpgaImageInput, []request.Option) {
	fake.createFpgaImageWithContextMutex.RLock()
	defer fake.createFpgaImageWithContextMutex.RUnlock()
	argsForCall := fake.createFpgaImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateFpgaImageWithContextReturns(result1 *ec2.CreateFpgaImageOutput, result2 error) {
	fake.createFpgaImageWithContextMutex.Lock()
	defer fake.createFpgaImageWithContextMutex.Unlock()
	fake.CreateFpgaImageWithContextStub = nil
	fake.createFpgaImageWithContextReturns = struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateFpgaImageWithContextReturnsOnCall(i int, result1 *ec2.CreateFpgaImageOutput, result2 error) {
	fake.createFpgaImageWithContextMutex.Lock()
	defer fake.createFpgaImageWithContextMutex.Unlock()
	fake.CreateFpgaImageWithContextStub = nil
	if fake.createFpgaImageWithContextReturnsOnCall == nil {
		fake.createFpgaImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateFpgaImageOutput
			result2 error
		})
	}
	fake.createFpgaImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateImage(arg1 *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	fake.createImageMutex.Lock()
	ret, specificReturn := fake.createImageReturnsOnCall[len(fake.createImageArgsForCall)]
	fake.createImageArgsForCall = append(fake.createImageArgsForCall, struct {
		arg1 *ec2.CreateImageInput
	}{arg1})
	fake.recordInvocation("CreateImage", []interface{}{arg1})
	fake.createImageMutex.Unlock()
	if fake.CreateImageStub != nil {
		return fake.CreateImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateImageCallCount() int {
	fake.createImageMutex.RLock()
	defer fake.createImageMutex.RUnlock()
	return len(fake.createImageArgsForCall)
}

func (fake *FakeEC2API) CreateImageCalls(stub func(*ec2.CreateImageInput) (*ec2.CreateImageOutput, error)) {
	fake.createImageMutex.Lock()
	defer fake.createImageMutex.Unlock()
	fake.CreateImageStub = stub
}

func (fake *FakeEC2API) CreateImageArgsForCall(i int) *ec2.CreateImageInput {
	fake.createImageMutex.RLock()
	defer fake.createImageMutex.RUnlock()
	argsForCall := fake.createImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateImageReturns(result1 *ec2.CreateImageOutput, result2 error) {
	fake.createImageMutex.Lock()
	defer fake.createImageMutex.Unlock()
	fake.CreateImageStub = nil
	fake.createImageReturns = struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateImageReturnsOnCall(i int, result1 *ec2.CreateImageOutput, result2 error) {
	fake.createImageMutex.Lock()
	defer fake.createImageMutex.Unlock()
	fake.CreateImageStub = nil
	if fake.createImageReturnsOnCall == nil {
		fake.createImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateImageOutput
			result2 error
		})
	}
	fake.createImageReturnsOnCall[i] = struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateImageRequest(arg1 *ec2.CreateImageInput) (*request.Request, *ec2.CreateImageOutput) {
	fake.createImageRequestMutex.Lock()
	ret, specificReturn := fake.createImageRequestReturnsOnCall[len(fake.createImageRequestArgsForCall)]
	fake.createImageRequestArgsForCall = append(fake.createImageRequestArgsForCall, struct {
		arg1 *ec2.CreateImageInput
	}{arg1})
	fake.recordInvocation("CreateImageRequest", []interface{}{arg1})
	fake.createImageRequestMutex.Unlock()
	if fake.CreateImageRequestStub != nil {
		return fake.CreateImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateImageRequestCallCount() int {
	fake.createImageRequestMutex.RLock()
	defer fake.createImageRequestMutex.RUnlock()
	return len(fake.createImageRequestArgsForCall)
}

func (fake *FakeEC2API) CreateImageRequestCalls(stub func(*ec2.CreateImageInput) (*request.Request, *ec2.CreateImageOutput)) {
	fake.createImageRequestMutex.Lock()
	defer fake.createImageRequestMutex.Unlock()
	fake.CreateImageRequestStub = stub
}

func (fake *FakeEC2API) CreateImageRequestArgsForCall(i int) *ec2.CreateImageInput {
	fake.createImageRequestMutex.RLock()
	defer fake.createImageRequestMutex.RUnlock()
	argsForCall := fake.createImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateImageRequestReturns(result1 *request.Request, result2 *ec2.CreateImageOutput) {
	fake.createImageRequestMutex.Lock()
	defer fake.createImageRequestMutex.Unlock()
	fake.CreateImageRequestStub = nil
	fake.createImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateImageOutput) {
	fake.createImageRequestMutex.Lock()
	defer fake.createImageRequestMutex.Unlock()
	fake.CreateImageRequestStub = nil
	if fake.createImageRequestReturnsOnCall == nil {
		fake.createImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateImageOutput
		})
	}
	fake.createImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateImageWithContext(arg1 aws.Context, arg2 *ec2.CreateImageInput, arg3 ...request.Option) (*ec2.CreateImageOutput, error) {
	fake.createImageWithContextMutex.Lock()
	ret, specificReturn := fake.createImageWithContextReturnsOnCall[len(fake.createImageWithContextArgsForCall)]
	fake.createImageWithContextArgsForCall = append(fake.createImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.createImageWithContextMutex.Unlock()
	if fake.CreateImageWithContextStub != nil {
		return fake.CreateImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateImageWithContextCallCount() int {
	fake.createImageWithContextMutex.RLock()
	defer fake.createImageWithContextMutex.RUnlock()
	return len(fake.createImageWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateImageWithContextCalls(stub func(aws.Context, *ec2.CreateImageInput, ...request.Option) (*ec2.CreateImageOutput, error)) {
	fake.createImageWithContextMutex.Lock()
	defer fake.createImageWithContextMutex.Unlock()
	fake.CreateImageWithContextStub = stub
}

func (fake *FakeEC2API) CreateImageWithContextArgsForCall(i int) (aws.Context, *ec2.CreateImageInput, []request.Option) {
	fake.createImageWithContextMutex.RLock()
	defer fake.createImageWithContextMutex.RUnlock()
	argsForCall := fake.createImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateImageWithContextReturns(result1 *ec2.CreateImageOutput, result2 error) {
	fake.createImageWithContextMutex.Lock()
	defer fake.createImageWithContextMutex.Unlock()
	fake.CreateImageWithContextStub = nil
	fake.createImageWithContextReturns = struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateImageWithContextReturnsOnCall(i int, result1 *ec2.CreateImageOutput, result2 error) {
	fake.createImageWithContextMutex.Lock()
	defer fake.createImageWithContextMutex.Unlock()
	fake.CreateImageWithContextStub = nil
	if fake.createImageWithContextReturnsOnCall == nil {
		fake.createImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateImageOutput
			result2 error
		})
	}
	fake.createImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInstanceExportTask(arg1 *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	fake.createInstanceExportTaskMutex.Lock()
	ret, specificReturn := fake.createInstanceExportTaskReturnsOnCall[len(fake.createInstanceExportTaskArgsForCall)]
	fake.createInstanceExportTaskArgsForCall = append(fake.createInstanceExportTaskArgsForCall, struct {
		arg1 *ec2.CreateInstanceExportTaskInput
	}{arg1})
	fake.recordInvocation("CreateInstanceExportTask", []interface{}{arg1})
	fake.createInstanceExportTaskMutex.Unlock()
	if fake.CreateInstanceExportTaskStub != nil {
		return fake.CreateInstanceExportTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInstanceExportTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateInstanceExportTaskCallCount() int {
	fake.createInstanceExportTaskMutex.RLock()
	defer fake.createInstanceExportTaskMutex.RUnlock()
	return len(fake.createInstanceExportTaskArgsForCall)
}

func (fake *FakeEC2API) CreateInstanceExportTaskCalls(stub func(*ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error)) {
	fake.createInstanceExportTaskMutex.Lock()
	defer fake.createInstanceExportTaskMutex.Unlock()
	fake.CreateInstanceExportTaskStub = stub
}

func (fake *FakeEC2API) CreateInstanceExportTaskArgsForCall(i int) *ec2.CreateInstanceExportTaskInput {
	fake.createInstanceExportTaskMutex.RLock()
	defer fake.createInstanceExportTaskMutex.RUnlock()
	argsForCall := fake.createInstanceExportTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateInstanceExportTaskReturns(result1 *ec2.CreateInstanceExportTaskOutput, result2 error) {
	fake.createInstanceExportTaskMutex.Lock()
	defer fake.createInstanceExportTaskMutex.Unlock()
	fake.CreateInstanceExportTaskStub = nil
	fake.createInstanceExportTaskReturns = struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInstanceExportTaskReturnsOnCall(i int, result1 *ec2.CreateInstanceExportTaskOutput, result2 error) {
	fake.createInstanceExportTaskMutex.Lock()
	defer fake.createInstanceExportTaskMutex.Unlock()
	fake.CreateInstanceExportTaskStub = nil
	if fake.createInstanceExportTaskReturnsOnCall == nil {
		fake.createInstanceExportTaskReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateInstanceExportTaskOutput
			result2 error
		})
	}
	fake.createInstanceExportTaskReturnsOnCall[i] = struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInstanceExportTaskRequest(arg1 *ec2.CreateInstanceExportTaskInput) (*request.Request, *ec2.CreateInstanceExportTaskOutput) {
	fake.createInstanceExportTaskRequestMutex.Lock()
	ret, specificReturn := fake.createInstanceExportTaskRequestReturnsOnCall[len(fake.createInstanceExportTaskRequestArgsForCall)]
	fake.createInstanceExportTaskRequestArgsForCall = append(fake.createInstanceExportTaskRequestArgsForCall, struct {
		arg1 *ec2.CreateInstanceExportTaskInput
	}{arg1})
	fake.recordInvocation("CreateInstanceExportTaskRequest", []interface{}{arg1})
	fake.createInstanceExportTaskRequestMutex.Unlock()
	if fake.CreateInstanceExportTaskRequestStub != nil {
		return fake.CreateInstanceExportTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInstanceExportTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateInstanceExportTaskRequestCallCount() int {
	fake.createInstanceExportTaskRequestMutex.RLock()
	defer fake.createInstanceExportTaskRequestMutex.RUnlock()
	return len(fake.createInstanceExportTaskRequestArgsForCall)
}

func (fake *FakeEC2API) CreateInstanceExportTaskRequestCalls(stub func(*ec2.CreateInstanceExportTaskInput) (*request.Request, *ec2.CreateInstanceExportTaskOutput)) {
	fake.createInstanceExportTaskRequestMutex.Lock()
	defer fake.createInstanceExportTaskRequestMutex.Unlock()
	fake.CreateInstanceExportTaskRequestStub = stub
}

func (fake *FakeEC2API) CreateInstanceExportTaskRequestArgsForCall(i int) *ec2.CreateInstanceExportTaskInput {
	fake.createInstanceExportTaskRequestMutex.RLock()
	defer fake.createInstanceExportTaskRequestMutex.RUnlock()
	argsForCall := fake.createInstanceExportTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateInstanceExportTaskRequestReturns(result1 *request.Request, result2 *ec2.CreateInstanceExportTaskOutput) {
	fake.createInstanceExportTaskRequestMutex.Lock()
	defer fake.createInstanceExportTaskRequestMutex.Unlock()
	fake.CreateInstanceExportTaskRequestStub = nil
	fake.createInstanceExportTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateInstanceExportTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInstanceExportTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateInstanceExportTaskOutput) {
	fake.createInstanceExportTaskRequestMutex.Lock()
	defer fake.createInstanceExportTaskRequestMutex.Unlock()
	fake.CreateInstanceExportTaskRequestStub = nil
	if fake.createInstanceExportTaskRequestReturnsOnCall == nil {
		fake.createInstanceExportTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateInstanceExportTaskOutput
		})
	}
	fake.createInstanceExportTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateInstanceExportTaskOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInstanceExportTaskWithContext(arg1 aws.Context, arg2 *ec2.CreateInstanceExportTaskInput, arg3 ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error) {
	fake.createInstanceExportTaskWithContextMutex.Lock()
	ret, specificReturn := fake.createInstanceExportTaskWithContextReturnsOnCall[len(fake.createInstanceExportTaskWithContextArgsForCall)]
	fake.createInstanceExportTaskWithContextArgsForCall = append(fake.createInstanceExportTaskWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateInstanceExportTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateInstanceExportTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.createInstanceExportTaskWithContextMutex.Unlock()
	if fake.CreateInstanceExportTaskWithContextStub != nil {
		return fake.CreateInstanceExportTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInstanceExportTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateInstanceExportTaskWithContextCallCount() int {
	fake.createInstanceExportTaskWithContextMutex.RLock()
	defer fake.createInstanceExportTaskWithContextMutex.RUnlock()
	return len(fake.createInstanceExportTaskWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateInstanceExportTaskWithContextCalls(stub func(aws.Context, *ec2.CreateInstanceExportTaskInput, ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error)) {
	fake.createInstanceExportTaskWithContextMutex.Lock()
	defer fake.createInstanceExportTaskWithContextMutex.Unlock()
	fake.CreateInstanceExportTaskWithContextStub = stub
}

func (fake *FakeEC2API) CreateInstanceExportTaskWithContextArgsForCall(i int) (aws.Context, *ec2.CreateInstanceExportTaskInput, []request.Option) {
	fake.createInstanceExportTaskWithContextMutex.RLock()
	defer fake.createInstanceExportTaskWithContextMutex.RUnlock()
	argsForCall := fake.createInstanceExportTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateInstanceExportTaskWithContextReturns(result1 *ec2.CreateInstanceExportTaskOutput, result2 error) {
	fake.createInstanceExportTaskWithContextMutex.Lock()
	defer fake.createInstanceExportTaskWithContextMutex.Unlock()
	fake.CreateInstanceExportTaskWithContextStub = nil
	fake.createInstanceExportTaskWithContextReturns = struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInstanceExportTaskWithContextReturnsOnCall(i int, result1 *ec2.CreateInstanceExportTaskOutput, result2 error) {
	fake.createInstanceExportTaskWithContextMutex.Lock()
	defer fake.createInstanceExportTaskWithContextMutex.Unlock()
	fake.CreateInstanceExportTaskWithContextStub = nil
	if fake.createInstanceExportTaskWithContextReturnsOnCall == nil {
		fake.createInstanceExportTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateInstanceExportTaskOutput
			result2 error
		})
	}
	fake.createInstanceExportTaskWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateInstanceExportTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInternetGateway(arg1 *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	fake.createInternetGatewayMutex.Lock()
	ret, specificReturn := fake.createInternetGatewayReturnsOnCall[len(fake.createInternetGatewayArgsForCall)]
	fake.createInternetGatewayArgsForCall = append(fake.createInternetGatewayArgsForCall, struct {
		arg1 *ec2.CreateInternetGatewayInput
	}{arg1})
	fake.recordInvocation("CreateInternetGateway", []interface{}{arg1})
	fake.createInternetGatewayMutex.Unlock()
	if fake.CreateInternetGatewayStub != nil {
		return fake.CreateInternetGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInternetGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateInternetGatewayCallCount() int {
	fake.createInternetGatewayMutex.RLock()
	defer fake.createInternetGatewayMutex.RUnlock()
	return len(fake.createInternetGatewayArgsForCall)
}

func (fake *FakeEC2API) CreateInternetGatewayCalls(stub func(*ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error)) {
	fake.createInternetGatewayMutex.Lock()
	defer fake.createInternetGatewayMutex.Unlock()
	fake.CreateInternetGatewayStub = stub
}

func (fake *FakeEC2API) CreateInternetGatewayArgsForCall(i int) *ec2.CreateInternetGatewayInput {
	fake.createInternetGatewayMutex.RLock()
	defer fake.createInternetGatewayMutex.RUnlock()
	argsForCall := fake.createInternetGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateInternetGatewayReturns(result1 *ec2.CreateInternetGatewayOutput, result2 error) {
	fake.createInternetGatewayMutex.Lock()
	defer fake.createInternetGatewayMutex.Unlock()
	fake.CreateInternetGatewayStub = nil
	fake.createInternetGatewayReturns = struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInternetGatewayReturnsOnCall(i int, result1 *ec2.CreateInternetGatewayOutput, result2 error) {
	fake.createInternetGatewayMutex.Lock()
	defer fake.createInternetGatewayMutex.Unlock()
	fake.CreateInternetGatewayStub = nil
	if fake.createInternetGatewayReturnsOnCall == nil {
		fake.createInternetGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateInternetGatewayOutput
			result2 error
		})
	}
	fake.createInternetGatewayReturnsOnCall[i] = struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInternetGatewayRequest(arg1 *ec2.CreateInternetGatewayInput) (*request.Request, *ec2.CreateInternetGatewayOutput) {
	fake.createInternetGatewayRequestMutex.Lock()
	ret, specificReturn := fake.createInternetGatewayRequestReturnsOnCall[len(fake.createInternetGatewayRequestArgsForCall)]
	fake.createInternetGatewayRequestArgsForCall = append(fake.createInternetGatewayRequestArgsForCall, struct {
		arg1 *ec2.CreateInternetGatewayInput
	}{arg1})
	fake.recordInvocation("CreateInternetGatewayRequest", []interface{}{arg1})
	fake.createInternetGatewayRequestMutex.Unlock()
	if fake.CreateInternetGatewayRequestStub != nil {
		return fake.CreateInternetGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInternetGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateInternetGatewayRequestCallCount() int {
	fake.createInternetGatewayRequestMutex.RLock()
	defer fake.createInternetGatewayRequestMutex.RUnlock()
	return len(fake.createInternetGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) CreateInternetGatewayRequestCalls(stub func(*ec2.CreateInternetGatewayInput) (*request.Request, *ec2.CreateInternetGatewayOutput)) {
	fake.createInternetGatewayRequestMutex.Lock()
	defer fake.createInternetGatewayRequestMutex.Unlock()
	fake.CreateInternetGatewayRequestStub = stub
}

func (fake *FakeEC2API) CreateInternetGatewayRequestArgsForCall(i int) *ec2.CreateInternetGatewayInput {
	fake.createInternetGatewayRequestMutex.RLock()
	defer fake.createInternetGatewayRequestMutex.RUnlock()
	argsForCall := fake.createInternetGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateInternetGatewayRequestReturns(result1 *request.Request, result2 *ec2.CreateInternetGatewayOutput) {
	fake.createInternetGatewayRequestMutex.Lock()
	defer fake.createInternetGatewayRequestMutex.Unlock()
	fake.CreateInternetGatewayRequestStub = nil
	fake.createInternetGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInternetGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateInternetGatewayOutput) {
	fake.createInternetGatewayRequestMutex.Lock()
	defer fake.createInternetGatewayRequestMutex.Unlock()
	fake.CreateInternetGatewayRequestStub = nil
	if fake.createInternetGatewayRequestReturnsOnCall == nil {
		fake.createInternetGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateInternetGatewayOutput
		})
	}
	fake.createInternetGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInternetGatewayWithContext(arg1 aws.Context, arg2 *ec2.CreateInternetGatewayInput, arg3 ...request.Option) (*ec2.CreateInternetGatewayOutput, error) {
	fake.createInternetGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.createInternetGatewayWithContextReturnsOnCall[len(fake.createInternetGatewayWithContextArgsForCall)]
	fake.createInternetGatewayWithContextArgsForCall = append(fake.createInternetGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateInternetGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateInternetGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.createInternetGatewayWithContextMutex.Unlock()
	if fake.CreateInternetGatewayWithContextStub != nil {
		return fake.CreateInternetGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createInternetGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateInternetGatewayWithContextCallCount() int {
	fake.createInternetGatewayWithContextMutex.RLock()
	defer fake.createInternetGatewayWithContextMutex.RUnlock()
	return len(fake.createInternetGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateInternetGatewayWithContextCalls(stub func(aws.Context, *ec2.CreateInternetGatewayInput, ...request.Option) (*ec2.CreateInternetGatewayOutput, error)) {
	fake.createInternetGatewayWithContextMutex.Lock()
	defer fake.createInternetGatewayWithContextMutex.Unlock()
	fake.CreateInternetGatewayWithContextStub = stub
}

func (fake *FakeEC2API) CreateInternetGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.CreateInternetGatewayInput, []request.Option) {
	fake.createInternetGatewayWithContextMutex.RLock()
	defer fake.createInternetGatewayWithContextMutex.RUnlock()
	argsForCall := fake.createInternetGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateInternetGatewayWithContextReturns(result1 *ec2.CreateInternetGatewayOutput, result2 error) {
	fake.createInternetGatewayWithContextMutex.Lock()
	defer fake.createInternetGatewayWithContextMutex.Unlock()
	fake.CreateInternetGatewayWithContextStub = nil
	fake.createInternetGatewayWithContextReturns = struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateInternetGatewayWithContextReturnsOnCall(i int, result1 *ec2.CreateInternetGatewayOutput, result2 error) {
	fake.createInternetGatewayWithContextMutex.Lock()
	defer fake.createInternetGatewayWithContextMutex.Unlock()
	fake.CreateInternetGatewayWithContextStub = nil
	if fake.createInternetGatewayWithContextReturnsOnCall == nil {
		fake.createInternetGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateInternetGatewayOutput
			result2 error
		})
	}
	fake.createInternetGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateKeyPair(arg1 *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	fake.createKeyPairMutex.Lock()
	ret, specificReturn := fake.createKeyPairReturnsOnCall[len(fake.createKeyPairArgsForCall)]
	fake.createKeyPairArgsForCall = append(fake.createKeyPairArgsForCall, struct {
		arg1 *ec2.CreateKeyPairInput
	}{arg1})
	fake.recordInvocation("CreateKeyPair", []interface{}{arg1})
	fake.createKeyPairMutex.Unlock()
	if fake.CreateKeyPairStub != nil {
		return fake.CreateKeyPairStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createKeyPairReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateKeyPairCallCount() int {
	fake.createKeyPairMutex.RLock()
	defer fake.createKeyPairMutex.RUnlock()
	return len(fake.createKeyPairArgsForCall)
}

func (fake *FakeEC2API) CreateKeyPairCalls(stub func(*ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error)) {
	fake.createKeyPairMutex.Lock()
	defer fake.createKeyPairMutex.Unlock()
	fake.CreateKeyPairStub = stub
}

func (fake *FakeEC2API) CreateKeyPairArgsForCall(i int) *ec2.CreateKeyPairInput {
	fake.createKeyPairMutex.RLock()
	defer fake.createKeyPairMutex.RUnlock()
	argsForCall := fake.createKeyPairArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateKeyPairReturns(result1 *ec2.CreateKeyPairOutput, result2 error) {
	fake.createKeyPairMutex.Lock()
	defer fake.createKeyPairMutex.Unlock()
	fake.CreateKeyPairStub = nil
	fake.createKeyPairReturns = struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateKeyPairReturnsOnCall(i int, result1 *ec2.CreateKeyPairOutput, result2 error) {
	fake.createKeyPairMutex.Lock()
	defer fake.createKeyPairMutex.Unlock()
	fake.CreateKeyPairStub = nil
	if fake.createKeyPairReturnsOnCall == nil {
		fake.createKeyPairReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateKeyPairOutput
			result2 error
		})
	}
	fake.createKeyPairReturnsOnCall[i] = struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateKeyPairRequest(arg1 *ec2.CreateKeyPairInput) (*request.Request, *ec2.CreateKeyPairOutput) {
	fake.createKeyPairRequestMutex.Lock()
	ret, specificReturn := fake.createKeyPairRequestReturnsOnCall[len(fake.createKeyPairRequestArgsForCall)]
	fake.createKeyPairRequestArgsForCall = append(fake.createKeyPairRequestArgsForCall, struct {
		arg1 *ec2.CreateKeyPairInput
	}{arg1})
	fake.recordInvocation("CreateKeyPairRequest", []interface{}{arg1})
	fake.createKeyPairRequestMutex.Unlock()
	if fake.CreateKeyPairRequestStub != nil {
		return fake.CreateKeyPairRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createKeyPairRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateKeyPairRequestCallCount() int {
	fake.createKeyPairRequestMutex.RLock()
	defer fake.createKeyPairRequestMutex.RUnlock()
	return len(fake.createKeyPairRequestArgsForCall)
}

func (fake *FakeEC2API) CreateKeyPairRequestCalls(stub func(*ec2.CreateKeyPairInput) (*request.Request, *ec2.CreateKeyPairOutput)) {
	fake.createKeyPairRequestMutex.Lock()
	defer fake.createKeyPairRequestMutex.Unlock()
	fake.CreateKeyPairRequestStub = stub
}

func (fake *FakeEC2API) CreateKeyPairRequestArgsForCall(i int) *ec2.CreateKeyPairInput {
	fake.createKeyPairRequestMutex.RLock()
	defer fake.createKeyPairRequestMutex.RUnlock()
	argsForCall := fake.createKeyPairRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateKeyPairRequestReturns(result1 *request.Request, result2 *ec2.CreateKeyPairOutput) {
	fake.createKeyPairRequestMutex.Lock()
	defer fake.createKeyPairRequestMutex.Unlock()
	fake.CreateKeyPairRequestStub = nil
	fake.createKeyPairRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateKeyPairOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateKeyPairRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateKeyPairOutput) {
	fake.createKeyPairRequestMutex.Lock()
	defer fake.createKeyPairRequestMutex.Unlock()
	fake.CreateKeyPairRequestStub = nil
	if fake.createKeyPairRequestReturnsOnCall == nil {
		fake.createKeyPairRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateKeyPairOutput
		})
	}
	fake.createKeyPairRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateKeyPairOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateKeyPairWithContext(arg1 aws.Context, arg2 *ec2.CreateKeyPairInput, arg3 ...request.Option) (*ec2.CreateKeyPairOutput, error) {
	fake.createKeyPairWithContextMutex.Lock()
	ret, specificReturn := fake.createKeyPairWithContextReturnsOnCall[len(fake.createKeyPairWithContextArgsForCall)]
	fake.createKeyPairWithContextArgsForCall = append(fake.createKeyPairWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateKeyPairInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateKeyPairWithContext", []interface{}{arg1, arg2, arg3})
	fake.createKeyPairWithContextMutex.Unlock()
	if fake.CreateKeyPairWithContextStub != nil {
		return fake.CreateKeyPairWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createKeyPairWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateKeyPairWithContextCallCount() int {
	fake.createKeyPairWithContextMutex.RLock()
	defer fake.createKeyPairWithContextMutex.RUnlock()
	return len(fake.createKeyPairWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateKeyPairWithContextCalls(stub func(aws.Context, *ec2.CreateKeyPairInput, ...request.Option) (*ec2.CreateKeyPairOutput, error)) {
	fake.createKeyPairWithContextMutex.Lock()
	defer fake.createKeyPairWithContextMutex.Unlock()
	fake.CreateKeyPairWithContextStub = stub
}

func (fake *FakeEC2API) CreateKeyPairWithContextArgsForCall(i int) (aws.Context, *ec2.CreateKeyPairInput, []request.Option) {
	fake.createKeyPairWithContextMutex.RLock()
	defer fake.createKeyPairWithContextMutex.RUnlock()
	argsForCall := fake.createKeyPairWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateKeyPairWithContextReturns(result1 *ec2.CreateKeyPairOutput, result2 error) {
	fake.createKeyPairWithContextMutex.Lock()
	defer fake.createKeyPairWithContextMutex.Unlock()
	fake.CreateKeyPairWithContextStub = nil
	fake.createKeyPairWithContextReturns = struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateKeyPairWithContextReturnsOnCall(i int, result1 *ec2.CreateKeyPairOutput, result2 error) {
	fake.createKeyPairWithContextMutex.Lock()
	defer fake.createKeyPairWithContextMutex.Unlock()
	fake.CreateKeyPairWithContextStub = nil
	if fake.createKeyPairWithContextReturnsOnCall == nil {
		fake.createKeyPairWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateKeyPairOutput
			result2 error
		})
	}
	fake.createKeyPairWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplate(arg1 *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error) {
	fake.createLaunchTemplateMutex.Lock()
	ret, specificReturn := fake.createLaunchTemplateReturnsOnCall[len(fake.createLaunchTemplateArgsForCall)]
	fake.createLaunchTemplateArgsForCall = append(fake.createLaunchTemplateArgsForCall, struct {
		arg1 *ec2.CreateLaunchTemplateInput
	}{arg1})
	fake.recordInvocation("CreateLaunchTemplate", []interface{}{arg1})
	fake.createLaunchTemplateMutex.Unlock()
	if fake.CreateLaunchTemplateStub != nil {
		return fake.CreateLaunchTemplateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLaunchTemplateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateLaunchTemplateCallCount() int {
	fake.createLaunchTemplateMutex.RLock()
	defer fake.createLaunchTemplateMutex.RUnlock()
	return len(fake.createLaunchTemplateArgsForCall)
}

func (fake *FakeEC2API) CreateLaunchTemplateCalls(stub func(*ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error)) {
	fake.createLaunchTemplateMutex.Lock()
	defer fake.createLaunchTemplateMutex.Unlock()
	fake.CreateLaunchTemplateStub = stub
}

func (fake *FakeEC2API) CreateLaunchTemplateArgsForCall(i int) *ec2.CreateLaunchTemplateInput {
	fake.createLaunchTemplateMutex.RLock()
	defer fake.createLaunchTemplateMutex.RUnlock()
	argsForCall := fake.createLaunchTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateLaunchTemplateReturns(result1 *ec2.CreateLaunchTemplateOutput, result2 error) {
	fake.createLaunchTemplateMutex.Lock()
	defer fake.createLaunchTemplateMutex.Unlock()
	fake.CreateLaunchTemplateStub = nil
	fake.createLaunchTemplateReturns = struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateReturnsOnCall(i int, result1 *ec2.CreateLaunchTemplateOutput, result2 error) {
	fake.createLaunchTemplateMutex.Lock()
	defer fake.createLaunchTemplateMutex.Unlock()
	fake.CreateLaunchTemplateStub = nil
	if fake.createLaunchTemplateReturnsOnCall == nil {
		fake.createLaunchTemplateReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateLaunchTemplateOutput
			result2 error
		})
	}
	fake.createLaunchTemplateReturnsOnCall[i] = struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateRequest(arg1 *ec2.CreateLaunchTemplateInput) (*request.Request, *ec2.CreateLaunchTemplateOutput) {
	fake.createLaunchTemplateRequestMutex.Lock()
	ret, specificReturn := fake.createLaunchTemplateRequestReturnsOnCall[len(fake.createLaunchTemplateRequestArgsForCall)]
	fake.createLaunchTemplateRequestArgsForCall = append(fake.createLaunchTemplateRequestArgsForCall, struct {
		arg1 *ec2.CreateLaunchTemplateInput
	}{arg1})
	fake.recordInvocation("CreateLaunchTemplateRequest", []interface{}{arg1})
	fake.createLaunchTemplateRequestMutex.Unlock()
	if fake.CreateLaunchTemplateRequestStub != nil {
		return fake.CreateLaunchTemplateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLaunchTemplateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateLaunchTemplateRequestCallCount() int {
	fake.createLaunchTemplateRequestMutex.RLock()
	defer fake.createLaunchTemplateRequestMutex.RUnlock()
	return len(fake.createLaunchTemplateRequestArgsForCall)
}

func (fake *FakeEC2API) CreateLaunchTemplateRequestCalls(stub func(*ec2.CreateLaunchTemplateInput) (*request.Request, *ec2.CreateLaunchTemplateOutput)) {
	fake.createLaunchTemplateRequestMutex.Lock()
	defer fake.createLaunchTemplateRequestMutex.Unlock()
	fake.CreateLaunchTemplateRequestStub = stub
}

func (fake *FakeEC2API) CreateLaunchTemplateRequestArgsForCall(i int) *ec2.CreateLaunchTemplateInput {
	fake.createLaunchTemplateRequestMutex.RLock()
	defer fake.createLaunchTemplateRequestMutex.RUnlock()
	argsForCall := fake.createLaunchTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateLaunchTemplateRequestReturns(result1 *request.Request, result2 *ec2.CreateLaunchTemplateOutput) {
	fake.createLaunchTemplateRequestMutex.Lock()
	defer fake.createLaunchTemplateRequestMutex.Unlock()
	fake.CreateLaunchTemplateRequestStub = nil
	fake.createLaunchTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateLaunchTemplateOutput) {
	fake.createLaunchTemplateRequestMutex.Lock()
	defer fake.createLaunchTemplateRequestMutex.Unlock()
	fake.CreateLaunchTemplateRequestStub = nil
	if fake.createLaunchTemplateRequestReturnsOnCall == nil {
		fake.createLaunchTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateLaunchTemplateOutput
		})
	}
	fake.createLaunchTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateVersion(arg1 *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	fake.createLaunchTemplateVersionMutex.Lock()
	ret, specificReturn := fake.createLaunchTemplateVersionReturnsOnCall[len(fake.createLaunchTemplateVersionArgsForCall)]
	fake.createLaunchTemplateVersionArgsForCall = append(fake.createLaunchTemplateVersionArgsForCall, struct {
		arg1 *ec2.CreateLaunchTemplateVersionInput
	}{arg1})
	fake.recordInvocation("CreateLaunchTemplateVersion", []interface{}{arg1})
	fake.createLaunchTemplateVersionMutex.Unlock()
	if fake.CreateLaunchTemplateVersionStub != nil {
		return fake.CreateLaunchTemplateVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLaunchTemplateVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionCallCount() int {
	fake.createLaunchTemplateVersionMutex.RLock()
	defer fake.createLaunchTemplateVersionMutex.RUnlock()
	return len(fake.createLaunchTemplateVersionArgsForCall)
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionCalls(stub func(*ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error)) {
	fake.createLaunchTemplateVersionMutex.Lock()
	defer fake.createLaunchTemplateVersionMutex.Unlock()
	fake.CreateLaunchTemplateVersionStub = stub
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionArgsForCall(i int) *ec2.CreateLaunchTemplateVersionInput {
	fake.createLaunchTemplateVersionMutex.RLock()
	defer fake.createLaunchTemplateVersionMutex.RUnlock()
	argsForCall := fake.createLaunchTemplateVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionReturns(result1 *ec2.CreateLaunchTemplateVersionOutput, result2 error) {
	fake.createLaunchTemplateVersionMutex.Lock()
	defer fake.createLaunchTemplateVersionMutex.Unlock()
	fake.CreateLaunchTemplateVersionStub = nil
	fake.createLaunchTemplateVersionReturns = struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionReturnsOnCall(i int, result1 *ec2.CreateLaunchTemplateVersionOutput, result2 error) {
	fake.createLaunchTemplateVersionMutex.Lock()
	defer fake.createLaunchTemplateVersionMutex.Unlock()
	fake.CreateLaunchTemplateVersionStub = nil
	if fake.createLaunchTemplateVersionReturnsOnCall == nil {
		fake.createLaunchTemplateVersionReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateLaunchTemplateVersionOutput
			result2 error
		})
	}
	fake.createLaunchTemplateVersionReturnsOnCall[i] = struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionRequest(arg1 *ec2.CreateLaunchTemplateVersionInput) (*request.Request, *ec2.CreateLaunchTemplateVersionOutput) {
	fake.createLaunchTemplateVersionRequestMutex.Lock()
	ret, specificReturn := fake.createLaunchTemplateVersionRequestReturnsOnCall[len(fake.createLaunchTemplateVersionRequestArgsForCall)]
	fake.createLaunchTemplateVersionRequestArgsForCall = append(fake.createLaunchTemplateVersionRequestArgsForCall, struct {
		arg1 *ec2.CreateLaunchTemplateVersionInput
	}{arg1})
	fake.recordInvocation("CreateLaunchTemplateVersionRequest", []interface{}{arg1})
	fake.createLaunchTemplateVersionRequestMutex.Unlock()
	if fake.CreateLaunchTemplateVersionRequestStub != nil {
		return fake.CreateLaunchTemplateVersionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLaunchTemplateVersionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionRequestCallCount() int {
	fake.createLaunchTemplateVersionRequestMutex.RLock()
	defer fake.createLaunchTemplateVersionRequestMutex.RUnlock()
	return len(fake.createLaunchTemplateVersionRequestArgsForCall)
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionRequestCalls(stub func(*ec2.CreateLaunchTemplateVersionInput) (*request.Request, *ec2.CreateLaunchTemplateVersionOutput)) {
	fake.createLaunchTemplateVersionRequestMutex.Lock()
	defer fake.createLaunchTemplateVersionRequestMutex.Unlock()
	fake.CreateLaunchTemplateVersionRequestStub = stub
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionRequestArgsForCall(i int) *ec2.CreateLaunchTemplateVersionInput {
	fake.createLaunchTemplateVersionRequestMutex.RLock()
	defer fake.createLaunchTemplateVersionRequestMutex.RUnlock()
	argsForCall := fake.createLaunchTemplateVersionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionRequestReturns(result1 *request.Request, result2 *ec2.CreateLaunchTemplateVersionOutput) {
	fake.createLaunchTemplateVersionRequestMutex.Lock()
	defer fake.createLaunchTemplateVersionRequestMutex.Unlock()
	fake.CreateLaunchTemplateVersionRequestStub = nil
	fake.createLaunchTemplateVersionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateVersionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateLaunchTemplateVersionOutput) {
	fake.createLaunchTemplateVersionRequestMutex.Lock()
	defer fake.createLaunchTemplateVersionRequestMutex.Unlock()
	fake.CreateLaunchTemplateVersionRequestStub = nil
	if fake.createLaunchTemplateVersionRequestReturnsOnCall == nil {
		fake.createLaunchTemplateVersionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateLaunchTemplateVersionOutput
		})
	}
	fake.createLaunchTemplateVersionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateLaunchTemplateVersionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionWithContext(arg1 aws.Context, arg2 *ec2.CreateLaunchTemplateVersionInput, arg3 ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	fake.createLaunchTemplateVersionWithContextMutex.Lock()
	ret, specificReturn := fake.createLaunchTemplateVersionWithContextReturnsOnCall[len(fake.createLaunchTemplateVersionWithContextArgsForCall)]
	fake.createLaunchTemplateVersionWithContextArgsForCall = append(fake.createLaunchTemplateVersionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateLaunchTemplateVersionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateLaunchTemplateVersionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createLaunchTemplateVersionWithContextMutex.Unlock()
	if fake.CreateLaunchTemplateVersionWithContextStub != nil {
		return fake.CreateLaunchTemplateVersionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLaunchTemplateVersionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionWithContextCallCount() int {
	fake.createLaunchTemplateVersionWithContextMutex.RLock()
	defer fake.createLaunchTemplateVersionWithContextMutex.RUnlock()
	return len(fake.createLaunchTemplateVersionWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionWithContextCalls(stub func(aws.Context, *ec2.CreateLaunchTemplateVersionInput, ...request.Option) (*ec2.CreateLaunchTemplateVersionOutput, error)) {
	fake.createLaunchTemplateVersionWithContextMutex.Lock()
	defer fake.createLaunchTemplateVersionWithContextMutex.Unlock()
	fake.CreateLaunchTemplateVersionWithContextStub = stub
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionWithContextArgsForCall(i int) (aws.Context, *ec2.CreateLaunchTemplateVersionInput, []request.Option) {
	fake.createLaunchTemplateVersionWithContextMutex.RLock()
	defer fake.createLaunchTemplateVersionWithContextMutex.RUnlock()
	argsForCall := fake.createLaunchTemplateVersionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionWithContextReturns(result1 *ec2.CreateLaunchTemplateVersionOutput, result2 error) {
	fake.createLaunchTemplateVersionWithContextMutex.Lock()
	defer fake.createLaunchTemplateVersionWithContextMutex.Unlock()
	fake.CreateLaunchTemplateVersionWithContextStub = nil
	fake.createLaunchTemplateVersionWithContextReturns = struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateVersionWithContextReturnsOnCall(i int, result1 *ec2.CreateLaunchTemplateVersionOutput, result2 error) {
	fake.createLaunchTemplateVersionWithContextMutex.Lock()
	defer fake.createLaunchTemplateVersionWithContextMutex.Unlock()
	fake.CreateLaunchTemplateVersionWithContextStub = nil
	if fake.createLaunchTemplateVersionWithContextReturnsOnCall == nil {
		fake.createLaunchTemplateVersionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateLaunchTemplateVersionOutput
			result2 error
		})
	}
	fake.createLaunchTemplateVersionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateLaunchTemplateVersionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateWithContext(arg1 aws.Context, arg2 *ec2.CreateLaunchTemplateInput, arg3 ...request.Option) (*ec2.CreateLaunchTemplateOutput, error) {
	fake.createLaunchTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.createLaunchTemplateWithContextReturnsOnCall[len(fake.createLaunchTemplateWithContextArgsForCall)]
	fake.createLaunchTemplateWithContextArgsForCall = append(fake.createLaunchTemplateWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateLaunchTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateLaunchTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.createLaunchTemplateWithContextMutex.Unlock()
	if fake.CreateLaunchTemplateWithContextStub != nil {
		return fake.CreateLaunchTemplateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createLaunchTemplateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateLaunchTemplateWithContextCallCount() int {
	fake.createLaunchTemplateWithContextMutex.RLock()
	defer fake.createLaunchTemplateWithContextMutex.RUnlock()
	return len(fake.createLaunchTemplateWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateLaunchTemplateWithContextCalls(stub func(aws.Context, *ec2.CreateLaunchTemplateInput, ...request.Option) (*ec2.CreateLaunchTemplateOutput, error)) {
	fake.createLaunchTemplateWithContextMutex.Lock()
	defer fake.createLaunchTemplateWithContextMutex.Unlock()
	fake.CreateLaunchTemplateWithContextStub = stub
}

func (fake *FakeEC2API) CreateLaunchTemplateWithContextArgsForCall(i int) (aws.Context, *ec2.CreateLaunchTemplateInput, []request.Option) {
	fake.createLaunchTemplateWithContextMutex.RLock()
	defer fake.createLaunchTemplateWithContextMutex.RUnlock()
	argsForCall := fake.createLaunchTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateLaunchTemplateWithContextReturns(result1 *ec2.CreateLaunchTemplateOutput, result2 error) {
	fake.createLaunchTemplateWithContextMutex.Lock()
	defer fake.createLaunchTemplateWithContextMutex.Unlock()
	fake.CreateLaunchTemplateWithContextStub = nil
	fake.createLaunchTemplateWithContextReturns = struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateLaunchTemplateWithContextReturnsOnCall(i int, result1 *ec2.CreateLaunchTemplateOutput, result2 error) {
	fake.createLaunchTemplateWithContextMutex.Lock()
	defer fake.createLaunchTemplateWithContextMutex.Unlock()
	fake.CreateLaunchTemplateWithContextStub = nil
	if fake.createLaunchTemplateWithContextReturnsOnCall == nil {
		fake.createLaunchTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateLaunchTemplateOutput
			result2 error
		})
	}
	fake.createLaunchTemplateWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNatGateway(arg1 *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
	fake.createNatGatewayMutex.Lock()
	ret, specificReturn := fake.createNatGatewayReturnsOnCall[len(fake.createNatGatewayArgsForCall)]
	fake.createNatGatewayArgsForCall = append(fake.createNatGatewayArgsForCall, struct {
		arg1 *ec2.CreateNatGatewayInput
	}{arg1})
	fake.recordInvocation("CreateNatGateway", []interface{}{arg1})
	fake.createNatGatewayMutex.Unlock()
	if fake.CreateNatGatewayStub != nil {
		return fake.CreateNatGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNatGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNatGatewayCallCount() int {
	fake.createNatGatewayMutex.RLock()
	defer fake.createNatGatewayMutex.RUnlock()
	return len(fake.createNatGatewayArgsForCall)
}

func (fake *FakeEC2API) CreateNatGatewayCalls(stub func(*ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error)) {
	fake.createNatGatewayMutex.Lock()
	defer fake.createNatGatewayMutex.Unlock()
	fake.CreateNatGatewayStub = stub
}

func (fake *FakeEC2API) CreateNatGatewayArgsForCall(i int) *ec2.CreateNatGatewayInput {
	fake.createNatGatewayMutex.RLock()
	defer fake.createNatGatewayMutex.RUnlock()
	argsForCall := fake.createNatGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNatGatewayReturns(result1 *ec2.CreateNatGatewayOutput, result2 error) {
	fake.createNatGatewayMutex.Lock()
	defer fake.createNatGatewayMutex.Unlock()
	fake.CreateNatGatewayStub = nil
	fake.createNatGatewayReturns = struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNatGatewayReturnsOnCall(i int, result1 *ec2.CreateNatGatewayOutput, result2 error) {
	fake.createNatGatewayMutex.Lock()
	defer fake.createNatGatewayMutex.Unlock()
	fake.CreateNatGatewayStub = nil
	if fake.createNatGatewayReturnsOnCall == nil {
		fake.createNatGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNatGatewayOutput
			result2 error
		})
	}
	fake.createNatGatewayReturnsOnCall[i] = struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNatGatewayRequest(arg1 *ec2.CreateNatGatewayInput) (*request.Request, *ec2.CreateNatGatewayOutput) {
	fake.createNatGatewayRequestMutex.Lock()
	ret, specificReturn := fake.createNatGatewayRequestReturnsOnCall[len(fake.createNatGatewayRequestArgsForCall)]
	fake.createNatGatewayRequestArgsForCall = append(fake.createNatGatewayRequestArgsForCall, struct {
		arg1 *ec2.CreateNatGatewayInput
	}{arg1})
	fake.recordInvocation("CreateNatGatewayRequest", []interface{}{arg1})
	fake.createNatGatewayRequestMutex.Unlock()
	if fake.CreateNatGatewayRequestStub != nil {
		return fake.CreateNatGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNatGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNatGatewayRequestCallCount() int {
	fake.createNatGatewayRequestMutex.RLock()
	defer fake.createNatGatewayRequestMutex.RUnlock()
	return len(fake.createNatGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) CreateNatGatewayRequestCalls(stub func(*ec2.CreateNatGatewayInput) (*request.Request, *ec2.CreateNatGatewayOutput)) {
	fake.createNatGatewayRequestMutex.Lock()
	defer fake.createNatGatewayRequestMutex.Unlock()
	fake.CreateNatGatewayRequestStub = stub
}

func (fake *FakeEC2API) CreateNatGatewayRequestArgsForCall(i int) *ec2.CreateNatGatewayInput {
	fake.createNatGatewayRequestMutex.RLock()
	defer fake.createNatGatewayRequestMutex.RUnlock()
	argsForCall := fake.createNatGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNatGatewayRequestReturns(result1 *request.Request, result2 *ec2.CreateNatGatewayOutput) {
	fake.createNatGatewayRequestMutex.Lock()
	defer fake.createNatGatewayRequestMutex.Unlock()
	fake.CreateNatGatewayRequestStub = nil
	fake.createNatGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateNatGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNatGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateNatGatewayOutput) {
	fake.createNatGatewayRequestMutex.Lock()
	defer fake.createNatGatewayRequestMutex.Unlock()
	fake.CreateNatGatewayRequestStub = nil
	if fake.createNatGatewayRequestReturnsOnCall == nil {
		fake.createNatGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateNatGatewayOutput
		})
	}
	fake.createNatGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateNatGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNatGatewayWithContext(arg1 aws.Context, arg2 *ec2.CreateNatGatewayInput, arg3 ...request.Option) (*ec2.CreateNatGatewayOutput, error) {
	fake.createNatGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.createNatGatewayWithContextReturnsOnCall[len(fake.createNatGatewayWithContextArgsForCall)]
	fake.createNatGatewayWithContextArgsForCall = append(fake.createNatGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateNatGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNatGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.createNatGatewayWithContextMutex.Unlock()
	if fake.CreateNatGatewayWithContextStub != nil {
		return fake.CreateNatGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNatGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNatGatewayWithContextCallCount() int {
	fake.createNatGatewayWithContextMutex.RLock()
	defer fake.createNatGatewayWithContextMutex.RUnlock()
	return len(fake.createNatGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateNatGatewayWithContextCalls(stub func(aws.Context, *ec2.CreateNatGatewayInput, ...request.Option) (*ec2.CreateNatGatewayOutput, error)) {
	fake.createNatGatewayWithContextMutex.Lock()
	defer fake.createNatGatewayWithContextMutex.Unlock()
	fake.CreateNatGatewayWithContextStub = stub
}

func (fake *FakeEC2API) CreateNatGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.CreateNatGatewayInput, []request.Option) {
	fake.createNatGatewayWithContextMutex.RLock()
	defer fake.createNatGatewayWithContextMutex.RUnlock()
	argsForCall := fake.createNatGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateNatGatewayWithContextReturns(result1 *ec2.CreateNatGatewayOutput, result2 error) {
	fake.createNatGatewayWithContextMutex.Lock()
	defer fake.createNatGatewayWithContextMutex.Unlock()
	fake.CreateNatGatewayWithContextStub = nil
	fake.createNatGatewayWithContextReturns = struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNatGatewayWithContextReturnsOnCall(i int, result1 *ec2.CreateNatGatewayOutput, result2 error) {
	fake.createNatGatewayWithContextMutex.Lock()
	defer fake.createNatGatewayWithContextMutex.Unlock()
	fake.CreateNatGatewayWithContextStub = nil
	if fake.createNatGatewayWithContextReturnsOnCall == nil {
		fake.createNatGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNatGatewayOutput
			result2 error
		})
	}
	fake.createNatGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAcl(arg1 *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
	fake.createNetworkAclMutex.Lock()
	ret, specificReturn := fake.createNetworkAclReturnsOnCall[len(fake.createNetworkAclArgsForCall)]
	fake.createNetworkAclArgsForCall = append(fake.createNetworkAclArgsForCall, struct {
		arg1 *ec2.CreateNetworkAclInput
	}{arg1})
	fake.recordInvocation("CreateNetworkAcl", []interface{}{arg1})
	fake.createNetworkAclMutex.Unlock()
	if fake.CreateNetworkAclStub != nil {
		return fake.CreateNetworkAclStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkAclReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkAclCallCount() int {
	fake.createNetworkAclMutex.RLock()
	defer fake.createNetworkAclMutex.RUnlock()
	return len(fake.createNetworkAclArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkAclCalls(stub func(*ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error)) {
	fake.createNetworkAclMutex.Lock()
	defer fake.createNetworkAclMutex.Unlock()
	fake.CreateNetworkAclStub = stub
}

func (fake *FakeEC2API) CreateNetworkAclArgsForCall(i int) *ec2.CreateNetworkAclInput {
	fake.createNetworkAclMutex.RLock()
	defer fake.createNetworkAclMutex.RUnlock()
	argsForCall := fake.createNetworkAclArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkAclReturns(result1 *ec2.CreateNetworkAclOutput, result2 error) {
	fake.createNetworkAclMutex.Lock()
	defer fake.createNetworkAclMutex.Unlock()
	fake.CreateNetworkAclStub = nil
	fake.createNetworkAclReturns = struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclReturnsOnCall(i int, result1 *ec2.CreateNetworkAclOutput, result2 error) {
	fake.createNetworkAclMutex.Lock()
	defer fake.createNetworkAclMutex.Unlock()
	fake.CreateNetworkAclStub = nil
	if fake.createNetworkAclReturnsOnCall == nil {
		fake.createNetworkAclReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkAclOutput
			result2 error
		})
	}
	fake.createNetworkAclReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclEntry(arg1 *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
	fake.createNetworkAclEntryMutex.Lock()
	ret, specificReturn := fake.createNetworkAclEntryReturnsOnCall[len(fake.createNetworkAclEntryArgsForCall)]
	fake.createNetworkAclEntryArgsForCall = append(fake.createNetworkAclEntryArgsForCall, struct {
		arg1 *ec2.CreateNetworkAclEntryInput
	}{arg1})
	fake.recordInvocation("CreateNetworkAclEntry", []interface{}{arg1})
	fake.createNetworkAclEntryMutex.Unlock()
	if fake.CreateNetworkAclEntryStub != nil {
		return fake.CreateNetworkAclEntryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkAclEntryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkAclEntryCallCount() int {
	fake.createNetworkAclEntryMutex.RLock()
	defer fake.createNetworkAclEntryMutex.RUnlock()
	return len(fake.createNetworkAclEntryArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkAclEntryCalls(stub func(*ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error)) {
	fake.createNetworkAclEntryMutex.Lock()
	defer fake.createNetworkAclEntryMutex.Unlock()
	fake.CreateNetworkAclEntryStub = stub
}

func (fake *FakeEC2API) CreateNetworkAclEntryArgsForCall(i int) *ec2.CreateNetworkAclEntryInput {
	fake.createNetworkAclEntryMutex.RLock()
	defer fake.createNetworkAclEntryMutex.RUnlock()
	argsForCall := fake.createNetworkAclEntryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkAclEntryReturns(result1 *ec2.CreateNetworkAclEntryOutput, result2 error) {
	fake.createNetworkAclEntryMutex.Lock()
	defer fake.createNetworkAclEntryMutex.Unlock()
	fake.CreateNetworkAclEntryStub = nil
	fake.createNetworkAclEntryReturns = struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclEntryReturnsOnCall(i int, result1 *ec2.CreateNetworkAclEntryOutput, result2 error) {
	fake.createNetworkAclEntryMutex.Lock()
	defer fake.createNetworkAclEntryMutex.Unlock()
	fake.CreateNetworkAclEntryStub = nil
	if fake.createNetworkAclEntryReturnsOnCall == nil {
		fake.createNetworkAclEntryReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkAclEntryOutput
			result2 error
		})
	}
	fake.createNetworkAclEntryReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclEntryRequest(arg1 *ec2.CreateNetworkAclEntryInput) (*request.Request, *ec2.CreateNetworkAclEntryOutput) {
	fake.createNetworkAclEntryRequestMutex.Lock()
	ret, specificReturn := fake.createNetworkAclEntryRequestReturnsOnCall[len(fake.createNetworkAclEntryRequestArgsForCall)]
	fake.createNetworkAclEntryRequestArgsForCall = append(fake.createNetworkAclEntryRequestArgsForCall, struct {
		arg1 *ec2.CreateNetworkAclEntryInput
	}{arg1})
	fake.recordInvocation("CreateNetworkAclEntryRequest", []interface{}{arg1})
	fake.createNetworkAclEntryRequestMutex.Unlock()
	if fake.CreateNetworkAclEntryRequestStub != nil {
		return fake.CreateNetworkAclEntryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkAclEntryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkAclEntryRequestCallCount() int {
	fake.createNetworkAclEntryRequestMutex.RLock()
	defer fake.createNetworkAclEntryRequestMutex.RUnlock()
	return len(fake.createNetworkAclEntryRequestArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkAclEntryRequestCalls(stub func(*ec2.CreateNetworkAclEntryInput) (*request.Request, *ec2.CreateNetworkAclEntryOutput)) {
	fake.createNetworkAclEntryRequestMutex.Lock()
	defer fake.createNetworkAclEntryRequestMutex.Unlock()
	fake.CreateNetworkAclEntryRequestStub = stub
}

func (fake *FakeEC2API) CreateNetworkAclEntryRequestArgsForCall(i int) *ec2.CreateNetworkAclEntryInput {
	fake.createNetworkAclEntryRequestMutex.RLock()
	defer fake.createNetworkAclEntryRequestMutex.RUnlock()
	argsForCall := fake.createNetworkAclEntryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkAclEntryRequestReturns(result1 *request.Request, result2 *ec2.CreateNetworkAclEntryOutput) {
	fake.createNetworkAclEntryRequestMutex.Lock()
	defer fake.createNetworkAclEntryRequestMutex.Unlock()
	fake.CreateNetworkAclEntryRequestStub = nil
	fake.createNetworkAclEntryRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclEntryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclEntryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateNetworkAclEntryOutput) {
	fake.createNetworkAclEntryRequestMutex.Lock()
	defer fake.createNetworkAclEntryRequestMutex.Unlock()
	fake.CreateNetworkAclEntryRequestStub = nil
	if fake.createNetworkAclEntryRequestReturnsOnCall == nil {
		fake.createNetworkAclEntryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateNetworkAclEntryOutput
		})
	}
	fake.createNetworkAclEntryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclEntryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclEntryWithContext(arg1 aws.Context, arg2 *ec2.CreateNetworkAclEntryInput, arg3 ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error) {
	fake.createNetworkAclEntryWithContextMutex.Lock()
	ret, specificReturn := fake.createNetworkAclEntryWithContextReturnsOnCall[len(fake.createNetworkAclEntryWithContextArgsForCall)]
	fake.createNetworkAclEntryWithContextArgsForCall = append(fake.createNetworkAclEntryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkAclEntryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNetworkAclEntryWithContext", []interface{}{arg1, arg2, arg3})
	fake.createNetworkAclEntryWithContextMutex.Unlock()
	if fake.CreateNetworkAclEntryWithContextStub != nil {
		return fake.CreateNetworkAclEntryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkAclEntryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkAclEntryWithContextCallCount() int {
	fake.createNetworkAclEntryWithContextMutex.RLock()
	defer fake.createNetworkAclEntryWithContextMutex.RUnlock()
	return len(fake.createNetworkAclEntryWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkAclEntryWithContextCalls(stub func(aws.Context, *ec2.CreateNetworkAclEntryInput, ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error)) {
	fake.createNetworkAclEntryWithContextMutex.Lock()
	defer fake.createNetworkAclEntryWithContextMutex.Unlock()
	fake.CreateNetworkAclEntryWithContextStub = stub
}

func (fake *FakeEC2API) CreateNetworkAclEntryWithContextArgsForCall(i int) (aws.Context, *ec2.CreateNetworkAclEntryInput, []request.Option) {
	fake.createNetworkAclEntryWithContextMutex.RLock()
	defer fake.createNetworkAclEntryWithContextMutex.RUnlock()
	argsForCall := fake.createNetworkAclEntryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateNetworkAclEntryWithContextReturns(result1 *ec2.CreateNetworkAclEntryOutput, result2 error) {
	fake.createNetworkAclEntryWithContextMutex.Lock()
	defer fake.createNetworkAclEntryWithContextMutex.Unlock()
	fake.CreateNetworkAclEntryWithContextStub = nil
	fake.createNetworkAclEntryWithContextReturns = struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclEntryWithContextReturnsOnCall(i int, result1 *ec2.CreateNetworkAclEntryOutput, result2 error) {
	fake.createNetworkAclEntryWithContextMutex.Lock()
	defer fake.createNetworkAclEntryWithContextMutex.Unlock()
	fake.CreateNetworkAclEntryWithContextStub = nil
	if fake.createNetworkAclEntryWithContextReturnsOnCall == nil {
		fake.createNetworkAclEntryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkAclEntryOutput
			result2 error
		})
	}
	fake.createNetworkAclEntryWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclRequest(arg1 *ec2.CreateNetworkAclInput) (*request.Request, *ec2.CreateNetworkAclOutput) {
	fake.createNetworkAclRequestMutex.Lock()
	ret, specificReturn := fake.createNetworkAclRequestReturnsOnCall[len(fake.createNetworkAclRequestArgsForCall)]
	fake.createNetworkAclRequestArgsForCall = append(fake.createNetworkAclRequestArgsForCall, struct {
		arg1 *ec2.CreateNetworkAclInput
	}{arg1})
	fake.recordInvocation("CreateNetworkAclRequest", []interface{}{arg1})
	fake.createNetworkAclRequestMutex.Unlock()
	if fake.CreateNetworkAclRequestStub != nil {
		return fake.CreateNetworkAclRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkAclRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkAclRequestCallCount() int {
	fake.createNetworkAclRequestMutex.RLock()
	defer fake.createNetworkAclRequestMutex.RUnlock()
	return len(fake.createNetworkAclRequestArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkAclRequestCalls(stub func(*ec2.CreateNetworkAclInput) (*request.Request, *ec2.CreateNetworkAclOutput)) {
	fake.createNetworkAclRequestMutex.Lock()
	defer fake.createNetworkAclRequestMutex.Unlock()
	fake.CreateNetworkAclRequestStub = stub
}

func (fake *FakeEC2API) CreateNetworkAclRequestArgsForCall(i int) *ec2.CreateNetworkAclInput {
	fake.createNetworkAclRequestMutex.RLock()
	defer fake.createNetworkAclRequestMutex.RUnlock()
	argsForCall := fake.createNetworkAclRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkAclRequestReturns(result1 *request.Request, result2 *ec2.CreateNetworkAclOutput) {
	fake.createNetworkAclRequestMutex.Lock()
	defer fake.createNetworkAclRequestMutex.Unlock()
	fake.CreateNetworkAclRequestStub = nil
	fake.createNetworkAclRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateNetworkAclOutput) {
	fake.createNetworkAclRequestMutex.Lock()
	defer fake.createNetworkAclRequestMutex.Unlock()
	fake.CreateNetworkAclRequestStub = nil
	if fake.createNetworkAclRequestReturnsOnCall == nil {
		fake.createNetworkAclRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateNetworkAclOutput
		})
	}
	fake.createNetworkAclRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkAclOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclWithContext(arg1 aws.Context, arg2 *ec2.CreateNetworkAclInput, arg3 ...request.Option) (*ec2.CreateNetworkAclOutput, error) {
	fake.createNetworkAclWithContextMutex.Lock()
	ret, specificReturn := fake.createNetworkAclWithContextReturnsOnCall[len(fake.createNetworkAclWithContextArgsForCall)]
	fake.createNetworkAclWithContextArgsForCall = append(fake.createNetworkAclWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkAclInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNetworkAclWithContext", []interface{}{arg1, arg2, arg3})
	fake.createNetworkAclWithContextMutex.Unlock()
	if fake.CreateNetworkAclWithContextStub != nil {
		return fake.CreateNetworkAclWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkAclWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkAclWithContextCallCount() int {
	fake.createNetworkAclWithContextMutex.RLock()
	defer fake.createNetworkAclWithContextMutex.RUnlock()
	return len(fake.createNetworkAclWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkAclWithContextCalls(stub func(aws.Context, *ec2.CreateNetworkAclInput, ...request.Option) (*ec2.CreateNetworkAclOutput, error)) {
	fake.createNetworkAclWithContextMutex.Lock()
	defer fake.createNetworkAclWithContextMutex.Unlock()
	fake.CreateNetworkAclWithContextStub = stub
}

func (fake *FakeEC2API) CreateNetworkAclWithContextArgsForCall(i int) (aws.Context, *ec2.CreateNetworkAclInput, []request.Option) {
	fake.createNetworkAclWithContextMutex.RLock()
	defer fake.createNetworkAclWithContextMutex.RUnlock()
	argsForCall := fake.createNetworkAclWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateNetworkAclWithContextReturns(result1 *ec2.CreateNetworkAclOutput, result2 error) {
	fake.createNetworkAclWithContextMutex.Lock()
	defer fake.createNetworkAclWithContextMutex.Unlock()
	fake.CreateNetworkAclWithContextStub = nil
	fake.createNetworkAclWithContextReturns = struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkAclWithContextReturnsOnCall(i int, result1 *ec2.CreateNetworkAclOutput, result2 error) {
	fake.createNetworkAclWithContextMutex.Lock()
	defer fake.createNetworkAclWithContextMutex.Unlock()
	fake.CreateNetworkAclWithContextStub = nil
	if fake.createNetworkAclWithContextReturnsOnCall == nil {
		fake.createNetworkAclWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkAclOutput
			result2 error
		})
	}
	fake.createNetworkAclWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterface(arg1 *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	fake.createNetworkInterfaceMutex.Lock()
	ret, specificReturn := fake.createNetworkInterfaceReturnsOnCall[len(fake.createNetworkInterfaceArgsForCall)]
	fake.createNetworkInterfaceArgsForCall = append(fake.createNetworkInterfaceArgsForCall, struct {
		arg1 *ec2.CreateNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("CreateNetworkInterface", []interface{}{arg1})
	fake.createNetworkInterfaceMutex.Unlock()
	if fake.CreateNetworkInterfaceStub != nil {
		return fake.CreateNetworkInterfaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkInterfaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkInterfaceCallCount() int {
	fake.createNetworkInterfaceMutex.RLock()
	defer fake.createNetworkInterfaceMutex.RUnlock()
	return len(fake.createNetworkInterfaceArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkInterfaceCalls(stub func(*ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error)) {
	fake.createNetworkInterfaceMutex.Lock()
	defer fake.createNetworkInterfaceMutex.Unlock()
	fake.CreateNetworkInterfaceStub = stub
}

func (fake *FakeEC2API) CreateNetworkInterfaceArgsForCall(i int) *ec2.CreateNetworkInterfaceInput {
	fake.createNetworkInterfaceMutex.RLock()
	defer fake.createNetworkInterfaceMutex.RUnlock()
	argsForCall := fake.createNetworkInterfaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkInterfaceReturns(result1 *ec2.CreateNetworkInterfaceOutput, result2 error) {
	fake.createNetworkInterfaceMutex.Lock()
	defer fake.createNetworkInterfaceMutex.Unlock()
	fake.CreateNetworkInterfaceStub = nil
	fake.createNetworkInterfaceReturns = struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfaceReturnsOnCall(i int, result1 *ec2.CreateNetworkInterfaceOutput, result2 error) {
	fake.createNetworkInterfaceMutex.Lock()
	defer fake.createNetworkInterfaceMutex.Unlock()
	fake.CreateNetworkInterfaceStub = nil
	if fake.createNetworkInterfaceReturnsOnCall == nil {
		fake.createNetworkInterfaceReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkInterfaceOutput
			result2 error
		})
	}
	fake.createNetworkInterfaceReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfacePermission(arg1 *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	fake.createNetworkInterfacePermissionMutex.Lock()
	ret, specificReturn := fake.createNetworkInterfacePermissionReturnsOnCall[len(fake.createNetworkInterfacePermissionArgsForCall)]
	fake.createNetworkInterfacePermissionArgsForCall = append(fake.createNetworkInterfacePermissionArgsForCall, struct {
		arg1 *ec2.CreateNetworkInterfacePermissionInput
	}{arg1})
	fake.recordInvocation("CreateNetworkInterfacePermission", []interface{}{arg1})
	fake.createNetworkInterfacePermissionMutex.Unlock()
	if fake.CreateNetworkInterfacePermissionStub != nil {
		return fake.CreateNetworkInterfacePermissionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkInterfacePermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionCallCount() int {
	fake.createNetworkInterfacePermissionMutex.RLock()
	defer fake.createNetworkInterfacePermissionMutex.RUnlock()
	return len(fake.createNetworkInterfacePermissionArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionCalls(stub func(*ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error)) {
	fake.createNetworkInterfacePermissionMutex.Lock()
	defer fake.createNetworkInterfacePermissionMutex.Unlock()
	fake.CreateNetworkInterfacePermissionStub = stub
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionArgsForCall(i int) *ec2.CreateNetworkInterfacePermissionInput {
	fake.createNetworkInterfacePermissionMutex.RLock()
	defer fake.createNetworkInterfacePermissionMutex.RUnlock()
	argsForCall := fake.createNetworkInterfacePermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionReturns(result1 *ec2.CreateNetworkInterfacePermissionOutput, result2 error) {
	fake.createNetworkInterfacePermissionMutex.Lock()
	defer fake.createNetworkInterfacePermissionMutex.Unlock()
	fake.CreateNetworkInterfacePermissionStub = nil
	fake.createNetworkInterfacePermissionReturns = struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionReturnsOnCall(i int, result1 *ec2.CreateNetworkInterfacePermissionOutput, result2 error) {
	fake.createNetworkInterfacePermissionMutex.Lock()
	defer fake.createNetworkInterfacePermissionMutex.Unlock()
	fake.CreateNetworkInterfacePermissionStub = nil
	if fake.createNetworkInterfacePermissionReturnsOnCall == nil {
		fake.createNetworkInterfacePermissionReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkInterfacePermissionOutput
			result2 error
		})
	}
	fake.createNetworkInterfacePermissionReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionRequest(arg1 *ec2.CreateNetworkInterfacePermissionInput) (*request.Request, *ec2.CreateNetworkInterfacePermissionOutput) {
	fake.createNetworkInterfacePermissionRequestMutex.Lock()
	ret, specificReturn := fake.createNetworkInterfacePermissionRequestReturnsOnCall[len(fake.createNetworkInterfacePermissionRequestArgsForCall)]
	fake.createNetworkInterfacePermissionRequestArgsForCall = append(fake.createNetworkInterfacePermissionRequestArgsForCall, struct {
		arg1 *ec2.CreateNetworkInterfacePermissionInput
	}{arg1})
	fake.recordInvocation("CreateNetworkInterfacePermissionRequest", []interface{}{arg1})
	fake.createNetworkInterfacePermissionRequestMutex.Unlock()
	if fake.CreateNetworkInterfacePermissionRequestStub != nil {
		return fake.CreateNetworkInterfacePermissionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkInterfacePermissionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionRequestCallCount() int {
	fake.createNetworkInterfacePermissionRequestMutex.RLock()
	defer fake.createNetworkInterfacePermissionRequestMutex.RUnlock()
	return len(fake.createNetworkInterfacePermissionRequestArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionRequestCalls(stub func(*ec2.CreateNetworkInterfacePermissionInput) (*request.Request, *ec2.CreateNetworkInterfacePermissionOutput)) {
	fake.createNetworkInterfacePermissionRequestMutex.Lock()
	defer fake.createNetworkInterfacePermissionRequestMutex.Unlock()
	fake.CreateNetworkInterfacePermissionRequestStub = stub
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionRequestArgsForCall(i int) *ec2.CreateNetworkInterfacePermissionInput {
	fake.createNetworkInterfacePermissionRequestMutex.RLock()
	defer fake.createNetworkInterfacePermissionRequestMutex.RUnlock()
	argsForCall := fake.createNetworkInterfacePermissionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionRequestReturns(result1 *request.Request, result2 *ec2.CreateNetworkInterfacePermissionOutput) {
	fake.createNetworkInterfacePermissionRequestMutex.Lock()
	defer fake.createNetworkInterfacePermissionRequestMutex.Unlock()
	fake.CreateNetworkInterfacePermissionRequestStub = nil
	fake.createNetworkInterfacePermissionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfacePermissionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateNetworkInterfacePermissionOutput) {
	fake.createNetworkInterfacePermissionRequestMutex.Lock()
	defer fake.createNetworkInterfacePermissionRequestMutex.Unlock()
	fake.CreateNetworkInterfacePermissionRequestStub = nil
	if fake.createNetworkInterfacePermissionRequestReturnsOnCall == nil {
		fake.createNetworkInterfacePermissionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateNetworkInterfacePermissionOutput
		})
	}
	fake.createNetworkInterfacePermissionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfacePermissionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionWithContext(arg1 aws.Context, arg2 *ec2.CreateNetworkInterfacePermissionInput, arg3 ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	fake.createNetworkInterfacePermissionWithContextMutex.Lock()
	ret, specificReturn := fake.createNetworkInterfacePermissionWithContextReturnsOnCall[len(fake.createNetworkInterfacePermissionWithContextArgsForCall)]
	fake.createNetworkInterfacePermissionWithContextArgsForCall = append(fake.createNetworkInterfacePermissionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkInterfacePermissionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNetworkInterfacePermissionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createNetworkInterfacePermissionWithContextMutex.Unlock()
	if fake.CreateNetworkInterfacePermissionWithContextStub != nil {
		return fake.CreateNetworkInterfacePermissionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkInterfacePermissionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionWithContextCallCount() int {
	fake.createNetworkInterfacePermissionWithContextMutex.RLock()
	defer fake.createNetworkInterfacePermissionWithContextMutex.RUnlock()
	return len(fake.createNetworkInterfacePermissionWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionWithContextCalls(stub func(aws.Context, *ec2.CreateNetworkInterfacePermissionInput, ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error)) {
	fake.createNetworkInterfacePermissionWithContextMutex.Lock()
	defer fake.createNetworkInterfacePermissionWithContextMutex.Unlock()
	fake.CreateNetworkInterfacePermissionWithContextStub = stub
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionWithContextArgsForCall(i int) (aws.Context, *ec2.CreateNetworkInterfacePermissionInput, []request.Option) {
	fake.createNetworkInterfacePermissionWithContextMutex.RLock()
	defer fake.createNetworkInterfacePermissionWithContextMutex.RUnlock()
	argsForCall := fake.createNetworkInterfacePermissionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionWithContextReturns(result1 *ec2.CreateNetworkInterfacePermissionOutput, result2 error) {
	fake.createNetworkInterfacePermissionWithContextMutex.Lock()
	defer fake.createNetworkInterfacePermissionWithContextMutex.Unlock()
	fake.CreateNetworkInterfacePermissionWithContextStub = nil
	fake.createNetworkInterfacePermissionWithContextReturns = struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfacePermissionWithContextReturnsOnCall(i int, result1 *ec2.CreateNetworkInterfacePermissionOutput, result2 error) {
	fake.createNetworkInterfacePermissionWithContextMutex.Lock()
	defer fake.createNetworkInterfacePermissionWithContextMutex.Unlock()
	fake.CreateNetworkInterfacePermissionWithContextStub = nil
	if fake.createNetworkInterfacePermissionWithContextReturnsOnCall == nil {
		fake.createNetworkInterfacePermissionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkInterfacePermissionOutput
			result2 error
		})
	}
	fake.createNetworkInterfacePermissionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfaceRequest(arg1 *ec2.CreateNetworkInterfaceInput) (*request.Request, *ec2.CreateNetworkInterfaceOutput) {
	fake.createNetworkInterfaceRequestMutex.Lock()
	ret, specificReturn := fake.createNetworkInterfaceRequestReturnsOnCall[len(fake.createNetworkInterfaceRequestArgsForCall)]
	fake.createNetworkInterfaceRequestArgsForCall = append(fake.createNetworkInterfaceRequestArgsForCall, struct {
		arg1 *ec2.CreateNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("CreateNetworkInterfaceRequest", []interface{}{arg1})
	fake.createNetworkInterfaceRequestMutex.Unlock()
	if fake.CreateNetworkInterfaceRequestStub != nil {
		return fake.CreateNetworkInterfaceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkInterfaceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkInterfaceRequestCallCount() int {
	fake.createNetworkInterfaceRequestMutex.RLock()
	defer fake.createNetworkInterfaceRequestMutex.RUnlock()
	return len(fake.createNetworkInterfaceRequestArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkInterfaceRequestCalls(stub func(*ec2.CreateNetworkInterfaceInput) (*request.Request, *ec2.CreateNetworkInterfaceOutput)) {
	fake.createNetworkInterfaceRequestMutex.Lock()
	defer fake.createNetworkInterfaceRequestMutex.Unlock()
	fake.CreateNetworkInterfaceRequestStub = stub
}

func (fake *FakeEC2API) CreateNetworkInterfaceRequestArgsForCall(i int) *ec2.CreateNetworkInterfaceInput {
	fake.createNetworkInterfaceRequestMutex.RLock()
	defer fake.createNetworkInterfaceRequestMutex.RUnlock()
	argsForCall := fake.createNetworkInterfaceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateNetworkInterfaceRequestReturns(result1 *request.Request, result2 *ec2.CreateNetworkInterfaceOutput) {
	fake.createNetworkInterfaceRequestMutex.Lock()
	defer fake.createNetworkInterfaceRequestMutex.Unlock()
	fake.CreateNetworkInterfaceRequestStub = nil
	fake.createNetworkInterfaceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfaceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateNetworkInterfaceOutput) {
	fake.createNetworkInterfaceRequestMutex.Lock()
	defer fake.createNetworkInterfaceRequestMutex.Unlock()
	fake.CreateNetworkInterfaceRequestStub = nil
	if fake.createNetworkInterfaceRequestReturnsOnCall == nil {
		fake.createNetworkInterfaceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateNetworkInterfaceOutput
		})
	}
	fake.createNetworkInterfaceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfaceWithContext(arg1 aws.Context, arg2 *ec2.CreateNetworkInterfaceInput, arg3 ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error) {
	fake.createNetworkInterfaceWithContextMutex.Lock()
	ret, specificReturn := fake.createNetworkInterfaceWithContextReturnsOnCall[len(fake.createNetworkInterfaceWithContextArgsForCall)]
	fake.createNetworkInterfaceWithContextArgsForCall = append(fake.createNetworkInterfaceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateNetworkInterfaceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateNetworkInterfaceWithContext", []interface{}{arg1, arg2, arg3})
	fake.createNetworkInterfaceWithContextMutex.Unlock()
	if fake.CreateNetworkInterfaceWithContextStub != nil {
		return fake.CreateNetworkInterfaceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNetworkInterfaceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateNetworkInterfaceWithContextCallCount() int {
	fake.createNetworkInterfaceWithContextMutex.RLock()
	defer fake.createNetworkInterfaceWithContextMutex.RUnlock()
	return len(fake.createNetworkInterfaceWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateNetworkInterfaceWithContextCalls(stub func(aws.Context, *ec2.CreateNetworkInterfaceInput, ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error)) {
	fake.createNetworkInterfaceWithContextMutex.Lock()
	defer fake.createNetworkInterfaceWithContextMutex.Unlock()
	fake.CreateNetworkInterfaceWithContextStub = stub
}

func (fake *FakeEC2API) CreateNetworkInterfaceWithContextArgsForCall(i int) (aws.Context, *ec2.CreateNetworkInterfaceInput, []request.Option) {
	fake.createNetworkInterfaceWithContextMutex.RLock()
	defer fake.createNetworkInterfaceWithContextMutex.RUnlock()
	argsForCall := fake.createNetworkInterfaceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateNetworkInterfaceWithContextReturns(result1 *ec2.CreateNetworkInterfaceOutput, result2 error) {
	fake.createNetworkInterfaceWithContextMutex.Lock()
	defer fake.createNetworkInterfaceWithContextMutex.Unlock()
	fake.CreateNetworkInterfaceWithContextStub = nil
	fake.createNetworkInterfaceWithContextReturns = struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateNetworkInterfaceWithContextReturnsOnCall(i int, result1 *ec2.CreateNetworkInterfaceOutput, result2 error) {
	fake.createNetworkInterfaceWithContextMutex.Lock()
	defer fake.createNetworkInterfaceWithContextMutex.Unlock()
	fake.CreateNetworkInterfaceWithContextStub = nil
	if fake.createNetworkInterfaceWithContextReturnsOnCall == nil {
		fake.createNetworkInterfaceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateNetworkInterfaceOutput
			result2 error
		})
	}
	fake.createNetworkInterfaceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreatePlacementGroup(arg1 *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	fake.createPlacementGroupMutex.Lock()
	ret, specificReturn := fake.createPlacementGroupReturnsOnCall[len(fake.createPlacementGroupArgsForCall)]
	fake.createPlacementGroupArgsForCall = append(fake.createPlacementGroupArgsForCall, struct {
		arg1 *ec2.CreatePlacementGroupInput
	}{arg1})
	fake.recordInvocation("CreatePlacementGroup", []interface{}{arg1})
	fake.createPlacementGroupMutex.Unlock()
	if fake.CreatePlacementGroupStub != nil {
		return fake.CreatePlacementGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPlacementGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreatePlacementGroupCallCount() int {
	fake.createPlacementGroupMutex.RLock()
	defer fake.createPlacementGroupMutex.RUnlock()
	return len(fake.createPlacementGroupArgsForCall)
}

func (fake *FakeEC2API) CreatePlacementGroupCalls(stub func(*ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error)) {
	fake.createPlacementGroupMutex.Lock()
	defer fake.createPlacementGroupMutex.Unlock()
	fake.CreatePlacementGroupStub = stub
}

func (fake *FakeEC2API) CreatePlacementGroupArgsForCall(i int) *ec2.CreatePlacementGroupInput {
	fake.createPlacementGroupMutex.RLock()
	defer fake.createPlacementGroupMutex.RUnlock()
	argsForCall := fake.createPlacementGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreatePlacementGroupReturns(result1 *ec2.CreatePlacementGroupOutput, result2 error) {
	fake.createPlacementGroupMutex.Lock()
	defer fake.createPlacementGroupMutex.Unlock()
	fake.CreatePlacementGroupStub = nil
	fake.createPlacementGroupReturns = struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreatePlacementGroupReturnsOnCall(i int, result1 *ec2.CreatePlacementGroupOutput, result2 error) {
	fake.createPlacementGroupMutex.Lock()
	defer fake.createPlacementGroupMutex.Unlock()
	fake.CreatePlacementGroupStub = nil
	if fake.createPlacementGroupReturnsOnCall == nil {
		fake.createPlacementGroupReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreatePlacementGroupOutput
			result2 error
		})
	}
	fake.createPlacementGroupReturnsOnCall[i] = struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreatePlacementGroupRequest(arg1 *ec2.CreatePlacementGroupInput) (*request.Request, *ec2.CreatePlacementGroupOutput) {
	fake.createPlacementGroupRequestMutex.Lock()
	ret, specificReturn := fake.createPlacementGroupRequestReturnsOnCall[len(fake.createPlacementGroupRequestArgsForCall)]
	fake.createPlacementGroupRequestArgsForCall = append(fake.createPlacementGroupRequestArgsForCall, struct {
		arg1 *ec2.CreatePlacementGroupInput
	}{arg1})
	fake.recordInvocation("CreatePlacementGroupRequest", []interface{}{arg1})
	fake.createPlacementGroupRequestMutex.Unlock()
	if fake.CreatePlacementGroupRequestStub != nil {
		return fake.CreatePlacementGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPlacementGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreatePlacementGroupRequestCallCount() int {
	fake.createPlacementGroupRequestMutex.RLock()
	defer fake.createPlacementGroupRequestMutex.RUnlock()
	return len(fake.createPlacementGroupRequestArgsForCall)
}

func (fake *FakeEC2API) CreatePlacementGroupRequestCalls(stub func(*ec2.CreatePlacementGroupInput) (*request.Request, *ec2.CreatePlacementGroupOutput)) {
	fake.createPlacementGroupRequestMutex.Lock()
	defer fake.createPlacementGroupRequestMutex.Unlock()
	fake.CreatePlacementGroupRequestStub = stub
}

func (fake *FakeEC2API) CreatePlacementGroupRequestArgsForCall(i int) *ec2.CreatePlacementGroupInput {
	fake.createPlacementGroupRequestMutex.RLock()
	defer fake.createPlacementGroupRequestMutex.RUnlock()
	argsForCall := fake.createPlacementGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreatePlacementGroupRequestReturns(result1 *request.Request, result2 *ec2.CreatePlacementGroupOutput) {
	fake.createPlacementGroupRequestMutex.Lock()
	defer fake.createPlacementGroupRequestMutex.Unlock()
	fake.CreatePlacementGroupRequestStub = nil
	fake.createPlacementGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreatePlacementGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreatePlacementGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreatePlacementGroupOutput) {
	fake.createPlacementGroupRequestMutex.Lock()
	defer fake.createPlacementGroupRequestMutex.Unlock()
	fake.CreatePlacementGroupRequestStub = nil
	if fake.createPlacementGroupRequestReturnsOnCall == nil {
		fake.createPlacementGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreatePlacementGroupOutput
		})
	}
	fake.createPlacementGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreatePlacementGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreatePlacementGroupWithContext(arg1 aws.Context, arg2 *ec2.CreatePlacementGroupInput, arg3 ...request.Option) (*ec2.CreatePlacementGroupOutput, error) {
	fake.createPlacementGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createPlacementGroupWithContextReturnsOnCall[len(fake.createPlacementGroupWithContextArgsForCall)]
	fake.createPlacementGroupWithContextArgsForCall = append(fake.createPlacementGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreatePlacementGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreatePlacementGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createPlacementGroupWithContextMutex.Unlock()
	if fake.CreatePlacementGroupWithContextStub != nil {
		return fake.CreatePlacementGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPlacementGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreatePlacementGroupWithContextCallCount() int {
	fake.createPlacementGroupWithContextMutex.RLock()
	defer fake.createPlacementGroupWithContextMutex.RUnlock()
	return len(fake.createPlacementGroupWithContextArgsForCall)
}

func (fake *FakeEC2API) CreatePlacementGroupWithContextCalls(stub func(aws.Context, *ec2.CreatePlacementGroupInput, ...request.Option) (*ec2.CreatePlacementGroupOutput, error)) {
	fake.createPlacementGroupWithContextMutex.Lock()
	defer fake.createPlacementGroupWithContextMutex.Unlock()
	fake.CreatePlacementGroupWithContextStub = stub
}

func (fake *FakeEC2API) CreatePlacementGroupWithContextArgsForCall(i int) (aws.Context, *ec2.CreatePlacementGroupInput, []request.Option) {
	fake.createPlacementGroupWithContextMutex.RLock()
	defer fake.createPlacementGroupWithContextMutex.RUnlock()
	argsForCall := fake.createPlacementGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreatePlacementGroupWithContextReturns(result1 *ec2.CreatePlacementGroupOutput, result2 error) {
	fake.createPlacementGroupWithContextMutex.Lock()
	defer fake.createPlacementGroupWithContextMutex.Unlock()
	fake.CreatePlacementGroupWithContextStub = nil
	fake.createPlacementGroupWithContextReturns = struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreatePlacementGroupWithContextReturnsOnCall(i int, result1 *ec2.CreatePlacementGroupOutput, result2 error) {
	fake.createPlacementGroupWithContextMutex.Lock()
	defer fake.createPlacementGroupWithContextMutex.Unlock()
	fake.CreatePlacementGroupWithContextStub = nil
	if fake.createPlacementGroupWithContextReturnsOnCall == nil {
		fake.createPlacementGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreatePlacementGroupOutput
			result2 error
		})
	}
	fake.createPlacementGroupWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreatePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateReservedInstancesListing(arg1 *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	fake.createReservedInstancesListingMutex.Lock()
	ret, specificReturn := fake.createReservedInstancesListingReturnsOnCall[len(fake.createReservedInstancesListingArgsForCall)]
	fake.createReservedInstancesListingArgsForCall = append(fake.createReservedInstancesListingArgsForCall, struct {
		arg1 *ec2.CreateReservedInstancesListingInput
	}{arg1})
	fake.recordInvocation("CreateReservedInstancesListing", []interface{}{arg1})
	fake.createReservedInstancesListingMutex.Unlock()
	if fake.CreateReservedInstancesListingStub != nil {
		return fake.CreateReservedInstancesListingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReservedInstancesListingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateReservedInstancesListingCallCount() int {
	fake.createReservedInstancesListingMutex.RLock()
	defer fake.createReservedInstancesListingMutex.RUnlock()
	return len(fake.createReservedInstancesListingArgsForCall)
}

func (fake *FakeEC2API) CreateReservedInstancesListingCalls(stub func(*ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error)) {
	fake.createReservedInstancesListingMutex.Lock()
	defer fake.createReservedInstancesListingMutex.Unlock()
	fake.CreateReservedInstancesListingStub = stub
}

func (fake *FakeEC2API) CreateReservedInstancesListingArgsForCall(i int) *ec2.CreateReservedInstancesListingInput {
	fake.createReservedInstancesListingMutex.RLock()
	defer fake.createReservedInstancesListingMutex.RUnlock()
	argsForCall := fake.createReservedInstancesListingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateReservedInstancesListingReturns(result1 *ec2.CreateReservedInstancesListingOutput, result2 error) {
	fake.createReservedInstancesListingMutex.Lock()
	defer fake.createReservedInstancesListingMutex.Unlock()
	fake.CreateReservedInstancesListingStub = nil
	fake.createReservedInstancesListingReturns = struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateReservedInstancesListingReturnsOnCall(i int, result1 *ec2.CreateReservedInstancesListingOutput, result2 error) {
	fake.createReservedInstancesListingMutex.Lock()
	defer fake.createReservedInstancesListingMutex.Unlock()
	fake.CreateReservedInstancesListingStub = nil
	if fake.createReservedInstancesListingReturnsOnCall == nil {
		fake.createReservedInstancesListingReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateReservedInstancesListingOutput
			result2 error
		})
	}
	fake.createReservedInstancesListingReturnsOnCall[i] = struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateReservedInstancesListingRequest(arg1 *ec2.CreateReservedInstancesListingInput) (*request.Request, *ec2.CreateReservedInstancesListingOutput) {
	fake.createReservedInstancesListingRequestMutex.Lock()
	ret, specificReturn := fake.createReservedInstancesListingRequestReturnsOnCall[len(fake.createReservedInstancesListingRequestArgsForCall)]
	fake.createReservedInstancesListingRequestArgsForCall = append(fake.createReservedInstancesListingRequestArgsForCall, struct {
		arg1 *ec2.CreateReservedInstancesListingInput
	}{arg1})
	fake.recordInvocation("CreateReservedInstancesListingRequest", []interface{}{arg1})
	fake.createReservedInstancesListingRequestMutex.Unlock()
	if fake.CreateReservedInstancesListingRequestStub != nil {
		return fake.CreateReservedInstancesListingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReservedInstancesListingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateReservedInstancesListingRequestCallCount() int {
	fake.createReservedInstancesListingRequestMutex.RLock()
	defer fake.createReservedInstancesListingRequestMutex.RUnlock()
	return len(fake.createReservedInstancesListingRequestArgsForCall)
}

func (fake *FakeEC2API) CreateReservedInstancesListingRequestCalls(stub func(*ec2.CreateReservedInstancesListingInput) (*request.Request, *ec2.CreateReservedInstancesListingOutput)) {
	fake.createReservedInstancesListingRequestMutex.Lock()
	defer fake.createReservedInstancesListingRequestMutex.Unlock()
	fake.CreateReservedInstancesListingRequestStub = stub
}

func (fake *FakeEC2API) CreateReservedInstancesListingRequestArgsForCall(i int) *ec2.CreateReservedInstancesListingInput {
	fake.createReservedInstancesListingRequestMutex.RLock()
	defer fake.createReservedInstancesListingRequestMutex.RUnlock()
	argsForCall := fake.createReservedInstancesListingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateReservedInstancesListingRequestReturns(result1 *request.Request, result2 *ec2.CreateReservedInstancesListingOutput) {
	fake.createReservedInstancesListingRequestMutex.Lock()
	defer fake.createReservedInstancesListingRequestMutex.Unlock()
	fake.CreateReservedInstancesListingRequestStub = nil
	fake.createReservedInstancesListingRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateReservedInstancesListingOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateReservedInstancesListingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateReservedInstancesListingOutput) {
	fake.createReservedInstancesListingRequestMutex.Lock()
	defer fake.createReservedInstancesListingRequestMutex.Unlock()
	fake.CreateReservedInstancesListingRequestStub = nil
	if fake.createReservedInstancesListingRequestReturnsOnCall == nil {
		fake.createReservedInstancesListingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateReservedInstancesListingOutput
		})
	}
	fake.createReservedInstancesListingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateReservedInstancesListingOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateReservedInstancesListingWithContext(arg1 aws.Context, arg2 *ec2.CreateReservedInstancesListingInput, arg3 ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error) {
	fake.createReservedInstancesListingWithContextMutex.Lock()
	ret, specificReturn := fake.createReservedInstancesListingWithContextReturnsOnCall[len(fake.createReservedInstancesListingWithContextArgsForCall)]
	fake.createReservedInstancesListingWithContextArgsForCall = append(fake.createReservedInstancesListingWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateReservedInstancesListingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateReservedInstancesListingWithContext", []interface{}{arg1, arg2, arg3})
	fake.createReservedInstancesListingWithContextMutex.Unlock()
	if fake.CreateReservedInstancesListingWithContextStub != nil {
		return fake.CreateReservedInstancesListingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReservedInstancesListingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateReservedInstancesListingWithContextCallCount() int {
	fake.createReservedInstancesListingWithContextMutex.RLock()
	defer fake.createReservedInstancesListingWithContextMutex.RUnlock()
	return len(fake.createReservedInstancesListingWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateReservedInstancesListingWithContextCalls(stub func(aws.Context, *ec2.CreateReservedInstancesListingInput, ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error)) {
	fake.createReservedInstancesListingWithContextMutex.Lock()
	defer fake.createReservedInstancesListingWithContextMutex.Unlock()
	fake.CreateReservedInstancesListingWithContextStub = stub
}

func (fake *FakeEC2API) CreateReservedInstancesListingWithContextArgsForCall(i int) (aws.Context, *ec2.CreateReservedInstancesListingInput, []request.Option) {
	fake.createReservedInstancesListingWithContextMutex.RLock()
	defer fake.createReservedInstancesListingWithContextMutex.RUnlock()
	argsForCall := fake.createReservedInstancesListingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateReservedInstancesListingWithContextReturns(result1 *ec2.CreateReservedInstancesListingOutput, result2 error) {
	fake.createReservedInstancesListingWithContextMutex.Lock()
	defer fake.createReservedInstancesListingWithContextMutex.Unlock()
	fake.CreateReservedInstancesListingWithContextStub = nil
	fake.createReservedInstancesListingWithContextReturns = struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateReservedInstancesListingWithContextReturnsOnCall(i int, result1 *ec2.CreateReservedInstancesListingOutput, result2 error) {
	fake.createReservedInstancesListingWithContextMutex.Lock()
	defer fake.createReservedInstancesListingWithContextMutex.Unlock()
	fake.CreateReservedInstancesListingWithContextStub = nil
	if fake.createReservedInstancesListingWithContextReturnsOnCall == nil {
		fake.createReservedInstancesListingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateReservedInstancesListingOutput
			result2 error
		})
	}
	fake.createReservedInstancesListingWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateReservedInstancesListingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRoute(arg1 *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		arg1 *ec2.CreateRouteInput
	}{arg1})
	fake.recordInvocation("CreateRoute", []interface{}{arg1})
	fake.createRouteMutex.Unlock()
	if fake.CreateRouteStub != nil {
		return fake.CreateRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *FakeEC2API) CreateRouteCalls(stub func(*ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error)) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = stub
}

func (fake *FakeEC2API) CreateRouteArgsForCall(i int) *ec2.CreateRouteInput {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	argsForCall := fake.createRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateRouteReturns(result1 *ec2.CreateRouteOutput, result2 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteReturnsOnCall(i int, result1 *ec2.CreateRouteOutput, result2 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateRouteOutput
			result2 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteRequest(arg1 *ec2.CreateRouteInput) (*request.Request, *ec2.CreateRouteOutput) {
	fake.createRouteRequestMutex.Lock()
	ret, specificReturn := fake.createRouteRequestReturnsOnCall[len(fake.createRouteRequestArgsForCall)]
	fake.createRouteRequestArgsForCall = append(fake.createRouteRequestArgsForCall, struct {
		arg1 *ec2.CreateRouteInput
	}{arg1})
	fake.recordInvocation("CreateRouteRequest", []interface{}{arg1})
	fake.createRouteRequestMutex.Unlock()
	if fake.CreateRouteRequestStub != nil {
		return fake.CreateRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateRouteRequestCallCount() int {
	fake.createRouteRequestMutex.RLock()
	defer fake.createRouteRequestMutex.RUnlock()
	return len(fake.createRouteRequestArgsForCall)
}

func (fake *FakeEC2API) CreateRouteRequestCalls(stub func(*ec2.CreateRouteInput) (*request.Request, *ec2.CreateRouteOutput)) {
	fake.createRouteRequestMutex.Lock()
	defer fake.createRouteRequestMutex.Unlock()
	fake.CreateRouteRequestStub = stub
}

func (fake *FakeEC2API) CreateRouteRequestArgsForCall(i int) *ec2.CreateRouteInput {
	fake.createRouteRequestMutex.RLock()
	defer fake.createRouteRequestMutex.RUnlock()
	argsForCall := fake.createRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateRouteRequestReturns(result1 *request.Request, result2 *ec2.CreateRouteOutput) {
	fake.createRouteRequestMutex.Lock()
	defer fake.createRouteRequestMutex.Unlock()
	fake.CreateRouteRequestStub = nil
	fake.createRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateRouteOutput) {
	fake.createRouteRequestMutex.Lock()
	defer fake.createRouteRequestMutex.Unlock()
	fake.CreateRouteRequestStub = nil
	if fake.createRouteRequestReturnsOnCall == nil {
		fake.createRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateRouteOutput
		})
	}
	fake.createRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteTable(arg1 *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	fake.createRouteTableMutex.Lock()
	ret, specificReturn := fake.createRouteTableReturnsOnCall[len(fake.createRouteTableArgsForCall)]
	fake.createRouteTableArgsForCall = append(fake.createRouteTableArgsForCall, struct {
		arg1 *ec2.CreateRouteTableInput
	}{arg1})
	fake.recordInvocation("CreateRouteTable", []interface{}{arg1})
	fake.createRouteTableMutex.Unlock()
	if fake.CreateRouteTableStub != nil {
		return fake.CreateRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateRouteTableCallCount() int {
	fake.createRouteTableMutex.RLock()
	defer fake.createRouteTableMutex.RUnlock()
	return len(fake.createRouteTableArgsForCall)
}

func (fake *FakeEC2API) CreateRouteTableCalls(stub func(*ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error)) {
	fake.createRouteTableMutex.Lock()
	defer fake.createRouteTableMutex.Unlock()
	fake.CreateRouteTableStub = stub
}

func (fake *FakeEC2API) CreateRouteTableArgsForCall(i int) *ec2.CreateRouteTableInput {
	fake.createRouteTableMutex.RLock()
	defer fake.createRouteTableMutex.RUnlock()
	argsForCall := fake.createRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateRouteTableReturns(result1 *ec2.CreateRouteTableOutput, result2 error) {
	fake.createRouteTableMutex.Lock()
	defer fake.createRouteTableMutex.Unlock()
	fake.CreateRouteTableStub = nil
	fake.createRouteTableReturns = struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteTableReturnsOnCall(i int, result1 *ec2.CreateRouteTableOutput, result2 error) {
	fake.createRouteTableMutex.Lock()
	defer fake.createRouteTableMutex.Unlock()
	fake.CreateRouteTableStub = nil
	if fake.createRouteTableReturnsOnCall == nil {
		fake.createRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateRouteTableOutput
			result2 error
		})
	}
	fake.createRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteTableRequest(arg1 *ec2.CreateRouteTableInput) (*request.Request, *ec2.CreateRouteTableOutput) {
	fake.createRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.createRouteTableRequestReturnsOnCall[len(fake.createRouteTableRequestArgsForCall)]
	fake.createRouteTableRequestArgsForCall = append(fake.createRouteTableRequestArgsForCall, struct {
		arg1 *ec2.CreateRouteTableInput
	}{arg1})
	fake.recordInvocation("CreateRouteTableRequest", []interface{}{arg1})
	fake.createRouteTableRequestMutex.Unlock()
	if fake.CreateRouteTableRequestStub != nil {
		return fake.CreateRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateRouteTableRequestCallCount() int {
	fake.createRouteTableRequestMutex.RLock()
	defer fake.createRouteTableRequestMutex.RUnlock()
	return len(fake.createRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) CreateRouteTableRequestCalls(stub func(*ec2.CreateRouteTableInput) (*request.Request, *ec2.CreateRouteTableOutput)) {
	fake.createRouteTableRequestMutex.Lock()
	defer fake.createRouteTableRequestMutex.Unlock()
	fake.CreateRouteTableRequestStub = stub
}

func (fake *FakeEC2API) CreateRouteTableRequestArgsForCall(i int) *ec2.CreateRouteTableInput {
	fake.createRouteTableRequestMutex.RLock()
	defer fake.createRouteTableRequestMutex.RUnlock()
	argsForCall := fake.createRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateRouteTableRequestReturns(result1 *request.Request, result2 *ec2.CreateRouteTableOutput) {
	fake.createRouteTableRequestMutex.Lock()
	defer fake.createRouteTableRequestMutex.Unlock()
	fake.CreateRouteTableRequestStub = nil
	fake.createRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateRouteTableOutput) {
	fake.createRouteTableRequestMutex.Lock()
	defer fake.createRouteTableRequestMutex.Unlock()
	fake.CreateRouteTableRequestStub = nil
	if fake.createRouteTableRequestReturnsOnCall == nil {
		fake.createRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateRouteTableOutput
		})
	}
	fake.createRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteTableWithContext(arg1 aws.Context, arg2 *ec2.CreateRouteTableInput, arg3 ...request.Option) (*ec2.CreateRouteTableOutput, error) {
	fake.createRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.createRouteTableWithContextReturnsOnCall[len(fake.createRouteTableWithContextArgsForCall)]
	fake.createRouteTableWithContextArgsForCall = append(fake.createRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.createRouteTableWithContextMutex.Unlock()
	if fake.CreateRouteTableWithContextStub != nil {
		return fake.CreateRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateRouteTableWithContextCallCount() int {
	fake.createRouteTableWithContextMutex.RLock()
	defer fake.createRouteTableWithContextMutex.RUnlock()
	return len(fake.createRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateRouteTableWithContextCalls(stub func(aws.Context, *ec2.CreateRouteTableInput, ...request.Option) (*ec2.CreateRouteTableOutput, error)) {
	fake.createRouteTableWithContextMutex.Lock()
	defer fake.createRouteTableWithContextMutex.Unlock()
	fake.CreateRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) CreateRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.CreateRouteTableInput, []request.Option) {
	fake.createRouteTableWithContextMutex.RLock()
	defer fake.createRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.createRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateRouteTableWithContextReturns(result1 *ec2.CreateRouteTableOutput, result2 error) {
	fake.createRouteTableWithContextMutex.Lock()
	defer fake.createRouteTableWithContextMutex.Unlock()
	fake.CreateRouteTableWithContextStub = nil
	fake.createRouteTableWithContextReturns = struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteTableWithContextReturnsOnCall(i int, result1 *ec2.CreateRouteTableOutput, result2 error) {
	fake.createRouteTableWithContextMutex.Lock()
	defer fake.createRouteTableWithContextMutex.Unlock()
	fake.CreateRouteTableWithContextStub = nil
	if fake.createRouteTableWithContextReturnsOnCall == nil {
		fake.createRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateRouteTableOutput
			result2 error
		})
	}
	fake.createRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteWithContext(arg1 aws.Context, arg2 *ec2.CreateRouteInput, arg3 ...request.Option) (*ec2.CreateRouteOutput, error) {
	fake.createRouteWithContextMutex.Lock()
	ret, specificReturn := fake.createRouteWithContextReturnsOnCall[len(fake.createRouteWithContextArgsForCall)]
	fake.createRouteWithContextArgsForCall = append(fake.createRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.createRouteWithContextMutex.Unlock()
	if fake.CreateRouteWithContextStub != nil {
		return fake.CreateRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateRouteWithContextCallCount() int {
	fake.createRouteWithContextMutex.RLock()
	defer fake.createRouteWithContextMutex.RUnlock()
	return len(fake.createRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateRouteWithContextCalls(stub func(aws.Context, *ec2.CreateRouteInput, ...request.Option) (*ec2.CreateRouteOutput, error)) {
	fake.createRouteWithContextMutex.Lock()
	defer fake.createRouteWithContextMutex.Unlock()
	fake.CreateRouteWithContextStub = stub
}

func (fake *FakeEC2API) CreateRouteWithContextArgsForCall(i int) (aws.Context, *ec2.CreateRouteInput, []request.Option) {
	fake.createRouteWithContextMutex.RLock()
	defer fake.createRouteWithContextMutex.RUnlock()
	argsForCall := fake.createRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateRouteWithContextReturns(result1 *ec2.CreateRouteOutput, result2 error) {
	fake.createRouteWithContextMutex.Lock()
	defer fake.createRouteWithContextMutex.Unlock()
	fake.CreateRouteWithContextStub = nil
	fake.createRouteWithContextReturns = struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateRouteWithContextReturnsOnCall(i int, result1 *ec2.CreateRouteOutput, result2 error) {
	fake.createRouteWithContextMutex.Lock()
	defer fake.createRouteWithContextMutex.Unlock()
	fake.CreateRouteWithContextStub = nil
	if fake.createRouteWithContextReturnsOnCall == nil {
		fake.createRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateRouteOutput
			result2 error
		})
	}
	fake.createRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSecurityGroup(arg1 *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	fake.createSecurityGroupMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupReturnsOnCall[len(fake.createSecurityGroupArgsForCall)]
	fake.createSecurityGroupArgsForCall = append(fake.createSecurityGroupArgsForCall, struct {
		arg1 *ec2.CreateSecurityGroupInput
	}{arg1})
	fake.recordInvocation("CreateSecurityGroup", []interface{}{arg1})
	fake.createSecurityGroupMutex.Unlock()
	if fake.CreateSecurityGroupStub != nil {
		return fake.CreateSecurityGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSecurityGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSecurityGroupCallCount() int {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	return len(fake.createSecurityGroupArgsForCall)
}

func (fake *FakeEC2API) CreateSecurityGroupCalls(stub func(*ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error)) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = stub
}

func (fake *FakeEC2API) CreateSecurityGroupArgsForCall(i int) *ec2.CreateSecurityGroupInput {
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	argsForCall := fake.createSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSecurityGroupReturns(result1 *ec2.CreateSecurityGroupOutput, result2 error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = nil
	fake.createSecurityGroupReturns = struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSecurityGroupReturnsOnCall(i int, result1 *ec2.CreateSecurityGroupOutput, result2 error) {
	fake.createSecurityGroupMutex.Lock()
	defer fake.createSecurityGroupMutex.Unlock()
	fake.CreateSecurityGroupStub = nil
	if fake.createSecurityGroupReturnsOnCall == nil {
		fake.createSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateSecurityGroupOutput
			result2 error
		})
	}
	fake.createSecurityGroupReturnsOnCall[i] = struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSecurityGroupRequest(arg1 *ec2.CreateSecurityGroupInput) (*request.Request, *ec2.CreateSecurityGroupOutput) {
	fake.createSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupRequestReturnsOnCall[len(fake.createSecurityGroupRequestArgsForCall)]
	fake.createSecurityGroupRequestArgsForCall = append(fake.createSecurityGroupRequestArgsForCall, struct {
		arg1 *ec2.CreateSecurityGroupInput
	}{arg1})
	fake.recordInvocation("CreateSecurityGroupRequest", []interface{}{arg1})
	fake.createSecurityGroupRequestMutex.Unlock()
	if fake.CreateSecurityGroupRequestStub != nil {
		return fake.CreateSecurityGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSecurityGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSecurityGroupRequestCallCount() int {
	fake.createSecurityGroupRequestMutex.RLock()
	defer fake.createSecurityGroupRequestMutex.RUnlock()
	return len(fake.createSecurityGroupRequestArgsForCall)
}

func (fake *FakeEC2API) CreateSecurityGroupRequestCalls(stub func(*ec2.CreateSecurityGroupInput) (*request.Request, *ec2.CreateSecurityGroupOutput)) {
	fake.createSecurityGroupRequestMutex.Lock()
	defer fake.createSecurityGroupRequestMutex.Unlock()
	fake.CreateSecurityGroupRequestStub = stub
}

func (fake *FakeEC2API) CreateSecurityGroupRequestArgsForCall(i int) *ec2.CreateSecurityGroupInput {
	fake.createSecurityGroupRequestMutex.RLock()
	defer fake.createSecurityGroupRequestMutex.RUnlock()
	argsForCall := fake.createSecurityGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSecurityGroupRequestReturns(result1 *request.Request, result2 *ec2.CreateSecurityGroupOutput) {
	fake.createSecurityGroupRequestMutex.Lock()
	defer fake.createSecurityGroupRequestMutex.Unlock()
	fake.CreateSecurityGroupRequestStub = nil
	fake.createSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateSecurityGroupOutput) {
	fake.createSecurityGroupRequestMutex.Lock()
	defer fake.createSecurityGroupRequestMutex.Unlock()
	fake.CreateSecurityGroupRequestStub = nil
	if fake.createSecurityGroupRequestReturnsOnCall == nil {
		fake.createSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateSecurityGroupOutput
		})
	}
	fake.createSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSecurityGroupWithContext(arg1 aws.Context, arg2 *ec2.CreateSecurityGroupInput, arg3 ...request.Option) (*ec2.CreateSecurityGroupOutput, error) {
	fake.createSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createSecurityGroupWithContextReturnsOnCall[len(fake.createSecurityGroupWithContextArgsForCall)]
	fake.createSecurityGroupWithContextArgsForCall = append(fake.createSecurityGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSecurityGroupWithContextMutex.Unlock()
	if fake.CreateSecurityGroupWithContextStub != nil {
		return fake.CreateSecurityGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSecurityGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSecurityGroupWithContextCallCount() int {
	fake.createSecurityGroupWithContextMutex.RLock()
	defer fake.createSecurityGroupWithContextMutex.RUnlock()
	return len(fake.createSecurityGroupWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateSecurityGroupWithContextCalls(stub func(aws.Context, *ec2.CreateSecurityGroupInput, ...request.Option) (*ec2.CreateSecurityGroupOutput, error)) {
	fake.createSecurityGroupWithContextMutex.Lock()
	defer fake.createSecurityGroupWithContextMutex.Unlock()
	fake.CreateSecurityGroupWithContextStub = stub
}

func (fake *FakeEC2API) CreateSecurityGroupWithContextArgsForCall(i int) (aws.Context, *ec2.CreateSecurityGroupInput, []request.Option) {
	fake.createSecurityGroupWithContextMutex.RLock()
	defer fake.createSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.createSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateSecurityGroupWithContextReturns(result1 *ec2.CreateSecurityGroupOutput, result2 error) {
	fake.createSecurityGroupWithContextMutex.Lock()
	defer fake.createSecurityGroupWithContextMutex.Unlock()
	fake.CreateSecurityGroupWithContextStub = nil
	fake.createSecurityGroupWithContextReturns = struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSecurityGroupWithContextReturnsOnCall(i int, result1 *ec2.CreateSecurityGroupOutput, result2 error) {
	fake.createSecurityGroupWithContextMutex.Lock()
	defer fake.createSecurityGroupWithContextMutex.Unlock()
	fake.CreateSecurityGroupWithContextStub = nil
	if fake.createSecurityGroupWithContextReturnsOnCall == nil {
		fake.createSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateSecurityGroupOutput
			result2 error
		})
	}
	fake.createSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSnapshot(arg1 *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	fake.createSnapshotMutex.Lock()
	ret, specificReturn := fake.createSnapshotReturnsOnCall[len(fake.createSnapshotArgsForCall)]
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		arg1 *ec2.CreateSnapshotInput
	}{arg1})
	fake.recordInvocation("CreateSnapshot", []interface{}{arg1})
	fake.createSnapshotMutex.Unlock()
	if fake.CreateSnapshotStub != nil {
		return fake.CreateSnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *FakeEC2API) CreateSnapshotCalls(stub func(*ec2.CreateSnapshotInput) (*ec2.Snapshot, error)) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = stub
}

func (fake *FakeEC2API) CreateSnapshotArgsForCall(i int) *ec2.CreateSnapshotInput {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	argsForCall := fake.createSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSnapshotReturns(result1 *ec2.Snapshot, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 *ec2.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSnapshotReturnsOnCall(i int, result1 *ec2.Snapshot, result2 error) {
	fake.createSnapshotMutex.Lock()
	defer fake.createSnapshotMutex.Unlock()
	fake.CreateSnapshotStub = nil
	if fake.createSnapshotReturnsOnCall == nil {
		fake.createSnapshotReturnsOnCall = make(map[int]struct {
			result1 *ec2.Snapshot
			result2 error
		})
	}
	fake.createSnapshotReturnsOnCall[i] = struct {
		result1 *ec2.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSnapshotRequest(arg1 *ec2.CreateSnapshotInput) (*request.Request, *ec2.Snapshot) {
	fake.createSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.createSnapshotRequestReturnsOnCall[len(fake.createSnapshotRequestArgsForCall)]
	fake.createSnapshotRequestArgsForCall = append(fake.createSnapshotRequestArgsForCall, struct {
		arg1 *ec2.CreateSnapshotInput
	}{arg1})
	fake.recordInvocation("CreateSnapshotRequest", []interface{}{arg1})
	fake.createSnapshotRequestMutex.Unlock()
	if fake.CreateSnapshotRequestStub != nil {
		return fake.CreateSnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSnapshotRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSnapshotRequestCallCount() int {
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	return len(fake.createSnapshotRequestArgsForCall)
}

func (fake *FakeEC2API) CreateSnapshotRequestCalls(stub func(*ec2.CreateSnapshotInput) (*request.Request, *ec2.Snapshot)) {
	fake.createSnapshotRequestMutex.Lock()
	defer fake.createSnapshotRequestMutex.Unlock()
	fake.CreateSnapshotRequestStub = stub
}

func (fake *FakeEC2API) CreateSnapshotRequestArgsForCall(i int) *ec2.CreateSnapshotInput {
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	argsForCall := fake.createSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSnapshotRequestReturns(result1 *request.Request, result2 *ec2.Snapshot) {
	fake.createSnapshotRequestMutex.Lock()
	defer fake.createSnapshotRequestMutex.Unlock()
	fake.CreateSnapshotRequestStub = nil
	fake.createSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.Snapshot
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.Snapshot) {
	fake.createSnapshotRequestMutex.Lock()
	defer fake.createSnapshotRequestMutex.Unlock()
	fake.CreateSnapshotRequestStub = nil
	if fake.createSnapshotRequestReturnsOnCall == nil {
		fake.createSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.Snapshot
		})
	}
	fake.createSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.Snapshot
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSnapshotWithContext(arg1 aws.Context, arg2 *ec2.CreateSnapshotInput, arg3 ...request.Option) (*ec2.Snapshot, error) {
	fake.createSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.createSnapshotWithContextReturnsOnCall[len(fake.createSnapshotWithContextArgsForCall)]
	fake.createSnapshotWithContextArgsForCall = append(fake.createSnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSnapshotWithContextMutex.Unlock()
	if fake.CreateSnapshotWithContextStub != nil {
		return fake.CreateSnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSnapshotWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSnapshotWithContextCallCount() int {
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	return len(fake.createSnapshotWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateSnapshotWithContextCalls(stub func(aws.Context, *ec2.CreateSnapshotInput, ...request.Option) (*ec2.Snapshot, error)) {
	fake.createSnapshotWithContextMutex.Lock()
	defer fake.createSnapshotWithContextMutex.Unlock()
	fake.CreateSnapshotWithContextStub = stub
}

func (fake *FakeEC2API) CreateSnapshotWithContextArgsForCall(i int) (aws.Context, *ec2.CreateSnapshotInput, []request.Option) {
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.createSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateSnapshotWithContextReturns(result1 *ec2.Snapshot, result2 error) {
	fake.createSnapshotWithContextMutex.Lock()
	defer fake.createSnapshotWithContextMutex.Unlock()
	fake.CreateSnapshotWithContextStub = nil
	fake.createSnapshotWithContextReturns = struct {
		result1 *ec2.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSnapshotWithContextReturnsOnCall(i int, result1 *ec2.Snapshot, result2 error) {
	fake.createSnapshotWithContextMutex.Lock()
	defer fake.createSnapshotWithContextMutex.Unlock()
	fake.CreateSnapshotWithContextStub = nil
	if fake.createSnapshotWithContextReturnsOnCall == nil {
		fake.createSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.Snapshot
			result2 error
		})
	}
	fake.createSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *ec2.Snapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscription(arg1 *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	fake.createSpotDatafeedSubscriptionMutex.Lock()
	ret, specificReturn := fake.createSpotDatafeedSubscriptionReturnsOnCall[len(fake.createSpotDatafeedSubscriptionArgsForCall)]
	fake.createSpotDatafeedSubscriptionArgsForCall = append(fake.createSpotDatafeedSubscriptionArgsForCall, struct {
		arg1 *ec2.CreateSpotDatafeedSubscriptionInput
	}{arg1})
	fake.recordInvocation("CreateSpotDatafeedSubscription", []interface{}{arg1})
	fake.createSpotDatafeedSubscriptionMutex.Unlock()
	if fake.CreateSpotDatafeedSubscriptionStub != nil {
		return fake.CreateSpotDatafeedSubscriptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSpotDatafeedSubscriptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionCallCount() int {
	fake.createSpotDatafeedSubscriptionMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionMutex.RUnlock()
	return len(fake.createSpotDatafeedSubscriptionArgsForCall)
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionCalls(stub func(*ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)) {
	fake.createSpotDatafeedSubscriptionMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionStub = stub
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionArgsForCall(i int) *ec2.CreateSpotDatafeedSubscriptionInput {
	fake.createSpotDatafeedSubscriptionMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionMutex.RUnlock()
	argsForCall := fake.createSpotDatafeedSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionReturns(result1 *ec2.CreateSpotDatafeedSubscriptionOutput, result2 error) {
	fake.createSpotDatafeedSubscriptionMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionStub = nil
	fake.createSpotDatafeedSubscriptionReturns = struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionReturnsOnCall(i int, result1 *ec2.CreateSpotDatafeedSubscriptionOutput, result2 error) {
	fake.createSpotDatafeedSubscriptionMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionStub = nil
	if fake.createSpotDatafeedSubscriptionReturnsOnCall == nil {
		fake.createSpotDatafeedSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateSpotDatafeedSubscriptionOutput
			result2 error
		})
	}
	fake.createSpotDatafeedSubscriptionReturnsOnCall[i] = struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionRequest(arg1 *ec2.CreateSpotDatafeedSubscriptionInput) (*request.Request, *ec2.CreateSpotDatafeedSubscriptionOutput) {
	fake.createSpotDatafeedSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.createSpotDatafeedSubscriptionRequestReturnsOnCall[len(fake.createSpotDatafeedSubscriptionRequestArgsForCall)]
	fake.createSpotDatafeedSubscriptionRequestArgsForCall = append(fake.createSpotDatafeedSubscriptionRequestArgsForCall, struct {
		arg1 *ec2.CreateSpotDatafeedSubscriptionInput
	}{arg1})
	fake.recordInvocation("CreateSpotDatafeedSubscriptionRequest", []interface{}{arg1})
	fake.createSpotDatafeedSubscriptionRequestMutex.Unlock()
	if fake.CreateSpotDatafeedSubscriptionRequestStub != nil {
		return fake.CreateSpotDatafeedSubscriptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSpotDatafeedSubscriptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionRequestCallCount() int {
	fake.createSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionRequestMutex.RUnlock()
	return len(fake.createSpotDatafeedSubscriptionRequestArgsForCall)
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionRequestCalls(stub func(*ec2.CreateSpotDatafeedSubscriptionInput) (*request.Request, *ec2.CreateSpotDatafeedSubscriptionOutput)) {
	fake.createSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionRequestStub = stub
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionRequestArgsForCall(i int) *ec2.CreateSpotDatafeedSubscriptionInput {
	fake.createSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.createSpotDatafeedSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionRequestReturns(result1 *request.Request, result2 *ec2.CreateSpotDatafeedSubscriptionOutput) {
	fake.createSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionRequestStub = nil
	fake.createSpotDatafeedSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateSpotDatafeedSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateSpotDatafeedSubscriptionOutput) {
	fake.createSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionRequestStub = nil
	if fake.createSpotDatafeedSubscriptionRequestReturnsOnCall == nil {
		fake.createSpotDatafeedSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateSpotDatafeedSubscriptionOutput
		})
	}
	fake.createSpotDatafeedSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateSpotDatafeedSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionWithContext(arg1 aws.Context, arg2 *ec2.CreateSpotDatafeedSubscriptionInput, arg3 ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	fake.createSpotDatafeedSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.createSpotDatafeedSubscriptionWithContextReturnsOnCall[len(fake.createSpotDatafeedSubscriptionWithContextArgsForCall)]
	fake.createSpotDatafeedSubscriptionWithContextArgsForCall = append(fake.createSpotDatafeedSubscriptionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateSpotDatafeedSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSpotDatafeedSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSpotDatafeedSubscriptionWithContextMutex.Unlock()
	if fake.CreateSpotDatafeedSubscriptionWithContextStub != nil {
		return fake.CreateSpotDatafeedSubscriptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSpotDatafeedSubscriptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionWithContextCallCount() int {
	fake.createSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	return len(fake.createSpotDatafeedSubscriptionWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionWithContextCalls(stub func(aws.Context, *ec2.CreateSpotDatafeedSubscriptionInput, ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)) {
	fake.createSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionWithContextStub = stub
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionWithContextArgsForCall(i int) (aws.Context, *ec2.CreateSpotDatafeedSubscriptionInput, []request.Option) {
	fake.createSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.createSpotDatafeedSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionWithContextReturns(result1 *ec2.CreateSpotDatafeedSubscriptionOutput, result2 error) {
	fake.createSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionWithContextStub = nil
	fake.createSpotDatafeedSubscriptionWithContextReturns = struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSpotDatafeedSubscriptionWithContextReturnsOnCall(i int, result1 *ec2.CreateSpotDatafeedSubscriptionOutput, result2 error) {
	fake.createSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.createSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.CreateSpotDatafeedSubscriptionWithContextStub = nil
	if fake.createSpotDatafeedSubscriptionWithContextReturnsOnCall == nil {
		fake.createSpotDatafeedSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateSpotDatafeedSubscriptionOutput
			result2 error
		})
	}
	fake.createSpotDatafeedSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSubnet(arg1 *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	fake.createSubnetMutex.Lock()
	ret, specificReturn := fake.createSubnetReturnsOnCall[len(fake.createSubnetArgsForCall)]
	fake.createSubnetArgsForCall = append(fake.createSubnetArgsForCall, struct {
		arg1 *ec2.CreateSubnetInput
	}{arg1})
	fake.recordInvocation("CreateSubnet", []interface{}{arg1})
	fake.createSubnetMutex.Unlock()
	if fake.CreateSubnetStub != nil {
		return fake.CreateSubnetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSubnetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSubnetCallCount() int {
	fake.createSubnetMutex.RLock()
	defer fake.createSubnetMutex.RUnlock()
	return len(fake.createSubnetArgsForCall)
}

func (fake *FakeEC2API) CreateSubnetCalls(stub func(*ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error)) {
	fake.createSubnetMutex.Lock()
	defer fake.createSubnetMutex.Unlock()
	fake.CreateSubnetStub = stub
}

func (fake *FakeEC2API) CreateSubnetArgsForCall(i int) *ec2.CreateSubnetInput {
	fake.createSubnetMutex.RLock()
	defer fake.createSubnetMutex.RUnlock()
	argsForCall := fake.createSubnetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSubnetReturns(result1 *ec2.CreateSubnetOutput, result2 error) {
	fake.createSubnetMutex.Lock()
	defer fake.createSubnetMutex.Unlock()
	fake.CreateSubnetStub = nil
	fake.createSubnetReturns = struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSubnetReturnsOnCall(i int, result1 *ec2.CreateSubnetOutput, result2 error) {
	fake.createSubnetMutex.Lock()
	defer fake.createSubnetMutex.Unlock()
	fake.CreateSubnetStub = nil
	if fake.createSubnetReturnsOnCall == nil {
		fake.createSubnetReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateSubnetOutput
			result2 error
		})
	}
	fake.createSubnetReturnsOnCall[i] = struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSubnetRequest(arg1 *ec2.CreateSubnetInput) (*request.Request, *ec2.CreateSubnetOutput) {
	fake.createSubnetRequestMutex.Lock()
	ret, specificReturn := fake.createSubnetRequestReturnsOnCall[len(fake.createSubnetRequestArgsForCall)]
	fake.createSubnetRequestArgsForCall = append(fake.createSubnetRequestArgsForCall, struct {
		arg1 *ec2.CreateSubnetInput
	}{arg1})
	fake.recordInvocation("CreateSubnetRequest", []interface{}{arg1})
	fake.createSubnetRequestMutex.Unlock()
	if fake.CreateSubnetRequestStub != nil {
		return fake.CreateSubnetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSubnetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSubnetRequestCallCount() int {
	fake.createSubnetRequestMutex.RLock()
	defer fake.createSubnetRequestMutex.RUnlock()
	return len(fake.createSubnetRequestArgsForCall)
}

func (fake *FakeEC2API) CreateSubnetRequestCalls(stub func(*ec2.CreateSubnetInput) (*request.Request, *ec2.CreateSubnetOutput)) {
	fake.createSubnetRequestMutex.Lock()
	defer fake.createSubnetRequestMutex.Unlock()
	fake.CreateSubnetRequestStub = stub
}

func (fake *FakeEC2API) CreateSubnetRequestArgsForCall(i int) *ec2.CreateSubnetInput {
	fake.createSubnetRequestMutex.RLock()
	defer fake.createSubnetRequestMutex.RUnlock()
	argsForCall := fake.createSubnetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateSubnetRequestReturns(result1 *request.Request, result2 *ec2.CreateSubnetOutput) {
	fake.createSubnetRequestMutex.Lock()
	defer fake.createSubnetRequestMutex.Unlock()
	fake.CreateSubnetRequestStub = nil
	fake.createSubnetRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateSubnetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSubnetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateSubnetOutput) {
	fake.createSubnetRequestMutex.Lock()
	defer fake.createSubnetRequestMutex.Unlock()
	fake.CreateSubnetRequestStub = nil
	if fake.createSubnetRequestReturnsOnCall == nil {
		fake.createSubnetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateSubnetOutput
		})
	}
	fake.createSubnetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateSubnetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSubnetWithContext(arg1 aws.Context, arg2 *ec2.CreateSubnetInput, arg3 ...request.Option) (*ec2.CreateSubnetOutput, error) {
	fake.createSubnetWithContextMutex.Lock()
	ret, specificReturn := fake.createSubnetWithContextReturnsOnCall[len(fake.createSubnetWithContextArgsForCall)]
	fake.createSubnetWithContextArgsForCall = append(fake.createSubnetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateSubnetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSubnetWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSubnetWithContextMutex.Unlock()
	if fake.CreateSubnetWithContextStub != nil {
		return fake.CreateSubnetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSubnetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateSubnetWithContextCallCount() int {
	fake.createSubnetWithContextMutex.RLock()
	defer fake.createSubnetWithContextMutex.RUnlock()
	return len(fake.createSubnetWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateSubnetWithContextCalls(stub func(aws.Context, *ec2.CreateSubnetInput, ...request.Option) (*ec2.CreateSubnetOutput, error)) {
	fake.createSubnetWithContextMutex.Lock()
	defer fake.createSubnetWithContextMutex.Unlock()
	fake.CreateSubnetWithContextStub = stub
}

func (fake *FakeEC2API) CreateSubnetWithContextArgsForCall(i int) (aws.Context, *ec2.CreateSubnetInput, []request.Option) {
	fake.createSubnetWithContextMutex.RLock()
	defer fake.createSubnetWithContextMutex.RUnlock()
	argsForCall := fake.createSubnetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateSubnetWithContextReturns(result1 *ec2.CreateSubnetOutput, result2 error) {
	fake.createSubnetWithContextMutex.Lock()
	defer fake.createSubnetWithContextMutex.Unlock()
	fake.CreateSubnetWithContextStub = nil
	fake.createSubnetWithContextReturns = struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateSubnetWithContextReturnsOnCall(i int, result1 *ec2.CreateSubnetOutput, result2 error) {
	fake.createSubnetWithContextMutex.Lock()
	defer fake.createSubnetWithContextMutex.Unlock()
	fake.CreateSubnetWithContextStub = nil
	if fake.createSubnetWithContextReturnsOnCall == nil {
		fake.createSubnetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateSubnetOutput
			result2 error
		})
	}
	fake.createSubnetWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTags(arg1 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	fake.createTagsMutex.Lock()
	ret, specificReturn := fake.createTagsReturnsOnCall[len(fake.createTagsArgsForCall)]
	fake.createTagsArgsForCall = append(fake.createTagsArgsForCall, struct {
		arg1 *ec2.CreateTagsInput
	}{arg1})
	fake.recordInvocation("CreateTags", []interface{}{arg1})
	fake.createTagsMutex.Unlock()
	if fake.CreateTagsStub != nil {
		return fake.CreateTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTagsCallCount() int {
	fake.createTagsMutex.RLock()
	defer fake.createTagsMutex.RUnlock()
	return len(fake.createTagsArgsForCall)
}

func (fake *FakeEC2API) CreateTagsCalls(stub func(*ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error)) {
	fake.createTagsMutex.Lock()
	defer fake.createTagsMutex.Unlock()
	fake.CreateTagsStub = stub
}

func (fake *FakeEC2API) CreateTagsArgsForCall(i int) *ec2.CreateTagsInput {
	fake.createTagsMutex.RLock()
	defer fake.createTagsMutex.RUnlock()
	argsForCall := fake.createTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTagsReturns(result1 *ec2.CreateTagsOutput, result2 error) {
	fake.createTagsMutex.Lock()
	defer fake.createTagsMutex.Unlock()
	fake.CreateTagsStub = nil
	fake.createTagsReturns = struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTagsReturnsOnCall(i int, result1 *ec2.CreateTagsOutput, result2 error) {
	fake.createTagsMutex.Lock()
	defer fake.createTagsMutex.Unlock()
	fake.CreateTagsStub = nil
	if fake.createTagsReturnsOnCall == nil {
		fake.createTagsReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTagsOutput
			result2 error
		})
	}
	fake.createTagsReturnsOnCall[i] = struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTagsRequest(arg1 *ec2.CreateTagsInput) (*request.Request, *ec2.CreateTagsOutput) {
	fake.createTagsRequestMutex.Lock()
	ret, specificReturn := fake.createTagsRequestReturnsOnCall[len(fake.createTagsRequestArgsForCall)]
	fake.createTagsRequestArgsForCall = append(fake.createTagsRequestArgsForCall, struct {
		arg1 *ec2.CreateTagsInput
	}{arg1})
	fake.recordInvocation("CreateTagsRequest", []interface{}{arg1})
	fake.createTagsRequestMutex.Unlock()
	if fake.CreateTagsRequestStub != nil {
		return fake.CreateTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTagsRequestCallCount() int {
	fake.createTagsRequestMutex.RLock()
	defer fake.createTagsRequestMutex.RUnlock()
	return len(fake.createTagsRequestArgsForCall)
}

func (fake *FakeEC2API) CreateTagsRequestCalls(stub func(*ec2.CreateTagsInput) (*request.Request, *ec2.CreateTagsOutput)) {
	fake.createTagsRequestMutex.Lock()
	defer fake.createTagsRequestMutex.Unlock()
	fake.CreateTagsRequestStub = stub
}

func (fake *FakeEC2API) CreateTagsRequestArgsForCall(i int) *ec2.CreateTagsInput {
	fake.createTagsRequestMutex.RLock()
	defer fake.createTagsRequestMutex.RUnlock()
	argsForCall := fake.createTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTagsRequestReturns(result1 *request.Request, result2 *ec2.CreateTagsOutput) {
	fake.createTagsRequestMutex.Lock()
	defer fake.createTagsRequestMutex.Unlock()
	fake.CreateTagsRequestStub = nil
	fake.createTagsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateTagsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateTagsOutput) {
	fake.createTagsRequestMutex.Lock()
	defer fake.createTagsRequestMutex.Unlock()
	fake.CreateTagsRequestStub = nil
	if fake.createTagsRequestReturnsOnCall == nil {
		fake.createTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateTagsOutput
		})
	}
	fake.createTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateTagsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTagsWithContext(arg1 aws.Context, arg2 *ec2.CreateTagsInput, arg3 ...request.Option) (*ec2.CreateTagsOutput, error) {
	fake.createTagsWithContextMutex.Lock()
	ret, specificReturn := fake.createTagsWithContextReturnsOnCall[len(fake.createTagsWithContextArgsForCall)]
	fake.createTagsWithContextArgsForCall = append(fake.createTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTagsWithContextMutex.Unlock()
	if fake.CreateTagsWithContextStub != nil {
		return fake.CreateTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTagsWithContextCallCount() int {
	fake.createTagsWithContextMutex.RLock()
	defer fake.createTagsWithContextMutex.RUnlock()
	return len(fake.createTagsWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateTagsWithContextCalls(stub func(aws.Context, *ec2.CreateTagsInput, ...request.Option) (*ec2.CreateTagsOutput, error)) {
	fake.createTagsWithContextMutex.Lock()
	defer fake.createTagsWithContextMutex.Unlock()
	fake.CreateTagsWithContextStub = stub
}

func (fake *FakeEC2API) CreateTagsWithContextArgsForCall(i int) (aws.Context, *ec2.CreateTagsInput, []request.Option) {
	fake.createTagsWithContextMutex.RLock()
	defer fake.createTagsWithContextMutex.RUnlock()
	argsForCall := fake.createTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateTagsWithContextReturns(result1 *ec2.CreateTagsOutput, result2 error) {
	fake.createTagsWithContextMutex.Lock()
	defer fake.createTagsWithContextMutex.Unlock()
	fake.CreateTagsWithContextStub = nil
	fake.createTagsWithContextReturns = struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTagsWithContextReturnsOnCall(i int, result1 *ec2.CreateTagsOutput, result2 error) {
	fake.createTagsWithContextMutex.Lock()
	defer fake.createTagsWithContextMutex.Unlock()
	fake.CreateTagsWithContextStub = nil
	if fake.createTagsWithContextReturnsOnCall == nil {
		fake.createTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTagsOutput
			result2 error
		})
	}
	fake.createTagsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGateway(arg1 *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error) {
	fake.createTransitGatewayMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayReturnsOnCall[len(fake.createTransitGatewayArgsForCall)]
	fake.createTransitGatewayArgsForCall = append(fake.createTransitGatewayArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayInput
	}{arg1})
	fake.recordInvocation("CreateTransitGateway", []interface{}{arg1})
	fake.createTransitGatewayMutex.Unlock()
	if fake.CreateTransitGatewayStub != nil {
		return fake.CreateTransitGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayCallCount() int {
	fake.createTransitGatewayMutex.RLock()
	defer fake.createTransitGatewayMutex.RUnlock()
	return len(fake.createTransitGatewayArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayCalls(stub func(*ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error)) {
	fake.createTransitGatewayMutex.Lock()
	defer fake.createTransitGatewayMutex.Unlock()
	fake.CreateTransitGatewayStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayArgsForCall(i int) *ec2.CreateTransitGatewayInput {
	fake.createTransitGatewayMutex.RLock()
	defer fake.createTransitGatewayMutex.RUnlock()
	argsForCall := fake.createTransitGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayReturns(result1 *ec2.CreateTransitGatewayOutput, result2 error) {
	fake.createTransitGatewayMutex.Lock()
	defer fake.createTransitGatewayMutex.Unlock()
	fake.CreateTransitGatewayStub = nil
	fake.createTransitGatewayReturns = struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayOutput, result2 error) {
	fake.createTransitGatewayMutex.Lock()
	defer fake.createTransitGatewayMutex.Unlock()
	fake.CreateTransitGatewayStub = nil
	if fake.createTransitGatewayReturnsOnCall == nil {
		fake.createTransitGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayOutput
			result2 error
		})
	}
	fake.createTransitGatewayReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRequest(arg1 *ec2.CreateTransitGatewayInput) (*request.Request, *ec2.CreateTransitGatewayOutput) {
	fake.createTransitGatewayRequestMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRequestReturnsOnCall[len(fake.createTransitGatewayRequestArgsForCall)]
	fake.createTransitGatewayRequestArgsForCall = append(fake.createTransitGatewayRequestArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayRequest", []interface{}{arg1})
	fake.createTransitGatewayRequestMutex.Unlock()
	if fake.CreateTransitGatewayRequestStub != nil {
		return fake.CreateTransitGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRequestCallCount() int {
	fake.createTransitGatewayRequestMutex.RLock()
	defer fake.createTransitGatewayRequestMutex.RUnlock()
	return len(fake.createTransitGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRequestCalls(stub func(*ec2.CreateTransitGatewayInput) (*request.Request, *ec2.CreateTransitGatewayOutput)) {
	fake.createTransitGatewayRequestMutex.Lock()
	defer fake.createTransitGatewayRequestMutex.Unlock()
	fake.CreateTransitGatewayRequestStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRequestArgsForCall(i int) *ec2.CreateTransitGatewayInput {
	fake.createTransitGatewayRequestMutex.RLock()
	defer fake.createTransitGatewayRequestMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayRequestReturns(result1 *request.Request, result2 *ec2.CreateTransitGatewayOutput) {
	fake.createTransitGatewayRequestMutex.Lock()
	defer fake.createTransitGatewayRequestMutex.Unlock()
	fake.CreateTransitGatewayRequestStub = nil
	fake.createTransitGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateTransitGatewayOutput) {
	fake.createTransitGatewayRequestMutex.Lock()
	defer fake.createTransitGatewayRequestMutex.Unlock()
	fake.CreateTransitGatewayRequestStub = nil
	if fake.createTransitGatewayRequestReturnsOnCall == nil {
		fake.createTransitGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateTransitGatewayOutput
		})
	}
	fake.createTransitGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRoute(arg1 *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error) {
	fake.createTransitGatewayRouteMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRouteReturnsOnCall[len(fake.createTransitGatewayRouteArgsForCall)]
	fake.createTransitGatewayRouteArgsForCall = append(fake.createTransitGatewayRouteArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayRouteInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayRoute", []interface{}{arg1})
	fake.createTransitGatewayRouteMutex.Unlock()
	if fake.CreateTransitGatewayRouteStub != nil {
		return fake.CreateTransitGatewayRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRouteCallCount() int {
	fake.createTransitGatewayRouteMutex.RLock()
	defer fake.createTransitGatewayRouteMutex.RUnlock()
	return len(fake.createTransitGatewayRouteArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRouteCalls(stub func(*ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error)) {
	fake.createTransitGatewayRouteMutex.Lock()
	defer fake.createTransitGatewayRouteMutex.Unlock()
	fake.CreateTransitGatewayRouteStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRouteArgsForCall(i int) *ec2.CreateTransitGatewayRouteInput {
	fake.createTransitGatewayRouteMutex.RLock()
	defer fake.createTransitGatewayRouteMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayRouteReturns(result1 *ec2.CreateTransitGatewayRouteOutput, result2 error) {
	fake.createTransitGatewayRouteMutex.Lock()
	defer fake.createTransitGatewayRouteMutex.Unlock()
	fake.CreateTransitGatewayRouteStub = nil
	fake.createTransitGatewayRouteReturns = struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayRouteOutput, result2 error) {
	fake.createTransitGatewayRouteMutex.Lock()
	defer fake.createTransitGatewayRouteMutex.Unlock()
	fake.CreateTransitGatewayRouteStub = nil
	if fake.createTransitGatewayRouteReturnsOnCall == nil {
		fake.createTransitGatewayRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayRouteOutput
			result2 error
		})
	}
	fake.createTransitGatewayRouteReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteRequest(arg1 *ec2.CreateTransitGatewayRouteInput) (*request.Request, *ec2.CreateTransitGatewayRouteOutput) {
	fake.createTransitGatewayRouteRequestMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRouteRequestReturnsOnCall[len(fake.createTransitGatewayRouteRequestArgsForCall)]
	fake.createTransitGatewayRouteRequestArgsForCall = append(fake.createTransitGatewayRouteRequestArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayRouteInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayRouteRequest", []interface{}{arg1})
	fake.createTransitGatewayRouteRequestMutex.Unlock()
	if fake.CreateTransitGatewayRouteRequestStub != nil {
		return fake.CreateTransitGatewayRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRouteRequestCallCount() int {
	fake.createTransitGatewayRouteRequestMutex.RLock()
	defer fake.createTransitGatewayRouteRequestMutex.RUnlock()
	return len(fake.createTransitGatewayRouteRequestArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRouteRequestCalls(stub func(*ec2.CreateTransitGatewayRouteInput) (*request.Request, *ec2.CreateTransitGatewayRouteOutput)) {
	fake.createTransitGatewayRouteRequestMutex.Lock()
	defer fake.createTransitGatewayRouteRequestMutex.Unlock()
	fake.CreateTransitGatewayRouteRequestStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRouteRequestArgsForCall(i int) *ec2.CreateTransitGatewayRouteInput {
	fake.createTransitGatewayRouteRequestMutex.RLock()
	defer fake.createTransitGatewayRouteRequestMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayRouteRequestReturns(result1 *request.Request, result2 *ec2.CreateTransitGatewayRouteOutput) {
	fake.createTransitGatewayRouteRequestMutex.Lock()
	defer fake.createTransitGatewayRouteRequestMutex.Unlock()
	fake.CreateTransitGatewayRouteRequestStub = nil
	fake.createTransitGatewayRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateTransitGatewayRouteOutput) {
	fake.createTransitGatewayRouteRequestMutex.Lock()
	defer fake.createTransitGatewayRouteRequestMutex.Unlock()
	fake.CreateTransitGatewayRouteRequestStub = nil
	if fake.createTransitGatewayRouteRequestReturnsOnCall == nil {
		fake.createTransitGatewayRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateTransitGatewayRouteOutput
		})
	}
	fake.createTransitGatewayRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTable(arg1 *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	fake.createTransitGatewayRouteTableMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRouteTableReturnsOnCall[len(fake.createTransitGatewayRouteTableArgsForCall)]
	fake.createTransitGatewayRouteTableArgsForCall = append(fake.createTransitGatewayRouteTableArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayRouteTable", []interface{}{arg1})
	fake.createTransitGatewayRouteTableMutex.Unlock()
	if fake.CreateTransitGatewayRouteTableStub != nil {
		return fake.CreateTransitGatewayRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableCallCount() int {
	fake.createTransitGatewayRouteTableMutex.RLock()
	defer fake.createTransitGatewayRouteTableMutex.RUnlock()
	return len(fake.createTransitGatewayRouteTableArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableCalls(stub func(*ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error)) {
	fake.createTransitGatewayRouteTableMutex.Lock()
	defer fake.createTransitGatewayRouteTableMutex.Unlock()
	fake.CreateTransitGatewayRouteTableStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableArgsForCall(i int) *ec2.CreateTransitGatewayRouteTableInput {
	fake.createTransitGatewayRouteTableMutex.RLock()
	defer fake.createTransitGatewayRouteTableMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableReturns(result1 *ec2.CreateTransitGatewayRouteTableOutput, result2 error) {
	fake.createTransitGatewayRouteTableMutex.Lock()
	defer fake.createTransitGatewayRouteTableMutex.Unlock()
	fake.CreateTransitGatewayRouteTableStub = nil
	fake.createTransitGatewayRouteTableReturns = struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayRouteTableOutput, result2 error) {
	fake.createTransitGatewayRouteTableMutex.Lock()
	defer fake.createTransitGatewayRouteTableMutex.Unlock()
	fake.CreateTransitGatewayRouteTableStub = nil
	if fake.createTransitGatewayRouteTableReturnsOnCall == nil {
		fake.createTransitGatewayRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.createTransitGatewayRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableRequest(arg1 *ec2.CreateTransitGatewayRouteTableInput) (*request.Request, *ec2.CreateTransitGatewayRouteTableOutput) {
	fake.createTransitGatewayRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRouteTableRequestReturnsOnCall[len(fake.createTransitGatewayRouteTableRequestArgsForCall)]
	fake.createTransitGatewayRouteTableRequestArgsForCall = append(fake.createTransitGatewayRouteTableRequestArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayRouteTableRequest", []interface{}{arg1})
	fake.createTransitGatewayRouteTableRequestMutex.Unlock()
	if fake.CreateTransitGatewayRouteTableRequestStub != nil {
		return fake.CreateTransitGatewayRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableRequestCallCount() int {
	fake.createTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.createTransitGatewayRouteTableRequestMutex.RUnlock()
	return len(fake.createTransitGatewayRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableRequestCalls(stub func(*ec2.CreateTransitGatewayRouteTableInput) (*request.Request, *ec2.CreateTransitGatewayRouteTableOutput)) {
	fake.createTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.createTransitGatewayRouteTableRequestMutex.Unlock()
	fake.CreateTransitGatewayRouteTableRequestStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableRequestArgsForCall(i int) *ec2.CreateTransitGatewayRouteTableInput {
	fake.createTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.createTransitGatewayRouteTableRequestMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableRequestReturns(result1 *request.Request, result2 *ec2.CreateTransitGatewayRouteTableOutput) {
	fake.createTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.createTransitGatewayRouteTableRequestMutex.Unlock()
	fake.CreateTransitGatewayRouteTableRequestStub = nil
	fake.createTransitGatewayRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateTransitGatewayRouteTableOutput) {
	fake.createTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.createTransitGatewayRouteTableRequestMutex.Unlock()
	fake.CreateTransitGatewayRouteTableRequestStub = nil
	if fake.createTransitGatewayRouteTableRequestReturnsOnCall == nil {
		fake.createTransitGatewayRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateTransitGatewayRouteTableOutput
		})
	}
	fake.createTransitGatewayRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableWithContext(arg1 aws.Context, arg2 *ec2.CreateTransitGatewayRouteTableInput, arg3 ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	fake.createTransitGatewayRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRouteTableWithContextReturnsOnCall[len(fake.createTransitGatewayRouteTableWithContextArgsForCall)]
	fake.createTransitGatewayRouteTableWithContextArgsForCall = append(fake.createTransitGatewayRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTransitGatewayRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTransitGatewayRouteTableWithContextMutex.Unlock()
	if fake.CreateTransitGatewayRouteTableWithContextStub != nil {
		return fake.CreateTransitGatewayRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableWithContextCallCount() int {
	fake.createTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.createTransitGatewayRouteTableWithContextMutex.RUnlock()
	return len(fake.createTransitGatewayRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableWithContextCalls(stub func(aws.Context, *ec2.CreateTransitGatewayRouteTableInput, ...request.Option) (*ec2.CreateTransitGatewayRouteTableOutput, error)) {
	fake.createTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.createTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.CreateTransitGatewayRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.CreateTransitGatewayRouteTableInput, []request.Option) {
	fake.createTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.createTransitGatewayRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableWithContextReturns(result1 *ec2.CreateTransitGatewayRouteTableOutput, result2 error) {
	fake.createTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.createTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.CreateTransitGatewayRouteTableWithContextStub = nil
	fake.createTransitGatewayRouteTableWithContextReturns = struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteTableWithContextReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayRouteTableOutput, result2 error) {
	fake.createTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.createTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.CreateTransitGatewayRouteTableWithContextStub = nil
	if fake.createTransitGatewayRouteTableWithContextReturnsOnCall == nil {
		fake.createTransitGatewayRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.createTransitGatewayRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteWithContext(arg1 aws.Context, arg2 *ec2.CreateTransitGatewayRouteInput, arg3 ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error) {
	fake.createTransitGatewayRouteWithContextMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayRouteWithContextReturnsOnCall[len(fake.createTransitGatewayRouteWithContextArgsForCall)]
	fake.createTransitGatewayRouteWithContextArgsForCall = append(fake.createTransitGatewayRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTransitGatewayRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTransitGatewayRouteWithContextMutex.Unlock()
	if fake.CreateTransitGatewayRouteWithContextStub != nil {
		return fake.CreateTransitGatewayRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayRouteWithContextCallCount() int {
	fake.createTransitGatewayRouteWithContextMutex.RLock()
	defer fake.createTransitGatewayRouteWithContextMutex.RUnlock()
	return len(fake.createTransitGatewayRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayRouteWithContextCalls(stub func(aws.Context, *ec2.CreateTransitGatewayRouteInput, ...request.Option) (*ec2.CreateTransitGatewayRouteOutput, error)) {
	fake.createTransitGatewayRouteWithContextMutex.Lock()
	defer fake.createTransitGatewayRouteWithContextMutex.Unlock()
	fake.CreateTransitGatewayRouteWithContextStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayRouteWithContextArgsForCall(i int) (aws.Context, *ec2.CreateTransitGatewayRouteInput, []request.Option) {
	fake.createTransitGatewayRouteWithContextMutex.RLock()
	defer fake.createTransitGatewayRouteWithContextMutex.RUnlock()
	argsForCall := fake.createTransitGatewayRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateTransitGatewayRouteWithContextReturns(result1 *ec2.CreateTransitGatewayRouteOutput, result2 error) {
	fake.createTransitGatewayRouteWithContextMutex.Lock()
	defer fake.createTransitGatewayRouteWithContextMutex.Unlock()
	fake.CreateTransitGatewayRouteWithContextStub = nil
	fake.createTransitGatewayRouteWithContextReturns = struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayRouteWithContextReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayRouteOutput, result2 error) {
	fake.createTransitGatewayRouteWithContextMutex.Lock()
	defer fake.createTransitGatewayRouteWithContextMutex.Unlock()
	fake.CreateTransitGatewayRouteWithContextStub = nil
	if fake.createTransitGatewayRouteWithContextReturnsOnCall == nil {
		fake.createTransitGatewayRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayRouteOutput
			result2 error
		})
	}
	fake.createTransitGatewayRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachment(arg1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	fake.createTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayVpcAttachmentReturnsOnCall[len(fake.createTransitGatewayVpcAttachmentArgsForCall)]
	fake.createTransitGatewayVpcAttachmentArgsForCall = append(fake.createTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.createTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.CreateTransitGatewayVpcAttachmentStub != nil {
		return fake.CreateTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentCallCount() int {
	fake.createTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.createTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentCalls(stub func(*ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)) {
	fake.createTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.CreateTransitGatewayVpcAttachmentInput {
	fake.createTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.createTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentReturns(result1 *ec2.CreateTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.createTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentStub = nil
	fake.createTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.createTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentStub = nil
	if fake.createTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.createTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.createTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentRequest(arg1 *ec2.CreateTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayVpcAttachmentOutput) {
	fake.createTransitGatewayVpcAttachmentRequestMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayVpcAttachmentRequestReturnsOnCall[len(fake.createTransitGatewayVpcAttachmentRequestArgsForCall)]
	fake.createTransitGatewayVpcAttachmentRequestArgsForCall = append(fake.createTransitGatewayVpcAttachmentRequestArgsForCall, struct {
		arg1 *ec2.CreateTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("CreateTransitGatewayVpcAttachmentRequest", []interface{}{arg1})
	fake.createTransitGatewayVpcAttachmentRequestMutex.Unlock()
	if fake.CreateTransitGatewayVpcAttachmentRequestStub != nil {
		return fake.CreateTransitGatewayVpcAttachmentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayVpcAttachmentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentRequestCallCount() int {
	fake.createTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	return len(fake.createTransitGatewayVpcAttachmentRequestArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentRequestCalls(stub func(*ec2.CreateTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.CreateTransitGatewayVpcAttachmentOutput)) {
	fake.createTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentRequestStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentRequestArgsForCall(i int) *ec2.CreateTransitGatewayVpcAttachmentInput {
	fake.createTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	argsForCall := fake.createTransitGatewayVpcAttachmentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentRequestReturns(result1 *request.Request, result2 *ec2.CreateTransitGatewayVpcAttachmentOutput) {
	fake.createTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentRequestStub = nil
	fake.createTransitGatewayVpcAttachmentRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateTransitGatewayVpcAttachmentOutput) {
	fake.createTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentRequestStub = nil
	if fake.createTransitGatewayVpcAttachmentRequestReturnsOnCall == nil {
		fake.createTransitGatewayVpcAttachmentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateTransitGatewayVpcAttachmentOutput
		})
	}
	fake.createTransitGatewayVpcAttachmentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentWithContext(arg1 aws.Context, arg2 *ec2.CreateTransitGatewayVpcAttachmentInput, arg3 ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	fake.createTransitGatewayVpcAttachmentWithContextMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayVpcAttachmentWithContextReturnsOnCall[len(fake.createTransitGatewayVpcAttachmentWithContextArgsForCall)]
	fake.createTransitGatewayVpcAttachmentWithContextArgsForCall = append(fake.createTransitGatewayVpcAttachmentWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTransitGatewayVpcAttachmentWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	if fake.CreateTransitGatewayVpcAttachmentWithContextStub != nil {
		return fake.CreateTransitGatewayVpcAttachmentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayVpcAttachmentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentWithContextCallCount() int {
	fake.createTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	return len(fake.createTransitGatewayVpcAttachmentWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentWithContextCalls(stub func(aws.Context, *ec2.CreateTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)) {
	fake.createTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentWithContextStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentWithContextArgsForCall(i int) (aws.Context, *ec2.CreateTransitGatewayVpcAttachmentInput, []request.Option) {
	fake.createTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	argsForCall := fake.createTransitGatewayVpcAttachmentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentWithContextReturns(result1 *ec2.CreateTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.createTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentWithContextStub = nil
	fake.createTransitGatewayVpcAttachmentWithContextReturns = struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayVpcAttachmentWithContextReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.createTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.createTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.CreateTransitGatewayVpcAttachmentWithContextStub = nil
	if fake.createTransitGatewayVpcAttachmentWithContextReturnsOnCall == nil {
		fake.createTransitGatewayVpcAttachmentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.createTransitGatewayVpcAttachmentWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayWithContext(arg1 aws.Context, arg2 *ec2.CreateTransitGatewayInput, arg3 ...request.Option) (*ec2.CreateTransitGatewayOutput, error) {
	fake.createTransitGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.createTransitGatewayWithContextReturnsOnCall[len(fake.createTransitGatewayWithContextArgsForCall)]
	fake.createTransitGatewayWithContextArgsForCall = append(fake.createTransitGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateTransitGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTransitGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTransitGatewayWithContextMutex.Unlock()
	if fake.CreateTransitGatewayWithContextStub != nil {
		return fake.CreateTransitGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTransitGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateTransitGatewayWithContextCallCount() int {
	fake.createTransitGatewayWithContextMutex.RLock()
	defer fake.createTransitGatewayWithContextMutex.RUnlock()
	return len(fake.createTransitGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateTransitGatewayWithContextCalls(stub func(aws.Context, *ec2.CreateTransitGatewayInput, ...request.Option) (*ec2.CreateTransitGatewayOutput, error)) {
	fake.createTransitGatewayWithContextMutex.Lock()
	defer fake.createTransitGatewayWithContextMutex.Unlock()
	fake.CreateTransitGatewayWithContextStub = stub
}

func (fake *FakeEC2API) CreateTransitGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.CreateTransitGatewayInput, []request.Option) {
	fake.createTransitGatewayWithContextMutex.RLock()
	defer fake.createTransitGatewayWithContextMutex.RUnlock()
	argsForCall := fake.createTransitGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateTransitGatewayWithContextReturns(result1 *ec2.CreateTransitGatewayOutput, result2 error) {
	fake.createTransitGatewayWithContextMutex.Lock()
	defer fake.createTransitGatewayWithContextMutex.Unlock()
	fake.CreateTransitGatewayWithContextStub = nil
	fake.createTransitGatewayWithContextReturns = struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateTransitGatewayWithContextReturnsOnCall(i int, result1 *ec2.CreateTransitGatewayOutput, result2 error) {
	fake.createTransitGatewayWithContextMutex.Lock()
	defer fake.createTransitGatewayWithContextMutex.Unlock()
	fake.CreateTransitGatewayWithContextStub = nil
	if fake.createTransitGatewayWithContextReturnsOnCall == nil {
		fake.createTransitGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateTransitGatewayOutput
			result2 error
		})
	}
	fake.createTransitGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVolume(arg1 *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	fake.createVolumeMutex.Lock()
	ret, specificReturn := fake.createVolumeReturnsOnCall[len(fake.createVolumeArgsForCall)]
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		arg1 *ec2.CreateVolumeInput
	}{arg1})
	fake.recordInvocation("CreateVolume", []interface{}{arg1})
	fake.createVolumeMutex.Unlock()
	if fake.CreateVolumeStub != nil {
		return fake.CreateVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeEC2API) CreateVolumeCalls(stub func(*ec2.CreateVolumeInput) (*ec2.Volume, error)) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = stub
}

func (fake *FakeEC2API) CreateVolumeArgsForCall(i int) *ec2.CreateVolumeInput {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	argsForCall := fake.createVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVolumeReturns(result1 *ec2.Volume, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 *ec2.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVolumeReturnsOnCall(i int, result1 *ec2.Volume, result2 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	if fake.createVolumeReturnsOnCall == nil {
		fake.createVolumeReturnsOnCall = make(map[int]struct {
			result1 *ec2.Volume
			result2 error
		})
	}
	fake.createVolumeReturnsOnCall[i] = struct {
		result1 *ec2.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVolumeRequest(arg1 *ec2.CreateVolumeInput) (*request.Request, *ec2.Volume) {
	fake.createVolumeRequestMutex.Lock()
	ret, specificReturn := fake.createVolumeRequestReturnsOnCall[len(fake.createVolumeRequestArgsForCall)]
	fake.createVolumeRequestArgsForCall = append(fake.createVolumeRequestArgsForCall, struct {
		arg1 *ec2.CreateVolumeInput
	}{arg1})
	fake.recordInvocation("CreateVolumeRequest", []interface{}{arg1})
	fake.createVolumeRequestMutex.Unlock()
	if fake.CreateVolumeRequestStub != nil {
		return fake.CreateVolumeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVolumeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVolumeRequestCallCount() int {
	fake.createVolumeRequestMutex.RLock()
	defer fake.createVolumeRequestMutex.RUnlock()
	return len(fake.createVolumeRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVolumeRequestCalls(stub func(*ec2.CreateVolumeInput) (*request.Request, *ec2.Volume)) {
	fake.createVolumeRequestMutex.Lock()
	defer fake.createVolumeRequestMutex.Unlock()
	fake.CreateVolumeRequestStub = stub
}

func (fake *FakeEC2API) CreateVolumeRequestArgsForCall(i int) *ec2.CreateVolumeInput {
	fake.createVolumeRequestMutex.RLock()
	defer fake.createVolumeRequestMutex.RUnlock()
	argsForCall := fake.createVolumeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVolumeRequestReturns(result1 *request.Request, result2 *ec2.Volume) {
	fake.createVolumeRequestMutex.Lock()
	defer fake.createVolumeRequestMutex.Unlock()
	fake.CreateVolumeRequestStub = nil
	fake.createVolumeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.Volume
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVolumeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.Volume) {
	fake.createVolumeRequestMutex.Lock()
	defer fake.createVolumeRequestMutex.Unlock()
	fake.CreateVolumeRequestStub = nil
	if fake.createVolumeRequestReturnsOnCall == nil {
		fake.createVolumeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.Volume
		})
	}
	fake.createVolumeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.Volume
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVolumeWithContext(arg1 aws.Context, arg2 *ec2.CreateVolumeInput, arg3 ...request.Option) (*ec2.Volume, error) {
	fake.createVolumeWithContextMutex.Lock()
	ret, specificReturn := fake.createVolumeWithContextReturnsOnCall[len(fake.createVolumeWithContextArgsForCall)]
	fake.createVolumeWithContextArgsForCall = append(fake.createVolumeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVolumeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVolumeWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVolumeWithContextMutex.Unlock()
	if fake.CreateVolumeWithContextStub != nil {
		return fake.CreateVolumeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVolumeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVolumeWithContextCallCount() int {
	fake.createVolumeWithContextMutex.RLock()
	defer fake.createVolumeWithContextMutex.RUnlock()
	return len(fake.createVolumeWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVolumeWithContextCalls(stub func(aws.Context, *ec2.CreateVolumeInput, ...request.Option) (*ec2.Volume, error)) {
	fake.createVolumeWithContextMutex.Lock()
	defer fake.createVolumeWithContextMutex.Unlock()
	fake.CreateVolumeWithContextStub = stub
}

func (fake *FakeEC2API) CreateVolumeWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVolumeInput, []request.Option) {
	fake.createVolumeWithContextMutex.RLock()
	defer fake.createVolumeWithContextMutex.RUnlock()
	argsForCall := fake.createVolumeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVolumeWithContextReturns(result1 *ec2.Volume, result2 error) {
	fake.createVolumeWithContextMutex.Lock()
	defer fake.createVolumeWithContextMutex.Unlock()
	fake.CreateVolumeWithContextStub = nil
	fake.createVolumeWithContextReturns = struct {
		result1 *ec2.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVolumeWithContextReturnsOnCall(i int, result1 *ec2.Volume, result2 error) {
	fake.createVolumeWithContextMutex.Lock()
	defer fake.createVolumeWithContextMutex.Unlock()
	fake.CreateVolumeWithContextStub = nil
	if fake.createVolumeWithContextReturnsOnCall == nil {
		fake.createVolumeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.Volume
			result2 error
		})
	}
	fake.createVolumeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpc(arg1 *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
	fake.createVpcMutex.Lock()
	ret, specificReturn := fake.createVpcReturnsOnCall[len(fake.createVpcArgsForCall)]
	fake.createVpcArgsForCall = append(fake.createVpcArgsForCall, struct {
		arg1 *ec2.CreateVpcInput
	}{arg1})
	fake.recordInvocation("CreateVpc", []interface{}{arg1})
	fake.createVpcMutex.Unlock()
	if fake.CreateVpcStub != nil {
		return fake.CreateVpcStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcCallCount() int {
	fake.createVpcMutex.RLock()
	defer fake.createVpcMutex.RUnlock()
	return len(fake.createVpcArgsForCall)
}

func (fake *FakeEC2API) CreateVpcCalls(stub func(*ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error)) {
	fake.createVpcMutex.Lock()
	defer fake.createVpcMutex.Unlock()
	fake.CreateVpcStub = stub
}

func (fake *FakeEC2API) CreateVpcArgsForCall(i int) *ec2.CreateVpcInput {
	fake.createVpcMutex.RLock()
	defer fake.createVpcMutex.RUnlock()
	argsForCall := fake.createVpcArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcReturns(result1 *ec2.CreateVpcOutput, result2 error) {
	fake.createVpcMutex.Lock()
	defer fake.createVpcMutex.Unlock()
	fake.CreateVpcStub = nil
	fake.createVpcReturns = struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcReturnsOnCall(i int, result1 *ec2.CreateVpcOutput, result2 error) {
	fake.createVpcMutex.Lock()
	defer fake.createVpcMutex.Unlock()
	fake.CreateVpcStub = nil
	if fake.createVpcReturnsOnCall == nil {
		fake.createVpcReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcOutput
			result2 error
		})
	}
	fake.createVpcReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpoint(arg1 *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
	fake.createVpcEndpointMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointReturnsOnCall[len(fake.createVpcEndpointArgsForCall)]
	fake.createVpcEndpointArgsForCall = append(fake.createVpcEndpointArgsForCall, struct {
		arg1 *ec2.CreateVpcEndpointInput
	}{arg1})
	fake.recordInvocation("CreateVpcEndpoint", []interface{}{arg1})
	fake.createVpcEndpointMutex.Unlock()
	if fake.CreateVpcEndpointStub != nil {
		return fake.CreateVpcEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointCallCount() int {
	fake.createVpcEndpointMutex.RLock()
	defer fake.createVpcEndpointMutex.RUnlock()
	return len(fake.createVpcEndpointArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointCalls(stub func(*ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error)) {
	fake.createVpcEndpointMutex.Lock()
	defer fake.createVpcEndpointMutex.Unlock()
	fake.CreateVpcEndpointStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointArgsForCall(i int) *ec2.CreateVpcEndpointInput {
	fake.createVpcEndpointMutex.RLock()
	defer fake.createVpcEndpointMutex.RUnlock()
	argsForCall := fake.createVpcEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcEndpointReturns(result1 *ec2.CreateVpcEndpointOutput, result2 error) {
	fake.createVpcEndpointMutex.Lock()
	defer fake.createVpcEndpointMutex.Unlock()
	fake.CreateVpcEndpointStub = nil
	fake.createVpcEndpointReturns = struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointOutput, result2 error) {
	fake.createVpcEndpointMutex.Lock()
	defer fake.createVpcEndpointMutex.Unlock()
	fake.CreateVpcEndpointStub = nil
	if fake.createVpcEndpointReturnsOnCall == nil {
		fake.createVpcEndpointReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointOutput
			result2 error
		})
	}
	fake.createVpcEndpointReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotification(arg1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	fake.createVpcEndpointConnectionNotificationMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointConnectionNotificationReturnsOnCall[len(fake.createVpcEndpointConnectionNotificationArgsForCall)]
	fake.createVpcEndpointConnectionNotificationArgsForCall = append(fake.createVpcEndpointConnectionNotificationArgsForCall, struct {
		arg1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}{arg1})
	fake.recordInvocation("CreateVpcEndpointConnectionNotification", []interface{}{arg1})
	fake.createVpcEndpointConnectionNotificationMutex.Unlock()
	if fake.CreateVpcEndpointConnectionNotificationStub != nil {
		return fake.CreateVpcEndpointConnectionNotificationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointConnectionNotificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationCallCount() int {
	fake.createVpcEndpointConnectionNotificationMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationMutex.RUnlock()
	return len(fake.createVpcEndpointConnectionNotificationArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationCalls(stub func(*ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)) {
	fake.createVpcEndpointConnectionNotificationMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationArgsForCall(i int) *ec2.CreateVpcEndpointConnectionNotificationInput {
	fake.createVpcEndpointConnectionNotificationMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationMutex.RUnlock()
	argsForCall := fake.createVpcEndpointConnectionNotificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationReturns(result1 *ec2.CreateVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.createVpcEndpointConnectionNotificationMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationStub = nil
	fake.createVpcEndpointConnectionNotificationReturns = struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.createVpcEndpointConnectionNotificationMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationStub = nil
	if fake.createVpcEndpointConnectionNotificationReturnsOnCall == nil {
		fake.createVpcEndpointConnectionNotificationReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
			result2 error
		})
	}
	fake.createVpcEndpointConnectionNotificationReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationRequest(arg1 *ec2.CreateVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.CreateVpcEndpointConnectionNotificationOutput) {
	fake.createVpcEndpointConnectionNotificationRequestMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointConnectionNotificationRequestReturnsOnCall[len(fake.createVpcEndpointConnectionNotificationRequestArgsForCall)]
	fake.createVpcEndpointConnectionNotificationRequestArgsForCall = append(fake.createVpcEndpointConnectionNotificationRequestArgsForCall, struct {
		arg1 *ec2.CreateVpcEndpointConnectionNotificationInput
	}{arg1})
	fake.recordInvocation("CreateVpcEndpointConnectionNotificationRequest", []interface{}{arg1})
	fake.createVpcEndpointConnectionNotificationRequestMutex.Unlock()
	if fake.CreateVpcEndpointConnectionNotificationRequestStub != nil {
		return fake.CreateVpcEndpointConnectionNotificationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointConnectionNotificationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationRequestCallCount() int {
	fake.createVpcEndpointConnectionNotificationRequestMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationRequestMutex.RUnlock()
	return len(fake.createVpcEndpointConnectionNotificationRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationRequestCalls(stub func(*ec2.CreateVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.CreateVpcEndpointConnectionNotificationOutput)) {
	fake.createVpcEndpointConnectionNotificationRequestMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationRequestMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationRequestStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationRequestArgsForCall(i int) *ec2.CreateVpcEndpointConnectionNotificationInput {
	fake.createVpcEndpointConnectionNotificationRequestMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationRequestMutex.RUnlock()
	argsForCall := fake.createVpcEndpointConnectionNotificationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationRequestReturns(result1 *request.Request, result2 *ec2.CreateVpcEndpointConnectionNotificationOutput) {
	fake.createVpcEndpointConnectionNotificationRequestMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationRequestMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationRequestStub = nil
	fake.createVpcEndpointConnectionNotificationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointConnectionNotificationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpcEndpointConnectionNotificationOutput) {
	fake.createVpcEndpointConnectionNotificationRequestMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationRequestMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationRequestStub = nil
	if fake.createVpcEndpointConnectionNotificationRequestReturnsOnCall == nil {
		fake.createVpcEndpointConnectionNotificationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpcEndpointConnectionNotificationOutput
		})
	}
	fake.createVpcEndpointConnectionNotificationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointConnectionNotificationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationWithContext(arg1 aws.Context, arg2 *ec2.CreateVpcEndpointConnectionNotificationInput, arg3 ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	fake.createVpcEndpointConnectionNotificationWithContextMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointConnectionNotificationWithContextReturnsOnCall[len(fake.createVpcEndpointConnectionNotificationWithContextArgsForCall)]
	fake.createVpcEndpointConnectionNotificationWithContextArgsForCall = append(fake.createVpcEndpointConnectionNotificationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcEndpointConnectionNotificationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpcEndpointConnectionNotificationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	if fake.CreateVpcEndpointConnectionNotificationWithContextStub != nil {
		return fake.CreateVpcEndpointConnectionNotificationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointConnectionNotificationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationWithContextCallCount() int {
	fake.createVpcEndpointConnectionNotificationWithContextMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationWithContextMutex.RUnlock()
	return len(fake.createVpcEndpointConnectionNotificationWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationWithContextCalls(stub func(aws.Context, *ec2.CreateVpcEndpointConnectionNotificationInput, ...request.Option) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)) {
	fake.createVpcEndpointConnectionNotificationWithContextMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpcEndpointConnectionNotificationInput, []request.Option) {
	fake.createVpcEndpointConnectionNotificationWithContextMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationWithContextMutex.RUnlock()
	argsForCall := fake.createVpcEndpointConnectionNotificationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationWithContextReturns(result1 *ec2.CreateVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.createVpcEndpointConnectionNotificationWithContextMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationWithContextStub = nil
	fake.createVpcEndpointConnectionNotificationWithContextReturns = struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointConnectionNotificationWithContextReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.createVpcEndpointConnectionNotificationWithContextMutex.Lock()
	defer fake.createVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	fake.CreateVpcEndpointConnectionNotificationWithContextStub = nil
	if fake.createVpcEndpointConnectionNotificationWithContextReturnsOnCall == nil {
		fake.createVpcEndpointConnectionNotificationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
			result2 error
		})
	}
	fake.createVpcEndpointConnectionNotificationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointRequest(arg1 *ec2.CreateVpcEndpointInput) (*request.Request, *ec2.CreateVpcEndpointOutput) {
	fake.createVpcEndpointRequestMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointRequestReturnsOnCall[len(fake.createVpcEndpointRequestArgsForCall)]
	fake.createVpcEndpointRequestArgsForCall = append(fake.createVpcEndpointRequestArgsForCall, struct {
		arg1 *ec2.CreateVpcEndpointInput
	}{arg1})
	fake.recordInvocation("CreateVpcEndpointRequest", []interface{}{arg1})
	fake.createVpcEndpointRequestMutex.Unlock()
	if fake.CreateVpcEndpointRequestStub != nil {
		return fake.CreateVpcEndpointRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointRequestCallCount() int {
	fake.createVpcEndpointRequestMutex.RLock()
	defer fake.createVpcEndpointRequestMutex.RUnlock()
	return len(fake.createVpcEndpointRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointRequestCalls(stub func(*ec2.CreateVpcEndpointInput) (*request.Request, *ec2.CreateVpcEndpointOutput)) {
	fake.createVpcEndpointRequestMutex.Lock()
	defer fake.createVpcEndpointRequestMutex.Unlock()
	fake.CreateVpcEndpointRequestStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointRequestArgsForCall(i int) *ec2.CreateVpcEndpointInput {
	fake.createVpcEndpointRequestMutex.RLock()
	defer fake.createVpcEndpointRequestMutex.RUnlock()
	argsForCall := fake.createVpcEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcEndpointRequestReturns(result1 *request.Request, result2 *ec2.CreateVpcEndpointOutput) {
	fake.createVpcEndpointRequestMutex.Lock()
	defer fake.createVpcEndpointRequestMutex.Unlock()
	fake.CreateVpcEndpointRequestStub = nil
	fake.createVpcEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpcEndpointOutput) {
	fake.createVpcEndpointRequestMutex.Lock()
	defer fake.createVpcEndpointRequestMutex.Unlock()
	fake.CreateVpcEndpointRequestStub = nil
	if fake.createVpcEndpointRequestReturnsOnCall == nil {
		fake.createVpcEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpcEndpointOutput
		})
	}
	fake.createVpcEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfiguration(arg1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointServiceConfigurationReturnsOnCall[len(fake.createVpcEndpointServiceConfigurationArgsForCall)]
	fake.createVpcEndpointServiceConfigurationArgsForCall = append(fake.createVpcEndpointServiceConfigurationArgsForCall, struct {
		arg1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}{arg1})
	fake.recordInvocation("CreateVpcEndpointServiceConfiguration", []interface{}{arg1})
	fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	if fake.CreateVpcEndpointServiceConfigurationStub != nil {
		return fake.CreateVpcEndpointServiceConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointServiceConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationCallCount() int {
	fake.createVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationMutex.RUnlock()
	return len(fake.createVpcEndpointServiceConfigurationArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationCalls(stub func(*ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationArgsForCall(i int) *ec2.CreateVpcEndpointServiceConfigurationInput {
	fake.createVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationMutex.RUnlock()
	argsForCall := fake.createVpcEndpointServiceConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationReturns(result1 *ec2.CreateVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationStub = nil
	fake.createVpcEndpointServiceConfigurationReturns = struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationStub = nil
	if fake.createVpcEndpointServiceConfigurationReturnsOnCall == nil {
		fake.createVpcEndpointServiceConfigurationReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
			result2 error
		})
	}
	fake.createVpcEndpointServiceConfigurationReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationRequest(arg1 *ec2.CreateVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.CreateVpcEndpointServiceConfigurationOutput) {
	fake.createVpcEndpointServiceConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointServiceConfigurationRequestReturnsOnCall[len(fake.createVpcEndpointServiceConfigurationRequestArgsForCall)]
	fake.createVpcEndpointServiceConfigurationRequestArgsForCall = append(fake.createVpcEndpointServiceConfigurationRequestArgsForCall, struct {
		arg1 *ec2.CreateVpcEndpointServiceConfigurationInput
	}{arg1})
	fake.recordInvocation("CreateVpcEndpointServiceConfigurationRequest", []interface{}{arg1})
	fake.createVpcEndpointServiceConfigurationRequestMutex.Unlock()
	if fake.CreateVpcEndpointServiceConfigurationRequestStub != nil {
		return fake.CreateVpcEndpointServiceConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointServiceConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationRequestCallCount() int {
	fake.createVpcEndpointServiceConfigurationRequestMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationRequestMutex.RUnlock()
	return len(fake.createVpcEndpointServiceConfigurationRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationRequestCalls(stub func(*ec2.CreateVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.CreateVpcEndpointServiceConfigurationOutput)) {
	fake.createVpcEndpointServiceConfigurationRequestMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationRequestMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationRequestStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationRequestArgsForCall(i int) *ec2.CreateVpcEndpointServiceConfigurationInput {
	fake.createVpcEndpointServiceConfigurationRequestMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationRequestMutex.RUnlock()
	argsForCall := fake.createVpcEndpointServiceConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationRequestReturns(result1 *request.Request, result2 *ec2.CreateVpcEndpointServiceConfigurationOutput) {
	fake.createVpcEndpointServiceConfigurationRequestMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationRequestMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationRequestStub = nil
	fake.createVpcEndpointServiceConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointServiceConfigurationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpcEndpointServiceConfigurationOutput) {
	fake.createVpcEndpointServiceConfigurationRequestMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationRequestMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationRequestStub = nil
	if fake.createVpcEndpointServiceConfigurationRequestReturnsOnCall == nil {
		fake.createVpcEndpointServiceConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpcEndpointServiceConfigurationOutput
		})
	}
	fake.createVpcEndpointServiceConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcEndpointServiceConfigurationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationWithContext(arg1 aws.Context, arg2 *ec2.CreateVpcEndpointServiceConfigurationInput, arg3 ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	fake.createVpcEndpointServiceConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointServiceConfigurationWithContextReturnsOnCall[len(fake.createVpcEndpointServiceConfigurationWithContextArgsForCall)]
	fake.createVpcEndpointServiceConfigurationWithContextArgsForCall = append(fake.createVpcEndpointServiceConfigurationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcEndpointServiceConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpcEndpointServiceConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	if fake.CreateVpcEndpointServiceConfigurationWithContextStub != nil {
		return fake.CreateVpcEndpointServiceConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointServiceConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationWithContextCallCount() int {
	fake.createVpcEndpointServiceConfigurationWithContextMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationWithContextMutex.RUnlock()
	return len(fake.createVpcEndpointServiceConfigurationWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationWithContextCalls(stub func(aws.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, ...request.Option) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)) {
	fake.createVpcEndpointServiceConfigurationWithContextMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, []request.Option) {
	fake.createVpcEndpointServiceConfigurationWithContextMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.createVpcEndpointServiceConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationWithContextReturns(result1 *ec2.CreateVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.createVpcEndpointServiceConfigurationWithContextMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationWithContextStub = nil
	fake.createVpcEndpointServiceConfigurationWithContextReturns = struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationWithContextReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.createVpcEndpointServiceConfigurationWithContextMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationWithContextStub = nil
	if fake.createVpcEndpointServiceConfigurationWithContextReturnsOnCall == nil {
		fake.createVpcEndpointServiceConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
			result2 error
		})
	}
	fake.createVpcEndpointServiceConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointWithContext(arg1 aws.Context, arg2 *ec2.CreateVpcEndpointInput, arg3 ...request.Option) (*ec2.CreateVpcEndpointOutput, error) {
	fake.createVpcEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointWithContextReturnsOnCall[len(fake.createVpcEndpointWithContextArgsForCall)]
	fake.createVpcEndpointWithContextArgsForCall = append(fake.createVpcEndpointWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpcEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpcEndpointWithContextMutex.Unlock()
	if fake.CreateVpcEndpointWithContextStub != nil {
		return fake.CreateVpcEndpointWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcEndpointWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointWithContextCallCount() int {
	fake.createVpcEndpointWithContextMutex.RLock()
	defer fake.createVpcEndpointWithContextMutex.RUnlock()
	return len(fake.createVpcEndpointWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointWithContextCalls(stub func(aws.Context, *ec2.CreateVpcEndpointInput, ...request.Option) (*ec2.CreateVpcEndpointOutput, error)) {
	fake.createVpcEndpointWithContextMutex.Lock()
	defer fake.createVpcEndpointWithContextMutex.Unlock()
	fake.CreateVpcEndpointWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpcEndpointInput, []request.Option) {
	fake.createVpcEndpointWithContextMutex.RLock()
	defer fake.createVpcEndpointWithContextMutex.RUnlock()
	argsForCall := fake.createVpcEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpcEndpointWithContextReturns(result1 *ec2.CreateVpcEndpointOutput, result2 error) {
	fake.createVpcEndpointWithContextMutex.Lock()
	defer fake.createVpcEndpointWithContextMutex.Unlock()
	fake.CreateVpcEndpointWithContextStub = nil
	fake.createVpcEndpointWithContextReturns = struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointWithContextReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointOutput, result2 error) {
	fake.createVpcEndpointWithContextMutex.Lock()
	defer fake.createVpcEndpointWithContextMutex.Unlock()
	fake.CreateVpcEndpointWithContextStub = nil
	if fake.createVpcEndpointWithContextReturnsOnCall == nil {
		fake.createVpcEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointOutput
			result2 error
		})
	}
	fake.createVpcEndpointWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcPeeringConnection(arg1 *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	fake.createVpcPeeringConnectionMutex.Lock()
	ret, specificReturn := fake.createVpcPeeringConnectionReturnsOnCall[len(fake.createVpcPeeringConnectionArgsForCall)]
	fake.createVpcPeeringConnectionArgsForCall = append(fake.createVpcPeeringConnectionArgsForCall, struct {
		arg1 *ec2.CreateVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("CreateVpcPeeringConnection", []interface{}{arg1})
	fake.createVpcPeeringConnectionMutex.Unlock()
	if fake.CreateVpcPeeringConnectionStub != nil {
		return fake.CreateVpcPeeringConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcPeeringConnectionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionCallCount() int {
	fake.createVpcPeeringConnectionMutex.RLock()
	defer fake.createVpcPeeringConnectionMutex.RUnlock()
	return len(fake.createVpcPeeringConnectionArgsForCall)
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionCalls(stub func(*ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error)) {
	fake.createVpcPeeringConnectionMutex.Lock()
	defer fake.createVpcPeeringConnectionMutex.Unlock()
	fake.CreateVpcPeeringConnectionStub = stub
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionArgsForCall(i int) *ec2.CreateVpcPeeringConnectionInput {
	fake.createVpcPeeringConnectionMutex.RLock()
	defer fake.createVpcPeeringConnectionMutex.RUnlock()
	argsForCall := fake.createVpcPeeringConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionReturns(result1 *ec2.CreateVpcPeeringConnectionOutput, result2 error) {
	fake.createVpcPeeringConnectionMutex.Lock()
	defer fake.createVpcPeeringConnectionMutex.Unlock()
	fake.CreateVpcPeeringConnectionStub = nil
	fake.createVpcPeeringConnectionReturns = struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionReturnsOnCall(i int, result1 *ec2.CreateVpcPeeringConnectionOutput, result2 error) {
	fake.createVpcPeeringConnectionMutex.Lock()
	defer fake.createVpcPeeringConnectionMutex.Unlock()
	fake.CreateVpcPeeringConnectionStub = nil
	if fake.createVpcPeeringConnectionReturnsOnCall == nil {
		fake.createVpcPeeringConnectionReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.createVpcPeeringConnectionReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionRequest(arg1 *ec2.CreateVpcPeeringConnectionInput) (*request.Request, *ec2.CreateVpcPeeringConnectionOutput) {
	fake.createVpcPeeringConnectionRequestMutex.Lock()
	ret, specificReturn := fake.createVpcPeeringConnectionRequestReturnsOnCall[len(fake.createVpcPeeringConnectionRequestArgsForCall)]
	fake.createVpcPeeringConnectionRequestArgsForCall = append(fake.createVpcPeeringConnectionRequestArgsForCall, struct {
		arg1 *ec2.CreateVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("CreateVpcPeeringConnectionRequest", []interface{}{arg1})
	fake.createVpcPeeringConnectionRequestMutex.Unlock()
	if fake.CreateVpcPeeringConnectionRequestStub != nil {
		return fake.CreateVpcPeeringConnectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcPeeringConnectionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionRequestCallCount() int {
	fake.createVpcPeeringConnectionRequestMutex.RLock()
	defer fake.createVpcPeeringConnectionRequestMutex.RUnlock()
	return len(fake.createVpcPeeringConnectionRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionRequestCalls(stub func(*ec2.CreateVpcPeeringConnectionInput) (*request.Request, *ec2.CreateVpcPeeringConnectionOutput)) {
	fake.createVpcPeeringConnectionRequestMutex.Lock()
	defer fake.createVpcPeeringConnectionRequestMutex.Unlock()
	fake.CreateVpcPeeringConnectionRequestStub = stub
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionRequestArgsForCall(i int) *ec2.CreateVpcPeeringConnectionInput {
	fake.createVpcPeeringConnectionRequestMutex.RLock()
	defer fake.createVpcPeeringConnectionRequestMutex.RUnlock()
	argsForCall := fake.createVpcPeeringConnectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionRequestReturns(result1 *request.Request, result2 *ec2.CreateVpcPeeringConnectionOutput) {
	fake.createVpcPeeringConnectionRequestMutex.Lock()
	defer fake.createVpcPeeringConnectionRequestMutex.Unlock()
	fake.CreateVpcPeeringConnectionRequestStub = nil
	fake.createVpcPeeringConnectionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpcPeeringConnectionOutput) {
	fake.createVpcPeeringConnectionRequestMutex.Lock()
	defer fake.createVpcPeeringConnectionRequestMutex.Unlock()
	fake.CreateVpcPeeringConnectionRequestStub = nil
	if fake.createVpcPeeringConnectionRequestReturnsOnCall == nil {
		fake.createVpcPeeringConnectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpcPeeringConnectionOutput
		})
	}
	fake.createVpcPeeringConnectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionWithContext(arg1 aws.Context, arg2 *ec2.CreateVpcPeeringConnectionInput, arg3 ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	fake.createVpcPeeringConnectionWithContextMutex.Lock()
	ret, specificReturn := fake.createVpcPeeringConnectionWithContextReturnsOnCall[len(fake.createVpcPeeringConnectionWithContextArgsForCall)]
	fake.createVpcPeeringConnectionWithContextArgsForCall = append(fake.createVpcPeeringConnectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcPeeringConnectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpcPeeringConnectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpcPeeringConnectionWithContextMutex.Unlock()
	if fake.CreateVpcPeeringConnectionWithContextStub != nil {
		return fake.CreateVpcPeeringConnectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcPeeringConnectionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionWithContextCallCount() int {
	fake.createVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.createVpcPeeringConnectionWithContextMutex.RUnlock()
	return len(fake.createVpcPeeringConnectionWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionWithContextCalls(stub func(aws.Context, *ec2.CreateVpcPeeringConnectionInput, ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error)) {
	fake.createVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.createVpcPeeringConnectionWithContextMutex.Unlock()
	fake.CreateVpcPeeringConnectionWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpcPeeringConnectionInput, []request.Option) {
	fake.createVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.createVpcPeeringConnectionWithContextMutex.RUnlock()
	argsForCall := fake.createVpcPeeringConnectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionWithContextReturns(result1 *ec2.CreateVpcPeeringConnectionOutput, result2 error) {
	fake.createVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.createVpcPeeringConnectionWithContextMutex.Unlock()
	fake.CreateVpcPeeringConnectionWithContextStub = nil
	fake.createVpcPeeringConnectionWithContextReturns = struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcPeeringConnectionWithContextReturnsOnCall(i int, result1 *ec2.CreateVpcPeeringConnectionOutput, result2 error) {
	fake.createVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.createVpcPeeringConnectionWithContextMutex.Unlock()
	fake.CreateVpcPeeringConnectionWithContextStub = nil
	if fake.createVpcPeeringConnectionWithContextReturnsOnCall == nil {
		fake.createVpcPeeringConnectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.createVpcPeeringConnectionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcRequest(arg1 *ec2.CreateVpcInput) (*request.Request, *ec2.CreateVpcOutput) {
	fake.createVpcRequestMutex.Lock()
	ret, specificReturn := fake.createVpcRequestReturnsOnCall[len(fake.createVpcRequestArgsForCall)]
	fake.createVpcRequestArgsForCall = append(fake.createVpcRequestArgsForCall, struct {
		arg1 *ec2.CreateVpcInput
	}{arg1})
	fake.recordInvocation("CreateVpcRequest", []interface{}{arg1})
	fake.createVpcRequestMutex.Unlock()
	if fake.CreateVpcRequestStub != nil {
		return fake.CreateVpcRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcRequestCallCount() int {
	fake.createVpcRequestMutex.RLock()
	defer fake.createVpcRequestMutex.RUnlock()
	return len(fake.createVpcRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpcRequestCalls(stub func(*ec2.CreateVpcInput) (*request.Request, *ec2.CreateVpcOutput)) {
	fake.createVpcRequestMutex.Lock()
	defer fake.createVpcRequestMutex.Unlock()
	fake.CreateVpcRequestStub = stub
}

func (fake *FakeEC2API) CreateVpcRequestArgsForCall(i int) *ec2.CreateVpcInput {
	fake.createVpcRequestMutex.RLock()
	defer fake.createVpcRequestMutex.RUnlock()
	argsForCall := fake.createVpcRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpcRequestReturns(result1 *request.Request, result2 *ec2.CreateVpcOutput) {
	fake.createVpcRequestMutex.Lock()
	defer fake.createVpcRequestMutex.Unlock()
	fake.CreateVpcRequestStub = nil
	fake.createVpcRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpcOutput) {
	fake.createVpcRequestMutex.Lock()
	defer fake.createVpcRequestMutex.Unlock()
	fake.CreateVpcRequestStub = nil
	if fake.createVpcRequestReturnsOnCall == nil {
		fake.createVpcRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpcOutput
		})
	}
	fake.createVpcRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcWithContext(arg1 aws.Context, arg2 *ec2.CreateVpcInput, arg3 ...request.Option) (*ec2.CreateVpcOutput, error) {
	fake.createVpcWithContextMutex.Lock()
	ret, specificReturn := fake.createVpcWithContextReturnsOnCall[len(fake.createVpcWithContextArgsForCall)]
	fake.createVpcWithContextArgsForCall = append(fake.createVpcWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpcInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpcWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpcWithContextMutex.Unlock()
	if fake.CreateVpcWithContextStub != nil {
		return fake.CreateVpcWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpcWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcWithContextCallCount() int {
	fake.createVpcWithContextMutex.RLock()
	defer fake.createVpcWithContextMutex.RUnlock()
	return len(fake.createVpcWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpcWithContextCalls(stub func(aws.Context, *ec2.CreateVpcInput, ...request.Option) (*ec2.CreateVpcOutput, error)) {
	fake.createVpcWithContextMutex.Lock()
	defer fake.createVpcWithContextMutex.Unlock()
	fake.CreateVpcWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpcWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpcInput, []request.Option) {
	fake.createVpcWithContextMutex.RLock()
	defer fake.createVpcWithContextMutex.RUnlock()
	argsForCall := fake.createVpcWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpcWithContextReturns(result1 *ec2.CreateVpcOutput, result2 error) {
	fake.createVpcWithContextMutex.Lock()
	defer fake.createVpcWithContextMutex.Unlock()
	fake.CreateVpcWithContextStub = nil
	fake.createVpcWithContextReturns = struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcWithContextReturnsOnCall(i int, result1 *ec2.CreateVpcOutput, result2 error) {
	fake.createVpcWithContextMutex.Lock()
	defer fake.createVpcWithContextMutex.Unlock()
	fake.CreateVpcWithContextStub = nil
	if fake.createVpcWithContextReturnsOnCall == nil {
		fake.createVpcWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcOutput
			result2 error
		})
	}
	fake.createVpcWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnection(arg1 *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
	fake.createVpnConnectionMutex.Lock()
	ret, specificReturn := fake.createVpnConnectionReturnsOnCall[len(fake.createVpnConnectionArgsForCall)]
	fake.createVpnConnectionArgsForCall = append(fake.createVpnConnectionArgsForCall, struct {
		arg1 *ec2.CreateVpnConnectionInput
	}{arg1})
	fake.recordInvocation("CreateVpnConnection", []interface{}{arg1})
	fake.createVpnConnectionMutex.Unlock()
	if fake.CreateVpnConnectionStub != nil {
		return fake.CreateVpnConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnConnectionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnConnectionCallCount() int {
	fake.createVpnConnectionMutex.RLock()
	defer fake.createVpnConnectionMutex.RUnlock()
	return len(fake.createVpnConnectionArgsForCall)
}

func (fake *FakeEC2API) CreateVpnConnectionCalls(stub func(*ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error)) {
	fake.createVpnConnectionMutex.Lock()
	defer fake.createVpnConnectionMutex.Unlock()
	fake.CreateVpnConnectionStub = stub
}

func (fake *FakeEC2API) CreateVpnConnectionArgsForCall(i int) *ec2.CreateVpnConnectionInput {
	fake.createVpnConnectionMutex.RLock()
	defer fake.createVpnConnectionMutex.RUnlock()
	argsForCall := fake.createVpnConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpnConnectionReturns(result1 *ec2.CreateVpnConnectionOutput, result2 error) {
	fake.createVpnConnectionMutex.Lock()
	defer fake.createVpnConnectionMutex.Unlock()
	fake.CreateVpnConnectionStub = nil
	fake.createVpnConnectionReturns = struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionReturnsOnCall(i int, result1 *ec2.CreateVpnConnectionOutput, result2 error) {
	fake.createVpnConnectionMutex.Lock()
	defer fake.createVpnConnectionMutex.Unlock()
	fake.CreateVpnConnectionStub = nil
	if fake.createVpnConnectionReturnsOnCall == nil {
		fake.createVpnConnectionReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpnConnectionOutput
			result2 error
		})
	}
	fake.createVpnConnectionReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRequest(arg1 *ec2.CreateVpnConnectionInput) (*request.Request, *ec2.CreateVpnConnectionOutput) {
	fake.createVpnConnectionRequestMutex.Lock()
	ret, specificReturn := fake.createVpnConnectionRequestReturnsOnCall[len(fake.createVpnConnectionRequestArgsForCall)]
	fake.createVpnConnectionRequestArgsForCall = append(fake.createVpnConnectionRequestArgsForCall, struct {
		arg1 *ec2.CreateVpnConnectionInput
	}{arg1})
	fake.recordInvocation("CreateVpnConnectionRequest", []interface{}{arg1})
	fake.createVpnConnectionRequestMutex.Unlock()
	if fake.CreateVpnConnectionRequestStub != nil {
		return fake.CreateVpnConnectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnConnectionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnConnectionRequestCallCount() int {
	fake.createVpnConnectionRequestMutex.RLock()
	defer fake.createVpnConnectionRequestMutex.RUnlock()
	return len(fake.createVpnConnectionRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpnConnectionRequestCalls(stub func(*ec2.CreateVpnConnectionInput) (*request.Request, *ec2.CreateVpnConnectionOutput)) {
	fake.createVpnConnectionRequestMutex.Lock()
	defer fake.createVpnConnectionRequestMutex.Unlock()
	fake.CreateVpnConnectionRequestStub = stub
}

func (fake *FakeEC2API) CreateVpnConnectionRequestArgsForCall(i int) *ec2.CreateVpnConnectionInput {
	fake.createVpnConnectionRequestMutex.RLock()
	defer fake.createVpnConnectionRequestMutex.RUnlock()
	argsForCall := fake.createVpnConnectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpnConnectionRequestReturns(result1 *request.Request, result2 *ec2.CreateVpnConnectionOutput) {
	fake.createVpnConnectionRequestMutex.Lock()
	defer fake.createVpnConnectionRequestMutex.Unlock()
	fake.CreateVpnConnectionRequestStub = nil
	fake.createVpnConnectionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpnConnectionOutput) {
	fake.createVpnConnectionRequestMutex.Lock()
	defer fake.createVpnConnectionRequestMutex.Unlock()
	fake.CreateVpnConnectionRequestStub = nil
	if fake.createVpnConnectionRequestReturnsOnCall == nil {
		fake.createVpnConnectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpnConnectionOutput
		})
	}
	fake.createVpnConnectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRoute(arg1 *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
	fake.createVpnConnectionRouteMutex.Lock()
	ret, specificReturn := fake.createVpnConnectionRouteReturnsOnCall[len(fake.createVpnConnectionRouteArgsForCall)]
	fake.createVpnConnectionRouteArgsForCall = append(fake.createVpnConnectionRouteArgsForCall, struct {
		arg1 *ec2.CreateVpnConnectionRouteInput
	}{arg1})
	fake.recordInvocation("CreateVpnConnectionRoute", []interface{}{arg1})
	fake.createVpnConnectionRouteMutex.Unlock()
	if fake.CreateVpnConnectionRouteStub != nil {
		return fake.CreateVpnConnectionRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnConnectionRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnConnectionRouteCallCount() int {
	fake.createVpnConnectionRouteMutex.RLock()
	defer fake.createVpnConnectionRouteMutex.RUnlock()
	return len(fake.createVpnConnectionRouteArgsForCall)
}

func (fake *FakeEC2API) CreateVpnConnectionRouteCalls(stub func(*ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error)) {
	fake.createVpnConnectionRouteMutex.Lock()
	defer fake.createVpnConnectionRouteMutex.Unlock()
	fake.CreateVpnConnectionRouteStub = stub
}

func (fake *FakeEC2API) CreateVpnConnectionRouteArgsForCall(i int) *ec2.CreateVpnConnectionRouteInput {
	fake.createVpnConnectionRouteMutex.RLock()
	defer fake.createVpnConnectionRouteMutex.RUnlock()
	argsForCall := fake.createVpnConnectionRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpnConnectionRouteReturns(result1 *ec2.CreateVpnConnectionRouteOutput, result2 error) {
	fake.createVpnConnectionRouteMutex.Lock()
	defer fake.createVpnConnectionRouteMutex.Unlock()
	fake.CreateVpnConnectionRouteStub = nil
	fake.createVpnConnectionRouteReturns = struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRouteReturnsOnCall(i int, result1 *ec2.CreateVpnConnectionRouteOutput, result2 error) {
	fake.createVpnConnectionRouteMutex.Lock()
	defer fake.createVpnConnectionRouteMutex.Unlock()
	fake.CreateVpnConnectionRouteStub = nil
	if fake.createVpnConnectionRouteReturnsOnCall == nil {
		fake.createVpnConnectionRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpnConnectionRouteOutput
			result2 error
		})
	}
	fake.createVpnConnectionRouteReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRouteRequest(arg1 *ec2.CreateVpnConnectionRouteInput) (*request.Request, *ec2.CreateVpnConnectionRouteOutput) {
	fake.createVpnConnectionRouteRequestMutex.Lock()
	ret, specificReturn := fake.createVpnConnectionRouteRequestReturnsOnCall[len(fake.createVpnConnectionRouteRequestArgsForCall)]
	fake.createVpnConnectionRouteRequestArgsForCall = append(fake.createVpnConnectionRouteRequestArgsForCall, struct {
		arg1 *ec2.CreateVpnConnectionRouteInput
	}{arg1})
	fake.recordInvocation("CreateVpnConnectionRouteRequest", []interface{}{arg1})
	fake.createVpnConnectionRouteRequestMutex.Unlock()
	if fake.CreateVpnConnectionRouteRequestStub != nil {
		return fake.CreateVpnConnectionRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnConnectionRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnConnectionRouteRequestCallCount() int {
	fake.createVpnConnectionRouteRequestMutex.RLock()
	defer fake.createVpnConnectionRouteRequestMutex.RUnlock()
	return len(fake.createVpnConnectionRouteRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpnConnectionRouteRequestCalls(stub func(*ec2.CreateVpnConnectionRouteInput) (*request.Request, *ec2.CreateVpnConnectionRouteOutput)) {
	fake.createVpnConnectionRouteRequestMutex.Lock()
	defer fake.createVpnConnectionRouteRequestMutex.Unlock()
	fake.CreateVpnConnectionRouteRequestStub = stub
}

func (fake *FakeEC2API) CreateVpnConnectionRouteRequestArgsForCall(i int) *ec2.CreateVpnConnectionRouteInput {
	fake.createVpnConnectionRouteRequestMutex.RLock()
	defer fake.createVpnConnectionRouteRequestMutex.RUnlock()
	argsForCall := fake.createVpnConnectionRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpnConnectionRouteRequestReturns(result1 *request.Request, result2 *ec2.CreateVpnConnectionRouteOutput) {
	fake.createVpnConnectionRouteRequestMutex.Lock()
	defer fake.createVpnConnectionRouteRequestMutex.Unlock()
	fake.CreateVpnConnectionRouteRequestStub = nil
	fake.createVpnConnectionRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpnConnectionRouteOutput) {
	fake.createVpnConnectionRouteRequestMutex.Lock()
	defer fake.createVpnConnectionRouteRequestMutex.Unlock()
	fake.CreateVpnConnectionRouteRequestStub = nil
	if fake.createVpnConnectionRouteRequestReturnsOnCall == nil {
		fake.createVpnConnectionRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpnConnectionRouteOutput
		})
	}
	fake.createVpnConnectionRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpnConnectionRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRouteWithContext(arg1 aws.Context, arg2 *ec2.CreateVpnConnectionRouteInput, arg3 ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error) {
	fake.createVpnConnectionRouteWithContextMutex.Lock()
	ret, specificReturn := fake.createVpnConnectionRouteWithContextReturnsOnCall[len(fake.createVpnConnectionRouteWithContextArgsForCall)]
	fake.createVpnConnectionRouteWithContextArgsForCall = append(fake.createVpnConnectionRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpnConnectionRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpnConnectionRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpnConnectionRouteWithContextMutex.Unlock()
	if fake.CreateVpnConnectionRouteWithContextStub != nil {
		return fake.CreateVpnConnectionRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnConnectionRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnConnectionRouteWithContextCallCount() int {
	fake.createVpnConnectionRouteWithContextMutex.RLock()
	defer fake.createVpnConnectionRouteWithContextMutex.RUnlock()
	return len(fake.createVpnConnectionRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpnConnectionRouteWithContextCalls(stub func(aws.Context, *ec2.CreateVpnConnectionRouteInput, ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error)) {
	fake.createVpnConnectionRouteWithContextMutex.Lock()
	defer fake.createVpnConnectionRouteWithContextMutex.Unlock()
	fake.CreateVpnConnectionRouteWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpnConnectionRouteWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpnConnectionRouteInput, []request.Option) {
	fake.createVpnConnectionRouteWithContextMutex.RLock()
	defer fake.createVpnConnectionRouteWithContextMutex.RUnlock()
	argsForCall := fake.createVpnConnectionRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpnConnectionRouteWithContextReturns(result1 *ec2.CreateVpnConnectionRouteOutput, result2 error) {
	fake.createVpnConnectionRouteWithContextMutex.Lock()
	defer fake.createVpnConnectionRouteWithContextMutex.Unlock()
	fake.CreateVpnConnectionRouteWithContextStub = nil
	fake.createVpnConnectionRouteWithContextReturns = struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionRouteWithContextReturnsOnCall(i int, result1 *ec2.CreateVpnConnectionRouteOutput, result2 error) {
	fake.createVpnConnectionRouteWithContextMutex.Lock()
	defer fake.createVpnConnectionRouteWithContextMutex.Unlock()
	fake.CreateVpnConnectionRouteWithContextStub = nil
	if fake.createVpnConnectionRouteWithContextReturnsOnCall == nil {
		fake.createVpnConnectionRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpnConnectionRouteOutput
			result2 error
		})
	}
	fake.createVpnConnectionRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionWithContext(arg1 aws.Context, arg2 *ec2.CreateVpnConnectionInput, arg3 ...request.Option) (*ec2.CreateVpnConnectionOutput, error) {
	fake.createVpnConnectionWithContextMutex.Lock()
	ret, specificReturn := fake.createVpnConnectionWithContextReturnsOnCall[len(fake.createVpnConnectionWithContextArgsForCall)]
	fake.createVpnConnectionWithContextArgsForCall = append(fake.createVpnConnectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpnConnectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpnConnectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpnConnectionWithContextMutex.Unlock()
	if fake.CreateVpnConnectionWithContextStub != nil {
		return fake.CreateVpnConnectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnConnectionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnConnectionWithContextCallCount() int {
	fake.createVpnConnectionWithContextMutex.RLock()
	defer fake.createVpnConnectionWithContextMutex.RUnlock()
	return len(fake.createVpnConnectionWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpnConnectionWithContextCalls(stub func(aws.Context, *ec2.CreateVpnConnectionInput, ...request.Option) (*ec2.CreateVpnConnectionOutput, error)) {
	fake.createVpnConnectionWithContextMutex.Lock()
	defer fake.createVpnConnectionWithContextMutex.Unlock()
	fake.CreateVpnConnectionWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpnConnectionWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpnConnectionInput, []request.Option) {
	fake.createVpnConnectionWithContextMutex.RLock()
	defer fake.createVpnConnectionWithContextMutex.RUnlock()
	argsForCall := fake.createVpnConnectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpnConnectionWithContextReturns(result1 *ec2.CreateVpnConnectionOutput, result2 error) {
	fake.createVpnConnectionWithContextMutex.Lock()
	defer fake.createVpnConnectionWithContextMutex.Unlock()
	fake.CreateVpnConnectionWithContextStub = nil
	fake.createVpnConnectionWithContextReturns = struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnConnectionWithContextReturnsOnCall(i int, result1 *ec2.CreateVpnConnectionOutput, result2 error) {
	fake.createVpnConnectionWithContextMutex.Lock()
	defer fake.createVpnConnectionWithContextMutex.Unlock()
	fake.CreateVpnConnectionWithContextStub = nil
	if fake.createVpnConnectionWithContextReturnsOnCall == nil {
		fake.createVpnConnectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpnConnectionOutput
			result2 error
		})
	}
	fake.createVpnConnectionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnGateway(arg1 *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
	fake.createVpnGatewayMutex.Lock()
	ret, specificReturn := fake.createVpnGatewayReturnsOnCall[len(fake.createVpnGatewayArgsForCall)]
	fake.createVpnGatewayArgsForCall = append(fake.createVpnGatewayArgsForCall, struct {
		arg1 *ec2.CreateVpnGatewayInput
	}{arg1})
	fake.recordInvocation("CreateVpnGateway", []interface{}{arg1})
	fake.createVpnGatewayMutex.Unlock()
	if fake.CreateVpnGatewayStub != nil {
		return fake.CreateVpnGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnGatewayCallCount() int {
	fake.createVpnGatewayMutex.RLock()
	defer fake.createVpnGatewayMutex.RUnlock()
	return len(fake.createVpnGatewayArgsForCall)
}

func (fake *FakeEC2API) CreateVpnGatewayCalls(stub func(*ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error)) {
	fake.createVpnGatewayMutex.Lock()
	defer fake.createVpnGatewayMutex.Unlock()
	fake.CreateVpnGatewayStub = stub
}

func (fake *FakeEC2API) CreateVpnGatewayArgsForCall(i int) *ec2.CreateVpnGatewayInput {
	fake.createVpnGatewayMutex.RLock()
	defer fake.createVpnGatewayMutex.RUnlock()
	argsForCall := fake.createVpnGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpnGatewayReturns(result1 *ec2.CreateVpnGatewayOutput, result2 error) {
	fake.createVpnGatewayMutex.Lock()
	defer fake.createVpnGatewayMutex.Unlock()
	fake.CreateVpnGatewayStub = nil
	fake.createVpnGatewayReturns = struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnGatewayReturnsOnCall(i int, result1 *ec2.CreateVpnGatewayOutput, result2 error) {
	fake.createVpnGatewayMutex.Lock()
	defer fake.createVpnGatewayMutex.Unlock()
	fake.CreateVpnGatewayStub = nil
	if fake.createVpnGatewayReturnsOnCall == nil {
		fake.createVpnGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpnGatewayOutput
			result2 error
		})
	}
	fake.createVpnGatewayReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnGatewayRequest(arg1 *ec2.CreateVpnGatewayInput) (*request.Request, *ec2.CreateVpnGatewayOutput) {
	fake.createVpnGatewayRequestMutex.Lock()
	ret, specificReturn := fake.createVpnGatewayRequestReturnsOnCall[len(fake.createVpnGatewayRequestArgsForCall)]
	fake.createVpnGatewayRequestArgsForCall = append(fake.createVpnGatewayRequestArgsForCall, struct {
		arg1 *ec2.CreateVpnGatewayInput
	}{arg1})
	fake.recordInvocation("CreateVpnGatewayRequest", []interface{}{arg1})
	fake.createVpnGatewayRequestMutex.Unlock()
	if fake.CreateVpnGatewayRequestStub != nil {
		return fake.CreateVpnGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnGatewayRequestCallCount() int {
	fake.createVpnGatewayRequestMutex.RLock()
	defer fake.createVpnGatewayRequestMutex.RUnlock()
	return len(fake.createVpnGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) CreateVpnGatewayRequestCalls(stub func(*ec2.CreateVpnGatewayInput) (*request.Request, *ec2.CreateVpnGatewayOutput)) {
	fake.createVpnGatewayRequestMutex.Lock()
	defer fake.createVpnGatewayRequestMutex.Unlock()
	fake.CreateVpnGatewayRequestStub = stub
}

func (fake *FakeEC2API) CreateVpnGatewayRequestArgsForCall(i int) *ec2.CreateVpnGatewayInput {
	fake.createVpnGatewayRequestMutex.RLock()
	defer fake.createVpnGatewayRequestMutex.RUnlock()
	argsForCall := fake.createVpnGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) CreateVpnGatewayRequestReturns(result1 *request.Request, result2 *ec2.CreateVpnGatewayOutput) {
	fake.createVpnGatewayRequestMutex.Lock()
	defer fake.createVpnGatewayRequestMutex.Unlock()
	fake.CreateVpnGatewayRequestStub = nil
	fake.createVpnGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.CreateVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.CreateVpnGatewayOutput) {
	fake.createVpnGatewayRequestMutex.Lock()
	defer fake.createVpnGatewayRequestMutex.Unlock()
	fake.CreateVpnGatewayRequestStub = nil
	if fake.createVpnGatewayRequestReturnsOnCall == nil {
		fake.createVpnGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.CreateVpnGatewayOutput
		})
	}
	fake.createVpnGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.CreateVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnGatewayWithContext(arg1 aws.Context, arg2 *ec2.CreateVpnGatewayInput, arg3 ...request.Option) (*ec2.CreateVpnGatewayOutput, error) {
	fake.createVpnGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.createVpnGatewayWithContextReturnsOnCall[len(fake.createVpnGatewayWithContextArgsForCall)]
	fake.createVpnGatewayWithContextArgsForCall = append(fake.createVpnGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.CreateVpnGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateVpnGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.createVpnGatewayWithContextMutex.Unlock()
	if fake.CreateVpnGatewayWithContextStub != nil {
		return fake.CreateVpnGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createVpnGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpnGatewayWithContextCallCount() int {
	fake.createVpnGatewayWithContextMutex.RLock()
	defer fake.createVpnGatewayWithContextMutex.RUnlock()
	return len(fake.createVpnGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) CreateVpnGatewayWithContextCalls(stub func(aws.Context, *ec2.CreateVpnGatewayInput, ...request.Option) (*ec2.CreateVpnGatewayOutput, error)) {
	fake.createVpnGatewayWithContextMutex.Lock()
	defer fake.createVpnGatewayWithContextMutex.Unlock()
	fake.CreateVpnGatewayWithContextStub = stub
}

func (fake *FakeEC2API) CreateVpnGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.CreateVpnGatewayInput, []request.Option) {
	fake.createVpnGatewayWithContextMutex.RLock()
	defer fake.createVpnGatewayWithContextMutex.RUnlock()
	argsForCall := fake.createVpnGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpnGatewayWithContextReturns(result1 *ec2.CreateVpnGatewayOutput, result2 error) {
	fake.createVpnGatewayWithContextMutex.Lock()
	defer fake.createVpnGatewayWithContextMutex.Unlock()
	fake.CreateVpnGatewayWithContextStub = nil
	fake.createVpnGatewayWithContextReturns = struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpnGatewayWithContextReturnsOnCall(i int, result1 *ec2.CreateVpnGatewayOutput, result2 error) {
	fake.createVpnGatewayWithContextMutex.Lock()
	defer fake.createVpnGatewayWithContextMutex.Unlock()
	fake.CreateVpnGatewayWithContextStub = nil
	if fake.createVpnGatewayWithContextReturnsOnCall == nil {
		fake.createVpnGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpnGatewayOutput
			result2 error
		})
	}
	fake.createVpnGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnEndpoint(arg1 *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error) {
	fake.deleteClientVpnEndpointMutex.Lock()
	ret, specificReturn := fake.deleteClientVpnEndpointReturnsOnCall[len(fake.deleteClientVpnEndpointArgsForCall)]
	fake.deleteClientVpnEndpointArgsForCall = append(fake.deleteClientVpnEndpointArgsForCall, struct {
		arg1 *ec2.DeleteClientVpnEndpointInput
	}{arg1})
	fake.recordInvocation("DeleteClientVpnEndpoint", []interface{}{arg1})
	fake.deleteClientVpnEndpointMutex.Unlock()
	if fake.DeleteClientVpnEndpointStub != nil {
		return fake.DeleteClientVpnEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientVpnEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteClientVpnEndpointCallCount() int {
	fake.deleteClientVpnEndpointMutex.RLock()
	defer fake.deleteClientVpnEndpointMutex.RUnlock()
	return len(fake.deleteClientVpnEndpointArgsForCall)
}

func (fake *FakeEC2API) DeleteClientVpnEndpointCalls(stub func(*ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error)) {
	fake.deleteClientVpnEndpointMutex.Lock()
	defer fake.deleteClientVpnEndpointMutex.Unlock()
	fake.DeleteClientVpnEndpointStub = stub
}

func (fake *FakeEC2API) DeleteClientVpnEndpointArgsForCall(i int) *ec2.DeleteClientVpnEndpointInput {
	fake.deleteClientVpnEndpointMutex.RLock()
	defer fake.deleteClientVpnEndpointMutex.RUnlock()
	argsForCall := fake.deleteClientVpnEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteClientVpnEndpointReturns(result1 *ec2.DeleteClientVpnEndpointOutput, result2 error) {
	fake.deleteClientVpnEndpointMutex.Lock()
	defer fake.deleteClientVpnEndpointMutex.Unlock()
	fake.DeleteClientVpnEndpointStub = nil
	fake.deleteClientVpnEndpointReturns = struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnEndpointReturnsOnCall(i int, result1 *ec2.DeleteClientVpnEndpointOutput, result2 error) {
	fake.deleteClientVpnEndpointMutex.Lock()
	defer fake.deleteClientVpnEndpointMutex.Unlock()
	fake.DeleteClientVpnEndpointStub = nil
	if fake.deleteClientVpnEndpointReturnsOnCall == nil {
		fake.deleteClientVpnEndpointReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteClientVpnEndpointOutput
			result2 error
		})
	}
	fake.deleteClientVpnEndpointReturnsOnCall[i] = struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnEndpointRequest(arg1 *ec2.DeleteClientVpnEndpointInput) (*request.Request, *ec2.DeleteClientVpnEndpointOutput) {
	fake.deleteClientVpnEndpointRequestMutex.Lock()
	ret, specificReturn := fake.deleteClientVpnEndpointRequestReturnsOnCall[len(fake.deleteClientVpnEndpointRequestArgsForCall)]
	fake.deleteClientVpnEndpointRequestArgsForCall = append(fake.deleteClientVpnEndpointRequestArgsForCall, struct {
		arg1 *ec2.DeleteClientVpnEndpointInput
	}{arg1})
	fake.recordInvocation("DeleteClientVpnEndpointRequest", []interface{}{arg1})
	fake.deleteClientVpnEndpointRequestMutex.Unlock()
	if fake.DeleteClientVpnEndpointRequestStub != nil {
		return fake.DeleteClientVpnEndpointRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientVpnEndpointRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteClientVpnEndpointRequestCallCount() int {
	fake.deleteClientVpnEndpointRequestMutex.RLock()
	defer fake.deleteClientVpnEndpointRequestMutex.RUnlock()
	return len(fake.deleteClientVpnEndpointRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteClientVpnEndpointRequestCalls(stub func(*ec2.DeleteClientVpnEndpointInput) (*request.Request, *ec2.DeleteClientVpnEndpointOutput)) {
	fake.deleteClientVpnEndpointRequestMutex.Lock()
	defer fake.deleteClientVpnEndpointRequestMutex.Unlock()
	fake.DeleteClientVpnEndpointRequestStub = stub
}

func (fake *FakeEC2API) DeleteClientVpnEndpointRequestArgsForCall(i int) *ec2.DeleteClientVpnEndpointInput {
	fake.deleteClientVpnEndpointRequestMutex.RLock()
	defer fake.deleteClientVpnEndpointRequestMutex.RUnlock()
	argsForCall := fake.deleteClientVpnEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteClientVpnEndpointRequestReturns(result1 *request.Request, result2 *ec2.DeleteClientVpnEndpointOutput) {
	fake.deleteClientVpnEndpointRequestMutex.Lock()
	defer fake.deleteClientVpnEndpointRequestMutex.Unlock()
	fake.DeleteClientVpnEndpointRequestStub = nil
	fake.deleteClientVpnEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteClientVpnEndpointOutput) {
	fake.deleteClientVpnEndpointRequestMutex.Lock()
	defer fake.deleteClientVpnEndpointRequestMutex.Unlock()
	fake.DeleteClientVpnEndpointRequestStub = nil
	if fake.deleteClientVpnEndpointRequestReturnsOnCall == nil {
		fake.deleteClientVpnEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteClientVpnEndpointOutput
		})
	}
	fake.deleteClientVpnEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnEndpointWithContext(arg1 aws.Context, arg2 *ec2.DeleteClientVpnEndpointInput, arg3 ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error) {
	fake.deleteClientVpnEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.deleteClientVpnEndpointWithContextReturnsOnCall[len(fake.deleteClientVpnEndpointWithContextArgsForCall)]
	fake.deleteClientVpnEndpointWithContextArgsForCall = append(fake.deleteClientVpnEndpointWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteClientVpnEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteClientVpnEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteClientVpnEndpointWithContextMutex.Unlock()
	if fake.DeleteClientVpnEndpointWithContextStub != nil {
		return fake.DeleteClientVpnEndpointWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientVpnEndpointWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteClientVpnEndpointWithContextCallCount() int {
	fake.deleteClientVpnEndpointWithContextMutex.RLock()
	defer fake.deleteClientVpnEndpointWithContextMutex.RUnlock()
	return len(fake.deleteClientVpnEndpointWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteClientVpnEndpointWithContextCalls(stub func(aws.Context, *ec2.DeleteClientVpnEndpointInput, ...request.Option) (*ec2.DeleteClientVpnEndpointOutput, error)) {
	fake.deleteClientVpnEndpointWithContextMutex.Lock()
	defer fake.deleteClientVpnEndpointWithContextMutex.Unlock()
	fake.DeleteClientVpnEndpointWithContextStub = stub
}

func (fake *FakeEC2API) DeleteClientVpnEndpointWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteClientVpnEndpointInput, []request.Option) {
	fake.deleteClientVpnEndpointWithContextMutex.RLock()
	defer fake.deleteClientVpnEndpointWithContextMutex.RUnlock()
	argsForCall := fake.deleteClientVpnEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteClientVpnEndpointWithContextReturns(result1 *ec2.DeleteClientVpnEndpointOutput, result2 error) {
	fake.deleteClientVpnEndpointWithContextMutex.Lock()
	defer fake.deleteClientVpnEndpointWithContextMutex.Unlock()
	fake.DeleteClientVpnEndpointWithContextStub = nil
	fake.deleteClientVpnEndpointWithContextReturns = struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnEndpointWithContextReturnsOnCall(i int, result1 *ec2.DeleteClientVpnEndpointOutput, result2 error) {
	fake.deleteClientVpnEndpointWithContextMutex.Lock()
	defer fake.deleteClientVpnEndpointWithContextMutex.Unlock()
	fake.DeleteClientVpnEndpointWithContextStub = nil
	if fake.deleteClientVpnEndpointWithContextReturnsOnCall == nil {
		fake.deleteClientVpnEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteClientVpnEndpointOutput
			result2 error
		})
	}
	fake.deleteClientVpnEndpointWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnRoute(arg1 *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error) {
	fake.deleteClientVpnRouteMutex.Lock()
	ret, specificReturn := fake.deleteClientVpnRouteReturnsOnCall[len(fake.deleteClientVpnRouteArgsForCall)]
	fake.deleteClientVpnRouteArgsForCall = append(fake.deleteClientVpnRouteArgsForCall, struct {
		arg1 *ec2.DeleteClientVpnRouteInput
	}{arg1})
	fake.recordInvocation("DeleteClientVpnRoute", []interface{}{arg1})
	fake.deleteClientVpnRouteMutex.Unlock()
	if fake.DeleteClientVpnRouteStub != nil {
		return fake.DeleteClientVpnRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientVpnRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteClientVpnRouteCallCount() int {
	fake.deleteClientVpnRouteMutex.RLock()
	defer fake.deleteClientVpnRouteMutex.RUnlock()
	return len(fake.deleteClientVpnRouteArgsForCall)
}

func (fake *FakeEC2API) DeleteClientVpnRouteCalls(stub func(*ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error)) {
	fake.deleteClientVpnRouteMutex.Lock()
	defer fake.deleteClientVpnRouteMutex.Unlock()
	fake.DeleteClientVpnRouteStub = stub
}

func (fake *FakeEC2API) DeleteClientVpnRouteArgsForCall(i int) *ec2.DeleteClientVpnRouteInput {
	fake.deleteClientVpnRouteMutex.RLock()
	defer fake.deleteClientVpnRouteMutex.RUnlock()
	argsForCall := fake.deleteClientVpnRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteClientVpnRouteReturns(result1 *ec2.DeleteClientVpnRouteOutput, result2 error) {
	fake.deleteClientVpnRouteMutex.Lock()
	defer fake.deleteClientVpnRouteMutex.Unlock()
	fake.DeleteClientVpnRouteStub = nil
	fake.deleteClientVpnRouteReturns = struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnRouteReturnsOnCall(i int, result1 *ec2.DeleteClientVpnRouteOutput, result2 error) {
	fake.deleteClientVpnRouteMutex.Lock()
	defer fake.deleteClientVpnRouteMutex.Unlock()
	fake.DeleteClientVpnRouteStub = nil
	if fake.deleteClientVpnRouteReturnsOnCall == nil {
		fake.deleteClientVpnRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteClientVpnRouteOutput
			result2 error
		})
	}
	fake.deleteClientVpnRouteReturnsOnCall[i] = struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnRouteRequest(arg1 *ec2.DeleteClientVpnRouteInput) (*request.Request, *ec2.DeleteClientVpnRouteOutput) {
	fake.deleteClientVpnRouteRequestMutex.Lock()
	ret, specificReturn := fake.deleteClientVpnRouteRequestReturnsOnCall[len(fake.deleteClientVpnRouteRequestArgsForCall)]
	fake.deleteClientVpnRouteRequestArgsForCall = append(fake.deleteClientVpnRouteRequestArgsForCall, struct {
		arg1 *ec2.DeleteClientVpnRouteInput
	}{arg1})
	fake.recordInvocation("DeleteClientVpnRouteRequest", []interface{}{arg1})
	fake.deleteClientVpnRouteRequestMutex.Unlock()
	if fake.DeleteClientVpnRouteRequestStub != nil {
		return fake.DeleteClientVpnRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientVpnRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteClientVpnRouteRequestCallCount() int {
	fake.deleteClientVpnRouteRequestMutex.RLock()
	defer fake.deleteClientVpnRouteRequestMutex.RUnlock()
	return len(fake.deleteClientVpnRouteRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteClientVpnRouteRequestCalls(stub func(*ec2.DeleteClientVpnRouteInput) (*request.Request, *ec2.DeleteClientVpnRouteOutput)) {
	fake.deleteClientVpnRouteRequestMutex.Lock()
	defer fake.deleteClientVpnRouteRequestMutex.Unlock()
	fake.DeleteClientVpnRouteRequestStub = stub
}

func (fake *FakeEC2API) DeleteClientVpnRouteRequestArgsForCall(i int) *ec2.DeleteClientVpnRouteInput {
	fake.deleteClientVpnRouteRequestMutex.RLock()
	defer fake.deleteClientVpnRouteRequestMutex.RUnlock()
	argsForCall := fake.deleteClientVpnRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteClientVpnRouteRequestReturns(result1 *request.Request, result2 *ec2.DeleteClientVpnRouteOutput) {
	fake.deleteClientVpnRouteRequestMutex.Lock()
	defer fake.deleteClientVpnRouteRequestMutex.Unlock()
	fake.DeleteClientVpnRouteRequestStub = nil
	fake.deleteClientVpnRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteClientVpnRouteOutput) {
	fake.deleteClientVpnRouteRequestMutex.Lock()
	defer fake.deleteClientVpnRouteRequestMutex.Unlock()
	fake.DeleteClientVpnRouteRequestStub = nil
	if fake.deleteClientVpnRouteRequestReturnsOnCall == nil {
		fake.deleteClientVpnRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteClientVpnRouteOutput
		})
	}
	fake.deleteClientVpnRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteClientVpnRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnRouteWithContext(arg1 aws.Context, arg2 *ec2.DeleteClientVpnRouteInput, arg3 ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error) {
	fake.deleteClientVpnRouteWithContextMutex.Lock()
	ret, specificReturn := fake.deleteClientVpnRouteWithContextReturnsOnCall[len(fake.deleteClientVpnRouteWithContextArgsForCall)]
	fake.deleteClientVpnRouteWithContextArgsForCall = append(fake.deleteClientVpnRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteClientVpnRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteClientVpnRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteClientVpnRouteWithContextMutex.Unlock()
	if fake.DeleteClientVpnRouteWithContextStub != nil {
		return fake.DeleteClientVpnRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClientVpnRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteClientVpnRouteWithContextCallCount() int {
	fake.deleteClientVpnRouteWithContextMutex.RLock()
	defer fake.deleteClientVpnRouteWithContextMutex.RUnlock()
	return len(fake.deleteClientVpnRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteClientVpnRouteWithContextCalls(stub func(aws.Context, *ec2.DeleteClientVpnRouteInput, ...request.Option) (*ec2.DeleteClientVpnRouteOutput, error)) {
	fake.deleteClientVpnRouteWithContextMutex.Lock()
	defer fake.deleteClientVpnRouteWithContextMutex.Unlock()
	fake.DeleteClientVpnRouteWithContextStub = stub
}

func (fake *FakeEC2API) DeleteClientVpnRouteWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteClientVpnRouteInput, []request.Option) {
	fake.deleteClientVpnRouteWithContextMutex.RLock()
	defer fake.deleteClientVpnRouteWithContextMutex.RUnlock()
	argsForCall := fake.deleteClientVpnRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteClientVpnRouteWithContextReturns(result1 *ec2.DeleteClientVpnRouteOutput, result2 error) {
	fake.deleteClientVpnRouteWithContextMutex.Lock()
	defer fake.deleteClientVpnRouteWithContextMutex.Unlock()
	fake.DeleteClientVpnRouteWithContextStub = nil
	fake.deleteClientVpnRouteWithContextReturns = struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteClientVpnRouteWithContextReturnsOnCall(i int, result1 *ec2.DeleteClientVpnRouteOutput, result2 error) {
	fake.deleteClientVpnRouteWithContextMutex.Lock()
	defer fake.deleteClientVpnRouteWithContextMutex.Unlock()
	fake.DeleteClientVpnRouteWithContextStub = nil
	if fake.deleteClientVpnRouteWithContextReturnsOnCall == nil {
		fake.deleteClientVpnRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteClientVpnRouteOutput
			result2 error
		})
	}
	fake.deleteClientVpnRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteClientVpnRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteCustomerGateway(arg1 *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	fake.deleteCustomerGatewayMutex.Lock()
	ret, specificReturn := fake.deleteCustomerGatewayReturnsOnCall[len(fake.deleteCustomerGatewayArgsForCall)]
	fake.deleteCustomerGatewayArgsForCall = append(fake.deleteCustomerGatewayArgsForCall, struct {
		arg1 *ec2.DeleteCustomerGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteCustomerGateway", []interface{}{arg1})
	fake.deleteCustomerGatewayMutex.Unlock()
	if fake.DeleteCustomerGatewayStub != nil {
		return fake.DeleteCustomerGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCustomerGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteCustomerGatewayCallCount() int {
	fake.deleteCustomerGatewayMutex.RLock()
	defer fake.deleteCustomerGatewayMutex.RUnlock()
	return len(fake.deleteCustomerGatewayArgsForCall)
}

func (fake *FakeEC2API) DeleteCustomerGatewayCalls(stub func(*ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error)) {
	fake.deleteCustomerGatewayMutex.Lock()
	defer fake.deleteCustomerGatewayMutex.Unlock()
	fake.DeleteCustomerGatewayStub = stub
}

func (fake *FakeEC2API) DeleteCustomerGatewayArgsForCall(i int) *ec2.DeleteCustomerGatewayInput {
	fake.deleteCustomerGatewayMutex.RLock()
	defer fake.deleteCustomerGatewayMutex.RUnlock()
	argsForCall := fake.deleteCustomerGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteCustomerGatewayReturns(result1 *ec2.DeleteCustomerGatewayOutput, result2 error) {
	fake.deleteCustomerGatewayMutex.Lock()
	defer fake.deleteCustomerGatewayMutex.Unlock()
	fake.DeleteCustomerGatewayStub = nil
	fake.deleteCustomerGatewayReturns = struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteCustomerGatewayReturnsOnCall(i int, result1 *ec2.DeleteCustomerGatewayOutput, result2 error) {
	fake.deleteCustomerGatewayMutex.Lock()
	defer fake.deleteCustomerGatewayMutex.Unlock()
	fake.DeleteCustomerGatewayStub = nil
	if fake.deleteCustomerGatewayReturnsOnCall == nil {
		fake.deleteCustomerGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteCustomerGatewayOutput
			result2 error
		})
	}
	fake.deleteCustomerGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteCustomerGatewayRequest(arg1 *ec2.DeleteCustomerGatewayInput) (*request.Request, *ec2.DeleteCustomerGatewayOutput) {
	fake.deleteCustomerGatewayRequestMutex.Lock()
	ret, specificReturn := fake.deleteCustomerGatewayRequestReturnsOnCall[len(fake.deleteCustomerGatewayRequestArgsForCall)]
	fake.deleteCustomerGatewayRequestArgsForCall = append(fake.deleteCustomerGatewayRequestArgsForCall, struct {
		arg1 *ec2.DeleteCustomerGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteCustomerGatewayRequest", []interface{}{arg1})
	fake.deleteCustomerGatewayRequestMutex.Unlock()
	if fake.DeleteCustomerGatewayRequestStub != nil {
		return fake.DeleteCustomerGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCustomerGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteCustomerGatewayRequestCallCount() int {
	fake.deleteCustomerGatewayRequestMutex.RLock()
	defer fake.deleteCustomerGatewayRequestMutex.RUnlock()
	return len(fake.deleteCustomerGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteCustomerGatewayRequestCalls(stub func(*ec2.DeleteCustomerGatewayInput) (*request.Request, *ec2.DeleteCustomerGatewayOutput)) {
	fake.deleteCustomerGatewayRequestMutex.Lock()
	defer fake.deleteCustomerGatewayRequestMutex.Unlock()
	fake.DeleteCustomerGatewayRequestStub = stub
}

func (fake *FakeEC2API) DeleteCustomerGatewayRequestArgsForCall(i int) *ec2.DeleteCustomerGatewayInput {
	fake.deleteCustomerGatewayRequestMutex.RLock()
	defer fake.deleteCustomerGatewayRequestMutex.RUnlock()
	argsForCall := fake.deleteCustomerGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteCustomerGatewayRequestReturns(result1 *request.Request, result2 *ec2.DeleteCustomerGatewayOutput) {
	fake.deleteCustomerGatewayRequestMutex.Lock()
	defer fake.deleteCustomerGatewayRequestMutex.Unlock()
	fake.DeleteCustomerGatewayRequestStub = nil
	fake.deleteCustomerGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteCustomerGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteCustomerGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteCustomerGatewayOutput) {
	fake.deleteCustomerGatewayRequestMutex.Lock()
	defer fake.deleteCustomerGatewayRequestMutex.Unlock()
	fake.DeleteCustomerGatewayRequestStub = nil
	if fake.deleteCustomerGatewayRequestReturnsOnCall == nil {
		fake.deleteCustomerGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteCustomerGatewayOutput
		})
	}
	fake.deleteCustomerGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteCustomerGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteCustomerGatewayWithContext(arg1 aws.Context, arg2 *ec2.DeleteCustomerGatewayInput, arg3 ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error) {
	fake.deleteCustomerGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCustomerGatewayWithContextReturnsOnCall[len(fake.deleteCustomerGatewayWithContextArgsForCall)]
	fake.deleteCustomerGatewayWithContextArgsForCall = append(fake.deleteCustomerGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteCustomerGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCustomerGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCustomerGatewayWithContextMutex.Unlock()
	if fake.DeleteCustomerGatewayWithContextStub != nil {
		return fake.DeleteCustomerGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCustomerGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteCustomerGatewayWithContextCallCount() int {
	fake.deleteCustomerGatewayWithContextMutex.RLock()
	defer fake.deleteCustomerGatewayWithContextMutex.RUnlock()
	return len(fake.deleteCustomerGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteCustomerGatewayWithContextCalls(stub func(aws.Context, *ec2.DeleteCustomerGatewayInput, ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error)) {
	fake.deleteCustomerGatewayWithContextMutex.Lock()
	defer fake.deleteCustomerGatewayWithContextMutex.Unlock()
	fake.DeleteCustomerGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DeleteCustomerGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteCustomerGatewayInput, []request.Option) {
	fake.deleteCustomerGatewayWithContextMutex.RLock()
	defer fake.deleteCustomerGatewayWithContextMutex.RUnlock()
	argsForCall := fake.deleteCustomerGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteCustomerGatewayWithContextReturns(result1 *ec2.DeleteCustomerGatewayOutput, result2 error) {
	fake.deleteCustomerGatewayWithContextMutex.Lock()
	defer fake.deleteCustomerGatewayWithContextMutex.Unlock()
	fake.DeleteCustomerGatewayWithContextStub = nil
	fake.deleteCustomerGatewayWithContextReturns = struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteCustomerGatewayWithContextReturnsOnCall(i int, result1 *ec2.DeleteCustomerGatewayOutput, result2 error) {
	fake.deleteCustomerGatewayWithContextMutex.Lock()
	defer fake.deleteCustomerGatewayWithContextMutex.Unlock()
	fake.DeleteCustomerGatewayWithContextStub = nil
	if fake.deleteCustomerGatewayWithContextReturnsOnCall == nil {
		fake.deleteCustomerGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteCustomerGatewayOutput
			result2 error
		})
	}
	fake.deleteCustomerGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteCustomerGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteDhcpOptions(arg1 *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
	fake.deleteDhcpOptionsMutex.Lock()
	ret, specificReturn := fake.deleteDhcpOptionsReturnsOnCall[len(fake.deleteDhcpOptionsArgsForCall)]
	fake.deleteDhcpOptionsArgsForCall = append(fake.deleteDhcpOptionsArgsForCall, struct {
		arg1 *ec2.DeleteDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("DeleteDhcpOptions", []interface{}{arg1})
	fake.deleteDhcpOptionsMutex.Unlock()
	if fake.DeleteDhcpOptionsStub != nil {
		return fake.DeleteDhcpOptionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteDhcpOptionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteDhcpOptionsCallCount() int {
	fake.deleteDhcpOptionsMutex.RLock()
	defer fake.deleteDhcpOptionsMutex.RUnlock()
	return len(fake.deleteDhcpOptionsArgsForCall)
}

func (fake *FakeEC2API) DeleteDhcpOptionsCalls(stub func(*ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error)) {
	fake.deleteDhcpOptionsMutex.Lock()
	defer fake.deleteDhcpOptionsMutex.Unlock()
	fake.DeleteDhcpOptionsStub = stub
}

func (fake *FakeEC2API) DeleteDhcpOptionsArgsForCall(i int) *ec2.DeleteDhcpOptionsInput {
	fake.deleteDhcpOptionsMutex.RLock()
	defer fake.deleteDhcpOptionsMutex.RUnlock()
	argsForCall := fake.deleteDhcpOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteDhcpOptionsReturns(result1 *ec2.DeleteDhcpOptionsOutput, result2 error) {
	fake.deleteDhcpOptionsMutex.Lock()
	defer fake.deleteDhcpOptionsMutex.Unlock()
	fake.DeleteDhcpOptionsStub = nil
	fake.deleteDhcpOptionsReturns = struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteDhcpOptionsReturnsOnCall(i int, result1 *ec2.DeleteDhcpOptionsOutput, result2 error) {
	fake.deleteDhcpOptionsMutex.Lock()
	defer fake.deleteDhcpOptionsMutex.Unlock()
	fake.DeleteDhcpOptionsStub = nil
	if fake.deleteDhcpOptionsReturnsOnCall == nil {
		fake.deleteDhcpOptionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteDhcpOptionsOutput
			result2 error
		})
	}
	fake.deleteDhcpOptionsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteDhcpOptionsRequest(arg1 *ec2.DeleteDhcpOptionsInput) (*request.Request, *ec2.DeleteDhcpOptionsOutput) {
	fake.deleteDhcpOptionsRequestMutex.Lock()
	ret, specificReturn := fake.deleteDhcpOptionsRequestReturnsOnCall[len(fake.deleteDhcpOptionsRequestArgsForCall)]
	fake.deleteDhcpOptionsRequestArgsForCall = append(fake.deleteDhcpOptionsRequestArgsForCall, struct {
		arg1 *ec2.DeleteDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("DeleteDhcpOptionsRequest", []interface{}{arg1})
	fake.deleteDhcpOptionsRequestMutex.Unlock()
	if fake.DeleteDhcpOptionsRequestStub != nil {
		return fake.DeleteDhcpOptionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteDhcpOptionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteDhcpOptionsRequestCallCount() int {
	fake.deleteDhcpOptionsRequestMutex.RLock()
	defer fake.deleteDhcpOptionsRequestMutex.RUnlock()
	return len(fake.deleteDhcpOptionsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteDhcpOptionsRequestCalls(stub func(*ec2.DeleteDhcpOptionsInput) (*request.Request, *ec2.DeleteDhcpOptionsOutput)) {
	fake.deleteDhcpOptionsRequestMutex.Lock()
	defer fake.deleteDhcpOptionsRequestMutex.Unlock()
	fake.DeleteDhcpOptionsRequestStub = stub
}

func (fake *FakeEC2API) DeleteDhcpOptionsRequestArgsForCall(i int) *ec2.DeleteDhcpOptionsInput {
	fake.deleteDhcpOptionsRequestMutex.RLock()
	defer fake.deleteDhcpOptionsRequestMutex.RUnlock()
	argsForCall := fake.deleteDhcpOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteDhcpOptionsRequestReturns(result1 *request.Request, result2 *ec2.DeleteDhcpOptionsOutput) {
	fake.deleteDhcpOptionsRequestMutex.Lock()
	defer fake.deleteDhcpOptionsRequestMutex.Unlock()
	fake.DeleteDhcpOptionsRequestStub = nil
	fake.deleteDhcpOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteDhcpOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteDhcpOptionsOutput) {
	fake.deleteDhcpOptionsRequestMutex.Lock()
	defer fake.deleteDhcpOptionsRequestMutex.Unlock()
	fake.DeleteDhcpOptionsRequestStub = nil
	if fake.deleteDhcpOptionsRequestReturnsOnCall == nil {
		fake.deleteDhcpOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteDhcpOptionsOutput
		})
	}
	fake.deleteDhcpOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteDhcpOptionsWithContext(arg1 aws.Context, arg2 *ec2.DeleteDhcpOptionsInput, arg3 ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error) {
	fake.deleteDhcpOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDhcpOptionsWithContextReturnsOnCall[len(fake.deleteDhcpOptionsWithContextArgsForCall)]
	fake.deleteDhcpOptionsWithContextArgsForCall = append(fake.deleteDhcpOptionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteDhcpOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteDhcpOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDhcpOptionsWithContextMutex.Unlock()
	if fake.DeleteDhcpOptionsWithContextStub != nil {
		return fake.DeleteDhcpOptionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteDhcpOptionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteDhcpOptionsWithContextCallCount() int {
	fake.deleteDhcpOptionsWithContextMutex.RLock()
	defer fake.deleteDhcpOptionsWithContextMutex.RUnlock()
	return len(fake.deleteDhcpOptionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteDhcpOptionsWithContextCalls(stub func(aws.Context, *ec2.DeleteDhcpOptionsInput, ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error)) {
	fake.deleteDhcpOptionsWithContextMutex.Lock()
	defer fake.deleteDhcpOptionsWithContextMutex.Unlock()
	fake.DeleteDhcpOptionsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteDhcpOptionsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteDhcpOptionsInput, []request.Option) {
	fake.deleteDhcpOptionsWithContextMutex.RLock()
	defer fake.deleteDhcpOptionsWithContextMutex.RUnlock()
	argsForCall := fake.deleteDhcpOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteDhcpOptionsWithContextReturns(result1 *ec2.DeleteDhcpOptionsOutput, result2 error) {
	fake.deleteDhcpOptionsWithContextMutex.Lock()
	defer fake.deleteDhcpOptionsWithContextMutex.Unlock()
	fake.DeleteDhcpOptionsWithContextStub = nil
	fake.deleteDhcpOptionsWithContextReturns = struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteDhcpOptionsWithContextReturnsOnCall(i int, result1 *ec2.DeleteDhcpOptionsOutput, result2 error) {
	fake.deleteDhcpOptionsWithContextMutex.Lock()
	defer fake.deleteDhcpOptionsWithContextMutex.Unlock()
	fake.DeleteDhcpOptionsWithContextStub = nil
	if fake.deleteDhcpOptionsWithContextReturnsOnCall == nil {
		fake.deleteDhcpOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteDhcpOptionsOutput
			result2 error
		})
	}
	fake.deleteDhcpOptionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGateway(arg1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	fake.deleteEgressOnlyInternetGatewayMutex.Lock()
	ret, specificReturn := fake.deleteEgressOnlyInternetGatewayReturnsOnCall[len(fake.deleteEgressOnlyInternetGatewayArgsForCall)]
	fake.deleteEgressOnlyInternetGatewayArgsForCall = append(fake.deleteEgressOnlyInternetGatewayArgsForCall, struct {
		arg1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteEgressOnlyInternetGateway", []interface{}{arg1})
	fake.deleteEgressOnlyInternetGatewayMutex.Unlock()
	if fake.DeleteEgressOnlyInternetGatewayStub != nil {
		return fake.DeleteEgressOnlyInternetGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteEgressOnlyInternetGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayCallCount() int {
	fake.deleteEgressOnlyInternetGatewayMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayMutex.RUnlock()
	return len(fake.deleteEgressOnlyInternetGatewayArgsForCall)
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayCalls(stub func(*ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)) {
	fake.deleteEgressOnlyInternetGatewayMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayStub = stub
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayArgsForCall(i int) *ec2.DeleteEgressOnlyInternetGatewayInput {
	fake.deleteEgressOnlyInternetGatewayMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayMutex.RUnlock()
	argsForCall := fake.deleteEgressOnlyInternetGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayReturns(result1 *ec2.DeleteEgressOnlyInternetGatewayOutput, result2 error) {
	fake.deleteEgressOnlyInternetGatewayMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayStub = nil
	fake.deleteEgressOnlyInternetGatewayReturns = struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayReturnsOnCall(i int, result1 *ec2.DeleteEgressOnlyInternetGatewayOutput, result2 error) {
	fake.deleteEgressOnlyInternetGatewayMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayStub = nil
	if fake.deleteEgressOnlyInternetGatewayReturnsOnCall == nil {
		fake.deleteEgressOnlyInternetGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
			result2 error
		})
	}
	fake.deleteEgressOnlyInternetGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayRequest(arg1 *ec2.DeleteEgressOnlyInternetGatewayInput) (*request.Request, *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	fake.deleteEgressOnlyInternetGatewayRequestMutex.Lock()
	ret, specificReturn := fake.deleteEgressOnlyInternetGatewayRequestReturnsOnCall[len(fake.deleteEgressOnlyInternetGatewayRequestArgsForCall)]
	fake.deleteEgressOnlyInternetGatewayRequestArgsForCall = append(fake.deleteEgressOnlyInternetGatewayRequestArgsForCall, struct {
		arg1 *ec2.DeleteEgressOnlyInternetGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteEgressOnlyInternetGatewayRequest", []interface{}{arg1})
	fake.deleteEgressOnlyInternetGatewayRequestMutex.Unlock()
	if fake.DeleteEgressOnlyInternetGatewayRequestStub != nil {
		return fake.DeleteEgressOnlyInternetGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteEgressOnlyInternetGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayRequestCallCount() int {
	fake.deleteEgressOnlyInternetGatewayRequestMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayRequestMutex.RUnlock()
	return len(fake.deleteEgressOnlyInternetGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayRequestCalls(stub func(*ec2.DeleteEgressOnlyInternetGatewayInput) (*request.Request, *ec2.DeleteEgressOnlyInternetGatewayOutput)) {
	fake.deleteEgressOnlyInternetGatewayRequestMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayRequestMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayRequestStub = stub
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayRequestArgsForCall(i int) *ec2.DeleteEgressOnlyInternetGatewayInput {
	fake.deleteEgressOnlyInternetGatewayRequestMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayRequestMutex.RUnlock()
	argsForCall := fake.deleteEgressOnlyInternetGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayRequestReturns(result1 *request.Request, result2 *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	fake.deleteEgressOnlyInternetGatewayRequestMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayRequestMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayRequestStub = nil
	fake.deleteEgressOnlyInternetGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteEgressOnlyInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	fake.deleteEgressOnlyInternetGatewayRequestMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayRequestMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayRequestStub = nil
	if fake.deleteEgressOnlyInternetGatewayRequestReturnsOnCall == nil {
		fake.deleteEgressOnlyInternetGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteEgressOnlyInternetGatewayOutput
		})
	}
	fake.deleteEgressOnlyInternetGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteEgressOnlyInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayWithContext(arg1 aws.Context, arg2 *ec2.DeleteEgressOnlyInternetGatewayInput, arg3 ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.deleteEgressOnlyInternetGatewayWithContextReturnsOnCall[len(fake.deleteEgressOnlyInternetGatewayWithContextArgsForCall)]
	fake.deleteEgressOnlyInternetGatewayWithContextArgsForCall = append(fake.deleteEgressOnlyInternetGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteEgressOnlyInternetGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteEgressOnlyInternetGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.Unlock()
	if fake.DeleteEgressOnlyInternetGatewayWithContextStub != nil {
		return fake.DeleteEgressOnlyInternetGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteEgressOnlyInternetGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayWithContextCallCount() int {
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayWithContextMutex.RUnlock()
	return len(fake.deleteEgressOnlyInternetGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayWithContextCalls(stub func(aws.Context, *ec2.DeleteEgressOnlyInternetGatewayInput, ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)) {
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayWithContextMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteEgressOnlyInternetGatewayInput, []request.Option) {
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayWithContextMutex.RUnlock()
	argsForCall := fake.deleteEgressOnlyInternetGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayWithContextReturns(result1 *ec2.DeleteEgressOnlyInternetGatewayOutput, result2 error) {
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayWithContextMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayWithContextStub = nil
	fake.deleteEgressOnlyInternetGatewayWithContextReturns = struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteEgressOnlyInternetGatewayWithContextReturnsOnCall(i int, result1 *ec2.DeleteEgressOnlyInternetGatewayOutput, result2 error) {
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.Lock()
	defer fake.deleteEgressOnlyInternetGatewayWithContextMutex.Unlock()
	fake.DeleteEgressOnlyInternetGatewayWithContextStub = nil
	if fake.deleteEgressOnlyInternetGatewayWithContextReturnsOnCall == nil {
		fake.deleteEgressOnlyInternetGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
			result2 error
		})
	}
	fake.deleteEgressOnlyInternetGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteEgressOnlyInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFleets(arg1 *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error) {
	fake.deleteFleetsMutex.Lock()
	ret, specificReturn := fake.deleteFleetsReturnsOnCall[len(fake.deleteFleetsArgsForCall)]
	fake.deleteFleetsArgsForCall = append(fake.deleteFleetsArgsForCall, struct {
		arg1 *ec2.DeleteFleetsInput
	}{arg1})
	fake.recordInvocation("DeleteFleets", []interface{}{arg1})
	fake.deleteFleetsMutex.Unlock()
	if fake.DeleteFleetsStub != nil {
		return fake.DeleteFleetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFleetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFleetsCallCount() int {
	fake.deleteFleetsMutex.RLock()
	defer fake.deleteFleetsMutex.RUnlock()
	return len(fake.deleteFleetsArgsForCall)
}

func (fake *FakeEC2API) DeleteFleetsCalls(stub func(*ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error)) {
	fake.deleteFleetsMutex.Lock()
	defer fake.deleteFleetsMutex.Unlock()
	fake.DeleteFleetsStub = stub
}

func (fake *FakeEC2API) DeleteFleetsArgsForCall(i int) *ec2.DeleteFleetsInput {
	fake.deleteFleetsMutex.RLock()
	defer fake.deleteFleetsMutex.RUnlock()
	argsForCall := fake.deleteFleetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteFleetsReturns(result1 *ec2.DeleteFleetsOutput, result2 error) {
	fake.deleteFleetsMutex.Lock()
	defer fake.deleteFleetsMutex.Unlock()
	fake.DeleteFleetsStub = nil
	fake.deleteFleetsReturns = struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFleetsReturnsOnCall(i int, result1 *ec2.DeleteFleetsOutput, result2 error) {
	fake.deleteFleetsMutex.Lock()
	defer fake.deleteFleetsMutex.Unlock()
	fake.DeleteFleetsStub = nil
	if fake.deleteFleetsReturnsOnCall == nil {
		fake.deleteFleetsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteFleetsOutput
			result2 error
		})
	}
	fake.deleteFleetsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFleetsRequest(arg1 *ec2.DeleteFleetsInput) (*request.Request, *ec2.DeleteFleetsOutput) {
	fake.deleteFleetsRequestMutex.Lock()
	ret, specificReturn := fake.deleteFleetsRequestReturnsOnCall[len(fake.deleteFleetsRequestArgsForCall)]
	fake.deleteFleetsRequestArgsForCall = append(fake.deleteFleetsRequestArgsForCall, struct {
		arg1 *ec2.DeleteFleetsInput
	}{arg1})
	fake.recordInvocation("DeleteFleetsRequest", []interface{}{arg1})
	fake.deleteFleetsRequestMutex.Unlock()
	if fake.DeleteFleetsRequestStub != nil {
		return fake.DeleteFleetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFleetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFleetsRequestCallCount() int {
	fake.deleteFleetsRequestMutex.RLock()
	defer fake.deleteFleetsRequestMutex.RUnlock()
	return len(fake.deleteFleetsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteFleetsRequestCalls(stub func(*ec2.DeleteFleetsInput) (*request.Request, *ec2.DeleteFleetsOutput)) {
	fake.deleteFleetsRequestMutex.Lock()
	defer fake.deleteFleetsRequestMutex.Unlock()
	fake.DeleteFleetsRequestStub = stub
}

func (fake *FakeEC2API) DeleteFleetsRequestArgsForCall(i int) *ec2.DeleteFleetsInput {
	fake.deleteFleetsRequestMutex.RLock()
	defer fake.deleteFleetsRequestMutex.RUnlock()
	argsForCall := fake.deleteFleetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteFleetsRequestReturns(result1 *request.Request, result2 *ec2.DeleteFleetsOutput) {
	fake.deleteFleetsRequestMutex.Lock()
	defer fake.deleteFleetsRequestMutex.Unlock()
	fake.DeleteFleetsRequestStub = nil
	fake.deleteFleetsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteFleetsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFleetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteFleetsOutput) {
	fake.deleteFleetsRequestMutex.Lock()
	defer fake.deleteFleetsRequestMutex.Unlock()
	fake.DeleteFleetsRequestStub = nil
	if fake.deleteFleetsRequestReturnsOnCall == nil {
		fake.deleteFleetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteFleetsOutput
		})
	}
	fake.deleteFleetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteFleetsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFleetsWithContext(arg1 aws.Context, arg2 *ec2.DeleteFleetsInput, arg3 ...request.Option) (*ec2.DeleteFleetsOutput, error) {
	fake.deleteFleetsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteFleetsWithContextReturnsOnCall[len(fake.deleteFleetsWithContextArgsForCall)]
	fake.deleteFleetsWithContextArgsForCall = append(fake.deleteFleetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteFleetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteFleetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteFleetsWithContextMutex.Unlock()
	if fake.DeleteFleetsWithContextStub != nil {
		return fake.DeleteFleetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFleetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFleetsWithContextCallCount() int {
	fake.deleteFleetsWithContextMutex.RLock()
	defer fake.deleteFleetsWithContextMutex.RUnlock()
	return len(fake.deleteFleetsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteFleetsWithContextCalls(stub func(aws.Context, *ec2.DeleteFleetsInput, ...request.Option) (*ec2.DeleteFleetsOutput, error)) {
	fake.deleteFleetsWithContextMutex.Lock()
	defer fake.deleteFleetsWithContextMutex.Unlock()
	fake.DeleteFleetsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteFleetsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteFleetsInput, []request.Option) {
	fake.deleteFleetsWithContextMutex.RLock()
	defer fake.deleteFleetsWithContextMutex.RUnlock()
	argsForCall := fake.deleteFleetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteFleetsWithContextReturns(result1 *ec2.DeleteFleetsOutput, result2 error) {
	fake.deleteFleetsWithContextMutex.Lock()
	defer fake.deleteFleetsWithContextMutex.Unlock()
	fake.DeleteFleetsWithContextStub = nil
	fake.deleteFleetsWithContextReturns = struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFleetsWithContextReturnsOnCall(i int, result1 *ec2.DeleteFleetsOutput, result2 error) {
	fake.deleteFleetsWithContextMutex.Lock()
	defer fake.deleteFleetsWithContextMutex.Unlock()
	fake.DeleteFleetsWithContextStub = nil
	if fake.deleteFleetsWithContextReturnsOnCall == nil {
		fake.deleteFleetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteFleetsOutput
			result2 error
		})
	}
	fake.deleteFleetsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFlowLogs(arg1 *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	fake.deleteFlowLogsMutex.Lock()
	ret, specificReturn := fake.deleteFlowLogsReturnsOnCall[len(fake.deleteFlowLogsArgsForCall)]
	fake.deleteFlowLogsArgsForCall = append(fake.deleteFlowLogsArgsForCall, struct {
		arg1 *ec2.DeleteFlowLogsInput
	}{arg1})
	fake.recordInvocation("DeleteFlowLogs", []interface{}{arg1})
	fake.deleteFlowLogsMutex.Unlock()
	if fake.DeleteFlowLogsStub != nil {
		return fake.DeleteFlowLogsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFlowLogsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFlowLogsCallCount() int {
	fake.deleteFlowLogsMutex.RLock()
	defer fake.deleteFlowLogsMutex.RUnlock()
	return len(fake.deleteFlowLogsArgsForCall)
}

func (fake *FakeEC2API) DeleteFlowLogsCalls(stub func(*ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error)) {
	fake.deleteFlowLogsMutex.Lock()
	defer fake.deleteFlowLogsMutex.Unlock()
	fake.DeleteFlowLogsStub = stub
}

func (fake *FakeEC2API) DeleteFlowLogsArgsForCall(i int) *ec2.DeleteFlowLogsInput {
	fake.deleteFlowLogsMutex.RLock()
	defer fake.deleteFlowLogsMutex.RUnlock()
	argsForCall := fake.deleteFlowLogsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteFlowLogsReturns(result1 *ec2.DeleteFlowLogsOutput, result2 error) {
	fake.deleteFlowLogsMutex.Lock()
	defer fake.deleteFlowLogsMutex.Unlock()
	fake.DeleteFlowLogsStub = nil
	fake.deleteFlowLogsReturns = struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFlowLogsReturnsOnCall(i int, result1 *ec2.DeleteFlowLogsOutput, result2 error) {
	fake.deleteFlowLogsMutex.Lock()
	defer fake.deleteFlowLogsMutex.Unlock()
	fake.DeleteFlowLogsStub = nil
	if fake.deleteFlowLogsReturnsOnCall == nil {
		fake.deleteFlowLogsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteFlowLogsOutput
			result2 error
		})
	}
	fake.deleteFlowLogsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFlowLogsRequest(arg1 *ec2.DeleteFlowLogsInput) (*request.Request, *ec2.DeleteFlowLogsOutput) {
	fake.deleteFlowLogsRequestMutex.Lock()
	ret, specificReturn := fake.deleteFlowLogsRequestReturnsOnCall[len(fake.deleteFlowLogsRequestArgsForCall)]
	fake.deleteFlowLogsRequestArgsForCall = append(fake.deleteFlowLogsRequestArgsForCall, struct {
		arg1 *ec2.DeleteFlowLogsInput
	}{arg1})
	fake.recordInvocation("DeleteFlowLogsRequest", []interface{}{arg1})
	fake.deleteFlowLogsRequestMutex.Unlock()
	if fake.DeleteFlowLogsRequestStub != nil {
		return fake.DeleteFlowLogsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFlowLogsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFlowLogsRequestCallCount() int {
	fake.deleteFlowLogsRequestMutex.RLock()
	defer fake.deleteFlowLogsRequestMutex.RUnlock()
	return len(fake.deleteFlowLogsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteFlowLogsRequestCalls(stub func(*ec2.DeleteFlowLogsInput) (*request.Request, *ec2.DeleteFlowLogsOutput)) {
	fake.deleteFlowLogsRequestMutex.Lock()
	defer fake.deleteFlowLogsRequestMutex.Unlock()
	fake.DeleteFlowLogsRequestStub = stub
}

func (fake *FakeEC2API) DeleteFlowLogsRequestArgsForCall(i int) *ec2.DeleteFlowLogsInput {
	fake.deleteFlowLogsRequestMutex.RLock()
	defer fake.deleteFlowLogsRequestMutex.RUnlock()
	argsForCall := fake.deleteFlowLogsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteFlowLogsRequestReturns(result1 *request.Request, result2 *ec2.DeleteFlowLogsOutput) {
	fake.deleteFlowLogsRequestMutex.Lock()
	defer fake.deleteFlowLogsRequestMutex.Unlock()
	fake.DeleteFlowLogsRequestStub = nil
	fake.deleteFlowLogsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteFlowLogsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFlowLogsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteFlowLogsOutput) {
	fake.deleteFlowLogsRequestMutex.Lock()
	defer fake.deleteFlowLogsRequestMutex.Unlock()
	fake.DeleteFlowLogsRequestStub = nil
	if fake.deleteFlowLogsRequestReturnsOnCall == nil {
		fake.deleteFlowLogsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteFlowLogsOutput
		})
	}
	fake.deleteFlowLogsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteFlowLogsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFlowLogsWithContext(arg1 aws.Context, arg2 *ec2.DeleteFlowLogsInput, arg3 ...request.Option) (*ec2.DeleteFlowLogsOutput, error) {
	fake.deleteFlowLogsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteFlowLogsWithContextReturnsOnCall[len(fake.deleteFlowLogsWithContextArgsForCall)]
	fake.deleteFlowLogsWithContextArgsForCall = append(fake.deleteFlowLogsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteFlowLogsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteFlowLogsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteFlowLogsWithContextMutex.Unlock()
	if fake.DeleteFlowLogsWithContextStub != nil {
		return fake.DeleteFlowLogsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFlowLogsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFlowLogsWithContextCallCount() int {
	fake.deleteFlowLogsWithContextMutex.RLock()
	defer fake.deleteFlowLogsWithContextMutex.RUnlock()
	return len(fake.deleteFlowLogsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteFlowLogsWithContextCalls(stub func(aws.Context, *ec2.DeleteFlowLogsInput, ...request.Option) (*ec2.DeleteFlowLogsOutput, error)) {
	fake.deleteFlowLogsWithContextMutex.Lock()
	defer fake.deleteFlowLogsWithContextMutex.Unlock()
	fake.DeleteFlowLogsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteFlowLogsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteFlowLogsInput, []request.Option) {
	fake.deleteFlowLogsWithContextMutex.RLock()
	defer fake.deleteFlowLogsWithContextMutex.RUnlock()
	argsForCall := fake.deleteFlowLogsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteFlowLogsWithContextReturns(result1 *ec2.DeleteFlowLogsOutput, result2 error) {
	fake.deleteFlowLogsWithContextMutex.Lock()
	defer fake.deleteFlowLogsWithContextMutex.Unlock()
	fake.DeleteFlowLogsWithContextStub = nil
	fake.deleteFlowLogsWithContextReturns = struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFlowLogsWithContextReturnsOnCall(i int, result1 *ec2.DeleteFlowLogsOutput, result2 error) {
	fake.deleteFlowLogsWithContextMutex.Lock()
	defer fake.deleteFlowLogsWithContextMutex.Unlock()
	fake.DeleteFlowLogsWithContextStub = nil
	if fake.deleteFlowLogsWithContextReturnsOnCall == nil {
		fake.deleteFlowLogsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteFlowLogsOutput
			result2 error
		})
	}
	fake.deleteFlowLogsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFpgaImage(arg1 *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
	fake.deleteFpgaImageMutex.Lock()
	ret, specificReturn := fake.deleteFpgaImageReturnsOnCall[len(fake.deleteFpgaImageArgsForCall)]
	fake.deleteFpgaImageArgsForCall = append(fake.deleteFpgaImageArgsForCall, struct {
		arg1 *ec2.DeleteFpgaImageInput
	}{arg1})
	fake.recordInvocation("DeleteFpgaImage", []interface{}{arg1})
	fake.deleteFpgaImageMutex.Unlock()
	if fake.DeleteFpgaImageStub != nil {
		return fake.DeleteFpgaImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFpgaImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFpgaImageCallCount() int {
	fake.deleteFpgaImageMutex.RLock()
	defer fake.deleteFpgaImageMutex.RUnlock()
	return len(fake.deleteFpgaImageArgsForCall)
}

func (fake *FakeEC2API) DeleteFpgaImageCalls(stub func(*ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error)) {
	fake.deleteFpgaImageMutex.Lock()
	defer fake.deleteFpgaImageMutex.Unlock()
	fake.DeleteFpgaImageStub = stub
}

func (fake *FakeEC2API) DeleteFpgaImageArgsForCall(i int) *ec2.DeleteFpgaImageInput {
	fake.deleteFpgaImageMutex.RLock()
	defer fake.deleteFpgaImageMutex.RUnlock()
	argsForCall := fake.deleteFpgaImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteFpgaImageReturns(result1 *ec2.DeleteFpgaImageOutput, result2 error) {
	fake.deleteFpgaImageMutex.Lock()
	defer fake.deleteFpgaImageMutex.Unlock()
	fake.DeleteFpgaImageStub = nil
	fake.deleteFpgaImageReturns = struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFpgaImageReturnsOnCall(i int, result1 *ec2.DeleteFpgaImageOutput, result2 error) {
	fake.deleteFpgaImageMutex.Lock()
	defer fake.deleteFpgaImageMutex.Unlock()
	fake.DeleteFpgaImageStub = nil
	if fake.deleteFpgaImageReturnsOnCall == nil {
		fake.deleteFpgaImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteFpgaImageOutput
			result2 error
		})
	}
	fake.deleteFpgaImageReturnsOnCall[i] = struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFpgaImageRequest(arg1 *ec2.DeleteFpgaImageInput) (*request.Request, *ec2.DeleteFpgaImageOutput) {
	fake.deleteFpgaImageRequestMutex.Lock()
	ret, specificReturn := fake.deleteFpgaImageRequestReturnsOnCall[len(fake.deleteFpgaImageRequestArgsForCall)]
	fake.deleteFpgaImageRequestArgsForCall = append(fake.deleteFpgaImageRequestArgsForCall, struct {
		arg1 *ec2.DeleteFpgaImageInput
	}{arg1})
	fake.recordInvocation("DeleteFpgaImageRequest", []interface{}{arg1})
	fake.deleteFpgaImageRequestMutex.Unlock()
	if fake.DeleteFpgaImageRequestStub != nil {
		return fake.DeleteFpgaImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFpgaImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFpgaImageRequestCallCount() int {
	fake.deleteFpgaImageRequestMutex.RLock()
	defer fake.deleteFpgaImageRequestMutex.RUnlock()
	return len(fake.deleteFpgaImageRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteFpgaImageRequestCalls(stub func(*ec2.DeleteFpgaImageInput) (*request.Request, *ec2.DeleteFpgaImageOutput)) {
	fake.deleteFpgaImageRequestMutex.Lock()
	defer fake.deleteFpgaImageRequestMutex.Unlock()
	fake.DeleteFpgaImageRequestStub = stub
}

func (fake *FakeEC2API) DeleteFpgaImageRequestArgsForCall(i int) *ec2.DeleteFpgaImageInput {
	fake.deleteFpgaImageRequestMutex.RLock()
	defer fake.deleteFpgaImageRequestMutex.RUnlock()
	argsForCall := fake.deleteFpgaImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteFpgaImageRequestReturns(result1 *request.Request, result2 *ec2.DeleteFpgaImageOutput) {
	fake.deleteFpgaImageRequestMutex.Lock()
	defer fake.deleteFpgaImageRequestMutex.Unlock()
	fake.DeleteFpgaImageRequestStub = nil
	fake.deleteFpgaImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteFpgaImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFpgaImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteFpgaImageOutput) {
	fake.deleteFpgaImageRequestMutex.Lock()
	defer fake.deleteFpgaImageRequestMutex.Unlock()
	fake.DeleteFpgaImageRequestStub = nil
	if fake.deleteFpgaImageRequestReturnsOnCall == nil {
		fake.deleteFpgaImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteFpgaImageOutput
		})
	}
	fake.deleteFpgaImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteFpgaImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFpgaImageWithContext(arg1 aws.Context, arg2 *ec2.DeleteFpgaImageInput, arg3 ...request.Option) (*ec2.DeleteFpgaImageOutput, error) {
	fake.deleteFpgaImageWithContextMutex.Lock()
	ret, specificReturn := fake.deleteFpgaImageWithContextReturnsOnCall[len(fake.deleteFpgaImageWithContextArgsForCall)]
	fake.deleteFpgaImageWithContextArgsForCall = append(fake.deleteFpgaImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteFpgaImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteFpgaImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteFpgaImageWithContextMutex.Unlock()
	if fake.DeleteFpgaImageWithContextStub != nil {
		return fake.DeleteFpgaImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteFpgaImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteFpgaImageWithContextCallCount() int {
	fake.deleteFpgaImageWithContextMutex.RLock()
	defer fake.deleteFpgaImageWithContextMutex.RUnlock()
	return len(fake.deleteFpgaImageWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteFpgaImageWithContextCalls(stub func(aws.Context, *ec2.DeleteFpgaImageInput, ...request.Option) (*ec2.DeleteFpgaImageOutput, error)) {
	fake.deleteFpgaImageWithContextMutex.Lock()
	defer fake.deleteFpgaImageWithContextMutex.Unlock()
	fake.DeleteFpgaImageWithContextStub = stub
}

func (fake *FakeEC2API) DeleteFpgaImageWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteFpgaImageInput, []request.Option) {
	fake.deleteFpgaImageWithContextMutex.RLock()
	defer fake.deleteFpgaImageWithContextMutex.RUnlock()
	argsForCall := fake.deleteFpgaImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteFpgaImageWithContextReturns(result1 *ec2.DeleteFpgaImageOutput, result2 error) {
	fake.deleteFpgaImageWithContextMutex.Lock()
	defer fake.deleteFpgaImageWithContextMutex.Unlock()
	fake.DeleteFpgaImageWithContextStub = nil
	fake.deleteFpgaImageWithContextReturns = struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteFpgaImageWithContextReturnsOnCall(i int, result1 *ec2.DeleteFpgaImageOutput, result2 error) {
	fake.deleteFpgaImageWithContextMutex.Lock()
	defer fake.deleteFpgaImageWithContextMutex.Unlock()
	fake.DeleteFpgaImageWithContextStub = nil
	if fake.deleteFpgaImageWithContextReturnsOnCall == nil {
		fake.deleteFpgaImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteFpgaImageOutput
			result2 error
		})
	}
	fake.deleteFpgaImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteFpgaImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteInternetGateway(arg1 *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	fake.deleteInternetGatewayMutex.Lock()
	ret, specificReturn := fake.deleteInternetGatewayReturnsOnCall[len(fake.deleteInternetGatewayArgsForCall)]
	fake.deleteInternetGatewayArgsForCall = append(fake.deleteInternetGatewayArgsForCall, struct {
		arg1 *ec2.DeleteInternetGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteInternetGateway", []interface{}{arg1})
	fake.deleteInternetGatewayMutex.Unlock()
	if fake.DeleteInternetGatewayStub != nil {
		return fake.DeleteInternetGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteInternetGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteInternetGatewayCallCount() int {
	fake.deleteInternetGatewayMutex.RLock()
	defer fake.deleteInternetGatewayMutex.RUnlock()
	return len(fake.deleteInternetGatewayArgsForCall)
}

func (fake *FakeEC2API) DeleteInternetGatewayCalls(stub func(*ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error)) {
	fake.deleteInternetGatewayMutex.Lock()
	defer fake.deleteInternetGatewayMutex.Unlock()
	fake.DeleteInternetGatewayStub = stub
}

func (fake *FakeEC2API) DeleteInternetGatewayArgsForCall(i int) *ec2.DeleteInternetGatewayInput {
	fake.deleteInternetGatewayMutex.RLock()
	defer fake.deleteInternetGatewayMutex.RUnlock()
	argsForCall := fake.deleteInternetGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteInternetGatewayReturns(result1 *ec2.DeleteInternetGatewayOutput, result2 error) {
	fake.deleteInternetGatewayMutex.Lock()
	defer fake.deleteInternetGatewayMutex.Unlock()
	fake.DeleteInternetGatewayStub = nil
	fake.deleteInternetGatewayReturns = struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteInternetGatewayReturnsOnCall(i int, result1 *ec2.DeleteInternetGatewayOutput, result2 error) {
	fake.deleteInternetGatewayMutex.Lock()
	defer fake.deleteInternetGatewayMutex.Unlock()
	fake.DeleteInternetGatewayStub = nil
	if fake.deleteInternetGatewayReturnsOnCall == nil {
		fake.deleteInternetGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteInternetGatewayOutput
			result2 error
		})
	}
	fake.deleteInternetGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteInternetGatewayRequest(arg1 *ec2.DeleteInternetGatewayInput) (*request.Request, *ec2.DeleteInternetGatewayOutput) {
	fake.deleteInternetGatewayRequestMutex.Lock()
	ret, specificReturn := fake.deleteInternetGatewayRequestReturnsOnCall[len(fake.deleteInternetGatewayRequestArgsForCall)]
	fake.deleteInternetGatewayRequestArgsForCall = append(fake.deleteInternetGatewayRequestArgsForCall, struct {
		arg1 *ec2.DeleteInternetGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteInternetGatewayRequest", []interface{}{arg1})
	fake.deleteInternetGatewayRequestMutex.Unlock()
	if fake.DeleteInternetGatewayRequestStub != nil {
		return fake.DeleteInternetGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteInternetGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteInternetGatewayRequestCallCount() int {
	fake.deleteInternetGatewayRequestMutex.RLock()
	defer fake.deleteInternetGatewayRequestMutex.RUnlock()
	return len(fake.deleteInternetGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteInternetGatewayRequestCalls(stub func(*ec2.DeleteInternetGatewayInput) (*request.Request, *ec2.DeleteInternetGatewayOutput)) {
	fake.deleteInternetGatewayRequestMutex.Lock()
	defer fake.deleteInternetGatewayRequestMutex.Unlock()
	fake.DeleteInternetGatewayRequestStub = stub
}

func (fake *FakeEC2API) DeleteInternetGatewayRequestArgsForCall(i int) *ec2.DeleteInternetGatewayInput {
	fake.deleteInternetGatewayRequestMutex.RLock()
	defer fake.deleteInternetGatewayRequestMutex.RUnlock()
	argsForCall := fake.deleteInternetGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteInternetGatewayRequestReturns(result1 *request.Request, result2 *ec2.DeleteInternetGatewayOutput) {
	fake.deleteInternetGatewayRequestMutex.Lock()
	defer fake.deleteInternetGatewayRequestMutex.Unlock()
	fake.DeleteInternetGatewayRequestStub = nil
	fake.deleteInternetGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteInternetGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteInternetGatewayOutput) {
	fake.deleteInternetGatewayRequestMutex.Lock()
	defer fake.deleteInternetGatewayRequestMutex.Unlock()
	fake.DeleteInternetGatewayRequestStub = nil
	if fake.deleteInternetGatewayRequestReturnsOnCall == nil {
		fake.deleteInternetGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteInternetGatewayOutput
		})
	}
	fake.deleteInternetGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteInternetGatewayWithContext(arg1 aws.Context, arg2 *ec2.DeleteInternetGatewayInput, arg3 ...request.Option) (*ec2.DeleteInternetGatewayOutput, error) {
	fake.deleteInternetGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.deleteInternetGatewayWithContextReturnsOnCall[len(fake.deleteInternetGatewayWithContextArgsForCall)]
	fake.deleteInternetGatewayWithContextArgsForCall = append(fake.deleteInternetGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteInternetGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteInternetGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteInternetGatewayWithContextMutex.Unlock()
	if fake.DeleteInternetGatewayWithContextStub != nil {
		return fake.DeleteInternetGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteInternetGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteInternetGatewayWithContextCallCount() int {
	fake.deleteInternetGatewayWithContextMutex.RLock()
	defer fake.deleteInternetGatewayWithContextMutex.RUnlock()
	return len(fake.deleteInternetGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteInternetGatewayWithContextCalls(stub func(aws.Context, *ec2.DeleteInternetGatewayInput, ...request.Option) (*ec2.DeleteInternetGatewayOutput, error)) {
	fake.deleteInternetGatewayWithContextMutex.Lock()
	defer fake.deleteInternetGatewayWithContextMutex.Unlock()
	fake.DeleteInternetGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DeleteInternetGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteInternetGatewayInput, []request.Option) {
	fake.deleteInternetGatewayWithContextMutex.RLock()
	defer fake.deleteInternetGatewayWithContextMutex.RUnlock()
	argsForCall := fake.deleteInternetGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteInternetGatewayWithContextReturns(result1 *ec2.DeleteInternetGatewayOutput, result2 error) {
	fake.deleteInternetGatewayWithContextMutex.Lock()
	defer fake.deleteInternetGatewayWithContextMutex.Unlock()
	fake.DeleteInternetGatewayWithContextStub = nil
	fake.deleteInternetGatewayWithContextReturns = struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteInternetGatewayWithContextReturnsOnCall(i int, result1 *ec2.DeleteInternetGatewayOutput, result2 error) {
	fake.deleteInternetGatewayWithContextMutex.Lock()
	defer fake.deleteInternetGatewayWithContextMutex.Unlock()
	fake.DeleteInternetGatewayWithContextStub = nil
	if fake.deleteInternetGatewayWithContextReturnsOnCall == nil {
		fake.deleteInternetGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteInternetGatewayOutput
			result2 error
		})
	}
	fake.deleteInternetGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteKeyPair(arg1 *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	fake.deleteKeyPairMutex.Lock()
	ret, specificReturn := fake.deleteKeyPairReturnsOnCall[len(fake.deleteKeyPairArgsForCall)]
	fake.deleteKeyPairArgsForCall = append(fake.deleteKeyPairArgsForCall, struct {
		arg1 *ec2.DeleteKeyPairInput
	}{arg1})
	fake.recordInvocation("DeleteKeyPair", []interface{}{arg1})
	fake.deleteKeyPairMutex.Unlock()
	if fake.DeleteKeyPairStub != nil {
		return fake.DeleteKeyPairStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteKeyPairReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteKeyPairCallCount() int {
	fake.deleteKeyPairMutex.RLock()
	defer fake.deleteKeyPairMutex.RUnlock()
	return len(fake.deleteKeyPairArgsForCall)
}

func (fake *FakeEC2API) DeleteKeyPairCalls(stub func(*ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error)) {
	fake.deleteKeyPairMutex.Lock()
	defer fake.deleteKeyPairMutex.Unlock()
	fake.DeleteKeyPairStub = stub
}

func (fake *FakeEC2API) DeleteKeyPairArgsForCall(i int) *ec2.DeleteKeyPairInput {
	fake.deleteKeyPairMutex.RLock()
	defer fake.deleteKeyPairMutex.RUnlock()
	argsForCall := fake.deleteKeyPairArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteKeyPairReturns(result1 *ec2.DeleteKeyPairOutput, result2 error) {
	fake.deleteKeyPairMutex.Lock()
	defer fake.deleteKeyPairMutex.Unlock()
	fake.DeleteKeyPairStub = nil
	fake.deleteKeyPairReturns = struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteKeyPairReturnsOnCall(i int, result1 *ec2.DeleteKeyPairOutput, result2 error) {
	fake.deleteKeyPairMutex.Lock()
	defer fake.deleteKeyPairMutex.Unlock()
	fake.DeleteKeyPairStub = nil
	if fake.deleteKeyPairReturnsOnCall == nil {
		fake.deleteKeyPairReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteKeyPairOutput
			result2 error
		})
	}
	fake.deleteKeyPairReturnsOnCall[i] = struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteKeyPairRequest(arg1 *ec2.DeleteKeyPairInput) (*request.Request, *ec2.DeleteKeyPairOutput) {
	fake.deleteKeyPairRequestMutex.Lock()
	ret, specificReturn := fake.deleteKeyPairRequestReturnsOnCall[len(fake.deleteKeyPairRequestArgsForCall)]
	fake.deleteKeyPairRequestArgsForCall = append(fake.deleteKeyPairRequestArgsForCall, struct {
		arg1 *ec2.DeleteKeyPairInput
	}{arg1})
	fake.recordInvocation("DeleteKeyPairRequest", []interface{}{arg1})
	fake.deleteKeyPairRequestMutex.Unlock()
	if fake.DeleteKeyPairRequestStub != nil {
		return fake.DeleteKeyPairRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteKeyPairRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteKeyPairRequestCallCount() int {
	fake.deleteKeyPairRequestMutex.RLock()
	defer fake.deleteKeyPairRequestMutex.RUnlock()
	return len(fake.deleteKeyPairRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteKeyPairRequestCalls(stub func(*ec2.DeleteKeyPairInput) (*request.Request, *ec2.DeleteKeyPairOutput)) {
	fake.deleteKeyPairRequestMutex.Lock()
	defer fake.deleteKeyPairRequestMutex.Unlock()
	fake.DeleteKeyPairRequestStub = stub
}

func (fake *FakeEC2API) DeleteKeyPairRequestArgsForCall(i int) *ec2.DeleteKeyPairInput {
	fake.deleteKeyPairRequestMutex.RLock()
	defer fake.deleteKeyPairRequestMutex.RUnlock()
	argsForCall := fake.deleteKeyPairRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteKeyPairRequestReturns(result1 *request.Request, result2 *ec2.DeleteKeyPairOutput) {
	fake.deleteKeyPairRequestMutex.Lock()
	defer fake.deleteKeyPairRequestMutex.Unlock()
	fake.DeleteKeyPairRequestStub = nil
	fake.deleteKeyPairRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteKeyPairOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteKeyPairRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteKeyPairOutput) {
	fake.deleteKeyPairRequestMutex.Lock()
	defer fake.deleteKeyPairRequestMutex.Unlock()
	fake.DeleteKeyPairRequestStub = nil
	if fake.deleteKeyPairRequestReturnsOnCall == nil {
		fake.deleteKeyPairRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteKeyPairOutput
		})
	}
	fake.deleteKeyPairRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteKeyPairOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteKeyPairWithContext(arg1 aws.Context, arg2 *ec2.DeleteKeyPairInput, arg3 ...request.Option) (*ec2.DeleteKeyPairOutput, error) {
	fake.deleteKeyPairWithContextMutex.Lock()
	ret, specificReturn := fake.deleteKeyPairWithContextReturnsOnCall[len(fake.deleteKeyPairWithContextArgsForCall)]
	fake.deleteKeyPairWithContextArgsForCall = append(fake.deleteKeyPairWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteKeyPairInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteKeyPairWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteKeyPairWithContextMutex.Unlock()
	if fake.DeleteKeyPairWithContextStub != nil {
		return fake.DeleteKeyPairWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteKeyPairWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteKeyPairWithContextCallCount() int {
	fake.deleteKeyPairWithContextMutex.RLock()
	defer fake.deleteKeyPairWithContextMutex.RUnlock()
	return len(fake.deleteKeyPairWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteKeyPairWithContextCalls(stub func(aws.Context, *ec2.DeleteKeyPairInput, ...request.Option) (*ec2.DeleteKeyPairOutput, error)) {
	fake.deleteKeyPairWithContextMutex.Lock()
	defer fake.deleteKeyPairWithContextMutex.Unlock()
	fake.DeleteKeyPairWithContextStub = stub
}

func (fake *FakeEC2API) DeleteKeyPairWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteKeyPairInput, []request.Option) {
	fake.deleteKeyPairWithContextMutex.RLock()
	defer fake.deleteKeyPairWithContextMutex.RUnlock()
	argsForCall := fake.deleteKeyPairWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteKeyPairWithContextReturns(result1 *ec2.DeleteKeyPairOutput, result2 error) {
	fake.deleteKeyPairWithContextMutex.Lock()
	defer fake.deleteKeyPairWithContextMutex.Unlock()
	fake.DeleteKeyPairWithContextStub = nil
	fake.deleteKeyPairWithContextReturns = struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteKeyPairWithContextReturnsOnCall(i int, result1 *ec2.DeleteKeyPairOutput, result2 error) {
	fake.deleteKeyPairWithContextMutex.Lock()
	defer fake.deleteKeyPairWithContextMutex.Unlock()
	fake.DeleteKeyPairWithContextStub = nil
	if fake.deleteKeyPairWithContextReturnsOnCall == nil {
		fake.deleteKeyPairWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteKeyPairOutput
			result2 error
		})
	}
	fake.deleteKeyPairWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplate(arg1 *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error) {
	fake.deleteLaunchTemplateMutex.Lock()
	ret, specificReturn := fake.deleteLaunchTemplateReturnsOnCall[len(fake.deleteLaunchTemplateArgsForCall)]
	fake.deleteLaunchTemplateArgsForCall = append(fake.deleteLaunchTemplateArgsForCall, struct {
		arg1 *ec2.DeleteLaunchTemplateInput
	}{arg1})
	fake.recordInvocation("DeleteLaunchTemplate", []interface{}{arg1})
	fake.deleteLaunchTemplateMutex.Unlock()
	if fake.DeleteLaunchTemplateStub != nil {
		return fake.DeleteLaunchTemplateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLaunchTemplateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteLaunchTemplateCallCount() int {
	fake.deleteLaunchTemplateMutex.RLock()
	defer fake.deleteLaunchTemplateMutex.RUnlock()
	return len(fake.deleteLaunchTemplateArgsForCall)
}

func (fake *FakeEC2API) DeleteLaunchTemplateCalls(stub func(*ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error)) {
	fake.deleteLaunchTemplateMutex.Lock()
	defer fake.deleteLaunchTemplateMutex.Unlock()
	fake.DeleteLaunchTemplateStub = stub
}

func (fake *FakeEC2API) DeleteLaunchTemplateArgsForCall(i int) *ec2.DeleteLaunchTemplateInput {
	fake.deleteLaunchTemplateMutex.RLock()
	defer fake.deleteLaunchTemplateMutex.RUnlock()
	argsForCall := fake.deleteLaunchTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteLaunchTemplateReturns(result1 *ec2.DeleteLaunchTemplateOutput, result2 error) {
	fake.deleteLaunchTemplateMutex.Lock()
	defer fake.deleteLaunchTemplateMutex.Unlock()
	fake.DeleteLaunchTemplateStub = nil
	fake.deleteLaunchTemplateReturns = struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateReturnsOnCall(i int, result1 *ec2.DeleteLaunchTemplateOutput, result2 error) {
	fake.deleteLaunchTemplateMutex.Lock()
	defer fake.deleteLaunchTemplateMutex.Unlock()
	fake.DeleteLaunchTemplateStub = nil
	if fake.deleteLaunchTemplateReturnsOnCall == nil {
		fake.deleteLaunchTemplateReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteLaunchTemplateOutput
			result2 error
		})
	}
	fake.deleteLaunchTemplateReturnsOnCall[i] = struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateRequest(arg1 *ec2.DeleteLaunchTemplateInput) (*request.Request, *ec2.DeleteLaunchTemplateOutput) {
	fake.deleteLaunchTemplateRequestMutex.Lock()
	ret, specificReturn := fake.deleteLaunchTemplateRequestReturnsOnCall[len(fake.deleteLaunchTemplateRequestArgsForCall)]
	fake.deleteLaunchTemplateRequestArgsForCall = append(fake.deleteLaunchTemplateRequestArgsForCall, struct {
		arg1 *ec2.DeleteLaunchTemplateInput
	}{arg1})
	fake.recordInvocation("DeleteLaunchTemplateRequest", []interface{}{arg1})
	fake.deleteLaunchTemplateRequestMutex.Unlock()
	if fake.DeleteLaunchTemplateRequestStub != nil {
		return fake.DeleteLaunchTemplateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLaunchTemplateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteLaunchTemplateRequestCallCount() int {
	fake.deleteLaunchTemplateRequestMutex.RLock()
	defer fake.deleteLaunchTemplateRequestMutex.RUnlock()
	return len(fake.deleteLaunchTemplateRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteLaunchTemplateRequestCalls(stub func(*ec2.DeleteLaunchTemplateInput) (*request.Request, *ec2.DeleteLaunchTemplateOutput)) {
	fake.deleteLaunchTemplateRequestMutex.Lock()
	defer fake.deleteLaunchTemplateRequestMutex.Unlock()
	fake.DeleteLaunchTemplateRequestStub = stub
}

func (fake *FakeEC2API) DeleteLaunchTemplateRequestArgsForCall(i int) *ec2.DeleteLaunchTemplateInput {
	fake.deleteLaunchTemplateRequestMutex.RLock()
	defer fake.deleteLaunchTemplateRequestMutex.RUnlock()
	argsForCall := fake.deleteLaunchTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteLaunchTemplateRequestReturns(result1 *request.Request, result2 *ec2.DeleteLaunchTemplateOutput) {
	fake.deleteLaunchTemplateRequestMutex.Lock()
	defer fake.deleteLaunchTemplateRequestMutex.Unlock()
	fake.DeleteLaunchTemplateRequestStub = nil
	fake.deleteLaunchTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteLaunchTemplateOutput) {
	fake.deleteLaunchTemplateRequestMutex.Lock()
	defer fake.deleteLaunchTemplateRequestMutex.Unlock()
	fake.DeleteLaunchTemplateRequestStub = nil
	if fake.deleteLaunchTemplateRequestReturnsOnCall == nil {
		fake.deleteLaunchTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteLaunchTemplateOutput
		})
	}
	fake.deleteLaunchTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersions(arg1 *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	fake.deleteLaunchTemplateVersionsMutex.Lock()
	ret, specificReturn := fake.deleteLaunchTemplateVersionsReturnsOnCall[len(fake.deleteLaunchTemplateVersionsArgsForCall)]
	fake.deleteLaunchTemplateVersionsArgsForCall = append(fake.deleteLaunchTemplateVersionsArgsForCall, struct {
		arg1 *ec2.DeleteLaunchTemplateVersionsInput
	}{arg1})
	fake.recordInvocation("DeleteLaunchTemplateVersions", []interface{}{arg1})
	fake.deleteLaunchTemplateVersionsMutex.Unlock()
	if fake.DeleteLaunchTemplateVersionsStub != nil {
		return fake.DeleteLaunchTemplateVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLaunchTemplateVersionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsCallCount() int {
	fake.deleteLaunchTemplateVersionsMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsMutex.RUnlock()
	return len(fake.deleteLaunchTemplateVersionsArgsForCall)
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsCalls(stub func(*ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error)) {
	fake.deleteLaunchTemplateVersionsMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsStub = stub
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsArgsForCall(i int) *ec2.DeleteLaunchTemplateVersionsInput {
	fake.deleteLaunchTemplateVersionsMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsMutex.RUnlock()
	argsForCall := fake.deleteLaunchTemplateVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsReturns(result1 *ec2.DeleteLaunchTemplateVersionsOutput, result2 error) {
	fake.deleteLaunchTemplateVersionsMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsStub = nil
	fake.deleteLaunchTemplateVersionsReturns = struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsReturnsOnCall(i int, result1 *ec2.DeleteLaunchTemplateVersionsOutput, result2 error) {
	fake.deleteLaunchTemplateVersionsMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsStub = nil
	if fake.deleteLaunchTemplateVersionsReturnsOnCall == nil {
		fake.deleteLaunchTemplateVersionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteLaunchTemplateVersionsOutput
			result2 error
		})
	}
	fake.deleteLaunchTemplateVersionsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsRequest(arg1 *ec2.DeleteLaunchTemplateVersionsInput) (*request.Request, *ec2.DeleteLaunchTemplateVersionsOutput) {
	fake.deleteLaunchTemplateVersionsRequestMutex.Lock()
	ret, specificReturn := fake.deleteLaunchTemplateVersionsRequestReturnsOnCall[len(fake.deleteLaunchTemplateVersionsRequestArgsForCall)]
	fake.deleteLaunchTemplateVersionsRequestArgsForCall = append(fake.deleteLaunchTemplateVersionsRequestArgsForCall, struct {
		arg1 *ec2.DeleteLaunchTemplateVersionsInput
	}{arg1})
	fake.recordInvocation("DeleteLaunchTemplateVersionsRequest", []interface{}{arg1})
	fake.deleteLaunchTemplateVersionsRequestMutex.Unlock()
	if fake.DeleteLaunchTemplateVersionsRequestStub != nil {
		return fake.DeleteLaunchTemplateVersionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLaunchTemplateVersionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsRequestCallCount() int {
	fake.deleteLaunchTemplateVersionsRequestMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsRequestMutex.RUnlock()
	return len(fake.deleteLaunchTemplateVersionsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsRequestCalls(stub func(*ec2.DeleteLaunchTemplateVersionsInput) (*request.Request, *ec2.DeleteLaunchTemplateVersionsOutput)) {
	fake.deleteLaunchTemplateVersionsRequestMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsRequestMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsRequestStub = stub
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsRequestArgsForCall(i int) *ec2.DeleteLaunchTemplateVersionsInput {
	fake.deleteLaunchTemplateVersionsRequestMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsRequestMutex.RUnlock()
	argsForCall := fake.deleteLaunchTemplateVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsRequestReturns(result1 *request.Request, result2 *ec2.DeleteLaunchTemplateVersionsOutput) {
	fake.deleteLaunchTemplateVersionsRequestMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsRequestMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsRequestStub = nil
	fake.deleteLaunchTemplateVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateVersionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteLaunchTemplateVersionsOutput) {
	fake.deleteLaunchTemplateVersionsRequestMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsRequestMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsRequestStub = nil
	if fake.deleteLaunchTemplateVersionsRequestReturnsOnCall == nil {
		fake.deleteLaunchTemplateVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteLaunchTemplateVersionsOutput
		})
	}
	fake.deleteLaunchTemplateVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteLaunchTemplateVersionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsWithContext(arg1 aws.Context, arg2 *ec2.DeleteLaunchTemplateVersionsInput, arg3 ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	fake.deleteLaunchTemplateVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteLaunchTemplateVersionsWithContextReturnsOnCall[len(fake.deleteLaunchTemplateVersionsWithContextArgsForCall)]
	fake.deleteLaunchTemplateVersionsWithContextArgsForCall = append(fake.deleteLaunchTemplateVersionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteLaunchTemplateVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteLaunchTemplateVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteLaunchTemplateVersionsWithContextMutex.Unlock()
	if fake.DeleteLaunchTemplateVersionsWithContextStub != nil {
		return fake.DeleteLaunchTemplateVersionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLaunchTemplateVersionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsWithContextCallCount() int {
	fake.deleteLaunchTemplateVersionsWithContextMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsWithContextMutex.RUnlock()
	return len(fake.deleteLaunchTemplateVersionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsWithContextCalls(stub func(aws.Context, *ec2.DeleteLaunchTemplateVersionsInput, ...request.Option) (*ec2.DeleteLaunchTemplateVersionsOutput, error)) {
	fake.deleteLaunchTemplateVersionsWithContextMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsWithContextMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteLaunchTemplateVersionsInput, []request.Option) {
	fake.deleteLaunchTemplateVersionsWithContextMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsWithContextMutex.RUnlock()
	argsForCall := fake.deleteLaunchTemplateVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsWithContextReturns(result1 *ec2.DeleteLaunchTemplateVersionsOutput, result2 error) {
	fake.deleteLaunchTemplateVersionsWithContextMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsWithContextMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsWithContextStub = nil
	fake.deleteLaunchTemplateVersionsWithContextReturns = struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateVersionsWithContextReturnsOnCall(i int, result1 *ec2.DeleteLaunchTemplateVersionsOutput, result2 error) {
	fake.deleteLaunchTemplateVersionsWithContextMutex.Lock()
	defer fake.deleteLaunchTemplateVersionsWithContextMutex.Unlock()
	fake.DeleteLaunchTemplateVersionsWithContextStub = nil
	if fake.deleteLaunchTemplateVersionsWithContextReturnsOnCall == nil {
		fake.deleteLaunchTemplateVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteLaunchTemplateVersionsOutput
			result2 error
		})
	}
	fake.deleteLaunchTemplateVersionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateWithContext(arg1 aws.Context, arg2 *ec2.DeleteLaunchTemplateInput, arg3 ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error) {
	fake.deleteLaunchTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.deleteLaunchTemplateWithContextReturnsOnCall[len(fake.deleteLaunchTemplateWithContextArgsForCall)]
	fake.deleteLaunchTemplateWithContextArgsForCall = append(fake.deleteLaunchTemplateWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteLaunchTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteLaunchTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteLaunchTemplateWithContextMutex.Unlock()
	if fake.DeleteLaunchTemplateWithContextStub != nil {
		return fake.DeleteLaunchTemplateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteLaunchTemplateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteLaunchTemplateWithContextCallCount() int {
	fake.deleteLaunchTemplateWithContextMutex.RLock()
	defer fake.deleteLaunchTemplateWithContextMutex.RUnlock()
	return len(fake.deleteLaunchTemplateWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteLaunchTemplateWithContextCalls(stub func(aws.Context, *ec2.DeleteLaunchTemplateInput, ...request.Option) (*ec2.DeleteLaunchTemplateOutput, error)) {
	fake.deleteLaunchTemplateWithContextMutex.Lock()
	defer fake.deleteLaunchTemplateWithContextMutex.Unlock()
	fake.DeleteLaunchTemplateWithContextStub = stub
}

func (fake *FakeEC2API) DeleteLaunchTemplateWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteLaunchTemplateInput, []request.Option) {
	fake.deleteLaunchTemplateWithContextMutex.RLock()
	defer fake.deleteLaunchTemplateWithContextMutex.RUnlock()
	argsForCall := fake.deleteLaunchTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteLaunchTemplateWithContextReturns(result1 *ec2.DeleteLaunchTemplateOutput, result2 error) {
	fake.deleteLaunchTemplateWithContextMutex.Lock()
	defer fake.deleteLaunchTemplateWithContextMutex.Unlock()
	fake.DeleteLaunchTemplateWithContextStub = nil
	fake.deleteLaunchTemplateWithContextReturns = struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteLaunchTemplateWithContextReturnsOnCall(i int, result1 *ec2.DeleteLaunchTemplateOutput, result2 error) {
	fake.deleteLaunchTemplateWithContextMutex.Lock()
	defer fake.deleteLaunchTemplateWithContextMutex.Unlock()
	fake.DeleteLaunchTemplateWithContextStub = nil
	if fake.deleteLaunchTemplateWithContextReturnsOnCall == nil {
		fake.deleteLaunchTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteLaunchTemplateOutput
			result2 error
		})
	}
	fake.deleteLaunchTemplateWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNatGateway(arg1 *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
	fake.deleteNatGatewayMutex.Lock()
	ret, specificReturn := fake.deleteNatGatewayReturnsOnCall[len(fake.deleteNatGatewayArgsForCall)]
	fake.deleteNatGatewayArgsForCall = append(fake.deleteNatGatewayArgsForCall, struct {
		arg1 *ec2.DeleteNatGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteNatGateway", []interface{}{arg1})
	fake.deleteNatGatewayMutex.Unlock()
	if fake.DeleteNatGatewayStub != nil {
		return fake.DeleteNatGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNatGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNatGatewayCallCount() int {
	fake.deleteNatGatewayMutex.RLock()
	defer fake.deleteNatGatewayMutex.RUnlock()
	return len(fake.deleteNatGatewayArgsForCall)
}

func (fake *FakeEC2API) DeleteNatGatewayCalls(stub func(*ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error)) {
	fake.deleteNatGatewayMutex.Lock()
	defer fake.deleteNatGatewayMutex.Unlock()
	fake.DeleteNatGatewayStub = stub
}

func (fake *FakeEC2API) DeleteNatGatewayArgsForCall(i int) *ec2.DeleteNatGatewayInput {
	fake.deleteNatGatewayMutex.RLock()
	defer fake.deleteNatGatewayMutex.RUnlock()
	argsForCall := fake.deleteNatGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNatGatewayReturns(result1 *ec2.DeleteNatGatewayOutput, result2 error) {
	fake.deleteNatGatewayMutex.Lock()
	defer fake.deleteNatGatewayMutex.Unlock()
	fake.DeleteNatGatewayStub = nil
	fake.deleteNatGatewayReturns = struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNatGatewayReturnsOnCall(i int, result1 *ec2.DeleteNatGatewayOutput, result2 error) {
	fake.deleteNatGatewayMutex.Lock()
	defer fake.deleteNatGatewayMutex.Unlock()
	fake.DeleteNatGatewayStub = nil
	if fake.deleteNatGatewayReturnsOnCall == nil {
		fake.deleteNatGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNatGatewayOutput
			result2 error
		})
	}
	fake.deleteNatGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNatGatewayRequest(arg1 *ec2.DeleteNatGatewayInput) (*request.Request, *ec2.DeleteNatGatewayOutput) {
	fake.deleteNatGatewayRequestMutex.Lock()
	ret, specificReturn := fake.deleteNatGatewayRequestReturnsOnCall[len(fake.deleteNatGatewayRequestArgsForCall)]
	fake.deleteNatGatewayRequestArgsForCall = append(fake.deleteNatGatewayRequestArgsForCall, struct {
		arg1 *ec2.DeleteNatGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteNatGatewayRequest", []interface{}{arg1})
	fake.deleteNatGatewayRequestMutex.Unlock()
	if fake.DeleteNatGatewayRequestStub != nil {
		return fake.DeleteNatGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNatGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNatGatewayRequestCallCount() int {
	fake.deleteNatGatewayRequestMutex.RLock()
	defer fake.deleteNatGatewayRequestMutex.RUnlock()
	return len(fake.deleteNatGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteNatGatewayRequestCalls(stub func(*ec2.DeleteNatGatewayInput) (*request.Request, *ec2.DeleteNatGatewayOutput)) {
	fake.deleteNatGatewayRequestMutex.Lock()
	defer fake.deleteNatGatewayRequestMutex.Unlock()
	fake.DeleteNatGatewayRequestStub = stub
}

func (fake *FakeEC2API) DeleteNatGatewayRequestArgsForCall(i int) *ec2.DeleteNatGatewayInput {
	fake.deleteNatGatewayRequestMutex.RLock()
	defer fake.deleteNatGatewayRequestMutex.RUnlock()
	argsForCall := fake.deleteNatGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNatGatewayRequestReturns(result1 *request.Request, result2 *ec2.DeleteNatGatewayOutput) {
	fake.deleteNatGatewayRequestMutex.Lock()
	defer fake.deleteNatGatewayRequestMutex.Unlock()
	fake.DeleteNatGatewayRequestStub = nil
	fake.deleteNatGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteNatGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNatGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteNatGatewayOutput) {
	fake.deleteNatGatewayRequestMutex.Lock()
	defer fake.deleteNatGatewayRequestMutex.Unlock()
	fake.DeleteNatGatewayRequestStub = nil
	if fake.deleteNatGatewayRequestReturnsOnCall == nil {
		fake.deleteNatGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteNatGatewayOutput
		})
	}
	fake.deleteNatGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteNatGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNatGatewayWithContext(arg1 aws.Context, arg2 *ec2.DeleteNatGatewayInput, arg3 ...request.Option) (*ec2.DeleteNatGatewayOutput, error) {
	fake.deleteNatGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.deleteNatGatewayWithContextReturnsOnCall[len(fake.deleteNatGatewayWithContextArgsForCall)]
	fake.deleteNatGatewayWithContextArgsForCall = append(fake.deleteNatGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNatGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteNatGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteNatGatewayWithContextMutex.Unlock()
	if fake.DeleteNatGatewayWithContextStub != nil {
		return fake.DeleteNatGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNatGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNatGatewayWithContextCallCount() int {
	fake.deleteNatGatewayWithContextMutex.RLock()
	defer fake.deleteNatGatewayWithContextMutex.RUnlock()
	return len(fake.deleteNatGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteNatGatewayWithContextCalls(stub func(aws.Context, *ec2.DeleteNatGatewayInput, ...request.Option) (*ec2.DeleteNatGatewayOutput, error)) {
	fake.deleteNatGatewayWithContextMutex.Lock()
	defer fake.deleteNatGatewayWithContextMutex.Unlock()
	fake.DeleteNatGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DeleteNatGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteNatGatewayInput, []request.Option) {
	fake.deleteNatGatewayWithContextMutex.RLock()
	defer fake.deleteNatGatewayWithContextMutex.RUnlock()
	argsForCall := fake.deleteNatGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteNatGatewayWithContextReturns(result1 *ec2.DeleteNatGatewayOutput, result2 error) {
	fake.deleteNatGatewayWithContextMutex.Lock()
	defer fake.deleteNatGatewayWithContextMutex.Unlock()
	fake.DeleteNatGatewayWithContextStub = nil
	fake.deleteNatGatewayWithContextReturns = struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNatGatewayWithContextReturnsOnCall(i int, result1 *ec2.DeleteNatGatewayOutput, result2 error) {
	fake.deleteNatGatewayWithContextMutex.Lock()
	defer fake.deleteNatGatewayWithContextMutex.Unlock()
	fake.DeleteNatGatewayWithContextStub = nil
	if fake.deleteNatGatewayWithContextReturnsOnCall == nil {
		fake.deleteNatGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNatGatewayOutput
			result2 error
		})
	}
	fake.deleteNatGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNatGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAcl(arg1 *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
	fake.deleteNetworkAclMutex.Lock()
	ret, specificReturn := fake.deleteNetworkAclReturnsOnCall[len(fake.deleteNetworkAclArgsForCall)]
	fake.deleteNetworkAclArgsForCall = append(fake.deleteNetworkAclArgsForCall, struct {
		arg1 *ec2.DeleteNetworkAclInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkAcl", []interface{}{arg1})
	fake.deleteNetworkAclMutex.Unlock()
	if fake.DeleteNetworkAclStub != nil {
		return fake.DeleteNetworkAclStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkAclReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkAclCallCount() int {
	fake.deleteNetworkAclMutex.RLock()
	defer fake.deleteNetworkAclMutex.RUnlock()
	return len(fake.deleteNetworkAclArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkAclCalls(stub func(*ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error)) {
	fake.deleteNetworkAclMutex.Lock()
	defer fake.deleteNetworkAclMutex.Unlock()
	fake.DeleteNetworkAclStub = stub
}

func (fake *FakeEC2API) DeleteNetworkAclArgsForCall(i int) *ec2.DeleteNetworkAclInput {
	fake.deleteNetworkAclMutex.RLock()
	defer fake.deleteNetworkAclMutex.RUnlock()
	argsForCall := fake.deleteNetworkAclArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkAclReturns(result1 *ec2.DeleteNetworkAclOutput, result2 error) {
	fake.deleteNetworkAclMutex.Lock()
	defer fake.deleteNetworkAclMutex.Unlock()
	fake.DeleteNetworkAclStub = nil
	fake.deleteNetworkAclReturns = struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclReturnsOnCall(i int, result1 *ec2.DeleteNetworkAclOutput, result2 error) {
	fake.deleteNetworkAclMutex.Lock()
	defer fake.deleteNetworkAclMutex.Unlock()
	fake.DeleteNetworkAclStub = nil
	if fake.deleteNetworkAclReturnsOnCall == nil {
		fake.deleteNetworkAclReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkAclOutput
			result2 error
		})
	}
	fake.deleteNetworkAclReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclEntry(arg1 *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
	fake.deleteNetworkAclEntryMutex.Lock()
	ret, specificReturn := fake.deleteNetworkAclEntryReturnsOnCall[len(fake.deleteNetworkAclEntryArgsForCall)]
	fake.deleteNetworkAclEntryArgsForCall = append(fake.deleteNetworkAclEntryArgsForCall, struct {
		arg1 *ec2.DeleteNetworkAclEntryInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkAclEntry", []interface{}{arg1})
	fake.deleteNetworkAclEntryMutex.Unlock()
	if fake.DeleteNetworkAclEntryStub != nil {
		return fake.DeleteNetworkAclEntryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkAclEntryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkAclEntryCallCount() int {
	fake.deleteNetworkAclEntryMutex.RLock()
	defer fake.deleteNetworkAclEntryMutex.RUnlock()
	return len(fake.deleteNetworkAclEntryArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkAclEntryCalls(stub func(*ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error)) {
	fake.deleteNetworkAclEntryMutex.Lock()
	defer fake.deleteNetworkAclEntryMutex.Unlock()
	fake.DeleteNetworkAclEntryStub = stub
}

func (fake *FakeEC2API) DeleteNetworkAclEntryArgsForCall(i int) *ec2.DeleteNetworkAclEntryInput {
	fake.deleteNetworkAclEntryMutex.RLock()
	defer fake.deleteNetworkAclEntryMutex.RUnlock()
	argsForCall := fake.deleteNetworkAclEntryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkAclEntryReturns(result1 *ec2.DeleteNetworkAclEntryOutput, result2 error) {
	fake.deleteNetworkAclEntryMutex.Lock()
	defer fake.deleteNetworkAclEntryMutex.Unlock()
	fake.DeleteNetworkAclEntryStub = nil
	fake.deleteNetworkAclEntryReturns = struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclEntryReturnsOnCall(i int, result1 *ec2.DeleteNetworkAclEntryOutput, result2 error) {
	fake.deleteNetworkAclEntryMutex.Lock()
	defer fake.deleteNetworkAclEntryMutex.Unlock()
	fake.DeleteNetworkAclEntryStub = nil
	if fake.deleteNetworkAclEntryReturnsOnCall == nil {
		fake.deleteNetworkAclEntryReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkAclEntryOutput
			result2 error
		})
	}
	fake.deleteNetworkAclEntryReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclEntryRequest(arg1 *ec2.DeleteNetworkAclEntryInput) (*request.Request, *ec2.DeleteNetworkAclEntryOutput) {
	fake.deleteNetworkAclEntryRequestMutex.Lock()
	ret, specificReturn := fake.deleteNetworkAclEntryRequestReturnsOnCall[len(fake.deleteNetworkAclEntryRequestArgsForCall)]
	fake.deleteNetworkAclEntryRequestArgsForCall = append(fake.deleteNetworkAclEntryRequestArgsForCall, struct {
		arg1 *ec2.DeleteNetworkAclEntryInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkAclEntryRequest", []interface{}{arg1})
	fake.deleteNetworkAclEntryRequestMutex.Unlock()
	if fake.DeleteNetworkAclEntryRequestStub != nil {
		return fake.DeleteNetworkAclEntryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkAclEntryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkAclEntryRequestCallCount() int {
	fake.deleteNetworkAclEntryRequestMutex.RLock()
	defer fake.deleteNetworkAclEntryRequestMutex.RUnlock()
	return len(fake.deleteNetworkAclEntryRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkAclEntryRequestCalls(stub func(*ec2.DeleteNetworkAclEntryInput) (*request.Request, *ec2.DeleteNetworkAclEntryOutput)) {
	fake.deleteNetworkAclEntryRequestMutex.Lock()
	defer fake.deleteNetworkAclEntryRequestMutex.Unlock()
	fake.DeleteNetworkAclEntryRequestStub = stub
}

func (fake *FakeEC2API) DeleteNetworkAclEntryRequestArgsForCall(i int) *ec2.DeleteNetworkAclEntryInput {
	fake.deleteNetworkAclEntryRequestMutex.RLock()
	defer fake.deleteNetworkAclEntryRequestMutex.RUnlock()
	argsForCall := fake.deleteNetworkAclEntryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkAclEntryRequestReturns(result1 *request.Request, result2 *ec2.DeleteNetworkAclEntryOutput) {
	fake.deleteNetworkAclEntryRequestMutex.Lock()
	defer fake.deleteNetworkAclEntryRequestMutex.Unlock()
	fake.DeleteNetworkAclEntryRequestStub = nil
	fake.deleteNetworkAclEntryRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclEntryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclEntryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteNetworkAclEntryOutput) {
	fake.deleteNetworkAclEntryRequestMutex.Lock()
	defer fake.deleteNetworkAclEntryRequestMutex.Unlock()
	fake.DeleteNetworkAclEntryRequestStub = nil
	if fake.deleteNetworkAclEntryRequestReturnsOnCall == nil {
		fake.deleteNetworkAclEntryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteNetworkAclEntryOutput
		})
	}
	fake.deleteNetworkAclEntryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclEntryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclEntryWithContext(arg1 aws.Context, arg2 *ec2.DeleteNetworkAclEntryInput, arg3 ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error) {
	fake.deleteNetworkAclEntryWithContextMutex.Lock()
	ret, specificReturn := fake.deleteNetworkAclEntryWithContextReturnsOnCall[len(fake.deleteNetworkAclEntryWithContextArgsForCall)]
	fake.deleteNetworkAclEntryWithContextArgsForCall = append(fake.deleteNetworkAclEntryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkAclEntryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteNetworkAclEntryWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteNetworkAclEntryWithContextMutex.Unlock()
	if fake.DeleteNetworkAclEntryWithContextStub != nil {
		return fake.DeleteNetworkAclEntryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkAclEntryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkAclEntryWithContextCallCount() int {
	fake.deleteNetworkAclEntryWithContextMutex.RLock()
	defer fake.deleteNetworkAclEntryWithContextMutex.RUnlock()
	return len(fake.deleteNetworkAclEntryWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkAclEntryWithContextCalls(stub func(aws.Context, *ec2.DeleteNetworkAclEntryInput, ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error)) {
	fake.deleteNetworkAclEntryWithContextMutex.Lock()
	defer fake.deleteNetworkAclEntryWithContextMutex.Unlock()
	fake.DeleteNetworkAclEntryWithContextStub = stub
}

func (fake *FakeEC2API) DeleteNetworkAclEntryWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteNetworkAclEntryInput, []request.Option) {
	fake.deleteNetworkAclEntryWithContextMutex.RLock()
	defer fake.deleteNetworkAclEntryWithContextMutex.RUnlock()
	argsForCall := fake.deleteNetworkAclEntryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteNetworkAclEntryWithContextReturns(result1 *ec2.DeleteNetworkAclEntryOutput, result2 error) {
	fake.deleteNetworkAclEntryWithContextMutex.Lock()
	defer fake.deleteNetworkAclEntryWithContextMutex.Unlock()
	fake.DeleteNetworkAclEntryWithContextStub = nil
	fake.deleteNetworkAclEntryWithContextReturns = struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclEntryWithContextReturnsOnCall(i int, result1 *ec2.DeleteNetworkAclEntryOutput, result2 error) {
	fake.deleteNetworkAclEntryWithContextMutex.Lock()
	defer fake.deleteNetworkAclEntryWithContextMutex.Unlock()
	fake.DeleteNetworkAclEntryWithContextStub = nil
	if fake.deleteNetworkAclEntryWithContextReturnsOnCall == nil {
		fake.deleteNetworkAclEntryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkAclEntryOutput
			result2 error
		})
	}
	fake.deleteNetworkAclEntryWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclRequest(arg1 *ec2.DeleteNetworkAclInput) (*request.Request, *ec2.DeleteNetworkAclOutput) {
	fake.deleteNetworkAclRequestMutex.Lock()
	ret, specificReturn := fake.deleteNetworkAclRequestReturnsOnCall[len(fake.deleteNetworkAclRequestArgsForCall)]
	fake.deleteNetworkAclRequestArgsForCall = append(fake.deleteNetworkAclRequestArgsForCall, struct {
		arg1 *ec2.DeleteNetworkAclInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkAclRequest", []interface{}{arg1})
	fake.deleteNetworkAclRequestMutex.Unlock()
	if fake.DeleteNetworkAclRequestStub != nil {
		return fake.DeleteNetworkAclRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkAclRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkAclRequestCallCount() int {
	fake.deleteNetworkAclRequestMutex.RLock()
	defer fake.deleteNetworkAclRequestMutex.RUnlock()
	return len(fake.deleteNetworkAclRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkAclRequestCalls(stub func(*ec2.DeleteNetworkAclInput) (*request.Request, *ec2.DeleteNetworkAclOutput)) {
	fake.deleteNetworkAclRequestMutex.Lock()
	defer fake.deleteNetworkAclRequestMutex.Unlock()
	fake.DeleteNetworkAclRequestStub = stub
}

func (fake *FakeEC2API) DeleteNetworkAclRequestArgsForCall(i int) *ec2.DeleteNetworkAclInput {
	fake.deleteNetworkAclRequestMutex.RLock()
	defer fake.deleteNetworkAclRequestMutex.RUnlock()
	argsForCall := fake.deleteNetworkAclRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkAclRequestReturns(result1 *request.Request, result2 *ec2.DeleteNetworkAclOutput) {
	fake.deleteNetworkAclRequestMutex.Lock()
	defer fake.deleteNetworkAclRequestMutex.Unlock()
	fake.DeleteNetworkAclRequestStub = nil
	fake.deleteNetworkAclRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteNetworkAclOutput) {
	fake.deleteNetworkAclRequestMutex.Lock()
	defer fake.deleteNetworkAclRequestMutex.Unlock()
	fake.DeleteNetworkAclRequestStub = nil
	if fake.deleteNetworkAclRequestReturnsOnCall == nil {
		fake.deleteNetworkAclRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteNetworkAclOutput
		})
	}
	fake.deleteNetworkAclRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkAclOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclWithContext(arg1 aws.Context, arg2 *ec2.DeleteNetworkAclInput, arg3 ...request.Option) (*ec2.DeleteNetworkAclOutput, error) {
	fake.deleteNetworkAclWithContextMutex.Lock()
	ret, specificReturn := fake.deleteNetworkAclWithContextReturnsOnCall[len(fake.deleteNetworkAclWithContextArgsForCall)]
	fake.deleteNetworkAclWithContextArgsForCall = append(fake.deleteNetworkAclWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkAclInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteNetworkAclWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteNetworkAclWithContextMutex.Unlock()
	if fake.DeleteNetworkAclWithContextStub != nil {
		return fake.DeleteNetworkAclWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkAclWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkAclWithContextCallCount() int {
	fake.deleteNetworkAclWithContextMutex.RLock()
	defer fake.deleteNetworkAclWithContextMutex.RUnlock()
	return len(fake.deleteNetworkAclWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkAclWithContextCalls(stub func(aws.Context, *ec2.DeleteNetworkAclInput, ...request.Option) (*ec2.DeleteNetworkAclOutput, error)) {
	fake.deleteNetworkAclWithContextMutex.Lock()
	defer fake.deleteNetworkAclWithContextMutex.Unlock()
	fake.DeleteNetworkAclWithContextStub = stub
}

func (fake *FakeEC2API) DeleteNetworkAclWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteNetworkAclInput, []request.Option) {
	fake.deleteNetworkAclWithContextMutex.RLock()
	defer fake.deleteNetworkAclWithContextMutex.RUnlock()
	argsForCall := fake.deleteNetworkAclWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteNetworkAclWithContextReturns(result1 *ec2.DeleteNetworkAclOutput, result2 error) {
	fake.deleteNetworkAclWithContextMutex.Lock()
	defer fake.deleteNetworkAclWithContextMutex.Unlock()
	fake.DeleteNetworkAclWithContextStub = nil
	fake.deleteNetworkAclWithContextReturns = struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkAclWithContextReturnsOnCall(i int, result1 *ec2.DeleteNetworkAclOutput, result2 error) {
	fake.deleteNetworkAclWithContextMutex.Lock()
	defer fake.deleteNetworkAclWithContextMutex.Unlock()
	fake.DeleteNetworkAclWithContextStub = nil
	if fake.deleteNetworkAclWithContextReturnsOnCall == nil {
		fake.deleteNetworkAclWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkAclOutput
			result2 error
		})
	}
	fake.deleteNetworkAclWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterface(arg1 *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	fake.deleteNetworkInterfaceMutex.Lock()
	ret, specificReturn := fake.deleteNetworkInterfaceReturnsOnCall[len(fake.deleteNetworkInterfaceArgsForCall)]
	fake.deleteNetworkInterfaceArgsForCall = append(fake.deleteNetworkInterfaceArgsForCall, struct {
		arg1 *ec2.DeleteNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkInterface", []interface{}{arg1})
	fake.deleteNetworkInterfaceMutex.Unlock()
	if fake.DeleteNetworkInterfaceStub != nil {
		return fake.DeleteNetworkInterfaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkInterfaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkInterfaceCallCount() int {
	fake.deleteNetworkInterfaceMutex.RLock()
	defer fake.deleteNetworkInterfaceMutex.RUnlock()
	return len(fake.deleteNetworkInterfaceArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkInterfaceCalls(stub func(*ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error)) {
	fake.deleteNetworkInterfaceMutex.Lock()
	defer fake.deleteNetworkInterfaceMutex.Unlock()
	fake.DeleteNetworkInterfaceStub = stub
}

func (fake *FakeEC2API) DeleteNetworkInterfaceArgsForCall(i int) *ec2.DeleteNetworkInterfaceInput {
	fake.deleteNetworkInterfaceMutex.RLock()
	defer fake.deleteNetworkInterfaceMutex.RUnlock()
	argsForCall := fake.deleteNetworkInterfaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkInterfaceReturns(result1 *ec2.DeleteNetworkInterfaceOutput, result2 error) {
	fake.deleteNetworkInterfaceMutex.Lock()
	defer fake.deleteNetworkInterfaceMutex.Unlock()
	fake.DeleteNetworkInterfaceStub = nil
	fake.deleteNetworkInterfaceReturns = struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfaceReturnsOnCall(i int, result1 *ec2.DeleteNetworkInterfaceOutput, result2 error) {
	fake.deleteNetworkInterfaceMutex.Lock()
	defer fake.deleteNetworkInterfaceMutex.Unlock()
	fake.DeleteNetworkInterfaceStub = nil
	if fake.deleteNetworkInterfaceReturnsOnCall == nil {
		fake.deleteNetworkInterfaceReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkInterfaceOutput
			result2 error
		})
	}
	fake.deleteNetworkInterfaceReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermission(arg1 *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	fake.deleteNetworkInterfacePermissionMutex.Lock()
	ret, specificReturn := fake.deleteNetworkInterfacePermissionReturnsOnCall[len(fake.deleteNetworkInterfacePermissionArgsForCall)]
	fake.deleteNetworkInterfacePermissionArgsForCall = append(fake.deleteNetworkInterfacePermissionArgsForCall, struct {
		arg1 *ec2.DeleteNetworkInterfacePermissionInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkInterfacePermission", []interface{}{arg1})
	fake.deleteNetworkInterfacePermissionMutex.Unlock()
	if fake.DeleteNetworkInterfacePermissionStub != nil {
		return fake.DeleteNetworkInterfacePermissionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkInterfacePermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionCallCount() int {
	fake.deleteNetworkInterfacePermissionMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionMutex.RUnlock()
	return len(fake.deleteNetworkInterfacePermissionArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionCalls(stub func(*ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error)) {
	fake.deleteNetworkInterfacePermissionMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionStub = stub
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionArgsForCall(i int) *ec2.DeleteNetworkInterfacePermissionInput {
	fake.deleteNetworkInterfacePermissionMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionMutex.RUnlock()
	argsForCall := fake.deleteNetworkInterfacePermissionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionReturns(result1 *ec2.DeleteNetworkInterfacePermissionOutput, result2 error) {
	fake.deleteNetworkInterfacePermissionMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionStub = nil
	fake.deleteNetworkInterfacePermissionReturns = struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionReturnsOnCall(i int, result1 *ec2.DeleteNetworkInterfacePermissionOutput, result2 error) {
	fake.deleteNetworkInterfacePermissionMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionStub = nil
	if fake.deleteNetworkInterfacePermissionReturnsOnCall == nil {
		fake.deleteNetworkInterfacePermissionReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkInterfacePermissionOutput
			result2 error
		})
	}
	fake.deleteNetworkInterfacePermissionReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionRequest(arg1 *ec2.DeleteNetworkInterfacePermissionInput) (*request.Request, *ec2.DeleteNetworkInterfacePermissionOutput) {
	fake.deleteNetworkInterfacePermissionRequestMutex.Lock()
	ret, specificReturn := fake.deleteNetworkInterfacePermissionRequestReturnsOnCall[len(fake.deleteNetworkInterfacePermissionRequestArgsForCall)]
	fake.deleteNetworkInterfacePermissionRequestArgsForCall = append(fake.deleteNetworkInterfacePermissionRequestArgsForCall, struct {
		arg1 *ec2.DeleteNetworkInterfacePermissionInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkInterfacePermissionRequest", []interface{}{arg1})
	fake.deleteNetworkInterfacePermissionRequestMutex.Unlock()
	if fake.DeleteNetworkInterfacePermissionRequestStub != nil {
		return fake.DeleteNetworkInterfacePermissionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkInterfacePermissionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionRequestCallCount() int {
	fake.deleteNetworkInterfacePermissionRequestMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionRequestMutex.RUnlock()
	return len(fake.deleteNetworkInterfacePermissionRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionRequestCalls(stub func(*ec2.DeleteNetworkInterfacePermissionInput) (*request.Request, *ec2.DeleteNetworkInterfacePermissionOutput)) {
	fake.deleteNetworkInterfacePermissionRequestMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionRequestMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionRequestStub = stub
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionRequestArgsForCall(i int) *ec2.DeleteNetworkInterfacePermissionInput {
	fake.deleteNetworkInterfacePermissionRequestMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionRequestMutex.RUnlock()
	argsForCall := fake.deleteNetworkInterfacePermissionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionRequestReturns(result1 *request.Request, result2 *ec2.DeleteNetworkInterfacePermissionOutput) {
	fake.deleteNetworkInterfacePermissionRequestMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionRequestMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionRequestStub = nil
	fake.deleteNetworkInterfacePermissionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfacePermissionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteNetworkInterfacePermissionOutput) {
	fake.deleteNetworkInterfacePermissionRequestMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionRequestMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionRequestStub = nil
	if fake.deleteNetworkInterfacePermissionRequestReturnsOnCall == nil {
		fake.deleteNetworkInterfacePermissionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteNetworkInterfacePermissionOutput
		})
	}
	fake.deleteNetworkInterfacePermissionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfacePermissionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionWithContext(arg1 aws.Context, arg2 *ec2.DeleteNetworkInterfacePermissionInput, arg3 ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	fake.deleteNetworkInterfacePermissionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteNetworkInterfacePermissionWithContextReturnsOnCall[len(fake.deleteNetworkInterfacePermissionWithContextArgsForCall)]
	fake.deleteNetworkInterfacePermissionWithContextArgsForCall = append(fake.deleteNetworkInterfacePermissionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkInterfacePermissionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteNetworkInterfacePermissionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteNetworkInterfacePermissionWithContextMutex.Unlock()
	if fake.DeleteNetworkInterfacePermissionWithContextStub != nil {
		return fake.DeleteNetworkInterfacePermissionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkInterfacePermissionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionWithContextCallCount() int {
	fake.deleteNetworkInterfacePermissionWithContextMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionWithContextMutex.RUnlock()
	return len(fake.deleteNetworkInterfacePermissionWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionWithContextCalls(stub func(aws.Context, *ec2.DeleteNetworkInterfacePermissionInput, ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error)) {
	fake.deleteNetworkInterfacePermissionWithContextMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionWithContextMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionWithContextStub = stub
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteNetworkInterfacePermissionInput, []request.Option) {
	fake.deleteNetworkInterfacePermissionWithContextMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionWithContextMutex.RUnlock()
	argsForCall := fake.deleteNetworkInterfacePermissionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionWithContextReturns(result1 *ec2.DeleteNetworkInterfacePermissionOutput, result2 error) {
	fake.deleteNetworkInterfacePermissionWithContextMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionWithContextMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionWithContextStub = nil
	fake.deleteNetworkInterfacePermissionWithContextReturns = struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfacePermissionWithContextReturnsOnCall(i int, result1 *ec2.DeleteNetworkInterfacePermissionOutput, result2 error) {
	fake.deleteNetworkInterfacePermissionWithContextMutex.Lock()
	defer fake.deleteNetworkInterfacePermissionWithContextMutex.Unlock()
	fake.DeleteNetworkInterfacePermissionWithContextStub = nil
	if fake.deleteNetworkInterfacePermissionWithContextReturnsOnCall == nil {
		fake.deleteNetworkInterfacePermissionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkInterfacePermissionOutput
			result2 error
		})
	}
	fake.deleteNetworkInterfacePermissionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkInterfacePermissionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfaceRequest(arg1 *ec2.DeleteNetworkInterfaceInput) (*request.Request, *ec2.DeleteNetworkInterfaceOutput) {
	fake.deleteNetworkInterfaceRequestMutex.Lock()
	ret, specificReturn := fake.deleteNetworkInterfaceRequestReturnsOnCall[len(fake.deleteNetworkInterfaceRequestArgsForCall)]
	fake.deleteNetworkInterfaceRequestArgsForCall = append(fake.deleteNetworkInterfaceRequestArgsForCall, struct {
		arg1 *ec2.DeleteNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("DeleteNetworkInterfaceRequest", []interface{}{arg1})
	fake.deleteNetworkInterfaceRequestMutex.Unlock()
	if fake.DeleteNetworkInterfaceRequestStub != nil {
		return fake.DeleteNetworkInterfaceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkInterfaceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkInterfaceRequestCallCount() int {
	fake.deleteNetworkInterfaceRequestMutex.RLock()
	defer fake.deleteNetworkInterfaceRequestMutex.RUnlock()
	return len(fake.deleteNetworkInterfaceRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkInterfaceRequestCalls(stub func(*ec2.DeleteNetworkInterfaceInput) (*request.Request, *ec2.DeleteNetworkInterfaceOutput)) {
	fake.deleteNetworkInterfaceRequestMutex.Lock()
	defer fake.deleteNetworkInterfaceRequestMutex.Unlock()
	fake.DeleteNetworkInterfaceRequestStub = stub
}

func (fake *FakeEC2API) DeleteNetworkInterfaceRequestArgsForCall(i int) *ec2.DeleteNetworkInterfaceInput {
	fake.deleteNetworkInterfaceRequestMutex.RLock()
	defer fake.deleteNetworkInterfaceRequestMutex.RUnlock()
	argsForCall := fake.deleteNetworkInterfaceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteNetworkInterfaceRequestReturns(result1 *request.Request, result2 *ec2.DeleteNetworkInterfaceOutput) {
	fake.deleteNetworkInterfaceRequestMutex.Lock()
	defer fake.deleteNetworkInterfaceRequestMutex.Unlock()
	fake.DeleteNetworkInterfaceRequestStub = nil
	fake.deleteNetworkInterfaceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfaceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteNetworkInterfaceOutput) {
	fake.deleteNetworkInterfaceRequestMutex.Lock()
	defer fake.deleteNetworkInterfaceRequestMutex.Unlock()
	fake.DeleteNetworkInterfaceRequestStub = nil
	if fake.deleteNetworkInterfaceRequestReturnsOnCall == nil {
		fake.deleteNetworkInterfaceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteNetworkInterfaceOutput
		})
	}
	fake.deleteNetworkInterfaceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfaceWithContext(arg1 aws.Context, arg2 *ec2.DeleteNetworkInterfaceInput, arg3 ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error) {
	fake.deleteNetworkInterfaceWithContextMutex.Lock()
	ret, specificReturn := fake.deleteNetworkInterfaceWithContextReturnsOnCall[len(fake.deleteNetworkInterfaceWithContextArgsForCall)]
	fake.deleteNetworkInterfaceWithContextArgsForCall = append(fake.deleteNetworkInterfaceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteNetworkInterfaceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteNetworkInterfaceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteNetworkInterfaceWithContextMutex.Unlock()
	if fake.DeleteNetworkInterfaceWithContextStub != nil {
		return fake.DeleteNetworkInterfaceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNetworkInterfaceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteNetworkInterfaceWithContextCallCount() int {
	fake.deleteNetworkInterfaceWithContextMutex.RLock()
	defer fake.deleteNetworkInterfaceWithContextMutex.RUnlock()
	return len(fake.deleteNetworkInterfaceWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteNetworkInterfaceWithContextCalls(stub func(aws.Context, *ec2.DeleteNetworkInterfaceInput, ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error)) {
	fake.deleteNetworkInterfaceWithContextMutex.Lock()
	defer fake.deleteNetworkInterfaceWithContextMutex.Unlock()
	fake.DeleteNetworkInterfaceWithContextStub = stub
}

func (fake *FakeEC2API) DeleteNetworkInterfaceWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteNetworkInterfaceInput, []request.Option) {
	fake.deleteNetworkInterfaceWithContextMutex.RLock()
	defer fake.deleteNetworkInterfaceWithContextMutex.RUnlock()
	argsForCall := fake.deleteNetworkInterfaceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteNetworkInterfaceWithContextReturns(result1 *ec2.DeleteNetworkInterfaceOutput, result2 error) {
	fake.deleteNetworkInterfaceWithContextMutex.Lock()
	defer fake.deleteNetworkInterfaceWithContextMutex.Unlock()
	fake.DeleteNetworkInterfaceWithContextStub = nil
	fake.deleteNetworkInterfaceWithContextReturns = struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteNetworkInterfaceWithContextReturnsOnCall(i int, result1 *ec2.DeleteNetworkInterfaceOutput, result2 error) {
	fake.deleteNetworkInterfaceWithContextMutex.Lock()
	defer fake.deleteNetworkInterfaceWithContextMutex.Unlock()
	fake.DeleteNetworkInterfaceWithContextStub = nil
	if fake.deleteNetworkInterfaceWithContextReturnsOnCall == nil {
		fake.deleteNetworkInterfaceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteNetworkInterfaceOutput
			result2 error
		})
	}
	fake.deleteNetworkInterfaceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeletePlacementGroup(arg1 *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	fake.deletePlacementGroupMutex.Lock()
	ret, specificReturn := fake.deletePlacementGroupReturnsOnCall[len(fake.deletePlacementGroupArgsForCall)]
	fake.deletePlacementGroupArgsForCall = append(fake.deletePlacementGroupArgsForCall, struct {
		arg1 *ec2.DeletePlacementGroupInput
	}{arg1})
	fake.recordInvocation("DeletePlacementGroup", []interface{}{arg1})
	fake.deletePlacementGroupMutex.Unlock()
	if fake.DeletePlacementGroupStub != nil {
		return fake.DeletePlacementGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePlacementGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeletePlacementGroupCallCount() int {
	fake.deletePlacementGroupMutex.RLock()
	defer fake.deletePlacementGroupMutex.RUnlock()
	return len(fake.deletePlacementGroupArgsForCall)
}

func (fake *FakeEC2API) DeletePlacementGroupCalls(stub func(*ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error)) {
	fake.deletePlacementGroupMutex.Lock()
	defer fake.deletePlacementGroupMutex.Unlock()
	fake.DeletePlacementGroupStub = stub
}

func (fake *FakeEC2API) DeletePlacementGroupArgsForCall(i int) *ec2.DeletePlacementGroupInput {
	fake.deletePlacementGroupMutex.RLock()
	defer fake.deletePlacementGroupMutex.RUnlock()
	argsForCall := fake.deletePlacementGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeletePlacementGroupReturns(result1 *ec2.DeletePlacementGroupOutput, result2 error) {
	fake.deletePlacementGroupMutex.Lock()
	defer fake.deletePlacementGroupMutex.Unlock()
	fake.DeletePlacementGroupStub = nil
	fake.deletePlacementGroupReturns = struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeletePlacementGroupReturnsOnCall(i int, result1 *ec2.DeletePlacementGroupOutput, result2 error) {
	fake.deletePlacementGroupMutex.Lock()
	defer fake.deletePlacementGroupMutex.Unlock()
	fake.DeletePlacementGroupStub = nil
	if fake.deletePlacementGroupReturnsOnCall == nil {
		fake.deletePlacementGroupReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeletePlacementGroupOutput
			result2 error
		})
	}
	fake.deletePlacementGroupReturnsOnCall[i] = struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeletePlacementGroupRequest(arg1 *ec2.DeletePlacementGroupInput) (*request.Request, *ec2.DeletePlacementGroupOutput) {
	fake.deletePlacementGroupRequestMutex.Lock()
	ret, specificReturn := fake.deletePlacementGroupRequestReturnsOnCall[len(fake.deletePlacementGroupRequestArgsForCall)]
	fake.deletePlacementGroupRequestArgsForCall = append(fake.deletePlacementGroupRequestArgsForCall, struct {
		arg1 *ec2.DeletePlacementGroupInput
	}{arg1})
	fake.recordInvocation("DeletePlacementGroupRequest", []interface{}{arg1})
	fake.deletePlacementGroupRequestMutex.Unlock()
	if fake.DeletePlacementGroupRequestStub != nil {
		return fake.DeletePlacementGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePlacementGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeletePlacementGroupRequestCallCount() int {
	fake.deletePlacementGroupRequestMutex.RLock()
	defer fake.deletePlacementGroupRequestMutex.RUnlock()
	return len(fake.deletePlacementGroupRequestArgsForCall)
}

func (fake *FakeEC2API) DeletePlacementGroupRequestCalls(stub func(*ec2.DeletePlacementGroupInput) (*request.Request, *ec2.DeletePlacementGroupOutput)) {
	fake.deletePlacementGroupRequestMutex.Lock()
	defer fake.deletePlacementGroupRequestMutex.Unlock()
	fake.DeletePlacementGroupRequestStub = stub
}

func (fake *FakeEC2API) DeletePlacementGroupRequestArgsForCall(i int) *ec2.DeletePlacementGroupInput {
	fake.deletePlacementGroupRequestMutex.RLock()
	defer fake.deletePlacementGroupRequestMutex.RUnlock()
	argsForCall := fake.deletePlacementGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeletePlacementGroupRequestReturns(result1 *request.Request, result2 *ec2.DeletePlacementGroupOutput) {
	fake.deletePlacementGroupRequestMutex.Lock()
	defer fake.deletePlacementGroupRequestMutex.Unlock()
	fake.DeletePlacementGroupRequestStub = nil
	fake.deletePlacementGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeletePlacementGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeletePlacementGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeletePlacementGroupOutput) {
	fake.deletePlacementGroupRequestMutex.Lock()
	defer fake.deletePlacementGroupRequestMutex.Unlock()
	fake.DeletePlacementGroupRequestStub = nil
	if fake.deletePlacementGroupRequestReturnsOnCall == nil {
		fake.deletePlacementGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeletePlacementGroupOutput
		})
	}
	fake.deletePlacementGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeletePlacementGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeletePlacementGroupWithContext(arg1 aws.Context, arg2 *ec2.DeletePlacementGroupInput, arg3 ...request.Option) (*ec2.DeletePlacementGroupOutput, error) {
	fake.deletePlacementGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deletePlacementGroupWithContextReturnsOnCall[len(fake.deletePlacementGroupWithContextArgsForCall)]
	fake.deletePlacementGroupWithContextArgsForCall = append(fake.deletePlacementGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeletePlacementGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeletePlacementGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deletePlacementGroupWithContextMutex.Unlock()
	if fake.DeletePlacementGroupWithContextStub != nil {
		return fake.DeletePlacementGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePlacementGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeletePlacementGroupWithContextCallCount() int {
	fake.deletePlacementGroupWithContextMutex.RLock()
	defer fake.deletePlacementGroupWithContextMutex.RUnlock()
	return len(fake.deletePlacementGroupWithContextArgsForCall)
}

func (fake *FakeEC2API) DeletePlacementGroupWithContextCalls(stub func(aws.Context, *ec2.DeletePlacementGroupInput, ...request.Option) (*ec2.DeletePlacementGroupOutput, error)) {
	fake.deletePlacementGroupWithContextMutex.Lock()
	defer fake.deletePlacementGroupWithContextMutex.Unlock()
	fake.DeletePlacementGroupWithContextStub = stub
}

func (fake *FakeEC2API) DeletePlacementGroupWithContextArgsForCall(i int) (aws.Context, *ec2.DeletePlacementGroupInput, []request.Option) {
	fake.deletePlacementGroupWithContextMutex.RLock()
	defer fake.deletePlacementGroupWithContextMutex.RUnlock()
	argsForCall := fake.deletePlacementGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeletePlacementGroupWithContextReturns(result1 *ec2.DeletePlacementGroupOutput, result2 error) {
	fake.deletePlacementGroupWithContextMutex.Lock()
	defer fake.deletePlacementGroupWithContextMutex.Unlock()
	fake.DeletePlacementGroupWithContextStub = nil
	fake.deletePlacementGroupWithContextReturns = struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeletePlacementGroupWithContextReturnsOnCall(i int, result1 *ec2.DeletePlacementGroupOutput, result2 error) {
	fake.deletePlacementGroupWithContextMutex.Lock()
	defer fake.deletePlacementGroupWithContextMutex.Unlock()
	fake.DeletePlacementGroupWithContextStub = nil
	if fake.deletePlacementGroupWithContextReturnsOnCall == nil {
		fake.deletePlacementGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeletePlacementGroupOutput
			result2 error
		})
	}
	fake.deletePlacementGroupWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeletePlacementGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRoute(arg1 *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	fake.deleteRouteMutex.Lock()
	ret, specificReturn := fake.deleteRouteReturnsOnCall[len(fake.deleteRouteArgsForCall)]
	fake.deleteRouteArgsForCall = append(fake.deleteRouteArgsForCall, struct {
		arg1 *ec2.DeleteRouteInput
	}{arg1})
	fake.recordInvocation("DeleteRoute", []interface{}{arg1})
	fake.deleteRouteMutex.Unlock()
	if fake.DeleteRouteStub != nil {
		return fake.DeleteRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteRouteCallCount() int {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	return len(fake.deleteRouteArgsForCall)
}

func (fake *FakeEC2API) DeleteRouteCalls(stub func(*ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error)) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = stub
}

func (fake *FakeEC2API) DeleteRouteArgsForCall(i int) *ec2.DeleteRouteInput {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	argsForCall := fake.deleteRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteRouteReturns(result1 *ec2.DeleteRouteOutput, result2 error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = nil
	fake.deleteRouteReturns = struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteReturnsOnCall(i int, result1 *ec2.DeleteRouteOutput, result2 error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = nil
	if fake.deleteRouteReturnsOnCall == nil {
		fake.deleteRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteRouteOutput
			result2 error
		})
	}
	fake.deleteRouteReturnsOnCall[i] = struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteRequest(arg1 *ec2.DeleteRouteInput) (*request.Request, *ec2.DeleteRouteOutput) {
	fake.deleteRouteRequestMutex.Lock()
	ret, specificReturn := fake.deleteRouteRequestReturnsOnCall[len(fake.deleteRouteRequestArgsForCall)]
	fake.deleteRouteRequestArgsForCall = append(fake.deleteRouteRequestArgsForCall, struct {
		arg1 *ec2.DeleteRouteInput
	}{arg1})
	fake.recordInvocation("DeleteRouteRequest", []interface{}{arg1})
	fake.deleteRouteRequestMutex.Unlock()
	if fake.DeleteRouteRequestStub != nil {
		return fake.DeleteRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteRouteRequestCallCount() int {
	fake.deleteRouteRequestMutex.RLock()
	defer fake.deleteRouteRequestMutex.RUnlock()
	return len(fake.deleteRouteRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteRouteRequestCalls(stub func(*ec2.DeleteRouteInput) (*request.Request, *ec2.DeleteRouteOutput)) {
	fake.deleteRouteRequestMutex.Lock()
	defer fake.deleteRouteRequestMutex.Unlock()
	fake.DeleteRouteRequestStub = stub
}

func (fake *FakeEC2API) DeleteRouteRequestArgsForCall(i int) *ec2.DeleteRouteInput {
	fake.deleteRouteRequestMutex.RLock()
	defer fake.deleteRouteRequestMutex.RUnlock()
	argsForCall := fake.deleteRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteRouteRequestReturns(result1 *request.Request, result2 *ec2.DeleteRouteOutput) {
	fake.deleteRouteRequestMutex.Lock()
	defer fake.deleteRouteRequestMutex.Unlock()
	fake.DeleteRouteRequestStub = nil
	fake.deleteRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteRouteOutput) {
	fake.deleteRouteRequestMutex.Lock()
	defer fake.deleteRouteRequestMutex.Unlock()
	fake.DeleteRouteRequestStub = nil
	if fake.deleteRouteRequestReturnsOnCall == nil {
		fake.deleteRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteRouteOutput
		})
	}
	fake.deleteRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteTable(arg1 *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	fake.deleteRouteTableMutex.Lock()
	ret, specificReturn := fake.deleteRouteTableReturnsOnCall[len(fake.deleteRouteTableArgsForCall)]
	fake.deleteRouteTableArgsForCall = append(fake.deleteRouteTableArgsForCall, struct {
		arg1 *ec2.DeleteRouteTableInput
	}{arg1})
	fake.recordInvocation("DeleteRouteTable", []interface{}{arg1})
	fake.deleteRouteTableMutex.Unlock()
	if fake.DeleteRouteTableStub != nil {
		return fake.DeleteRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteRouteTableCallCount() int {
	fake.deleteRouteTableMutex.RLock()
	defer fake.deleteRouteTableMutex.RUnlock()
	return len(fake.deleteRouteTableArgsForCall)
}

func (fake *FakeEC2API) DeleteRouteTableCalls(stub func(*ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error)) {
	fake.deleteRouteTableMutex.Lock()
	defer fake.deleteRouteTableMutex.Unlock()
	fake.DeleteRouteTableStub = stub
}

func (fake *FakeEC2API) DeleteRouteTableArgsForCall(i int) *ec2.DeleteRouteTableInput {
	fake.deleteRouteTableMutex.RLock()
	defer fake.deleteRouteTableMutex.RUnlock()
	argsForCall := fake.deleteRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteRouteTableReturns(result1 *ec2.DeleteRouteTableOutput, result2 error) {
	fake.deleteRouteTableMutex.Lock()
	defer fake.deleteRouteTableMutex.Unlock()
	fake.DeleteRouteTableStub = nil
	fake.deleteRouteTableReturns = struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteTableReturnsOnCall(i int, result1 *ec2.DeleteRouteTableOutput, result2 error) {
	fake.deleteRouteTableMutex.Lock()
	defer fake.deleteRouteTableMutex.Unlock()
	fake.DeleteRouteTableStub = nil
	if fake.deleteRouteTableReturnsOnCall == nil {
		fake.deleteRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteRouteTableOutput
			result2 error
		})
	}
	fake.deleteRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteTableRequest(arg1 *ec2.DeleteRouteTableInput) (*request.Request, *ec2.DeleteRouteTableOutput) {
	fake.deleteRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.deleteRouteTableRequestReturnsOnCall[len(fake.deleteRouteTableRequestArgsForCall)]
	fake.deleteRouteTableRequestArgsForCall = append(fake.deleteRouteTableRequestArgsForCall, struct {
		arg1 *ec2.DeleteRouteTableInput
	}{arg1})
	fake.recordInvocation("DeleteRouteTableRequest", []interface{}{arg1})
	fake.deleteRouteTableRequestMutex.Unlock()
	if fake.DeleteRouteTableRequestStub != nil {
		return fake.DeleteRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteRouteTableRequestCallCount() int {
	fake.deleteRouteTableRequestMutex.RLock()
	defer fake.deleteRouteTableRequestMutex.RUnlock()
	return len(fake.deleteRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteRouteTableRequestCalls(stub func(*ec2.DeleteRouteTableInput) (*request.Request, *ec2.DeleteRouteTableOutput)) {
	fake.deleteRouteTableRequestMutex.Lock()
	defer fake.deleteRouteTableRequestMutex.Unlock()
	fake.DeleteRouteTableRequestStub = stub
}

func (fake *FakeEC2API) DeleteRouteTableRequestArgsForCall(i int) *ec2.DeleteRouteTableInput {
	fake.deleteRouteTableRequestMutex.RLock()
	defer fake.deleteRouteTableRequestMutex.RUnlock()
	argsForCall := fake.deleteRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteRouteTableRequestReturns(result1 *request.Request, result2 *ec2.DeleteRouteTableOutput) {
	fake.deleteRouteTableRequestMutex.Lock()
	defer fake.deleteRouteTableRequestMutex.Unlock()
	fake.DeleteRouteTableRequestStub = nil
	fake.deleteRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteRouteTableOutput) {
	fake.deleteRouteTableRequestMutex.Lock()
	defer fake.deleteRouteTableRequestMutex.Unlock()
	fake.DeleteRouteTableRequestStub = nil
	if fake.deleteRouteTableRequestReturnsOnCall == nil {
		fake.deleteRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteRouteTableOutput
		})
	}
	fake.deleteRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteTableWithContext(arg1 aws.Context, arg2 *ec2.DeleteRouteTableInput, arg3 ...request.Option) (*ec2.DeleteRouteTableOutput, error) {
	fake.deleteRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRouteTableWithContextReturnsOnCall[len(fake.deleteRouteTableWithContextArgsForCall)]
	fake.deleteRouteTableWithContextArgsForCall = append(fake.deleteRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRouteTableWithContextMutex.Unlock()
	if fake.DeleteRouteTableWithContextStub != nil {
		return fake.DeleteRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteRouteTableWithContextCallCount() int {
	fake.deleteRouteTableWithContextMutex.RLock()
	defer fake.deleteRouteTableWithContextMutex.RUnlock()
	return len(fake.deleteRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteRouteTableWithContextCalls(stub func(aws.Context, *ec2.DeleteRouteTableInput, ...request.Option) (*ec2.DeleteRouteTableOutput, error)) {
	fake.deleteRouteTableWithContextMutex.Lock()
	defer fake.deleteRouteTableWithContextMutex.Unlock()
	fake.DeleteRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) DeleteRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteRouteTableInput, []request.Option) {
	fake.deleteRouteTableWithContextMutex.RLock()
	defer fake.deleteRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.deleteRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteRouteTableWithContextReturns(result1 *ec2.DeleteRouteTableOutput, result2 error) {
	fake.deleteRouteTableWithContextMutex.Lock()
	defer fake.deleteRouteTableWithContextMutex.Unlock()
	fake.DeleteRouteTableWithContextStub = nil
	fake.deleteRouteTableWithContextReturns = struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteTableWithContextReturnsOnCall(i int, result1 *ec2.DeleteRouteTableOutput, result2 error) {
	fake.deleteRouteTableWithContextMutex.Lock()
	defer fake.deleteRouteTableWithContextMutex.Unlock()
	fake.DeleteRouteTableWithContextStub = nil
	if fake.deleteRouteTableWithContextReturnsOnCall == nil {
		fake.deleteRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteRouteTableOutput
			result2 error
		})
	}
	fake.deleteRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteWithContext(arg1 aws.Context, arg2 *ec2.DeleteRouteInput, arg3 ...request.Option) (*ec2.DeleteRouteOutput, error) {
	fake.deleteRouteWithContextMutex.Lock()
	ret, specificReturn := fake.deleteRouteWithContextReturnsOnCall[len(fake.deleteRouteWithContextArgsForCall)]
	fake.deleteRouteWithContextArgsForCall = append(fake.deleteRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteRouteWithContextMutex.Unlock()
	if fake.DeleteRouteWithContextStub != nil {
		return fake.DeleteRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteRouteWithContextCallCount() int {
	fake.deleteRouteWithContextMutex.RLock()
	defer fake.deleteRouteWithContextMutex.RUnlock()
	return len(fake.deleteRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteRouteWithContextCalls(stub func(aws.Context, *ec2.DeleteRouteInput, ...request.Option) (*ec2.DeleteRouteOutput, error)) {
	fake.deleteRouteWithContextMutex.Lock()
	defer fake.deleteRouteWithContextMutex.Unlock()
	fake.DeleteRouteWithContextStub = stub
}

func (fake *FakeEC2API) DeleteRouteWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteRouteInput, []request.Option) {
	fake.deleteRouteWithContextMutex.RLock()
	defer fake.deleteRouteWithContextMutex.RUnlock()
	argsForCall := fake.deleteRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteRouteWithContextReturns(result1 *ec2.DeleteRouteOutput, result2 error) {
	fake.deleteRouteWithContextMutex.Lock()
	defer fake.deleteRouteWithContextMutex.Unlock()
	fake.DeleteRouteWithContextStub = nil
	fake.deleteRouteWithContextReturns = struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteRouteWithContextReturnsOnCall(i int, result1 *ec2.DeleteRouteOutput, result2 error) {
	fake.deleteRouteWithContextMutex.Lock()
	defer fake.deleteRouteWithContextMutex.Unlock()
	fake.DeleteRouteWithContextStub = nil
	if fake.deleteRouteWithContextReturnsOnCall == nil {
		fake.deleteRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteRouteOutput
			result2 error
		})
	}
	fake.deleteRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSecurityGroup(arg1 *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	fake.deleteSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteSecurityGroupReturnsOnCall[len(fake.deleteSecurityGroupArgsForCall)]
	fake.deleteSecurityGroupArgsForCall = append(fake.deleteSecurityGroupArgsForCall, struct {
		arg1 *ec2.DeleteSecurityGroupInput
	}{arg1})
	fake.recordInvocation("DeleteSecurityGroup", []interface{}{arg1})
	fake.deleteSecurityGroupMutex.Unlock()
	if fake.DeleteSecurityGroupStub != nil {
		return fake.DeleteSecurityGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSecurityGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSecurityGroupCallCount() int {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	return len(fake.deleteSecurityGroupArgsForCall)
}

func (fake *FakeEC2API) DeleteSecurityGroupCalls(stub func(*ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error)) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = stub
}

func (fake *FakeEC2API) DeleteSecurityGroupArgsForCall(i int) *ec2.DeleteSecurityGroupInput {
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	argsForCall := fake.deleteSecurityGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSecurityGroupReturns(result1 *ec2.DeleteSecurityGroupOutput, result2 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	fake.deleteSecurityGroupReturns = struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSecurityGroupReturnsOnCall(i int, result1 *ec2.DeleteSecurityGroupOutput, result2 error) {
	fake.deleteSecurityGroupMutex.Lock()
	defer fake.deleteSecurityGroupMutex.Unlock()
	fake.DeleteSecurityGroupStub = nil
	if fake.deleteSecurityGroupReturnsOnCall == nil {
		fake.deleteSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteSecurityGroupReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSecurityGroupRequest(arg1 *ec2.DeleteSecurityGroupInput) (*request.Request, *ec2.DeleteSecurityGroupOutput) {
	fake.deleteSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteSecurityGroupRequestReturnsOnCall[len(fake.deleteSecurityGroupRequestArgsForCall)]
	fake.deleteSecurityGroupRequestArgsForCall = append(fake.deleteSecurityGroupRequestArgsForCall, struct {
		arg1 *ec2.DeleteSecurityGroupInput
	}{arg1})
	fake.recordInvocation("DeleteSecurityGroupRequest", []interface{}{arg1})
	fake.deleteSecurityGroupRequestMutex.Unlock()
	if fake.DeleteSecurityGroupRequestStub != nil {
		return fake.DeleteSecurityGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSecurityGroupRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSecurityGroupRequestCallCount() int {
	fake.deleteSecurityGroupRequestMutex.RLock()
	defer fake.deleteSecurityGroupRequestMutex.RUnlock()
	return len(fake.deleteSecurityGroupRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteSecurityGroupRequestCalls(stub func(*ec2.DeleteSecurityGroupInput) (*request.Request, *ec2.DeleteSecurityGroupOutput)) {
	fake.deleteSecurityGroupRequestMutex.Lock()
	defer fake.deleteSecurityGroupRequestMutex.Unlock()
	fake.DeleteSecurityGroupRequestStub = stub
}

func (fake *FakeEC2API) DeleteSecurityGroupRequestArgsForCall(i int) *ec2.DeleteSecurityGroupInput {
	fake.deleteSecurityGroupRequestMutex.RLock()
	defer fake.deleteSecurityGroupRequestMutex.RUnlock()
	argsForCall := fake.deleteSecurityGroupRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSecurityGroupRequestReturns(result1 *request.Request, result2 *ec2.DeleteSecurityGroupOutput) {
	fake.deleteSecurityGroupRequestMutex.Lock()
	defer fake.deleteSecurityGroupRequestMutex.Unlock()
	fake.DeleteSecurityGroupRequestStub = nil
	fake.deleteSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteSecurityGroupOutput) {
	fake.deleteSecurityGroupRequestMutex.Lock()
	defer fake.deleteSecurityGroupRequestMutex.Unlock()
	fake.DeleteSecurityGroupRequestStub = nil
	if fake.deleteSecurityGroupRequestReturnsOnCall == nil {
		fake.deleteSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteSecurityGroupOutput
		})
	}
	fake.deleteSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSecurityGroupWithContext(arg1 aws.Context, arg2 *ec2.DeleteSecurityGroupInput, arg3 ...request.Option) (*ec2.DeleteSecurityGroupOutput, error) {
	fake.deleteSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSecurityGroupWithContextReturnsOnCall[len(fake.deleteSecurityGroupWithContextArgsForCall)]
	fake.deleteSecurityGroupWithContextArgsForCall = append(fake.deleteSecurityGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSecurityGroupWithContextMutex.Unlock()
	if fake.DeleteSecurityGroupWithContextStub != nil {
		return fake.DeleteSecurityGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSecurityGroupWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSecurityGroupWithContextCallCount() int {
	fake.deleteSecurityGroupWithContextMutex.RLock()
	defer fake.deleteSecurityGroupWithContextMutex.RUnlock()
	return len(fake.deleteSecurityGroupWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteSecurityGroupWithContextCalls(stub func(aws.Context, *ec2.DeleteSecurityGroupInput, ...request.Option) (*ec2.DeleteSecurityGroupOutput, error)) {
	fake.deleteSecurityGroupWithContextMutex.Lock()
	defer fake.deleteSecurityGroupWithContextMutex.Unlock()
	fake.DeleteSecurityGroupWithContextStub = stub
}

func (fake *FakeEC2API) DeleteSecurityGroupWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteSecurityGroupInput, []request.Option) {
	fake.deleteSecurityGroupWithContextMutex.RLock()
	defer fake.deleteSecurityGroupWithContextMutex.RUnlock()
	argsForCall := fake.deleteSecurityGroupWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteSecurityGroupWithContextReturns(result1 *ec2.DeleteSecurityGroupOutput, result2 error) {
	fake.deleteSecurityGroupWithContextMutex.Lock()
	defer fake.deleteSecurityGroupWithContextMutex.Unlock()
	fake.DeleteSecurityGroupWithContextStub = nil
	fake.deleteSecurityGroupWithContextReturns = struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSecurityGroupWithContextReturnsOnCall(i int, result1 *ec2.DeleteSecurityGroupOutput, result2 error) {
	fake.deleteSecurityGroupWithContextMutex.Lock()
	defer fake.deleteSecurityGroupWithContextMutex.Unlock()
	fake.DeleteSecurityGroupWithContextStub = nil
	if fake.deleteSecurityGroupWithContextReturnsOnCall == nil {
		fake.deleteSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSnapshot(arg1 *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	fake.deleteSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotReturnsOnCall[len(fake.deleteSnapshotArgsForCall)]
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		arg1 *ec2.DeleteSnapshotInput
	}{arg1})
	fake.recordInvocation("DeleteSnapshot", []interface{}{arg1})
	fake.deleteSnapshotMutex.Unlock()
	if fake.DeleteSnapshotStub != nil {
		return fake.DeleteSnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeEC2API) DeleteSnapshotCalls(stub func(*ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error)) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = stub
}

func (fake *FakeEC2API) DeleteSnapshotArgsForCall(i int) *ec2.DeleteSnapshotInput {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	argsForCall := fake.deleteSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSnapshotReturns(result1 *ec2.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSnapshotReturnsOnCall(i int, result1 *ec2.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotMutex.Lock()
	defer fake.deleteSnapshotMutex.Unlock()
	fake.DeleteSnapshotStub = nil
	if fake.deleteSnapshotReturnsOnCall == nil {
		fake.deleteSnapshotReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSnapshotOutput
			result2 error
		})
	}
	fake.deleteSnapshotReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSnapshotRequest(arg1 *ec2.DeleteSnapshotInput) (*request.Request, *ec2.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotRequestReturnsOnCall[len(fake.deleteSnapshotRequestArgsForCall)]
	fake.deleteSnapshotRequestArgsForCall = append(fake.deleteSnapshotRequestArgsForCall, struct {
		arg1 *ec2.DeleteSnapshotInput
	}{arg1})
	fake.recordInvocation("DeleteSnapshotRequest", []interface{}{arg1})
	fake.deleteSnapshotRequestMutex.Unlock()
	if fake.DeleteSnapshotRequestStub != nil {
		return fake.DeleteSnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSnapshotRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSnapshotRequestCallCount() int {
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	return len(fake.deleteSnapshotRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteSnapshotRequestCalls(stub func(*ec2.DeleteSnapshotInput) (*request.Request, *ec2.DeleteSnapshotOutput)) {
	fake.deleteSnapshotRequestMutex.Lock()
	defer fake.deleteSnapshotRequestMutex.Unlock()
	fake.DeleteSnapshotRequestStub = stub
}

func (fake *FakeEC2API) DeleteSnapshotRequestArgsForCall(i int) *ec2.DeleteSnapshotInput {
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	argsForCall := fake.deleteSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSnapshotRequestReturns(result1 *request.Request, result2 *ec2.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	defer fake.deleteSnapshotRequestMutex.Unlock()
	fake.DeleteSnapshotRequestStub = nil
	fake.deleteSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteSnapshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	defer fake.deleteSnapshotRequestMutex.Unlock()
	fake.DeleteSnapshotRequestStub = nil
	if fake.deleteSnapshotRequestReturnsOnCall == nil {
		fake.deleteSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteSnapshotOutput
		})
	}
	fake.deleteSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteSnapshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSnapshotWithContext(arg1 aws.Context, arg2 *ec2.DeleteSnapshotInput, arg3 ...request.Option) (*ec2.DeleteSnapshotOutput, error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotWithContextReturnsOnCall[len(fake.deleteSnapshotWithContextArgsForCall)]
	fake.deleteSnapshotWithContextArgsForCall = append(fake.deleteSnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSnapshotWithContextMutex.Unlock()
	if fake.DeleteSnapshotWithContextStub != nil {
		return fake.DeleteSnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSnapshotWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSnapshotWithContextCallCount() int {
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	return len(fake.deleteSnapshotWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteSnapshotWithContextCalls(stub func(aws.Context, *ec2.DeleteSnapshotInput, ...request.Option) (*ec2.DeleteSnapshotOutput, error)) {
	fake.deleteSnapshotWithContextMutex.Lock()
	defer fake.deleteSnapshotWithContextMutex.Unlock()
	fake.DeleteSnapshotWithContextStub = stub
}

func (fake *FakeEC2API) DeleteSnapshotWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteSnapshotInput, []request.Option) {
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.deleteSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteSnapshotWithContextReturns(result1 *ec2.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	defer fake.deleteSnapshotWithContextMutex.Unlock()
	fake.DeleteSnapshotWithContextStub = nil
	fake.deleteSnapshotWithContextReturns = struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSnapshotWithContextReturnsOnCall(i int, result1 *ec2.DeleteSnapshotOutput, result2 error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	defer fake.deleteSnapshotWithContextMutex.Unlock()
	fake.DeleteSnapshotWithContextStub = nil
	if fake.deleteSnapshotWithContextReturnsOnCall == nil {
		fake.deleteSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSnapshotOutput
			result2 error
		})
	}
	fake.deleteSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscription(arg1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	fake.deleteSpotDatafeedSubscriptionMutex.Lock()
	ret, specificReturn := fake.deleteSpotDatafeedSubscriptionReturnsOnCall[len(fake.deleteSpotDatafeedSubscriptionArgsForCall)]
	fake.deleteSpotDatafeedSubscriptionArgsForCall = append(fake.deleteSpotDatafeedSubscriptionArgsForCall, struct {
		arg1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}{arg1})
	fake.recordInvocation("DeleteSpotDatafeedSubscription", []interface{}{arg1})
	fake.deleteSpotDatafeedSubscriptionMutex.Unlock()
	if fake.DeleteSpotDatafeedSubscriptionStub != nil {
		return fake.DeleteSpotDatafeedSubscriptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSpotDatafeedSubscriptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionCallCount() int {
	fake.deleteSpotDatafeedSubscriptionMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionMutex.RUnlock()
	return len(fake.deleteSpotDatafeedSubscriptionArgsForCall)
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionCalls(stub func(*ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)) {
	fake.deleteSpotDatafeedSubscriptionMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionStub = stub
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionArgsForCall(i int) *ec2.DeleteSpotDatafeedSubscriptionInput {
	fake.deleteSpotDatafeedSubscriptionMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionMutex.RUnlock()
	argsForCall := fake.deleteSpotDatafeedSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionReturns(result1 *ec2.DeleteSpotDatafeedSubscriptionOutput, result2 error) {
	fake.deleteSpotDatafeedSubscriptionMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionStub = nil
	fake.deleteSpotDatafeedSubscriptionReturns = struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionReturnsOnCall(i int, result1 *ec2.DeleteSpotDatafeedSubscriptionOutput, result2 error) {
	fake.deleteSpotDatafeedSubscriptionMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionStub = nil
	if fake.deleteSpotDatafeedSubscriptionReturnsOnCall == nil {
		fake.deleteSpotDatafeedSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
			result2 error
		})
	}
	fake.deleteSpotDatafeedSubscriptionReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionRequest(arg1 *ec2.DeleteSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	fake.deleteSpotDatafeedSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.deleteSpotDatafeedSubscriptionRequestReturnsOnCall[len(fake.deleteSpotDatafeedSubscriptionRequestArgsForCall)]
	fake.deleteSpotDatafeedSubscriptionRequestArgsForCall = append(fake.deleteSpotDatafeedSubscriptionRequestArgsForCall, struct {
		arg1 *ec2.DeleteSpotDatafeedSubscriptionInput
	}{arg1})
	fake.recordInvocation("DeleteSpotDatafeedSubscriptionRequest", []interface{}{arg1})
	fake.deleteSpotDatafeedSubscriptionRequestMutex.Unlock()
	if fake.DeleteSpotDatafeedSubscriptionRequestStub != nil {
		return fake.DeleteSpotDatafeedSubscriptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSpotDatafeedSubscriptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionRequestCallCount() int {
	fake.deleteSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionRequestMutex.RUnlock()
	return len(fake.deleteSpotDatafeedSubscriptionRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionRequestCalls(stub func(*ec2.DeleteSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DeleteSpotDatafeedSubscriptionOutput)) {
	fake.deleteSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionRequestStub = stub
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionRequestArgsForCall(i int) *ec2.DeleteSpotDatafeedSubscriptionInput {
	fake.deleteSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.deleteSpotDatafeedSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionRequestReturns(result1 *request.Request, result2 *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	fake.deleteSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionRequestStub = nil
	fake.deleteSpotDatafeedSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteSpotDatafeedSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	fake.deleteSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionRequestStub = nil
	if fake.deleteSpotDatafeedSubscriptionRequestReturnsOnCall == nil {
		fake.deleteSpotDatafeedSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteSpotDatafeedSubscriptionOutput
		})
	}
	fake.deleteSpotDatafeedSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteSpotDatafeedSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionWithContext(arg1 aws.Context, arg2 *ec2.DeleteSpotDatafeedSubscriptionInput, arg3 ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSpotDatafeedSubscriptionWithContextReturnsOnCall[len(fake.deleteSpotDatafeedSubscriptionWithContextArgsForCall)]
	fake.deleteSpotDatafeedSubscriptionWithContextArgsForCall = append(fake.deleteSpotDatafeedSubscriptionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSpotDatafeedSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSpotDatafeedSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.Unlock()
	if fake.DeleteSpotDatafeedSubscriptionWithContextStub != nil {
		return fake.DeleteSpotDatafeedSubscriptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSpotDatafeedSubscriptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionWithContextCallCount() int {
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	return len(fake.deleteSpotDatafeedSubscriptionWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionWithContextCalls(stub func(aws.Context, *ec2.DeleteSpotDatafeedSubscriptionInput, ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)) {
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionWithContextStub = stub
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteSpotDatafeedSubscriptionInput, []request.Option) {
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.deleteSpotDatafeedSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionWithContextReturns(result1 *ec2.DeleteSpotDatafeedSubscriptionOutput, result2 error) {
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionWithContextStub = nil
	fake.deleteSpotDatafeedSubscriptionWithContextReturns = struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSpotDatafeedSubscriptionWithContextReturnsOnCall(i int, result1 *ec2.DeleteSpotDatafeedSubscriptionOutput, result2 error) {
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.deleteSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.DeleteSpotDatafeedSubscriptionWithContextStub = nil
	if fake.deleteSpotDatafeedSubscriptionWithContextReturnsOnCall == nil {
		fake.deleteSpotDatafeedSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
			result2 error
		})
	}
	fake.deleteSpotDatafeedSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSubnet(arg1 *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	fake.deleteSubnetMutex.Lock()
	ret, specificReturn := fake.deleteSubnetReturnsOnCall[len(fake.deleteSubnetArgsForCall)]
	fake.deleteSubnetArgsForCall = append(fake.deleteSubnetArgsForCall, struct {
		arg1 *ec2.DeleteSubnetInput
	}{arg1})
	fake.recordInvocation("DeleteSubnet", []interface{}{arg1})
	fake.deleteSubnetMutex.Unlock()
	if fake.DeleteSubnetStub != nil {
		return fake.DeleteSubnetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSubnetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSubnetCallCount() int {
	fake.deleteSubnetMutex.RLock()
	defer fake.deleteSubnetMutex.RUnlock()
	return len(fake.deleteSubnetArgsForCall)
}

func (fake *FakeEC2API) DeleteSubnetCalls(stub func(*ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error)) {
	fake.deleteSubnetMutex.Lock()
	defer fake.deleteSubnetMutex.Unlock()
	fake.DeleteSubnetStub = stub
}

func (fake *FakeEC2API) DeleteSubnetArgsForCall(i int) *ec2.DeleteSubnetInput {
	fake.deleteSubnetMutex.RLock()
	defer fake.deleteSubnetMutex.RUnlock()
	argsForCall := fake.deleteSubnetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSubnetReturns(result1 *ec2.DeleteSubnetOutput, result2 error) {
	fake.deleteSubnetMutex.Lock()
	defer fake.deleteSubnetMutex.Unlock()
	fake.DeleteSubnetStub = nil
	fake.deleteSubnetReturns = struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSubnetReturnsOnCall(i int, result1 *ec2.DeleteSubnetOutput, result2 error) {
	fake.deleteSubnetMutex.Lock()
	defer fake.deleteSubnetMutex.Unlock()
	fake.DeleteSubnetStub = nil
	if fake.deleteSubnetReturnsOnCall == nil {
		fake.deleteSubnetReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSubnetOutput
			result2 error
		})
	}
	fake.deleteSubnetReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSubnetRequest(arg1 *ec2.DeleteSubnetInput) (*request.Request, *ec2.DeleteSubnetOutput) {
	fake.deleteSubnetRequestMutex.Lock()
	ret, specificReturn := fake.deleteSubnetRequestReturnsOnCall[len(fake.deleteSubnetRequestArgsForCall)]
	fake.deleteSubnetRequestArgsForCall = append(fake.deleteSubnetRequestArgsForCall, struct {
		arg1 *ec2.DeleteSubnetInput
	}{arg1})
	fake.recordInvocation("DeleteSubnetRequest", []interface{}{arg1})
	fake.deleteSubnetRequestMutex.Unlock()
	if fake.DeleteSubnetRequestStub != nil {
		return fake.DeleteSubnetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSubnetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSubnetRequestCallCount() int {
	fake.deleteSubnetRequestMutex.RLock()
	defer fake.deleteSubnetRequestMutex.RUnlock()
	return len(fake.deleteSubnetRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteSubnetRequestCalls(stub func(*ec2.DeleteSubnetInput) (*request.Request, *ec2.DeleteSubnetOutput)) {
	fake.deleteSubnetRequestMutex.Lock()
	defer fake.deleteSubnetRequestMutex.Unlock()
	fake.DeleteSubnetRequestStub = stub
}

func (fake *FakeEC2API) DeleteSubnetRequestArgsForCall(i int) *ec2.DeleteSubnetInput {
	fake.deleteSubnetRequestMutex.RLock()
	defer fake.deleteSubnetRequestMutex.RUnlock()
	argsForCall := fake.deleteSubnetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteSubnetRequestReturns(result1 *request.Request, result2 *ec2.DeleteSubnetOutput) {
	fake.deleteSubnetRequestMutex.Lock()
	defer fake.deleteSubnetRequestMutex.Unlock()
	fake.DeleteSubnetRequestStub = nil
	fake.deleteSubnetRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteSubnetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSubnetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteSubnetOutput) {
	fake.deleteSubnetRequestMutex.Lock()
	defer fake.deleteSubnetRequestMutex.Unlock()
	fake.DeleteSubnetRequestStub = nil
	if fake.deleteSubnetRequestReturnsOnCall == nil {
		fake.deleteSubnetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteSubnetOutput
		})
	}
	fake.deleteSubnetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteSubnetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSubnetWithContext(arg1 aws.Context, arg2 *ec2.DeleteSubnetInput, arg3 ...request.Option) (*ec2.DeleteSubnetOutput, error) {
	fake.deleteSubnetWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSubnetWithContextReturnsOnCall[len(fake.deleteSubnetWithContextArgsForCall)]
	fake.deleteSubnetWithContextArgsForCall = append(fake.deleteSubnetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteSubnetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSubnetWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSubnetWithContextMutex.Unlock()
	if fake.DeleteSubnetWithContextStub != nil {
		return fake.DeleteSubnetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteSubnetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteSubnetWithContextCallCount() int {
	fake.deleteSubnetWithContextMutex.RLock()
	defer fake.deleteSubnetWithContextMutex.RUnlock()
	return len(fake.deleteSubnetWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteSubnetWithContextCalls(stub func(aws.Context, *ec2.DeleteSubnetInput, ...request.Option) (*ec2.DeleteSubnetOutput, error)) {
	fake.deleteSubnetWithContextMutex.Lock()
	defer fake.deleteSubnetWithContextMutex.Unlock()
	fake.DeleteSubnetWithContextStub = stub
}

func (fake *FakeEC2API) DeleteSubnetWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteSubnetInput, []request.Option) {
	fake.deleteSubnetWithContextMutex.RLock()
	defer fake.deleteSubnetWithContextMutex.RUnlock()
	argsForCall := fake.deleteSubnetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteSubnetWithContextReturns(result1 *ec2.DeleteSubnetOutput, result2 error) {
	fake.deleteSubnetWithContextMutex.Lock()
	defer fake.deleteSubnetWithContextMutex.Unlock()
	fake.DeleteSubnetWithContextStub = nil
	fake.deleteSubnetWithContextReturns = struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteSubnetWithContextReturnsOnCall(i int, result1 *ec2.DeleteSubnetOutput, result2 error) {
	fake.deleteSubnetWithContextMutex.Lock()
	defer fake.deleteSubnetWithContextMutex.Unlock()
	fake.DeleteSubnetWithContextStub = nil
	if fake.deleteSubnetWithContextReturnsOnCall == nil {
		fake.deleteSubnetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteSubnetOutput
			result2 error
		})
	}
	fake.deleteSubnetWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteSubnetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTags(arg1 *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	fake.deleteTagsMutex.Lock()
	ret, specificReturn := fake.deleteTagsReturnsOnCall[len(fake.deleteTagsArgsForCall)]
	fake.deleteTagsArgsForCall = append(fake.deleteTagsArgsForCall, struct {
		arg1 *ec2.DeleteTagsInput
	}{arg1})
	fake.recordInvocation("DeleteTags", []interface{}{arg1})
	fake.deleteTagsMutex.Unlock()
	if fake.DeleteTagsStub != nil {
		return fake.DeleteTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTagsCallCount() int {
	fake.deleteTagsMutex.RLock()
	defer fake.deleteTagsMutex.RUnlock()
	return len(fake.deleteTagsArgsForCall)
}

func (fake *FakeEC2API) DeleteTagsCalls(stub func(*ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error)) {
	fake.deleteTagsMutex.Lock()
	defer fake.deleteTagsMutex.Unlock()
	fake.DeleteTagsStub = stub
}

func (fake *FakeEC2API) DeleteTagsArgsForCall(i int) *ec2.DeleteTagsInput {
	fake.deleteTagsMutex.RLock()
	defer fake.deleteTagsMutex.RUnlock()
	argsForCall := fake.deleteTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTagsReturns(result1 *ec2.DeleteTagsOutput, result2 error) {
	fake.deleteTagsMutex.Lock()
	defer fake.deleteTagsMutex.Unlock()
	fake.DeleteTagsStub = nil
	fake.deleteTagsReturns = struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTagsReturnsOnCall(i int, result1 *ec2.DeleteTagsOutput, result2 error) {
	fake.deleteTagsMutex.Lock()
	defer fake.deleteTagsMutex.Unlock()
	fake.DeleteTagsStub = nil
	if fake.deleteTagsReturnsOnCall == nil {
		fake.deleteTagsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTagsOutput
			result2 error
		})
	}
	fake.deleteTagsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTagsRequest(arg1 *ec2.DeleteTagsInput) (*request.Request, *ec2.DeleteTagsOutput) {
	fake.deleteTagsRequestMutex.Lock()
	ret, specificReturn := fake.deleteTagsRequestReturnsOnCall[len(fake.deleteTagsRequestArgsForCall)]
	fake.deleteTagsRequestArgsForCall = append(fake.deleteTagsRequestArgsForCall, struct {
		arg1 *ec2.DeleteTagsInput
	}{arg1})
	fake.recordInvocation("DeleteTagsRequest", []interface{}{arg1})
	fake.deleteTagsRequestMutex.Unlock()
	if fake.DeleteTagsRequestStub != nil {
		return fake.DeleteTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTagsRequestCallCount() int {
	fake.deleteTagsRequestMutex.RLock()
	defer fake.deleteTagsRequestMutex.RUnlock()
	return len(fake.deleteTagsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteTagsRequestCalls(stub func(*ec2.DeleteTagsInput) (*request.Request, *ec2.DeleteTagsOutput)) {
	fake.deleteTagsRequestMutex.Lock()
	defer fake.deleteTagsRequestMutex.Unlock()
	fake.DeleteTagsRequestStub = stub
}

func (fake *FakeEC2API) DeleteTagsRequestArgsForCall(i int) *ec2.DeleteTagsInput {
	fake.deleteTagsRequestMutex.RLock()
	defer fake.deleteTagsRequestMutex.RUnlock()
	argsForCall := fake.deleteTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTagsRequestReturns(result1 *request.Request, result2 *ec2.DeleteTagsOutput) {
	fake.deleteTagsRequestMutex.Lock()
	defer fake.deleteTagsRequestMutex.Unlock()
	fake.DeleteTagsRequestStub = nil
	fake.deleteTagsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteTagsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteTagsOutput) {
	fake.deleteTagsRequestMutex.Lock()
	defer fake.deleteTagsRequestMutex.Unlock()
	fake.DeleteTagsRequestStub = nil
	if fake.deleteTagsRequestReturnsOnCall == nil {
		fake.deleteTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteTagsOutput
		})
	}
	fake.deleteTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteTagsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTagsWithContext(arg1 aws.Context, arg2 *ec2.DeleteTagsInput, arg3 ...request.Option) (*ec2.DeleteTagsOutput, error) {
	fake.deleteTagsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTagsWithContextReturnsOnCall[len(fake.deleteTagsWithContextArgsForCall)]
	fake.deleteTagsWithContextArgsForCall = append(fake.deleteTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTagsWithContextMutex.Unlock()
	if fake.DeleteTagsWithContextStub != nil {
		return fake.DeleteTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTagsWithContextCallCount() int {
	fake.deleteTagsWithContextMutex.RLock()
	defer fake.deleteTagsWithContextMutex.RUnlock()
	return len(fake.deleteTagsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteTagsWithContextCalls(stub func(aws.Context, *ec2.DeleteTagsInput, ...request.Option) (*ec2.DeleteTagsOutput, error)) {
	fake.deleteTagsWithContextMutex.Lock()
	defer fake.deleteTagsWithContextMutex.Unlock()
	fake.DeleteTagsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteTagsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteTagsInput, []request.Option) {
	fake.deleteTagsWithContextMutex.RLock()
	defer fake.deleteTagsWithContextMutex.RUnlock()
	argsForCall := fake.deleteTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteTagsWithContextReturns(result1 *ec2.DeleteTagsOutput, result2 error) {
	fake.deleteTagsWithContextMutex.Lock()
	defer fake.deleteTagsWithContextMutex.Unlock()
	fake.DeleteTagsWithContextStub = nil
	fake.deleteTagsWithContextReturns = struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTagsWithContextReturnsOnCall(i int, result1 *ec2.DeleteTagsOutput, result2 error) {
	fake.deleteTagsWithContextMutex.Lock()
	defer fake.deleteTagsWithContextMutex.Unlock()
	fake.DeleteTagsWithContextStub = nil
	if fake.deleteTagsWithContextReturnsOnCall == nil {
		fake.deleteTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTagsOutput
			result2 error
		})
	}
	fake.deleteTagsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGateway(arg1 *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error) {
	fake.deleteTransitGatewayMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayReturnsOnCall[len(fake.deleteTransitGatewayArgsForCall)]
	fake.deleteTransitGatewayArgsForCall = append(fake.deleteTransitGatewayArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGateway", []interface{}{arg1})
	fake.deleteTransitGatewayMutex.Unlock()
	if fake.DeleteTransitGatewayStub != nil {
		return fake.DeleteTransitGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayCallCount() int {
	fake.deleteTransitGatewayMutex.RLock()
	defer fake.deleteTransitGatewayMutex.RUnlock()
	return len(fake.deleteTransitGatewayArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayCalls(stub func(*ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error)) {
	fake.deleteTransitGatewayMutex.Lock()
	defer fake.deleteTransitGatewayMutex.Unlock()
	fake.DeleteTransitGatewayStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayArgsForCall(i int) *ec2.DeleteTransitGatewayInput {
	fake.deleteTransitGatewayMutex.RLock()
	defer fake.deleteTransitGatewayMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayReturns(result1 *ec2.DeleteTransitGatewayOutput, result2 error) {
	fake.deleteTransitGatewayMutex.Lock()
	defer fake.deleteTransitGatewayMutex.Unlock()
	fake.DeleteTransitGatewayStub = nil
	fake.deleteTransitGatewayReturns = struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayOutput, result2 error) {
	fake.deleteTransitGatewayMutex.Lock()
	defer fake.deleteTransitGatewayMutex.Unlock()
	fake.DeleteTransitGatewayStub = nil
	if fake.deleteTransitGatewayReturnsOnCall == nil {
		fake.deleteTransitGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRequest(arg1 *ec2.DeleteTransitGatewayInput) (*request.Request, *ec2.DeleteTransitGatewayOutput) {
	fake.deleteTransitGatewayRequestMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRequestReturnsOnCall[len(fake.deleteTransitGatewayRequestArgsForCall)]
	fake.deleteTransitGatewayRequestArgsForCall = append(fake.deleteTransitGatewayRequestArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayRequest", []interface{}{arg1})
	fake.deleteTransitGatewayRequestMutex.Unlock()
	if fake.DeleteTransitGatewayRequestStub != nil {
		return fake.DeleteTransitGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRequestCallCount() int {
	fake.deleteTransitGatewayRequestMutex.RLock()
	defer fake.deleteTransitGatewayRequestMutex.RUnlock()
	return len(fake.deleteTransitGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRequestCalls(stub func(*ec2.DeleteTransitGatewayInput) (*request.Request, *ec2.DeleteTransitGatewayOutput)) {
	fake.deleteTransitGatewayRequestMutex.Lock()
	defer fake.deleteTransitGatewayRequestMutex.Unlock()
	fake.DeleteTransitGatewayRequestStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRequestArgsForCall(i int) *ec2.DeleteTransitGatewayInput {
	fake.deleteTransitGatewayRequestMutex.RLock()
	defer fake.deleteTransitGatewayRequestMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayRequestReturns(result1 *request.Request, result2 *ec2.DeleteTransitGatewayOutput) {
	fake.deleteTransitGatewayRequestMutex.Lock()
	defer fake.deleteTransitGatewayRequestMutex.Unlock()
	fake.DeleteTransitGatewayRequestStub = nil
	fake.deleteTransitGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteTransitGatewayOutput) {
	fake.deleteTransitGatewayRequestMutex.Lock()
	defer fake.deleteTransitGatewayRequestMutex.Unlock()
	fake.DeleteTransitGatewayRequestStub = nil
	if fake.deleteTransitGatewayRequestReturnsOnCall == nil {
		fake.deleteTransitGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteTransitGatewayOutput
		})
	}
	fake.deleteTransitGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRoute(arg1 *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	fake.deleteTransitGatewayRouteMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRouteReturnsOnCall[len(fake.deleteTransitGatewayRouteArgsForCall)]
	fake.deleteTransitGatewayRouteArgsForCall = append(fake.deleteTransitGatewayRouteArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayRouteInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayRoute", []interface{}{arg1})
	fake.deleteTransitGatewayRouteMutex.Unlock()
	if fake.DeleteTransitGatewayRouteStub != nil {
		return fake.DeleteTransitGatewayRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteCallCount() int {
	fake.deleteTransitGatewayRouteMutex.RLock()
	defer fake.deleteTransitGatewayRouteMutex.RUnlock()
	return len(fake.deleteTransitGatewayRouteArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteCalls(stub func(*ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error)) {
	fake.deleteTransitGatewayRouteMutex.Lock()
	defer fake.deleteTransitGatewayRouteMutex.Unlock()
	fake.DeleteTransitGatewayRouteStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteArgsForCall(i int) *ec2.DeleteTransitGatewayRouteInput {
	fake.deleteTransitGatewayRouteMutex.RLock()
	defer fake.deleteTransitGatewayRouteMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteReturns(result1 *ec2.DeleteTransitGatewayRouteOutput, result2 error) {
	fake.deleteTransitGatewayRouteMutex.Lock()
	defer fake.deleteTransitGatewayRouteMutex.Unlock()
	fake.DeleteTransitGatewayRouteStub = nil
	fake.deleteTransitGatewayRouteReturns = struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayRouteOutput, result2 error) {
	fake.deleteTransitGatewayRouteMutex.Lock()
	defer fake.deleteTransitGatewayRouteMutex.Unlock()
	fake.DeleteTransitGatewayRouteStub = nil
	if fake.deleteTransitGatewayRouteReturnsOnCall == nil {
		fake.deleteTransitGatewayRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayRouteOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayRouteReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteRequest(arg1 *ec2.DeleteTransitGatewayRouteInput) (*request.Request, *ec2.DeleteTransitGatewayRouteOutput) {
	fake.deleteTransitGatewayRouteRequestMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRouteRequestReturnsOnCall[len(fake.deleteTransitGatewayRouteRequestArgsForCall)]
	fake.deleteTransitGatewayRouteRequestArgsForCall = append(fake.deleteTransitGatewayRouteRequestArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayRouteInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayRouteRequest", []interface{}{arg1})
	fake.deleteTransitGatewayRouteRequestMutex.Unlock()
	if fake.DeleteTransitGatewayRouteRequestStub != nil {
		return fake.DeleteTransitGatewayRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteRequestCallCount() int {
	fake.deleteTransitGatewayRouteRequestMutex.RLock()
	defer fake.deleteTransitGatewayRouteRequestMutex.RUnlock()
	return len(fake.deleteTransitGatewayRouteRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteRequestCalls(stub func(*ec2.DeleteTransitGatewayRouteInput) (*request.Request, *ec2.DeleteTransitGatewayRouteOutput)) {
	fake.deleteTransitGatewayRouteRequestMutex.Lock()
	defer fake.deleteTransitGatewayRouteRequestMutex.Unlock()
	fake.DeleteTransitGatewayRouteRequestStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteRequestArgsForCall(i int) *ec2.DeleteTransitGatewayRouteInput {
	fake.deleteTransitGatewayRouteRequestMutex.RLock()
	defer fake.deleteTransitGatewayRouteRequestMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteRequestReturns(result1 *request.Request, result2 *ec2.DeleteTransitGatewayRouteOutput) {
	fake.deleteTransitGatewayRouteRequestMutex.Lock()
	defer fake.deleteTransitGatewayRouteRequestMutex.Unlock()
	fake.DeleteTransitGatewayRouteRequestStub = nil
	fake.deleteTransitGatewayRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteTransitGatewayRouteOutput) {
	fake.deleteTransitGatewayRouteRequestMutex.Lock()
	defer fake.deleteTransitGatewayRouteRequestMutex.Unlock()
	fake.DeleteTransitGatewayRouteRequestStub = nil
	if fake.deleteTransitGatewayRouteRequestReturnsOnCall == nil {
		fake.deleteTransitGatewayRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteTransitGatewayRouteOutput
		})
	}
	fake.deleteTransitGatewayRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTable(arg1 *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	fake.deleteTransitGatewayRouteTableMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRouteTableReturnsOnCall[len(fake.deleteTransitGatewayRouteTableArgsForCall)]
	fake.deleteTransitGatewayRouteTableArgsForCall = append(fake.deleteTransitGatewayRouteTableArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayRouteTable", []interface{}{arg1})
	fake.deleteTransitGatewayRouteTableMutex.Unlock()
	if fake.DeleteTransitGatewayRouteTableStub != nil {
		return fake.DeleteTransitGatewayRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableCallCount() int {
	fake.deleteTransitGatewayRouteTableMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableMutex.RUnlock()
	return len(fake.deleteTransitGatewayRouteTableArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableCalls(stub func(*ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error)) {
	fake.deleteTransitGatewayRouteTableMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableArgsForCall(i int) *ec2.DeleteTransitGatewayRouteTableInput {
	fake.deleteTransitGatewayRouteTableMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableReturns(result1 *ec2.DeleteTransitGatewayRouteTableOutput, result2 error) {
	fake.deleteTransitGatewayRouteTableMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableStub = nil
	fake.deleteTransitGatewayRouteTableReturns = struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayRouteTableOutput, result2 error) {
	fake.deleteTransitGatewayRouteTableMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableStub = nil
	if fake.deleteTransitGatewayRouteTableReturnsOnCall == nil {
		fake.deleteTransitGatewayRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableRequest(arg1 *ec2.DeleteTransitGatewayRouteTableInput) (*request.Request, *ec2.DeleteTransitGatewayRouteTableOutput) {
	fake.deleteTransitGatewayRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRouteTableRequestReturnsOnCall[len(fake.deleteTransitGatewayRouteTableRequestArgsForCall)]
	fake.deleteTransitGatewayRouteTableRequestArgsForCall = append(fake.deleteTransitGatewayRouteTableRequestArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayRouteTableRequest", []interface{}{arg1})
	fake.deleteTransitGatewayRouteTableRequestMutex.Unlock()
	if fake.DeleteTransitGatewayRouteTableRequestStub != nil {
		return fake.DeleteTransitGatewayRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableRequestCallCount() int {
	fake.deleteTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableRequestMutex.RUnlock()
	return len(fake.deleteTransitGatewayRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableRequestCalls(stub func(*ec2.DeleteTransitGatewayRouteTableInput) (*request.Request, *ec2.DeleteTransitGatewayRouteTableOutput)) {
	fake.deleteTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableRequestMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableRequestStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableRequestArgsForCall(i int) *ec2.DeleteTransitGatewayRouteTableInput {
	fake.deleteTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableRequestMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableRequestReturns(result1 *request.Request, result2 *ec2.DeleteTransitGatewayRouteTableOutput) {
	fake.deleteTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableRequestMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableRequestStub = nil
	fake.deleteTransitGatewayRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteTransitGatewayRouteTableOutput) {
	fake.deleteTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableRequestMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableRequestStub = nil
	if fake.deleteTransitGatewayRouteTableRequestReturnsOnCall == nil {
		fake.deleteTransitGatewayRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteTransitGatewayRouteTableOutput
		})
	}
	fake.deleteTransitGatewayRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableWithContext(arg1 aws.Context, arg2 *ec2.DeleteTransitGatewayRouteTableInput, arg3 ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	fake.deleteTransitGatewayRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRouteTableWithContextReturnsOnCall[len(fake.deleteTransitGatewayRouteTableWithContextArgsForCall)]
	fake.deleteTransitGatewayRouteTableWithContextArgsForCall = append(fake.deleteTransitGatewayRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTransitGatewayRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTransitGatewayRouteTableWithContextMutex.Unlock()
	if fake.DeleteTransitGatewayRouteTableWithContextStub != nil {
		return fake.DeleteTransitGatewayRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableWithContextCallCount() int {
	fake.deleteTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableWithContextMutex.RUnlock()
	return len(fake.deleteTransitGatewayRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableWithContextCalls(stub func(aws.Context, *ec2.DeleteTransitGatewayRouteTableInput, ...request.Option) (*ec2.DeleteTransitGatewayRouteTableOutput, error)) {
	fake.deleteTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteTransitGatewayRouteTableInput, []request.Option) {
	fake.deleteTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableWithContextReturns(result1 *ec2.DeleteTransitGatewayRouteTableOutput, result2 error) {
	fake.deleteTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableWithContextStub = nil
	fake.deleteTransitGatewayRouteTableWithContextReturns = struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteTableWithContextReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayRouteTableOutput, result2 error) {
	fake.deleteTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.deleteTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.DeleteTransitGatewayRouteTableWithContextStub = nil
	if fake.deleteTransitGatewayRouteTableWithContextReturnsOnCall == nil {
		fake.deleteTransitGatewayRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteWithContext(arg1 aws.Context, arg2 *ec2.DeleteTransitGatewayRouteInput, arg3 ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	fake.deleteTransitGatewayRouteWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayRouteWithContextReturnsOnCall[len(fake.deleteTransitGatewayRouteWithContextArgsForCall)]
	fake.deleteTransitGatewayRouteWithContextArgsForCall = append(fake.deleteTransitGatewayRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTransitGatewayRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTransitGatewayRouteWithContextMutex.Unlock()
	if fake.DeleteTransitGatewayRouteWithContextStub != nil {
		return fake.DeleteTransitGatewayRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteWithContextCallCount() int {
	fake.deleteTransitGatewayRouteWithContextMutex.RLock()
	defer fake.deleteTransitGatewayRouteWithContextMutex.RUnlock()
	return len(fake.deleteTransitGatewayRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteWithContextCalls(stub func(aws.Context, *ec2.DeleteTransitGatewayRouteInput, ...request.Option) (*ec2.DeleteTransitGatewayRouteOutput, error)) {
	fake.deleteTransitGatewayRouteWithContextMutex.Lock()
	defer fake.deleteTransitGatewayRouteWithContextMutex.Unlock()
	fake.DeleteTransitGatewayRouteWithContextStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteTransitGatewayRouteInput, []request.Option) {
	fake.deleteTransitGatewayRouteWithContextMutex.RLock()
	defer fake.deleteTransitGatewayRouteWithContextMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteWithContextReturns(result1 *ec2.DeleteTransitGatewayRouteOutput, result2 error) {
	fake.deleteTransitGatewayRouteWithContextMutex.Lock()
	defer fake.deleteTransitGatewayRouteWithContextMutex.Unlock()
	fake.DeleteTransitGatewayRouteWithContextStub = nil
	fake.deleteTransitGatewayRouteWithContextReturns = struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayRouteWithContextReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayRouteOutput, result2 error) {
	fake.deleteTransitGatewayRouteWithContextMutex.Lock()
	defer fake.deleteTransitGatewayRouteWithContextMutex.Unlock()
	fake.DeleteTransitGatewayRouteWithContextStub = nil
	if fake.deleteTransitGatewayRouteWithContextReturnsOnCall == nil {
		fake.deleteTransitGatewayRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayRouteOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachment(arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayVpcAttachmentReturnsOnCall[len(fake.deleteTransitGatewayVpcAttachmentArgsForCall)]
	fake.deleteTransitGatewayVpcAttachmentArgsForCall = append(fake.deleteTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.DeleteTransitGatewayVpcAttachmentStub != nil {
		return fake.DeleteTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentCallCount() int {
	fake.deleteTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.deleteTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentCalls(stub func(*ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.DeleteTransitGatewayVpcAttachmentInput {
	fake.deleteTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentReturns(result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentStub = nil
	fake.deleteTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.deleteTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentStub = nil
	if fake.deleteTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.deleteTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentRequest(arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayVpcAttachmentRequestReturnsOnCall[len(fake.deleteTransitGatewayVpcAttachmentRequestArgsForCall)]
	fake.deleteTransitGatewayVpcAttachmentRequestArgsForCall = append(fake.deleteTransitGatewayVpcAttachmentRequestArgsForCall, struct {
		arg1 *ec2.DeleteTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("DeleteTransitGatewayVpcAttachmentRequest", []interface{}{arg1})
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.Unlock()
	if fake.DeleteTransitGatewayVpcAttachmentRequestStub != nil {
		return fake.DeleteTransitGatewayVpcAttachmentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayVpcAttachmentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentRequestCallCount() int {
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	return len(fake.deleteTransitGatewayVpcAttachmentRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentRequestCalls(stub func(*ec2.DeleteTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.DeleteTransitGatewayVpcAttachmentOutput)) {
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentRequestStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentRequestArgsForCall(i int) *ec2.DeleteTransitGatewayVpcAttachmentInput {
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayVpcAttachmentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentRequestReturns(result1 *request.Request, result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentRequestStub = nil
	fake.deleteTransitGatewayVpcAttachmentRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentRequestStub = nil
	if fake.deleteTransitGatewayVpcAttachmentRequestReturnsOnCall == nil {
		fake.deleteTransitGatewayVpcAttachmentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		})
	}
	fake.deleteTransitGatewayVpcAttachmentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentWithContext(arg1 aws.Context, arg2 *ec2.DeleteTransitGatewayVpcAttachmentInput, arg3 ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayVpcAttachmentWithContextReturnsOnCall[len(fake.deleteTransitGatewayVpcAttachmentWithContextArgsForCall)]
	fake.deleteTransitGatewayVpcAttachmentWithContextArgsForCall = append(fake.deleteTransitGatewayVpcAttachmentWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTransitGatewayVpcAttachmentWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	if fake.DeleteTransitGatewayVpcAttachmentWithContextStub != nil {
		return fake.DeleteTransitGatewayVpcAttachmentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayVpcAttachmentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentWithContextCallCount() int {
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	return len(fake.deleteTransitGatewayVpcAttachmentWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentWithContextCalls(stub func(aws.Context, *ec2.DeleteTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)) {
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentWithContextStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteTransitGatewayVpcAttachmentInput, []request.Option) {
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayVpcAttachmentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentWithContextReturns(result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentWithContextStub = nil
	fake.deleteTransitGatewayVpcAttachmentWithContextReturns = struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayVpcAttachmentWithContextReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.deleteTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.DeleteTransitGatewayVpcAttachmentWithContextStub = nil
	if fake.deleteTransitGatewayVpcAttachmentWithContextReturnsOnCall == nil {
		fake.deleteTransitGatewayVpcAttachmentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayVpcAttachmentWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayWithContext(arg1 aws.Context, arg2 *ec2.DeleteTransitGatewayInput, arg3 ...request.Option) (*ec2.DeleteTransitGatewayOutput, error) {
	fake.deleteTransitGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTransitGatewayWithContextReturnsOnCall[len(fake.deleteTransitGatewayWithContextArgsForCall)]
	fake.deleteTransitGatewayWithContextArgsForCall = append(fake.deleteTransitGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteTransitGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTransitGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTransitGatewayWithContextMutex.Unlock()
	if fake.DeleteTransitGatewayWithContextStub != nil {
		return fake.DeleteTransitGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTransitGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteTransitGatewayWithContextCallCount() int {
	fake.deleteTransitGatewayWithContextMutex.RLock()
	defer fake.deleteTransitGatewayWithContextMutex.RUnlock()
	return len(fake.deleteTransitGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteTransitGatewayWithContextCalls(stub func(aws.Context, *ec2.DeleteTransitGatewayInput, ...request.Option) (*ec2.DeleteTransitGatewayOutput, error)) {
	fake.deleteTransitGatewayWithContextMutex.Lock()
	defer fake.deleteTransitGatewayWithContextMutex.Unlock()
	fake.DeleteTransitGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DeleteTransitGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteTransitGatewayInput, []request.Option) {
	fake.deleteTransitGatewayWithContextMutex.RLock()
	defer fake.deleteTransitGatewayWithContextMutex.RUnlock()
	argsForCall := fake.deleteTransitGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteTransitGatewayWithContextReturns(result1 *ec2.DeleteTransitGatewayOutput, result2 error) {
	fake.deleteTransitGatewayWithContextMutex.Lock()
	defer fake.deleteTransitGatewayWithContextMutex.Unlock()
	fake.DeleteTransitGatewayWithContextStub = nil
	fake.deleteTransitGatewayWithContextReturns = struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteTransitGatewayWithContextReturnsOnCall(i int, result1 *ec2.DeleteTransitGatewayOutput, result2 error) {
	fake.deleteTransitGatewayWithContextMutex.Lock()
	defer fake.deleteTransitGatewayWithContextMutex.Unlock()
	fake.DeleteTransitGatewayWithContextStub = nil
	if fake.deleteTransitGatewayWithContextReturnsOnCall == nil {
		fake.deleteTransitGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteTransitGatewayOutput
			result2 error
		})
	}
	fake.deleteTransitGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteTransitGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVolume(arg1 *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	fake.deleteVolumeMutex.Lock()
	ret, specificReturn := fake.deleteVolumeReturnsOnCall[len(fake.deleteVolumeArgsForCall)]
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		arg1 *ec2.DeleteVolumeInput
	}{arg1})
	fake.recordInvocation("DeleteVolume", []interface{}{arg1})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeEC2API) DeleteVolumeCalls(stub func(*ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error)) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = stub
}

func (fake *FakeEC2API) DeleteVolumeArgsForCall(i int) *ec2.DeleteVolumeInput {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	argsForCall := fake.deleteVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVolumeReturns(result1 *ec2.DeleteVolumeOutput, result2 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVolumeReturnsOnCall(i int, result1 *ec2.DeleteVolumeOutput, result2 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	if fake.deleteVolumeReturnsOnCall == nil {
		fake.deleteVolumeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVolumeOutput
			result2 error
		})
	}
	fake.deleteVolumeReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVolumeRequest(arg1 *ec2.DeleteVolumeInput) (*request.Request, *ec2.DeleteVolumeOutput) {
	fake.deleteVolumeRequestMutex.Lock()
	ret, specificReturn := fake.deleteVolumeRequestReturnsOnCall[len(fake.deleteVolumeRequestArgsForCall)]
	fake.deleteVolumeRequestArgsForCall = append(fake.deleteVolumeRequestArgsForCall, struct {
		arg1 *ec2.DeleteVolumeInput
	}{arg1})
	fake.recordInvocation("DeleteVolumeRequest", []interface{}{arg1})
	fake.deleteVolumeRequestMutex.Unlock()
	if fake.DeleteVolumeRequestStub != nil {
		return fake.DeleteVolumeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVolumeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVolumeRequestCallCount() int {
	fake.deleteVolumeRequestMutex.RLock()
	defer fake.deleteVolumeRequestMutex.RUnlock()
	return len(fake.deleteVolumeRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVolumeRequestCalls(stub func(*ec2.DeleteVolumeInput) (*request.Request, *ec2.DeleteVolumeOutput)) {
	fake.deleteVolumeRequestMutex.Lock()
	defer fake.deleteVolumeRequestMutex.Unlock()
	fake.DeleteVolumeRequestStub = stub
}

func (fake *FakeEC2API) DeleteVolumeRequestArgsForCall(i int) *ec2.DeleteVolumeInput {
	fake.deleteVolumeRequestMutex.RLock()
	defer fake.deleteVolumeRequestMutex.RUnlock()
	argsForCall := fake.deleteVolumeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVolumeRequestReturns(result1 *request.Request, result2 *ec2.DeleteVolumeOutput) {
	fake.deleteVolumeRequestMutex.Lock()
	defer fake.deleteVolumeRequestMutex.Unlock()
	fake.DeleteVolumeRequestStub = nil
	fake.deleteVolumeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVolumeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVolumeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVolumeOutput) {
	fake.deleteVolumeRequestMutex.Lock()
	defer fake.deleteVolumeRequestMutex.Unlock()
	fake.DeleteVolumeRequestStub = nil
	if fake.deleteVolumeRequestReturnsOnCall == nil {
		fake.deleteVolumeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVolumeOutput
		})
	}
	fake.deleteVolumeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVolumeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVolumeWithContext(arg1 aws.Context, arg2 *ec2.DeleteVolumeInput, arg3 ...request.Option) (*ec2.DeleteVolumeOutput, error) {
	fake.deleteVolumeWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVolumeWithContextReturnsOnCall[len(fake.deleteVolumeWithContextArgsForCall)]
	fake.deleteVolumeWithContextArgsForCall = append(fake.deleteVolumeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVolumeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVolumeWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVolumeWithContextMutex.Unlock()
	if fake.DeleteVolumeWithContextStub != nil {
		return fake.DeleteVolumeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVolumeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVolumeWithContextCallCount() int {
	fake.deleteVolumeWithContextMutex.RLock()
	defer fake.deleteVolumeWithContextMutex.RUnlock()
	return len(fake.deleteVolumeWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVolumeWithContextCalls(stub func(aws.Context, *ec2.DeleteVolumeInput, ...request.Option) (*ec2.DeleteVolumeOutput, error)) {
	fake.deleteVolumeWithContextMutex.Lock()
	defer fake.deleteVolumeWithContextMutex.Unlock()
	fake.DeleteVolumeWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVolumeWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVolumeInput, []request.Option) {
	fake.deleteVolumeWithContextMutex.RLock()
	defer fake.deleteVolumeWithContextMutex.RUnlock()
	argsForCall := fake.deleteVolumeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVolumeWithContextReturns(result1 *ec2.DeleteVolumeOutput, result2 error) {
	fake.deleteVolumeWithContextMutex.Lock()
	defer fake.deleteVolumeWithContextMutex.Unlock()
	fake.DeleteVolumeWithContextStub = nil
	fake.deleteVolumeWithContextReturns = struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVolumeWithContextReturnsOnCall(i int, result1 *ec2.DeleteVolumeOutput, result2 error) {
	fake.deleteVolumeWithContextMutex.Lock()
	defer fake.deleteVolumeWithContextMutex.Unlock()
	fake.DeleteVolumeWithContextStub = nil
	if fake.deleteVolumeWithContextReturnsOnCall == nil {
		fake.deleteVolumeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVolumeOutput
			result2 error
		})
	}
	fake.deleteVolumeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpc(arg1 *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
	fake.deleteVpcMutex.Lock()
	ret, specificReturn := fake.deleteVpcReturnsOnCall[len(fake.deleteVpcArgsForCall)]
	fake.deleteVpcArgsForCall = append(fake.deleteVpcArgsForCall, struct {
		arg1 *ec2.DeleteVpcInput
	}{arg1})
	fake.recordInvocation("DeleteVpc", []interface{}{arg1})
	fake.deleteVpcMutex.Unlock()
	if fake.DeleteVpcStub != nil {
		return fake.DeleteVpcStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcCallCount() int {
	fake.deleteVpcMutex.RLock()
	defer fake.deleteVpcMutex.RUnlock()
	return len(fake.deleteVpcArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcCalls(stub func(*ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error)) {
	fake.deleteVpcMutex.Lock()
	defer fake.deleteVpcMutex.Unlock()
	fake.DeleteVpcStub = stub
}

func (fake *FakeEC2API) DeleteVpcArgsForCall(i int) *ec2.DeleteVpcInput {
	fake.deleteVpcMutex.RLock()
	defer fake.deleteVpcMutex.RUnlock()
	argsForCall := fake.deleteVpcArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcReturns(result1 *ec2.DeleteVpcOutput, result2 error) {
	fake.deleteVpcMutex.Lock()
	defer fake.deleteVpcMutex.Unlock()
	fake.DeleteVpcStub = nil
	fake.deleteVpcReturns = struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcReturnsOnCall(i int, result1 *ec2.DeleteVpcOutput, result2 error) {
	fake.deleteVpcMutex.Lock()
	defer fake.deleteVpcMutex.Unlock()
	fake.DeleteVpcStub = nil
	if fake.deleteVpcReturnsOnCall == nil {
		fake.deleteVpcReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcOutput
			result2 error
		})
	}
	fake.deleteVpcReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotifications(arg1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	fake.deleteVpcEndpointConnectionNotificationsMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointConnectionNotificationsReturnsOnCall[len(fake.deleteVpcEndpointConnectionNotificationsArgsForCall)]
	fake.deleteVpcEndpointConnectionNotificationsArgsForCall = append(fake.deleteVpcEndpointConnectionNotificationsArgsForCall, struct {
		arg1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}{arg1})
	fake.recordInvocation("DeleteVpcEndpointConnectionNotifications", []interface{}{arg1})
	fake.deleteVpcEndpointConnectionNotificationsMutex.Unlock()
	if fake.DeleteVpcEndpointConnectionNotificationsStub != nil {
		return fake.DeleteVpcEndpointConnectionNotificationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointConnectionNotificationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsCallCount() int {
	fake.deleteVpcEndpointConnectionNotificationsMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsMutex.RUnlock()
	return len(fake.deleteVpcEndpointConnectionNotificationsArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsCalls(stub func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)) {
	fake.deleteVpcEndpointConnectionNotificationsMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsArgsForCall(i int) *ec2.DeleteVpcEndpointConnectionNotificationsInput {
	fake.deleteVpcEndpointConnectionNotificationsMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointConnectionNotificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsReturns(result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.deleteVpcEndpointConnectionNotificationsMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsStub = nil
	fake.deleteVpcEndpointConnectionNotificationsReturns = struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.deleteVpcEndpointConnectionNotificationsMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsStub = nil
	if fake.deleteVpcEndpointConnectionNotificationsReturnsOnCall == nil {
		fake.deleteVpcEndpointConnectionNotificationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointConnectionNotificationsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsRequest(arg1 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointConnectionNotificationsRequestReturnsOnCall[len(fake.deleteVpcEndpointConnectionNotificationsRequestArgsForCall)]
	fake.deleteVpcEndpointConnectionNotificationsRequestArgsForCall = append(fake.deleteVpcEndpointConnectionNotificationsRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpcEndpointConnectionNotificationsInput
	}{arg1})
	fake.recordInvocation("DeleteVpcEndpointConnectionNotificationsRequest", []interface{}{arg1})
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	if fake.DeleteVpcEndpointConnectionNotificationsRequestStub != nil {
		return fake.DeleteVpcEndpointConnectionNotificationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointConnectionNotificationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsRequestCallCount() int {
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsRequestMutex.RUnlock()
	return len(fake.deleteVpcEndpointConnectionNotificationsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsRequestCalls(stub func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DeleteVpcEndpointConnectionNotificationsOutput)) {
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsRequestArgsForCall(i int) *ec2.DeleteVpcEndpointConnectionNotificationsInput {
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsRequestMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointConnectionNotificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsRequestStub = nil
	fake.deleteVpcEndpointConnectionNotificationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsRequestStub = nil
	if fake.deleteVpcEndpointConnectionNotificationsRequestReturnsOnCall == nil {
		fake.deleteVpcEndpointConnectionNotificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		})
	}
	fake.deleteVpcEndpointConnectionNotificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpcEndpointConnectionNotificationsInput, arg3 ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointConnectionNotificationsWithContextReturnsOnCall[len(fake.deleteVpcEndpointConnectionNotificationsWithContextArgsForCall)]
	fake.deleteVpcEndpointConnectionNotificationsWithContextArgsForCall = append(fake.deleteVpcEndpointConnectionNotificationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcEndpointConnectionNotificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpcEndpointConnectionNotificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	if fake.DeleteVpcEndpointConnectionNotificationsWithContextStub != nil {
		return fake.DeleteVpcEndpointConnectionNotificationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointConnectionNotificationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsWithContextCallCount() int {
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.RUnlock()
	return len(fake.deleteVpcEndpointConnectionNotificationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsWithContextCalls(stub func(aws.Context, *ec2.DeleteVpcEndpointConnectionNotificationsInput, ...request.Option) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)) {
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpcEndpointConnectionNotificationsInput, []request.Option) {
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointConnectionNotificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsWithContextReturns(result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsWithContextStub = nil
	fake.deleteVpcEndpointConnectionNotificationsWithContextReturns = struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointConnectionNotificationsWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointConnectionNotificationsWithContextStub = nil
	if fake.deleteVpcEndpointConnectionNotificationsWithContextReturnsOnCall == nil {
		fake.deleteVpcEndpointConnectionNotificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointConnectionNotificationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurations(arg1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall[len(fake.deleteVpcEndpointServiceConfigurationsArgsForCall)]
	fake.deleteVpcEndpointServiceConfigurationsArgsForCall = append(fake.deleteVpcEndpointServiceConfigurationsArgsForCall, struct {
		arg1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}{arg1})
	fake.recordInvocation("DeleteVpcEndpointServiceConfigurations", []interface{}{arg1})
	fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	if fake.DeleteVpcEndpointServiceConfigurationsStub != nil {
		return fake.DeleteVpcEndpointServiceConfigurationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointServiceConfigurationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsCallCount() int {
	fake.deleteVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.RUnlock()
	return len(fake.deleteVpcEndpointServiceConfigurationsArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsCalls(stub func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsArgsForCall(i int) *ec2.DeleteVpcEndpointServiceConfigurationsInput {
	fake.deleteVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointServiceConfigurationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsReturns(result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsStub = nil
	fake.deleteVpcEndpointServiceConfigurationsReturns = struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsStub = nil
	if fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall == nil {
		fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsRequest(arg1 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointServiceConfigurationsRequestReturnsOnCall[len(fake.deleteVpcEndpointServiceConfigurationsRequestArgsForCall)]
	fake.deleteVpcEndpointServiceConfigurationsRequestArgsForCall = append(fake.deleteVpcEndpointServiceConfigurationsRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpcEndpointServiceConfigurationsInput
	}{arg1})
	fake.recordInvocation("DeleteVpcEndpointServiceConfigurationsRequest", []interface{}{arg1})
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	if fake.DeleteVpcEndpointServiceConfigurationsRequestStub != nil {
		return fake.DeleteVpcEndpointServiceConfigurationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointServiceConfigurationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsRequestCallCount() int {
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsRequestMutex.RUnlock()
	return len(fake.deleteVpcEndpointServiceConfigurationsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsRequestCalls(stub func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DeleteVpcEndpointServiceConfigurationsOutput)) {
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsRequestArgsForCall(i int) *ec2.DeleteVpcEndpointServiceConfigurationsInput {
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsRequestMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointServiceConfigurationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsRequestStub = nil
	fake.deleteVpcEndpointServiceConfigurationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsRequestStub = nil
	if fake.deleteVpcEndpointServiceConfigurationsRequestReturnsOnCall == nil {
		fake.deleteVpcEndpointServiceConfigurationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		})
	}
	fake.deleteVpcEndpointServiceConfigurationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpcEndpointServiceConfigurationsInput, arg3 ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointServiceConfigurationsWithContextReturnsOnCall[len(fake.deleteVpcEndpointServiceConfigurationsWithContextArgsForCall)]
	fake.deleteVpcEndpointServiceConfigurationsWithContextArgsForCall = append(fake.deleteVpcEndpointServiceConfigurationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpcEndpointServiceConfigurationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	if fake.DeleteVpcEndpointServiceConfigurationsWithContextStub != nil {
		return fake.DeleteVpcEndpointServiceConfigurationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointServiceConfigurationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsWithContextCallCount() int {
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.RUnlock()
	return len(fake.deleteVpcEndpointServiceConfigurationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsWithContextCalls(stub func(aws.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, ...request.Option) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)) {
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, []request.Option) {
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointServiceConfigurationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsWithContextReturns(result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsWithContextStub = nil
	fake.deleteVpcEndpointServiceConfigurationsWithContextReturns = struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsWithContextStub = nil
	if fake.deleteVpcEndpointServiceConfigurationsWithContextReturnsOnCall == nil {
		fake.deleteVpcEndpointServiceConfigurationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointServiceConfigurationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpoints(arg1 *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
	fake.deleteVpcEndpointsMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointsReturnsOnCall[len(fake.deleteVpcEndpointsArgsForCall)]
	fake.deleteVpcEndpointsArgsForCall = append(fake.deleteVpcEndpointsArgsForCall, struct {
		arg1 *ec2.DeleteVpcEndpointsInput
	}{arg1})
	fake.recordInvocation("DeleteVpcEndpoints", []interface{}{arg1})
	fake.deleteVpcEndpointsMutex.Unlock()
	if fake.DeleteVpcEndpointsStub != nil {
		return fake.DeleteVpcEndpointsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointsCallCount() int {
	fake.deleteVpcEndpointsMutex.RLock()
	defer fake.deleteVpcEndpointsMutex.RUnlock()
	return len(fake.deleteVpcEndpointsArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointsCalls(stub func(*ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error)) {
	fake.deleteVpcEndpointsMutex.Lock()
	defer fake.deleteVpcEndpointsMutex.Unlock()
	fake.DeleteVpcEndpointsStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointsArgsForCall(i int) *ec2.DeleteVpcEndpointsInput {
	fake.deleteVpcEndpointsMutex.RLock()
	defer fake.deleteVpcEndpointsMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcEndpointsReturns(result1 *ec2.DeleteVpcEndpointsOutput, result2 error) {
	fake.deleteVpcEndpointsMutex.Lock()
	defer fake.deleteVpcEndpointsMutex.Unlock()
	fake.DeleteVpcEndpointsStub = nil
	fake.deleteVpcEndpointsReturns = struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointsReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointsOutput, result2 error) {
	fake.deleteVpcEndpointsMutex.Lock()
	defer fake.deleteVpcEndpointsMutex.Unlock()
	fake.DeleteVpcEndpointsStub = nil
	if fake.deleteVpcEndpointsReturnsOnCall == nil {
		fake.deleteVpcEndpointsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointsRequest(arg1 *ec2.DeleteVpcEndpointsInput) (*request.Request, *ec2.DeleteVpcEndpointsOutput) {
	fake.deleteVpcEndpointsRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointsRequestReturnsOnCall[len(fake.deleteVpcEndpointsRequestArgsForCall)]
	fake.deleteVpcEndpointsRequestArgsForCall = append(fake.deleteVpcEndpointsRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpcEndpointsInput
	}{arg1})
	fake.recordInvocation("DeleteVpcEndpointsRequest", []interface{}{arg1})
	fake.deleteVpcEndpointsRequestMutex.Unlock()
	if fake.DeleteVpcEndpointsRequestStub != nil {
		return fake.DeleteVpcEndpointsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointsRequestCallCount() int {
	fake.deleteVpcEndpointsRequestMutex.RLock()
	defer fake.deleteVpcEndpointsRequestMutex.RUnlock()
	return len(fake.deleteVpcEndpointsRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointsRequestCalls(stub func(*ec2.DeleteVpcEndpointsInput) (*request.Request, *ec2.DeleteVpcEndpointsOutput)) {
	fake.deleteVpcEndpointsRequestMutex.Lock()
	defer fake.deleteVpcEndpointsRequestMutex.Unlock()
	fake.DeleteVpcEndpointsRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointsRequestArgsForCall(i int) *ec2.DeleteVpcEndpointsInput {
	fake.deleteVpcEndpointsRequestMutex.RLock()
	defer fake.deleteVpcEndpointsRequestMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcEndpointsRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpcEndpointsOutput) {
	fake.deleteVpcEndpointsRequestMutex.Lock()
	defer fake.deleteVpcEndpointsRequestMutex.Unlock()
	fake.DeleteVpcEndpointsRequestStub = nil
	fake.deleteVpcEndpointsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpcEndpointsOutput) {
	fake.deleteVpcEndpointsRequestMutex.Lock()
	defer fake.deleteVpcEndpointsRequestMutex.Unlock()
	fake.DeleteVpcEndpointsRequestStub = nil
	if fake.deleteVpcEndpointsRequestReturnsOnCall == nil {
		fake.deleteVpcEndpointsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpcEndpointsOutput
		})
	}
	fake.deleteVpcEndpointsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcEndpointsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointsWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpcEndpointsInput, arg3 ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error) {
	fake.deleteVpcEndpointsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointsWithContextReturnsOnCall[len(fake.deleteVpcEndpointsWithContextArgsForCall)]
	fake.deleteVpcEndpointsWithContextArgsForCall = append(fake.deleteVpcEndpointsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcEndpointsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpcEndpointsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpcEndpointsWithContextMutex.Unlock()
	if fake.DeleteVpcEndpointsWithContextStub != nil {
		return fake.DeleteVpcEndpointsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcEndpointsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointsWithContextCallCount() int {
	fake.deleteVpcEndpointsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointsWithContextMutex.RUnlock()
	return len(fake.deleteVpcEndpointsWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointsWithContextCalls(stub func(aws.Context, *ec2.DeleteVpcEndpointsInput, ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error)) {
	fake.deleteVpcEndpointsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointsWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointsWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpcEndpointsInput, []request.Option) {
	fake.deleteVpcEndpointsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointsWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpcEndpointsWithContextReturns(result1 *ec2.DeleteVpcEndpointsOutput, result2 error) {
	fake.deleteVpcEndpointsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointsWithContextStub = nil
	fake.deleteVpcEndpointsWithContextReturns = struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointsWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointsOutput, result2 error) {
	fake.deleteVpcEndpointsWithContextMutex.Lock()
	defer fake.deleteVpcEndpointsWithContextMutex.Unlock()
	fake.DeleteVpcEndpointsWithContextStub = nil
	if fake.deleteVpcEndpointsWithContextReturnsOnCall == nil {
		fake.deleteVpcEndpointsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcPeeringConnection(arg1 *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	fake.deleteVpcPeeringConnectionMutex.Lock()
	ret, specificReturn := fake.deleteVpcPeeringConnectionReturnsOnCall[len(fake.deleteVpcPeeringConnectionArgsForCall)]
	fake.deleteVpcPeeringConnectionArgsForCall = append(fake.deleteVpcPeeringConnectionArgsForCall, struct {
		arg1 *ec2.DeleteVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("DeleteVpcPeeringConnection", []interface{}{arg1})
	fake.deleteVpcPeeringConnectionMutex.Unlock()
	if fake.DeleteVpcPeeringConnectionStub != nil {
		return fake.DeleteVpcPeeringConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcPeeringConnectionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionCallCount() int {
	fake.deleteVpcPeeringConnectionMutex.RLock()
	defer fake.deleteVpcPeeringConnectionMutex.RUnlock()
	return len(fake.deleteVpcPeeringConnectionArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionCalls(stub func(*ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error)) {
	fake.deleteVpcPeeringConnectionMutex.Lock()
	defer fake.deleteVpcPeeringConnectionMutex.Unlock()
	fake.DeleteVpcPeeringConnectionStub = stub
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionArgsForCall(i int) *ec2.DeleteVpcPeeringConnectionInput {
	fake.deleteVpcPeeringConnectionMutex.RLock()
	defer fake.deleteVpcPeeringConnectionMutex.RUnlock()
	argsForCall := fake.deleteVpcPeeringConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionReturns(result1 *ec2.DeleteVpcPeeringConnectionOutput, result2 error) {
	fake.deleteVpcPeeringConnectionMutex.Lock()
	defer fake.deleteVpcPeeringConnectionMutex.Unlock()
	fake.DeleteVpcPeeringConnectionStub = nil
	fake.deleteVpcPeeringConnectionReturns = struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionReturnsOnCall(i int, result1 *ec2.DeleteVpcPeeringConnectionOutput, result2 error) {
	fake.deleteVpcPeeringConnectionMutex.Lock()
	defer fake.deleteVpcPeeringConnectionMutex.Unlock()
	fake.DeleteVpcPeeringConnectionStub = nil
	if fake.deleteVpcPeeringConnectionReturnsOnCall == nil {
		fake.deleteVpcPeeringConnectionReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.deleteVpcPeeringConnectionReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionRequest(arg1 *ec2.DeleteVpcPeeringConnectionInput) (*request.Request, *ec2.DeleteVpcPeeringConnectionOutput) {
	fake.deleteVpcPeeringConnectionRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpcPeeringConnectionRequestReturnsOnCall[len(fake.deleteVpcPeeringConnectionRequestArgsForCall)]
	fake.deleteVpcPeeringConnectionRequestArgsForCall = append(fake.deleteVpcPeeringConnectionRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("DeleteVpcPeeringConnectionRequest", []interface{}{arg1})
	fake.deleteVpcPeeringConnectionRequestMutex.Unlock()
	if fake.DeleteVpcPeeringConnectionRequestStub != nil {
		return fake.DeleteVpcPeeringConnectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcPeeringConnectionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionRequestCallCount() int {
	fake.deleteVpcPeeringConnectionRequestMutex.RLock()
	defer fake.deleteVpcPeeringConnectionRequestMutex.RUnlock()
	return len(fake.deleteVpcPeeringConnectionRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionRequestCalls(stub func(*ec2.DeleteVpcPeeringConnectionInput) (*request.Request, *ec2.DeleteVpcPeeringConnectionOutput)) {
	fake.deleteVpcPeeringConnectionRequestMutex.Lock()
	defer fake.deleteVpcPeeringConnectionRequestMutex.Unlock()
	fake.DeleteVpcPeeringConnectionRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionRequestArgsForCall(i int) *ec2.DeleteVpcPeeringConnectionInput {
	fake.deleteVpcPeeringConnectionRequestMutex.RLock()
	defer fake.deleteVpcPeeringConnectionRequestMutex.RUnlock()
	argsForCall := fake.deleteVpcPeeringConnectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpcPeeringConnectionOutput) {
	fake.deleteVpcPeeringConnectionRequestMutex.Lock()
	defer fake.deleteVpcPeeringConnectionRequestMutex.Unlock()
	fake.DeleteVpcPeeringConnectionRequestStub = nil
	fake.deleteVpcPeeringConnectionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpcPeeringConnectionOutput) {
	fake.deleteVpcPeeringConnectionRequestMutex.Lock()
	defer fake.deleteVpcPeeringConnectionRequestMutex.Unlock()
	fake.DeleteVpcPeeringConnectionRequestStub = nil
	if fake.deleteVpcPeeringConnectionRequestReturnsOnCall == nil {
		fake.deleteVpcPeeringConnectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpcPeeringConnectionOutput
		})
	}
	fake.deleteVpcPeeringConnectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpcPeeringConnectionInput, arg3 ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	fake.deleteVpcPeeringConnectionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpcPeeringConnectionWithContextReturnsOnCall[len(fake.deleteVpcPeeringConnectionWithContextArgsForCall)]
	fake.deleteVpcPeeringConnectionWithContextArgsForCall = append(fake.deleteVpcPeeringConnectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcPeeringConnectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpcPeeringConnectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpcPeeringConnectionWithContextMutex.Unlock()
	if fake.DeleteVpcPeeringConnectionWithContextStub != nil {
		return fake.DeleteVpcPeeringConnectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcPeeringConnectionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionWithContextCallCount() int {
	fake.deleteVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.deleteVpcPeeringConnectionWithContextMutex.RUnlock()
	return len(fake.deleteVpcPeeringConnectionWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionWithContextCalls(stub func(aws.Context, *ec2.DeleteVpcPeeringConnectionInput, ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error)) {
	fake.deleteVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.deleteVpcPeeringConnectionWithContextMutex.Unlock()
	fake.DeleteVpcPeeringConnectionWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpcPeeringConnectionInput, []request.Option) {
	fake.deleteVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.deleteVpcPeeringConnectionWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpcPeeringConnectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionWithContextReturns(result1 *ec2.DeleteVpcPeeringConnectionOutput, result2 error) {
	fake.deleteVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.deleteVpcPeeringConnectionWithContextMutex.Unlock()
	fake.DeleteVpcPeeringConnectionWithContextStub = nil
	fake.deleteVpcPeeringConnectionWithContextReturns = struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcPeeringConnectionWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpcPeeringConnectionOutput, result2 error) {
	fake.deleteVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.deleteVpcPeeringConnectionWithContextMutex.Unlock()
	fake.DeleteVpcPeeringConnectionWithContextStub = nil
	if fake.deleteVpcPeeringConnectionWithContextReturnsOnCall == nil {
		fake.deleteVpcPeeringConnectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.deleteVpcPeeringConnectionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcRequest(arg1 *ec2.DeleteVpcInput) (*request.Request, *ec2.DeleteVpcOutput) {
	fake.deleteVpcRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpcRequestReturnsOnCall[len(fake.deleteVpcRequestArgsForCall)]
	fake.deleteVpcRequestArgsForCall = append(fake.deleteVpcRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpcInput
	}{arg1})
	fake.recordInvocation("DeleteVpcRequest", []interface{}{arg1})
	fake.deleteVpcRequestMutex.Unlock()
	if fake.DeleteVpcRequestStub != nil {
		return fake.DeleteVpcRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcRequestCallCount() int {
	fake.deleteVpcRequestMutex.RLock()
	defer fake.deleteVpcRequestMutex.RUnlock()
	return len(fake.deleteVpcRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcRequestCalls(stub func(*ec2.DeleteVpcInput) (*request.Request, *ec2.DeleteVpcOutput)) {
	fake.deleteVpcRequestMutex.Lock()
	defer fake.deleteVpcRequestMutex.Unlock()
	fake.DeleteVpcRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpcRequestArgsForCall(i int) *ec2.DeleteVpcInput {
	fake.deleteVpcRequestMutex.RLock()
	defer fake.deleteVpcRequestMutex.RUnlock()
	argsForCall := fake.deleteVpcRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpcRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpcOutput) {
	fake.deleteVpcRequestMutex.Lock()
	defer fake.deleteVpcRequestMutex.Unlock()
	fake.DeleteVpcRequestStub = nil
	fake.deleteVpcRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpcOutput) {
	fake.deleteVpcRequestMutex.Lock()
	defer fake.deleteVpcRequestMutex.Unlock()
	fake.DeleteVpcRequestStub = nil
	if fake.deleteVpcRequestReturnsOnCall == nil {
		fake.deleteVpcRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpcOutput
		})
	}
	fake.deleteVpcRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpcInput, arg3 ...request.Option) (*ec2.DeleteVpcOutput, error) {
	fake.deleteVpcWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpcWithContextReturnsOnCall[len(fake.deleteVpcWithContextArgsForCall)]
	fake.deleteVpcWithContextArgsForCall = append(fake.deleteVpcWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpcInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpcWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpcWithContextMutex.Unlock()
	if fake.DeleteVpcWithContextStub != nil {
		return fake.DeleteVpcWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpcWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcWithContextCallCount() int {
	fake.deleteVpcWithContextMutex.RLock()
	defer fake.deleteVpcWithContextMutex.RUnlock()
	return len(fake.deleteVpcWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcWithContextCalls(stub func(aws.Context, *ec2.DeleteVpcInput, ...request.Option) (*ec2.DeleteVpcOutput, error)) {
	fake.deleteVpcWithContextMutex.Lock()
	defer fake.deleteVpcWithContextMutex.Unlock()
	fake.DeleteVpcWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpcWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpcInput, []request.Option) {
	fake.deleteVpcWithContextMutex.RLock()
	defer fake.deleteVpcWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpcWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpcWithContextReturns(result1 *ec2.DeleteVpcOutput, result2 error) {
	fake.deleteVpcWithContextMutex.Lock()
	defer fake.deleteVpcWithContextMutex.Unlock()
	fake.DeleteVpcWithContextStub = nil
	fake.deleteVpcWithContextReturns = struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpcOutput, result2 error) {
	fake.deleteVpcWithContextMutex.Lock()
	defer fake.deleteVpcWithContextMutex.Unlock()
	fake.DeleteVpcWithContextStub = nil
	if fake.deleteVpcWithContextReturnsOnCall == nil {
		fake.deleteVpcWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcOutput
			result2 error
		})
	}
	fake.deleteVpcWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnection(arg1 *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
	fake.deleteVpnConnectionMutex.Lock()
	ret, specificReturn := fake.deleteVpnConnectionReturnsOnCall[len(fake.deleteVpnConnectionArgsForCall)]
	fake.deleteVpnConnectionArgsForCall = append(fake.deleteVpnConnectionArgsForCall, struct {
		arg1 *ec2.DeleteVpnConnectionInput
	}{arg1})
	fake.recordInvocation("DeleteVpnConnection", []interface{}{arg1})
	fake.deleteVpnConnectionMutex.Unlock()
	if fake.DeleteVpnConnectionStub != nil {
		return fake.DeleteVpnConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnConnectionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnConnectionCallCount() int {
	fake.deleteVpnConnectionMutex.RLock()
	defer fake.deleteVpnConnectionMutex.RUnlock()
	return len(fake.deleteVpnConnectionArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnConnectionCalls(stub func(*ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error)) {
	fake.deleteVpnConnectionMutex.Lock()
	defer fake.deleteVpnConnectionMutex.Unlock()
	fake.DeleteVpnConnectionStub = stub
}

func (fake *FakeEC2API) DeleteVpnConnectionArgsForCall(i int) *ec2.DeleteVpnConnectionInput {
	fake.deleteVpnConnectionMutex.RLock()
	defer fake.deleteVpnConnectionMutex.RUnlock()
	argsForCall := fake.deleteVpnConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpnConnectionReturns(result1 *ec2.DeleteVpnConnectionOutput, result2 error) {
	fake.deleteVpnConnectionMutex.Lock()
	defer fake.deleteVpnConnectionMutex.Unlock()
	fake.DeleteVpnConnectionStub = nil
	fake.deleteVpnConnectionReturns = struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionReturnsOnCall(i int, result1 *ec2.DeleteVpnConnectionOutput, result2 error) {
	fake.deleteVpnConnectionMutex.Lock()
	defer fake.deleteVpnConnectionMutex.Unlock()
	fake.DeleteVpnConnectionStub = nil
	if fake.deleteVpnConnectionReturnsOnCall == nil {
		fake.deleteVpnConnectionReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpnConnectionOutput
			result2 error
		})
	}
	fake.deleteVpnConnectionReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRequest(arg1 *ec2.DeleteVpnConnectionInput) (*request.Request, *ec2.DeleteVpnConnectionOutput) {
	fake.deleteVpnConnectionRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpnConnectionRequestReturnsOnCall[len(fake.deleteVpnConnectionRequestArgsForCall)]
	fake.deleteVpnConnectionRequestArgsForCall = append(fake.deleteVpnConnectionRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpnConnectionInput
	}{arg1})
	fake.recordInvocation("DeleteVpnConnectionRequest", []interface{}{arg1})
	fake.deleteVpnConnectionRequestMutex.Unlock()
	if fake.DeleteVpnConnectionRequestStub != nil {
		return fake.DeleteVpnConnectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnConnectionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnConnectionRequestCallCount() int {
	fake.deleteVpnConnectionRequestMutex.RLock()
	defer fake.deleteVpnConnectionRequestMutex.RUnlock()
	return len(fake.deleteVpnConnectionRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnConnectionRequestCalls(stub func(*ec2.DeleteVpnConnectionInput) (*request.Request, *ec2.DeleteVpnConnectionOutput)) {
	fake.deleteVpnConnectionRequestMutex.Lock()
	defer fake.deleteVpnConnectionRequestMutex.Unlock()
	fake.DeleteVpnConnectionRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpnConnectionRequestArgsForCall(i int) *ec2.DeleteVpnConnectionInput {
	fake.deleteVpnConnectionRequestMutex.RLock()
	defer fake.deleteVpnConnectionRequestMutex.RUnlock()
	argsForCall := fake.deleteVpnConnectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpnConnectionRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpnConnectionOutput) {
	fake.deleteVpnConnectionRequestMutex.Lock()
	defer fake.deleteVpnConnectionRequestMutex.Unlock()
	fake.DeleteVpnConnectionRequestStub = nil
	fake.deleteVpnConnectionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpnConnectionOutput) {
	fake.deleteVpnConnectionRequestMutex.Lock()
	defer fake.deleteVpnConnectionRequestMutex.Unlock()
	fake.DeleteVpnConnectionRequestStub = nil
	if fake.deleteVpnConnectionRequestReturnsOnCall == nil {
		fake.deleteVpnConnectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpnConnectionOutput
		})
	}
	fake.deleteVpnConnectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRoute(arg1 *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	fake.deleteVpnConnectionRouteMutex.Lock()
	ret, specificReturn := fake.deleteVpnConnectionRouteReturnsOnCall[len(fake.deleteVpnConnectionRouteArgsForCall)]
	fake.deleteVpnConnectionRouteArgsForCall = append(fake.deleteVpnConnectionRouteArgsForCall, struct {
		arg1 *ec2.DeleteVpnConnectionRouteInput
	}{arg1})
	fake.recordInvocation("DeleteVpnConnectionRoute", []interface{}{arg1})
	fake.deleteVpnConnectionRouteMutex.Unlock()
	if fake.DeleteVpnConnectionRouteStub != nil {
		return fake.DeleteVpnConnectionRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnConnectionRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteCallCount() int {
	fake.deleteVpnConnectionRouteMutex.RLock()
	defer fake.deleteVpnConnectionRouteMutex.RUnlock()
	return len(fake.deleteVpnConnectionRouteArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteCalls(stub func(*ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error)) {
	fake.deleteVpnConnectionRouteMutex.Lock()
	defer fake.deleteVpnConnectionRouteMutex.Unlock()
	fake.DeleteVpnConnectionRouteStub = stub
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteArgsForCall(i int) *ec2.DeleteVpnConnectionRouteInput {
	fake.deleteVpnConnectionRouteMutex.RLock()
	defer fake.deleteVpnConnectionRouteMutex.RUnlock()
	argsForCall := fake.deleteVpnConnectionRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteReturns(result1 *ec2.DeleteVpnConnectionRouteOutput, result2 error) {
	fake.deleteVpnConnectionRouteMutex.Lock()
	defer fake.deleteVpnConnectionRouteMutex.Unlock()
	fake.DeleteVpnConnectionRouteStub = nil
	fake.deleteVpnConnectionRouteReturns = struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteReturnsOnCall(i int, result1 *ec2.DeleteVpnConnectionRouteOutput, result2 error) {
	fake.deleteVpnConnectionRouteMutex.Lock()
	defer fake.deleteVpnConnectionRouteMutex.Unlock()
	fake.DeleteVpnConnectionRouteStub = nil
	if fake.deleteVpnConnectionRouteReturnsOnCall == nil {
		fake.deleteVpnConnectionRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpnConnectionRouteOutput
			result2 error
		})
	}
	fake.deleteVpnConnectionRouteReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteRequest(arg1 *ec2.DeleteVpnConnectionRouteInput) (*request.Request, *ec2.DeleteVpnConnectionRouteOutput) {
	fake.deleteVpnConnectionRouteRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpnConnectionRouteRequestReturnsOnCall[len(fake.deleteVpnConnectionRouteRequestArgsForCall)]
	fake.deleteVpnConnectionRouteRequestArgsForCall = append(fake.deleteVpnConnectionRouteRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpnConnectionRouteInput
	}{arg1})
	fake.recordInvocation("DeleteVpnConnectionRouteRequest", []interface{}{arg1})
	fake.deleteVpnConnectionRouteRequestMutex.Unlock()
	if fake.DeleteVpnConnectionRouteRequestStub != nil {
		return fake.DeleteVpnConnectionRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnConnectionRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteRequestCallCount() int {
	fake.deleteVpnConnectionRouteRequestMutex.RLock()
	defer fake.deleteVpnConnectionRouteRequestMutex.RUnlock()
	return len(fake.deleteVpnConnectionRouteRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteRequestCalls(stub func(*ec2.DeleteVpnConnectionRouteInput) (*request.Request, *ec2.DeleteVpnConnectionRouteOutput)) {
	fake.deleteVpnConnectionRouteRequestMutex.Lock()
	defer fake.deleteVpnConnectionRouteRequestMutex.Unlock()
	fake.DeleteVpnConnectionRouteRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteRequestArgsForCall(i int) *ec2.DeleteVpnConnectionRouteInput {
	fake.deleteVpnConnectionRouteRequestMutex.RLock()
	defer fake.deleteVpnConnectionRouteRequestMutex.RUnlock()
	argsForCall := fake.deleteVpnConnectionRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpnConnectionRouteOutput) {
	fake.deleteVpnConnectionRouteRequestMutex.Lock()
	defer fake.deleteVpnConnectionRouteRequestMutex.Unlock()
	fake.DeleteVpnConnectionRouteRequestStub = nil
	fake.deleteVpnConnectionRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpnConnectionRouteOutput) {
	fake.deleteVpnConnectionRouteRequestMutex.Lock()
	defer fake.deleteVpnConnectionRouteRequestMutex.Unlock()
	fake.DeleteVpnConnectionRouteRequestStub = nil
	if fake.deleteVpnConnectionRouteRequestReturnsOnCall == nil {
		fake.deleteVpnConnectionRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpnConnectionRouteOutput
		})
	}
	fake.deleteVpnConnectionRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnConnectionRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpnConnectionRouteInput, arg3 ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	fake.deleteVpnConnectionRouteWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpnConnectionRouteWithContextReturnsOnCall[len(fake.deleteVpnConnectionRouteWithContextArgsForCall)]
	fake.deleteVpnConnectionRouteWithContextArgsForCall = append(fake.deleteVpnConnectionRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpnConnectionRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpnConnectionRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpnConnectionRouteWithContextMutex.Unlock()
	if fake.DeleteVpnConnectionRouteWithContextStub != nil {
		return fake.DeleteVpnConnectionRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnConnectionRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteWithContextCallCount() int {
	fake.deleteVpnConnectionRouteWithContextMutex.RLock()
	defer fake.deleteVpnConnectionRouteWithContextMutex.RUnlock()
	return len(fake.deleteVpnConnectionRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteWithContextCalls(stub func(aws.Context, *ec2.DeleteVpnConnectionRouteInput, ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error)) {
	fake.deleteVpnConnectionRouteWithContextMutex.Lock()
	defer fake.deleteVpnConnectionRouteWithContextMutex.Unlock()
	fake.DeleteVpnConnectionRouteWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpnConnectionRouteInput, []request.Option) {
	fake.deleteVpnConnectionRouteWithContextMutex.RLock()
	defer fake.deleteVpnConnectionRouteWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpnConnectionRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteWithContextReturns(result1 *ec2.DeleteVpnConnectionRouteOutput, result2 error) {
	fake.deleteVpnConnectionRouteWithContextMutex.Lock()
	defer fake.deleteVpnConnectionRouteWithContextMutex.Unlock()
	fake.DeleteVpnConnectionRouteWithContextStub = nil
	fake.deleteVpnConnectionRouteWithContextReturns = struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionRouteWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpnConnectionRouteOutput, result2 error) {
	fake.deleteVpnConnectionRouteWithContextMutex.Lock()
	defer fake.deleteVpnConnectionRouteWithContextMutex.Unlock()
	fake.DeleteVpnConnectionRouteWithContextStub = nil
	if fake.deleteVpnConnectionRouteWithContextReturnsOnCall == nil {
		fake.deleteVpnConnectionRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpnConnectionRouteOutput
			result2 error
		})
	}
	fake.deleteVpnConnectionRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpnConnectionRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpnConnectionInput, arg3 ...request.Option) (*ec2.DeleteVpnConnectionOutput, error) {
	fake.deleteVpnConnectionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpnConnectionWithContextReturnsOnCall[len(fake.deleteVpnConnectionWithContextArgsForCall)]
	fake.deleteVpnConnectionWithContextArgsForCall = append(fake.deleteVpnConnectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpnConnectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpnConnectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpnConnectionWithContextMutex.Unlock()
	if fake.DeleteVpnConnectionWithContextStub != nil {
		return fake.DeleteVpnConnectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnConnectionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnConnectionWithContextCallCount() int {
	fake.deleteVpnConnectionWithContextMutex.RLock()
	defer fake.deleteVpnConnectionWithContextMutex.RUnlock()
	return len(fake.deleteVpnConnectionWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnConnectionWithContextCalls(stub func(aws.Context, *ec2.DeleteVpnConnectionInput, ...request.Option) (*ec2.DeleteVpnConnectionOutput, error)) {
	fake.deleteVpnConnectionWithContextMutex.Lock()
	defer fake.deleteVpnConnectionWithContextMutex.Unlock()
	fake.DeleteVpnConnectionWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpnConnectionWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpnConnectionInput, []request.Option) {
	fake.deleteVpnConnectionWithContextMutex.RLock()
	defer fake.deleteVpnConnectionWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpnConnectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpnConnectionWithContextReturns(result1 *ec2.DeleteVpnConnectionOutput, result2 error) {
	fake.deleteVpnConnectionWithContextMutex.Lock()
	defer fake.deleteVpnConnectionWithContextMutex.Unlock()
	fake.DeleteVpnConnectionWithContextStub = nil
	fake.deleteVpnConnectionWithContextReturns = struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnConnectionWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpnConnectionOutput, result2 error) {
	fake.deleteVpnConnectionWithContextMutex.Lock()
	defer fake.deleteVpnConnectionWithContextMutex.Unlock()
	fake.DeleteVpnConnectionWithContextStub = nil
	if fake.deleteVpnConnectionWithContextReturnsOnCall == nil {
		fake.deleteVpnConnectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpnConnectionOutput
			result2 error
		})
	}
	fake.deleteVpnConnectionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpnConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnGateway(arg1 *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
	fake.deleteVpnGatewayMutex.Lock()
	ret, specificReturn := fake.deleteVpnGatewayReturnsOnCall[len(fake.deleteVpnGatewayArgsForCall)]
	fake.deleteVpnGatewayArgsForCall = append(fake.deleteVpnGatewayArgsForCall, struct {
		arg1 *ec2.DeleteVpnGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteVpnGateway", []interface{}{arg1})
	fake.deleteVpnGatewayMutex.Unlock()
	if fake.DeleteVpnGatewayStub != nil {
		return fake.DeleteVpnGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnGatewayCallCount() int {
	fake.deleteVpnGatewayMutex.RLock()
	defer fake.deleteVpnGatewayMutex.RUnlock()
	return len(fake.deleteVpnGatewayArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnGatewayCalls(stub func(*ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error)) {
	fake.deleteVpnGatewayMutex.Lock()
	defer fake.deleteVpnGatewayMutex.Unlock()
	fake.DeleteVpnGatewayStub = stub
}

func (fake *FakeEC2API) DeleteVpnGatewayArgsForCall(i int) *ec2.DeleteVpnGatewayInput {
	fake.deleteVpnGatewayMutex.RLock()
	defer fake.deleteVpnGatewayMutex.RUnlock()
	argsForCall := fake.deleteVpnGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpnGatewayReturns(result1 *ec2.DeleteVpnGatewayOutput, result2 error) {
	fake.deleteVpnGatewayMutex.Lock()
	defer fake.deleteVpnGatewayMutex.Unlock()
	fake.DeleteVpnGatewayStub = nil
	fake.deleteVpnGatewayReturns = struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnGatewayReturnsOnCall(i int, result1 *ec2.DeleteVpnGatewayOutput, result2 error) {
	fake.deleteVpnGatewayMutex.Lock()
	defer fake.deleteVpnGatewayMutex.Unlock()
	fake.DeleteVpnGatewayStub = nil
	if fake.deleteVpnGatewayReturnsOnCall == nil {
		fake.deleteVpnGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpnGatewayOutput
			result2 error
		})
	}
	fake.deleteVpnGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnGatewayRequest(arg1 *ec2.DeleteVpnGatewayInput) (*request.Request, *ec2.DeleteVpnGatewayOutput) {
	fake.deleteVpnGatewayRequestMutex.Lock()
	ret, specificReturn := fake.deleteVpnGatewayRequestReturnsOnCall[len(fake.deleteVpnGatewayRequestArgsForCall)]
	fake.deleteVpnGatewayRequestArgsForCall = append(fake.deleteVpnGatewayRequestArgsForCall, struct {
		arg1 *ec2.DeleteVpnGatewayInput
	}{arg1})
	fake.recordInvocation("DeleteVpnGatewayRequest", []interface{}{arg1})
	fake.deleteVpnGatewayRequestMutex.Unlock()
	if fake.DeleteVpnGatewayRequestStub != nil {
		return fake.DeleteVpnGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnGatewayRequestCallCount() int {
	fake.deleteVpnGatewayRequestMutex.RLock()
	defer fake.deleteVpnGatewayRequestMutex.RUnlock()
	return len(fake.deleteVpnGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnGatewayRequestCalls(stub func(*ec2.DeleteVpnGatewayInput) (*request.Request, *ec2.DeleteVpnGatewayOutput)) {
	fake.deleteVpnGatewayRequestMutex.Lock()
	defer fake.deleteVpnGatewayRequestMutex.Unlock()
	fake.DeleteVpnGatewayRequestStub = stub
}

func (fake *FakeEC2API) DeleteVpnGatewayRequestArgsForCall(i int) *ec2.DeleteVpnGatewayInput {
	fake.deleteVpnGatewayRequestMutex.RLock()
	defer fake.deleteVpnGatewayRequestMutex.RUnlock()
	argsForCall := fake.deleteVpnGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeleteVpnGatewayRequestReturns(result1 *request.Request, result2 *ec2.DeleteVpnGatewayOutput) {
	fake.deleteVpnGatewayRequestMutex.Lock()
	defer fake.deleteVpnGatewayRequestMutex.Unlock()
	fake.DeleteVpnGatewayRequestStub = nil
	fake.deleteVpnGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeleteVpnGatewayOutput) {
	fake.deleteVpnGatewayRequestMutex.Lock()
	defer fake.deleteVpnGatewayRequestMutex.Unlock()
	fake.DeleteVpnGatewayRequestStub = nil
	if fake.deleteVpnGatewayRequestReturnsOnCall == nil {
		fake.deleteVpnGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeleteVpnGatewayOutput
		})
	}
	fake.deleteVpnGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeleteVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnGatewayWithContext(arg1 aws.Context, arg2 *ec2.DeleteVpnGatewayInput, arg3 ...request.Option) (*ec2.DeleteVpnGatewayOutput, error) {
	fake.deleteVpnGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.deleteVpnGatewayWithContextReturnsOnCall[len(fake.deleteVpnGatewayWithContextArgsForCall)]
	fake.deleteVpnGatewayWithContextArgsForCall = append(fake.deleteVpnGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeleteVpnGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteVpnGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteVpnGatewayWithContextMutex.Unlock()
	if fake.DeleteVpnGatewayWithContextStub != nil {
		return fake.DeleteVpnGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteVpnGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpnGatewayWithContextCallCount() int {
	fake.deleteVpnGatewayWithContextMutex.RLock()
	defer fake.deleteVpnGatewayWithContextMutex.RUnlock()
	return len(fake.deleteVpnGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DeleteVpnGatewayWithContextCalls(stub func(aws.Context, *ec2.DeleteVpnGatewayInput, ...request.Option) (*ec2.DeleteVpnGatewayOutput, error)) {
	fake.deleteVpnGatewayWithContextMutex.Lock()
	defer fake.deleteVpnGatewayWithContextMutex.Unlock()
	fake.DeleteVpnGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DeleteVpnGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DeleteVpnGatewayInput, []request.Option) {
	fake.deleteVpnGatewayWithContextMutex.RLock()
	defer fake.deleteVpnGatewayWithContextMutex.RUnlock()
	argsForCall := fake.deleteVpnGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpnGatewayWithContextReturns(result1 *ec2.DeleteVpnGatewayOutput, result2 error) {
	fake.deleteVpnGatewayWithContextMutex.Lock()
	defer fake.deleteVpnGatewayWithContextMutex.Unlock()
	fake.DeleteVpnGatewayWithContextStub = nil
	fake.deleteVpnGatewayWithContextReturns = struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpnGatewayWithContextReturnsOnCall(i int, result1 *ec2.DeleteVpnGatewayOutput, result2 error) {
	fake.deleteVpnGatewayWithContextMutex.Lock()
	defer fake.deleteVpnGatewayWithContextMutex.Unlock()
	fake.DeleteVpnGatewayWithContextStub = nil
	if fake.deleteVpnGatewayWithContextReturnsOnCall == nil {
		fake.deleteVpnGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpnGatewayOutput
			result2 error
		})
	}
	fake.deleteVpnGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeprovisionByoipCidr(arg1 *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error) {
	fake.deprovisionByoipCidrMutex.Lock()
	ret, specificReturn := fake.deprovisionByoipCidrReturnsOnCall[len(fake.deprovisionByoipCidrArgsForCall)]
	fake.deprovisionByoipCidrArgsForCall = append(fake.deprovisionByoipCidrArgsForCall, struct {
		arg1 *ec2.DeprovisionByoipCidrInput
	}{arg1})
	fake.recordInvocation("DeprovisionByoipCidr", []interface{}{arg1})
	fake.deprovisionByoipCidrMutex.Unlock()
	if fake.DeprovisionByoipCidrStub != nil {
		return fake.DeprovisionByoipCidrStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deprovisionByoipCidrReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeprovisionByoipCidrCallCount() int {
	fake.deprovisionByoipCidrMutex.RLock()
	defer fake.deprovisionByoipCidrMutex.RUnlock()
	return len(fake.deprovisionByoipCidrArgsForCall)
}

func (fake *FakeEC2API) DeprovisionByoipCidrCalls(stub func(*ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error)) {
	fake.deprovisionByoipCidrMutex.Lock()
	defer fake.deprovisionByoipCidrMutex.Unlock()
	fake.DeprovisionByoipCidrStub = stub
}

func (fake *FakeEC2API) DeprovisionByoipCidrArgsForCall(i int) *ec2.DeprovisionByoipCidrInput {
	fake.deprovisionByoipCidrMutex.RLock()
	defer fake.deprovisionByoipCidrMutex.RUnlock()
	argsForCall := fake.deprovisionByoipCidrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeprovisionByoipCidrReturns(result1 *ec2.DeprovisionByoipCidrOutput, result2 error) {
	fake.deprovisionByoipCidrMutex.Lock()
	defer fake.deprovisionByoipCidrMutex.Unlock()
	fake.DeprovisionByoipCidrStub = nil
	fake.deprovisionByoipCidrReturns = struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeprovisionByoipCidrReturnsOnCall(i int, result1 *ec2.DeprovisionByoipCidrOutput, result2 error) {
	fake.deprovisionByoipCidrMutex.Lock()
	defer fake.deprovisionByoipCidrMutex.Unlock()
	fake.DeprovisionByoipCidrStub = nil
	if fake.deprovisionByoipCidrReturnsOnCall == nil {
		fake.deprovisionByoipCidrReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeprovisionByoipCidrOutput
			result2 error
		})
	}
	fake.deprovisionByoipCidrReturnsOnCall[i] = struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeprovisionByoipCidrRequest(arg1 *ec2.DeprovisionByoipCidrInput) (*request.Request, *ec2.DeprovisionByoipCidrOutput) {
	fake.deprovisionByoipCidrRequestMutex.Lock()
	ret, specificReturn := fake.deprovisionByoipCidrRequestReturnsOnCall[len(fake.deprovisionByoipCidrRequestArgsForCall)]
	fake.deprovisionByoipCidrRequestArgsForCall = append(fake.deprovisionByoipCidrRequestArgsForCall, struct {
		arg1 *ec2.DeprovisionByoipCidrInput
	}{arg1})
	fake.recordInvocation("DeprovisionByoipCidrRequest", []interface{}{arg1})
	fake.deprovisionByoipCidrRequestMutex.Unlock()
	if fake.DeprovisionByoipCidrRequestStub != nil {
		return fake.DeprovisionByoipCidrRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deprovisionByoipCidrRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeprovisionByoipCidrRequestCallCount() int {
	fake.deprovisionByoipCidrRequestMutex.RLock()
	defer fake.deprovisionByoipCidrRequestMutex.RUnlock()
	return len(fake.deprovisionByoipCidrRequestArgsForCall)
}

func (fake *FakeEC2API) DeprovisionByoipCidrRequestCalls(stub func(*ec2.DeprovisionByoipCidrInput) (*request.Request, *ec2.DeprovisionByoipCidrOutput)) {
	fake.deprovisionByoipCidrRequestMutex.Lock()
	defer fake.deprovisionByoipCidrRequestMutex.Unlock()
	fake.DeprovisionByoipCidrRequestStub = stub
}

func (fake *FakeEC2API) DeprovisionByoipCidrRequestArgsForCall(i int) *ec2.DeprovisionByoipCidrInput {
	fake.deprovisionByoipCidrRequestMutex.RLock()
	defer fake.deprovisionByoipCidrRequestMutex.RUnlock()
	argsForCall := fake.deprovisionByoipCidrRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeprovisionByoipCidrRequestReturns(result1 *request.Request, result2 *ec2.DeprovisionByoipCidrOutput) {
	fake.deprovisionByoipCidrRequestMutex.Lock()
	defer fake.deprovisionByoipCidrRequestMutex.Unlock()
	fake.DeprovisionByoipCidrRequestStub = nil
	fake.deprovisionByoipCidrRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeprovisionByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeprovisionByoipCidrRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeprovisionByoipCidrOutput) {
	fake.deprovisionByoipCidrRequestMutex.Lock()
	defer fake.deprovisionByoipCidrRequestMutex.Unlock()
	fake.DeprovisionByoipCidrRequestStub = nil
	if fake.deprovisionByoipCidrRequestReturnsOnCall == nil {
		fake.deprovisionByoipCidrRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeprovisionByoipCidrOutput
		})
	}
	fake.deprovisionByoipCidrRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeprovisionByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeprovisionByoipCidrWithContext(arg1 aws.Context, arg2 *ec2.DeprovisionByoipCidrInput, arg3 ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error) {
	fake.deprovisionByoipCidrWithContextMutex.Lock()
	ret, specificReturn := fake.deprovisionByoipCidrWithContextReturnsOnCall[len(fake.deprovisionByoipCidrWithContextArgsForCall)]
	fake.deprovisionByoipCidrWithContextArgsForCall = append(fake.deprovisionByoipCidrWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeprovisionByoipCidrInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeprovisionByoipCidrWithContext", []interface{}{arg1, arg2, arg3})
	fake.deprovisionByoipCidrWithContextMutex.Unlock()
	if fake.DeprovisionByoipCidrWithContextStub != nil {
		return fake.DeprovisionByoipCidrWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deprovisionByoipCidrWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeprovisionByoipCidrWithContextCallCount() int {
	fake.deprovisionByoipCidrWithContextMutex.RLock()
	defer fake.deprovisionByoipCidrWithContextMutex.RUnlock()
	return len(fake.deprovisionByoipCidrWithContextArgsForCall)
}

func (fake *FakeEC2API) DeprovisionByoipCidrWithContextCalls(stub func(aws.Context, *ec2.DeprovisionByoipCidrInput, ...request.Option) (*ec2.DeprovisionByoipCidrOutput, error)) {
	fake.deprovisionByoipCidrWithContextMutex.Lock()
	defer fake.deprovisionByoipCidrWithContextMutex.Unlock()
	fake.DeprovisionByoipCidrWithContextStub = stub
}

func (fake *FakeEC2API) DeprovisionByoipCidrWithContextArgsForCall(i int) (aws.Context, *ec2.DeprovisionByoipCidrInput, []request.Option) {
	fake.deprovisionByoipCidrWithContextMutex.RLock()
	defer fake.deprovisionByoipCidrWithContextMutex.RUnlock()
	argsForCall := fake.deprovisionByoipCidrWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeprovisionByoipCidrWithContextReturns(result1 *ec2.DeprovisionByoipCidrOutput, result2 error) {
	fake.deprovisionByoipCidrWithContextMutex.Lock()
	defer fake.deprovisionByoipCidrWithContextMutex.Unlock()
	fake.DeprovisionByoipCidrWithContextStub = nil
	fake.deprovisionByoipCidrWithContextReturns = struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeprovisionByoipCidrWithContextReturnsOnCall(i int, result1 *ec2.DeprovisionByoipCidrOutput, result2 error) {
	fake.deprovisionByoipCidrWithContextMutex.Lock()
	defer fake.deprovisionByoipCidrWithContextMutex.Unlock()
	fake.DeprovisionByoipCidrWithContextStub = nil
	if fake.deprovisionByoipCidrWithContextReturnsOnCall == nil {
		fake.deprovisionByoipCidrWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeprovisionByoipCidrOutput
			result2 error
		})
	}
	fake.deprovisionByoipCidrWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeprovisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeregisterImage(arg1 *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	fake.deregisterImageMutex.Lock()
	ret, specificReturn := fake.deregisterImageReturnsOnCall[len(fake.deregisterImageArgsForCall)]
	fake.deregisterImageArgsForCall = append(fake.deregisterImageArgsForCall, struct {
		arg1 *ec2.DeregisterImageInput
	}{arg1})
	fake.recordInvocation("DeregisterImage", []interface{}{arg1})
	fake.deregisterImageMutex.Unlock()
	if fake.DeregisterImageStub != nil {
		return fake.DeregisterImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeregisterImageCallCount() int {
	fake.deregisterImageMutex.RLock()
	defer fake.deregisterImageMutex.RUnlock()
	return len(fake.deregisterImageArgsForCall)
}

func (fake *FakeEC2API) DeregisterImageCalls(stub func(*ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error)) {
	fake.deregisterImageMutex.Lock()
	defer fake.deregisterImageMutex.Unlock()
	fake.DeregisterImageStub = stub
}

func (fake *FakeEC2API) DeregisterImageArgsForCall(i int) *ec2.DeregisterImageInput {
	fake.deregisterImageMutex.RLock()
	defer fake.deregisterImageMutex.RUnlock()
	argsForCall := fake.deregisterImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeregisterImageReturns(result1 *ec2.DeregisterImageOutput, result2 error) {
	fake.deregisterImageMutex.Lock()
	defer fake.deregisterImageMutex.Unlock()
	fake.DeregisterImageStub = nil
	fake.deregisterImageReturns = struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeregisterImageReturnsOnCall(i int, result1 *ec2.DeregisterImageOutput, result2 error) {
	fake.deregisterImageMutex.Lock()
	defer fake.deregisterImageMutex.Unlock()
	fake.DeregisterImageStub = nil
	if fake.deregisterImageReturnsOnCall == nil {
		fake.deregisterImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeregisterImageOutput
			result2 error
		})
	}
	fake.deregisterImageReturnsOnCall[i] = struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeregisterImageRequest(arg1 *ec2.DeregisterImageInput) (*request.Request, *ec2.DeregisterImageOutput) {
	fake.deregisterImageRequestMutex.Lock()
	ret, specificReturn := fake.deregisterImageRequestReturnsOnCall[len(fake.deregisterImageRequestArgsForCall)]
	fake.deregisterImageRequestArgsForCall = append(fake.deregisterImageRequestArgsForCall, struct {
		arg1 *ec2.DeregisterImageInput
	}{arg1})
	fake.recordInvocation("DeregisterImageRequest", []interface{}{arg1})
	fake.deregisterImageRequestMutex.Unlock()
	if fake.DeregisterImageRequestStub != nil {
		return fake.DeregisterImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeregisterImageRequestCallCount() int {
	fake.deregisterImageRequestMutex.RLock()
	defer fake.deregisterImageRequestMutex.RUnlock()
	return len(fake.deregisterImageRequestArgsForCall)
}

func (fake *FakeEC2API) DeregisterImageRequestCalls(stub func(*ec2.DeregisterImageInput) (*request.Request, *ec2.DeregisterImageOutput)) {
	fake.deregisterImageRequestMutex.Lock()
	defer fake.deregisterImageRequestMutex.Unlock()
	fake.DeregisterImageRequestStub = stub
}

func (fake *FakeEC2API) DeregisterImageRequestArgsForCall(i int) *ec2.DeregisterImageInput {
	fake.deregisterImageRequestMutex.RLock()
	defer fake.deregisterImageRequestMutex.RUnlock()
	argsForCall := fake.deregisterImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DeregisterImageRequestReturns(result1 *request.Request, result2 *ec2.DeregisterImageOutput) {
	fake.deregisterImageRequestMutex.Lock()
	defer fake.deregisterImageRequestMutex.Unlock()
	fake.DeregisterImageRequestStub = nil
	fake.deregisterImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DeregisterImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeregisterImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DeregisterImageOutput) {
	fake.deregisterImageRequestMutex.Lock()
	defer fake.deregisterImageRequestMutex.Unlock()
	fake.DeregisterImageRequestStub = nil
	if fake.deregisterImageRequestReturnsOnCall == nil {
		fake.deregisterImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DeregisterImageOutput
		})
	}
	fake.deregisterImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DeregisterImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DeregisterImageWithContext(arg1 aws.Context, arg2 *ec2.DeregisterImageInput, arg3 ...request.Option) (*ec2.DeregisterImageOutput, error) {
	fake.deregisterImageWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterImageWithContextReturnsOnCall[len(fake.deregisterImageWithContextArgsForCall)]
	fake.deregisterImageWithContextArgsForCall = append(fake.deregisterImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DeregisterImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeregisterImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterImageWithContextMutex.Unlock()
	if fake.DeregisterImageWithContextStub != nil {
		return fake.DeregisterImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeregisterImageWithContextCallCount() int {
	fake.deregisterImageWithContextMutex.RLock()
	defer fake.deregisterImageWithContextMutex.RUnlock()
	return len(fake.deregisterImageWithContextArgsForCall)
}

func (fake *FakeEC2API) DeregisterImageWithContextCalls(stub func(aws.Context, *ec2.DeregisterImageInput, ...request.Option) (*ec2.DeregisterImageOutput, error)) {
	fake.deregisterImageWithContextMutex.Lock()
	defer fake.deregisterImageWithContextMutex.Unlock()
	fake.DeregisterImageWithContextStub = stub
}

func (fake *FakeEC2API) DeregisterImageWithContextArgsForCall(i int) (aws.Context, *ec2.DeregisterImageInput, []request.Option) {
	fake.deregisterImageWithContextMutex.RLock()
	defer fake.deregisterImageWithContextMutex.RUnlock()
	argsForCall := fake.deregisterImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeregisterImageWithContextReturns(result1 *ec2.DeregisterImageOutput, result2 error) {
	fake.deregisterImageWithContextMutex.Lock()
	defer fake.deregisterImageWithContextMutex.Unlock()
	fake.DeregisterImageWithContextStub = nil
	fake.deregisterImageWithContextReturns = struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeregisterImageWithContextReturnsOnCall(i int, result1 *ec2.DeregisterImageOutput, result2 error) {
	fake.deregisterImageWithContextMutex.Lock()
	defer fake.deregisterImageWithContextMutex.Unlock()
	fake.DeregisterImageWithContextStub = nil
	if fake.deregisterImageWithContextReturnsOnCall == nil {
		fake.deregisterImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeregisterImageOutput
			result2 error
		})
	}
	fake.deregisterImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DeregisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAccountAttributes(arg1 *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	fake.describeAccountAttributesMutex.Lock()
	ret, specificReturn := fake.describeAccountAttributesReturnsOnCall[len(fake.describeAccountAttributesArgsForCall)]
	fake.describeAccountAttributesArgsForCall = append(fake.describeAccountAttributesArgsForCall, struct {
		arg1 *ec2.DescribeAccountAttributesInput
	}{arg1})
	fake.recordInvocation("DescribeAccountAttributes", []interface{}{arg1})
	fake.describeAccountAttributesMutex.Unlock()
	if fake.DescribeAccountAttributesStub != nil {
		return fake.DescribeAccountAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAccountAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAccountAttributesCallCount() int {
	fake.describeAccountAttributesMutex.RLock()
	defer fake.describeAccountAttributesMutex.RUnlock()
	return len(fake.describeAccountAttributesArgsForCall)
}

func (fake *FakeEC2API) DescribeAccountAttributesCalls(stub func(*ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error)) {
	fake.describeAccountAttributesMutex.Lock()
	defer fake.describeAccountAttributesMutex.Unlock()
	fake.DescribeAccountAttributesStub = stub
}

func (fake *FakeEC2API) DescribeAccountAttributesArgsForCall(i int) *ec2.DescribeAccountAttributesInput {
	fake.describeAccountAttributesMutex.RLock()
	defer fake.describeAccountAttributesMutex.RUnlock()
	argsForCall := fake.describeAccountAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAccountAttributesReturns(result1 *ec2.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesMutex.Lock()
	defer fake.describeAccountAttributesMutex.Unlock()
	fake.DescribeAccountAttributesStub = nil
	fake.describeAccountAttributesReturns = struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAccountAttributesReturnsOnCall(i int, result1 *ec2.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesMutex.Lock()
	defer fake.describeAccountAttributesMutex.Unlock()
	fake.DescribeAccountAttributesStub = nil
	if fake.describeAccountAttributesReturnsOnCall == nil {
		fake.describeAccountAttributesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAccountAttributesOutput
			result2 error
		})
	}
	fake.describeAccountAttributesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAccountAttributesRequest(arg1 *ec2.DescribeAccountAttributesInput) (*request.Request, *ec2.DescribeAccountAttributesOutput) {
	fake.describeAccountAttributesRequestMutex.Lock()
	ret, specificReturn := fake.describeAccountAttributesRequestReturnsOnCall[len(fake.describeAccountAttributesRequestArgsForCall)]
	fake.describeAccountAttributesRequestArgsForCall = append(fake.describeAccountAttributesRequestArgsForCall, struct {
		arg1 *ec2.DescribeAccountAttributesInput
	}{arg1})
	fake.recordInvocation("DescribeAccountAttributesRequest", []interface{}{arg1})
	fake.describeAccountAttributesRequestMutex.Unlock()
	if fake.DescribeAccountAttributesRequestStub != nil {
		return fake.DescribeAccountAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAccountAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAccountAttributesRequestCallCount() int {
	fake.describeAccountAttributesRequestMutex.RLock()
	defer fake.describeAccountAttributesRequestMutex.RUnlock()
	return len(fake.describeAccountAttributesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeAccountAttributesRequestCalls(stub func(*ec2.DescribeAccountAttributesInput) (*request.Request, *ec2.DescribeAccountAttributesOutput)) {
	fake.describeAccountAttributesRequestMutex.Lock()
	defer fake.describeAccountAttributesRequestMutex.Unlock()
	fake.DescribeAccountAttributesRequestStub = stub
}

func (fake *FakeEC2API) DescribeAccountAttributesRequestArgsForCall(i int) *ec2.DescribeAccountAttributesInput {
	fake.describeAccountAttributesRequestMutex.RLock()
	defer fake.describeAccountAttributesRequestMutex.RUnlock()
	argsForCall := fake.describeAccountAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAccountAttributesRequestReturns(result1 *request.Request, result2 *ec2.DescribeAccountAttributesOutput) {
	fake.describeAccountAttributesRequestMutex.Lock()
	defer fake.describeAccountAttributesRequestMutex.Unlock()
	fake.DescribeAccountAttributesRequestStub = nil
	fake.describeAccountAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeAccountAttributesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAccountAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeAccountAttributesOutput) {
	fake.describeAccountAttributesRequestMutex.Lock()
	defer fake.describeAccountAttributesRequestMutex.Unlock()
	fake.DescribeAccountAttributesRequestStub = nil
	if fake.describeAccountAttributesRequestReturnsOnCall == nil {
		fake.describeAccountAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeAccountAttributesOutput
		})
	}
	fake.describeAccountAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeAccountAttributesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAccountAttributesWithContext(arg1 aws.Context, arg2 *ec2.DescribeAccountAttributesInput, arg3 ...request.Option) (*ec2.DescribeAccountAttributesOutput, error) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAccountAttributesWithContextReturnsOnCall[len(fake.describeAccountAttributesWithContextArgsForCall)]
	fake.describeAccountAttributesWithContextArgsForCall = append(fake.describeAccountAttributesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAccountAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAccountAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAccountAttributesWithContextMutex.Unlock()
	if fake.DescribeAccountAttributesWithContextStub != nil {
		return fake.DescribeAccountAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAccountAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAccountAttributesWithContextCallCount() int {
	fake.describeAccountAttributesWithContextMutex.RLock()
	defer fake.describeAccountAttributesWithContextMutex.RUnlock()
	return len(fake.describeAccountAttributesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeAccountAttributesWithContextCalls(stub func(aws.Context, *ec2.DescribeAccountAttributesInput, ...request.Option) (*ec2.DescribeAccountAttributesOutput, error)) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	defer fake.describeAccountAttributesWithContextMutex.Unlock()
	fake.DescribeAccountAttributesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeAccountAttributesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeAccountAttributesInput, []request.Option) {
	fake.describeAccountAttributesWithContextMutex.RLock()
	defer fake.describeAccountAttributesWithContextMutex.RUnlock()
	argsForCall := fake.describeAccountAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeAccountAttributesWithContextReturns(result1 *ec2.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	defer fake.describeAccountAttributesWithContextMutex.Unlock()
	fake.DescribeAccountAttributesWithContextStub = nil
	fake.describeAccountAttributesWithContextReturns = struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAccountAttributesWithContextReturnsOnCall(i int, result1 *ec2.DescribeAccountAttributesOutput, result2 error) {
	fake.describeAccountAttributesWithContextMutex.Lock()
	defer fake.describeAccountAttributesWithContextMutex.Unlock()
	fake.DescribeAccountAttributesWithContextStub = nil
	if fake.describeAccountAttributesWithContextReturnsOnCall == nil {
		fake.describeAccountAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAccountAttributesOutput
			result2 error
		})
	}
	fake.describeAccountAttributesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAccountAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAddresses(arg1 *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	fake.describeAddressesMutex.Lock()
	ret, specificReturn := fake.describeAddressesReturnsOnCall[len(fake.describeAddressesArgsForCall)]
	fake.describeAddressesArgsForCall = append(fake.describeAddressesArgsForCall, struct {
		arg1 *ec2.DescribeAddressesInput
	}{arg1})
	fake.recordInvocation("DescribeAddresses", []interface{}{arg1})
	fake.describeAddressesMutex.Unlock()
	if fake.DescribeAddressesStub != nil {
		return fake.DescribeAddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAddressesCallCount() int {
	fake.describeAddressesMutex.RLock()
	defer fake.describeAddressesMutex.RUnlock()
	return len(fake.describeAddressesArgsForCall)
}

func (fake *FakeEC2API) DescribeAddressesCalls(stub func(*ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error)) {
	fake.describeAddressesMutex.Lock()
	defer fake.describeAddressesMutex.Unlock()
	fake.DescribeAddressesStub = stub
}

func (fake *FakeEC2API) DescribeAddressesArgsForCall(i int) *ec2.DescribeAddressesInput {
	fake.describeAddressesMutex.RLock()
	defer fake.describeAddressesMutex.RUnlock()
	argsForCall := fake.describeAddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAddressesReturns(result1 *ec2.DescribeAddressesOutput, result2 error) {
	fake.describeAddressesMutex.Lock()
	defer fake.describeAddressesMutex.Unlock()
	fake.DescribeAddressesStub = nil
	fake.describeAddressesReturns = struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAddressesReturnsOnCall(i int, result1 *ec2.DescribeAddressesOutput, result2 error) {
	fake.describeAddressesMutex.Lock()
	defer fake.describeAddressesMutex.Unlock()
	fake.DescribeAddressesStub = nil
	if fake.describeAddressesReturnsOnCall == nil {
		fake.describeAddressesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAddressesOutput
			result2 error
		})
	}
	fake.describeAddressesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAddressesRequest(arg1 *ec2.DescribeAddressesInput) (*request.Request, *ec2.DescribeAddressesOutput) {
	fake.describeAddressesRequestMutex.Lock()
	ret, specificReturn := fake.describeAddressesRequestReturnsOnCall[len(fake.describeAddressesRequestArgsForCall)]
	fake.describeAddressesRequestArgsForCall = append(fake.describeAddressesRequestArgsForCall, struct {
		arg1 *ec2.DescribeAddressesInput
	}{arg1})
	fake.recordInvocation("DescribeAddressesRequest", []interface{}{arg1})
	fake.describeAddressesRequestMutex.Unlock()
	if fake.DescribeAddressesRequestStub != nil {
		return fake.DescribeAddressesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAddressesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAddressesRequestCallCount() int {
	fake.describeAddressesRequestMutex.RLock()
	defer fake.describeAddressesRequestMutex.RUnlock()
	return len(fake.describeAddressesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeAddressesRequestCalls(stub func(*ec2.DescribeAddressesInput) (*request.Request, *ec2.DescribeAddressesOutput)) {
	fake.describeAddressesRequestMutex.Lock()
	defer fake.describeAddressesRequestMutex.Unlock()
	fake.DescribeAddressesRequestStub = stub
}

func (fake *FakeEC2API) DescribeAddressesRequestArgsForCall(i int) *ec2.DescribeAddressesInput {
	fake.describeAddressesRequestMutex.RLock()
	defer fake.describeAddressesRequestMutex.RUnlock()
	argsForCall := fake.describeAddressesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAddressesRequestReturns(result1 *request.Request, result2 *ec2.DescribeAddressesOutput) {
	fake.describeAddressesRequestMutex.Lock()
	defer fake.describeAddressesRequestMutex.Unlock()
	fake.DescribeAddressesRequestStub = nil
	fake.describeAddressesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAddressesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeAddressesOutput) {
	fake.describeAddressesRequestMutex.Lock()
	defer fake.describeAddressesRequestMutex.Unlock()
	fake.DescribeAddressesRequestStub = nil
	if fake.describeAddressesRequestReturnsOnCall == nil {
		fake.describeAddressesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeAddressesOutput
		})
	}
	fake.describeAddressesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAddressesWithContext(arg1 aws.Context, arg2 *ec2.DescribeAddressesInput, arg3 ...request.Option) (*ec2.DescribeAddressesOutput, error) {
	fake.describeAddressesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAddressesWithContextReturnsOnCall[len(fake.describeAddressesWithContextArgsForCall)]
	fake.describeAddressesWithContextArgsForCall = append(fake.describeAddressesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAddressesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAddressesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAddressesWithContextMutex.Unlock()
	if fake.DescribeAddressesWithContextStub != nil {
		return fake.DescribeAddressesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAddressesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAddressesWithContextCallCount() int {
	fake.describeAddressesWithContextMutex.RLock()
	defer fake.describeAddressesWithContextMutex.RUnlock()
	return len(fake.describeAddressesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeAddressesWithContextCalls(stub func(aws.Context, *ec2.DescribeAddressesInput, ...request.Option) (*ec2.DescribeAddressesOutput, error)) {
	fake.describeAddressesWithContextMutex.Lock()
	defer fake.describeAddressesWithContextMutex.Unlock()
	fake.DescribeAddressesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeAddressesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeAddressesInput, []request.Option) {
	fake.describeAddressesWithContextMutex.RLock()
	defer fake.describeAddressesWithContextMutex.RUnlock()
	argsForCall := fake.describeAddressesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeAddressesWithContextReturns(result1 *ec2.DescribeAddressesOutput, result2 error) {
	fake.describeAddressesWithContextMutex.Lock()
	defer fake.describeAddressesWithContextMutex.Unlock()
	fake.DescribeAddressesWithContextStub = nil
	fake.describeAddressesWithContextReturns = struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAddressesWithContextReturnsOnCall(i int, result1 *ec2.DescribeAddressesOutput, result2 error) {
	fake.describeAddressesWithContextMutex.Lock()
	defer fake.describeAddressesWithContextMutex.Unlock()
	fake.DescribeAddressesWithContextStub = nil
	if fake.describeAddressesWithContextReturnsOnCall == nil {
		fake.describeAddressesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAddressesOutput
			result2 error
		})
	}
	fake.describeAddressesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAggregateIdFormat(arg1 *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error) {
	fake.describeAggregateIdFormatMutex.Lock()
	ret, specificReturn := fake.describeAggregateIdFormatReturnsOnCall[len(fake.describeAggregateIdFormatArgsForCall)]
	fake.describeAggregateIdFormatArgsForCall = append(fake.describeAggregateIdFormatArgsForCall, struct {
		arg1 *ec2.DescribeAggregateIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribeAggregateIdFormat", []interface{}{arg1})
	fake.describeAggregateIdFormatMutex.Unlock()
	if fake.DescribeAggregateIdFormatStub != nil {
		return fake.DescribeAggregateIdFormatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAggregateIdFormatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAggregateIdFormatCallCount() int {
	fake.describeAggregateIdFormatMutex.RLock()
	defer fake.describeAggregateIdFormatMutex.RUnlock()
	return len(fake.describeAggregateIdFormatArgsForCall)
}

func (fake *FakeEC2API) DescribeAggregateIdFormatCalls(stub func(*ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error)) {
	fake.describeAggregateIdFormatMutex.Lock()
	defer fake.describeAggregateIdFormatMutex.Unlock()
	fake.DescribeAggregateIdFormatStub = stub
}

func (fake *FakeEC2API) DescribeAggregateIdFormatArgsForCall(i int) *ec2.DescribeAggregateIdFormatInput {
	fake.describeAggregateIdFormatMutex.RLock()
	defer fake.describeAggregateIdFormatMutex.RUnlock()
	argsForCall := fake.describeAggregateIdFormatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAggregateIdFormatReturns(result1 *ec2.DescribeAggregateIdFormatOutput, result2 error) {
	fake.describeAggregateIdFormatMutex.Lock()
	defer fake.describeAggregateIdFormatMutex.Unlock()
	fake.DescribeAggregateIdFormatStub = nil
	fake.describeAggregateIdFormatReturns = struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAggregateIdFormatReturnsOnCall(i int, result1 *ec2.DescribeAggregateIdFormatOutput, result2 error) {
	fake.describeAggregateIdFormatMutex.Lock()
	defer fake.describeAggregateIdFormatMutex.Unlock()
	fake.DescribeAggregateIdFormatStub = nil
	if fake.describeAggregateIdFormatReturnsOnCall == nil {
		fake.describeAggregateIdFormatReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAggregateIdFormatOutput
			result2 error
		})
	}
	fake.describeAggregateIdFormatReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAggregateIdFormatRequest(arg1 *ec2.DescribeAggregateIdFormatInput) (*request.Request, *ec2.DescribeAggregateIdFormatOutput) {
	fake.describeAggregateIdFormatRequestMutex.Lock()
	ret, specificReturn := fake.describeAggregateIdFormatRequestReturnsOnCall[len(fake.describeAggregateIdFormatRequestArgsForCall)]
	fake.describeAggregateIdFormatRequestArgsForCall = append(fake.describeAggregateIdFormatRequestArgsForCall, struct {
		arg1 *ec2.DescribeAggregateIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribeAggregateIdFormatRequest", []interface{}{arg1})
	fake.describeAggregateIdFormatRequestMutex.Unlock()
	if fake.DescribeAggregateIdFormatRequestStub != nil {
		return fake.DescribeAggregateIdFormatRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAggregateIdFormatRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAggregateIdFormatRequestCallCount() int {
	fake.describeAggregateIdFormatRequestMutex.RLock()
	defer fake.describeAggregateIdFormatRequestMutex.RUnlock()
	return len(fake.describeAggregateIdFormatRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeAggregateIdFormatRequestCalls(stub func(*ec2.DescribeAggregateIdFormatInput) (*request.Request, *ec2.DescribeAggregateIdFormatOutput)) {
	fake.describeAggregateIdFormatRequestMutex.Lock()
	defer fake.describeAggregateIdFormatRequestMutex.Unlock()
	fake.DescribeAggregateIdFormatRequestStub = stub
}

func (fake *FakeEC2API) DescribeAggregateIdFormatRequestArgsForCall(i int) *ec2.DescribeAggregateIdFormatInput {
	fake.describeAggregateIdFormatRequestMutex.RLock()
	defer fake.describeAggregateIdFormatRequestMutex.RUnlock()
	argsForCall := fake.describeAggregateIdFormatRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAggregateIdFormatRequestReturns(result1 *request.Request, result2 *ec2.DescribeAggregateIdFormatOutput) {
	fake.describeAggregateIdFormatRequestMutex.Lock()
	defer fake.describeAggregateIdFormatRequestMutex.Unlock()
	fake.DescribeAggregateIdFormatRequestStub = nil
	fake.describeAggregateIdFormatRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeAggregateIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAggregateIdFormatRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeAggregateIdFormatOutput) {
	fake.describeAggregateIdFormatRequestMutex.Lock()
	defer fake.describeAggregateIdFormatRequestMutex.Unlock()
	fake.DescribeAggregateIdFormatRequestStub = nil
	if fake.describeAggregateIdFormatRequestReturnsOnCall == nil {
		fake.describeAggregateIdFormatRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeAggregateIdFormatOutput
		})
	}
	fake.describeAggregateIdFormatRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeAggregateIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAggregateIdFormatWithContext(arg1 aws.Context, arg2 *ec2.DescribeAggregateIdFormatInput, arg3 ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error) {
	fake.describeAggregateIdFormatWithContextMutex.Lock()
	ret, specificReturn := fake.describeAggregateIdFormatWithContextReturnsOnCall[len(fake.describeAggregateIdFormatWithContextArgsForCall)]
	fake.describeAggregateIdFormatWithContextArgsForCall = append(fake.describeAggregateIdFormatWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAggregateIdFormatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAggregateIdFormatWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAggregateIdFormatWithContextMutex.Unlock()
	if fake.DescribeAggregateIdFormatWithContextStub != nil {
		return fake.DescribeAggregateIdFormatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAggregateIdFormatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAggregateIdFormatWithContextCallCount() int {
	fake.describeAggregateIdFormatWithContextMutex.RLock()
	defer fake.describeAggregateIdFormatWithContextMutex.RUnlock()
	return len(fake.describeAggregateIdFormatWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeAggregateIdFormatWithContextCalls(stub func(aws.Context, *ec2.DescribeAggregateIdFormatInput, ...request.Option) (*ec2.DescribeAggregateIdFormatOutput, error)) {
	fake.describeAggregateIdFormatWithContextMutex.Lock()
	defer fake.describeAggregateIdFormatWithContextMutex.Unlock()
	fake.DescribeAggregateIdFormatWithContextStub = stub
}

func (fake *FakeEC2API) DescribeAggregateIdFormatWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeAggregateIdFormatInput, []request.Option) {
	fake.describeAggregateIdFormatWithContextMutex.RLock()
	defer fake.describeAggregateIdFormatWithContextMutex.RUnlock()
	argsForCall := fake.describeAggregateIdFormatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeAggregateIdFormatWithContextReturns(result1 *ec2.DescribeAggregateIdFormatOutput, result2 error) {
	fake.describeAggregateIdFormatWithContextMutex.Lock()
	defer fake.describeAggregateIdFormatWithContextMutex.Unlock()
	fake.DescribeAggregateIdFormatWithContextStub = nil
	fake.describeAggregateIdFormatWithContextReturns = struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAggregateIdFormatWithContextReturnsOnCall(i int, result1 *ec2.DescribeAggregateIdFormatOutput, result2 error) {
	fake.describeAggregateIdFormatWithContextMutex.Lock()
	defer fake.describeAggregateIdFormatWithContextMutex.Unlock()
	fake.DescribeAggregateIdFormatWithContextStub = nil
	if fake.describeAggregateIdFormatWithContextReturnsOnCall == nil {
		fake.describeAggregateIdFormatWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAggregateIdFormatOutput
			result2 error
		})
	}
	fake.describeAggregateIdFormatWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAggregateIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAvailabilityZones(arg1 *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	fake.describeAvailabilityZonesMutex.Lock()
	ret, specificReturn := fake.describeAvailabilityZonesReturnsOnCall[len(fake.describeAvailabilityZonesArgsForCall)]
	fake.describeAvailabilityZonesArgsForCall = append(fake.describeAvailabilityZonesArgsForCall, struct {
		arg1 *ec2.DescribeAvailabilityZonesInput
	}{arg1})
	fake.recordInvocation("DescribeAvailabilityZones", []interface{}{arg1})
	fake.describeAvailabilityZonesMutex.Unlock()
	if fake.DescribeAvailabilityZonesStub != nil {
		return fake.DescribeAvailabilityZonesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAvailabilityZonesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAvailabilityZonesCallCount() int {
	fake.describeAvailabilityZonesMutex.RLock()
	defer fake.describeAvailabilityZonesMutex.RUnlock()
	return len(fake.describeAvailabilityZonesArgsForCall)
}

func (fake *FakeEC2API) DescribeAvailabilityZonesCalls(stub func(*ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error)) {
	fake.describeAvailabilityZonesMutex.Lock()
	defer fake.describeAvailabilityZonesMutex.Unlock()
	fake.DescribeAvailabilityZonesStub = stub
}

func (fake *FakeEC2API) DescribeAvailabilityZonesArgsForCall(i int) *ec2.DescribeAvailabilityZonesInput {
	fake.describeAvailabilityZonesMutex.RLock()
	defer fake.describeAvailabilityZonesMutex.RUnlock()
	argsForCall := fake.describeAvailabilityZonesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAvailabilityZonesReturns(result1 *ec2.DescribeAvailabilityZonesOutput, result2 error) {
	fake.describeAvailabilityZonesMutex.Lock()
	defer fake.describeAvailabilityZonesMutex.Unlock()
	fake.DescribeAvailabilityZonesStub = nil
	fake.describeAvailabilityZonesReturns = struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAvailabilityZonesReturnsOnCall(i int, result1 *ec2.DescribeAvailabilityZonesOutput, result2 error) {
	fake.describeAvailabilityZonesMutex.Lock()
	defer fake.describeAvailabilityZonesMutex.Unlock()
	fake.DescribeAvailabilityZonesStub = nil
	if fake.describeAvailabilityZonesReturnsOnCall == nil {
		fake.describeAvailabilityZonesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAvailabilityZonesOutput
			result2 error
		})
	}
	fake.describeAvailabilityZonesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAvailabilityZonesRequest(arg1 *ec2.DescribeAvailabilityZonesInput) (*request.Request, *ec2.DescribeAvailabilityZonesOutput) {
	fake.describeAvailabilityZonesRequestMutex.Lock()
	ret, specificReturn := fake.describeAvailabilityZonesRequestReturnsOnCall[len(fake.describeAvailabilityZonesRequestArgsForCall)]
	fake.describeAvailabilityZonesRequestArgsForCall = append(fake.describeAvailabilityZonesRequestArgsForCall, struct {
		arg1 *ec2.DescribeAvailabilityZonesInput
	}{arg1})
	fake.recordInvocation("DescribeAvailabilityZonesRequest", []interface{}{arg1})
	fake.describeAvailabilityZonesRequestMutex.Unlock()
	if fake.DescribeAvailabilityZonesRequestStub != nil {
		return fake.DescribeAvailabilityZonesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAvailabilityZonesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAvailabilityZonesRequestCallCount() int {
	fake.describeAvailabilityZonesRequestMutex.RLock()
	defer fake.describeAvailabilityZonesRequestMutex.RUnlock()
	return len(fake.describeAvailabilityZonesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeAvailabilityZonesRequestCalls(stub func(*ec2.DescribeAvailabilityZonesInput) (*request.Request, *ec2.DescribeAvailabilityZonesOutput)) {
	fake.describeAvailabilityZonesRequestMutex.Lock()
	defer fake.describeAvailabilityZonesRequestMutex.Unlock()
	fake.DescribeAvailabilityZonesRequestStub = stub
}

func (fake *FakeEC2API) DescribeAvailabilityZonesRequestArgsForCall(i int) *ec2.DescribeAvailabilityZonesInput {
	fake.describeAvailabilityZonesRequestMutex.RLock()
	defer fake.describeAvailabilityZonesRequestMutex.RUnlock()
	argsForCall := fake.describeAvailabilityZonesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeAvailabilityZonesRequestReturns(result1 *request.Request, result2 *ec2.DescribeAvailabilityZonesOutput) {
	fake.describeAvailabilityZonesRequestMutex.Lock()
	defer fake.describeAvailabilityZonesRequestMutex.Unlock()
	fake.DescribeAvailabilityZonesRequestStub = nil
	fake.describeAvailabilityZonesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeAvailabilityZonesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAvailabilityZonesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeAvailabilityZonesOutput) {
	fake.describeAvailabilityZonesRequestMutex.Lock()
	defer fake.describeAvailabilityZonesRequestMutex.Unlock()
	fake.DescribeAvailabilityZonesRequestStub = nil
	if fake.describeAvailabilityZonesRequestReturnsOnCall == nil {
		fake.describeAvailabilityZonesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeAvailabilityZonesOutput
		})
	}
	fake.describeAvailabilityZonesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeAvailabilityZonesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAvailabilityZonesWithContext(arg1 aws.Context, arg2 *ec2.DescribeAvailabilityZonesInput, arg3 ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error) {
	fake.describeAvailabilityZonesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAvailabilityZonesWithContextReturnsOnCall[len(fake.describeAvailabilityZonesWithContextArgsForCall)]
	fake.describeAvailabilityZonesWithContextArgsForCall = append(fake.describeAvailabilityZonesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeAvailabilityZonesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAvailabilityZonesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAvailabilityZonesWithContextMutex.Unlock()
	if fake.DescribeAvailabilityZonesWithContextStub != nil {
		return fake.DescribeAvailabilityZonesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAvailabilityZonesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeAvailabilityZonesWithContextCallCount() int {
	fake.describeAvailabilityZonesWithContextMutex.RLock()
	defer fake.describeAvailabilityZonesWithContextMutex.RUnlock()
	return len(fake.describeAvailabilityZonesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeAvailabilityZonesWithContextCalls(stub func(aws.Context, *ec2.DescribeAvailabilityZonesInput, ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error)) {
	fake.describeAvailabilityZonesWithContextMutex.Lock()
	defer fake.describeAvailabilityZonesWithContextMutex.Unlock()
	fake.DescribeAvailabilityZonesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeAvailabilityZonesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeAvailabilityZonesInput, []request.Option) {
	fake.describeAvailabilityZonesWithContextMutex.RLock()
	defer fake.describeAvailabilityZonesWithContextMutex.RUnlock()
	argsForCall := fake.describeAvailabilityZonesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeAvailabilityZonesWithContextReturns(result1 *ec2.DescribeAvailabilityZonesOutput, result2 error) {
	fake.describeAvailabilityZonesWithContextMutex.Lock()
	defer fake.describeAvailabilityZonesWithContextMutex.Unlock()
	fake.DescribeAvailabilityZonesWithContextStub = nil
	fake.describeAvailabilityZonesWithContextReturns = struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeAvailabilityZonesWithContextReturnsOnCall(i int, result1 *ec2.DescribeAvailabilityZonesOutput, result2 error) {
	fake.describeAvailabilityZonesWithContextMutex.Lock()
	defer fake.describeAvailabilityZonesWithContextMutex.Unlock()
	fake.DescribeAvailabilityZonesWithContextStub = nil
	if fake.describeAvailabilityZonesWithContextReturnsOnCall == nil {
		fake.describeAvailabilityZonesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeAvailabilityZonesOutput
			result2 error
		})
	}
	fake.describeAvailabilityZonesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeAvailabilityZonesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeBundleTasks(arg1 *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	fake.describeBundleTasksMutex.Lock()
	ret, specificReturn := fake.describeBundleTasksReturnsOnCall[len(fake.describeBundleTasksArgsForCall)]
	fake.describeBundleTasksArgsForCall = append(fake.describeBundleTasksArgsForCall, struct {
		arg1 *ec2.DescribeBundleTasksInput
	}{arg1})
	fake.recordInvocation("DescribeBundleTasks", []interface{}{arg1})
	fake.describeBundleTasksMutex.Unlock()
	if fake.DescribeBundleTasksStub != nil {
		return fake.DescribeBundleTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeBundleTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeBundleTasksCallCount() int {
	fake.describeBundleTasksMutex.RLock()
	defer fake.describeBundleTasksMutex.RUnlock()
	return len(fake.describeBundleTasksArgsForCall)
}

func (fake *FakeEC2API) DescribeBundleTasksCalls(stub func(*ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error)) {
	fake.describeBundleTasksMutex.Lock()
	defer fake.describeBundleTasksMutex.Unlock()
	fake.DescribeBundleTasksStub = stub
}

func (fake *FakeEC2API) DescribeBundleTasksArgsForCall(i int) *ec2.DescribeBundleTasksInput {
	fake.describeBundleTasksMutex.RLock()
	defer fake.describeBundleTasksMutex.RUnlock()
	argsForCall := fake.describeBundleTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeBundleTasksReturns(result1 *ec2.DescribeBundleTasksOutput, result2 error) {
	fake.describeBundleTasksMutex.Lock()
	defer fake.describeBundleTasksMutex.Unlock()
	fake.DescribeBundleTasksStub = nil
	fake.describeBundleTasksReturns = struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeBundleTasksReturnsOnCall(i int, result1 *ec2.DescribeBundleTasksOutput, result2 error) {
	fake.describeBundleTasksMutex.Lock()
	defer fake.describeBundleTasksMutex.Unlock()
	fake.DescribeBundleTasksStub = nil
	if fake.describeBundleTasksReturnsOnCall == nil {
		fake.describeBundleTasksReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeBundleTasksOutput
			result2 error
		})
	}
	fake.describeBundleTasksReturnsOnCall[i] = struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeBundleTasksRequest(arg1 *ec2.DescribeBundleTasksInput) (*request.Request, *ec2.DescribeBundleTasksOutput) {
	fake.describeBundleTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeBundleTasksRequestReturnsOnCall[len(fake.describeBundleTasksRequestArgsForCall)]
	fake.describeBundleTasksRequestArgsForCall = append(fake.describeBundleTasksRequestArgsForCall, struct {
		arg1 *ec2.DescribeBundleTasksInput
	}{arg1})
	fake.recordInvocation("DescribeBundleTasksRequest", []interface{}{arg1})
	fake.describeBundleTasksRequestMutex.Unlock()
	if fake.DescribeBundleTasksRequestStub != nil {
		return fake.DescribeBundleTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeBundleTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeBundleTasksRequestCallCount() int {
	fake.describeBundleTasksRequestMutex.RLock()
	defer fake.describeBundleTasksRequestMutex.RUnlock()
	return len(fake.describeBundleTasksRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeBundleTasksRequestCalls(stub func(*ec2.DescribeBundleTasksInput) (*request.Request, *ec2.DescribeBundleTasksOutput)) {
	fake.describeBundleTasksRequestMutex.Lock()
	defer fake.describeBundleTasksRequestMutex.Unlock()
	fake.DescribeBundleTasksRequestStub = stub
}

func (fake *FakeEC2API) DescribeBundleTasksRequestArgsForCall(i int) *ec2.DescribeBundleTasksInput {
	fake.describeBundleTasksRequestMutex.RLock()
	defer fake.describeBundleTasksRequestMutex.RUnlock()
	argsForCall := fake.describeBundleTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeBundleTasksRequestReturns(result1 *request.Request, result2 *ec2.DescribeBundleTasksOutput) {
	fake.describeBundleTasksRequestMutex.Lock()
	defer fake.describeBundleTasksRequestMutex.Unlock()
	fake.DescribeBundleTasksRequestStub = nil
	fake.describeBundleTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeBundleTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeBundleTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeBundleTasksOutput) {
	fake.describeBundleTasksRequestMutex.Lock()
	defer fake.describeBundleTasksRequestMutex.Unlock()
	fake.DescribeBundleTasksRequestStub = nil
	if fake.describeBundleTasksRequestReturnsOnCall == nil {
		fake.describeBundleTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeBundleTasksOutput
		})
	}
	fake.describeBundleTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeBundleTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeBundleTasksWithContext(arg1 aws.Context, arg2 *ec2.DescribeBundleTasksInput, arg3 ...request.Option) (*ec2.DescribeBundleTasksOutput, error) {
	fake.describeBundleTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeBundleTasksWithContextReturnsOnCall[len(fake.describeBundleTasksWithContextArgsForCall)]
	fake.describeBundleTasksWithContextArgsForCall = append(fake.describeBundleTasksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeBundleTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeBundleTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeBundleTasksWithContextMutex.Unlock()
	if fake.DescribeBundleTasksWithContextStub != nil {
		return fake.DescribeBundleTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeBundleTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeBundleTasksWithContextCallCount() int {
	fake.describeBundleTasksWithContextMutex.RLock()
	defer fake.describeBundleTasksWithContextMutex.RUnlock()
	return len(fake.describeBundleTasksWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeBundleTasksWithContextCalls(stub func(aws.Context, *ec2.DescribeBundleTasksInput, ...request.Option) (*ec2.DescribeBundleTasksOutput, error)) {
	fake.describeBundleTasksWithContextMutex.Lock()
	defer fake.describeBundleTasksWithContextMutex.Unlock()
	fake.DescribeBundleTasksWithContextStub = stub
}

func (fake *FakeEC2API) DescribeBundleTasksWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeBundleTasksInput, []request.Option) {
	fake.describeBundleTasksWithContextMutex.RLock()
	defer fake.describeBundleTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeBundleTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeBundleTasksWithContextReturns(result1 *ec2.DescribeBundleTasksOutput, result2 error) {
	fake.describeBundleTasksWithContextMutex.Lock()
	defer fake.describeBundleTasksWithContextMutex.Unlock()
	fake.DescribeBundleTasksWithContextStub = nil
	fake.describeBundleTasksWithContextReturns = struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeBundleTasksWithContextReturnsOnCall(i int, result1 *ec2.DescribeBundleTasksOutput, result2 error) {
	fake.describeBundleTasksWithContextMutex.Lock()
	defer fake.describeBundleTasksWithContextMutex.Unlock()
	fake.DescribeBundleTasksWithContextStub = nil
	if fake.describeBundleTasksWithContextReturnsOnCall == nil {
		fake.describeBundleTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeBundleTasksOutput
			result2 error
		})
	}
	fake.describeBundleTasksWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeBundleTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeByoipCidrs(arg1 *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error) {
	fake.describeByoipCidrsMutex.Lock()
	ret, specificReturn := fake.describeByoipCidrsReturnsOnCall[len(fake.describeByoipCidrsArgsForCall)]
	fake.describeByoipCidrsArgsForCall = append(fake.describeByoipCidrsArgsForCall, struct {
		arg1 *ec2.DescribeByoipCidrsInput
	}{arg1})
	fake.recordInvocation("DescribeByoipCidrs", []interface{}{arg1})
	fake.describeByoipCidrsMutex.Unlock()
	if fake.DescribeByoipCidrsStub != nil {
		return fake.DescribeByoipCidrsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeByoipCidrsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeByoipCidrsCallCount() int {
	fake.describeByoipCidrsMutex.RLock()
	defer fake.describeByoipCidrsMutex.RUnlock()
	return len(fake.describeByoipCidrsArgsForCall)
}

func (fake *FakeEC2API) DescribeByoipCidrsCalls(stub func(*ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error)) {
	fake.describeByoipCidrsMutex.Lock()
	defer fake.describeByoipCidrsMutex.Unlock()
	fake.DescribeByoipCidrsStub = stub
}

func (fake *FakeEC2API) DescribeByoipCidrsArgsForCall(i int) *ec2.DescribeByoipCidrsInput {
	fake.describeByoipCidrsMutex.RLock()
	defer fake.describeByoipCidrsMutex.RUnlock()
	argsForCall := fake.describeByoipCidrsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeByoipCidrsReturns(result1 *ec2.DescribeByoipCidrsOutput, result2 error) {
	fake.describeByoipCidrsMutex.Lock()
	defer fake.describeByoipCidrsMutex.Unlock()
	fake.DescribeByoipCidrsStub = nil
	fake.describeByoipCidrsReturns = struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeByoipCidrsReturnsOnCall(i int, result1 *ec2.DescribeByoipCidrsOutput, result2 error) {
	fake.describeByoipCidrsMutex.Lock()
	defer fake.describeByoipCidrsMutex.Unlock()
	fake.DescribeByoipCidrsStub = nil
	if fake.describeByoipCidrsReturnsOnCall == nil {
		fake.describeByoipCidrsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeByoipCidrsOutput
			result2 error
		})
	}
	fake.describeByoipCidrsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeByoipCidrsRequest(arg1 *ec2.DescribeByoipCidrsInput) (*request.Request, *ec2.DescribeByoipCidrsOutput) {
	fake.describeByoipCidrsRequestMutex.Lock()
	ret, specificReturn := fake.describeByoipCidrsRequestReturnsOnCall[len(fake.describeByoipCidrsRequestArgsForCall)]
	fake.describeByoipCidrsRequestArgsForCall = append(fake.describeByoipCidrsRequestArgsForCall, struct {
		arg1 *ec2.DescribeByoipCidrsInput
	}{arg1})
	fake.recordInvocation("DescribeByoipCidrsRequest", []interface{}{arg1})
	fake.describeByoipCidrsRequestMutex.Unlock()
	if fake.DescribeByoipCidrsRequestStub != nil {
		return fake.DescribeByoipCidrsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeByoipCidrsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeByoipCidrsRequestCallCount() int {
	fake.describeByoipCidrsRequestMutex.RLock()
	defer fake.describeByoipCidrsRequestMutex.RUnlock()
	return len(fake.describeByoipCidrsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeByoipCidrsRequestCalls(stub func(*ec2.DescribeByoipCidrsInput) (*request.Request, *ec2.DescribeByoipCidrsOutput)) {
	fake.describeByoipCidrsRequestMutex.Lock()
	defer fake.describeByoipCidrsRequestMutex.Unlock()
	fake.DescribeByoipCidrsRequestStub = stub
}

func (fake *FakeEC2API) DescribeByoipCidrsRequestArgsForCall(i int) *ec2.DescribeByoipCidrsInput {
	fake.describeByoipCidrsRequestMutex.RLock()
	defer fake.describeByoipCidrsRequestMutex.RUnlock()
	argsForCall := fake.describeByoipCidrsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeByoipCidrsRequestReturns(result1 *request.Request, result2 *ec2.DescribeByoipCidrsOutput) {
	fake.describeByoipCidrsRequestMutex.Lock()
	defer fake.describeByoipCidrsRequestMutex.Unlock()
	fake.DescribeByoipCidrsRequestStub = nil
	fake.describeByoipCidrsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeByoipCidrsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeByoipCidrsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeByoipCidrsOutput) {
	fake.describeByoipCidrsRequestMutex.Lock()
	defer fake.describeByoipCidrsRequestMutex.Unlock()
	fake.DescribeByoipCidrsRequestStub = nil
	if fake.describeByoipCidrsRequestReturnsOnCall == nil {
		fake.describeByoipCidrsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeByoipCidrsOutput
		})
	}
	fake.describeByoipCidrsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeByoipCidrsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeByoipCidrsWithContext(arg1 aws.Context, arg2 *ec2.DescribeByoipCidrsInput, arg3 ...request.Option) (*ec2.DescribeByoipCidrsOutput, error) {
	fake.describeByoipCidrsWithContextMutex.Lock()
	ret, specificReturn := fake.describeByoipCidrsWithContextReturnsOnCall[len(fake.describeByoipCidrsWithContextArgsForCall)]
	fake.describeByoipCidrsWithContextArgsForCall = append(fake.describeByoipCidrsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeByoipCidrsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeByoipCidrsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeByoipCidrsWithContextMutex.Unlock()
	if fake.DescribeByoipCidrsWithContextStub != nil {
		return fake.DescribeByoipCidrsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeByoipCidrsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeByoipCidrsWithContextCallCount() int {
	fake.describeByoipCidrsWithContextMutex.RLock()
	defer fake.describeByoipCidrsWithContextMutex.RUnlock()
	return len(fake.describeByoipCidrsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeByoipCidrsWithContextCalls(stub func(aws.Context, *ec2.DescribeByoipCidrsInput, ...request.Option) (*ec2.DescribeByoipCidrsOutput, error)) {
	fake.describeByoipCidrsWithContextMutex.Lock()
	defer fake.describeByoipCidrsWithContextMutex.Unlock()
	fake.DescribeByoipCidrsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeByoipCidrsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeByoipCidrsInput, []request.Option) {
	fake.describeByoipCidrsWithContextMutex.RLock()
	defer fake.describeByoipCidrsWithContextMutex.RUnlock()
	argsForCall := fake.describeByoipCidrsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeByoipCidrsWithContextReturns(result1 *ec2.DescribeByoipCidrsOutput, result2 error) {
	fake.describeByoipCidrsWithContextMutex.Lock()
	defer fake.describeByoipCidrsWithContextMutex.Unlock()
	fake.DescribeByoipCidrsWithContextStub = nil
	fake.describeByoipCidrsWithContextReturns = struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeByoipCidrsWithContextReturnsOnCall(i int, result1 *ec2.DescribeByoipCidrsOutput, result2 error) {
	fake.describeByoipCidrsWithContextMutex.Lock()
	defer fake.describeByoipCidrsWithContextMutex.Unlock()
	fake.DescribeByoipCidrsWithContextStub = nil
	if fake.describeByoipCidrsWithContextReturnsOnCall == nil {
		fake.describeByoipCidrsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeByoipCidrsOutput
			result2 error
		})
	}
	fake.describeByoipCidrsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeByoipCidrsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCapacityReservations(arg1 *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error) {
	fake.describeCapacityReservationsMutex.Lock()
	ret, specificReturn := fake.describeCapacityReservationsReturnsOnCall[len(fake.describeCapacityReservationsArgsForCall)]
	fake.describeCapacityReservationsArgsForCall = append(fake.describeCapacityReservationsArgsForCall, struct {
		arg1 *ec2.DescribeCapacityReservationsInput
	}{arg1})
	fake.recordInvocation("DescribeCapacityReservations", []interface{}{arg1})
	fake.describeCapacityReservationsMutex.Unlock()
	if fake.DescribeCapacityReservationsStub != nil {
		return fake.DescribeCapacityReservationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCapacityReservationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeCapacityReservationsCallCount() int {
	fake.describeCapacityReservationsMutex.RLock()
	defer fake.describeCapacityReservationsMutex.RUnlock()
	return len(fake.describeCapacityReservationsArgsForCall)
}

func (fake *FakeEC2API) DescribeCapacityReservationsCalls(stub func(*ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error)) {
	fake.describeCapacityReservationsMutex.Lock()
	defer fake.describeCapacityReservationsMutex.Unlock()
	fake.DescribeCapacityReservationsStub = stub
}

func (fake *FakeEC2API) DescribeCapacityReservationsArgsForCall(i int) *ec2.DescribeCapacityReservationsInput {
	fake.describeCapacityReservationsMutex.RLock()
	defer fake.describeCapacityReservationsMutex.RUnlock()
	argsForCall := fake.describeCapacityReservationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeCapacityReservationsReturns(result1 *ec2.DescribeCapacityReservationsOutput, result2 error) {
	fake.describeCapacityReservationsMutex.Lock()
	defer fake.describeCapacityReservationsMutex.Unlock()
	fake.DescribeCapacityReservationsStub = nil
	fake.describeCapacityReservationsReturns = struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCapacityReservationsReturnsOnCall(i int, result1 *ec2.DescribeCapacityReservationsOutput, result2 error) {
	fake.describeCapacityReservationsMutex.Lock()
	defer fake.describeCapacityReservationsMutex.Unlock()
	fake.DescribeCapacityReservationsStub = nil
	if fake.describeCapacityReservationsReturnsOnCall == nil {
		fake.describeCapacityReservationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeCapacityReservationsOutput
			result2 error
		})
	}
	fake.describeCapacityReservationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCapacityReservationsRequest(arg1 *ec2.DescribeCapacityReservationsInput) (*request.Request, *ec2.DescribeCapacityReservationsOutput) {
	fake.describeCapacityReservationsRequestMutex.Lock()
	ret, specificReturn := fake.describeCapacityReservationsRequestReturnsOnCall[len(fake.describeCapacityReservationsRequestArgsForCall)]
	fake.describeCapacityReservationsRequestArgsForCall = append(fake.describeCapacityReservationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeCapacityReservationsInput
	}{arg1})
	fake.recordInvocation("DescribeCapacityReservationsRequest", []interface{}{arg1})
	fake.describeCapacityReservationsRequestMutex.Unlock()
	if fake.DescribeCapacityReservationsRequestStub != nil {
		return fake.DescribeCapacityReservationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCapacityReservationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeCapacityReservationsRequestCallCount() int {
	fake.describeCapacityReservationsRequestMutex.RLock()
	defer fake.describeCapacityReservationsRequestMutex.RUnlock()
	return len(fake.describeCapacityReservationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeCapacityReservationsRequestCalls(stub func(*ec2.DescribeCapacityReservationsInput) (*request.Request, *ec2.DescribeCapacityReservationsOutput)) {
	fake.describeCapacityReservationsRequestMutex.Lock()
	defer fake.describeCapacityReservationsRequestMutex.Unlock()
	fake.DescribeCapacityReservationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeCapacityReservationsRequestArgsForCall(i int) *ec2.DescribeCapacityReservationsInput {
	fake.describeCapacityReservationsRequestMutex.RLock()
	defer fake.describeCapacityReservationsRequestMutex.RUnlock()
	argsForCall := fake.describeCapacityReservationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeCapacityReservationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeCapacityReservationsOutput) {
	fake.describeCapacityReservationsRequestMutex.Lock()
	defer fake.describeCapacityReservationsRequestMutex.Unlock()
	fake.DescribeCapacityReservationsRequestStub = nil
	fake.describeCapacityReservationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeCapacityReservationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCapacityReservationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeCapacityReservationsOutput) {
	fake.describeCapacityReservationsRequestMutex.Lock()
	defer fake.describeCapacityReservationsRequestMutex.Unlock()
	fake.DescribeCapacityReservationsRequestStub = nil
	if fake.describeCapacityReservationsRequestReturnsOnCall == nil {
		fake.describeCapacityReservationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeCapacityReservationsOutput
		})
	}
	fake.describeCapacityReservationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeCapacityReservationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCapacityReservationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeCapacityReservationsInput, arg3 ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error) {
	fake.describeCapacityReservationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCapacityReservationsWithContextReturnsOnCall[len(fake.describeCapacityReservationsWithContextArgsForCall)]
	fake.describeCapacityReservationsWithContextArgsForCall = append(fake.describeCapacityReservationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeCapacityReservationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCapacityReservationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCapacityReservationsWithContextMutex.Unlock()
	if fake.DescribeCapacityReservationsWithContextStub != nil {
		return fake.DescribeCapacityReservationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCapacityReservationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeCapacityReservationsWithContextCallCount() int {
	fake.describeCapacityReservationsWithContextMutex.RLock()
	defer fake.describeCapacityReservationsWithContextMutex.RUnlock()
	return len(fake.describeCapacityReservationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeCapacityReservationsWithContextCalls(stub func(aws.Context, *ec2.DescribeCapacityReservationsInput, ...request.Option) (*ec2.DescribeCapacityReservationsOutput, error)) {
	fake.describeCapacityReservationsWithContextMutex.Lock()
	defer fake.describeCapacityReservationsWithContextMutex.Unlock()
	fake.DescribeCapacityReservationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeCapacityReservationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeCapacityReservationsInput, []request.Option) {
	fake.describeCapacityReservationsWithContextMutex.RLock()
	defer fake.describeCapacityReservationsWithContextMutex.RUnlock()
	argsForCall := fake.describeCapacityReservationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeCapacityReservationsWithContextReturns(result1 *ec2.DescribeCapacityReservationsOutput, result2 error) {
	fake.describeCapacityReservationsWithContextMutex.Lock()
	defer fake.describeCapacityReservationsWithContextMutex.Unlock()
	fake.DescribeCapacityReservationsWithContextStub = nil
	fake.describeCapacityReservationsWithContextReturns = struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCapacityReservationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeCapacityReservationsOutput, result2 error) {
	fake.describeCapacityReservationsWithContextMutex.Lock()
	defer fake.describeCapacityReservationsWithContextMutex.Unlock()
	fake.DescribeCapacityReservationsWithContextStub = nil
	if fake.describeCapacityReservationsWithContextReturnsOnCall == nil {
		fake.describeCapacityReservationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeCapacityReservationsOutput
			result2 error
		})
	}
	fake.describeCapacityReservationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeCapacityReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClassicLinkInstances(arg1 *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	fake.describeClassicLinkInstancesMutex.Lock()
	ret, specificReturn := fake.describeClassicLinkInstancesReturnsOnCall[len(fake.describeClassicLinkInstancesArgsForCall)]
	fake.describeClassicLinkInstancesArgsForCall = append(fake.describeClassicLinkInstancesArgsForCall, struct {
		arg1 *ec2.DescribeClassicLinkInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeClassicLinkInstances", []interface{}{arg1})
	fake.describeClassicLinkInstancesMutex.Unlock()
	if fake.DescribeClassicLinkInstancesStub != nil {
		return fake.DescribeClassicLinkInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClassicLinkInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesCallCount() int {
	fake.describeClassicLinkInstancesMutex.RLock()
	defer fake.describeClassicLinkInstancesMutex.RUnlock()
	return len(fake.describeClassicLinkInstancesArgsForCall)
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesCalls(stub func(*ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error)) {
	fake.describeClassicLinkInstancesMutex.Lock()
	defer fake.describeClassicLinkInstancesMutex.Unlock()
	fake.DescribeClassicLinkInstancesStub = stub
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesArgsForCall(i int) *ec2.DescribeClassicLinkInstancesInput {
	fake.describeClassicLinkInstancesMutex.RLock()
	defer fake.describeClassicLinkInstancesMutex.RUnlock()
	argsForCall := fake.describeClassicLinkInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesReturns(result1 *ec2.DescribeClassicLinkInstancesOutput, result2 error) {
	fake.describeClassicLinkInstancesMutex.Lock()
	defer fake.describeClassicLinkInstancesMutex.Unlock()
	fake.DescribeClassicLinkInstancesStub = nil
	fake.describeClassicLinkInstancesReturns = struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesReturnsOnCall(i int, result1 *ec2.DescribeClassicLinkInstancesOutput, result2 error) {
	fake.describeClassicLinkInstancesMutex.Lock()
	defer fake.describeClassicLinkInstancesMutex.Unlock()
	fake.DescribeClassicLinkInstancesStub = nil
	if fake.describeClassicLinkInstancesReturnsOnCall == nil {
		fake.describeClassicLinkInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClassicLinkInstancesOutput
			result2 error
		})
	}
	fake.describeClassicLinkInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesRequest(arg1 *ec2.DescribeClassicLinkInstancesInput) (*request.Request, *ec2.DescribeClassicLinkInstancesOutput) {
	fake.describeClassicLinkInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeClassicLinkInstancesRequestReturnsOnCall[len(fake.describeClassicLinkInstancesRequestArgsForCall)]
	fake.describeClassicLinkInstancesRequestArgsForCall = append(fake.describeClassicLinkInstancesRequestArgsForCall, struct {
		arg1 *ec2.DescribeClassicLinkInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeClassicLinkInstancesRequest", []interface{}{arg1})
	fake.describeClassicLinkInstancesRequestMutex.Unlock()
	if fake.DescribeClassicLinkInstancesRequestStub != nil {
		return fake.DescribeClassicLinkInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClassicLinkInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesRequestCallCount() int {
	fake.describeClassicLinkInstancesRequestMutex.RLock()
	defer fake.describeClassicLinkInstancesRequestMutex.RUnlock()
	return len(fake.describeClassicLinkInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesRequestCalls(stub func(*ec2.DescribeClassicLinkInstancesInput) (*request.Request, *ec2.DescribeClassicLinkInstancesOutput)) {
	fake.describeClassicLinkInstancesRequestMutex.Lock()
	defer fake.describeClassicLinkInstancesRequestMutex.Unlock()
	fake.DescribeClassicLinkInstancesRequestStub = stub
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesRequestArgsForCall(i int) *ec2.DescribeClassicLinkInstancesInput {
	fake.describeClassicLinkInstancesRequestMutex.RLock()
	defer fake.describeClassicLinkInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeClassicLinkInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesRequestReturns(result1 *request.Request, result2 *ec2.DescribeClassicLinkInstancesOutput) {
	fake.describeClassicLinkInstancesRequestMutex.Lock()
	defer fake.describeClassicLinkInstancesRequestMutex.Unlock()
	fake.DescribeClassicLinkInstancesRequestStub = nil
	fake.describeClassicLinkInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeClassicLinkInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeClassicLinkInstancesOutput) {
	fake.describeClassicLinkInstancesRequestMutex.Lock()
	defer fake.describeClassicLinkInstancesRequestMutex.Unlock()
	fake.DescribeClassicLinkInstancesRequestStub = nil
	if fake.describeClassicLinkInstancesRequestReturnsOnCall == nil {
		fake.describeClassicLinkInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeClassicLinkInstancesOutput
		})
	}
	fake.describeClassicLinkInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeClassicLinkInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesWithContext(arg1 aws.Context, arg2 *ec2.DescribeClassicLinkInstancesInput, arg3 ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	fake.describeClassicLinkInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeClassicLinkInstancesWithContextReturnsOnCall[len(fake.describeClassicLinkInstancesWithContextArgsForCall)]
	fake.describeClassicLinkInstancesWithContextArgsForCall = append(fake.describeClassicLinkInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClassicLinkInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClassicLinkInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClassicLinkInstancesWithContextMutex.Unlock()
	if fake.DescribeClassicLinkInstancesWithContextStub != nil {
		return fake.DescribeClassicLinkInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClassicLinkInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesWithContextCallCount() int {
	fake.describeClassicLinkInstancesWithContextMutex.RLock()
	defer fake.describeClassicLinkInstancesWithContextMutex.RUnlock()
	return len(fake.describeClassicLinkInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesWithContextCalls(stub func(aws.Context, *ec2.DescribeClassicLinkInstancesInput, ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error)) {
	fake.describeClassicLinkInstancesWithContextMutex.Lock()
	defer fake.describeClassicLinkInstancesWithContextMutex.Unlock()
	fake.DescribeClassicLinkInstancesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeClassicLinkInstancesInput, []request.Option) {
	fake.describeClassicLinkInstancesWithContextMutex.RLock()
	defer fake.describeClassicLinkInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeClassicLinkInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesWithContextReturns(result1 *ec2.DescribeClassicLinkInstancesOutput, result2 error) {
	fake.describeClassicLinkInstancesWithContextMutex.Lock()
	defer fake.describeClassicLinkInstancesWithContextMutex.Unlock()
	fake.DescribeClassicLinkInstancesWithContextStub = nil
	fake.describeClassicLinkInstancesWithContextReturns = struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClassicLinkInstancesWithContextReturnsOnCall(i int, result1 *ec2.DescribeClassicLinkInstancesOutput, result2 error) {
	fake.describeClassicLinkInstancesWithContextMutex.Lock()
	defer fake.describeClassicLinkInstancesWithContextMutex.Unlock()
	fake.DescribeClassicLinkInstancesWithContextStub = nil
	if fake.describeClassicLinkInstancesWithContextReturnsOnCall == nil {
		fake.describeClassicLinkInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClassicLinkInstancesOutput
			result2 error
		})
	}
	fake.describeClassicLinkInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClassicLinkInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRules(arg1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	fake.describeClientVpnAuthorizationRulesMutex.Lock()
	ret, specificReturn := fake.describeClientVpnAuthorizationRulesReturnsOnCall[len(fake.describeClientVpnAuthorizationRulesArgsForCall)]
	fake.describeClientVpnAuthorizationRulesArgsForCall = append(fake.describeClientVpnAuthorizationRulesArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnAuthorizationRules", []interface{}{arg1})
	fake.describeClientVpnAuthorizationRulesMutex.Unlock()
	if fake.DescribeClientVpnAuthorizationRulesStub != nil {
		return fake.DescribeClientVpnAuthorizationRulesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnAuthorizationRulesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesCallCount() int {
	fake.describeClientVpnAuthorizationRulesMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesMutex.RUnlock()
	return len(fake.describeClientVpnAuthorizationRulesArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesCalls(stub func(*ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)) {
	fake.describeClientVpnAuthorizationRulesMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesArgsForCall(i int) *ec2.DescribeClientVpnAuthorizationRulesInput {
	fake.describeClientVpnAuthorizationRulesMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesMutex.RUnlock()
	argsForCall := fake.describeClientVpnAuthorizationRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesReturns(result1 *ec2.DescribeClientVpnAuthorizationRulesOutput, result2 error) {
	fake.describeClientVpnAuthorizationRulesMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesStub = nil
	fake.describeClientVpnAuthorizationRulesReturns = struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesReturnsOnCall(i int, result1 *ec2.DescribeClientVpnAuthorizationRulesOutput, result2 error) {
	fake.describeClientVpnAuthorizationRulesMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesStub = nil
	if fake.describeClientVpnAuthorizationRulesReturnsOnCall == nil {
		fake.describeClientVpnAuthorizationRulesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
			result2 error
		})
	}
	fake.describeClientVpnAuthorizationRulesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesRequest(arg1 *ec2.DescribeClientVpnAuthorizationRulesInput) (*request.Request, *ec2.DescribeClientVpnAuthorizationRulesOutput) {
	fake.describeClientVpnAuthorizationRulesRequestMutex.Lock()
	ret, specificReturn := fake.describeClientVpnAuthorizationRulesRequestReturnsOnCall[len(fake.describeClientVpnAuthorizationRulesRequestArgsForCall)]
	fake.describeClientVpnAuthorizationRulesRequestArgsForCall = append(fake.describeClientVpnAuthorizationRulesRequestArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnAuthorizationRulesInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnAuthorizationRulesRequest", []interface{}{arg1})
	fake.describeClientVpnAuthorizationRulesRequestMutex.Unlock()
	if fake.DescribeClientVpnAuthorizationRulesRequestStub != nil {
		return fake.DescribeClientVpnAuthorizationRulesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnAuthorizationRulesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesRequestCallCount() int {
	fake.describeClientVpnAuthorizationRulesRequestMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesRequestMutex.RUnlock()
	return len(fake.describeClientVpnAuthorizationRulesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesRequestCalls(stub func(*ec2.DescribeClientVpnAuthorizationRulesInput) (*request.Request, *ec2.DescribeClientVpnAuthorizationRulesOutput)) {
	fake.describeClientVpnAuthorizationRulesRequestMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesRequestMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesRequestStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesRequestArgsForCall(i int) *ec2.DescribeClientVpnAuthorizationRulesInput {
	fake.describeClientVpnAuthorizationRulesRequestMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesRequestMutex.RUnlock()
	argsForCall := fake.describeClientVpnAuthorizationRulesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesRequestReturns(result1 *request.Request, result2 *ec2.DescribeClientVpnAuthorizationRulesOutput) {
	fake.describeClientVpnAuthorizationRulesRequestMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesRequestMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesRequestStub = nil
	fake.describeClientVpnAuthorizationRulesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnAuthorizationRulesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeClientVpnAuthorizationRulesOutput) {
	fake.describeClientVpnAuthorizationRulesRequestMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesRequestMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesRequestStub = nil
	if fake.describeClientVpnAuthorizationRulesRequestReturnsOnCall == nil {
		fake.describeClientVpnAuthorizationRulesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeClientVpnAuthorizationRulesOutput
		})
	}
	fake.describeClientVpnAuthorizationRulesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnAuthorizationRulesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesWithContext(arg1 aws.Context, arg2 *ec2.DescribeClientVpnAuthorizationRulesInput, arg3 ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	fake.describeClientVpnAuthorizationRulesWithContextMutex.Lock()
	ret, specificReturn := fake.describeClientVpnAuthorizationRulesWithContextReturnsOnCall[len(fake.describeClientVpnAuthorizationRulesWithContextArgsForCall)]
	fake.describeClientVpnAuthorizationRulesWithContextArgsForCall = append(fake.describeClientVpnAuthorizationRulesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnAuthorizationRulesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClientVpnAuthorizationRulesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClientVpnAuthorizationRulesWithContextMutex.Unlock()
	if fake.DescribeClientVpnAuthorizationRulesWithContextStub != nil {
		return fake.DescribeClientVpnAuthorizationRulesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnAuthorizationRulesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesWithContextCallCount() int {
	fake.describeClientVpnAuthorizationRulesWithContextMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesWithContextMutex.RUnlock()
	return len(fake.describeClientVpnAuthorizationRulesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesWithContextCalls(stub func(aws.Context, *ec2.DescribeClientVpnAuthorizationRulesInput, ...request.Option) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)) {
	fake.describeClientVpnAuthorizationRulesWithContextMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesWithContextMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeClientVpnAuthorizationRulesInput, []request.Option) {
	fake.describeClientVpnAuthorizationRulesWithContextMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesWithContextMutex.RUnlock()
	argsForCall := fake.describeClientVpnAuthorizationRulesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesWithContextReturns(result1 *ec2.DescribeClientVpnAuthorizationRulesOutput, result2 error) {
	fake.describeClientVpnAuthorizationRulesWithContextMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesWithContextMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesWithContextStub = nil
	fake.describeClientVpnAuthorizationRulesWithContextReturns = struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnAuthorizationRulesWithContextReturnsOnCall(i int, result1 *ec2.DescribeClientVpnAuthorizationRulesOutput, result2 error) {
	fake.describeClientVpnAuthorizationRulesWithContextMutex.Lock()
	defer fake.describeClientVpnAuthorizationRulesWithContextMutex.Unlock()
	fake.DescribeClientVpnAuthorizationRulesWithContextStub = nil
	if fake.describeClientVpnAuthorizationRulesWithContextReturnsOnCall == nil {
		fake.describeClientVpnAuthorizationRulesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
			result2 error
		})
	}
	fake.describeClientVpnAuthorizationRulesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnAuthorizationRulesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnConnections(arg1 *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	fake.describeClientVpnConnectionsMutex.Lock()
	ret, specificReturn := fake.describeClientVpnConnectionsReturnsOnCall[len(fake.describeClientVpnConnectionsArgsForCall)]
	fake.describeClientVpnConnectionsArgsForCall = append(fake.describeClientVpnConnectionsArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnConnections", []interface{}{arg1})
	fake.describeClientVpnConnectionsMutex.Unlock()
	if fake.DescribeClientVpnConnectionsStub != nil {
		return fake.DescribeClientVpnConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsCallCount() int {
	fake.describeClientVpnConnectionsMutex.RLock()
	defer fake.describeClientVpnConnectionsMutex.RUnlock()
	return len(fake.describeClientVpnConnectionsArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsCalls(stub func(*ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error)) {
	fake.describeClientVpnConnectionsMutex.Lock()
	defer fake.describeClientVpnConnectionsMutex.Unlock()
	fake.DescribeClientVpnConnectionsStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsArgsForCall(i int) *ec2.DescribeClientVpnConnectionsInput {
	fake.describeClientVpnConnectionsMutex.RLock()
	defer fake.describeClientVpnConnectionsMutex.RUnlock()
	argsForCall := fake.describeClientVpnConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsReturns(result1 *ec2.DescribeClientVpnConnectionsOutput, result2 error) {
	fake.describeClientVpnConnectionsMutex.Lock()
	defer fake.describeClientVpnConnectionsMutex.Unlock()
	fake.DescribeClientVpnConnectionsStub = nil
	fake.describeClientVpnConnectionsReturns = struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsReturnsOnCall(i int, result1 *ec2.DescribeClientVpnConnectionsOutput, result2 error) {
	fake.describeClientVpnConnectionsMutex.Lock()
	defer fake.describeClientVpnConnectionsMutex.Unlock()
	fake.DescribeClientVpnConnectionsStub = nil
	if fake.describeClientVpnConnectionsReturnsOnCall == nil {
		fake.describeClientVpnConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnConnectionsOutput
			result2 error
		})
	}
	fake.describeClientVpnConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsRequest(arg1 *ec2.DescribeClientVpnConnectionsInput) (*request.Request, *ec2.DescribeClientVpnConnectionsOutput) {
	fake.describeClientVpnConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.describeClientVpnConnectionsRequestReturnsOnCall[len(fake.describeClientVpnConnectionsRequestArgsForCall)]
	fake.describeClientVpnConnectionsRequestArgsForCall = append(fake.describeClientVpnConnectionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnConnectionsRequest", []interface{}{arg1})
	fake.describeClientVpnConnectionsRequestMutex.Unlock()
	if fake.DescribeClientVpnConnectionsRequestStub != nil {
		return fake.DescribeClientVpnConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsRequestCallCount() int {
	fake.describeClientVpnConnectionsRequestMutex.RLock()
	defer fake.describeClientVpnConnectionsRequestMutex.RUnlock()
	return len(fake.describeClientVpnConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsRequestCalls(stub func(*ec2.DescribeClientVpnConnectionsInput) (*request.Request, *ec2.DescribeClientVpnConnectionsOutput)) {
	fake.describeClientVpnConnectionsRequestMutex.Lock()
	defer fake.describeClientVpnConnectionsRequestMutex.Unlock()
	fake.DescribeClientVpnConnectionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsRequestArgsForCall(i int) *ec2.DescribeClientVpnConnectionsInput {
	fake.describeClientVpnConnectionsRequestMutex.RLock()
	defer fake.describeClientVpnConnectionsRequestMutex.RUnlock()
	argsForCall := fake.describeClientVpnConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeClientVpnConnectionsOutput) {
	fake.describeClientVpnConnectionsRequestMutex.Lock()
	defer fake.describeClientVpnConnectionsRequestMutex.Unlock()
	fake.DescribeClientVpnConnectionsRequestStub = nil
	fake.describeClientVpnConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeClientVpnConnectionsOutput) {
	fake.describeClientVpnConnectionsRequestMutex.Lock()
	defer fake.describeClientVpnConnectionsRequestMutex.Unlock()
	fake.DescribeClientVpnConnectionsRequestStub = nil
	if fake.describeClientVpnConnectionsRequestReturnsOnCall == nil {
		fake.describeClientVpnConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeClientVpnConnectionsOutput
		})
	}
	fake.describeClientVpnConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeClientVpnConnectionsInput, arg3 ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	fake.describeClientVpnConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeClientVpnConnectionsWithContextReturnsOnCall[len(fake.describeClientVpnConnectionsWithContextArgsForCall)]
	fake.describeClientVpnConnectionsWithContextArgsForCall = append(fake.describeClientVpnConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClientVpnConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClientVpnConnectionsWithContextMutex.Unlock()
	if fake.DescribeClientVpnConnectionsWithContextStub != nil {
		return fake.DescribeClientVpnConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsWithContextCallCount() int {
	fake.describeClientVpnConnectionsWithContextMutex.RLock()
	defer fake.describeClientVpnConnectionsWithContextMutex.RUnlock()
	return len(fake.describeClientVpnConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsWithContextCalls(stub func(aws.Context, *ec2.DescribeClientVpnConnectionsInput, ...request.Option) (*ec2.DescribeClientVpnConnectionsOutput, error)) {
	fake.describeClientVpnConnectionsWithContextMutex.Lock()
	defer fake.describeClientVpnConnectionsWithContextMutex.Unlock()
	fake.DescribeClientVpnConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeClientVpnConnectionsInput, []request.Option) {
	fake.describeClientVpnConnectionsWithContextMutex.RLock()
	defer fake.describeClientVpnConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.describeClientVpnConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsWithContextReturns(result1 *ec2.DescribeClientVpnConnectionsOutput, result2 error) {
	fake.describeClientVpnConnectionsWithContextMutex.Lock()
	defer fake.describeClientVpnConnectionsWithContextMutex.Unlock()
	fake.DescribeClientVpnConnectionsWithContextStub = nil
	fake.describeClientVpnConnectionsWithContextReturns = struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnConnectionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeClientVpnConnectionsOutput, result2 error) {
	fake.describeClientVpnConnectionsWithContextMutex.Lock()
	defer fake.describeClientVpnConnectionsWithContextMutex.Unlock()
	fake.DescribeClientVpnConnectionsWithContextStub = nil
	if fake.describeClientVpnConnectionsWithContextReturnsOnCall == nil {
		fake.describeClientVpnConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnConnectionsOutput
			result2 error
		})
	}
	fake.describeClientVpnConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnEndpoints(arg1 *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	fake.describeClientVpnEndpointsMutex.Lock()
	ret, specificReturn := fake.describeClientVpnEndpointsReturnsOnCall[len(fake.describeClientVpnEndpointsArgsForCall)]
	fake.describeClientVpnEndpointsArgsForCall = append(fake.describeClientVpnEndpointsArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnEndpointsInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnEndpoints", []interface{}{arg1})
	fake.describeClientVpnEndpointsMutex.Unlock()
	if fake.DescribeClientVpnEndpointsStub != nil {
		return fake.DescribeClientVpnEndpointsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnEndpointsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsCallCount() int {
	fake.describeClientVpnEndpointsMutex.RLock()
	defer fake.describeClientVpnEndpointsMutex.RUnlock()
	return len(fake.describeClientVpnEndpointsArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsCalls(stub func(*ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error)) {
	fake.describeClientVpnEndpointsMutex.Lock()
	defer fake.describeClientVpnEndpointsMutex.Unlock()
	fake.DescribeClientVpnEndpointsStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsArgsForCall(i int) *ec2.DescribeClientVpnEndpointsInput {
	fake.describeClientVpnEndpointsMutex.RLock()
	defer fake.describeClientVpnEndpointsMutex.RUnlock()
	argsForCall := fake.describeClientVpnEndpointsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsReturns(result1 *ec2.DescribeClientVpnEndpointsOutput, result2 error) {
	fake.describeClientVpnEndpointsMutex.Lock()
	defer fake.describeClientVpnEndpointsMutex.Unlock()
	fake.DescribeClientVpnEndpointsStub = nil
	fake.describeClientVpnEndpointsReturns = struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsReturnsOnCall(i int, result1 *ec2.DescribeClientVpnEndpointsOutput, result2 error) {
	fake.describeClientVpnEndpointsMutex.Lock()
	defer fake.describeClientVpnEndpointsMutex.Unlock()
	fake.DescribeClientVpnEndpointsStub = nil
	if fake.describeClientVpnEndpointsReturnsOnCall == nil {
		fake.describeClientVpnEndpointsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnEndpointsOutput
			result2 error
		})
	}
	fake.describeClientVpnEndpointsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsRequest(arg1 *ec2.DescribeClientVpnEndpointsInput) (*request.Request, *ec2.DescribeClientVpnEndpointsOutput) {
	fake.describeClientVpnEndpointsRequestMutex.Lock()
	ret, specificReturn := fake.describeClientVpnEndpointsRequestReturnsOnCall[len(fake.describeClientVpnEndpointsRequestArgsForCall)]
	fake.describeClientVpnEndpointsRequestArgsForCall = append(fake.describeClientVpnEndpointsRequestArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnEndpointsInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnEndpointsRequest", []interface{}{arg1})
	fake.describeClientVpnEndpointsRequestMutex.Unlock()
	if fake.DescribeClientVpnEndpointsRequestStub != nil {
		return fake.DescribeClientVpnEndpointsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnEndpointsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsRequestCallCount() int {
	fake.describeClientVpnEndpointsRequestMutex.RLock()
	defer fake.describeClientVpnEndpointsRequestMutex.RUnlock()
	return len(fake.describeClientVpnEndpointsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsRequestCalls(stub func(*ec2.DescribeClientVpnEndpointsInput) (*request.Request, *ec2.DescribeClientVpnEndpointsOutput)) {
	fake.describeClientVpnEndpointsRequestMutex.Lock()
	defer fake.describeClientVpnEndpointsRequestMutex.Unlock()
	fake.DescribeClientVpnEndpointsRequestStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsRequestArgsForCall(i int) *ec2.DescribeClientVpnEndpointsInput {
	fake.describeClientVpnEndpointsRequestMutex.RLock()
	defer fake.describeClientVpnEndpointsRequestMutex.RUnlock()
	argsForCall := fake.describeClientVpnEndpointsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsRequestReturns(result1 *request.Request, result2 *ec2.DescribeClientVpnEndpointsOutput) {
	fake.describeClientVpnEndpointsRequestMutex.Lock()
	defer fake.describeClientVpnEndpointsRequestMutex.Unlock()
	fake.DescribeClientVpnEndpointsRequestStub = nil
	fake.describeClientVpnEndpointsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnEndpointsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeClientVpnEndpointsOutput) {
	fake.describeClientVpnEndpointsRequestMutex.Lock()
	defer fake.describeClientVpnEndpointsRequestMutex.Unlock()
	fake.DescribeClientVpnEndpointsRequestStub = nil
	if fake.describeClientVpnEndpointsRequestReturnsOnCall == nil {
		fake.describeClientVpnEndpointsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeClientVpnEndpointsOutput
		})
	}
	fake.describeClientVpnEndpointsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnEndpointsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsWithContext(arg1 aws.Context, arg2 *ec2.DescribeClientVpnEndpointsInput, arg3 ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	fake.describeClientVpnEndpointsWithContextMutex.Lock()
	ret, specificReturn := fake.describeClientVpnEndpointsWithContextReturnsOnCall[len(fake.describeClientVpnEndpointsWithContextArgsForCall)]
	fake.describeClientVpnEndpointsWithContextArgsForCall = append(fake.describeClientVpnEndpointsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnEndpointsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClientVpnEndpointsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClientVpnEndpointsWithContextMutex.Unlock()
	if fake.DescribeClientVpnEndpointsWithContextStub != nil {
		return fake.DescribeClientVpnEndpointsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnEndpointsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsWithContextCallCount() int {
	fake.describeClientVpnEndpointsWithContextMutex.RLock()
	defer fake.describeClientVpnEndpointsWithContextMutex.RUnlock()
	return len(fake.describeClientVpnEndpointsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsWithContextCalls(stub func(aws.Context, *ec2.DescribeClientVpnEndpointsInput, ...request.Option) (*ec2.DescribeClientVpnEndpointsOutput, error)) {
	fake.describeClientVpnEndpointsWithContextMutex.Lock()
	defer fake.describeClientVpnEndpointsWithContextMutex.Unlock()
	fake.DescribeClientVpnEndpointsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeClientVpnEndpointsInput, []request.Option) {
	fake.describeClientVpnEndpointsWithContextMutex.RLock()
	defer fake.describeClientVpnEndpointsWithContextMutex.RUnlock()
	argsForCall := fake.describeClientVpnEndpointsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsWithContextReturns(result1 *ec2.DescribeClientVpnEndpointsOutput, result2 error) {
	fake.describeClientVpnEndpointsWithContextMutex.Lock()
	defer fake.describeClientVpnEndpointsWithContextMutex.Unlock()
	fake.DescribeClientVpnEndpointsWithContextStub = nil
	fake.describeClientVpnEndpointsWithContextReturns = struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnEndpointsWithContextReturnsOnCall(i int, result1 *ec2.DescribeClientVpnEndpointsOutput, result2 error) {
	fake.describeClientVpnEndpointsWithContextMutex.Lock()
	defer fake.describeClientVpnEndpointsWithContextMutex.Unlock()
	fake.DescribeClientVpnEndpointsWithContextStub = nil
	if fake.describeClientVpnEndpointsWithContextReturnsOnCall == nil {
		fake.describeClientVpnEndpointsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnEndpointsOutput
			result2 error
		})
	}
	fake.describeClientVpnEndpointsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnRoutes(arg1 *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error) {
	fake.describeClientVpnRoutesMutex.Lock()
	ret, specificReturn := fake.describeClientVpnRoutesReturnsOnCall[len(fake.describeClientVpnRoutesArgsForCall)]
	fake.describeClientVpnRoutesArgsForCall = append(fake.describeClientVpnRoutesArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnRoutesInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnRoutes", []interface{}{arg1})
	fake.describeClientVpnRoutesMutex.Unlock()
	if fake.DescribeClientVpnRoutesStub != nil {
		return fake.DescribeClientVpnRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnRoutesCallCount() int {
	fake.describeClientVpnRoutesMutex.RLock()
	defer fake.describeClientVpnRoutesMutex.RUnlock()
	return len(fake.describeClientVpnRoutesArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnRoutesCalls(stub func(*ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error)) {
	fake.describeClientVpnRoutesMutex.Lock()
	defer fake.describeClientVpnRoutesMutex.Unlock()
	fake.DescribeClientVpnRoutesStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnRoutesArgsForCall(i int) *ec2.DescribeClientVpnRoutesInput {
	fake.describeClientVpnRoutesMutex.RLock()
	defer fake.describeClientVpnRoutesMutex.RUnlock()
	argsForCall := fake.describeClientVpnRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnRoutesReturns(result1 *ec2.DescribeClientVpnRoutesOutput, result2 error) {
	fake.describeClientVpnRoutesMutex.Lock()
	defer fake.describeClientVpnRoutesMutex.Unlock()
	fake.DescribeClientVpnRoutesStub = nil
	fake.describeClientVpnRoutesReturns = struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnRoutesReturnsOnCall(i int, result1 *ec2.DescribeClientVpnRoutesOutput, result2 error) {
	fake.describeClientVpnRoutesMutex.Lock()
	defer fake.describeClientVpnRoutesMutex.Unlock()
	fake.DescribeClientVpnRoutesStub = nil
	if fake.describeClientVpnRoutesReturnsOnCall == nil {
		fake.describeClientVpnRoutesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnRoutesOutput
			result2 error
		})
	}
	fake.describeClientVpnRoutesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnRoutesRequest(arg1 *ec2.DescribeClientVpnRoutesInput) (*request.Request, *ec2.DescribeClientVpnRoutesOutput) {
	fake.describeClientVpnRoutesRequestMutex.Lock()
	ret, specificReturn := fake.describeClientVpnRoutesRequestReturnsOnCall[len(fake.describeClientVpnRoutesRequestArgsForCall)]
	fake.describeClientVpnRoutesRequestArgsForCall = append(fake.describeClientVpnRoutesRequestArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnRoutesInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnRoutesRequest", []interface{}{arg1})
	fake.describeClientVpnRoutesRequestMutex.Unlock()
	if fake.DescribeClientVpnRoutesRequestStub != nil {
		return fake.DescribeClientVpnRoutesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnRoutesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnRoutesRequestCallCount() int {
	fake.describeClientVpnRoutesRequestMutex.RLock()
	defer fake.describeClientVpnRoutesRequestMutex.RUnlock()
	return len(fake.describeClientVpnRoutesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnRoutesRequestCalls(stub func(*ec2.DescribeClientVpnRoutesInput) (*request.Request, *ec2.DescribeClientVpnRoutesOutput)) {
	fake.describeClientVpnRoutesRequestMutex.Lock()
	defer fake.describeClientVpnRoutesRequestMutex.Unlock()
	fake.DescribeClientVpnRoutesRequestStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnRoutesRequestArgsForCall(i int) *ec2.DescribeClientVpnRoutesInput {
	fake.describeClientVpnRoutesRequestMutex.RLock()
	defer fake.describeClientVpnRoutesRequestMutex.RUnlock()
	argsForCall := fake.describeClientVpnRoutesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnRoutesRequestReturns(result1 *request.Request, result2 *ec2.DescribeClientVpnRoutesOutput) {
	fake.describeClientVpnRoutesRequestMutex.Lock()
	defer fake.describeClientVpnRoutesRequestMutex.Unlock()
	fake.DescribeClientVpnRoutesRequestStub = nil
	fake.describeClientVpnRoutesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnRoutesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnRoutesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeClientVpnRoutesOutput) {
	fake.describeClientVpnRoutesRequestMutex.Lock()
	defer fake.describeClientVpnRoutesRequestMutex.Unlock()
	fake.DescribeClientVpnRoutesRequestStub = nil
	if fake.describeClientVpnRoutesRequestReturnsOnCall == nil {
		fake.describeClientVpnRoutesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeClientVpnRoutesOutput
		})
	}
	fake.describeClientVpnRoutesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnRoutesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnRoutesWithContext(arg1 aws.Context, arg2 *ec2.DescribeClientVpnRoutesInput, arg3 ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error) {
	fake.describeClientVpnRoutesWithContextMutex.Lock()
	ret, specificReturn := fake.describeClientVpnRoutesWithContextReturnsOnCall[len(fake.describeClientVpnRoutesWithContextArgsForCall)]
	fake.describeClientVpnRoutesWithContextArgsForCall = append(fake.describeClientVpnRoutesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnRoutesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClientVpnRoutesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClientVpnRoutesWithContextMutex.Unlock()
	if fake.DescribeClientVpnRoutesWithContextStub != nil {
		return fake.DescribeClientVpnRoutesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnRoutesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnRoutesWithContextCallCount() int {
	fake.describeClientVpnRoutesWithContextMutex.RLock()
	defer fake.describeClientVpnRoutesWithContextMutex.RUnlock()
	return len(fake.describeClientVpnRoutesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnRoutesWithContextCalls(stub func(aws.Context, *ec2.DescribeClientVpnRoutesInput, ...request.Option) (*ec2.DescribeClientVpnRoutesOutput, error)) {
	fake.describeClientVpnRoutesWithContextMutex.Lock()
	defer fake.describeClientVpnRoutesWithContextMutex.Unlock()
	fake.DescribeClientVpnRoutesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnRoutesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeClientVpnRoutesInput, []request.Option) {
	fake.describeClientVpnRoutesWithContextMutex.RLock()
	defer fake.describeClientVpnRoutesWithContextMutex.RUnlock()
	argsForCall := fake.describeClientVpnRoutesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeClientVpnRoutesWithContextReturns(result1 *ec2.DescribeClientVpnRoutesOutput, result2 error) {
	fake.describeClientVpnRoutesWithContextMutex.Lock()
	defer fake.describeClientVpnRoutesWithContextMutex.Unlock()
	fake.DescribeClientVpnRoutesWithContextStub = nil
	fake.describeClientVpnRoutesWithContextReturns = struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnRoutesWithContextReturnsOnCall(i int, result1 *ec2.DescribeClientVpnRoutesOutput, result2 error) {
	fake.describeClientVpnRoutesWithContextMutex.Lock()
	defer fake.describeClientVpnRoutesWithContextMutex.Unlock()
	fake.DescribeClientVpnRoutesWithContextStub = nil
	if fake.describeClientVpnRoutesWithContextReturnsOnCall == nil {
		fake.describeClientVpnRoutesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnRoutesOutput
			result2 error
		})
	}
	fake.describeClientVpnRoutesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworks(arg1 *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	fake.describeClientVpnTargetNetworksMutex.Lock()
	ret, specificReturn := fake.describeClientVpnTargetNetworksReturnsOnCall[len(fake.describeClientVpnTargetNetworksArgsForCall)]
	fake.describeClientVpnTargetNetworksArgsForCall = append(fake.describeClientVpnTargetNetworksArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnTargetNetworksInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnTargetNetworks", []interface{}{arg1})
	fake.describeClientVpnTargetNetworksMutex.Unlock()
	if fake.DescribeClientVpnTargetNetworksStub != nil {
		return fake.DescribeClientVpnTargetNetworksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnTargetNetworksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksCallCount() int {
	fake.describeClientVpnTargetNetworksMutex.RLock()
	defer fake.describeClientVpnTargetNetworksMutex.RUnlock()
	return len(fake.describeClientVpnTargetNetworksArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksCalls(stub func(*ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error)) {
	fake.describeClientVpnTargetNetworksMutex.Lock()
	defer fake.describeClientVpnTargetNetworksMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksArgsForCall(i int) *ec2.DescribeClientVpnTargetNetworksInput {
	fake.describeClientVpnTargetNetworksMutex.RLock()
	defer fake.describeClientVpnTargetNetworksMutex.RUnlock()
	argsForCall := fake.describeClientVpnTargetNetworksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksReturns(result1 *ec2.DescribeClientVpnTargetNetworksOutput, result2 error) {
	fake.describeClientVpnTargetNetworksMutex.Lock()
	defer fake.describeClientVpnTargetNetworksMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksStub = nil
	fake.describeClientVpnTargetNetworksReturns = struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksReturnsOnCall(i int, result1 *ec2.DescribeClientVpnTargetNetworksOutput, result2 error) {
	fake.describeClientVpnTargetNetworksMutex.Lock()
	defer fake.describeClientVpnTargetNetworksMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksStub = nil
	if fake.describeClientVpnTargetNetworksReturnsOnCall == nil {
		fake.describeClientVpnTargetNetworksReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnTargetNetworksOutput
			result2 error
		})
	}
	fake.describeClientVpnTargetNetworksReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksRequest(arg1 *ec2.DescribeClientVpnTargetNetworksInput) (*request.Request, *ec2.DescribeClientVpnTargetNetworksOutput) {
	fake.describeClientVpnTargetNetworksRequestMutex.Lock()
	ret, specificReturn := fake.describeClientVpnTargetNetworksRequestReturnsOnCall[len(fake.describeClientVpnTargetNetworksRequestArgsForCall)]
	fake.describeClientVpnTargetNetworksRequestArgsForCall = append(fake.describeClientVpnTargetNetworksRequestArgsForCall, struct {
		arg1 *ec2.DescribeClientVpnTargetNetworksInput
	}{arg1})
	fake.recordInvocation("DescribeClientVpnTargetNetworksRequest", []interface{}{arg1})
	fake.describeClientVpnTargetNetworksRequestMutex.Unlock()
	if fake.DescribeClientVpnTargetNetworksRequestStub != nil {
		return fake.DescribeClientVpnTargetNetworksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnTargetNetworksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksRequestCallCount() int {
	fake.describeClientVpnTargetNetworksRequestMutex.RLock()
	defer fake.describeClientVpnTargetNetworksRequestMutex.RUnlock()
	return len(fake.describeClientVpnTargetNetworksRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksRequestCalls(stub func(*ec2.DescribeClientVpnTargetNetworksInput) (*request.Request, *ec2.DescribeClientVpnTargetNetworksOutput)) {
	fake.describeClientVpnTargetNetworksRequestMutex.Lock()
	defer fake.describeClientVpnTargetNetworksRequestMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksRequestStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksRequestArgsForCall(i int) *ec2.DescribeClientVpnTargetNetworksInput {
	fake.describeClientVpnTargetNetworksRequestMutex.RLock()
	defer fake.describeClientVpnTargetNetworksRequestMutex.RUnlock()
	argsForCall := fake.describeClientVpnTargetNetworksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksRequestReturns(result1 *request.Request, result2 *ec2.DescribeClientVpnTargetNetworksOutput) {
	fake.describeClientVpnTargetNetworksRequestMutex.Lock()
	defer fake.describeClientVpnTargetNetworksRequestMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksRequestStub = nil
	fake.describeClientVpnTargetNetworksRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnTargetNetworksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeClientVpnTargetNetworksOutput) {
	fake.describeClientVpnTargetNetworksRequestMutex.Lock()
	defer fake.describeClientVpnTargetNetworksRequestMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksRequestStub = nil
	if fake.describeClientVpnTargetNetworksRequestReturnsOnCall == nil {
		fake.describeClientVpnTargetNetworksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeClientVpnTargetNetworksOutput
		})
	}
	fake.describeClientVpnTargetNetworksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeClientVpnTargetNetworksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksWithContext(arg1 aws.Context, arg2 *ec2.DescribeClientVpnTargetNetworksInput, arg3 ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	fake.describeClientVpnTargetNetworksWithContextMutex.Lock()
	ret, specificReturn := fake.describeClientVpnTargetNetworksWithContextReturnsOnCall[len(fake.describeClientVpnTargetNetworksWithContextArgsForCall)]
	fake.describeClientVpnTargetNetworksWithContextArgsForCall = append(fake.describeClientVpnTargetNetworksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeClientVpnTargetNetworksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClientVpnTargetNetworksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClientVpnTargetNetworksWithContextMutex.Unlock()
	if fake.DescribeClientVpnTargetNetworksWithContextStub != nil {
		return fake.DescribeClientVpnTargetNetworksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClientVpnTargetNetworksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksWithContextCallCount() int {
	fake.describeClientVpnTargetNetworksWithContextMutex.RLock()
	defer fake.describeClientVpnTargetNetworksWithContextMutex.RUnlock()
	return len(fake.describeClientVpnTargetNetworksWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksWithContextCalls(stub func(aws.Context, *ec2.DescribeClientVpnTargetNetworksInput, ...request.Option) (*ec2.DescribeClientVpnTargetNetworksOutput, error)) {
	fake.describeClientVpnTargetNetworksWithContextMutex.Lock()
	defer fake.describeClientVpnTargetNetworksWithContextMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksWithContextStub = stub
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeClientVpnTargetNetworksInput, []request.Option) {
	fake.describeClientVpnTargetNetworksWithContextMutex.RLock()
	defer fake.describeClientVpnTargetNetworksWithContextMutex.RUnlock()
	argsForCall := fake.describeClientVpnTargetNetworksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksWithContextReturns(result1 *ec2.DescribeClientVpnTargetNetworksOutput, result2 error) {
	fake.describeClientVpnTargetNetworksWithContextMutex.Lock()
	defer fake.describeClientVpnTargetNetworksWithContextMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksWithContextStub = nil
	fake.describeClientVpnTargetNetworksWithContextReturns = struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeClientVpnTargetNetworksWithContextReturnsOnCall(i int, result1 *ec2.DescribeClientVpnTargetNetworksOutput, result2 error) {
	fake.describeClientVpnTargetNetworksWithContextMutex.Lock()
	defer fake.describeClientVpnTargetNetworksWithContextMutex.Unlock()
	fake.DescribeClientVpnTargetNetworksWithContextStub = nil
	if fake.describeClientVpnTargetNetworksWithContextReturnsOnCall == nil {
		fake.describeClientVpnTargetNetworksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeClientVpnTargetNetworksOutput
			result2 error
		})
	}
	fake.describeClientVpnTargetNetworksWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeClientVpnTargetNetworksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeConversionTasks(arg1 *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	fake.describeConversionTasksMutex.Lock()
	ret, specificReturn := fake.describeConversionTasksReturnsOnCall[len(fake.describeConversionTasksArgsForCall)]
	fake.describeConversionTasksArgsForCall = append(fake.describeConversionTasksArgsForCall, struct {
		arg1 *ec2.DescribeConversionTasksInput
	}{arg1})
	fake.recordInvocation("DescribeConversionTasks", []interface{}{arg1})
	fake.describeConversionTasksMutex.Unlock()
	if fake.DescribeConversionTasksStub != nil {
		return fake.DescribeConversionTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeConversionTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeConversionTasksCallCount() int {
	fake.describeConversionTasksMutex.RLock()
	defer fake.describeConversionTasksMutex.RUnlock()
	return len(fake.describeConversionTasksArgsForCall)
}

func (fake *FakeEC2API) DescribeConversionTasksCalls(stub func(*ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error)) {
	fake.describeConversionTasksMutex.Lock()
	defer fake.describeConversionTasksMutex.Unlock()
	fake.DescribeConversionTasksStub = stub
}

func (fake *FakeEC2API) DescribeConversionTasksArgsForCall(i int) *ec2.DescribeConversionTasksInput {
	fake.describeConversionTasksMutex.RLock()
	defer fake.describeConversionTasksMutex.RUnlock()
	argsForCall := fake.describeConversionTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeConversionTasksReturns(result1 *ec2.DescribeConversionTasksOutput, result2 error) {
	fake.describeConversionTasksMutex.Lock()
	defer fake.describeConversionTasksMutex.Unlock()
	fake.DescribeConversionTasksStub = nil
	fake.describeConversionTasksReturns = struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeConversionTasksReturnsOnCall(i int, result1 *ec2.DescribeConversionTasksOutput, result2 error) {
	fake.describeConversionTasksMutex.Lock()
	defer fake.describeConversionTasksMutex.Unlock()
	fake.DescribeConversionTasksStub = nil
	if fake.describeConversionTasksReturnsOnCall == nil {
		fake.describeConversionTasksReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeConversionTasksOutput
			result2 error
		})
	}
	fake.describeConversionTasksReturnsOnCall[i] = struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeConversionTasksRequest(arg1 *ec2.DescribeConversionTasksInput) (*request.Request, *ec2.DescribeConversionTasksOutput) {
	fake.describeConversionTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeConversionTasksRequestReturnsOnCall[len(fake.describeConversionTasksRequestArgsForCall)]
	fake.describeConversionTasksRequestArgsForCall = append(fake.describeConversionTasksRequestArgsForCall, struct {
		arg1 *ec2.DescribeConversionTasksInput
	}{arg1})
	fake.recordInvocation("DescribeConversionTasksRequest", []interface{}{arg1})
	fake.describeConversionTasksRequestMutex.Unlock()
	if fake.DescribeConversionTasksRequestStub != nil {
		return fake.DescribeConversionTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeConversionTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeConversionTasksRequestCallCount() int {
	fake.describeConversionTasksRequestMutex.RLock()
	defer fake.describeConversionTasksRequestMutex.RUnlock()
	return len(fake.describeConversionTasksRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeConversionTasksRequestCalls(stub func(*ec2.DescribeConversionTasksInput) (*request.Request, *ec2.DescribeConversionTasksOutput)) {
	fake.describeConversionTasksRequestMutex.Lock()
	defer fake.describeConversionTasksRequestMutex.Unlock()
	fake.DescribeConversionTasksRequestStub = stub
}

func (fake *FakeEC2API) DescribeConversionTasksRequestArgsForCall(i int) *ec2.DescribeConversionTasksInput {
	fake.describeConversionTasksRequestMutex.RLock()
	defer fake.describeConversionTasksRequestMutex.RUnlock()
	argsForCall := fake.describeConversionTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeConversionTasksRequestReturns(result1 *request.Request, result2 *ec2.DescribeConversionTasksOutput) {
	fake.describeConversionTasksRequestMutex.Lock()
	defer fake.describeConversionTasksRequestMutex.Unlock()
	fake.DescribeConversionTasksRequestStub = nil
	fake.describeConversionTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeConversionTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeConversionTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeConversionTasksOutput) {
	fake.describeConversionTasksRequestMutex.Lock()
	defer fake.describeConversionTasksRequestMutex.Unlock()
	fake.DescribeConversionTasksRequestStub = nil
	if fake.describeConversionTasksRequestReturnsOnCall == nil {
		fake.describeConversionTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeConversionTasksOutput
		})
	}
	fake.describeConversionTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeConversionTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeConversionTasksWithContext(arg1 aws.Context, arg2 *ec2.DescribeConversionTasksInput, arg3 ...request.Option) (*ec2.DescribeConversionTasksOutput, error) {
	fake.describeConversionTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeConversionTasksWithContextReturnsOnCall[len(fake.describeConversionTasksWithContextArgsForCall)]
	fake.describeConversionTasksWithContextArgsForCall = append(fake.describeConversionTasksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeConversionTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeConversionTasksWithContextMutex.Unlock()
	if fake.DescribeConversionTasksWithContextStub != nil {
		return fake.DescribeConversionTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeConversionTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeConversionTasksWithContextCallCount() int {
	fake.describeConversionTasksWithContextMutex.RLock()
	defer fake.describeConversionTasksWithContextMutex.RUnlock()
	return len(fake.describeConversionTasksWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeConversionTasksWithContextCalls(stub func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.Option) (*ec2.DescribeConversionTasksOutput, error)) {
	fake.describeConversionTasksWithContextMutex.Lock()
	defer fake.describeConversionTasksWithContextMutex.Unlock()
	fake.DescribeConversionTasksWithContextStub = stub
}

func (fake *FakeEC2API) DescribeConversionTasksWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeConversionTasksInput, []request.Option) {
	fake.describeConversionTasksWithContextMutex.RLock()
	defer fake.describeConversionTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeConversionTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeConversionTasksWithContextReturns(result1 *ec2.DescribeConversionTasksOutput, result2 error) {
	fake.describeConversionTasksWithContextMutex.Lock()
	defer fake.describeConversionTasksWithContextMutex.Unlock()
	fake.DescribeConversionTasksWithContextStub = nil
	fake.describeConversionTasksWithContextReturns = struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeConversionTasksWithContextReturnsOnCall(i int, result1 *ec2.DescribeConversionTasksOutput, result2 error) {
	fake.describeConversionTasksWithContextMutex.Lock()
	defer fake.describeConversionTasksWithContextMutex.Unlock()
	fake.DescribeConversionTasksWithContextStub = nil
	if fake.describeConversionTasksWithContextReturnsOnCall == nil {
		fake.describeConversionTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeConversionTasksOutput
			result2 error
		})
	}
	fake.describeConversionTasksWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeConversionTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCustomerGateways(arg1 *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	fake.describeCustomerGatewaysMutex.Lock()
	ret, specificReturn := fake.describeCustomerGatewaysReturnsOnCall[len(fake.describeCustomerGatewaysArgsForCall)]
	fake.describeCustomerGatewaysArgsForCall = append(fake.describeCustomerGatewaysArgsForCall, struct {
		arg1 *ec2.DescribeCustomerGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeCustomerGateways", []interface{}{arg1})
	fake.describeCustomerGatewaysMutex.Unlock()
	if fake.DescribeCustomerGatewaysStub != nil {
		return fake.DescribeCustomerGatewaysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCustomerGatewaysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeCustomerGatewaysCallCount() int {
	fake.describeCustomerGatewaysMutex.RLock()
	defer fake.describeCustomerGatewaysMutex.RUnlock()
	return len(fake.describeCustomerGatewaysArgsForCall)
}

func (fake *FakeEC2API) DescribeCustomerGatewaysCalls(stub func(*ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error)) {
	fake.describeCustomerGatewaysMutex.Lock()
	defer fake.describeCustomerGatewaysMutex.Unlock()
	fake.DescribeCustomerGatewaysStub = stub
}

func (fake *FakeEC2API) DescribeCustomerGatewaysArgsForCall(i int) *ec2.DescribeCustomerGatewaysInput {
	fake.describeCustomerGatewaysMutex.RLock()
	defer fake.describeCustomerGatewaysMutex.RUnlock()
	argsForCall := fake.describeCustomerGatewaysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeCustomerGatewaysReturns(result1 *ec2.DescribeCustomerGatewaysOutput, result2 error) {
	fake.describeCustomerGatewaysMutex.Lock()
	defer fake.describeCustomerGatewaysMutex.Unlock()
	fake.DescribeCustomerGatewaysStub = nil
	fake.describeCustomerGatewaysReturns = struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCustomerGatewaysReturnsOnCall(i int, result1 *ec2.DescribeCustomerGatewaysOutput, result2 error) {
	fake.describeCustomerGatewaysMutex.Lock()
	defer fake.describeCustomerGatewaysMutex.Unlock()
	fake.DescribeCustomerGatewaysStub = nil
	if fake.describeCustomerGatewaysReturnsOnCall == nil {
		fake.describeCustomerGatewaysReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeCustomerGatewaysOutput
			result2 error
		})
	}
	fake.describeCustomerGatewaysReturnsOnCall[i] = struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCustomerGatewaysRequest(arg1 *ec2.DescribeCustomerGatewaysInput) (*request.Request, *ec2.DescribeCustomerGatewaysOutput) {
	fake.describeCustomerGatewaysRequestMutex.Lock()
	ret, specificReturn := fake.describeCustomerGatewaysRequestReturnsOnCall[len(fake.describeCustomerGatewaysRequestArgsForCall)]
	fake.describeCustomerGatewaysRequestArgsForCall = append(fake.describeCustomerGatewaysRequestArgsForCall, struct {
		arg1 *ec2.DescribeCustomerGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeCustomerGatewaysRequest", []interface{}{arg1})
	fake.describeCustomerGatewaysRequestMutex.Unlock()
	if fake.DescribeCustomerGatewaysRequestStub != nil {
		return fake.DescribeCustomerGatewaysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCustomerGatewaysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeCustomerGatewaysRequestCallCount() int {
	fake.describeCustomerGatewaysRequestMutex.RLock()
	defer fake.describeCustomerGatewaysRequestMutex.RUnlock()
	return len(fake.describeCustomerGatewaysRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeCustomerGatewaysRequestCalls(stub func(*ec2.DescribeCustomerGatewaysInput) (*request.Request, *ec2.DescribeCustomerGatewaysOutput)) {
	fake.describeCustomerGatewaysRequestMutex.Lock()
	defer fake.describeCustomerGatewaysRequestMutex.Unlock()
	fake.DescribeCustomerGatewaysRequestStub = stub
}

func (fake *FakeEC2API) DescribeCustomerGatewaysRequestArgsForCall(i int) *ec2.DescribeCustomerGatewaysInput {
	fake.describeCustomerGatewaysRequestMutex.RLock()
	defer fake.describeCustomerGatewaysRequestMutex.RUnlock()
	argsForCall := fake.describeCustomerGatewaysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeCustomerGatewaysRequestReturns(result1 *request.Request, result2 *ec2.DescribeCustomerGatewaysOutput) {
	fake.describeCustomerGatewaysRequestMutex.Lock()
	defer fake.describeCustomerGatewaysRequestMutex.Unlock()
	fake.DescribeCustomerGatewaysRequestStub = nil
	fake.describeCustomerGatewaysRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeCustomerGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCustomerGatewaysRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeCustomerGatewaysOutput) {
	fake.describeCustomerGatewaysRequestMutex.Lock()
	defer fake.describeCustomerGatewaysRequestMutex.Unlock()
	fake.DescribeCustomerGatewaysRequestStub = nil
	if fake.describeCustomerGatewaysRequestReturnsOnCall == nil {
		fake.describeCustomerGatewaysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeCustomerGatewaysOutput
		})
	}
	fake.describeCustomerGatewaysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeCustomerGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCustomerGatewaysWithContext(arg1 aws.Context, arg2 *ec2.DescribeCustomerGatewaysInput, arg3 ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error) {
	fake.describeCustomerGatewaysWithContextMutex.Lock()
	ret, specificReturn := fake.describeCustomerGatewaysWithContextReturnsOnCall[len(fake.describeCustomerGatewaysWithContextArgsForCall)]
	fake.describeCustomerGatewaysWithContextArgsForCall = append(fake.describeCustomerGatewaysWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeCustomerGatewaysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCustomerGatewaysWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCustomerGatewaysWithContextMutex.Unlock()
	if fake.DescribeCustomerGatewaysWithContextStub != nil {
		return fake.DescribeCustomerGatewaysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCustomerGatewaysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeCustomerGatewaysWithContextCallCount() int {
	fake.describeCustomerGatewaysWithContextMutex.RLock()
	defer fake.describeCustomerGatewaysWithContextMutex.RUnlock()
	return len(fake.describeCustomerGatewaysWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeCustomerGatewaysWithContextCalls(stub func(aws.Context, *ec2.DescribeCustomerGatewaysInput, ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error)) {
	fake.describeCustomerGatewaysWithContextMutex.Lock()
	defer fake.describeCustomerGatewaysWithContextMutex.Unlock()
	fake.DescribeCustomerGatewaysWithContextStub = stub
}

func (fake *FakeEC2API) DescribeCustomerGatewaysWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeCustomerGatewaysInput, []request.Option) {
	fake.describeCustomerGatewaysWithContextMutex.RLock()
	defer fake.describeCustomerGatewaysWithContextMutex.RUnlock()
	argsForCall := fake.describeCustomerGatewaysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeCustomerGatewaysWithContextReturns(result1 *ec2.DescribeCustomerGatewaysOutput, result2 error) {
	fake.describeCustomerGatewaysWithContextMutex.Lock()
	defer fake.describeCustomerGatewaysWithContextMutex.Unlock()
	fake.DescribeCustomerGatewaysWithContextStub = nil
	fake.describeCustomerGatewaysWithContextReturns = struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeCustomerGatewaysWithContextReturnsOnCall(i int, result1 *ec2.DescribeCustomerGatewaysOutput, result2 error) {
	fake.describeCustomerGatewaysWithContextMutex.Lock()
	defer fake.describeCustomerGatewaysWithContextMutex.Unlock()
	fake.DescribeCustomerGatewaysWithContextStub = nil
	if fake.describeCustomerGatewaysWithContextReturnsOnCall == nil {
		fake.describeCustomerGatewaysWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeCustomerGatewaysOutput
			result2 error
		})
	}
	fake.describeCustomerGatewaysWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeCustomerGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeDhcpOptions(arg1 *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
	fake.describeDhcpOptionsMutex.Lock()
	ret, specificReturn := fake.describeDhcpOptionsReturnsOnCall[len(fake.describeDhcpOptionsArgsForCall)]
	fake.describeDhcpOptionsArgsForCall = append(fake.describeDhcpOptionsArgsForCall, struct {
		arg1 *ec2.DescribeDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("DescribeDhcpOptions", []interface{}{arg1})
	fake.describeDhcpOptionsMutex.Unlock()
	if fake.DescribeDhcpOptionsStub != nil {
		return fake.DescribeDhcpOptionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeDhcpOptionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeDhcpOptionsCallCount() int {
	fake.describeDhcpOptionsMutex.RLock()
	defer fake.describeDhcpOptionsMutex.RUnlock()
	return len(fake.describeDhcpOptionsArgsForCall)
}

func (fake *FakeEC2API) DescribeDhcpOptionsCalls(stub func(*ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error)) {
	fake.describeDhcpOptionsMutex.Lock()
	defer fake.describeDhcpOptionsMutex.Unlock()
	fake.DescribeDhcpOptionsStub = stub
}

func (fake *FakeEC2API) DescribeDhcpOptionsArgsForCall(i int) *ec2.DescribeDhcpOptionsInput {
	fake.describeDhcpOptionsMutex.RLock()
	defer fake.describeDhcpOptionsMutex.RUnlock()
	argsForCall := fake.describeDhcpOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeDhcpOptionsReturns(result1 *ec2.DescribeDhcpOptionsOutput, result2 error) {
	fake.describeDhcpOptionsMutex.Lock()
	defer fake.describeDhcpOptionsMutex.Unlock()
	fake.DescribeDhcpOptionsStub = nil
	fake.describeDhcpOptionsReturns = struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeDhcpOptionsReturnsOnCall(i int, result1 *ec2.DescribeDhcpOptionsOutput, result2 error) {
	fake.describeDhcpOptionsMutex.Lock()
	defer fake.describeDhcpOptionsMutex.Unlock()
	fake.DescribeDhcpOptionsStub = nil
	if fake.describeDhcpOptionsReturnsOnCall == nil {
		fake.describeDhcpOptionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeDhcpOptionsOutput
			result2 error
		})
	}
	fake.describeDhcpOptionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeDhcpOptionsRequest(arg1 *ec2.DescribeDhcpOptionsInput) (*request.Request, *ec2.DescribeDhcpOptionsOutput) {
	fake.describeDhcpOptionsRequestMutex.Lock()
	ret, specificReturn := fake.describeDhcpOptionsRequestReturnsOnCall[len(fake.describeDhcpOptionsRequestArgsForCall)]
	fake.describeDhcpOptionsRequestArgsForCall = append(fake.describeDhcpOptionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeDhcpOptionsInput
	}{arg1})
	fake.recordInvocation("DescribeDhcpOptionsRequest", []interface{}{arg1})
	fake.describeDhcpOptionsRequestMutex.Unlock()
	if fake.DescribeDhcpOptionsRequestStub != nil {
		return fake.DescribeDhcpOptionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeDhcpOptionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeDhcpOptionsRequestCallCount() int {
	fake.describeDhcpOptionsRequestMutex.RLock()
	defer fake.describeDhcpOptionsRequestMutex.RUnlock()
	return len(fake.describeDhcpOptionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeDhcpOptionsRequestCalls(stub func(*ec2.DescribeDhcpOptionsInput) (*request.Request, *ec2.DescribeDhcpOptionsOutput)) {
	fake.describeDhcpOptionsRequestMutex.Lock()
	defer fake.describeDhcpOptionsRequestMutex.Unlock()
	fake.DescribeDhcpOptionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeDhcpOptionsRequestArgsForCall(i int) *ec2.DescribeDhcpOptionsInput {
	fake.describeDhcpOptionsRequestMutex.RLock()
	defer fake.describeDhcpOptionsRequestMutex.RUnlock()
	argsForCall := fake.describeDhcpOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeDhcpOptionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeDhcpOptionsOutput) {
	fake.describeDhcpOptionsRequestMutex.Lock()
	defer fake.describeDhcpOptionsRequestMutex.Unlock()
	fake.DescribeDhcpOptionsRequestStub = nil
	fake.describeDhcpOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeDhcpOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeDhcpOptionsOutput) {
	fake.describeDhcpOptionsRequestMutex.Lock()
	defer fake.describeDhcpOptionsRequestMutex.Unlock()
	fake.DescribeDhcpOptionsRequestStub = nil
	if fake.describeDhcpOptionsRequestReturnsOnCall == nil {
		fake.describeDhcpOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeDhcpOptionsOutput
		})
	}
	fake.describeDhcpOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeDhcpOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeDhcpOptionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeDhcpOptionsInput, arg3 ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error) {
	fake.describeDhcpOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeDhcpOptionsWithContextReturnsOnCall[len(fake.describeDhcpOptionsWithContextArgsForCall)]
	fake.describeDhcpOptionsWithContextArgsForCall = append(fake.describeDhcpOptionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeDhcpOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeDhcpOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeDhcpOptionsWithContextMutex.Unlock()
	if fake.DescribeDhcpOptionsWithContextStub != nil {
		return fake.DescribeDhcpOptionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeDhcpOptionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeDhcpOptionsWithContextCallCount() int {
	fake.describeDhcpOptionsWithContextMutex.RLock()
	defer fake.describeDhcpOptionsWithContextMutex.RUnlock()
	return len(fake.describeDhcpOptionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeDhcpOptionsWithContextCalls(stub func(aws.Context, *ec2.DescribeDhcpOptionsInput, ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error)) {
	fake.describeDhcpOptionsWithContextMutex.Lock()
	defer fake.describeDhcpOptionsWithContextMutex.Unlock()
	fake.DescribeDhcpOptionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeDhcpOptionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeDhcpOptionsInput, []request.Option) {
	fake.describeDhcpOptionsWithContextMutex.RLock()
	defer fake.describeDhcpOptionsWithContextMutex.RUnlock()
	argsForCall := fake.describeDhcpOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeDhcpOptionsWithContextReturns(result1 *ec2.DescribeDhcpOptionsOutput, result2 error) {
	fake.describeDhcpOptionsWithContextMutex.Lock()
	defer fake.describeDhcpOptionsWithContextMutex.Unlock()
	fake.DescribeDhcpOptionsWithContextStub = nil
	fake.describeDhcpOptionsWithContextReturns = struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeDhcpOptionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeDhcpOptionsOutput, result2 error) {
	fake.describeDhcpOptionsWithContextMutex.Lock()
	defer fake.describeDhcpOptionsWithContextMutex.Unlock()
	fake.DescribeDhcpOptionsWithContextStub = nil
	if fake.describeDhcpOptionsWithContextReturnsOnCall == nil {
		fake.describeDhcpOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeDhcpOptionsOutput
			result2 error
		})
	}
	fake.describeDhcpOptionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeDhcpOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGateways(arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	fake.describeEgressOnlyInternetGatewaysMutex.Lock()
	ret, specificReturn := fake.describeEgressOnlyInternetGatewaysReturnsOnCall[len(fake.describeEgressOnlyInternetGatewaysArgsForCall)]
	fake.describeEgressOnlyInternetGatewaysArgsForCall = append(fake.describeEgressOnlyInternetGatewaysArgsForCall, struct {
		arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeEgressOnlyInternetGateways", []interface{}{arg1})
	fake.describeEgressOnlyInternetGatewaysMutex.Unlock()
	if fake.DescribeEgressOnlyInternetGatewaysStub != nil {
		return fake.DescribeEgressOnlyInternetGatewaysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeEgressOnlyInternetGatewaysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysCallCount() int {
	fake.describeEgressOnlyInternetGatewaysMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysMutex.RUnlock()
	return len(fake.describeEgressOnlyInternetGatewaysArgsForCall)
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysCalls(stub func(*ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)) {
	fake.describeEgressOnlyInternetGatewaysMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysStub = stub
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysArgsForCall(i int) *ec2.DescribeEgressOnlyInternetGatewaysInput {
	fake.describeEgressOnlyInternetGatewaysMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysMutex.RUnlock()
	argsForCall := fake.describeEgressOnlyInternetGatewaysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysReturns(result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput, result2 error) {
	fake.describeEgressOnlyInternetGatewaysMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysStub = nil
	fake.describeEgressOnlyInternetGatewaysReturns = struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysReturnsOnCall(i int, result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput, result2 error) {
	fake.describeEgressOnlyInternetGatewaysMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysStub = nil
	if fake.describeEgressOnlyInternetGatewaysReturnsOnCall == nil {
		fake.describeEgressOnlyInternetGatewaysReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
			result2 error
		})
	}
	fake.describeEgressOnlyInternetGatewaysReturnsOnCall[i] = struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysRequest(arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput) (*request.Request, *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	fake.describeEgressOnlyInternetGatewaysRequestMutex.Lock()
	ret, specificReturn := fake.describeEgressOnlyInternetGatewaysRequestReturnsOnCall[len(fake.describeEgressOnlyInternetGatewaysRequestArgsForCall)]
	fake.describeEgressOnlyInternetGatewaysRequestArgsForCall = append(fake.describeEgressOnlyInternetGatewaysRequestArgsForCall, struct {
		arg1 *ec2.DescribeEgressOnlyInternetGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeEgressOnlyInternetGatewaysRequest", []interface{}{arg1})
	fake.describeEgressOnlyInternetGatewaysRequestMutex.Unlock()
	if fake.DescribeEgressOnlyInternetGatewaysRequestStub != nil {
		return fake.DescribeEgressOnlyInternetGatewaysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeEgressOnlyInternetGatewaysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysRequestCallCount() int {
	fake.describeEgressOnlyInternetGatewaysRequestMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysRequestMutex.RUnlock()
	return len(fake.describeEgressOnlyInternetGatewaysRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysRequestCalls(stub func(*ec2.DescribeEgressOnlyInternetGatewaysInput) (*request.Request, *ec2.DescribeEgressOnlyInternetGatewaysOutput)) {
	fake.describeEgressOnlyInternetGatewaysRequestMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysRequestMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysRequestStub = stub
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysRequestArgsForCall(i int) *ec2.DescribeEgressOnlyInternetGatewaysInput {
	fake.describeEgressOnlyInternetGatewaysRequestMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysRequestMutex.RUnlock()
	argsForCall := fake.describeEgressOnlyInternetGatewaysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysRequestReturns(result1 *request.Request, result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	fake.describeEgressOnlyInternetGatewaysRequestMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysRequestMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysRequestStub = nil
	fake.describeEgressOnlyInternetGatewaysRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	fake.describeEgressOnlyInternetGatewaysRequestMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysRequestMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysRequestStub = nil
	if fake.describeEgressOnlyInternetGatewaysRequestReturnsOnCall == nil {
		fake.describeEgressOnlyInternetGatewaysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		})
	}
	fake.describeEgressOnlyInternetGatewaysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysWithContext(arg1 aws.Context, arg2 *ec2.DescribeEgressOnlyInternetGatewaysInput, arg3 ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.Lock()
	ret, specificReturn := fake.describeEgressOnlyInternetGatewaysWithContextReturnsOnCall[len(fake.describeEgressOnlyInternetGatewaysWithContextArgsForCall)]
	fake.describeEgressOnlyInternetGatewaysWithContextArgsForCall = append(fake.describeEgressOnlyInternetGatewaysWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeEgressOnlyInternetGatewaysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeEgressOnlyInternetGatewaysWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.Unlock()
	if fake.DescribeEgressOnlyInternetGatewaysWithContextStub != nil {
		return fake.DescribeEgressOnlyInternetGatewaysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeEgressOnlyInternetGatewaysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysWithContextCallCount() int {
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysWithContextMutex.RUnlock()
	return len(fake.describeEgressOnlyInternetGatewaysWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysWithContextCalls(stub func(aws.Context, *ec2.DescribeEgressOnlyInternetGatewaysInput, ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)) {
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysWithContextMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysWithContextStub = stub
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeEgressOnlyInternetGatewaysInput, []request.Option) {
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysWithContextMutex.RUnlock()
	argsForCall := fake.describeEgressOnlyInternetGatewaysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysWithContextReturns(result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput, result2 error) {
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysWithContextMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysWithContextStub = nil
	fake.describeEgressOnlyInternetGatewaysWithContextReturns = struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeEgressOnlyInternetGatewaysWithContextReturnsOnCall(i int, result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput, result2 error) {
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.Lock()
	defer fake.describeEgressOnlyInternetGatewaysWithContextMutex.Unlock()
	fake.DescribeEgressOnlyInternetGatewaysWithContextStub = nil
	if fake.describeEgressOnlyInternetGatewaysWithContextReturnsOnCall == nil {
		fake.describeEgressOnlyInternetGatewaysWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
			result2 error
		})
	}
	fake.describeEgressOnlyInternetGatewaysWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeElasticGpus(arg1 *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
	fake.describeElasticGpusMutex.Lock()
	ret, specificReturn := fake.describeElasticGpusReturnsOnCall[len(fake.describeElasticGpusArgsForCall)]
	fake.describeElasticGpusArgsForCall = append(fake.describeElasticGpusArgsForCall, struct {
		arg1 *ec2.DescribeElasticGpusInput
	}{arg1})
	fake.recordInvocation("DescribeElasticGpus", []interface{}{arg1})
	fake.describeElasticGpusMutex.Unlock()
	if fake.DescribeElasticGpusStub != nil {
		return fake.DescribeElasticGpusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeElasticGpusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeElasticGpusCallCount() int {
	fake.describeElasticGpusMutex.RLock()
	defer fake.describeElasticGpusMutex.RUnlock()
	return len(fake.describeElasticGpusArgsForCall)
}

func (fake *FakeEC2API) DescribeElasticGpusCalls(stub func(*ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error)) {
	fake.describeElasticGpusMutex.Lock()
	defer fake.describeElasticGpusMutex.Unlock()
	fake.DescribeElasticGpusStub = stub
}

func (fake *FakeEC2API) DescribeElasticGpusArgsForCall(i int) *ec2.DescribeElasticGpusInput {
	fake.describeElasticGpusMutex.RLock()
	defer fake.describeElasticGpusMutex.RUnlock()
	argsForCall := fake.describeElasticGpusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeElasticGpusReturns(result1 *ec2.DescribeElasticGpusOutput, result2 error) {
	fake.describeElasticGpusMutex.Lock()
	defer fake.describeElasticGpusMutex.Unlock()
	fake.DescribeElasticGpusStub = nil
	fake.describeElasticGpusReturns = struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeElasticGpusReturnsOnCall(i int, result1 *ec2.DescribeElasticGpusOutput, result2 error) {
	fake.describeElasticGpusMutex.Lock()
	defer fake.describeElasticGpusMutex.Unlock()
	fake.DescribeElasticGpusStub = nil
	if fake.describeElasticGpusReturnsOnCall == nil {
		fake.describeElasticGpusReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeElasticGpusOutput
			result2 error
		})
	}
	fake.describeElasticGpusReturnsOnCall[i] = struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeElasticGpusRequest(arg1 *ec2.DescribeElasticGpusInput) (*request.Request, *ec2.DescribeElasticGpusOutput) {
	fake.describeElasticGpusRequestMutex.Lock()
	ret, specificReturn := fake.describeElasticGpusRequestReturnsOnCall[len(fake.describeElasticGpusRequestArgsForCall)]
	fake.describeElasticGpusRequestArgsForCall = append(fake.describeElasticGpusRequestArgsForCall, struct {
		arg1 *ec2.DescribeElasticGpusInput
	}{arg1})
	fake.recordInvocation("DescribeElasticGpusRequest", []interface{}{arg1})
	fake.describeElasticGpusRequestMutex.Unlock()
	if fake.DescribeElasticGpusRequestStub != nil {
		return fake.DescribeElasticGpusRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeElasticGpusRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeElasticGpusRequestCallCount() int {
	fake.describeElasticGpusRequestMutex.RLock()
	defer fake.describeElasticGpusRequestMutex.RUnlock()
	return len(fake.describeElasticGpusRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeElasticGpusRequestCalls(stub func(*ec2.DescribeElasticGpusInput) (*request.Request, *ec2.DescribeElasticGpusOutput)) {
	fake.describeElasticGpusRequestMutex.Lock()
	defer fake.describeElasticGpusRequestMutex.Unlock()
	fake.DescribeElasticGpusRequestStub = stub
}

func (fake *FakeEC2API) DescribeElasticGpusRequestArgsForCall(i int) *ec2.DescribeElasticGpusInput {
	fake.describeElasticGpusRequestMutex.RLock()
	defer fake.describeElasticGpusRequestMutex.RUnlock()
	argsForCall := fake.describeElasticGpusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeElasticGpusRequestReturns(result1 *request.Request, result2 *ec2.DescribeElasticGpusOutput) {
	fake.describeElasticGpusRequestMutex.Lock()
	defer fake.describeElasticGpusRequestMutex.Unlock()
	fake.DescribeElasticGpusRequestStub = nil
	fake.describeElasticGpusRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeElasticGpusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeElasticGpusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeElasticGpusOutput) {
	fake.describeElasticGpusRequestMutex.Lock()
	defer fake.describeElasticGpusRequestMutex.Unlock()
	fake.DescribeElasticGpusRequestStub = nil
	if fake.describeElasticGpusRequestReturnsOnCall == nil {
		fake.describeElasticGpusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeElasticGpusOutput
		})
	}
	fake.describeElasticGpusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeElasticGpusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeElasticGpusWithContext(arg1 aws.Context, arg2 *ec2.DescribeElasticGpusInput, arg3 ...request.Option) (*ec2.DescribeElasticGpusOutput, error) {
	fake.describeElasticGpusWithContextMutex.Lock()
	ret, specificReturn := fake.describeElasticGpusWithContextReturnsOnCall[len(fake.describeElasticGpusWithContextArgsForCall)]
	fake.describeElasticGpusWithContextArgsForCall = append(fake.describeElasticGpusWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeElasticGpusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeElasticGpusWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeElasticGpusWithContextMutex.Unlock()
	if fake.DescribeElasticGpusWithContextStub != nil {
		return fake.DescribeElasticGpusWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeElasticGpusWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeElasticGpusWithContextCallCount() int {
	fake.describeElasticGpusWithContextMutex.RLock()
	defer fake.describeElasticGpusWithContextMutex.RUnlock()
	return len(fake.describeElasticGpusWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeElasticGpusWithContextCalls(stub func(aws.Context, *ec2.DescribeElasticGpusInput, ...request.Option) (*ec2.DescribeElasticGpusOutput, error)) {
	fake.describeElasticGpusWithContextMutex.Lock()
	defer fake.describeElasticGpusWithContextMutex.Unlock()
	fake.DescribeElasticGpusWithContextStub = stub
}

func (fake *FakeEC2API) DescribeElasticGpusWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeElasticGpusInput, []request.Option) {
	fake.describeElasticGpusWithContextMutex.RLock()
	defer fake.describeElasticGpusWithContextMutex.RUnlock()
	argsForCall := fake.describeElasticGpusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeElasticGpusWithContextReturns(result1 *ec2.DescribeElasticGpusOutput, result2 error) {
	fake.describeElasticGpusWithContextMutex.Lock()
	defer fake.describeElasticGpusWithContextMutex.Unlock()
	fake.DescribeElasticGpusWithContextStub = nil
	fake.describeElasticGpusWithContextReturns = struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeElasticGpusWithContextReturnsOnCall(i int, result1 *ec2.DescribeElasticGpusOutput, result2 error) {
	fake.describeElasticGpusWithContextMutex.Lock()
	defer fake.describeElasticGpusWithContextMutex.Unlock()
	fake.DescribeElasticGpusWithContextStub = nil
	if fake.describeElasticGpusWithContextReturnsOnCall == nil {
		fake.describeElasticGpusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeElasticGpusOutput
			result2 error
		})
	}
	fake.describeElasticGpusWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeElasticGpusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeExportTasks(arg1 *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	fake.describeExportTasksMutex.Lock()
	ret, specificReturn := fake.describeExportTasksReturnsOnCall[len(fake.describeExportTasksArgsForCall)]
	fake.describeExportTasksArgsForCall = append(fake.describeExportTasksArgsForCall, struct {
		arg1 *ec2.DescribeExportTasksInput
	}{arg1})
	fake.recordInvocation("DescribeExportTasks", []interface{}{arg1})
	fake.describeExportTasksMutex.Unlock()
	if fake.DescribeExportTasksStub != nil {
		return fake.DescribeExportTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeExportTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeExportTasksCallCount() int {
	fake.describeExportTasksMutex.RLock()
	defer fake.describeExportTasksMutex.RUnlock()
	return len(fake.describeExportTasksArgsForCall)
}

func (fake *FakeEC2API) DescribeExportTasksCalls(stub func(*ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error)) {
	fake.describeExportTasksMutex.Lock()
	defer fake.describeExportTasksMutex.Unlock()
	fake.DescribeExportTasksStub = stub
}

func (fake *FakeEC2API) DescribeExportTasksArgsForCall(i int) *ec2.DescribeExportTasksInput {
	fake.describeExportTasksMutex.RLock()
	defer fake.describeExportTasksMutex.RUnlock()
	argsForCall := fake.describeExportTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeExportTasksReturns(result1 *ec2.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksMutex.Lock()
	defer fake.describeExportTasksMutex.Unlock()
	fake.DescribeExportTasksStub = nil
	fake.describeExportTasksReturns = struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeExportTasksReturnsOnCall(i int, result1 *ec2.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksMutex.Lock()
	defer fake.describeExportTasksMutex.Unlock()
	fake.DescribeExportTasksStub = nil
	if fake.describeExportTasksReturnsOnCall == nil {
		fake.describeExportTasksReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeExportTasksOutput
			result2 error
		})
	}
	fake.describeExportTasksReturnsOnCall[i] = struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeExportTasksRequest(arg1 *ec2.DescribeExportTasksInput) (*request.Request, *ec2.DescribeExportTasksOutput) {
	fake.describeExportTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeExportTasksRequestReturnsOnCall[len(fake.describeExportTasksRequestArgsForCall)]
	fake.describeExportTasksRequestArgsForCall = append(fake.describeExportTasksRequestArgsForCall, struct {
		arg1 *ec2.DescribeExportTasksInput
	}{arg1})
	fake.recordInvocation("DescribeExportTasksRequest", []interface{}{arg1})
	fake.describeExportTasksRequestMutex.Unlock()
	if fake.DescribeExportTasksRequestStub != nil {
		return fake.DescribeExportTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeExportTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeExportTasksRequestCallCount() int {
	fake.describeExportTasksRequestMutex.RLock()
	defer fake.describeExportTasksRequestMutex.RUnlock()
	return len(fake.describeExportTasksRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeExportTasksRequestCalls(stub func(*ec2.DescribeExportTasksInput) (*request.Request, *ec2.DescribeExportTasksOutput)) {
	fake.describeExportTasksRequestMutex.Lock()
	defer fake.describeExportTasksRequestMutex.Unlock()
	fake.DescribeExportTasksRequestStub = stub
}

func (fake *FakeEC2API) DescribeExportTasksRequestArgsForCall(i int) *ec2.DescribeExportTasksInput {
	fake.describeExportTasksRequestMutex.RLock()
	defer fake.describeExportTasksRequestMutex.RUnlock()
	argsForCall := fake.describeExportTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeExportTasksRequestReturns(result1 *request.Request, result2 *ec2.DescribeExportTasksOutput) {
	fake.describeExportTasksRequestMutex.Lock()
	defer fake.describeExportTasksRequestMutex.Unlock()
	fake.DescribeExportTasksRequestStub = nil
	fake.describeExportTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeExportTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeExportTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeExportTasksOutput) {
	fake.describeExportTasksRequestMutex.Lock()
	defer fake.describeExportTasksRequestMutex.Unlock()
	fake.DescribeExportTasksRequestStub = nil
	if fake.describeExportTasksRequestReturnsOnCall == nil {
		fake.describeExportTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeExportTasksOutput
		})
	}
	fake.describeExportTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeExportTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeExportTasksWithContext(arg1 aws.Context, arg2 *ec2.DescribeExportTasksInput, arg3 ...request.Option) (*ec2.DescribeExportTasksOutput, error) {
	fake.describeExportTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeExportTasksWithContextReturnsOnCall[len(fake.describeExportTasksWithContextArgsForCall)]
	fake.describeExportTasksWithContextArgsForCall = append(fake.describeExportTasksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeExportTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeExportTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeExportTasksWithContextMutex.Unlock()
	if fake.DescribeExportTasksWithContextStub != nil {
		return fake.DescribeExportTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeExportTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeExportTasksWithContextCallCount() int {
	fake.describeExportTasksWithContextMutex.RLock()
	defer fake.describeExportTasksWithContextMutex.RUnlock()
	return len(fake.describeExportTasksWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeExportTasksWithContextCalls(stub func(aws.Context, *ec2.DescribeExportTasksInput, ...request.Option) (*ec2.DescribeExportTasksOutput, error)) {
	fake.describeExportTasksWithContextMutex.Lock()
	defer fake.describeExportTasksWithContextMutex.Unlock()
	fake.DescribeExportTasksWithContextStub = stub
}

func (fake *FakeEC2API) DescribeExportTasksWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeExportTasksInput, []request.Option) {
	fake.describeExportTasksWithContextMutex.RLock()
	defer fake.describeExportTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeExportTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeExportTasksWithContextReturns(result1 *ec2.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksWithContextMutex.Lock()
	defer fake.describeExportTasksWithContextMutex.Unlock()
	fake.DescribeExportTasksWithContextStub = nil
	fake.describeExportTasksWithContextReturns = struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeExportTasksWithContextReturnsOnCall(i int, result1 *ec2.DescribeExportTasksOutput, result2 error) {
	fake.describeExportTasksWithContextMutex.Lock()
	defer fake.describeExportTasksWithContextMutex.Unlock()
	fake.DescribeExportTasksWithContextStub = nil
	if fake.describeExportTasksWithContextReturnsOnCall == nil {
		fake.describeExportTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeExportTasksOutput
			result2 error
		})
	}
	fake.describeExportTasksWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeExportTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetHistory(arg1 *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error) {
	fake.describeFleetHistoryMutex.Lock()
	ret, specificReturn := fake.describeFleetHistoryReturnsOnCall[len(fake.describeFleetHistoryArgsForCall)]
	fake.describeFleetHistoryArgsForCall = append(fake.describeFleetHistoryArgsForCall, struct {
		arg1 *ec2.DescribeFleetHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeFleetHistory", []interface{}{arg1})
	fake.describeFleetHistoryMutex.Unlock()
	if fake.DescribeFleetHistoryStub != nil {
		return fake.DescribeFleetHistoryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetHistoryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetHistoryCallCount() int {
	fake.describeFleetHistoryMutex.RLock()
	defer fake.describeFleetHistoryMutex.RUnlock()
	return len(fake.describeFleetHistoryArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetHistoryCalls(stub func(*ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error)) {
	fake.describeFleetHistoryMutex.Lock()
	defer fake.describeFleetHistoryMutex.Unlock()
	fake.DescribeFleetHistoryStub = stub
}

func (fake *FakeEC2API) DescribeFleetHistoryArgsForCall(i int) *ec2.DescribeFleetHistoryInput {
	fake.describeFleetHistoryMutex.RLock()
	defer fake.describeFleetHistoryMutex.RUnlock()
	argsForCall := fake.describeFleetHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFleetHistoryReturns(result1 *ec2.DescribeFleetHistoryOutput, result2 error) {
	fake.describeFleetHistoryMutex.Lock()
	defer fake.describeFleetHistoryMutex.Unlock()
	fake.DescribeFleetHistoryStub = nil
	fake.describeFleetHistoryReturns = struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetHistoryReturnsOnCall(i int, result1 *ec2.DescribeFleetHistoryOutput, result2 error) {
	fake.describeFleetHistoryMutex.Lock()
	defer fake.describeFleetHistoryMutex.Unlock()
	fake.DescribeFleetHistoryStub = nil
	if fake.describeFleetHistoryReturnsOnCall == nil {
		fake.describeFleetHistoryReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFleetHistoryOutput
			result2 error
		})
	}
	fake.describeFleetHistoryReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetHistoryRequest(arg1 *ec2.DescribeFleetHistoryInput) (*request.Request, *ec2.DescribeFleetHistoryOutput) {
	fake.describeFleetHistoryRequestMutex.Lock()
	ret, specificReturn := fake.describeFleetHistoryRequestReturnsOnCall[len(fake.describeFleetHistoryRequestArgsForCall)]
	fake.describeFleetHistoryRequestArgsForCall = append(fake.describeFleetHistoryRequestArgsForCall, struct {
		arg1 *ec2.DescribeFleetHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeFleetHistoryRequest", []interface{}{arg1})
	fake.describeFleetHistoryRequestMutex.Unlock()
	if fake.DescribeFleetHistoryRequestStub != nil {
		return fake.DescribeFleetHistoryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetHistoryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetHistoryRequestCallCount() int {
	fake.describeFleetHistoryRequestMutex.RLock()
	defer fake.describeFleetHistoryRequestMutex.RUnlock()
	return len(fake.describeFleetHistoryRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetHistoryRequestCalls(stub func(*ec2.DescribeFleetHistoryInput) (*request.Request, *ec2.DescribeFleetHistoryOutput)) {
	fake.describeFleetHistoryRequestMutex.Lock()
	defer fake.describeFleetHistoryRequestMutex.Unlock()
	fake.DescribeFleetHistoryRequestStub = stub
}

func (fake *FakeEC2API) DescribeFleetHistoryRequestArgsForCall(i int) *ec2.DescribeFleetHistoryInput {
	fake.describeFleetHistoryRequestMutex.RLock()
	defer fake.describeFleetHistoryRequestMutex.RUnlock()
	argsForCall := fake.describeFleetHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFleetHistoryRequestReturns(result1 *request.Request, result2 *ec2.DescribeFleetHistoryOutput) {
	fake.describeFleetHistoryRequestMutex.Lock()
	defer fake.describeFleetHistoryRequestMutex.Unlock()
	fake.DescribeFleetHistoryRequestStub = nil
	fake.describeFleetHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetHistoryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeFleetHistoryOutput) {
	fake.describeFleetHistoryRequestMutex.Lock()
	defer fake.describeFleetHistoryRequestMutex.Unlock()
	fake.DescribeFleetHistoryRequestStub = nil
	if fake.describeFleetHistoryRequestReturnsOnCall == nil {
		fake.describeFleetHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeFleetHistoryOutput
		})
	}
	fake.describeFleetHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetHistoryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetHistoryWithContext(arg1 aws.Context, arg2 *ec2.DescribeFleetHistoryInput, arg3 ...request.Option) (*ec2.DescribeFleetHistoryOutput, error) {
	fake.describeFleetHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.describeFleetHistoryWithContextReturnsOnCall[len(fake.describeFleetHistoryWithContextArgsForCall)]
	fake.describeFleetHistoryWithContextArgsForCall = append(fake.describeFleetHistoryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFleetHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeFleetHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFleetHistoryWithContextMutex.Unlock()
	if fake.DescribeFleetHistoryWithContextStub != nil {
		return fake.DescribeFleetHistoryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetHistoryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetHistoryWithContextCallCount() int {
	fake.describeFleetHistoryWithContextMutex.RLock()
	defer fake.describeFleetHistoryWithContextMutex.RUnlock()
	return len(fake.describeFleetHistoryWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetHistoryWithContextCalls(stub func(aws.Context, *ec2.DescribeFleetHistoryInput, ...request.Option) (*ec2.DescribeFleetHistoryOutput, error)) {
	fake.describeFleetHistoryWithContextMutex.Lock()
	defer fake.describeFleetHistoryWithContextMutex.Unlock()
	fake.DescribeFleetHistoryWithContextStub = stub
}

func (fake *FakeEC2API) DescribeFleetHistoryWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeFleetHistoryInput, []request.Option) {
	fake.describeFleetHistoryWithContextMutex.RLock()
	defer fake.describeFleetHistoryWithContextMutex.RUnlock()
	argsForCall := fake.describeFleetHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeFleetHistoryWithContextReturns(result1 *ec2.DescribeFleetHistoryOutput, result2 error) {
	fake.describeFleetHistoryWithContextMutex.Lock()
	defer fake.describeFleetHistoryWithContextMutex.Unlock()
	fake.DescribeFleetHistoryWithContextStub = nil
	fake.describeFleetHistoryWithContextReturns = struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetHistoryWithContextReturnsOnCall(i int, result1 *ec2.DescribeFleetHistoryOutput, result2 error) {
	fake.describeFleetHistoryWithContextMutex.Lock()
	defer fake.describeFleetHistoryWithContextMutex.Unlock()
	fake.DescribeFleetHistoryWithContextStub = nil
	if fake.describeFleetHistoryWithContextReturnsOnCall == nil {
		fake.describeFleetHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFleetHistoryOutput
			result2 error
		})
	}
	fake.describeFleetHistoryWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFleetHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetInstances(arg1 *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error) {
	fake.describeFleetInstancesMutex.Lock()
	ret, specificReturn := fake.describeFleetInstancesReturnsOnCall[len(fake.describeFleetInstancesArgsForCall)]
	fake.describeFleetInstancesArgsForCall = append(fake.describeFleetInstancesArgsForCall, struct {
		arg1 *ec2.DescribeFleetInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeFleetInstances", []interface{}{arg1})
	fake.describeFleetInstancesMutex.Unlock()
	if fake.DescribeFleetInstancesStub != nil {
		return fake.DescribeFleetInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetInstancesCallCount() int {
	fake.describeFleetInstancesMutex.RLock()
	defer fake.describeFleetInstancesMutex.RUnlock()
	return len(fake.describeFleetInstancesArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetInstancesCalls(stub func(*ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error)) {
	fake.describeFleetInstancesMutex.Lock()
	defer fake.describeFleetInstancesMutex.Unlock()
	fake.DescribeFleetInstancesStub = stub
}

func (fake *FakeEC2API) DescribeFleetInstancesArgsForCall(i int) *ec2.DescribeFleetInstancesInput {
	fake.describeFleetInstancesMutex.RLock()
	defer fake.describeFleetInstancesMutex.RUnlock()
	argsForCall := fake.describeFleetInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFleetInstancesReturns(result1 *ec2.DescribeFleetInstancesOutput, result2 error) {
	fake.describeFleetInstancesMutex.Lock()
	defer fake.describeFleetInstancesMutex.Unlock()
	fake.DescribeFleetInstancesStub = nil
	fake.describeFleetInstancesReturns = struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetInstancesReturnsOnCall(i int, result1 *ec2.DescribeFleetInstancesOutput, result2 error) {
	fake.describeFleetInstancesMutex.Lock()
	defer fake.describeFleetInstancesMutex.Unlock()
	fake.DescribeFleetInstancesStub = nil
	if fake.describeFleetInstancesReturnsOnCall == nil {
		fake.describeFleetInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFleetInstancesOutput
			result2 error
		})
	}
	fake.describeFleetInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetInstancesRequest(arg1 *ec2.DescribeFleetInstancesInput) (*request.Request, *ec2.DescribeFleetInstancesOutput) {
	fake.describeFleetInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeFleetInstancesRequestReturnsOnCall[len(fake.describeFleetInstancesRequestArgsForCall)]
	fake.describeFleetInstancesRequestArgsForCall = append(fake.describeFleetInstancesRequestArgsForCall, struct {
		arg1 *ec2.DescribeFleetInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeFleetInstancesRequest", []interface{}{arg1})
	fake.describeFleetInstancesRequestMutex.Unlock()
	if fake.DescribeFleetInstancesRequestStub != nil {
		return fake.DescribeFleetInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetInstancesRequestCallCount() int {
	fake.describeFleetInstancesRequestMutex.RLock()
	defer fake.describeFleetInstancesRequestMutex.RUnlock()
	return len(fake.describeFleetInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetInstancesRequestCalls(stub func(*ec2.DescribeFleetInstancesInput) (*request.Request, *ec2.DescribeFleetInstancesOutput)) {
	fake.describeFleetInstancesRequestMutex.Lock()
	defer fake.describeFleetInstancesRequestMutex.Unlock()
	fake.DescribeFleetInstancesRequestStub = stub
}

func (fake *FakeEC2API) DescribeFleetInstancesRequestArgsForCall(i int) *ec2.DescribeFleetInstancesInput {
	fake.describeFleetInstancesRequestMutex.RLock()
	defer fake.describeFleetInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeFleetInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFleetInstancesRequestReturns(result1 *request.Request, result2 *ec2.DescribeFleetInstancesOutput) {
	fake.describeFleetInstancesRequestMutex.Lock()
	defer fake.describeFleetInstancesRequestMutex.Unlock()
	fake.DescribeFleetInstancesRequestStub = nil
	fake.describeFleetInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeFleetInstancesOutput) {
	fake.describeFleetInstancesRequestMutex.Lock()
	defer fake.describeFleetInstancesRequestMutex.Unlock()
	fake.DescribeFleetInstancesRequestStub = nil
	if fake.describeFleetInstancesRequestReturnsOnCall == nil {
		fake.describeFleetInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeFleetInstancesOutput
		})
	}
	fake.describeFleetInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetInstancesWithContext(arg1 aws.Context, arg2 *ec2.DescribeFleetInstancesInput, arg3 ...request.Option) (*ec2.DescribeFleetInstancesOutput, error) {
	fake.describeFleetInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeFleetInstancesWithContextReturnsOnCall[len(fake.describeFleetInstancesWithContextArgsForCall)]
	fake.describeFleetInstancesWithContextArgsForCall = append(fake.describeFleetInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFleetInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeFleetInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFleetInstancesWithContextMutex.Unlock()
	if fake.DescribeFleetInstancesWithContextStub != nil {
		return fake.DescribeFleetInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetInstancesWithContextCallCount() int {
	fake.describeFleetInstancesWithContextMutex.RLock()
	defer fake.describeFleetInstancesWithContextMutex.RUnlock()
	return len(fake.describeFleetInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetInstancesWithContextCalls(stub func(aws.Context, *ec2.DescribeFleetInstancesInput, ...request.Option) (*ec2.DescribeFleetInstancesOutput, error)) {
	fake.describeFleetInstancesWithContextMutex.Lock()
	defer fake.describeFleetInstancesWithContextMutex.Unlock()
	fake.DescribeFleetInstancesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeFleetInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeFleetInstancesInput, []request.Option) {
	fake.describeFleetInstancesWithContextMutex.RLock()
	defer fake.describeFleetInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeFleetInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeFleetInstancesWithContextReturns(result1 *ec2.DescribeFleetInstancesOutput, result2 error) {
	fake.describeFleetInstancesWithContextMutex.Lock()
	defer fake.describeFleetInstancesWithContextMutex.Unlock()
	fake.DescribeFleetInstancesWithContextStub = nil
	fake.describeFleetInstancesWithContextReturns = struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetInstancesWithContextReturnsOnCall(i int, result1 *ec2.DescribeFleetInstancesOutput, result2 error) {
	fake.describeFleetInstancesWithContextMutex.Lock()
	defer fake.describeFleetInstancesWithContextMutex.Unlock()
	fake.DescribeFleetInstancesWithContextStub = nil
	if fake.describeFleetInstancesWithContextReturnsOnCall == nil {
		fake.describeFleetInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFleetInstancesOutput
			result2 error
		})
	}
	fake.describeFleetInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleets(arg1 *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error) {
	fake.describeFleetsMutex.Lock()
	ret, specificReturn := fake.describeFleetsReturnsOnCall[len(fake.describeFleetsArgsForCall)]
	fake.describeFleetsArgsForCall = append(fake.describeFleetsArgsForCall, struct {
		arg1 *ec2.DescribeFleetsInput
	}{arg1})
	fake.recordInvocation("DescribeFleets", []interface{}{arg1})
	fake.describeFleetsMutex.Unlock()
	if fake.DescribeFleetsStub != nil {
		return fake.DescribeFleetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetsCallCount() int {
	fake.describeFleetsMutex.RLock()
	defer fake.describeFleetsMutex.RUnlock()
	return len(fake.describeFleetsArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetsCalls(stub func(*ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error)) {
	fake.describeFleetsMutex.Lock()
	defer fake.describeFleetsMutex.Unlock()
	fake.DescribeFleetsStub = stub
}

func (fake *FakeEC2API) DescribeFleetsArgsForCall(i int) *ec2.DescribeFleetsInput {
	fake.describeFleetsMutex.RLock()
	defer fake.describeFleetsMutex.RUnlock()
	argsForCall := fake.describeFleetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFleetsReturns(result1 *ec2.DescribeFleetsOutput, result2 error) {
	fake.describeFleetsMutex.Lock()
	defer fake.describeFleetsMutex.Unlock()
	fake.DescribeFleetsStub = nil
	fake.describeFleetsReturns = struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetsReturnsOnCall(i int, result1 *ec2.DescribeFleetsOutput, result2 error) {
	fake.describeFleetsMutex.Lock()
	defer fake.describeFleetsMutex.Unlock()
	fake.DescribeFleetsStub = nil
	if fake.describeFleetsReturnsOnCall == nil {
		fake.describeFleetsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFleetsOutput
			result2 error
		})
	}
	fake.describeFleetsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetsRequest(arg1 *ec2.DescribeFleetsInput) (*request.Request, *ec2.DescribeFleetsOutput) {
	fake.describeFleetsRequestMutex.Lock()
	ret, specificReturn := fake.describeFleetsRequestReturnsOnCall[len(fake.describeFleetsRequestArgsForCall)]
	fake.describeFleetsRequestArgsForCall = append(fake.describeFleetsRequestArgsForCall, struct {
		arg1 *ec2.DescribeFleetsInput
	}{arg1})
	fake.recordInvocation("DescribeFleetsRequest", []interface{}{arg1})
	fake.describeFleetsRequestMutex.Unlock()
	if fake.DescribeFleetsRequestStub != nil {
		return fake.DescribeFleetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetsRequestCallCount() int {
	fake.describeFleetsRequestMutex.RLock()
	defer fake.describeFleetsRequestMutex.RUnlock()
	return len(fake.describeFleetsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetsRequestCalls(stub func(*ec2.DescribeFleetsInput) (*request.Request, *ec2.DescribeFleetsOutput)) {
	fake.describeFleetsRequestMutex.Lock()
	defer fake.describeFleetsRequestMutex.Unlock()
	fake.DescribeFleetsRequestStub = stub
}

func (fake *FakeEC2API) DescribeFleetsRequestArgsForCall(i int) *ec2.DescribeFleetsInput {
	fake.describeFleetsRequestMutex.RLock()
	defer fake.describeFleetsRequestMutex.RUnlock()
	argsForCall := fake.describeFleetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFleetsRequestReturns(result1 *request.Request, result2 *ec2.DescribeFleetsOutput) {
	fake.describeFleetsRequestMutex.Lock()
	defer fake.describeFleetsRequestMutex.Unlock()
	fake.DescribeFleetsRequestStub = nil
	fake.describeFleetsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeFleetsOutput) {
	fake.describeFleetsRequestMutex.Lock()
	defer fake.describeFleetsRequestMutex.Unlock()
	fake.DescribeFleetsRequestStub = nil
	if fake.describeFleetsRequestReturnsOnCall == nil {
		fake.describeFleetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeFleetsOutput
		})
	}
	fake.describeFleetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeFleetsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetsWithContext(arg1 aws.Context, arg2 *ec2.DescribeFleetsInput, arg3 ...request.Option) (*ec2.DescribeFleetsOutput, error) {
	fake.describeFleetsWithContextMutex.Lock()
	ret, specificReturn := fake.describeFleetsWithContextReturnsOnCall[len(fake.describeFleetsWithContextArgsForCall)]
	fake.describeFleetsWithContextArgsForCall = append(fake.describeFleetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFleetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeFleetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFleetsWithContextMutex.Unlock()
	if fake.DescribeFleetsWithContextStub != nil {
		return fake.DescribeFleetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFleetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFleetsWithContextCallCount() int {
	fake.describeFleetsWithContextMutex.RLock()
	defer fake.describeFleetsWithContextMutex.RUnlock()
	return len(fake.describeFleetsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeFleetsWithContextCalls(stub func(aws.Context, *ec2.DescribeFleetsInput, ...request.Option) (*ec2.DescribeFleetsOutput, error)) {
	fake.describeFleetsWithContextMutex.Lock()
	defer fake.describeFleetsWithContextMutex.Unlock()
	fake.DescribeFleetsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeFleetsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeFleetsInput, []request.Option) {
	fake.describeFleetsWithContextMutex.RLock()
	defer fake.describeFleetsWithContextMutex.RUnlock()
	argsForCall := fake.describeFleetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeFleetsWithContextReturns(result1 *ec2.DescribeFleetsOutput, result2 error) {
	fake.describeFleetsWithContextMutex.Lock()
	defer fake.describeFleetsWithContextMutex.Unlock()
	fake.DescribeFleetsWithContextStub = nil
	fake.describeFleetsWithContextReturns = struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFleetsWithContextReturnsOnCall(i int, result1 *ec2.DescribeFleetsOutput, result2 error) {
	fake.describeFleetsWithContextMutex.Lock()
	defer fake.describeFleetsWithContextMutex.Unlock()
	fake.DescribeFleetsWithContextStub = nil
	if fake.describeFleetsWithContextReturnsOnCall == nil {
		fake.describeFleetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFleetsOutput
			result2 error
		})
	}
	fake.describeFleetsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFleetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFlowLogs(arg1 *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	fake.describeFlowLogsMutex.Lock()
	ret, specificReturn := fake.describeFlowLogsReturnsOnCall[len(fake.describeFlowLogsArgsForCall)]
	fake.describeFlowLogsArgsForCall = append(fake.describeFlowLogsArgsForCall, struct {
		arg1 *ec2.DescribeFlowLogsInput
	}{arg1})
	fake.recordInvocation("DescribeFlowLogs", []interface{}{arg1})
	fake.describeFlowLogsMutex.Unlock()
	if fake.DescribeFlowLogsStub != nil {
		return fake.DescribeFlowLogsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFlowLogsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFlowLogsCallCount() int {
	fake.describeFlowLogsMutex.RLock()
	defer fake.describeFlowLogsMutex.RUnlock()
	return len(fake.describeFlowLogsArgsForCall)
}

func (fake *FakeEC2API) DescribeFlowLogsCalls(stub func(*ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error)) {
	fake.describeFlowLogsMutex.Lock()
	defer fake.describeFlowLogsMutex.Unlock()
	fake.DescribeFlowLogsStub = stub
}

func (fake *FakeEC2API) DescribeFlowLogsArgsForCall(i int) *ec2.DescribeFlowLogsInput {
	fake.describeFlowLogsMutex.RLock()
	defer fake.describeFlowLogsMutex.RUnlock()
	argsForCall := fake.describeFlowLogsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFlowLogsReturns(result1 *ec2.DescribeFlowLogsOutput, result2 error) {
	fake.describeFlowLogsMutex.Lock()
	defer fake.describeFlowLogsMutex.Unlock()
	fake.DescribeFlowLogsStub = nil
	fake.describeFlowLogsReturns = struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFlowLogsReturnsOnCall(i int, result1 *ec2.DescribeFlowLogsOutput, result2 error) {
	fake.describeFlowLogsMutex.Lock()
	defer fake.describeFlowLogsMutex.Unlock()
	fake.DescribeFlowLogsStub = nil
	if fake.describeFlowLogsReturnsOnCall == nil {
		fake.describeFlowLogsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFlowLogsOutput
			result2 error
		})
	}
	fake.describeFlowLogsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFlowLogsRequest(arg1 *ec2.DescribeFlowLogsInput) (*request.Request, *ec2.DescribeFlowLogsOutput) {
	fake.describeFlowLogsRequestMutex.Lock()
	ret, specificReturn := fake.describeFlowLogsRequestReturnsOnCall[len(fake.describeFlowLogsRequestArgsForCall)]
	fake.describeFlowLogsRequestArgsForCall = append(fake.describeFlowLogsRequestArgsForCall, struct {
		arg1 *ec2.DescribeFlowLogsInput
	}{arg1})
	fake.recordInvocation("DescribeFlowLogsRequest", []interface{}{arg1})
	fake.describeFlowLogsRequestMutex.Unlock()
	if fake.DescribeFlowLogsRequestStub != nil {
		return fake.DescribeFlowLogsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFlowLogsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFlowLogsRequestCallCount() int {
	fake.describeFlowLogsRequestMutex.RLock()
	defer fake.describeFlowLogsRequestMutex.RUnlock()
	return len(fake.describeFlowLogsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeFlowLogsRequestCalls(stub func(*ec2.DescribeFlowLogsInput) (*request.Request, *ec2.DescribeFlowLogsOutput)) {
	fake.describeFlowLogsRequestMutex.Lock()
	defer fake.describeFlowLogsRequestMutex.Unlock()
	fake.DescribeFlowLogsRequestStub = stub
}

func (fake *FakeEC2API) DescribeFlowLogsRequestArgsForCall(i int) *ec2.DescribeFlowLogsInput {
	fake.describeFlowLogsRequestMutex.RLock()
	defer fake.describeFlowLogsRequestMutex.RUnlock()
	argsForCall := fake.describeFlowLogsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFlowLogsRequestReturns(result1 *request.Request, result2 *ec2.DescribeFlowLogsOutput) {
	fake.describeFlowLogsRequestMutex.Lock()
	defer fake.describeFlowLogsRequestMutex.Unlock()
	fake.DescribeFlowLogsRequestStub = nil
	fake.describeFlowLogsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeFlowLogsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFlowLogsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeFlowLogsOutput) {
	fake.describeFlowLogsRequestMutex.Lock()
	defer fake.describeFlowLogsRequestMutex.Unlock()
	fake.DescribeFlowLogsRequestStub = nil
	if fake.describeFlowLogsRequestReturnsOnCall == nil {
		fake.describeFlowLogsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeFlowLogsOutput
		})
	}
	fake.describeFlowLogsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeFlowLogsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFlowLogsWithContext(arg1 aws.Context, arg2 *ec2.DescribeFlowLogsInput, arg3 ...request.Option) (*ec2.DescribeFlowLogsOutput, error) {
	fake.describeFlowLogsWithContextMutex.Lock()
	ret, specificReturn := fake.describeFlowLogsWithContextReturnsOnCall[len(fake.describeFlowLogsWithContextArgsForCall)]
	fake.describeFlowLogsWithContextArgsForCall = append(fake.describeFlowLogsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFlowLogsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeFlowLogsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFlowLogsWithContextMutex.Unlock()
	if fake.DescribeFlowLogsWithContextStub != nil {
		return fake.DescribeFlowLogsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFlowLogsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFlowLogsWithContextCallCount() int {
	fake.describeFlowLogsWithContextMutex.RLock()
	defer fake.describeFlowLogsWithContextMutex.RUnlock()
	return len(fake.describeFlowLogsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeFlowLogsWithContextCalls(stub func(aws.Context, *ec2.DescribeFlowLogsInput, ...request.Option) (*ec2.DescribeFlowLogsOutput, error)) {
	fake.describeFlowLogsWithContextMutex.Lock()
	defer fake.describeFlowLogsWithContextMutex.Unlock()
	fake.DescribeFlowLogsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeFlowLogsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeFlowLogsInput, []request.Option) {
	fake.describeFlowLogsWithContextMutex.RLock()
	defer fake.describeFlowLogsWithContextMutex.RUnlock()
	argsForCall := fake.describeFlowLogsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeFlowLogsWithContextReturns(result1 *ec2.DescribeFlowLogsOutput, result2 error) {
	fake.describeFlowLogsWithContextMutex.Lock()
	defer fake.describeFlowLogsWithContextMutex.Unlock()
	fake.DescribeFlowLogsWithContextStub = nil
	fake.describeFlowLogsWithContextReturns = struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFlowLogsWithContextReturnsOnCall(i int, result1 *ec2.DescribeFlowLogsOutput, result2 error) {
	fake.describeFlowLogsWithContextMutex.Lock()
	defer fake.describeFlowLogsWithContextMutex.Unlock()
	fake.DescribeFlowLogsWithContextStub = nil
	if fake.describeFlowLogsWithContextReturnsOnCall == nil {
		fake.describeFlowLogsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFlowLogsOutput
			result2 error
		})
	}
	fake.describeFlowLogsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFlowLogsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImageAttribute(arg1 *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	fake.describeFpgaImageAttributeMutex.Lock()
	ret, specificReturn := fake.describeFpgaImageAttributeReturnsOnCall[len(fake.describeFpgaImageAttributeArgsForCall)]
	fake.describeFpgaImageAttributeArgsForCall = append(fake.describeFpgaImageAttributeArgsForCall, struct {
		arg1 *ec2.DescribeFpgaImageAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeFpgaImageAttribute", []interface{}{arg1})
	fake.describeFpgaImageAttributeMutex.Unlock()
	if fake.DescribeFpgaImageAttributeStub != nil {
		return fake.DescribeFpgaImageAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFpgaImageAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeCallCount() int {
	fake.describeFpgaImageAttributeMutex.RLock()
	defer fake.describeFpgaImageAttributeMutex.RUnlock()
	return len(fake.describeFpgaImageAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeCalls(stub func(*ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error)) {
	fake.describeFpgaImageAttributeMutex.Lock()
	defer fake.describeFpgaImageAttributeMutex.Unlock()
	fake.DescribeFpgaImageAttributeStub = stub
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeArgsForCall(i int) *ec2.DescribeFpgaImageAttributeInput {
	fake.describeFpgaImageAttributeMutex.RLock()
	defer fake.describeFpgaImageAttributeMutex.RUnlock()
	argsForCall := fake.describeFpgaImageAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeReturns(result1 *ec2.DescribeFpgaImageAttributeOutput, result2 error) {
	fake.describeFpgaImageAttributeMutex.Lock()
	defer fake.describeFpgaImageAttributeMutex.Unlock()
	fake.DescribeFpgaImageAttributeStub = nil
	fake.describeFpgaImageAttributeReturns = struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeReturnsOnCall(i int, result1 *ec2.DescribeFpgaImageAttributeOutput, result2 error) {
	fake.describeFpgaImageAttributeMutex.Lock()
	defer fake.describeFpgaImageAttributeMutex.Unlock()
	fake.DescribeFpgaImageAttributeStub = nil
	if fake.describeFpgaImageAttributeReturnsOnCall == nil {
		fake.describeFpgaImageAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFpgaImageAttributeOutput
			result2 error
		})
	}
	fake.describeFpgaImageAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeRequest(arg1 *ec2.DescribeFpgaImageAttributeInput) (*request.Request, *ec2.DescribeFpgaImageAttributeOutput) {
	fake.describeFpgaImageAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeFpgaImageAttributeRequestReturnsOnCall[len(fake.describeFpgaImageAttributeRequestArgsForCall)]
	fake.describeFpgaImageAttributeRequestArgsForCall = append(fake.describeFpgaImageAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeFpgaImageAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeFpgaImageAttributeRequest", []interface{}{arg1})
	fake.describeFpgaImageAttributeRequestMutex.Unlock()
	if fake.DescribeFpgaImageAttributeRequestStub != nil {
		return fake.DescribeFpgaImageAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFpgaImageAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeRequestCallCount() int {
	fake.describeFpgaImageAttributeRequestMutex.RLock()
	defer fake.describeFpgaImageAttributeRequestMutex.RUnlock()
	return len(fake.describeFpgaImageAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeRequestCalls(stub func(*ec2.DescribeFpgaImageAttributeInput) (*request.Request, *ec2.DescribeFpgaImageAttributeOutput)) {
	fake.describeFpgaImageAttributeRequestMutex.Lock()
	defer fake.describeFpgaImageAttributeRequestMutex.Unlock()
	fake.DescribeFpgaImageAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeRequestArgsForCall(i int) *ec2.DescribeFpgaImageAttributeInput {
	fake.describeFpgaImageAttributeRequestMutex.RLock()
	defer fake.describeFpgaImageAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeFpgaImageAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeFpgaImageAttributeOutput) {
	fake.describeFpgaImageAttributeRequestMutex.Lock()
	defer fake.describeFpgaImageAttributeRequestMutex.Unlock()
	fake.DescribeFpgaImageAttributeRequestStub = nil
	fake.describeFpgaImageAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeFpgaImageAttributeOutput) {
	fake.describeFpgaImageAttributeRequestMutex.Lock()
	defer fake.describeFpgaImageAttributeRequestMutex.Unlock()
	fake.DescribeFpgaImageAttributeRequestStub = nil
	if fake.describeFpgaImageAttributeRequestReturnsOnCall == nil {
		fake.describeFpgaImageAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeFpgaImageAttributeOutput
		})
	}
	fake.describeFpgaImageAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeFpgaImageAttributeInput, arg3 ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	fake.describeFpgaImageAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeFpgaImageAttributeWithContextReturnsOnCall[len(fake.describeFpgaImageAttributeWithContextArgsForCall)]
	fake.describeFpgaImageAttributeWithContextArgsForCall = append(fake.describeFpgaImageAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFpgaImageAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeFpgaImageAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFpgaImageAttributeWithContextMutex.Unlock()
	if fake.DescribeFpgaImageAttributeWithContextStub != nil {
		return fake.DescribeFpgaImageAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFpgaImageAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeWithContextCallCount() int {
	fake.describeFpgaImageAttributeWithContextMutex.RLock()
	defer fake.describeFpgaImageAttributeWithContextMutex.RUnlock()
	return len(fake.describeFpgaImageAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeFpgaImageAttributeInput, ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error)) {
	fake.describeFpgaImageAttributeWithContextMutex.Lock()
	defer fake.describeFpgaImageAttributeWithContextMutex.Unlock()
	fake.DescribeFpgaImageAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeFpgaImageAttributeInput, []request.Option) {
	fake.describeFpgaImageAttributeWithContextMutex.RLock()
	defer fake.describeFpgaImageAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeFpgaImageAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeWithContextReturns(result1 *ec2.DescribeFpgaImageAttributeOutput, result2 error) {
	fake.describeFpgaImageAttributeWithContextMutex.Lock()
	defer fake.describeFpgaImageAttributeWithContextMutex.Unlock()
	fake.DescribeFpgaImageAttributeWithContextStub = nil
	fake.describeFpgaImageAttributeWithContextReturns = struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImageAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeFpgaImageAttributeOutput, result2 error) {
	fake.describeFpgaImageAttributeWithContextMutex.Lock()
	defer fake.describeFpgaImageAttributeWithContextMutex.Unlock()
	fake.DescribeFpgaImageAttributeWithContextStub = nil
	if fake.describeFpgaImageAttributeWithContextReturnsOnCall == nil {
		fake.describeFpgaImageAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFpgaImageAttributeOutput
			result2 error
		})
	}
	fake.describeFpgaImageAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImages(arg1 *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
	fake.describeFpgaImagesMutex.Lock()
	ret, specificReturn := fake.describeFpgaImagesReturnsOnCall[len(fake.describeFpgaImagesArgsForCall)]
	fake.describeFpgaImagesArgsForCall = append(fake.describeFpgaImagesArgsForCall, struct {
		arg1 *ec2.DescribeFpgaImagesInput
	}{arg1})
	fake.recordInvocation("DescribeFpgaImages", []interface{}{arg1})
	fake.describeFpgaImagesMutex.Unlock()
	if fake.DescribeFpgaImagesStub != nil {
		return fake.DescribeFpgaImagesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFpgaImagesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFpgaImagesCallCount() int {
	fake.describeFpgaImagesMutex.RLock()
	defer fake.describeFpgaImagesMutex.RUnlock()
	return len(fake.describeFpgaImagesArgsForCall)
}

func (fake *FakeEC2API) DescribeFpgaImagesCalls(stub func(*ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error)) {
	fake.describeFpgaImagesMutex.Lock()
	defer fake.describeFpgaImagesMutex.Unlock()
	fake.DescribeFpgaImagesStub = stub
}

func (fake *FakeEC2API) DescribeFpgaImagesArgsForCall(i int) *ec2.DescribeFpgaImagesInput {
	fake.describeFpgaImagesMutex.RLock()
	defer fake.describeFpgaImagesMutex.RUnlock()
	argsForCall := fake.describeFpgaImagesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFpgaImagesReturns(result1 *ec2.DescribeFpgaImagesOutput, result2 error) {
	fake.describeFpgaImagesMutex.Lock()
	defer fake.describeFpgaImagesMutex.Unlock()
	fake.DescribeFpgaImagesStub = nil
	fake.describeFpgaImagesReturns = struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImagesReturnsOnCall(i int, result1 *ec2.DescribeFpgaImagesOutput, result2 error) {
	fake.describeFpgaImagesMutex.Lock()
	defer fake.describeFpgaImagesMutex.Unlock()
	fake.DescribeFpgaImagesStub = nil
	if fake.describeFpgaImagesReturnsOnCall == nil {
		fake.describeFpgaImagesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFpgaImagesOutput
			result2 error
		})
	}
	fake.describeFpgaImagesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImagesRequest(arg1 *ec2.DescribeFpgaImagesInput) (*request.Request, *ec2.DescribeFpgaImagesOutput) {
	fake.describeFpgaImagesRequestMutex.Lock()
	ret, specificReturn := fake.describeFpgaImagesRequestReturnsOnCall[len(fake.describeFpgaImagesRequestArgsForCall)]
	fake.describeFpgaImagesRequestArgsForCall = append(fake.describeFpgaImagesRequestArgsForCall, struct {
		arg1 *ec2.DescribeFpgaImagesInput
	}{arg1})
	fake.recordInvocation("DescribeFpgaImagesRequest", []interface{}{arg1})
	fake.describeFpgaImagesRequestMutex.Unlock()
	if fake.DescribeFpgaImagesRequestStub != nil {
		return fake.DescribeFpgaImagesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFpgaImagesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFpgaImagesRequestCallCount() int {
	fake.describeFpgaImagesRequestMutex.RLock()
	defer fake.describeFpgaImagesRequestMutex.RUnlock()
	return len(fake.describeFpgaImagesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeFpgaImagesRequestCalls(stub func(*ec2.DescribeFpgaImagesInput) (*request.Request, *ec2.DescribeFpgaImagesOutput)) {
	fake.describeFpgaImagesRequestMutex.Lock()
	defer fake.describeFpgaImagesRequestMutex.Unlock()
	fake.DescribeFpgaImagesRequestStub = stub
}

func (fake *FakeEC2API) DescribeFpgaImagesRequestArgsForCall(i int) *ec2.DescribeFpgaImagesInput {
	fake.describeFpgaImagesRequestMutex.RLock()
	defer fake.describeFpgaImagesRequestMutex.RUnlock()
	argsForCall := fake.describeFpgaImagesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeFpgaImagesRequestReturns(result1 *request.Request, result2 *ec2.DescribeFpgaImagesOutput) {
	fake.describeFpgaImagesRequestMutex.Lock()
	defer fake.describeFpgaImagesRequestMutex.Unlock()
	fake.DescribeFpgaImagesRequestStub = nil
	fake.describeFpgaImagesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImagesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImagesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeFpgaImagesOutput) {
	fake.describeFpgaImagesRequestMutex.Lock()
	defer fake.describeFpgaImagesRequestMutex.Unlock()
	fake.DescribeFpgaImagesRequestStub = nil
	if fake.describeFpgaImagesRequestReturnsOnCall == nil {
		fake.describeFpgaImagesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeFpgaImagesOutput
		})
	}
	fake.describeFpgaImagesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeFpgaImagesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeFpgaImagesInput, arg3 ...request.Option) (*ec2.DescribeFpgaImagesOutput, error) {
	fake.describeFpgaImagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeFpgaImagesWithContextReturnsOnCall[len(fake.describeFpgaImagesWithContextArgsForCall)]
	fake.describeFpgaImagesWithContextArgsForCall = append(fake.describeFpgaImagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeFpgaImagesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeFpgaImagesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeFpgaImagesWithContextMutex.Unlock()
	if fake.DescribeFpgaImagesWithContextStub != nil {
		return fake.DescribeFpgaImagesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeFpgaImagesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeFpgaImagesWithContextCallCount() int {
	fake.describeFpgaImagesWithContextMutex.RLock()
	defer fake.describeFpgaImagesWithContextMutex.RUnlock()
	return len(fake.describeFpgaImagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeFpgaImagesWithContextCalls(stub func(aws.Context, *ec2.DescribeFpgaImagesInput, ...request.Option) (*ec2.DescribeFpgaImagesOutput, error)) {
	fake.describeFpgaImagesWithContextMutex.Lock()
	defer fake.describeFpgaImagesWithContextMutex.Unlock()
	fake.DescribeFpgaImagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeFpgaImagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeFpgaImagesInput, []request.Option) {
	fake.describeFpgaImagesWithContextMutex.RLock()
	defer fake.describeFpgaImagesWithContextMutex.RUnlock()
	argsForCall := fake.describeFpgaImagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeFpgaImagesWithContextReturns(result1 *ec2.DescribeFpgaImagesOutput, result2 error) {
	fake.describeFpgaImagesWithContextMutex.Lock()
	defer fake.describeFpgaImagesWithContextMutex.Unlock()
	fake.DescribeFpgaImagesWithContextStub = nil
	fake.describeFpgaImagesWithContextReturns = struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeFpgaImagesWithContextReturnsOnCall(i int, result1 *ec2.DescribeFpgaImagesOutput, result2 error) {
	fake.describeFpgaImagesWithContextMutex.Lock()
	defer fake.describeFpgaImagesWithContextMutex.Unlock()
	fake.DescribeFpgaImagesWithContextStub = nil
	if fake.describeFpgaImagesWithContextReturnsOnCall == nil {
		fake.describeFpgaImagesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeFpgaImagesOutput
			result2 error
		})
	}
	fake.describeFpgaImagesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeFpgaImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationOfferings(arg1 *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	fake.describeHostReservationOfferingsMutex.Lock()
	ret, specificReturn := fake.describeHostReservationOfferingsReturnsOnCall[len(fake.describeHostReservationOfferingsArgsForCall)]
	fake.describeHostReservationOfferingsArgsForCall = append(fake.describeHostReservationOfferingsArgsForCall, struct {
		arg1 *ec2.DescribeHostReservationOfferingsInput
	}{arg1})
	fake.recordInvocation("DescribeHostReservationOfferings", []interface{}{arg1})
	fake.describeHostReservationOfferingsMutex.Unlock()
	if fake.DescribeHostReservationOfferingsStub != nil {
		return fake.DescribeHostReservationOfferingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostReservationOfferingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsCallCount() int {
	fake.describeHostReservationOfferingsMutex.RLock()
	defer fake.describeHostReservationOfferingsMutex.RUnlock()
	return len(fake.describeHostReservationOfferingsArgsForCall)
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsCalls(stub func(*ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error)) {
	fake.describeHostReservationOfferingsMutex.Lock()
	defer fake.describeHostReservationOfferingsMutex.Unlock()
	fake.DescribeHostReservationOfferingsStub = stub
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsArgsForCall(i int) *ec2.DescribeHostReservationOfferingsInput {
	fake.describeHostReservationOfferingsMutex.RLock()
	defer fake.describeHostReservationOfferingsMutex.RUnlock()
	argsForCall := fake.describeHostReservationOfferingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsReturns(result1 *ec2.DescribeHostReservationOfferingsOutput, result2 error) {
	fake.describeHostReservationOfferingsMutex.Lock()
	defer fake.describeHostReservationOfferingsMutex.Unlock()
	fake.DescribeHostReservationOfferingsStub = nil
	fake.describeHostReservationOfferingsReturns = struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsReturnsOnCall(i int, result1 *ec2.DescribeHostReservationOfferingsOutput, result2 error) {
	fake.describeHostReservationOfferingsMutex.Lock()
	defer fake.describeHostReservationOfferingsMutex.Unlock()
	fake.DescribeHostReservationOfferingsStub = nil
	if fake.describeHostReservationOfferingsReturnsOnCall == nil {
		fake.describeHostReservationOfferingsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeHostReservationOfferingsOutput
			result2 error
		})
	}
	fake.describeHostReservationOfferingsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsRequest(arg1 *ec2.DescribeHostReservationOfferingsInput) (*request.Request, *ec2.DescribeHostReservationOfferingsOutput) {
	fake.describeHostReservationOfferingsRequestMutex.Lock()
	ret, specificReturn := fake.describeHostReservationOfferingsRequestReturnsOnCall[len(fake.describeHostReservationOfferingsRequestArgsForCall)]
	fake.describeHostReservationOfferingsRequestArgsForCall = append(fake.describeHostReservationOfferingsRequestArgsForCall, struct {
		arg1 *ec2.DescribeHostReservationOfferingsInput
	}{arg1})
	fake.recordInvocation("DescribeHostReservationOfferingsRequest", []interface{}{arg1})
	fake.describeHostReservationOfferingsRequestMutex.Unlock()
	if fake.DescribeHostReservationOfferingsRequestStub != nil {
		return fake.DescribeHostReservationOfferingsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostReservationOfferingsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsRequestCallCount() int {
	fake.describeHostReservationOfferingsRequestMutex.RLock()
	defer fake.describeHostReservationOfferingsRequestMutex.RUnlock()
	return len(fake.describeHostReservationOfferingsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsRequestCalls(stub func(*ec2.DescribeHostReservationOfferingsInput) (*request.Request, *ec2.DescribeHostReservationOfferingsOutput)) {
	fake.describeHostReservationOfferingsRequestMutex.Lock()
	defer fake.describeHostReservationOfferingsRequestMutex.Unlock()
	fake.DescribeHostReservationOfferingsRequestStub = stub
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsRequestArgsForCall(i int) *ec2.DescribeHostReservationOfferingsInput {
	fake.describeHostReservationOfferingsRequestMutex.RLock()
	defer fake.describeHostReservationOfferingsRequestMutex.RUnlock()
	argsForCall := fake.describeHostReservationOfferingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsRequestReturns(result1 *request.Request, result2 *ec2.DescribeHostReservationOfferingsOutput) {
	fake.describeHostReservationOfferingsRequestMutex.Lock()
	defer fake.describeHostReservationOfferingsRequestMutex.Unlock()
	fake.DescribeHostReservationOfferingsRequestStub = nil
	fake.describeHostReservationOfferingsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationOfferingsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeHostReservationOfferingsOutput) {
	fake.describeHostReservationOfferingsRequestMutex.Lock()
	defer fake.describeHostReservationOfferingsRequestMutex.Unlock()
	fake.DescribeHostReservationOfferingsRequestStub = nil
	if fake.describeHostReservationOfferingsRequestReturnsOnCall == nil {
		fake.describeHostReservationOfferingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeHostReservationOfferingsOutput
		})
	}
	fake.describeHostReservationOfferingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationOfferingsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsWithContext(arg1 aws.Context, arg2 *ec2.DescribeHostReservationOfferingsInput, arg3 ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	fake.describeHostReservationOfferingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeHostReservationOfferingsWithContextReturnsOnCall[len(fake.describeHostReservationOfferingsWithContextArgsForCall)]
	fake.describeHostReservationOfferingsWithContextArgsForCall = append(fake.describeHostReservationOfferingsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeHostReservationOfferingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeHostReservationOfferingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeHostReservationOfferingsWithContextMutex.Unlock()
	if fake.DescribeHostReservationOfferingsWithContextStub != nil {
		return fake.DescribeHostReservationOfferingsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostReservationOfferingsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsWithContextCallCount() int {
	fake.describeHostReservationOfferingsWithContextMutex.RLock()
	defer fake.describeHostReservationOfferingsWithContextMutex.RUnlock()
	return len(fake.describeHostReservationOfferingsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsWithContextCalls(stub func(aws.Context, *ec2.DescribeHostReservationOfferingsInput, ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error)) {
	fake.describeHostReservationOfferingsWithContextMutex.Lock()
	defer fake.describeHostReservationOfferingsWithContextMutex.Unlock()
	fake.DescribeHostReservationOfferingsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeHostReservationOfferingsInput, []request.Option) {
	fake.describeHostReservationOfferingsWithContextMutex.RLock()
	defer fake.describeHostReservationOfferingsWithContextMutex.RUnlock()
	argsForCall := fake.describeHostReservationOfferingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsWithContextReturns(result1 *ec2.DescribeHostReservationOfferingsOutput, result2 error) {
	fake.describeHostReservationOfferingsWithContextMutex.Lock()
	defer fake.describeHostReservationOfferingsWithContextMutex.Unlock()
	fake.DescribeHostReservationOfferingsWithContextStub = nil
	fake.describeHostReservationOfferingsWithContextReturns = struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationOfferingsWithContextReturnsOnCall(i int, result1 *ec2.DescribeHostReservationOfferingsOutput, result2 error) {
	fake.describeHostReservationOfferingsWithContextMutex.Lock()
	defer fake.describeHostReservationOfferingsWithContextMutex.Unlock()
	fake.DescribeHostReservationOfferingsWithContextStub = nil
	if fake.describeHostReservationOfferingsWithContextReturnsOnCall == nil {
		fake.describeHostReservationOfferingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeHostReservationOfferingsOutput
			result2 error
		})
	}
	fake.describeHostReservationOfferingsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeHostReservationOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservations(arg1 *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
	fake.describeHostReservationsMutex.Lock()
	ret, specificReturn := fake.describeHostReservationsReturnsOnCall[len(fake.describeHostReservationsArgsForCall)]
	fake.describeHostReservationsArgsForCall = append(fake.describeHostReservationsArgsForCall, struct {
		arg1 *ec2.DescribeHostReservationsInput
	}{arg1})
	fake.recordInvocation("DescribeHostReservations", []interface{}{arg1})
	fake.describeHostReservationsMutex.Unlock()
	if fake.DescribeHostReservationsStub != nil {
		return fake.DescribeHostReservationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostReservationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostReservationsCallCount() int {
	fake.describeHostReservationsMutex.RLock()
	defer fake.describeHostReservationsMutex.RUnlock()
	return len(fake.describeHostReservationsArgsForCall)
}

func (fake *FakeEC2API) DescribeHostReservationsCalls(stub func(*ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error)) {
	fake.describeHostReservationsMutex.Lock()
	defer fake.describeHostReservationsMutex.Unlock()
	fake.DescribeHostReservationsStub = stub
}

func (fake *FakeEC2API) DescribeHostReservationsArgsForCall(i int) *ec2.DescribeHostReservationsInput {
	fake.describeHostReservationsMutex.RLock()
	defer fake.describeHostReservationsMutex.RUnlock()
	argsForCall := fake.describeHostReservationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeHostReservationsReturns(result1 *ec2.DescribeHostReservationsOutput, result2 error) {
	fake.describeHostReservationsMutex.Lock()
	defer fake.describeHostReservationsMutex.Unlock()
	fake.DescribeHostReservationsStub = nil
	fake.describeHostReservationsReturns = struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationsReturnsOnCall(i int, result1 *ec2.DescribeHostReservationsOutput, result2 error) {
	fake.describeHostReservationsMutex.Lock()
	defer fake.describeHostReservationsMutex.Unlock()
	fake.DescribeHostReservationsStub = nil
	if fake.describeHostReservationsReturnsOnCall == nil {
		fake.describeHostReservationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeHostReservationsOutput
			result2 error
		})
	}
	fake.describeHostReservationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationsRequest(arg1 *ec2.DescribeHostReservationsInput) (*request.Request, *ec2.DescribeHostReservationsOutput) {
	fake.describeHostReservationsRequestMutex.Lock()
	ret, specificReturn := fake.describeHostReservationsRequestReturnsOnCall[len(fake.describeHostReservationsRequestArgsForCall)]
	fake.describeHostReservationsRequestArgsForCall = append(fake.describeHostReservationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeHostReservationsInput
	}{arg1})
	fake.recordInvocation("DescribeHostReservationsRequest", []interface{}{arg1})
	fake.describeHostReservationsRequestMutex.Unlock()
	if fake.DescribeHostReservationsRequestStub != nil {
		return fake.DescribeHostReservationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostReservationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostReservationsRequestCallCount() int {
	fake.describeHostReservationsRequestMutex.RLock()
	defer fake.describeHostReservationsRequestMutex.RUnlock()
	return len(fake.describeHostReservationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeHostReservationsRequestCalls(stub func(*ec2.DescribeHostReservationsInput) (*request.Request, *ec2.DescribeHostReservationsOutput)) {
	fake.describeHostReservationsRequestMutex.Lock()
	defer fake.describeHostReservationsRequestMutex.Unlock()
	fake.DescribeHostReservationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeHostReservationsRequestArgsForCall(i int) *ec2.DescribeHostReservationsInput {
	fake.describeHostReservationsRequestMutex.RLock()
	defer fake.describeHostReservationsRequestMutex.RUnlock()
	argsForCall := fake.describeHostReservationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeHostReservationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeHostReservationsOutput) {
	fake.describeHostReservationsRequestMutex.Lock()
	defer fake.describeHostReservationsRequestMutex.Unlock()
	fake.DescribeHostReservationsRequestStub = nil
	fake.describeHostReservationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeHostReservationsOutput) {
	fake.describeHostReservationsRequestMutex.Lock()
	defer fake.describeHostReservationsRequestMutex.Unlock()
	fake.DescribeHostReservationsRequestStub = nil
	if fake.describeHostReservationsRequestReturnsOnCall == nil {
		fake.describeHostReservationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeHostReservationsOutput
		})
	}
	fake.describeHostReservationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeHostReservationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeHostReservationsInput, arg3 ...request.Option) (*ec2.DescribeHostReservationsOutput, error) {
	fake.describeHostReservationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeHostReservationsWithContextReturnsOnCall[len(fake.describeHostReservationsWithContextArgsForCall)]
	fake.describeHostReservationsWithContextArgsForCall = append(fake.describeHostReservationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeHostReservationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeHostReservationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeHostReservationsWithContextMutex.Unlock()
	if fake.DescribeHostReservationsWithContextStub != nil {
		return fake.DescribeHostReservationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostReservationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostReservationsWithContextCallCount() int {
	fake.describeHostReservationsWithContextMutex.RLock()
	defer fake.describeHostReservationsWithContextMutex.RUnlock()
	return len(fake.describeHostReservationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeHostReservationsWithContextCalls(stub func(aws.Context, *ec2.DescribeHostReservationsInput, ...request.Option) (*ec2.DescribeHostReservationsOutput, error)) {
	fake.describeHostReservationsWithContextMutex.Lock()
	defer fake.describeHostReservationsWithContextMutex.Unlock()
	fake.DescribeHostReservationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeHostReservationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeHostReservationsInput, []request.Option) {
	fake.describeHostReservationsWithContextMutex.RLock()
	defer fake.describeHostReservationsWithContextMutex.RUnlock()
	argsForCall := fake.describeHostReservationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeHostReservationsWithContextReturns(result1 *ec2.DescribeHostReservationsOutput, result2 error) {
	fake.describeHostReservationsWithContextMutex.Lock()
	defer fake.describeHostReservationsWithContextMutex.Unlock()
	fake.DescribeHostReservationsWithContextStub = nil
	fake.describeHostReservationsWithContextReturns = struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostReservationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeHostReservationsOutput, result2 error) {
	fake.describeHostReservationsWithContextMutex.Lock()
	defer fake.describeHostReservationsWithContextMutex.Unlock()
	fake.DescribeHostReservationsWithContextStub = nil
	if fake.describeHostReservationsWithContextReturnsOnCall == nil {
		fake.describeHostReservationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeHostReservationsOutput
			result2 error
		})
	}
	fake.describeHostReservationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeHostReservationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHosts(arg1 *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
	fake.describeHostsMutex.Lock()
	ret, specificReturn := fake.describeHostsReturnsOnCall[len(fake.describeHostsArgsForCall)]
	fake.describeHostsArgsForCall = append(fake.describeHostsArgsForCall, struct {
		arg1 *ec2.DescribeHostsInput
	}{arg1})
	fake.recordInvocation("DescribeHosts", []interface{}{arg1})
	fake.describeHostsMutex.Unlock()
	if fake.DescribeHostsStub != nil {
		return fake.DescribeHostsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostsCallCount() int {
	fake.describeHostsMutex.RLock()
	defer fake.describeHostsMutex.RUnlock()
	return len(fake.describeHostsArgsForCall)
}

func (fake *FakeEC2API) DescribeHostsCalls(stub func(*ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error)) {
	fake.describeHostsMutex.Lock()
	defer fake.describeHostsMutex.Unlock()
	fake.DescribeHostsStub = stub
}

func (fake *FakeEC2API) DescribeHostsArgsForCall(i int) *ec2.DescribeHostsInput {
	fake.describeHostsMutex.RLock()
	defer fake.describeHostsMutex.RUnlock()
	argsForCall := fake.describeHostsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeHostsReturns(result1 *ec2.DescribeHostsOutput, result2 error) {
	fake.describeHostsMutex.Lock()
	defer fake.describeHostsMutex.Unlock()
	fake.DescribeHostsStub = nil
	fake.describeHostsReturns = struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostsReturnsOnCall(i int, result1 *ec2.DescribeHostsOutput, result2 error) {
	fake.describeHostsMutex.Lock()
	defer fake.describeHostsMutex.Unlock()
	fake.DescribeHostsStub = nil
	if fake.describeHostsReturnsOnCall == nil {
		fake.describeHostsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeHostsOutput
			result2 error
		})
	}
	fake.describeHostsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostsRequest(arg1 *ec2.DescribeHostsInput) (*request.Request, *ec2.DescribeHostsOutput) {
	fake.describeHostsRequestMutex.Lock()
	ret, specificReturn := fake.describeHostsRequestReturnsOnCall[len(fake.describeHostsRequestArgsForCall)]
	fake.describeHostsRequestArgsForCall = append(fake.describeHostsRequestArgsForCall, struct {
		arg1 *ec2.DescribeHostsInput
	}{arg1})
	fake.recordInvocation("DescribeHostsRequest", []interface{}{arg1})
	fake.describeHostsRequestMutex.Unlock()
	if fake.DescribeHostsRequestStub != nil {
		return fake.DescribeHostsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostsRequestCallCount() int {
	fake.describeHostsRequestMutex.RLock()
	defer fake.describeHostsRequestMutex.RUnlock()
	return len(fake.describeHostsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeHostsRequestCalls(stub func(*ec2.DescribeHostsInput) (*request.Request, *ec2.DescribeHostsOutput)) {
	fake.describeHostsRequestMutex.Lock()
	defer fake.describeHostsRequestMutex.Unlock()
	fake.DescribeHostsRequestStub = stub
}

func (fake *FakeEC2API) DescribeHostsRequestArgsForCall(i int) *ec2.DescribeHostsInput {
	fake.describeHostsRequestMutex.RLock()
	defer fake.describeHostsRequestMutex.RUnlock()
	argsForCall := fake.describeHostsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeHostsRequestReturns(result1 *request.Request, result2 *ec2.DescribeHostsOutput) {
	fake.describeHostsRequestMutex.Lock()
	defer fake.describeHostsRequestMutex.Unlock()
	fake.DescribeHostsRequestStub = nil
	fake.describeHostsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeHostsOutput) {
	fake.describeHostsRequestMutex.Lock()
	defer fake.describeHostsRequestMutex.Unlock()
	fake.DescribeHostsRequestStub = nil
	if fake.describeHostsRequestReturnsOnCall == nil {
		fake.describeHostsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeHostsOutput
		})
	}
	fake.describeHostsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostsWithContext(arg1 aws.Context, arg2 *ec2.DescribeHostsInput, arg3 ...request.Option) (*ec2.DescribeHostsOutput, error) {
	fake.describeHostsWithContextMutex.Lock()
	ret, specificReturn := fake.describeHostsWithContextReturnsOnCall[len(fake.describeHostsWithContextArgsForCall)]
	fake.describeHostsWithContextArgsForCall = append(fake.describeHostsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeHostsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeHostsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeHostsWithContextMutex.Unlock()
	if fake.DescribeHostsWithContextStub != nil {
		return fake.DescribeHostsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeHostsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeHostsWithContextCallCount() int {
	fake.describeHostsWithContextMutex.RLock()
	defer fake.describeHostsWithContextMutex.RUnlock()
	return len(fake.describeHostsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeHostsWithContextCalls(stub func(aws.Context, *ec2.DescribeHostsInput, ...request.Option) (*ec2.DescribeHostsOutput, error)) {
	fake.describeHostsWithContextMutex.Lock()
	defer fake.describeHostsWithContextMutex.Unlock()
	fake.DescribeHostsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeHostsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeHostsInput, []request.Option) {
	fake.describeHostsWithContextMutex.RLock()
	defer fake.describeHostsWithContextMutex.RUnlock()
	argsForCall := fake.describeHostsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeHostsWithContextReturns(result1 *ec2.DescribeHostsOutput, result2 error) {
	fake.describeHostsWithContextMutex.Lock()
	defer fake.describeHostsWithContextMutex.Unlock()
	fake.DescribeHostsWithContextStub = nil
	fake.describeHostsWithContextReturns = struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeHostsWithContextReturnsOnCall(i int, result1 *ec2.DescribeHostsOutput, result2 error) {
	fake.describeHostsWithContextMutex.Lock()
	defer fake.describeHostsWithContextMutex.Unlock()
	fake.DescribeHostsWithContextStub = nil
	if fake.describeHostsWithContextReturnsOnCall == nil {
		fake.describeHostsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeHostsOutput
			result2 error
		})
	}
	fake.describeHostsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociations(arg1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	fake.describeIamInstanceProfileAssociationsMutex.Lock()
	ret, specificReturn := fake.describeIamInstanceProfileAssociationsReturnsOnCall[len(fake.describeIamInstanceProfileAssociationsArgsForCall)]
	fake.describeIamInstanceProfileAssociationsArgsForCall = append(fake.describeIamInstanceProfileAssociationsArgsForCall, struct {
		arg1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}{arg1})
	fake.recordInvocation("DescribeIamInstanceProfileAssociations", []interface{}{arg1})
	fake.describeIamInstanceProfileAssociationsMutex.Unlock()
	if fake.DescribeIamInstanceProfileAssociationsStub != nil {
		return fake.DescribeIamInstanceProfileAssociationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIamInstanceProfileAssociationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsCallCount() int {
	fake.describeIamInstanceProfileAssociationsMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsMutex.RUnlock()
	return len(fake.describeIamInstanceProfileAssociationsArgsForCall)
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsCalls(stub func(*ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)) {
	fake.describeIamInstanceProfileAssociationsMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsStub = stub
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsArgsForCall(i int) *ec2.DescribeIamInstanceProfileAssociationsInput {
	fake.describeIamInstanceProfileAssociationsMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsMutex.RUnlock()
	argsForCall := fake.describeIamInstanceProfileAssociationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsReturns(result1 *ec2.DescribeIamInstanceProfileAssociationsOutput, result2 error) {
	fake.describeIamInstanceProfileAssociationsMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsStub = nil
	fake.describeIamInstanceProfileAssociationsReturns = struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsReturnsOnCall(i int, result1 *ec2.DescribeIamInstanceProfileAssociationsOutput, result2 error) {
	fake.describeIamInstanceProfileAssociationsMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsStub = nil
	if fake.describeIamInstanceProfileAssociationsReturnsOnCall == nil {
		fake.describeIamInstanceProfileAssociationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
			result2 error
		})
	}
	fake.describeIamInstanceProfileAssociationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsRequest(arg1 *ec2.DescribeIamInstanceProfileAssociationsInput) (*request.Request, *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	fake.describeIamInstanceProfileAssociationsRequestMutex.Lock()
	ret, specificReturn := fake.describeIamInstanceProfileAssociationsRequestReturnsOnCall[len(fake.describeIamInstanceProfileAssociationsRequestArgsForCall)]
	fake.describeIamInstanceProfileAssociationsRequestArgsForCall = append(fake.describeIamInstanceProfileAssociationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeIamInstanceProfileAssociationsInput
	}{arg1})
	fake.recordInvocation("DescribeIamInstanceProfileAssociationsRequest", []interface{}{arg1})
	fake.describeIamInstanceProfileAssociationsRequestMutex.Unlock()
	if fake.DescribeIamInstanceProfileAssociationsRequestStub != nil {
		return fake.DescribeIamInstanceProfileAssociationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIamInstanceProfileAssociationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsRequestCallCount() int {
	fake.describeIamInstanceProfileAssociationsRequestMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsRequestMutex.RUnlock()
	return len(fake.describeIamInstanceProfileAssociationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsRequestCalls(stub func(*ec2.DescribeIamInstanceProfileAssociationsInput) (*request.Request, *ec2.DescribeIamInstanceProfileAssociationsOutput)) {
	fake.describeIamInstanceProfileAssociationsRequestMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsRequestMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsRequestArgsForCall(i int) *ec2.DescribeIamInstanceProfileAssociationsInput {
	fake.describeIamInstanceProfileAssociationsRequestMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsRequestMutex.RUnlock()
	argsForCall := fake.describeIamInstanceProfileAssociationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	fake.describeIamInstanceProfileAssociationsRequestMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsRequestMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsRequestStub = nil
	fake.describeIamInstanceProfileAssociationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeIamInstanceProfileAssociationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	fake.describeIamInstanceProfileAssociationsRequestMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsRequestMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsRequestStub = nil
	if fake.describeIamInstanceProfileAssociationsRequestReturnsOnCall == nil {
		fake.describeIamInstanceProfileAssociationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeIamInstanceProfileAssociationsOutput
		})
	}
	fake.describeIamInstanceProfileAssociationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeIamInstanceProfileAssociationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeIamInstanceProfileAssociationsInput, arg3 ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	fake.describeIamInstanceProfileAssociationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeIamInstanceProfileAssociationsWithContextReturnsOnCall[len(fake.describeIamInstanceProfileAssociationsWithContextArgsForCall)]
	fake.describeIamInstanceProfileAssociationsWithContextArgsForCall = append(fake.describeIamInstanceProfileAssociationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeIamInstanceProfileAssociationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeIamInstanceProfileAssociationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeIamInstanceProfileAssociationsWithContextMutex.Unlock()
	if fake.DescribeIamInstanceProfileAssociationsWithContextStub != nil {
		return fake.DescribeIamInstanceProfileAssociationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIamInstanceProfileAssociationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsWithContextCallCount() int {
	fake.describeIamInstanceProfileAssociationsWithContextMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsWithContextMutex.RUnlock()
	return len(fake.describeIamInstanceProfileAssociationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsWithContextCalls(stub func(aws.Context, *ec2.DescribeIamInstanceProfileAssociationsInput, ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)) {
	fake.describeIamInstanceProfileAssociationsWithContextMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsWithContextMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeIamInstanceProfileAssociationsInput, []request.Option) {
	fake.describeIamInstanceProfileAssociationsWithContextMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsWithContextMutex.RUnlock()
	argsForCall := fake.describeIamInstanceProfileAssociationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsWithContextReturns(result1 *ec2.DescribeIamInstanceProfileAssociationsOutput, result2 error) {
	fake.describeIamInstanceProfileAssociationsWithContextMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsWithContextMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsWithContextStub = nil
	fake.describeIamInstanceProfileAssociationsWithContextReturns = struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIamInstanceProfileAssociationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeIamInstanceProfileAssociationsOutput, result2 error) {
	fake.describeIamInstanceProfileAssociationsWithContextMutex.Lock()
	defer fake.describeIamInstanceProfileAssociationsWithContextMutex.Unlock()
	fake.DescribeIamInstanceProfileAssociationsWithContextStub = nil
	if fake.describeIamInstanceProfileAssociationsWithContextReturnsOnCall == nil {
		fake.describeIamInstanceProfileAssociationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
			result2 error
		})
	}
	fake.describeIamInstanceProfileAssociationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeIamInstanceProfileAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdFormat(arg1 *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
	fake.describeIdFormatMutex.Lock()
	ret, specificReturn := fake.describeIdFormatReturnsOnCall[len(fake.describeIdFormatArgsForCall)]
	fake.describeIdFormatArgsForCall = append(fake.describeIdFormatArgsForCall, struct {
		arg1 *ec2.DescribeIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribeIdFormat", []interface{}{arg1})
	fake.describeIdFormatMutex.Unlock()
	if fake.DescribeIdFormatStub != nil {
		return fake.DescribeIdFormatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIdFormatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIdFormatCallCount() int {
	fake.describeIdFormatMutex.RLock()
	defer fake.describeIdFormatMutex.RUnlock()
	return len(fake.describeIdFormatArgsForCall)
}

func (fake *FakeEC2API) DescribeIdFormatCalls(stub func(*ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error)) {
	fake.describeIdFormatMutex.Lock()
	defer fake.describeIdFormatMutex.Unlock()
	fake.DescribeIdFormatStub = stub
}

func (fake *FakeEC2API) DescribeIdFormatArgsForCall(i int) *ec2.DescribeIdFormatInput {
	fake.describeIdFormatMutex.RLock()
	defer fake.describeIdFormatMutex.RUnlock()
	argsForCall := fake.describeIdFormatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeIdFormatReturns(result1 *ec2.DescribeIdFormatOutput, result2 error) {
	fake.describeIdFormatMutex.Lock()
	defer fake.describeIdFormatMutex.Unlock()
	fake.DescribeIdFormatStub = nil
	fake.describeIdFormatReturns = struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdFormatReturnsOnCall(i int, result1 *ec2.DescribeIdFormatOutput, result2 error) {
	fake.describeIdFormatMutex.Lock()
	defer fake.describeIdFormatMutex.Unlock()
	fake.DescribeIdFormatStub = nil
	if fake.describeIdFormatReturnsOnCall == nil {
		fake.describeIdFormatReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeIdFormatOutput
			result2 error
		})
	}
	fake.describeIdFormatReturnsOnCall[i] = struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdFormatRequest(arg1 *ec2.DescribeIdFormatInput) (*request.Request, *ec2.DescribeIdFormatOutput) {
	fake.describeIdFormatRequestMutex.Lock()
	ret, specificReturn := fake.describeIdFormatRequestReturnsOnCall[len(fake.describeIdFormatRequestArgsForCall)]
	fake.describeIdFormatRequestArgsForCall = append(fake.describeIdFormatRequestArgsForCall, struct {
		arg1 *ec2.DescribeIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribeIdFormatRequest", []interface{}{arg1})
	fake.describeIdFormatRequestMutex.Unlock()
	if fake.DescribeIdFormatRequestStub != nil {
		return fake.DescribeIdFormatRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIdFormatRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIdFormatRequestCallCount() int {
	fake.describeIdFormatRequestMutex.RLock()
	defer fake.describeIdFormatRequestMutex.RUnlock()
	return len(fake.describeIdFormatRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeIdFormatRequestCalls(stub func(*ec2.DescribeIdFormatInput) (*request.Request, *ec2.DescribeIdFormatOutput)) {
	fake.describeIdFormatRequestMutex.Lock()
	defer fake.describeIdFormatRequestMutex.Unlock()
	fake.DescribeIdFormatRequestStub = stub
}

func (fake *FakeEC2API) DescribeIdFormatRequestArgsForCall(i int) *ec2.DescribeIdFormatInput {
	fake.describeIdFormatRequestMutex.RLock()
	defer fake.describeIdFormatRequestMutex.RUnlock()
	argsForCall := fake.describeIdFormatRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeIdFormatRequestReturns(result1 *request.Request, result2 *ec2.DescribeIdFormatOutput) {
	fake.describeIdFormatRequestMutex.Lock()
	defer fake.describeIdFormatRequestMutex.Unlock()
	fake.DescribeIdFormatRequestStub = nil
	fake.describeIdFormatRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdFormatRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeIdFormatOutput) {
	fake.describeIdFormatRequestMutex.Lock()
	defer fake.describeIdFormatRequestMutex.Unlock()
	fake.DescribeIdFormatRequestStub = nil
	if fake.describeIdFormatRequestReturnsOnCall == nil {
		fake.describeIdFormatRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeIdFormatOutput
		})
	}
	fake.describeIdFormatRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdFormatWithContext(arg1 aws.Context, arg2 *ec2.DescribeIdFormatInput, arg3 ...request.Option) (*ec2.DescribeIdFormatOutput, error) {
	fake.describeIdFormatWithContextMutex.Lock()
	ret, specificReturn := fake.describeIdFormatWithContextReturnsOnCall[len(fake.describeIdFormatWithContextArgsForCall)]
	fake.describeIdFormatWithContextArgsForCall = append(fake.describeIdFormatWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeIdFormatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeIdFormatWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeIdFormatWithContextMutex.Unlock()
	if fake.DescribeIdFormatWithContextStub != nil {
		return fake.DescribeIdFormatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIdFormatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIdFormatWithContextCallCount() int {
	fake.describeIdFormatWithContextMutex.RLock()
	defer fake.describeIdFormatWithContextMutex.RUnlock()
	return len(fake.describeIdFormatWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeIdFormatWithContextCalls(stub func(aws.Context, *ec2.DescribeIdFormatInput, ...request.Option) (*ec2.DescribeIdFormatOutput, error)) {
	fake.describeIdFormatWithContextMutex.Lock()
	defer fake.describeIdFormatWithContextMutex.Unlock()
	fake.DescribeIdFormatWithContextStub = stub
}

func (fake *FakeEC2API) DescribeIdFormatWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeIdFormatInput, []request.Option) {
	fake.describeIdFormatWithContextMutex.RLock()
	defer fake.describeIdFormatWithContextMutex.RUnlock()
	argsForCall := fake.describeIdFormatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeIdFormatWithContextReturns(result1 *ec2.DescribeIdFormatOutput, result2 error) {
	fake.describeIdFormatWithContextMutex.Lock()
	defer fake.describeIdFormatWithContextMutex.Unlock()
	fake.DescribeIdFormatWithContextStub = nil
	fake.describeIdFormatWithContextReturns = struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdFormatWithContextReturnsOnCall(i int, result1 *ec2.DescribeIdFormatOutput, result2 error) {
	fake.describeIdFormatWithContextMutex.Lock()
	defer fake.describeIdFormatWithContextMutex.Unlock()
	fake.DescribeIdFormatWithContextStub = nil
	if fake.describeIdFormatWithContextReturnsOnCall == nil {
		fake.describeIdFormatWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeIdFormatOutput
			result2 error
		})
	}
	fake.describeIdFormatWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdentityIdFormat(arg1 *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
	fake.describeIdentityIdFormatMutex.Lock()
	ret, specificReturn := fake.describeIdentityIdFormatReturnsOnCall[len(fake.describeIdentityIdFormatArgsForCall)]
	fake.describeIdentityIdFormatArgsForCall = append(fake.describeIdentityIdFormatArgsForCall, struct {
		arg1 *ec2.DescribeIdentityIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribeIdentityIdFormat", []interface{}{arg1})
	fake.describeIdentityIdFormatMutex.Unlock()
	if fake.DescribeIdentityIdFormatStub != nil {
		return fake.DescribeIdentityIdFormatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIdentityIdFormatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIdentityIdFormatCallCount() int {
	fake.describeIdentityIdFormatMutex.RLock()
	defer fake.describeIdentityIdFormatMutex.RUnlock()
	return len(fake.describeIdentityIdFormatArgsForCall)
}

func (fake *FakeEC2API) DescribeIdentityIdFormatCalls(stub func(*ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error)) {
	fake.describeIdentityIdFormatMutex.Lock()
	defer fake.describeIdentityIdFormatMutex.Unlock()
	fake.DescribeIdentityIdFormatStub = stub
}

func (fake *FakeEC2API) DescribeIdentityIdFormatArgsForCall(i int) *ec2.DescribeIdentityIdFormatInput {
	fake.describeIdentityIdFormatMutex.RLock()
	defer fake.describeIdentityIdFormatMutex.RUnlock()
	argsForCall := fake.describeIdentityIdFormatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeIdentityIdFormatReturns(result1 *ec2.DescribeIdentityIdFormatOutput, result2 error) {
	fake.describeIdentityIdFormatMutex.Lock()
	defer fake.describeIdentityIdFormatMutex.Unlock()
	fake.DescribeIdentityIdFormatStub = nil
	fake.describeIdentityIdFormatReturns = struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdentityIdFormatReturnsOnCall(i int, result1 *ec2.DescribeIdentityIdFormatOutput, result2 error) {
	fake.describeIdentityIdFormatMutex.Lock()
	defer fake.describeIdentityIdFormatMutex.Unlock()
	fake.DescribeIdentityIdFormatStub = nil
	if fake.describeIdentityIdFormatReturnsOnCall == nil {
		fake.describeIdentityIdFormatReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeIdentityIdFormatOutput
			result2 error
		})
	}
	fake.describeIdentityIdFormatReturnsOnCall[i] = struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdentityIdFormatRequest(arg1 *ec2.DescribeIdentityIdFormatInput) (*request.Request, *ec2.DescribeIdentityIdFormatOutput) {
	fake.describeIdentityIdFormatRequestMutex.Lock()
	ret, specificReturn := fake.describeIdentityIdFormatRequestReturnsOnCall[len(fake.describeIdentityIdFormatRequestArgsForCall)]
	fake.describeIdentityIdFormatRequestArgsForCall = append(fake.describeIdentityIdFormatRequestArgsForCall, struct {
		arg1 *ec2.DescribeIdentityIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribeIdentityIdFormatRequest", []interface{}{arg1})
	fake.describeIdentityIdFormatRequestMutex.Unlock()
	if fake.DescribeIdentityIdFormatRequestStub != nil {
		return fake.DescribeIdentityIdFormatRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIdentityIdFormatRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIdentityIdFormatRequestCallCount() int {
	fake.describeIdentityIdFormatRequestMutex.RLock()
	defer fake.describeIdentityIdFormatRequestMutex.RUnlock()
	return len(fake.describeIdentityIdFormatRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeIdentityIdFormatRequestCalls(stub func(*ec2.DescribeIdentityIdFormatInput) (*request.Request, *ec2.DescribeIdentityIdFormatOutput)) {
	fake.describeIdentityIdFormatRequestMutex.Lock()
	defer fake.describeIdentityIdFormatRequestMutex.Unlock()
	fake.DescribeIdentityIdFormatRequestStub = stub
}

func (fake *FakeEC2API) DescribeIdentityIdFormatRequestArgsForCall(i int) *ec2.DescribeIdentityIdFormatInput {
	fake.describeIdentityIdFormatRequestMutex.RLock()
	defer fake.describeIdentityIdFormatRequestMutex.RUnlock()
	argsForCall := fake.describeIdentityIdFormatRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeIdentityIdFormatRequestReturns(result1 *request.Request, result2 *ec2.DescribeIdentityIdFormatOutput) {
	fake.describeIdentityIdFormatRequestMutex.Lock()
	defer fake.describeIdentityIdFormatRequestMutex.Unlock()
	fake.DescribeIdentityIdFormatRequestStub = nil
	fake.describeIdentityIdFormatRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeIdentityIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdentityIdFormatRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeIdentityIdFormatOutput) {
	fake.describeIdentityIdFormatRequestMutex.Lock()
	defer fake.describeIdentityIdFormatRequestMutex.Unlock()
	fake.DescribeIdentityIdFormatRequestStub = nil
	if fake.describeIdentityIdFormatRequestReturnsOnCall == nil {
		fake.describeIdentityIdFormatRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeIdentityIdFormatOutput
		})
	}
	fake.describeIdentityIdFormatRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeIdentityIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdentityIdFormatWithContext(arg1 aws.Context, arg2 *ec2.DescribeIdentityIdFormatInput, arg3 ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error) {
	fake.describeIdentityIdFormatWithContextMutex.Lock()
	ret, specificReturn := fake.describeIdentityIdFormatWithContextReturnsOnCall[len(fake.describeIdentityIdFormatWithContextArgsForCall)]
	fake.describeIdentityIdFormatWithContextArgsForCall = append(fake.describeIdentityIdFormatWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeIdentityIdFormatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeIdentityIdFormatWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeIdentityIdFormatWithContextMutex.Unlock()
	if fake.DescribeIdentityIdFormatWithContextStub != nil {
		return fake.DescribeIdentityIdFormatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeIdentityIdFormatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeIdentityIdFormatWithContextCallCount() int {
	fake.describeIdentityIdFormatWithContextMutex.RLock()
	defer fake.describeIdentityIdFormatWithContextMutex.RUnlock()
	return len(fake.describeIdentityIdFormatWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeIdentityIdFormatWithContextCalls(stub func(aws.Context, *ec2.DescribeIdentityIdFormatInput, ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error)) {
	fake.describeIdentityIdFormatWithContextMutex.Lock()
	defer fake.describeIdentityIdFormatWithContextMutex.Unlock()
	fake.DescribeIdentityIdFormatWithContextStub = stub
}

func (fake *FakeEC2API) DescribeIdentityIdFormatWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeIdentityIdFormatInput, []request.Option) {
	fake.describeIdentityIdFormatWithContextMutex.RLock()
	defer fake.describeIdentityIdFormatWithContextMutex.RUnlock()
	argsForCall := fake.describeIdentityIdFormatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeIdentityIdFormatWithContextReturns(result1 *ec2.DescribeIdentityIdFormatOutput, result2 error) {
	fake.describeIdentityIdFormatWithContextMutex.Lock()
	defer fake.describeIdentityIdFormatWithContextMutex.Unlock()
	fake.DescribeIdentityIdFormatWithContextStub = nil
	fake.describeIdentityIdFormatWithContextReturns = struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeIdentityIdFormatWithContextReturnsOnCall(i int, result1 *ec2.DescribeIdentityIdFormatOutput, result2 error) {
	fake.describeIdentityIdFormatWithContextMutex.Lock()
	defer fake.describeIdentityIdFormatWithContextMutex.Unlock()
	fake.DescribeIdentityIdFormatWithContextStub = nil
	if fake.describeIdentityIdFormatWithContextReturnsOnCall == nil {
		fake.describeIdentityIdFormatWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeIdentityIdFormatOutput
			result2 error
		})
	}
	fake.describeIdentityIdFormatWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImageAttribute(arg1 *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	fake.describeImageAttributeMutex.Lock()
	ret, specificReturn := fake.describeImageAttributeReturnsOnCall[len(fake.describeImageAttributeArgsForCall)]
	fake.describeImageAttributeArgsForCall = append(fake.describeImageAttributeArgsForCall, struct {
		arg1 *ec2.DescribeImageAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeImageAttribute", []interface{}{arg1})
	fake.describeImageAttributeMutex.Unlock()
	if fake.DescribeImageAttributeStub != nil {
		return fake.DescribeImageAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImageAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImageAttributeCallCount() int {
	fake.describeImageAttributeMutex.RLock()
	defer fake.describeImageAttributeMutex.RUnlock()
	return len(fake.describeImageAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeImageAttributeCalls(stub func(*ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error)) {
	fake.describeImageAttributeMutex.Lock()
	defer fake.describeImageAttributeMutex.Unlock()
	fake.DescribeImageAttributeStub = stub
}

func (fake *FakeEC2API) DescribeImageAttributeArgsForCall(i int) *ec2.DescribeImageAttributeInput {
	fake.describeImageAttributeMutex.RLock()
	defer fake.describeImageAttributeMutex.RUnlock()
	argsForCall := fake.describeImageAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImageAttributeReturns(result1 *ec2.DescribeImageAttributeOutput, result2 error) {
	fake.describeImageAttributeMutex.Lock()
	defer fake.describeImageAttributeMutex.Unlock()
	fake.DescribeImageAttributeStub = nil
	fake.describeImageAttributeReturns = struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImageAttributeReturnsOnCall(i int, result1 *ec2.DescribeImageAttributeOutput, result2 error) {
	fake.describeImageAttributeMutex.Lock()
	defer fake.describeImageAttributeMutex.Unlock()
	fake.DescribeImageAttributeStub = nil
	if fake.describeImageAttributeReturnsOnCall == nil {
		fake.describeImageAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImageAttributeOutput
			result2 error
		})
	}
	fake.describeImageAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImageAttributeRequest(arg1 *ec2.DescribeImageAttributeInput) (*request.Request, *ec2.DescribeImageAttributeOutput) {
	fake.describeImageAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeImageAttributeRequestReturnsOnCall[len(fake.describeImageAttributeRequestArgsForCall)]
	fake.describeImageAttributeRequestArgsForCall = append(fake.describeImageAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeImageAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeImageAttributeRequest", []interface{}{arg1})
	fake.describeImageAttributeRequestMutex.Unlock()
	if fake.DescribeImageAttributeRequestStub != nil {
		return fake.DescribeImageAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImageAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImageAttributeRequestCallCount() int {
	fake.describeImageAttributeRequestMutex.RLock()
	defer fake.describeImageAttributeRequestMutex.RUnlock()
	return len(fake.describeImageAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeImageAttributeRequestCalls(stub func(*ec2.DescribeImageAttributeInput) (*request.Request, *ec2.DescribeImageAttributeOutput)) {
	fake.describeImageAttributeRequestMutex.Lock()
	defer fake.describeImageAttributeRequestMutex.Unlock()
	fake.DescribeImageAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeImageAttributeRequestArgsForCall(i int) *ec2.DescribeImageAttributeInput {
	fake.describeImageAttributeRequestMutex.RLock()
	defer fake.describeImageAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeImageAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImageAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeImageAttributeOutput) {
	fake.describeImageAttributeRequestMutex.Lock()
	defer fake.describeImageAttributeRequestMutex.Unlock()
	fake.DescribeImageAttributeRequestStub = nil
	fake.describeImageAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImageAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeImageAttributeOutput) {
	fake.describeImageAttributeRequestMutex.Lock()
	defer fake.describeImageAttributeRequestMutex.Unlock()
	fake.DescribeImageAttributeRequestStub = nil
	if fake.describeImageAttributeRequestReturnsOnCall == nil {
		fake.describeImageAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeImageAttributeOutput
		})
	}
	fake.describeImageAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImageAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeImageAttributeInput, arg3 ...request.Option) (*ec2.DescribeImageAttributeOutput, error) {
	fake.describeImageAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeImageAttributeWithContextReturnsOnCall[len(fake.describeImageAttributeWithContextArgsForCall)]
	fake.describeImageAttributeWithContextArgsForCall = append(fake.describeImageAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImageAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeImageAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeImageAttributeWithContextMutex.Unlock()
	if fake.DescribeImageAttributeWithContextStub != nil {
		return fake.DescribeImageAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImageAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImageAttributeWithContextCallCount() int {
	fake.describeImageAttributeWithContextMutex.RLock()
	defer fake.describeImageAttributeWithContextMutex.RUnlock()
	return len(fake.describeImageAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeImageAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeImageAttributeInput, ...request.Option) (*ec2.DescribeImageAttributeOutput, error)) {
	fake.describeImageAttributeWithContextMutex.Lock()
	defer fake.describeImageAttributeWithContextMutex.Unlock()
	fake.DescribeImageAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeImageAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeImageAttributeInput, []request.Option) {
	fake.describeImageAttributeWithContextMutex.RLock()
	defer fake.describeImageAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeImageAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeImageAttributeWithContextReturns(result1 *ec2.DescribeImageAttributeOutput, result2 error) {
	fake.describeImageAttributeWithContextMutex.Lock()
	defer fake.describeImageAttributeWithContextMutex.Unlock()
	fake.DescribeImageAttributeWithContextStub = nil
	fake.describeImageAttributeWithContextReturns = struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImageAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeImageAttributeOutput, result2 error) {
	fake.describeImageAttributeWithContextMutex.Lock()
	defer fake.describeImageAttributeWithContextMutex.Unlock()
	fake.DescribeImageAttributeWithContextStub = nil
	if fake.describeImageAttributeWithContextReturnsOnCall == nil {
		fake.describeImageAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImageAttributeOutput
			result2 error
		})
	}
	fake.describeImageAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImages(arg1 *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	fake.describeImagesMutex.Lock()
	ret, specificReturn := fake.describeImagesReturnsOnCall[len(fake.describeImagesArgsForCall)]
	fake.describeImagesArgsForCall = append(fake.describeImagesArgsForCall, struct {
		arg1 *ec2.DescribeImagesInput
	}{arg1})
	fake.recordInvocation("DescribeImages", []interface{}{arg1})
	fake.describeImagesMutex.Unlock()
	if fake.DescribeImagesStub != nil {
		return fake.DescribeImagesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImagesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImagesCallCount() int {
	fake.describeImagesMutex.RLock()
	defer fake.describeImagesMutex.RUnlock()
	return len(fake.describeImagesArgsForCall)
}

func (fake *FakeEC2API) DescribeImagesCalls(stub func(*ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error)) {
	fake.describeImagesMutex.Lock()
	defer fake.describeImagesMutex.Unlock()
	fake.DescribeImagesStub = stub
}

func (fake *FakeEC2API) DescribeImagesArgsForCall(i int) *ec2.DescribeImagesInput {
	fake.describeImagesMutex.RLock()
	defer fake.describeImagesMutex.RUnlock()
	argsForCall := fake.describeImagesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImagesReturns(result1 *ec2.DescribeImagesOutput, result2 error) {
	fake.describeImagesMutex.Lock()
	defer fake.describeImagesMutex.Unlock()
	fake.DescribeImagesStub = nil
	fake.describeImagesReturns = struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImagesReturnsOnCall(i int, result1 *ec2.DescribeImagesOutput, result2 error) {
	fake.describeImagesMutex.Lock()
	defer fake.describeImagesMutex.Unlock()
	fake.DescribeImagesStub = nil
	if fake.describeImagesReturnsOnCall == nil {
		fake.describeImagesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImagesOutput
			result2 error
		})
	}
	fake.describeImagesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImagesRequest(arg1 *ec2.DescribeImagesInput) (*request.Request, *ec2.DescribeImagesOutput) {
	fake.describeImagesRequestMutex.Lock()
	ret, specificReturn := fake.describeImagesRequestReturnsOnCall[len(fake.describeImagesRequestArgsForCall)]
	fake.describeImagesRequestArgsForCall = append(fake.describeImagesRequestArgsForCall, struct {
		arg1 *ec2.DescribeImagesInput
	}{arg1})
	fake.recordInvocation("DescribeImagesRequest", []interface{}{arg1})
	fake.describeImagesRequestMutex.Unlock()
	if fake.DescribeImagesRequestStub != nil {
		return fake.DescribeImagesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImagesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImagesRequestCallCount() int {
	fake.describeImagesRequestMutex.RLock()
	defer fake.describeImagesRequestMutex.RUnlock()
	return len(fake.describeImagesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeImagesRequestCalls(stub func(*ec2.DescribeImagesInput) (*request.Request, *ec2.DescribeImagesOutput)) {
	fake.describeImagesRequestMutex.Lock()
	defer fake.describeImagesRequestMutex.Unlock()
	fake.DescribeImagesRequestStub = stub
}

func (fake *FakeEC2API) DescribeImagesRequestArgsForCall(i int) *ec2.DescribeImagesInput {
	fake.describeImagesRequestMutex.RLock()
	defer fake.describeImagesRequestMutex.RUnlock()
	argsForCall := fake.describeImagesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImagesRequestReturns(result1 *request.Request, result2 *ec2.DescribeImagesOutput) {
	fake.describeImagesRequestMutex.Lock()
	defer fake.describeImagesRequestMutex.Unlock()
	fake.DescribeImagesRequestStub = nil
	fake.describeImagesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeImagesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImagesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeImagesOutput) {
	fake.describeImagesRequestMutex.Lock()
	defer fake.describeImagesRequestMutex.Unlock()
	fake.DescribeImagesRequestStub = nil
	if fake.describeImagesRequestReturnsOnCall == nil {
		fake.describeImagesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeImagesOutput
		})
	}
	fake.describeImagesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeImagesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeImagesInput, arg3 ...request.Option) (*ec2.DescribeImagesOutput, error) {
	fake.describeImagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeImagesWithContextReturnsOnCall[len(fake.describeImagesWithContextArgsForCall)]
	fake.describeImagesWithContextArgsForCall = append(fake.describeImagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImagesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeImagesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeImagesWithContextMutex.Unlock()
	if fake.DescribeImagesWithContextStub != nil {
		return fake.DescribeImagesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImagesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImagesWithContextCallCount() int {
	fake.describeImagesWithContextMutex.RLock()
	defer fake.describeImagesWithContextMutex.RUnlock()
	return len(fake.describeImagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeImagesWithContextCalls(stub func(aws.Context, *ec2.DescribeImagesInput, ...request.Option) (*ec2.DescribeImagesOutput, error)) {
	fake.describeImagesWithContextMutex.Lock()
	defer fake.describeImagesWithContextMutex.Unlock()
	fake.DescribeImagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeImagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeImagesInput, []request.Option) {
	fake.describeImagesWithContextMutex.RLock()
	defer fake.describeImagesWithContextMutex.RUnlock()
	argsForCall := fake.describeImagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeImagesWithContextReturns(result1 *ec2.DescribeImagesOutput, result2 error) {
	fake.describeImagesWithContextMutex.Lock()
	defer fake.describeImagesWithContextMutex.Unlock()
	fake.DescribeImagesWithContextStub = nil
	fake.describeImagesWithContextReturns = struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImagesWithContextReturnsOnCall(i int, result1 *ec2.DescribeImagesOutput, result2 error) {
	fake.describeImagesWithContextMutex.Lock()
	defer fake.describeImagesWithContextMutex.Unlock()
	fake.DescribeImagesWithContextStub = nil
	if fake.describeImagesWithContextReturnsOnCall == nil {
		fake.describeImagesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImagesOutput
			result2 error
		})
	}
	fake.describeImagesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImagesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportImageTasks(arg1 *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	fake.describeImportImageTasksMutex.Lock()
	ret, specificReturn := fake.describeImportImageTasksReturnsOnCall[len(fake.describeImportImageTasksArgsForCall)]
	fake.describeImportImageTasksArgsForCall = append(fake.describeImportImageTasksArgsForCall, struct {
		arg1 *ec2.DescribeImportImageTasksInput
	}{arg1})
	fake.recordInvocation("DescribeImportImageTasks", []interface{}{arg1})
	fake.describeImportImageTasksMutex.Unlock()
	if fake.DescribeImportImageTasksStub != nil {
		return fake.DescribeImportImageTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImportImageTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImportImageTasksCallCount() int {
	fake.describeImportImageTasksMutex.RLock()
	defer fake.describeImportImageTasksMutex.RUnlock()
	return len(fake.describeImportImageTasksArgsForCall)
}

func (fake *FakeEC2API) DescribeImportImageTasksCalls(stub func(*ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error)) {
	fake.describeImportImageTasksMutex.Lock()
	defer fake.describeImportImageTasksMutex.Unlock()
	fake.DescribeImportImageTasksStub = stub
}

func (fake *FakeEC2API) DescribeImportImageTasksArgsForCall(i int) *ec2.DescribeImportImageTasksInput {
	fake.describeImportImageTasksMutex.RLock()
	defer fake.describeImportImageTasksMutex.RUnlock()
	argsForCall := fake.describeImportImageTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImportImageTasksReturns(result1 *ec2.DescribeImportImageTasksOutput, result2 error) {
	fake.describeImportImageTasksMutex.Lock()
	defer fake.describeImportImageTasksMutex.Unlock()
	fake.DescribeImportImageTasksStub = nil
	fake.describeImportImageTasksReturns = struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportImageTasksReturnsOnCall(i int, result1 *ec2.DescribeImportImageTasksOutput, result2 error) {
	fake.describeImportImageTasksMutex.Lock()
	defer fake.describeImportImageTasksMutex.Unlock()
	fake.DescribeImportImageTasksStub = nil
	if fake.describeImportImageTasksReturnsOnCall == nil {
		fake.describeImportImageTasksReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImportImageTasksOutput
			result2 error
		})
	}
	fake.describeImportImageTasksReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportImageTasksRequest(arg1 *ec2.DescribeImportImageTasksInput) (*request.Request, *ec2.DescribeImportImageTasksOutput) {
	fake.describeImportImageTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeImportImageTasksRequestReturnsOnCall[len(fake.describeImportImageTasksRequestArgsForCall)]
	fake.describeImportImageTasksRequestArgsForCall = append(fake.describeImportImageTasksRequestArgsForCall, struct {
		arg1 *ec2.DescribeImportImageTasksInput
	}{arg1})
	fake.recordInvocation("DescribeImportImageTasksRequest", []interface{}{arg1})
	fake.describeImportImageTasksRequestMutex.Unlock()
	if fake.DescribeImportImageTasksRequestStub != nil {
		return fake.DescribeImportImageTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImportImageTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImportImageTasksRequestCallCount() int {
	fake.describeImportImageTasksRequestMutex.RLock()
	defer fake.describeImportImageTasksRequestMutex.RUnlock()
	return len(fake.describeImportImageTasksRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeImportImageTasksRequestCalls(stub func(*ec2.DescribeImportImageTasksInput) (*request.Request, *ec2.DescribeImportImageTasksOutput)) {
	fake.describeImportImageTasksRequestMutex.Lock()
	defer fake.describeImportImageTasksRequestMutex.Unlock()
	fake.DescribeImportImageTasksRequestStub = stub
}

func (fake *FakeEC2API) DescribeImportImageTasksRequestArgsForCall(i int) *ec2.DescribeImportImageTasksInput {
	fake.describeImportImageTasksRequestMutex.RLock()
	defer fake.describeImportImageTasksRequestMutex.RUnlock()
	argsForCall := fake.describeImportImageTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImportImageTasksRequestReturns(result1 *request.Request, result2 *ec2.DescribeImportImageTasksOutput) {
	fake.describeImportImageTasksRequestMutex.Lock()
	defer fake.describeImportImageTasksRequestMutex.Unlock()
	fake.DescribeImportImageTasksRequestStub = nil
	fake.describeImportImageTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeImportImageTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportImageTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeImportImageTasksOutput) {
	fake.describeImportImageTasksRequestMutex.Lock()
	defer fake.describeImportImageTasksRequestMutex.Unlock()
	fake.DescribeImportImageTasksRequestStub = nil
	if fake.describeImportImageTasksRequestReturnsOnCall == nil {
		fake.describeImportImageTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeImportImageTasksOutput
		})
	}
	fake.describeImportImageTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeImportImageTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportImageTasksWithContext(arg1 aws.Context, arg2 *ec2.DescribeImportImageTasksInput, arg3 ...request.Option) (*ec2.DescribeImportImageTasksOutput, error) {
	fake.describeImportImageTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeImportImageTasksWithContextReturnsOnCall[len(fake.describeImportImageTasksWithContextArgsForCall)]
	fake.describeImportImageTasksWithContextArgsForCall = append(fake.describeImportImageTasksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImportImageTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeImportImageTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeImportImageTasksWithContextMutex.Unlock()
	if fake.DescribeImportImageTasksWithContextStub != nil {
		return fake.DescribeImportImageTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImportImageTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImportImageTasksWithContextCallCount() int {
	fake.describeImportImageTasksWithContextMutex.RLock()
	defer fake.describeImportImageTasksWithContextMutex.RUnlock()
	return len(fake.describeImportImageTasksWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeImportImageTasksWithContextCalls(stub func(aws.Context, *ec2.DescribeImportImageTasksInput, ...request.Option) (*ec2.DescribeImportImageTasksOutput, error)) {
	fake.describeImportImageTasksWithContextMutex.Lock()
	defer fake.describeImportImageTasksWithContextMutex.Unlock()
	fake.DescribeImportImageTasksWithContextStub = stub
}

func (fake *FakeEC2API) DescribeImportImageTasksWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeImportImageTasksInput, []request.Option) {
	fake.describeImportImageTasksWithContextMutex.RLock()
	defer fake.describeImportImageTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeImportImageTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeImportImageTasksWithContextReturns(result1 *ec2.DescribeImportImageTasksOutput, result2 error) {
	fake.describeImportImageTasksWithContextMutex.Lock()
	defer fake.describeImportImageTasksWithContextMutex.Unlock()
	fake.DescribeImportImageTasksWithContextStub = nil
	fake.describeImportImageTasksWithContextReturns = struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportImageTasksWithContextReturnsOnCall(i int, result1 *ec2.DescribeImportImageTasksOutput, result2 error) {
	fake.describeImportImageTasksWithContextMutex.Lock()
	defer fake.describeImportImageTasksWithContextMutex.Unlock()
	fake.DescribeImportImageTasksWithContextStub = nil
	if fake.describeImportImageTasksWithContextReturnsOnCall == nil {
		fake.describeImportImageTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImportImageTasksOutput
			result2 error
		})
	}
	fake.describeImportImageTasksWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImportImageTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportSnapshotTasks(arg1 *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	fake.describeImportSnapshotTasksMutex.Lock()
	ret, specificReturn := fake.describeImportSnapshotTasksReturnsOnCall[len(fake.describeImportSnapshotTasksArgsForCall)]
	fake.describeImportSnapshotTasksArgsForCall = append(fake.describeImportSnapshotTasksArgsForCall, struct {
		arg1 *ec2.DescribeImportSnapshotTasksInput
	}{arg1})
	fake.recordInvocation("DescribeImportSnapshotTasks", []interface{}{arg1})
	fake.describeImportSnapshotTasksMutex.Unlock()
	if fake.DescribeImportSnapshotTasksStub != nil {
		return fake.DescribeImportSnapshotTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImportSnapshotTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksCallCount() int {
	fake.describeImportSnapshotTasksMutex.RLock()
	defer fake.describeImportSnapshotTasksMutex.RUnlock()
	return len(fake.describeImportSnapshotTasksArgsForCall)
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksCalls(stub func(*ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error)) {
	fake.describeImportSnapshotTasksMutex.Lock()
	defer fake.describeImportSnapshotTasksMutex.Unlock()
	fake.DescribeImportSnapshotTasksStub = stub
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksArgsForCall(i int) *ec2.DescribeImportSnapshotTasksInput {
	fake.describeImportSnapshotTasksMutex.RLock()
	defer fake.describeImportSnapshotTasksMutex.RUnlock()
	argsForCall := fake.describeImportSnapshotTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksReturns(result1 *ec2.DescribeImportSnapshotTasksOutput, result2 error) {
	fake.describeImportSnapshotTasksMutex.Lock()
	defer fake.describeImportSnapshotTasksMutex.Unlock()
	fake.DescribeImportSnapshotTasksStub = nil
	fake.describeImportSnapshotTasksReturns = struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksReturnsOnCall(i int, result1 *ec2.DescribeImportSnapshotTasksOutput, result2 error) {
	fake.describeImportSnapshotTasksMutex.Lock()
	defer fake.describeImportSnapshotTasksMutex.Unlock()
	fake.DescribeImportSnapshotTasksStub = nil
	if fake.describeImportSnapshotTasksReturnsOnCall == nil {
		fake.describeImportSnapshotTasksReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImportSnapshotTasksOutput
			result2 error
		})
	}
	fake.describeImportSnapshotTasksReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksRequest(arg1 *ec2.DescribeImportSnapshotTasksInput) (*request.Request, *ec2.DescribeImportSnapshotTasksOutput) {
	fake.describeImportSnapshotTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeImportSnapshotTasksRequestReturnsOnCall[len(fake.describeImportSnapshotTasksRequestArgsForCall)]
	fake.describeImportSnapshotTasksRequestArgsForCall = append(fake.describeImportSnapshotTasksRequestArgsForCall, struct {
		arg1 *ec2.DescribeImportSnapshotTasksInput
	}{arg1})
	fake.recordInvocation("DescribeImportSnapshotTasksRequest", []interface{}{arg1})
	fake.describeImportSnapshotTasksRequestMutex.Unlock()
	if fake.DescribeImportSnapshotTasksRequestStub != nil {
		return fake.DescribeImportSnapshotTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImportSnapshotTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksRequestCallCount() int {
	fake.describeImportSnapshotTasksRequestMutex.RLock()
	defer fake.describeImportSnapshotTasksRequestMutex.RUnlock()
	return len(fake.describeImportSnapshotTasksRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksRequestCalls(stub func(*ec2.DescribeImportSnapshotTasksInput) (*request.Request, *ec2.DescribeImportSnapshotTasksOutput)) {
	fake.describeImportSnapshotTasksRequestMutex.Lock()
	defer fake.describeImportSnapshotTasksRequestMutex.Unlock()
	fake.DescribeImportSnapshotTasksRequestStub = stub
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksRequestArgsForCall(i int) *ec2.DescribeImportSnapshotTasksInput {
	fake.describeImportSnapshotTasksRequestMutex.RLock()
	defer fake.describeImportSnapshotTasksRequestMutex.RUnlock()
	argsForCall := fake.describeImportSnapshotTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksRequestReturns(result1 *request.Request, result2 *ec2.DescribeImportSnapshotTasksOutput) {
	fake.describeImportSnapshotTasksRequestMutex.Lock()
	defer fake.describeImportSnapshotTasksRequestMutex.Unlock()
	fake.DescribeImportSnapshotTasksRequestStub = nil
	fake.describeImportSnapshotTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeImportSnapshotTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeImportSnapshotTasksOutput) {
	fake.describeImportSnapshotTasksRequestMutex.Lock()
	defer fake.describeImportSnapshotTasksRequestMutex.Unlock()
	fake.DescribeImportSnapshotTasksRequestStub = nil
	if fake.describeImportSnapshotTasksRequestReturnsOnCall == nil {
		fake.describeImportSnapshotTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeImportSnapshotTasksOutput
		})
	}
	fake.describeImportSnapshotTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeImportSnapshotTasksOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksWithContext(arg1 aws.Context, arg2 *ec2.DescribeImportSnapshotTasksInput, arg3 ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	fake.describeImportSnapshotTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeImportSnapshotTasksWithContextReturnsOnCall[len(fake.describeImportSnapshotTasksWithContextArgsForCall)]
	fake.describeImportSnapshotTasksWithContextArgsForCall = append(fake.describeImportSnapshotTasksWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImportSnapshotTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeImportSnapshotTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeImportSnapshotTasksWithContextMutex.Unlock()
	if fake.DescribeImportSnapshotTasksWithContextStub != nil {
		return fake.DescribeImportSnapshotTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeImportSnapshotTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksWithContextCallCount() int {
	fake.describeImportSnapshotTasksWithContextMutex.RLock()
	defer fake.describeImportSnapshotTasksWithContextMutex.RUnlock()
	return len(fake.describeImportSnapshotTasksWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksWithContextCalls(stub func(aws.Context, *ec2.DescribeImportSnapshotTasksInput, ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error)) {
	fake.describeImportSnapshotTasksWithContextMutex.Lock()
	defer fake.describeImportSnapshotTasksWithContextMutex.Unlock()
	fake.DescribeImportSnapshotTasksWithContextStub = stub
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeImportSnapshotTasksInput, []request.Option) {
	fake.describeImportSnapshotTasksWithContextMutex.RLock()
	defer fake.describeImportSnapshotTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeImportSnapshotTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksWithContextReturns(result1 *ec2.DescribeImportSnapshotTasksOutput, result2 error) {
	fake.describeImportSnapshotTasksWithContextMutex.Lock()
	defer fake.describeImportSnapshotTasksWithContextMutex.Unlock()
	fake.DescribeImportSnapshotTasksWithContextStub = nil
	fake.describeImportSnapshotTasksWithContextReturns = struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeImportSnapshotTasksWithContextReturnsOnCall(i int, result1 *ec2.DescribeImportSnapshotTasksOutput, result2 error) {
	fake.describeImportSnapshotTasksWithContextMutex.Lock()
	defer fake.describeImportSnapshotTasksWithContextMutex.Unlock()
	fake.DescribeImportSnapshotTasksWithContextStub = nil
	if fake.describeImportSnapshotTasksWithContextReturnsOnCall == nil {
		fake.describeImportSnapshotTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeImportSnapshotTasksOutput
			result2 error
		})
	}
	fake.describeImportSnapshotTasksWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeImportSnapshotTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceAttribute(arg1 *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	fake.describeInstanceAttributeMutex.Lock()
	ret, specificReturn := fake.describeInstanceAttributeReturnsOnCall[len(fake.describeInstanceAttributeArgsForCall)]
	fake.describeInstanceAttributeArgsForCall = append(fake.describeInstanceAttributeArgsForCall, struct {
		arg1 *ec2.DescribeInstanceAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeInstanceAttribute", []interface{}{arg1})
	fake.describeInstanceAttributeMutex.Unlock()
	if fake.DescribeInstanceAttributeStub != nil {
		return fake.DescribeInstanceAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceAttributeCallCount() int {
	fake.describeInstanceAttributeMutex.RLock()
	defer fake.describeInstanceAttributeMutex.RUnlock()
	return len(fake.describeInstanceAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceAttributeCalls(stub func(*ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error)) {
	fake.describeInstanceAttributeMutex.Lock()
	defer fake.describeInstanceAttributeMutex.Unlock()
	fake.DescribeInstanceAttributeStub = stub
}

func (fake *FakeEC2API) DescribeInstanceAttributeArgsForCall(i int) *ec2.DescribeInstanceAttributeInput {
	fake.describeInstanceAttributeMutex.RLock()
	defer fake.describeInstanceAttributeMutex.RUnlock()
	argsForCall := fake.describeInstanceAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstanceAttributeReturns(result1 *ec2.DescribeInstanceAttributeOutput, result2 error) {
	fake.describeInstanceAttributeMutex.Lock()
	defer fake.describeInstanceAttributeMutex.Unlock()
	fake.DescribeInstanceAttributeStub = nil
	fake.describeInstanceAttributeReturns = struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceAttributeReturnsOnCall(i int, result1 *ec2.DescribeInstanceAttributeOutput, result2 error) {
	fake.describeInstanceAttributeMutex.Lock()
	defer fake.describeInstanceAttributeMutex.Unlock()
	fake.DescribeInstanceAttributeStub = nil
	if fake.describeInstanceAttributeReturnsOnCall == nil {
		fake.describeInstanceAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstanceAttributeOutput
			result2 error
		})
	}
	fake.describeInstanceAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceAttributeRequest(arg1 *ec2.DescribeInstanceAttributeInput) (*request.Request, *ec2.DescribeInstanceAttributeOutput) {
	fake.describeInstanceAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeInstanceAttributeRequestReturnsOnCall[len(fake.describeInstanceAttributeRequestArgsForCall)]
	fake.describeInstanceAttributeRequestArgsForCall = append(fake.describeInstanceAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeInstanceAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeInstanceAttributeRequest", []interface{}{arg1})
	fake.describeInstanceAttributeRequestMutex.Unlock()
	if fake.DescribeInstanceAttributeRequestStub != nil {
		return fake.DescribeInstanceAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceAttributeRequestCallCount() int {
	fake.describeInstanceAttributeRequestMutex.RLock()
	defer fake.describeInstanceAttributeRequestMutex.RUnlock()
	return len(fake.describeInstanceAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceAttributeRequestCalls(stub func(*ec2.DescribeInstanceAttributeInput) (*request.Request, *ec2.DescribeInstanceAttributeOutput)) {
	fake.describeInstanceAttributeRequestMutex.Lock()
	defer fake.describeInstanceAttributeRequestMutex.Unlock()
	fake.DescribeInstanceAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeInstanceAttributeRequestArgsForCall(i int) *ec2.DescribeInstanceAttributeInput {
	fake.describeInstanceAttributeRequestMutex.RLock()
	defer fake.describeInstanceAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeInstanceAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstanceAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeInstanceAttributeOutput) {
	fake.describeInstanceAttributeRequestMutex.Lock()
	defer fake.describeInstanceAttributeRequestMutex.Unlock()
	fake.DescribeInstanceAttributeRequestStub = nil
	fake.describeInstanceAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeInstanceAttributeOutput) {
	fake.describeInstanceAttributeRequestMutex.Lock()
	defer fake.describeInstanceAttributeRequestMutex.Unlock()
	fake.DescribeInstanceAttributeRequestStub = nil
	if fake.describeInstanceAttributeRequestReturnsOnCall == nil {
		fake.describeInstanceAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeInstanceAttributeOutput
		})
	}
	fake.describeInstanceAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstanceAttributeInput, arg3 ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error) {
	fake.describeInstanceAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceAttributeWithContextReturnsOnCall[len(fake.describeInstanceAttributeWithContextArgsForCall)]
	fake.describeInstanceAttributeWithContextArgsForCall = append(fake.describeInstanceAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeInstanceAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstanceAttributeWithContextMutex.Unlock()
	if fake.DescribeInstanceAttributeWithContextStub != nil {
		return fake.DescribeInstanceAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceAttributeWithContextCallCount() int {
	fake.describeInstanceAttributeWithContextMutex.RLock()
	defer fake.describeInstanceAttributeWithContextMutex.RUnlock()
	return len(fake.describeInstanceAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeInstanceAttributeInput, ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error)) {
	fake.describeInstanceAttributeWithContextMutex.Lock()
	defer fake.describeInstanceAttributeWithContextMutex.Unlock()
	fake.DescribeInstanceAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInstanceAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstanceAttributeInput, []request.Option) {
	fake.describeInstanceAttributeWithContextMutex.RLock()
	defer fake.describeInstanceAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeInstanceAttributeWithContextReturns(result1 *ec2.DescribeInstanceAttributeOutput, result2 error) {
	fake.describeInstanceAttributeWithContextMutex.Lock()
	defer fake.describeInstanceAttributeWithContextMutex.Unlock()
	fake.DescribeInstanceAttributeWithContextStub = nil
	fake.describeInstanceAttributeWithContextReturns = struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeInstanceAttributeOutput, result2 error) {
	fake.describeInstanceAttributeWithContextMutex.Lock()
	defer fake.describeInstanceAttributeWithContextMutex.Unlock()
	fake.DescribeInstanceAttributeWithContextStub = nil
	if fake.describeInstanceAttributeWithContextReturnsOnCall == nil {
		fake.describeInstanceAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstanceAttributeOutput
			result2 error
		})
	}
	fake.describeInstanceAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecifications(arg1 *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	fake.describeInstanceCreditSpecificationsMutex.Lock()
	ret, specificReturn := fake.describeInstanceCreditSpecificationsReturnsOnCall[len(fake.describeInstanceCreditSpecificationsArgsForCall)]
	fake.describeInstanceCreditSpecificationsArgsForCall = append(fake.describeInstanceCreditSpecificationsArgsForCall, struct {
		arg1 *ec2.DescribeInstanceCreditSpecificationsInput
	}{arg1})
	fake.recordInvocation("DescribeInstanceCreditSpecifications", []interface{}{arg1})
	fake.describeInstanceCreditSpecificationsMutex.Unlock()
	if fake.DescribeInstanceCreditSpecificationsStub != nil {
		return fake.DescribeInstanceCreditSpecificationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceCreditSpecificationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsCallCount() int {
	fake.describeInstanceCreditSpecificationsMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsMutex.RUnlock()
	return len(fake.describeInstanceCreditSpecificationsArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsCalls(stub func(*ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)) {
	fake.describeInstanceCreditSpecificationsMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsStub = stub
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsArgsForCall(i int) *ec2.DescribeInstanceCreditSpecificationsInput {
	fake.describeInstanceCreditSpecificationsMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsMutex.RUnlock()
	argsForCall := fake.describeInstanceCreditSpecificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsReturns(result1 *ec2.DescribeInstanceCreditSpecificationsOutput, result2 error) {
	fake.describeInstanceCreditSpecificationsMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsStub = nil
	fake.describeInstanceCreditSpecificationsReturns = struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsReturnsOnCall(i int, result1 *ec2.DescribeInstanceCreditSpecificationsOutput, result2 error) {
	fake.describeInstanceCreditSpecificationsMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsStub = nil
	if fake.describeInstanceCreditSpecificationsReturnsOnCall == nil {
		fake.describeInstanceCreditSpecificationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstanceCreditSpecificationsOutput
			result2 error
		})
	}
	fake.describeInstanceCreditSpecificationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsRequest(arg1 *ec2.DescribeInstanceCreditSpecificationsInput) (*request.Request, *ec2.DescribeInstanceCreditSpecificationsOutput) {
	fake.describeInstanceCreditSpecificationsRequestMutex.Lock()
	ret, specificReturn := fake.describeInstanceCreditSpecificationsRequestReturnsOnCall[len(fake.describeInstanceCreditSpecificationsRequestArgsForCall)]
	fake.describeInstanceCreditSpecificationsRequestArgsForCall = append(fake.describeInstanceCreditSpecificationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeInstanceCreditSpecificationsInput
	}{arg1})
	fake.recordInvocation("DescribeInstanceCreditSpecificationsRequest", []interface{}{arg1})
	fake.describeInstanceCreditSpecificationsRequestMutex.Unlock()
	if fake.DescribeInstanceCreditSpecificationsRequestStub != nil {
		return fake.DescribeInstanceCreditSpecificationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceCreditSpecificationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsRequestCallCount() int {
	fake.describeInstanceCreditSpecificationsRequestMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsRequestMutex.RUnlock()
	return len(fake.describeInstanceCreditSpecificationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsRequestCalls(stub func(*ec2.DescribeInstanceCreditSpecificationsInput) (*request.Request, *ec2.DescribeInstanceCreditSpecificationsOutput)) {
	fake.describeInstanceCreditSpecificationsRequestMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsRequestMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsRequestArgsForCall(i int) *ec2.DescribeInstanceCreditSpecificationsInput {
	fake.describeInstanceCreditSpecificationsRequestMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsRequestMutex.RUnlock()
	argsForCall := fake.describeInstanceCreditSpecificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeInstanceCreditSpecificationsOutput) {
	fake.describeInstanceCreditSpecificationsRequestMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsRequestMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsRequestStub = nil
	fake.describeInstanceCreditSpecificationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceCreditSpecificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeInstanceCreditSpecificationsOutput) {
	fake.describeInstanceCreditSpecificationsRequestMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsRequestMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsRequestStub = nil
	if fake.describeInstanceCreditSpecificationsRequestReturnsOnCall == nil {
		fake.describeInstanceCreditSpecificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeInstanceCreditSpecificationsOutput
		})
	}
	fake.describeInstanceCreditSpecificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceCreditSpecificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstanceCreditSpecificationsInput, arg3 ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	fake.describeInstanceCreditSpecificationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceCreditSpecificationsWithContextReturnsOnCall[len(fake.describeInstanceCreditSpecificationsWithContextArgsForCall)]
	fake.describeInstanceCreditSpecificationsWithContextArgsForCall = append(fake.describeInstanceCreditSpecificationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceCreditSpecificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeInstanceCreditSpecificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstanceCreditSpecificationsWithContextMutex.Unlock()
	if fake.DescribeInstanceCreditSpecificationsWithContextStub != nil {
		return fake.DescribeInstanceCreditSpecificationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceCreditSpecificationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsWithContextCallCount() int {
	fake.describeInstanceCreditSpecificationsWithContextMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsWithContextMutex.RUnlock()
	return len(fake.describeInstanceCreditSpecificationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsWithContextCalls(stub func(aws.Context, *ec2.DescribeInstanceCreditSpecificationsInput, ...request.Option) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)) {
	fake.describeInstanceCreditSpecificationsWithContextMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsWithContextMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstanceCreditSpecificationsInput, []request.Option) {
	fake.describeInstanceCreditSpecificationsWithContextMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceCreditSpecificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsWithContextReturns(result1 *ec2.DescribeInstanceCreditSpecificationsOutput, result2 error) {
	fake.describeInstanceCreditSpecificationsWithContextMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsWithContextMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsWithContextStub = nil
	fake.describeInstanceCreditSpecificationsWithContextReturns = struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceCreditSpecificationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeInstanceCreditSpecificationsOutput, result2 error) {
	fake.describeInstanceCreditSpecificationsWithContextMutex.Lock()
	defer fake.describeInstanceCreditSpecificationsWithContextMutex.Unlock()
	fake.DescribeInstanceCreditSpecificationsWithContextStub = nil
	if fake.describeInstanceCreditSpecificationsWithContextReturnsOnCall == nil {
		fake.describeInstanceCreditSpecificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstanceCreditSpecificationsOutput
			result2 error
		})
	}
	fake.describeInstanceCreditSpecificationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstanceCreditSpecificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceStatus(arg1 *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	fake.describeInstanceStatusMutex.Lock()
	ret, specificReturn := fake.describeInstanceStatusReturnsOnCall[len(fake.describeInstanceStatusArgsForCall)]
	fake.describeInstanceStatusArgsForCall = append(fake.describeInstanceStatusArgsForCall, struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}{arg1})
	fake.recordInvocation("DescribeInstanceStatus", []interface{}{arg1})
	fake.describeInstanceStatusMutex.Unlock()
	if fake.DescribeInstanceStatusStub != nil {
		return fake.DescribeInstanceStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceStatusCallCount() int {
	fake.describeInstanceStatusMutex.RLock()
	defer fake.describeInstanceStatusMutex.RUnlock()
	return len(fake.describeInstanceStatusArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceStatusCalls(stub func(*ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error)) {
	fake.describeInstanceStatusMutex.Lock()
	defer fake.describeInstanceStatusMutex.Unlock()
	fake.DescribeInstanceStatusStub = stub
}

func (fake *FakeEC2API) DescribeInstanceStatusArgsForCall(i int) *ec2.DescribeInstanceStatusInput {
	fake.describeInstanceStatusMutex.RLock()
	defer fake.describeInstanceStatusMutex.RUnlock()
	argsForCall := fake.describeInstanceStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstanceStatusReturns(result1 *ec2.DescribeInstanceStatusOutput, result2 error) {
	fake.describeInstanceStatusMutex.Lock()
	defer fake.describeInstanceStatusMutex.Unlock()
	fake.DescribeInstanceStatusStub = nil
	fake.describeInstanceStatusReturns = struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceStatusReturnsOnCall(i int, result1 *ec2.DescribeInstanceStatusOutput, result2 error) {
	fake.describeInstanceStatusMutex.Lock()
	defer fake.describeInstanceStatusMutex.Unlock()
	fake.DescribeInstanceStatusStub = nil
	if fake.describeInstanceStatusReturnsOnCall == nil {
		fake.describeInstanceStatusReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstanceStatusOutput
			result2 error
		})
	}
	fake.describeInstanceStatusReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceStatusPages(arg1 *ec2.DescribeInstanceStatusInput, arg2 func(*ec2.DescribeInstanceStatusOutput, bool) bool) error {
	fake.describeInstanceStatusPagesMutex.Lock()
	ret, specificReturn := fake.describeInstanceStatusPagesReturnsOnCall[len(fake.describeInstanceStatusPagesArgsForCall)]
	fake.describeInstanceStatusPagesArgsForCall = append(fake.describeInstanceStatusPagesArgsForCall, struct {
		arg1 *ec2.DescribeInstanceStatusInput
		arg2 func(*ec2.DescribeInstanceStatusOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeInstanceStatusPages", []interface{}{arg1, arg2})
	fake.describeInstanceStatusPagesMutex.Unlock()
	if fake.DescribeInstanceStatusPagesStub != nil {
		return fake.DescribeInstanceStatusPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeInstanceStatusPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesCallCount() int {
	fake.describeInstanceStatusPagesMutex.RLock()
	defer fake.describeInstanceStatusPagesMutex.RUnlock()
	return len(fake.describeInstanceStatusPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesCalls(stub func(*ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool) error) {
	fake.describeInstanceStatusPagesMutex.Lock()
	defer fake.describeInstanceStatusPagesMutex.Unlock()
	fake.DescribeInstanceStatusPagesStub = stub
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesArgsForCall(i int) (*ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool) {
	fake.describeInstanceStatusPagesMutex.RLock()
	defer fake.describeInstanceStatusPagesMutex.RUnlock()
	argsForCall := fake.describeInstanceStatusPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesReturns(result1 error) {
	fake.describeInstanceStatusPagesMutex.Lock()
	defer fake.describeInstanceStatusPagesMutex.Unlock()
	fake.DescribeInstanceStatusPagesStub = nil
	fake.describeInstanceStatusPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstanceStatusPagesMutex.Lock()
	defer fake.describeInstanceStatusPagesMutex.Unlock()
	fake.DescribeInstanceStatusPagesStub = nil
	if fake.describeInstanceStatusPagesReturnsOnCall == nil {
		fake.describeInstanceStatusPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstanceStatusPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstanceStatusInput, arg3 func(*ec2.DescribeInstanceStatusOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstanceStatusPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceStatusPagesWithContextReturnsOnCall[len(fake.describeInstanceStatusPagesWithContextArgsForCall)]
	fake.describeInstanceStatusPagesWithContextArgsForCall = append(fake.describeInstanceStatusPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 func(*ec2.DescribeInstanceStatusOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeInstanceStatusPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstanceStatusPagesWithContextMutex.Unlock()
	if fake.DescribeInstanceStatusPagesWithContextStub != nil {
		return fake.DescribeInstanceStatusPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeInstanceStatusPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesWithContextCallCount() int {
	fake.describeInstanceStatusPagesWithContextMutex.RLock()
	defer fake.describeInstanceStatusPagesWithContextMutex.RUnlock()
	return len(fake.describeInstanceStatusPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool, ...request.Option) error) {
	fake.describeInstanceStatusPagesWithContextMutex.Lock()
	defer fake.describeInstanceStatusPagesWithContextMutex.Unlock()
	fake.DescribeInstanceStatusPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool, []request.Option) {
	fake.describeInstanceStatusPagesWithContextMutex.RLock()
	defer fake.describeInstanceStatusPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceStatusPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesWithContextReturns(result1 error) {
	fake.describeInstanceStatusPagesWithContextMutex.Lock()
	defer fake.describeInstanceStatusPagesWithContextMutex.Unlock()
	fake.DescribeInstanceStatusPagesWithContextStub = nil
	fake.describeInstanceStatusPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstanceStatusPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstanceStatusPagesWithContextMutex.Lock()
	defer fake.describeInstanceStatusPagesWithContextMutex.Unlock()
	fake.DescribeInstanceStatusPagesWithContextStub = nil
	if fake.describeInstanceStatusPagesWithContextReturnsOnCall == nil {
		fake.describeInstanceStatusPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstanceStatusPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstanceStatusRequest(arg1 *ec2.DescribeInstanceStatusInput) (*request.Request, *ec2.DescribeInstanceStatusOutput) {
	fake.describeInstanceStatusRequestMutex.Lock()
	ret, specificReturn := fake.describeInstanceStatusRequestReturnsOnCall[len(fake.describeInstanceStatusRequestArgsForCall)]
	fake.describeInstanceStatusRequestArgsForCall = append(fake.describeInstanceStatusRequestArgsForCall, struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}{arg1})
	fake.recordInvocation("DescribeInstanceStatusRequest", []interface{}{arg1})
	fake.describeInstanceStatusRequestMutex.Unlock()
	if fake.DescribeInstanceStatusRequestStub != nil {
		return fake.DescribeInstanceStatusRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceStatusRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceStatusRequestCallCount() int {
	fake.describeInstanceStatusRequestMutex.RLock()
	defer fake.describeInstanceStatusRequestMutex.RUnlock()
	return len(fake.describeInstanceStatusRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceStatusRequestCalls(stub func(*ec2.DescribeInstanceStatusInput) (*request.Request, *ec2.DescribeInstanceStatusOutput)) {
	fake.describeInstanceStatusRequestMutex.Lock()
	defer fake.describeInstanceStatusRequestMutex.Unlock()
	fake.DescribeInstanceStatusRequestStub = stub
}

func (fake *FakeEC2API) DescribeInstanceStatusRequestArgsForCall(i int) *ec2.DescribeInstanceStatusInput {
	fake.describeInstanceStatusRequestMutex.RLock()
	defer fake.describeInstanceStatusRequestMutex.RUnlock()
	argsForCall := fake.describeInstanceStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstanceStatusRequestReturns(result1 *request.Request, result2 *ec2.DescribeInstanceStatusOutput) {
	fake.describeInstanceStatusRequestMutex.Lock()
	defer fake.describeInstanceStatusRequestMutex.Unlock()
	fake.DescribeInstanceStatusRequestStub = nil
	fake.describeInstanceStatusRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceStatusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeInstanceStatusOutput) {
	fake.describeInstanceStatusRequestMutex.Lock()
	defer fake.describeInstanceStatusRequestMutex.Unlock()
	fake.DescribeInstanceStatusRequestStub = nil
	if fake.describeInstanceStatusRequestReturnsOnCall == nil {
		fake.describeInstanceStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeInstanceStatusOutput
		})
	}
	fake.describeInstanceStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstanceStatusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceStatusWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstanceStatusInput, arg3 ...request.Option) (*ec2.DescribeInstanceStatusOutput, error) {
	fake.describeInstanceStatusWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstanceStatusWithContextReturnsOnCall[len(fake.describeInstanceStatusWithContextArgsForCall)]
	fake.describeInstanceStatusWithContextArgsForCall = append(fake.describeInstanceStatusWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeInstanceStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstanceStatusWithContextMutex.Unlock()
	if fake.DescribeInstanceStatusWithContextStub != nil {
		return fake.DescribeInstanceStatusWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstanceStatusWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstanceStatusWithContextCallCount() int {
	fake.describeInstanceStatusWithContextMutex.RLock()
	defer fake.describeInstanceStatusWithContextMutex.RUnlock()
	return len(fake.describeInstanceStatusWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInstanceStatusWithContextCalls(stub func(aws.Context, *ec2.DescribeInstanceStatusInput, ...request.Option) (*ec2.DescribeInstanceStatusOutput, error)) {
	fake.describeInstanceStatusWithContextMutex.Lock()
	defer fake.describeInstanceStatusWithContextMutex.Unlock()
	fake.DescribeInstanceStatusWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInstanceStatusWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstanceStatusInput, []request.Option) {
	fake.describeInstanceStatusWithContextMutex.RLock()
	defer fake.describeInstanceStatusWithContextMutex.RUnlock()
	argsForCall := fake.describeInstanceStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeInstanceStatusWithContextReturns(result1 *ec2.DescribeInstanceStatusOutput, result2 error) {
	fake.describeInstanceStatusWithContextMutex.Lock()
	defer fake.describeInstanceStatusWithContextMutex.Unlock()
	fake.DescribeInstanceStatusWithContextStub = nil
	fake.describeInstanceStatusWithContextReturns = struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstanceStatusWithContextReturnsOnCall(i int, result1 *ec2.DescribeInstanceStatusOutput, result2 error) {
	fake.describeInstanceStatusWithContextMutex.Lock()
	defer fake.describeInstanceStatusWithContextMutex.Unlock()
	fake.DescribeInstanceStatusWithContextStub = nil
	if fake.describeInstanceStatusWithContextReturnsOnCall == nil {
		fake.describeInstanceStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstanceStatusOutput
			result2 error
		})
	}
	fake.describeInstanceStatusWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstances(arg1 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	fake.describeInstancesMutex.Lock()
	ret, specificReturn := fake.describeInstancesReturnsOnCall[len(fake.describeInstancesArgsForCall)]
	fake.describeInstancesArgsForCall = append(fake.describeInstancesArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeInstances", []interface{}{arg1})
	fake.describeInstancesMutex.Unlock()
	if fake.DescribeInstancesStub != nil {
		return fake.DescribeInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstancesCallCount() int {
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	return len(fake.describeInstancesArgsForCall)
}

func (fake *FakeEC2API) DescribeInstancesCalls(stub func(*ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)) {
	fake.describeInstancesMutex.Lock()
	defer fake.describeInstancesMutex.Unlock()
	fake.DescribeInstancesStub = stub
}

func (fake *FakeEC2API) DescribeInstancesArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	argsForCall := fake.describeInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstancesReturns(result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.describeInstancesMutex.Lock()
	defer fake.describeInstancesMutex.Unlock()
	fake.DescribeInstancesStub = nil
	fake.describeInstancesReturns = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstancesReturnsOnCall(i int, result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.describeInstancesMutex.Lock()
	defer fake.describeInstancesMutex.Unlock()
	fake.DescribeInstancesStub = nil
	if fake.describeInstancesReturnsOnCall == nil {
		fake.describeInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstancesOutput
			result2 error
		})
	}
	fake.describeInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstancesPages(arg1 *ec2.DescribeInstancesInput, arg2 func(*ec2.DescribeInstancesOutput, bool) bool) error {
	fake.describeInstancesPagesMutex.Lock()
	ret, specificReturn := fake.describeInstancesPagesReturnsOnCall[len(fake.describeInstancesPagesArgsForCall)]
	fake.describeInstancesPagesArgsForCall = append(fake.describeInstancesPagesArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
		arg2 func(*ec2.DescribeInstancesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeInstancesPages", []interface{}{arg1, arg2})
	fake.describeInstancesPagesMutex.Unlock()
	if fake.DescribeInstancesPagesStub != nil {
		return fake.DescribeInstancesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeInstancesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeInstancesPagesCallCount() int {
	fake.describeInstancesPagesMutex.RLock()
	defer fake.describeInstancesPagesMutex.RUnlock()
	return len(fake.describeInstancesPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeInstancesPagesCalls(stub func(*ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool) error) {
	fake.describeInstancesPagesMutex.Lock()
	defer fake.describeInstancesPagesMutex.Unlock()
	fake.DescribeInstancesPagesStub = stub
}

func (fake *FakeEC2API) DescribeInstancesPagesArgsForCall(i int) (*ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool) {
	fake.describeInstancesPagesMutex.RLock()
	defer fake.describeInstancesPagesMutex.RUnlock()
	argsForCall := fake.describeInstancesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeInstancesPagesReturns(result1 error) {
	fake.describeInstancesPagesMutex.Lock()
	defer fake.describeInstancesPagesMutex.Unlock()
	fake.DescribeInstancesPagesStub = nil
	fake.describeInstancesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstancesPagesReturnsOnCall(i int, result1 error) {
	fake.describeInstancesPagesMutex.Lock()
	defer fake.describeInstancesPagesMutex.Unlock()
	fake.DescribeInstancesPagesStub = nil
	if fake.describeInstancesPagesReturnsOnCall == nil {
		fake.describeInstancesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstancesPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstancesInput, arg3 func(*ec2.DescribeInstancesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeInstancesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancesPagesWithContextReturnsOnCall[len(fake.describeInstancesPagesWithContextArgsForCall)]
	fake.describeInstancesPagesWithContextArgsForCall = append(fake.describeInstancesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 func(*ec2.DescribeInstancesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeInstancesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeInstancesPagesWithContextMutex.Unlock()
	if fake.DescribeInstancesPagesWithContextStub != nil {
		return fake.DescribeInstancesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeInstancesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeInstancesPagesWithContextCallCount() int {
	fake.describeInstancesPagesWithContextMutex.RLock()
	defer fake.describeInstancesPagesWithContextMutex.RUnlock()
	return len(fake.describeInstancesPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInstancesPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool, ...request.Option) error) {
	fake.describeInstancesPagesWithContextMutex.Lock()
	defer fake.describeInstancesPagesWithContextMutex.Unlock()
	fake.DescribeInstancesPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInstancesPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool, []request.Option) {
	fake.describeInstancesPagesWithContextMutex.RLock()
	defer fake.describeInstancesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeInstancesPagesWithContextReturns(result1 error) {
	fake.describeInstancesPagesWithContextMutex.Lock()
	defer fake.describeInstancesPagesWithContextMutex.Unlock()
	fake.DescribeInstancesPagesWithContextStub = nil
	fake.describeInstancesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstancesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeInstancesPagesWithContextMutex.Lock()
	defer fake.describeInstancesPagesWithContextMutex.Unlock()
	fake.DescribeInstancesPagesWithContextStub = nil
	if fake.describeInstancesPagesWithContextReturnsOnCall == nil {
		fake.describeInstancesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeInstancesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeInstancesRequest(arg1 *ec2.DescribeInstancesInput) (*request.Request, *ec2.DescribeInstancesOutput) {
	fake.describeInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeInstancesRequestReturnsOnCall[len(fake.describeInstancesRequestArgsForCall)]
	fake.describeInstancesRequestArgsForCall = append(fake.describeInstancesRequestArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeInstancesRequest", []interface{}{arg1})
	fake.describeInstancesRequestMutex.Unlock()
	if fake.DescribeInstancesRequestStub != nil {
		return fake.DescribeInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstancesRequestCallCount() int {
	fake.describeInstancesRequestMutex.RLock()
	defer fake.describeInstancesRequestMutex.RUnlock()
	return len(fake.describeInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeInstancesRequestCalls(stub func(*ec2.DescribeInstancesInput) (*request.Request, *ec2.DescribeInstancesOutput)) {
	fake.describeInstancesRequestMutex.Lock()
	defer fake.describeInstancesRequestMutex.Unlock()
	fake.DescribeInstancesRequestStub = stub
}

func (fake *FakeEC2API) DescribeInstancesRequestArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.describeInstancesRequestMutex.RLock()
	defer fake.describeInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInstancesRequestReturns(result1 *request.Request, result2 *ec2.DescribeInstancesOutput) {
	fake.describeInstancesRequestMutex.Lock()
	defer fake.describeInstancesRequestMutex.Unlock()
	fake.DescribeInstancesRequestStub = nil
	fake.describeInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeInstancesOutput) {
	fake.describeInstancesRequestMutex.Lock()
	defer fake.describeInstancesRequestMutex.Unlock()
	fake.DescribeInstancesRequestStub = nil
	if fake.describeInstancesRequestReturnsOnCall == nil {
		fake.describeInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeInstancesOutput
		})
	}
	fake.describeInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstancesWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstancesInput, arg3 ...request.Option) (*ec2.DescribeInstancesOutput, error) {
	fake.describeInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeInstancesWithContextReturnsOnCall[len(fake.describeInstancesWithContextArgsForCall)]
	fake.describeInstancesWithContextArgsForCall = append(fake.describeInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInstancesWithContextMutex.Unlock()
	if fake.DescribeInstancesWithContextStub != nil {
		return fake.DescribeInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInstancesWithContextCallCount() int {
	fake.describeInstancesWithContextMutex.RLock()
	defer fake.describeInstancesWithContextMutex.RUnlock()
	return len(fake.describeInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInstancesWithContextCalls(stub func(aws.Context, *ec2.DescribeInstancesInput, ...request.Option) (*ec2.DescribeInstancesOutput, error)) {
	fake.describeInstancesWithContextMutex.Lock()
	defer fake.describeInstancesWithContextMutex.Unlock()
	fake.DescribeInstancesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstancesInput, []request.Option) {
	fake.describeInstancesWithContextMutex.RLock()
	defer fake.describeInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeInstancesWithContextReturns(result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.describeInstancesWithContextMutex.Lock()
	defer fake.describeInstancesWithContextMutex.Unlock()
	fake.DescribeInstancesWithContextStub = nil
	fake.describeInstancesWithContextReturns = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInstancesWithContextReturnsOnCall(i int, result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.describeInstancesWithContextMutex.Lock()
	defer fake.describeInstancesWithContextMutex.Unlock()
	fake.DescribeInstancesWithContextStub = nil
	if fake.describeInstancesWithContextReturnsOnCall == nil {
		fake.describeInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInstancesOutput
			result2 error
		})
	}
	fake.describeInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInternetGateways(arg1 *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	fake.describeInternetGatewaysMutex.Lock()
	ret, specificReturn := fake.describeInternetGatewaysReturnsOnCall[len(fake.describeInternetGatewaysArgsForCall)]
	fake.describeInternetGatewaysArgsForCall = append(fake.describeInternetGatewaysArgsForCall, struct {
		arg1 *ec2.DescribeInternetGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeInternetGateways", []interface{}{arg1})
	fake.describeInternetGatewaysMutex.Unlock()
	if fake.DescribeInternetGatewaysStub != nil {
		return fake.DescribeInternetGatewaysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInternetGatewaysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInternetGatewaysCallCount() int {
	fake.describeInternetGatewaysMutex.RLock()
	defer fake.describeInternetGatewaysMutex.RUnlock()
	return len(fake.describeInternetGatewaysArgsForCall)
}

func (fake *FakeEC2API) DescribeInternetGatewaysCalls(stub func(*ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error)) {
	fake.describeInternetGatewaysMutex.Lock()
	defer fake.describeInternetGatewaysMutex.Unlock()
	fake.DescribeInternetGatewaysStub = stub
}

func (fake *FakeEC2API) DescribeInternetGatewaysArgsForCall(i int) *ec2.DescribeInternetGatewaysInput {
	fake.describeInternetGatewaysMutex.RLock()
	defer fake.describeInternetGatewaysMutex.RUnlock()
	argsForCall := fake.describeInternetGatewaysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInternetGatewaysReturns(result1 *ec2.DescribeInternetGatewaysOutput, result2 error) {
	fake.describeInternetGatewaysMutex.Lock()
	defer fake.describeInternetGatewaysMutex.Unlock()
	fake.DescribeInternetGatewaysStub = nil
	fake.describeInternetGatewaysReturns = struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInternetGatewaysReturnsOnCall(i int, result1 *ec2.DescribeInternetGatewaysOutput, result2 error) {
	fake.describeInternetGatewaysMutex.Lock()
	defer fake.describeInternetGatewaysMutex.Unlock()
	fake.DescribeInternetGatewaysStub = nil
	if fake.describeInternetGatewaysReturnsOnCall == nil {
		fake.describeInternetGatewaysReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInternetGatewaysOutput
			result2 error
		})
	}
	fake.describeInternetGatewaysReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInternetGatewaysRequest(arg1 *ec2.DescribeInternetGatewaysInput) (*request.Request, *ec2.DescribeInternetGatewaysOutput) {
	fake.describeInternetGatewaysRequestMutex.Lock()
	ret, specificReturn := fake.describeInternetGatewaysRequestReturnsOnCall[len(fake.describeInternetGatewaysRequestArgsForCall)]
	fake.describeInternetGatewaysRequestArgsForCall = append(fake.describeInternetGatewaysRequestArgsForCall, struct {
		arg1 *ec2.DescribeInternetGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeInternetGatewaysRequest", []interface{}{arg1})
	fake.describeInternetGatewaysRequestMutex.Unlock()
	if fake.DescribeInternetGatewaysRequestStub != nil {
		return fake.DescribeInternetGatewaysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInternetGatewaysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInternetGatewaysRequestCallCount() int {
	fake.describeInternetGatewaysRequestMutex.RLock()
	defer fake.describeInternetGatewaysRequestMutex.RUnlock()
	return len(fake.describeInternetGatewaysRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeInternetGatewaysRequestCalls(stub func(*ec2.DescribeInternetGatewaysInput) (*request.Request, *ec2.DescribeInternetGatewaysOutput)) {
	fake.describeInternetGatewaysRequestMutex.Lock()
	defer fake.describeInternetGatewaysRequestMutex.Unlock()
	fake.DescribeInternetGatewaysRequestStub = stub
}

func (fake *FakeEC2API) DescribeInternetGatewaysRequestArgsForCall(i int) *ec2.DescribeInternetGatewaysInput {
	fake.describeInternetGatewaysRequestMutex.RLock()
	defer fake.describeInternetGatewaysRequestMutex.RUnlock()
	argsForCall := fake.describeInternetGatewaysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeInternetGatewaysRequestReturns(result1 *request.Request, result2 *ec2.DescribeInternetGatewaysOutput) {
	fake.describeInternetGatewaysRequestMutex.Lock()
	defer fake.describeInternetGatewaysRequestMutex.Unlock()
	fake.DescribeInternetGatewaysRequestStub = nil
	fake.describeInternetGatewaysRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeInternetGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInternetGatewaysRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeInternetGatewaysOutput) {
	fake.describeInternetGatewaysRequestMutex.Lock()
	defer fake.describeInternetGatewaysRequestMutex.Unlock()
	fake.DescribeInternetGatewaysRequestStub = nil
	if fake.describeInternetGatewaysRequestReturnsOnCall == nil {
		fake.describeInternetGatewaysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeInternetGatewaysOutput
		})
	}
	fake.describeInternetGatewaysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeInternetGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInternetGatewaysWithContext(arg1 aws.Context, arg2 *ec2.DescribeInternetGatewaysInput, arg3 ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error) {
	fake.describeInternetGatewaysWithContextMutex.Lock()
	ret, specificReturn := fake.describeInternetGatewaysWithContextReturnsOnCall[len(fake.describeInternetGatewaysWithContextArgsForCall)]
	fake.describeInternetGatewaysWithContextArgsForCall = append(fake.describeInternetGatewaysWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInternetGatewaysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeInternetGatewaysWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeInternetGatewaysWithContextMutex.Unlock()
	if fake.DescribeInternetGatewaysWithContextStub != nil {
		return fake.DescribeInternetGatewaysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeInternetGatewaysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeInternetGatewaysWithContextCallCount() int {
	fake.describeInternetGatewaysWithContextMutex.RLock()
	defer fake.describeInternetGatewaysWithContextMutex.RUnlock()
	return len(fake.describeInternetGatewaysWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeInternetGatewaysWithContextCalls(stub func(aws.Context, *ec2.DescribeInternetGatewaysInput, ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error)) {
	fake.describeInternetGatewaysWithContextMutex.Lock()
	defer fake.describeInternetGatewaysWithContextMutex.Unlock()
	fake.DescribeInternetGatewaysWithContextStub = stub
}

func (fake *FakeEC2API) DescribeInternetGatewaysWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInternetGatewaysInput, []request.Option) {
	fake.describeInternetGatewaysWithContextMutex.RLock()
	defer fake.describeInternetGatewaysWithContextMutex.RUnlock()
	argsForCall := fake.describeInternetGatewaysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeInternetGatewaysWithContextReturns(result1 *ec2.DescribeInternetGatewaysOutput, result2 error) {
	fake.describeInternetGatewaysWithContextMutex.Lock()
	defer fake.describeInternetGatewaysWithContextMutex.Unlock()
	fake.DescribeInternetGatewaysWithContextStub = nil
	fake.describeInternetGatewaysWithContextReturns = struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeInternetGatewaysWithContextReturnsOnCall(i int, result1 *ec2.DescribeInternetGatewaysOutput, result2 error) {
	fake.describeInternetGatewaysWithContextMutex.Lock()
	defer fake.describeInternetGatewaysWithContextMutex.Unlock()
	fake.DescribeInternetGatewaysWithContextStub = nil
	if fake.describeInternetGatewaysWithContextReturnsOnCall == nil {
		fake.describeInternetGatewaysWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeInternetGatewaysOutput
			result2 error
		})
	}
	fake.describeInternetGatewaysWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeInternetGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeKeyPairs(arg1 *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	fake.describeKeyPairsMutex.Lock()
	ret, specificReturn := fake.describeKeyPairsReturnsOnCall[len(fake.describeKeyPairsArgsForCall)]
	fake.describeKeyPairsArgsForCall = append(fake.describeKeyPairsArgsForCall, struct {
		arg1 *ec2.DescribeKeyPairsInput
	}{arg1})
	fake.recordInvocation("DescribeKeyPairs", []interface{}{arg1})
	fake.describeKeyPairsMutex.Unlock()
	if fake.DescribeKeyPairsStub != nil {
		return fake.DescribeKeyPairsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeKeyPairsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeKeyPairsCallCount() int {
	fake.describeKeyPairsMutex.RLock()
	defer fake.describeKeyPairsMutex.RUnlock()
	return len(fake.describeKeyPairsArgsForCall)
}

func (fake *FakeEC2API) DescribeKeyPairsCalls(stub func(*ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error)) {
	fake.describeKeyPairsMutex.Lock()
	defer fake.describeKeyPairsMutex.Unlock()
	fake.DescribeKeyPairsStub = stub
}

func (fake *FakeEC2API) DescribeKeyPairsArgsForCall(i int) *ec2.DescribeKeyPairsInput {
	fake.describeKeyPairsMutex.RLock()
	defer fake.describeKeyPairsMutex.RUnlock()
	argsForCall := fake.describeKeyPairsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeKeyPairsReturns(result1 *ec2.DescribeKeyPairsOutput, result2 error) {
	fake.describeKeyPairsMutex.Lock()
	defer fake.describeKeyPairsMutex.Unlock()
	fake.DescribeKeyPairsStub = nil
	fake.describeKeyPairsReturns = struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeKeyPairsReturnsOnCall(i int, result1 *ec2.DescribeKeyPairsOutput, result2 error) {
	fake.describeKeyPairsMutex.Lock()
	defer fake.describeKeyPairsMutex.Unlock()
	fake.DescribeKeyPairsStub = nil
	if fake.describeKeyPairsReturnsOnCall == nil {
		fake.describeKeyPairsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeKeyPairsOutput
			result2 error
		})
	}
	fake.describeKeyPairsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeKeyPairsRequest(arg1 *ec2.DescribeKeyPairsInput) (*request.Request, *ec2.DescribeKeyPairsOutput) {
	fake.describeKeyPairsRequestMutex.Lock()
	ret, specificReturn := fake.describeKeyPairsRequestReturnsOnCall[len(fake.describeKeyPairsRequestArgsForCall)]
	fake.describeKeyPairsRequestArgsForCall = append(fake.describeKeyPairsRequestArgsForCall, struct {
		arg1 *ec2.DescribeKeyPairsInput
	}{arg1})
	fake.recordInvocation("DescribeKeyPairsRequest", []interface{}{arg1})
	fake.describeKeyPairsRequestMutex.Unlock()
	if fake.DescribeKeyPairsRequestStub != nil {
		return fake.DescribeKeyPairsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeKeyPairsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeKeyPairsRequestCallCount() int {
	fake.describeKeyPairsRequestMutex.RLock()
	defer fake.describeKeyPairsRequestMutex.RUnlock()
	return len(fake.describeKeyPairsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeKeyPairsRequestCalls(stub func(*ec2.DescribeKeyPairsInput) (*request.Request, *ec2.DescribeKeyPairsOutput)) {
	fake.describeKeyPairsRequestMutex.Lock()
	defer fake.describeKeyPairsRequestMutex.Unlock()
	fake.DescribeKeyPairsRequestStub = stub
}

func (fake *FakeEC2API) DescribeKeyPairsRequestArgsForCall(i int) *ec2.DescribeKeyPairsInput {
	fake.describeKeyPairsRequestMutex.RLock()
	defer fake.describeKeyPairsRequestMutex.RUnlock()
	argsForCall := fake.describeKeyPairsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeKeyPairsRequestReturns(result1 *request.Request, result2 *ec2.DescribeKeyPairsOutput) {
	fake.describeKeyPairsRequestMutex.Lock()
	defer fake.describeKeyPairsRequestMutex.Unlock()
	fake.DescribeKeyPairsRequestStub = nil
	fake.describeKeyPairsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeKeyPairsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeKeyPairsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeKeyPairsOutput) {
	fake.describeKeyPairsRequestMutex.Lock()
	defer fake.describeKeyPairsRequestMutex.Unlock()
	fake.DescribeKeyPairsRequestStub = nil
	if fake.describeKeyPairsRequestReturnsOnCall == nil {
		fake.describeKeyPairsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeKeyPairsOutput
		})
	}
	fake.describeKeyPairsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeKeyPairsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeKeyPairsWithContext(arg1 aws.Context, arg2 *ec2.DescribeKeyPairsInput, arg3 ...request.Option) (*ec2.DescribeKeyPairsOutput, error) {
	fake.describeKeyPairsWithContextMutex.Lock()
	ret, specificReturn := fake.describeKeyPairsWithContextReturnsOnCall[len(fake.describeKeyPairsWithContextArgsForCall)]
	fake.describeKeyPairsWithContextArgsForCall = append(fake.describeKeyPairsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeKeyPairsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeKeyPairsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeKeyPairsWithContextMutex.Unlock()
	if fake.DescribeKeyPairsWithContextStub != nil {
		return fake.DescribeKeyPairsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeKeyPairsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeKeyPairsWithContextCallCount() int {
	fake.describeKeyPairsWithContextMutex.RLock()
	defer fake.describeKeyPairsWithContextMutex.RUnlock()
	return len(fake.describeKeyPairsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeKeyPairsWithContextCalls(stub func(aws.Context, *ec2.DescribeKeyPairsInput, ...request.Option) (*ec2.DescribeKeyPairsOutput, error)) {
	fake.describeKeyPairsWithContextMutex.Lock()
	defer fake.describeKeyPairsWithContextMutex.Unlock()
	fake.DescribeKeyPairsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeKeyPairsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeKeyPairsInput, []request.Option) {
	fake.describeKeyPairsWithContextMutex.RLock()
	defer fake.describeKeyPairsWithContextMutex.RUnlock()
	argsForCall := fake.describeKeyPairsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeKeyPairsWithContextReturns(result1 *ec2.DescribeKeyPairsOutput, result2 error) {
	fake.describeKeyPairsWithContextMutex.Lock()
	defer fake.describeKeyPairsWithContextMutex.Unlock()
	fake.DescribeKeyPairsWithContextStub = nil
	fake.describeKeyPairsWithContextReturns = struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeKeyPairsWithContextReturnsOnCall(i int, result1 *ec2.DescribeKeyPairsOutput, result2 error) {
	fake.describeKeyPairsWithContextMutex.Lock()
	defer fake.describeKeyPairsWithContextMutex.Unlock()
	fake.DescribeKeyPairsWithContextStub = nil
	if fake.describeKeyPairsWithContextReturnsOnCall == nil {
		fake.describeKeyPairsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeKeyPairsOutput
			result2 error
		})
	}
	fake.describeKeyPairsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeKeyPairsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersions(arg1 *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	fake.describeLaunchTemplateVersionsMutex.Lock()
	ret, specificReturn := fake.describeLaunchTemplateVersionsReturnsOnCall[len(fake.describeLaunchTemplateVersionsArgsForCall)]
	fake.describeLaunchTemplateVersionsArgsForCall = append(fake.describeLaunchTemplateVersionsArgsForCall, struct {
		arg1 *ec2.DescribeLaunchTemplateVersionsInput
	}{arg1})
	fake.recordInvocation("DescribeLaunchTemplateVersions", []interface{}{arg1})
	fake.describeLaunchTemplateVersionsMutex.Unlock()
	if fake.DescribeLaunchTemplateVersionsStub != nil {
		return fake.DescribeLaunchTemplateVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLaunchTemplateVersionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsCallCount() int {
	fake.describeLaunchTemplateVersionsMutex.RLock()
	defer fake.describeLaunchTemplateVersionsMutex.RUnlock()
	return len(fake.describeLaunchTemplateVersionsArgsForCall)
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsCalls(stub func(*ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error)) {
	fake.describeLaunchTemplateVersionsMutex.Lock()
	defer fake.describeLaunchTemplateVersionsMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsStub = stub
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsArgsForCall(i int) *ec2.DescribeLaunchTemplateVersionsInput {
	fake.describeLaunchTemplateVersionsMutex.RLock()
	defer fake.describeLaunchTemplateVersionsMutex.RUnlock()
	argsForCall := fake.describeLaunchTemplateVersionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsReturns(result1 *ec2.DescribeLaunchTemplateVersionsOutput, result2 error) {
	fake.describeLaunchTemplateVersionsMutex.Lock()
	defer fake.describeLaunchTemplateVersionsMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsStub = nil
	fake.describeLaunchTemplateVersionsReturns = struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsReturnsOnCall(i int, result1 *ec2.DescribeLaunchTemplateVersionsOutput, result2 error) {
	fake.describeLaunchTemplateVersionsMutex.Lock()
	defer fake.describeLaunchTemplateVersionsMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsStub = nil
	if fake.describeLaunchTemplateVersionsReturnsOnCall == nil {
		fake.describeLaunchTemplateVersionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeLaunchTemplateVersionsOutput
			result2 error
		})
	}
	fake.describeLaunchTemplateVersionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsRequest(arg1 *ec2.DescribeLaunchTemplateVersionsInput) (*request.Request, *ec2.DescribeLaunchTemplateVersionsOutput) {
	fake.describeLaunchTemplateVersionsRequestMutex.Lock()
	ret, specificReturn := fake.describeLaunchTemplateVersionsRequestReturnsOnCall[len(fake.describeLaunchTemplateVersionsRequestArgsForCall)]
	fake.describeLaunchTemplateVersionsRequestArgsForCall = append(fake.describeLaunchTemplateVersionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeLaunchTemplateVersionsInput
	}{arg1})
	fake.recordInvocation("DescribeLaunchTemplateVersionsRequest", []interface{}{arg1})
	fake.describeLaunchTemplateVersionsRequestMutex.Unlock()
	if fake.DescribeLaunchTemplateVersionsRequestStub != nil {
		return fake.DescribeLaunchTemplateVersionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLaunchTemplateVersionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsRequestCallCount() int {
	fake.describeLaunchTemplateVersionsRequestMutex.RLock()
	defer fake.describeLaunchTemplateVersionsRequestMutex.RUnlock()
	return len(fake.describeLaunchTemplateVersionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsRequestCalls(stub func(*ec2.DescribeLaunchTemplateVersionsInput) (*request.Request, *ec2.DescribeLaunchTemplateVersionsOutput)) {
	fake.describeLaunchTemplateVersionsRequestMutex.Lock()
	defer fake.describeLaunchTemplateVersionsRequestMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsRequestArgsForCall(i int) *ec2.DescribeLaunchTemplateVersionsInput {
	fake.describeLaunchTemplateVersionsRequestMutex.RLock()
	defer fake.describeLaunchTemplateVersionsRequestMutex.RUnlock()
	argsForCall := fake.describeLaunchTemplateVersionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeLaunchTemplateVersionsOutput) {
	fake.describeLaunchTemplateVersionsRequestMutex.Lock()
	defer fake.describeLaunchTemplateVersionsRequestMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsRequestStub = nil
	fake.describeLaunchTemplateVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplateVersionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeLaunchTemplateVersionsOutput) {
	fake.describeLaunchTemplateVersionsRequestMutex.Lock()
	defer fake.describeLaunchTemplateVersionsRequestMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsRequestStub = nil
	if fake.describeLaunchTemplateVersionsRequestReturnsOnCall == nil {
		fake.describeLaunchTemplateVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeLaunchTemplateVersionsOutput
		})
	}
	fake.describeLaunchTemplateVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplateVersionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeLaunchTemplateVersionsInput, arg3 ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	fake.describeLaunchTemplateVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeLaunchTemplateVersionsWithContextReturnsOnCall[len(fake.describeLaunchTemplateVersionsWithContextArgsForCall)]
	fake.describeLaunchTemplateVersionsWithContextArgsForCall = append(fake.describeLaunchTemplateVersionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeLaunchTemplateVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeLaunchTemplateVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeLaunchTemplateVersionsWithContextMutex.Unlock()
	if fake.DescribeLaunchTemplateVersionsWithContextStub != nil {
		return fake.DescribeLaunchTemplateVersionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLaunchTemplateVersionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsWithContextCallCount() int {
	fake.describeLaunchTemplateVersionsWithContextMutex.RLock()
	defer fake.describeLaunchTemplateVersionsWithContextMutex.RUnlock()
	return len(fake.describeLaunchTemplateVersionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsWithContextCalls(stub func(aws.Context, *ec2.DescribeLaunchTemplateVersionsInput, ...request.Option) (*ec2.DescribeLaunchTemplateVersionsOutput, error)) {
	fake.describeLaunchTemplateVersionsWithContextMutex.Lock()
	defer fake.describeLaunchTemplateVersionsWithContextMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeLaunchTemplateVersionsInput, []request.Option) {
	fake.describeLaunchTemplateVersionsWithContextMutex.RLock()
	defer fake.describeLaunchTemplateVersionsWithContextMutex.RUnlock()
	argsForCall := fake.describeLaunchTemplateVersionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsWithContextReturns(result1 *ec2.DescribeLaunchTemplateVersionsOutput, result2 error) {
	fake.describeLaunchTemplateVersionsWithContextMutex.Lock()
	defer fake.describeLaunchTemplateVersionsWithContextMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsWithContextStub = nil
	fake.describeLaunchTemplateVersionsWithContextReturns = struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplateVersionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeLaunchTemplateVersionsOutput, result2 error) {
	fake.describeLaunchTemplateVersionsWithContextMutex.Lock()
	defer fake.describeLaunchTemplateVersionsWithContextMutex.Unlock()
	fake.DescribeLaunchTemplateVersionsWithContextStub = nil
	if fake.describeLaunchTemplateVersionsWithContextReturnsOnCall == nil {
		fake.describeLaunchTemplateVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeLaunchTemplateVersionsOutput
			result2 error
		})
	}
	fake.describeLaunchTemplateVersionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeLaunchTemplateVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplates(arg1 *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error) {
	fake.describeLaunchTemplatesMutex.Lock()
	ret, specificReturn := fake.describeLaunchTemplatesReturnsOnCall[len(fake.describeLaunchTemplatesArgsForCall)]
	fake.describeLaunchTemplatesArgsForCall = append(fake.describeLaunchTemplatesArgsForCall, struct {
		arg1 *ec2.DescribeLaunchTemplatesInput
	}{arg1})
	fake.recordInvocation("DescribeLaunchTemplates", []interface{}{arg1})
	fake.describeLaunchTemplatesMutex.Unlock()
	if fake.DescribeLaunchTemplatesStub != nil {
		return fake.DescribeLaunchTemplatesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLaunchTemplatesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeLaunchTemplatesCallCount() int {
	fake.describeLaunchTemplatesMutex.RLock()
	defer fake.describeLaunchTemplatesMutex.RUnlock()
	return len(fake.describeLaunchTemplatesArgsForCall)
}

func (fake *FakeEC2API) DescribeLaunchTemplatesCalls(stub func(*ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error)) {
	fake.describeLaunchTemplatesMutex.Lock()
	defer fake.describeLaunchTemplatesMutex.Unlock()
	fake.DescribeLaunchTemplatesStub = stub
}

func (fake *FakeEC2API) DescribeLaunchTemplatesArgsForCall(i int) *ec2.DescribeLaunchTemplatesInput {
	fake.describeLaunchTemplatesMutex.RLock()
	defer fake.describeLaunchTemplatesMutex.RUnlock()
	argsForCall := fake.describeLaunchTemplatesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeLaunchTemplatesReturns(result1 *ec2.DescribeLaunchTemplatesOutput, result2 error) {
	fake.describeLaunchTemplatesMutex.Lock()
	defer fake.describeLaunchTemplatesMutex.Unlock()
	fake.DescribeLaunchTemplatesStub = nil
	fake.describeLaunchTemplatesReturns = struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplatesReturnsOnCall(i int, result1 *ec2.DescribeLaunchTemplatesOutput, result2 error) {
	fake.describeLaunchTemplatesMutex.Lock()
	defer fake.describeLaunchTemplatesMutex.Unlock()
	fake.DescribeLaunchTemplatesStub = nil
	if fake.describeLaunchTemplatesReturnsOnCall == nil {
		fake.describeLaunchTemplatesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeLaunchTemplatesOutput
			result2 error
		})
	}
	fake.describeLaunchTemplatesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplatesRequest(arg1 *ec2.DescribeLaunchTemplatesInput) (*request.Request, *ec2.DescribeLaunchTemplatesOutput) {
	fake.describeLaunchTemplatesRequestMutex.Lock()
	ret, specificReturn := fake.describeLaunchTemplatesRequestReturnsOnCall[len(fake.describeLaunchTemplatesRequestArgsForCall)]
	fake.describeLaunchTemplatesRequestArgsForCall = append(fake.describeLaunchTemplatesRequestArgsForCall, struct {
		arg1 *ec2.DescribeLaunchTemplatesInput
	}{arg1})
	fake.recordInvocation("DescribeLaunchTemplatesRequest", []interface{}{arg1})
	fake.describeLaunchTemplatesRequestMutex.Unlock()
	if fake.DescribeLaunchTemplatesRequestStub != nil {
		return fake.DescribeLaunchTemplatesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLaunchTemplatesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeLaunchTemplatesRequestCallCount() int {
	fake.describeLaunchTemplatesRequestMutex.RLock()
	defer fake.describeLaunchTemplatesRequestMutex.RUnlock()
	return len(fake.describeLaunchTemplatesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeLaunchTemplatesRequestCalls(stub func(*ec2.DescribeLaunchTemplatesInput) (*request.Request, *ec2.DescribeLaunchTemplatesOutput)) {
	fake.describeLaunchTemplatesRequestMutex.Lock()
	defer fake.describeLaunchTemplatesRequestMutex.Unlock()
	fake.DescribeLaunchTemplatesRequestStub = stub
}

func (fake *FakeEC2API) DescribeLaunchTemplatesRequestArgsForCall(i int) *ec2.DescribeLaunchTemplatesInput {
	fake.describeLaunchTemplatesRequestMutex.RLock()
	defer fake.describeLaunchTemplatesRequestMutex.RUnlock()
	argsForCall := fake.describeLaunchTemplatesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeLaunchTemplatesRequestReturns(result1 *request.Request, result2 *ec2.DescribeLaunchTemplatesOutput) {
	fake.describeLaunchTemplatesRequestMutex.Lock()
	defer fake.describeLaunchTemplatesRequestMutex.Unlock()
	fake.DescribeLaunchTemplatesRequestStub = nil
	fake.describeLaunchTemplatesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplatesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplatesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeLaunchTemplatesOutput) {
	fake.describeLaunchTemplatesRequestMutex.Lock()
	defer fake.describeLaunchTemplatesRequestMutex.Unlock()
	fake.DescribeLaunchTemplatesRequestStub = nil
	if fake.describeLaunchTemplatesRequestReturnsOnCall == nil {
		fake.describeLaunchTemplatesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeLaunchTemplatesOutput
		})
	}
	fake.describeLaunchTemplatesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeLaunchTemplatesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplatesWithContext(arg1 aws.Context, arg2 *ec2.DescribeLaunchTemplatesInput, arg3 ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error) {
	fake.describeLaunchTemplatesWithContextMutex.Lock()
	ret, specificReturn := fake.describeLaunchTemplatesWithContextReturnsOnCall[len(fake.describeLaunchTemplatesWithContextArgsForCall)]
	fake.describeLaunchTemplatesWithContextArgsForCall = append(fake.describeLaunchTemplatesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeLaunchTemplatesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeLaunchTemplatesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeLaunchTemplatesWithContextMutex.Unlock()
	if fake.DescribeLaunchTemplatesWithContextStub != nil {
		return fake.DescribeLaunchTemplatesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeLaunchTemplatesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeLaunchTemplatesWithContextCallCount() int {
	fake.describeLaunchTemplatesWithContextMutex.RLock()
	defer fake.describeLaunchTemplatesWithContextMutex.RUnlock()
	return len(fake.describeLaunchTemplatesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeLaunchTemplatesWithContextCalls(stub func(aws.Context, *ec2.DescribeLaunchTemplatesInput, ...request.Option) (*ec2.DescribeLaunchTemplatesOutput, error)) {
	fake.describeLaunchTemplatesWithContextMutex.Lock()
	defer fake.describeLaunchTemplatesWithContextMutex.Unlock()
	fake.DescribeLaunchTemplatesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeLaunchTemplatesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeLaunchTemplatesInput, []request.Option) {
	fake.describeLaunchTemplatesWithContextMutex.RLock()
	defer fake.describeLaunchTemplatesWithContextMutex.RUnlock()
	argsForCall := fake.describeLaunchTemplatesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeLaunchTemplatesWithContextReturns(result1 *ec2.DescribeLaunchTemplatesOutput, result2 error) {
	fake.describeLaunchTemplatesWithContextMutex.Lock()
	defer fake.describeLaunchTemplatesWithContextMutex.Unlock()
	fake.DescribeLaunchTemplatesWithContextStub = nil
	fake.describeLaunchTemplatesWithContextReturns = struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeLaunchTemplatesWithContextReturnsOnCall(i int, result1 *ec2.DescribeLaunchTemplatesOutput, result2 error) {
	fake.describeLaunchTemplatesWithContextMutex.Lock()
	defer fake.describeLaunchTemplatesWithContextMutex.Unlock()
	fake.DescribeLaunchTemplatesWithContextStub = nil
	if fake.describeLaunchTemplatesWithContextReturnsOnCall == nil {
		fake.describeLaunchTemplatesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeLaunchTemplatesOutput
			result2 error
		})
	}
	fake.describeLaunchTemplatesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeLaunchTemplatesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeMovingAddresses(arg1 *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	fake.describeMovingAddressesMutex.Lock()
	ret, specificReturn := fake.describeMovingAddressesReturnsOnCall[len(fake.describeMovingAddressesArgsForCall)]
	fake.describeMovingAddressesArgsForCall = append(fake.describeMovingAddressesArgsForCall, struct {
		arg1 *ec2.DescribeMovingAddressesInput
	}{arg1})
	fake.recordInvocation("DescribeMovingAddresses", []interface{}{arg1})
	fake.describeMovingAddressesMutex.Unlock()
	if fake.DescribeMovingAddressesStub != nil {
		return fake.DescribeMovingAddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeMovingAddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeMovingAddressesCallCount() int {
	fake.describeMovingAddressesMutex.RLock()
	defer fake.describeMovingAddressesMutex.RUnlock()
	return len(fake.describeMovingAddressesArgsForCall)
}

func (fake *FakeEC2API) DescribeMovingAddressesCalls(stub func(*ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error)) {
	fake.describeMovingAddressesMutex.Lock()
	defer fake.describeMovingAddressesMutex.Unlock()
	fake.DescribeMovingAddressesStub = stub
}

func (fake *FakeEC2API) DescribeMovingAddressesArgsForCall(i int) *ec2.DescribeMovingAddressesInput {
	fake.describeMovingAddressesMutex.RLock()
	defer fake.describeMovingAddressesMutex.RUnlock()
	argsForCall := fake.describeMovingAddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeMovingAddressesReturns(result1 *ec2.DescribeMovingAddressesOutput, result2 error) {
	fake.describeMovingAddressesMutex.Lock()
	defer fake.describeMovingAddressesMutex.Unlock()
	fake.DescribeMovingAddressesStub = nil
	fake.describeMovingAddressesReturns = struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeMovingAddressesReturnsOnCall(i int, result1 *ec2.DescribeMovingAddressesOutput, result2 error) {
	fake.describeMovingAddressesMutex.Lock()
	defer fake.describeMovingAddressesMutex.Unlock()
	fake.DescribeMovingAddressesStub = nil
	if fake.describeMovingAddressesReturnsOnCall == nil {
		fake.describeMovingAddressesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeMovingAddressesOutput
			result2 error
		})
	}
	fake.describeMovingAddressesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeMovingAddressesRequest(arg1 *ec2.DescribeMovingAddressesInput) (*request.Request, *ec2.DescribeMovingAddressesOutput) {
	fake.describeMovingAddressesRequestMutex.Lock()
	ret, specificReturn := fake.describeMovingAddressesRequestReturnsOnCall[len(fake.describeMovingAddressesRequestArgsForCall)]
	fake.describeMovingAddressesRequestArgsForCall = append(fake.describeMovingAddressesRequestArgsForCall, struct {
		arg1 *ec2.DescribeMovingAddressesInput
	}{arg1})
	fake.recordInvocation("DescribeMovingAddressesRequest", []interface{}{arg1})
	fake.describeMovingAddressesRequestMutex.Unlock()
	if fake.DescribeMovingAddressesRequestStub != nil {
		return fake.DescribeMovingAddressesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeMovingAddressesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeMovingAddressesRequestCallCount() int {
	fake.describeMovingAddressesRequestMutex.RLock()
	defer fake.describeMovingAddressesRequestMutex.RUnlock()
	return len(fake.describeMovingAddressesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeMovingAddressesRequestCalls(stub func(*ec2.DescribeMovingAddressesInput) (*request.Request, *ec2.DescribeMovingAddressesOutput)) {
	fake.describeMovingAddressesRequestMutex.Lock()
	defer fake.describeMovingAddressesRequestMutex.Unlock()
	fake.DescribeMovingAddressesRequestStub = stub
}

func (fake *FakeEC2API) DescribeMovingAddressesRequestArgsForCall(i int) *ec2.DescribeMovingAddressesInput {
	fake.describeMovingAddressesRequestMutex.RLock()
	defer fake.describeMovingAddressesRequestMutex.RUnlock()
	argsForCall := fake.describeMovingAddressesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeMovingAddressesRequestReturns(result1 *request.Request, result2 *ec2.DescribeMovingAddressesOutput) {
	fake.describeMovingAddressesRequestMutex.Lock()
	defer fake.describeMovingAddressesRequestMutex.Unlock()
	fake.DescribeMovingAddressesRequestStub = nil
	fake.describeMovingAddressesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeMovingAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeMovingAddressesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeMovingAddressesOutput) {
	fake.describeMovingAddressesRequestMutex.Lock()
	defer fake.describeMovingAddressesRequestMutex.Unlock()
	fake.DescribeMovingAddressesRequestStub = nil
	if fake.describeMovingAddressesRequestReturnsOnCall == nil {
		fake.describeMovingAddressesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeMovingAddressesOutput
		})
	}
	fake.describeMovingAddressesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeMovingAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeMovingAddressesWithContext(arg1 aws.Context, arg2 *ec2.DescribeMovingAddressesInput, arg3 ...request.Option) (*ec2.DescribeMovingAddressesOutput, error) {
	fake.describeMovingAddressesWithContextMutex.Lock()
	ret, specificReturn := fake.describeMovingAddressesWithContextReturnsOnCall[len(fake.describeMovingAddressesWithContextArgsForCall)]
	fake.describeMovingAddressesWithContextArgsForCall = append(fake.describeMovingAddressesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeMovingAddressesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeMovingAddressesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeMovingAddressesWithContextMutex.Unlock()
	if fake.DescribeMovingAddressesWithContextStub != nil {
		return fake.DescribeMovingAddressesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeMovingAddressesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeMovingAddressesWithContextCallCount() int {
	fake.describeMovingAddressesWithContextMutex.RLock()
	defer fake.describeMovingAddressesWithContextMutex.RUnlock()
	return len(fake.describeMovingAddressesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeMovingAddressesWithContextCalls(stub func(aws.Context, *ec2.DescribeMovingAddressesInput, ...request.Option) (*ec2.DescribeMovingAddressesOutput, error)) {
	fake.describeMovingAddressesWithContextMutex.Lock()
	defer fake.describeMovingAddressesWithContextMutex.Unlock()
	fake.DescribeMovingAddressesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeMovingAddressesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeMovingAddressesInput, []request.Option) {
	fake.describeMovingAddressesWithContextMutex.RLock()
	defer fake.describeMovingAddressesWithContextMutex.RUnlock()
	argsForCall := fake.describeMovingAddressesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeMovingAddressesWithContextReturns(result1 *ec2.DescribeMovingAddressesOutput, result2 error) {
	fake.describeMovingAddressesWithContextMutex.Lock()
	defer fake.describeMovingAddressesWithContextMutex.Unlock()
	fake.DescribeMovingAddressesWithContextStub = nil
	fake.describeMovingAddressesWithContextReturns = struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeMovingAddressesWithContextReturnsOnCall(i int, result1 *ec2.DescribeMovingAddressesOutput, result2 error) {
	fake.describeMovingAddressesWithContextMutex.Lock()
	defer fake.describeMovingAddressesWithContextMutex.Unlock()
	fake.DescribeMovingAddressesWithContextStub = nil
	if fake.describeMovingAddressesWithContextReturnsOnCall == nil {
		fake.describeMovingAddressesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeMovingAddressesOutput
			result2 error
		})
	}
	fake.describeMovingAddressesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeMovingAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNatGateways(arg1 *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
	fake.describeNatGatewaysMutex.Lock()
	ret, specificReturn := fake.describeNatGatewaysReturnsOnCall[len(fake.describeNatGatewaysArgsForCall)]
	fake.describeNatGatewaysArgsForCall = append(fake.describeNatGatewaysArgsForCall, struct {
		arg1 *ec2.DescribeNatGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeNatGateways", []interface{}{arg1})
	fake.describeNatGatewaysMutex.Unlock()
	if fake.DescribeNatGatewaysStub != nil {
		return fake.DescribeNatGatewaysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNatGatewaysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNatGatewaysCallCount() int {
	fake.describeNatGatewaysMutex.RLock()
	defer fake.describeNatGatewaysMutex.RUnlock()
	return len(fake.describeNatGatewaysArgsForCall)
}

func (fake *FakeEC2API) DescribeNatGatewaysCalls(stub func(*ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error)) {
	fake.describeNatGatewaysMutex.Lock()
	defer fake.describeNatGatewaysMutex.Unlock()
	fake.DescribeNatGatewaysStub = stub
}

func (fake *FakeEC2API) DescribeNatGatewaysArgsForCall(i int) *ec2.DescribeNatGatewaysInput {
	fake.describeNatGatewaysMutex.RLock()
	defer fake.describeNatGatewaysMutex.RUnlock()
	argsForCall := fake.describeNatGatewaysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNatGatewaysReturns(result1 *ec2.DescribeNatGatewaysOutput, result2 error) {
	fake.describeNatGatewaysMutex.Lock()
	defer fake.describeNatGatewaysMutex.Unlock()
	fake.DescribeNatGatewaysStub = nil
	fake.describeNatGatewaysReturns = struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNatGatewaysReturnsOnCall(i int, result1 *ec2.DescribeNatGatewaysOutput, result2 error) {
	fake.describeNatGatewaysMutex.Lock()
	defer fake.describeNatGatewaysMutex.Unlock()
	fake.DescribeNatGatewaysStub = nil
	if fake.describeNatGatewaysReturnsOnCall == nil {
		fake.describeNatGatewaysReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNatGatewaysOutput
			result2 error
		})
	}
	fake.describeNatGatewaysReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNatGatewaysPages(arg1 *ec2.DescribeNatGatewaysInput, arg2 func(*ec2.DescribeNatGatewaysOutput, bool) bool) error {
	fake.describeNatGatewaysPagesMutex.Lock()
	ret, specificReturn := fake.describeNatGatewaysPagesReturnsOnCall[len(fake.describeNatGatewaysPagesArgsForCall)]
	fake.describeNatGatewaysPagesArgsForCall = append(fake.describeNatGatewaysPagesArgsForCall, struct {
		arg1 *ec2.DescribeNatGatewaysInput
		arg2 func(*ec2.DescribeNatGatewaysOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeNatGatewaysPages", []interface{}{arg1, arg2})
	fake.describeNatGatewaysPagesMutex.Unlock()
	if fake.DescribeNatGatewaysPagesStub != nil {
		return fake.DescribeNatGatewaysPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeNatGatewaysPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesCallCount() int {
	fake.describeNatGatewaysPagesMutex.RLock()
	defer fake.describeNatGatewaysPagesMutex.RUnlock()
	return len(fake.describeNatGatewaysPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesCalls(stub func(*ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool) error) {
	fake.describeNatGatewaysPagesMutex.Lock()
	defer fake.describeNatGatewaysPagesMutex.Unlock()
	fake.DescribeNatGatewaysPagesStub = stub
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesArgsForCall(i int) (*ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool) {
	fake.describeNatGatewaysPagesMutex.RLock()
	defer fake.describeNatGatewaysPagesMutex.RUnlock()
	argsForCall := fake.describeNatGatewaysPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesReturns(result1 error) {
	fake.describeNatGatewaysPagesMutex.Lock()
	defer fake.describeNatGatewaysPagesMutex.Unlock()
	fake.DescribeNatGatewaysPagesStub = nil
	fake.describeNatGatewaysPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesReturnsOnCall(i int, result1 error) {
	fake.describeNatGatewaysPagesMutex.Lock()
	defer fake.describeNatGatewaysPagesMutex.Unlock()
	fake.DescribeNatGatewaysPagesStub = nil
	if fake.describeNatGatewaysPagesReturnsOnCall == nil {
		fake.describeNatGatewaysPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeNatGatewaysPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeNatGatewaysInput, arg3 func(*ec2.DescribeNatGatewaysOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeNatGatewaysPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeNatGatewaysPagesWithContextReturnsOnCall[len(fake.describeNatGatewaysPagesWithContextArgsForCall)]
	fake.describeNatGatewaysPagesWithContextArgsForCall = append(fake.describeNatGatewaysPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNatGatewaysInput
		arg3 func(*ec2.DescribeNatGatewaysOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeNatGatewaysPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeNatGatewaysPagesWithContextMutex.Unlock()
	if fake.DescribeNatGatewaysPagesWithContextStub != nil {
		return fake.DescribeNatGatewaysPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeNatGatewaysPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesWithContextCallCount() int {
	fake.describeNatGatewaysPagesWithContextMutex.RLock()
	defer fake.describeNatGatewaysPagesWithContextMutex.RUnlock()
	return len(fake.describeNatGatewaysPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool, ...request.Option) error) {
	fake.describeNatGatewaysPagesWithContextMutex.Lock()
	defer fake.describeNatGatewaysPagesWithContextMutex.Unlock()
	fake.DescribeNatGatewaysPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool, []request.Option) {
	fake.describeNatGatewaysPagesWithContextMutex.RLock()
	defer fake.describeNatGatewaysPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeNatGatewaysPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesWithContextReturns(result1 error) {
	fake.describeNatGatewaysPagesWithContextMutex.Lock()
	defer fake.describeNatGatewaysPagesWithContextMutex.Unlock()
	fake.DescribeNatGatewaysPagesWithContextStub = nil
	fake.describeNatGatewaysPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNatGatewaysPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeNatGatewaysPagesWithContextMutex.Lock()
	defer fake.describeNatGatewaysPagesWithContextMutex.Unlock()
	fake.DescribeNatGatewaysPagesWithContextStub = nil
	if fake.describeNatGatewaysPagesWithContextReturnsOnCall == nil {
		fake.describeNatGatewaysPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeNatGatewaysPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNatGatewaysRequest(arg1 *ec2.DescribeNatGatewaysInput) (*request.Request, *ec2.DescribeNatGatewaysOutput) {
	fake.describeNatGatewaysRequestMutex.Lock()
	ret, specificReturn := fake.describeNatGatewaysRequestReturnsOnCall[len(fake.describeNatGatewaysRequestArgsForCall)]
	fake.describeNatGatewaysRequestArgsForCall = append(fake.describeNatGatewaysRequestArgsForCall, struct {
		arg1 *ec2.DescribeNatGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeNatGatewaysRequest", []interface{}{arg1})
	fake.describeNatGatewaysRequestMutex.Unlock()
	if fake.DescribeNatGatewaysRequestStub != nil {
		return fake.DescribeNatGatewaysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNatGatewaysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNatGatewaysRequestCallCount() int {
	fake.describeNatGatewaysRequestMutex.RLock()
	defer fake.describeNatGatewaysRequestMutex.RUnlock()
	return len(fake.describeNatGatewaysRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeNatGatewaysRequestCalls(stub func(*ec2.DescribeNatGatewaysInput) (*request.Request, *ec2.DescribeNatGatewaysOutput)) {
	fake.describeNatGatewaysRequestMutex.Lock()
	defer fake.describeNatGatewaysRequestMutex.Unlock()
	fake.DescribeNatGatewaysRequestStub = stub
}

func (fake *FakeEC2API) DescribeNatGatewaysRequestArgsForCall(i int) *ec2.DescribeNatGatewaysInput {
	fake.describeNatGatewaysRequestMutex.RLock()
	defer fake.describeNatGatewaysRequestMutex.RUnlock()
	argsForCall := fake.describeNatGatewaysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNatGatewaysRequestReturns(result1 *request.Request, result2 *ec2.DescribeNatGatewaysOutput) {
	fake.describeNatGatewaysRequestMutex.Lock()
	defer fake.describeNatGatewaysRequestMutex.Unlock()
	fake.DescribeNatGatewaysRequestStub = nil
	fake.describeNatGatewaysRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeNatGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNatGatewaysRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeNatGatewaysOutput) {
	fake.describeNatGatewaysRequestMutex.Lock()
	defer fake.describeNatGatewaysRequestMutex.Unlock()
	fake.DescribeNatGatewaysRequestStub = nil
	if fake.describeNatGatewaysRequestReturnsOnCall == nil {
		fake.describeNatGatewaysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeNatGatewaysOutput
		})
	}
	fake.describeNatGatewaysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeNatGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNatGatewaysWithContext(arg1 aws.Context, arg2 *ec2.DescribeNatGatewaysInput, arg3 ...request.Option) (*ec2.DescribeNatGatewaysOutput, error) {
	fake.describeNatGatewaysWithContextMutex.Lock()
	ret, specificReturn := fake.describeNatGatewaysWithContextReturnsOnCall[len(fake.describeNatGatewaysWithContextArgsForCall)]
	fake.describeNatGatewaysWithContextArgsForCall = append(fake.describeNatGatewaysWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNatGatewaysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeNatGatewaysWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeNatGatewaysWithContextMutex.Unlock()
	if fake.DescribeNatGatewaysWithContextStub != nil {
		return fake.DescribeNatGatewaysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNatGatewaysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNatGatewaysWithContextCallCount() int {
	fake.describeNatGatewaysWithContextMutex.RLock()
	defer fake.describeNatGatewaysWithContextMutex.RUnlock()
	return len(fake.describeNatGatewaysWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNatGatewaysWithContextCalls(stub func(aws.Context, *ec2.DescribeNatGatewaysInput, ...request.Option) (*ec2.DescribeNatGatewaysOutput, error)) {
	fake.describeNatGatewaysWithContextMutex.Lock()
	defer fake.describeNatGatewaysWithContextMutex.Unlock()
	fake.DescribeNatGatewaysWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNatGatewaysWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNatGatewaysInput, []request.Option) {
	fake.describeNatGatewaysWithContextMutex.RLock()
	defer fake.describeNatGatewaysWithContextMutex.RUnlock()
	argsForCall := fake.describeNatGatewaysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeNatGatewaysWithContextReturns(result1 *ec2.DescribeNatGatewaysOutput, result2 error) {
	fake.describeNatGatewaysWithContextMutex.Lock()
	defer fake.describeNatGatewaysWithContextMutex.Unlock()
	fake.DescribeNatGatewaysWithContextStub = nil
	fake.describeNatGatewaysWithContextReturns = struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNatGatewaysWithContextReturnsOnCall(i int, result1 *ec2.DescribeNatGatewaysOutput, result2 error) {
	fake.describeNatGatewaysWithContextMutex.Lock()
	defer fake.describeNatGatewaysWithContextMutex.Unlock()
	fake.DescribeNatGatewaysWithContextStub = nil
	if fake.describeNatGatewaysWithContextReturnsOnCall == nil {
		fake.describeNatGatewaysWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNatGatewaysOutput
			result2 error
		})
	}
	fake.describeNatGatewaysWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNatGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkAcls(arg1 *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
	fake.describeNetworkAclsMutex.Lock()
	ret, specificReturn := fake.describeNetworkAclsReturnsOnCall[len(fake.describeNetworkAclsArgsForCall)]
	fake.describeNetworkAclsArgsForCall = append(fake.describeNetworkAclsArgsForCall, struct {
		arg1 *ec2.DescribeNetworkAclsInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkAcls", []interface{}{arg1})
	fake.describeNetworkAclsMutex.Unlock()
	if fake.DescribeNetworkAclsStub != nil {
		return fake.DescribeNetworkAclsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkAclsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkAclsCallCount() int {
	fake.describeNetworkAclsMutex.RLock()
	defer fake.describeNetworkAclsMutex.RUnlock()
	return len(fake.describeNetworkAclsArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkAclsCalls(stub func(*ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error)) {
	fake.describeNetworkAclsMutex.Lock()
	defer fake.describeNetworkAclsMutex.Unlock()
	fake.DescribeNetworkAclsStub = stub
}

func (fake *FakeEC2API) DescribeNetworkAclsArgsForCall(i int) *ec2.DescribeNetworkAclsInput {
	fake.describeNetworkAclsMutex.RLock()
	defer fake.describeNetworkAclsMutex.RUnlock()
	argsForCall := fake.describeNetworkAclsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkAclsReturns(result1 *ec2.DescribeNetworkAclsOutput, result2 error) {
	fake.describeNetworkAclsMutex.Lock()
	defer fake.describeNetworkAclsMutex.Unlock()
	fake.DescribeNetworkAclsStub = nil
	fake.describeNetworkAclsReturns = struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkAclsReturnsOnCall(i int, result1 *ec2.DescribeNetworkAclsOutput, result2 error) {
	fake.describeNetworkAclsMutex.Lock()
	defer fake.describeNetworkAclsMutex.Unlock()
	fake.DescribeNetworkAclsStub = nil
	if fake.describeNetworkAclsReturnsOnCall == nil {
		fake.describeNetworkAclsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkAclsOutput
			result2 error
		})
	}
	fake.describeNetworkAclsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkAclsRequest(arg1 *ec2.DescribeNetworkAclsInput) (*request.Request, *ec2.DescribeNetworkAclsOutput) {
	fake.describeNetworkAclsRequestMutex.Lock()
	ret, specificReturn := fake.describeNetworkAclsRequestReturnsOnCall[len(fake.describeNetworkAclsRequestArgsForCall)]
	fake.describeNetworkAclsRequestArgsForCall = append(fake.describeNetworkAclsRequestArgsForCall, struct {
		arg1 *ec2.DescribeNetworkAclsInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkAclsRequest", []interface{}{arg1})
	fake.describeNetworkAclsRequestMutex.Unlock()
	if fake.DescribeNetworkAclsRequestStub != nil {
		return fake.DescribeNetworkAclsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkAclsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkAclsRequestCallCount() int {
	fake.describeNetworkAclsRequestMutex.RLock()
	defer fake.describeNetworkAclsRequestMutex.RUnlock()
	return len(fake.describeNetworkAclsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkAclsRequestCalls(stub func(*ec2.DescribeNetworkAclsInput) (*request.Request, *ec2.DescribeNetworkAclsOutput)) {
	fake.describeNetworkAclsRequestMutex.Lock()
	defer fake.describeNetworkAclsRequestMutex.Unlock()
	fake.DescribeNetworkAclsRequestStub = stub
}

func (fake *FakeEC2API) DescribeNetworkAclsRequestArgsForCall(i int) *ec2.DescribeNetworkAclsInput {
	fake.describeNetworkAclsRequestMutex.RLock()
	defer fake.describeNetworkAclsRequestMutex.RUnlock()
	argsForCall := fake.describeNetworkAclsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkAclsRequestReturns(result1 *request.Request, result2 *ec2.DescribeNetworkAclsOutput) {
	fake.describeNetworkAclsRequestMutex.Lock()
	defer fake.describeNetworkAclsRequestMutex.Unlock()
	fake.DescribeNetworkAclsRequestStub = nil
	fake.describeNetworkAclsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkAclsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkAclsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeNetworkAclsOutput) {
	fake.describeNetworkAclsRequestMutex.Lock()
	defer fake.describeNetworkAclsRequestMutex.Unlock()
	fake.DescribeNetworkAclsRequestStub = nil
	if fake.describeNetworkAclsRequestReturnsOnCall == nil {
		fake.describeNetworkAclsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeNetworkAclsOutput
		})
	}
	fake.describeNetworkAclsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkAclsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkAclsWithContext(arg1 aws.Context, arg2 *ec2.DescribeNetworkAclsInput, arg3 ...request.Option) (*ec2.DescribeNetworkAclsOutput, error) {
	fake.describeNetworkAclsWithContextMutex.Lock()
	ret, specificReturn := fake.describeNetworkAclsWithContextReturnsOnCall[len(fake.describeNetworkAclsWithContextArgsForCall)]
	fake.describeNetworkAclsWithContextArgsForCall = append(fake.describeNetworkAclsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkAclsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeNetworkAclsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeNetworkAclsWithContextMutex.Unlock()
	if fake.DescribeNetworkAclsWithContextStub != nil {
		return fake.DescribeNetworkAclsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkAclsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkAclsWithContextCallCount() int {
	fake.describeNetworkAclsWithContextMutex.RLock()
	defer fake.describeNetworkAclsWithContextMutex.RUnlock()
	return len(fake.describeNetworkAclsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkAclsWithContextCalls(stub func(aws.Context, *ec2.DescribeNetworkAclsInput, ...request.Option) (*ec2.DescribeNetworkAclsOutput, error)) {
	fake.describeNetworkAclsWithContextMutex.Lock()
	defer fake.describeNetworkAclsWithContextMutex.Unlock()
	fake.DescribeNetworkAclsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNetworkAclsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNetworkAclsInput, []request.Option) {
	fake.describeNetworkAclsWithContextMutex.RLock()
	defer fake.describeNetworkAclsWithContextMutex.RUnlock()
	argsForCall := fake.describeNetworkAclsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeNetworkAclsWithContextReturns(result1 *ec2.DescribeNetworkAclsOutput, result2 error) {
	fake.describeNetworkAclsWithContextMutex.Lock()
	defer fake.describeNetworkAclsWithContextMutex.Unlock()
	fake.DescribeNetworkAclsWithContextStub = nil
	fake.describeNetworkAclsWithContextReturns = struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkAclsWithContextReturnsOnCall(i int, result1 *ec2.DescribeNetworkAclsOutput, result2 error) {
	fake.describeNetworkAclsWithContextMutex.Lock()
	defer fake.describeNetworkAclsWithContextMutex.Unlock()
	fake.DescribeNetworkAclsWithContextStub = nil
	if fake.describeNetworkAclsWithContextReturnsOnCall == nil {
		fake.describeNetworkAclsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkAclsOutput
			result2 error
		})
	}
	fake.describeNetworkAclsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkAclsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttribute(arg1 *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	fake.describeNetworkInterfaceAttributeMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfaceAttributeReturnsOnCall[len(fake.describeNetworkInterfaceAttributeArgsForCall)]
	fake.describeNetworkInterfaceAttributeArgsForCall = append(fake.describeNetworkInterfaceAttributeArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfaceAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkInterfaceAttribute", []interface{}{arg1})
	fake.describeNetworkInterfaceAttributeMutex.Unlock()
	if fake.DescribeNetworkInterfaceAttributeStub != nil {
		return fake.DescribeNetworkInterfaceAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfaceAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeCallCount() int {
	fake.describeNetworkInterfaceAttributeMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeMutex.RUnlock()
	return len(fake.describeNetworkInterfaceAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeCalls(stub func(*ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)) {
	fake.describeNetworkInterfaceAttributeMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeArgsForCall(i int) *ec2.DescribeNetworkInterfaceAttributeInput {
	fake.describeNetworkInterfaceAttributeMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfaceAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeReturns(result1 *ec2.DescribeNetworkInterfaceAttributeOutput, result2 error) {
	fake.describeNetworkInterfaceAttributeMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeStub = nil
	fake.describeNetworkInterfaceAttributeReturns = struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeReturnsOnCall(i int, result1 *ec2.DescribeNetworkInterfaceAttributeOutput, result2 error) {
	fake.describeNetworkInterfaceAttributeMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeStub = nil
	if fake.describeNetworkInterfaceAttributeReturnsOnCall == nil {
		fake.describeNetworkInterfaceAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkInterfaceAttributeOutput
			result2 error
		})
	}
	fake.describeNetworkInterfaceAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeRequest(arg1 *ec2.DescribeNetworkInterfaceAttributeInput) (*request.Request, *ec2.DescribeNetworkInterfaceAttributeOutput) {
	fake.describeNetworkInterfaceAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfaceAttributeRequestReturnsOnCall[len(fake.describeNetworkInterfaceAttributeRequestArgsForCall)]
	fake.describeNetworkInterfaceAttributeRequestArgsForCall = append(fake.describeNetworkInterfaceAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfaceAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkInterfaceAttributeRequest", []interface{}{arg1})
	fake.describeNetworkInterfaceAttributeRequestMutex.Unlock()
	if fake.DescribeNetworkInterfaceAttributeRequestStub != nil {
		return fake.DescribeNetworkInterfaceAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfaceAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeRequestCallCount() int {
	fake.describeNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeRequestMutex.RUnlock()
	return len(fake.describeNetworkInterfaceAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeRequestCalls(stub func(*ec2.DescribeNetworkInterfaceAttributeInput) (*request.Request, *ec2.DescribeNetworkInterfaceAttributeOutput)) {
	fake.describeNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeRequestArgsForCall(i int) *ec2.DescribeNetworkInterfaceAttributeInput {
	fake.describeNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfaceAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeNetworkInterfaceAttributeOutput) {
	fake.describeNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeRequestStub = nil
	fake.describeNetworkInterfaceAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfaceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeNetworkInterfaceAttributeOutput) {
	fake.describeNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeRequestStub = nil
	if fake.describeNetworkInterfaceAttributeRequestReturnsOnCall == nil {
		fake.describeNetworkInterfaceAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeNetworkInterfaceAttributeOutput
		})
	}
	fake.describeNetworkInterfaceAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfaceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeNetworkInterfaceAttributeInput, arg3 ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	fake.describeNetworkInterfaceAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfaceAttributeWithContextReturnsOnCall[len(fake.describeNetworkInterfaceAttributeWithContextArgsForCall)]
	fake.describeNetworkInterfaceAttributeWithContextArgsForCall = append(fake.describeNetworkInterfaceAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfaceAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeNetworkInterfaceAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeNetworkInterfaceAttributeWithContextMutex.Unlock()
	if fake.DescribeNetworkInterfaceAttributeWithContextStub != nil {
		return fake.DescribeNetworkInterfaceAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfaceAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeWithContextCallCount() int {
	fake.describeNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeWithContextMutex.RUnlock()
	return len(fake.describeNetworkInterfaceAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeNetworkInterfaceAttributeInput, ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)) {
	fake.describeNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNetworkInterfaceAttributeInput, []request.Option) {
	fake.describeNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfaceAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeWithContextReturns(result1 *ec2.DescribeNetworkInterfaceAttributeOutput, result2 error) {
	fake.describeNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeWithContextStub = nil
	fake.describeNetworkInterfaceAttributeWithContextReturns = struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaceAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeNetworkInterfaceAttributeOutput, result2 error) {
	fake.describeNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.describeNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.DescribeNetworkInterfaceAttributeWithContextStub = nil
	if fake.describeNetworkInterfaceAttributeWithContextReturnsOnCall == nil {
		fake.describeNetworkInterfaceAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkInterfaceAttributeOutput
			result2 error
		})
	}
	fake.describeNetworkInterfaceAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissions(arg1 *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	fake.describeNetworkInterfacePermissionsMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacePermissionsReturnsOnCall[len(fake.describeNetworkInterfacePermissionsArgsForCall)]
	fake.describeNetworkInterfacePermissionsArgsForCall = append(fake.describeNetworkInterfacePermissionsArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfacePermissionsInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkInterfacePermissions", []interface{}{arg1})
	fake.describeNetworkInterfacePermissionsMutex.Unlock()
	if fake.DescribeNetworkInterfacePermissionsStub != nil {
		return fake.DescribeNetworkInterfacePermissionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfacePermissionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsCallCount() int {
	fake.describeNetworkInterfacePermissionsMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsMutex.RUnlock()
	return len(fake.describeNetworkInterfacePermissionsArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsCalls(stub func(*ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)) {
	fake.describeNetworkInterfacePermissionsMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsArgsForCall(i int) *ec2.DescribeNetworkInterfacePermissionsInput {
	fake.describeNetworkInterfacePermissionsMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacePermissionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsReturns(result1 *ec2.DescribeNetworkInterfacePermissionsOutput, result2 error) {
	fake.describeNetworkInterfacePermissionsMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsStub = nil
	fake.describeNetworkInterfacePermissionsReturns = struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsReturnsOnCall(i int, result1 *ec2.DescribeNetworkInterfacePermissionsOutput, result2 error) {
	fake.describeNetworkInterfacePermissionsMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsStub = nil
	if fake.describeNetworkInterfacePermissionsReturnsOnCall == nil {
		fake.describeNetworkInterfacePermissionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkInterfacePermissionsOutput
			result2 error
		})
	}
	fake.describeNetworkInterfacePermissionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsRequest(arg1 *ec2.DescribeNetworkInterfacePermissionsInput) (*request.Request, *ec2.DescribeNetworkInterfacePermissionsOutput) {
	fake.describeNetworkInterfacePermissionsRequestMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacePermissionsRequestReturnsOnCall[len(fake.describeNetworkInterfacePermissionsRequestArgsForCall)]
	fake.describeNetworkInterfacePermissionsRequestArgsForCall = append(fake.describeNetworkInterfacePermissionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfacePermissionsInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkInterfacePermissionsRequest", []interface{}{arg1})
	fake.describeNetworkInterfacePermissionsRequestMutex.Unlock()
	if fake.DescribeNetworkInterfacePermissionsRequestStub != nil {
		return fake.DescribeNetworkInterfacePermissionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfacePermissionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsRequestCallCount() int {
	fake.describeNetworkInterfacePermissionsRequestMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsRequestMutex.RUnlock()
	return len(fake.describeNetworkInterfacePermissionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsRequestCalls(stub func(*ec2.DescribeNetworkInterfacePermissionsInput) (*request.Request, *ec2.DescribeNetworkInterfacePermissionsOutput)) {
	fake.describeNetworkInterfacePermissionsRequestMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsRequestMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsRequestArgsForCall(i int) *ec2.DescribeNetworkInterfacePermissionsInput {
	fake.describeNetworkInterfacePermissionsRequestMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsRequestMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacePermissionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeNetworkInterfacePermissionsOutput) {
	fake.describeNetworkInterfacePermissionsRequestMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsRequestMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsRequestStub = nil
	fake.describeNetworkInterfacePermissionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacePermissionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeNetworkInterfacePermissionsOutput) {
	fake.describeNetworkInterfacePermissionsRequestMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsRequestMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsRequestStub = nil
	if fake.describeNetworkInterfacePermissionsRequestReturnsOnCall == nil {
		fake.describeNetworkInterfacePermissionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeNetworkInterfacePermissionsOutput
		})
	}
	fake.describeNetworkInterfacePermissionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacePermissionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeNetworkInterfacePermissionsInput, arg3 ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	fake.describeNetworkInterfacePermissionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacePermissionsWithContextReturnsOnCall[len(fake.describeNetworkInterfacePermissionsWithContextArgsForCall)]
	fake.describeNetworkInterfacePermissionsWithContextArgsForCall = append(fake.describeNetworkInterfacePermissionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacePermissionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeNetworkInterfacePermissionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeNetworkInterfacePermissionsWithContextMutex.Unlock()
	if fake.DescribeNetworkInterfacePermissionsWithContextStub != nil {
		return fake.DescribeNetworkInterfacePermissionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfacePermissionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsWithContextCallCount() int {
	fake.describeNetworkInterfacePermissionsWithContextMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsWithContextMutex.RUnlock()
	return len(fake.describeNetworkInterfacePermissionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsWithContextCalls(stub func(aws.Context, *ec2.DescribeNetworkInterfacePermissionsInput, ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)) {
	fake.describeNetworkInterfacePermissionsWithContextMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNetworkInterfacePermissionsInput, []request.Option) {
	fake.describeNetworkInterfacePermissionsWithContextMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsWithContextMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacePermissionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsWithContextReturns(result1 *ec2.DescribeNetworkInterfacePermissionsOutput, result2 error) {
	fake.describeNetworkInterfacePermissionsWithContextMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsWithContextStub = nil
	fake.describeNetworkInterfacePermissionsWithContextReturns = struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacePermissionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeNetworkInterfacePermissionsOutput, result2 error) {
	fake.describeNetworkInterfacePermissionsWithContextMutex.Lock()
	defer fake.describeNetworkInterfacePermissionsWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacePermissionsWithContextStub = nil
	if fake.describeNetworkInterfacePermissionsWithContextReturnsOnCall == nil {
		fake.describeNetworkInterfacePermissionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkInterfacePermissionsOutput
			result2 error
		})
	}
	fake.describeNetworkInterfacePermissionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkInterfacePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfaces(arg1 *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	fake.describeNetworkInterfacesMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacesReturnsOnCall[len(fake.describeNetworkInterfacesArgsForCall)]
	fake.describeNetworkInterfacesArgsForCall = append(fake.describeNetworkInterfacesArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkInterfaces", []interface{}{arg1})
	fake.describeNetworkInterfacesMutex.Unlock()
	if fake.DescribeNetworkInterfacesStub != nil {
		return fake.DescribeNetworkInterfacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfacesCallCount() int {
	fake.describeNetworkInterfacesMutex.RLock()
	defer fake.describeNetworkInterfacesMutex.RUnlock()
	return len(fake.describeNetworkInterfacesArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacesCalls(stub func(*ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error)) {
	fake.describeNetworkInterfacesMutex.Lock()
	defer fake.describeNetworkInterfacesMutex.Unlock()
	fake.DescribeNetworkInterfacesStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacesArgsForCall(i int) *ec2.DescribeNetworkInterfacesInput {
	fake.describeNetworkInterfacesMutex.RLock()
	defer fake.describeNetworkInterfacesMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkInterfacesReturns(result1 *ec2.DescribeNetworkInterfacesOutput, result2 error) {
	fake.describeNetworkInterfacesMutex.Lock()
	defer fake.describeNetworkInterfacesMutex.Unlock()
	fake.DescribeNetworkInterfacesStub = nil
	fake.describeNetworkInterfacesReturns = struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesReturnsOnCall(i int, result1 *ec2.DescribeNetworkInterfacesOutput, result2 error) {
	fake.describeNetworkInterfacesMutex.Lock()
	defer fake.describeNetworkInterfacesMutex.Unlock()
	fake.DescribeNetworkInterfacesStub = nil
	if fake.describeNetworkInterfacesReturnsOnCall == nil {
		fake.describeNetworkInterfacesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkInterfacesOutput
			result2 error
		})
	}
	fake.describeNetworkInterfacesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPages(arg1 *ec2.DescribeNetworkInterfacesInput, arg2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error {
	fake.describeNetworkInterfacesPagesMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacesPagesReturnsOnCall[len(fake.describeNetworkInterfacesPagesArgsForCall)]
	fake.describeNetworkInterfacesPagesArgsForCall = append(fake.describeNetworkInterfacesPagesArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
		arg2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeNetworkInterfacesPages", []interface{}{arg1, arg2})
	fake.describeNetworkInterfacesPagesMutex.Unlock()
	if fake.DescribeNetworkInterfacesPagesStub != nil {
		return fake.DescribeNetworkInterfacesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeNetworkInterfacesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesCallCount() int {
	fake.describeNetworkInterfacesPagesMutex.RLock()
	defer fake.describeNetworkInterfacesPagesMutex.RUnlock()
	return len(fake.describeNetworkInterfacesPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesCalls(stub func(*ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error) {
	fake.describeNetworkInterfacesPagesMutex.Lock()
	defer fake.describeNetworkInterfacesPagesMutex.Unlock()
	fake.DescribeNetworkInterfacesPagesStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesArgsForCall(i int) (*ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) {
	fake.describeNetworkInterfacesPagesMutex.RLock()
	defer fake.describeNetworkInterfacesPagesMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesReturns(result1 error) {
	fake.describeNetworkInterfacesPagesMutex.Lock()
	defer fake.describeNetworkInterfacesPagesMutex.Unlock()
	fake.DescribeNetworkInterfacesPagesStub = nil
	fake.describeNetworkInterfacesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesReturnsOnCall(i int, result1 error) {
	fake.describeNetworkInterfacesPagesMutex.Lock()
	defer fake.describeNetworkInterfacesPagesMutex.Unlock()
	fake.DescribeNetworkInterfacesPagesStub = nil
	if fake.describeNetworkInterfacesPagesReturnsOnCall == nil {
		fake.describeNetworkInterfacesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeNetworkInterfacesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeNetworkInterfacesInput, arg3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeNetworkInterfacesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacesPagesWithContextReturnsOnCall[len(fake.describeNetworkInterfacesPagesWithContextArgsForCall)]
	fake.describeNetworkInterfacesPagesWithContextArgsForCall = append(fake.describeNetworkInterfacesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacesInput
		arg3 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeNetworkInterfacesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeNetworkInterfacesPagesWithContextMutex.Unlock()
	if fake.DescribeNetworkInterfacesPagesWithContextStub != nil {
		return fake.DescribeNetworkInterfacesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeNetworkInterfacesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesWithContextCallCount() int {
	fake.describeNetworkInterfacesPagesWithContextMutex.RLock()
	defer fake.describeNetworkInterfacesPagesWithContextMutex.RUnlock()
	return len(fake.describeNetworkInterfacesPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, ...request.Option) error) {
	fake.describeNetworkInterfacesPagesWithContextMutex.Lock()
	defer fake.describeNetworkInterfacesPagesWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacesPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, []request.Option) {
	fake.describeNetworkInterfacesPagesWithContextMutex.RLock()
	defer fake.describeNetworkInterfacesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesWithContextReturns(result1 error) {
	fake.describeNetworkInterfacesPagesWithContextMutex.Lock()
	defer fake.describeNetworkInterfacesPagesWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacesPagesWithContextStub = nil
	fake.describeNetworkInterfacesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeNetworkInterfacesPagesWithContextMutex.Lock()
	defer fake.describeNetworkInterfacesPagesWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacesPagesWithContextStub = nil
	if fake.describeNetworkInterfacesPagesWithContextReturnsOnCall == nil {
		fake.describeNetworkInterfacesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeNetworkInterfacesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesRequest(arg1 *ec2.DescribeNetworkInterfacesInput) (*request.Request, *ec2.DescribeNetworkInterfacesOutput) {
	fake.describeNetworkInterfacesRequestMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacesRequestReturnsOnCall[len(fake.describeNetworkInterfacesRequestArgsForCall)]
	fake.describeNetworkInterfacesRequestArgsForCall = append(fake.describeNetworkInterfacesRequestArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
	}{arg1})
	fake.recordInvocation("DescribeNetworkInterfacesRequest", []interface{}{arg1})
	fake.describeNetworkInterfacesRequestMutex.Unlock()
	if fake.DescribeNetworkInterfacesRequestStub != nil {
		return fake.DescribeNetworkInterfacesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfacesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfacesRequestCallCount() int {
	fake.describeNetworkInterfacesRequestMutex.RLock()
	defer fake.describeNetworkInterfacesRequestMutex.RUnlock()
	return len(fake.describeNetworkInterfacesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacesRequestCalls(stub func(*ec2.DescribeNetworkInterfacesInput) (*request.Request, *ec2.DescribeNetworkInterfacesOutput)) {
	fake.describeNetworkInterfacesRequestMutex.Lock()
	defer fake.describeNetworkInterfacesRequestMutex.Unlock()
	fake.DescribeNetworkInterfacesRequestStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacesRequestArgsForCall(i int) *ec2.DescribeNetworkInterfacesInput {
	fake.describeNetworkInterfacesRequestMutex.RLock()
	defer fake.describeNetworkInterfacesRequestMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeNetworkInterfacesRequestReturns(result1 *request.Request, result2 *ec2.DescribeNetworkInterfacesOutput) {
	fake.describeNetworkInterfacesRequestMutex.Lock()
	defer fake.describeNetworkInterfacesRequestMutex.Unlock()
	fake.DescribeNetworkInterfacesRequestStub = nil
	fake.describeNetworkInterfacesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeNetworkInterfacesOutput) {
	fake.describeNetworkInterfacesRequestMutex.Lock()
	defer fake.describeNetworkInterfacesRequestMutex.Unlock()
	fake.DescribeNetworkInterfacesRequestStub = nil
	if fake.describeNetworkInterfacesRequestReturnsOnCall == nil {
		fake.describeNetworkInterfacesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeNetworkInterfacesOutput
		})
	}
	fake.describeNetworkInterfacesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeNetworkInterfacesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesWithContext(arg1 aws.Context, arg2 *ec2.DescribeNetworkInterfacesInput, arg3 ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error) {
	fake.describeNetworkInterfacesWithContextMutex.Lock()
	ret, specificReturn := fake.describeNetworkInterfacesWithContextReturnsOnCall[len(fake.describeNetworkInterfacesWithContextArgsForCall)]
	fake.describeNetworkInterfacesWithContextArgsForCall = append(fake.describeNetworkInterfacesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeNetworkInterfacesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeNetworkInterfacesWithContextMutex.Unlock()
	if fake.DescribeNetworkInterfacesWithContextStub != nil {
		return fake.DescribeNetworkInterfacesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeNetworkInterfacesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeNetworkInterfacesWithContextCallCount() int {
	fake.describeNetworkInterfacesWithContextMutex.RLock()
	defer fake.describeNetworkInterfacesWithContextMutex.RUnlock()
	return len(fake.describeNetworkInterfacesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeNetworkInterfacesWithContextCalls(stub func(aws.Context, *ec2.DescribeNetworkInterfacesInput, ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error)) {
	fake.describeNetworkInterfacesWithContextMutex.Lock()
	defer fake.describeNetworkInterfacesWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeNetworkInterfacesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNetworkInterfacesInput, []request.Option) {
	fake.describeNetworkInterfacesWithContextMutex.RLock()
	defer fake.describeNetworkInterfacesWithContextMutex.RUnlock()
	argsForCall := fake.describeNetworkInterfacesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeNetworkInterfacesWithContextReturns(result1 *ec2.DescribeNetworkInterfacesOutput, result2 error) {
	fake.describeNetworkInterfacesWithContextMutex.Lock()
	defer fake.describeNetworkInterfacesWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacesWithContextStub = nil
	fake.describeNetworkInterfacesWithContextReturns = struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeNetworkInterfacesWithContextReturnsOnCall(i int, result1 *ec2.DescribeNetworkInterfacesOutput, result2 error) {
	fake.describeNetworkInterfacesWithContextMutex.Lock()
	defer fake.describeNetworkInterfacesWithContextMutex.Unlock()
	fake.DescribeNetworkInterfacesWithContextStub = nil
	if fake.describeNetworkInterfacesWithContextReturnsOnCall == nil {
		fake.describeNetworkInterfacesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeNetworkInterfacesOutput
			result2 error
		})
	}
	fake.describeNetworkInterfacesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeNetworkInterfacesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePlacementGroups(arg1 *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	fake.describePlacementGroupsMutex.Lock()
	ret, specificReturn := fake.describePlacementGroupsReturnsOnCall[len(fake.describePlacementGroupsArgsForCall)]
	fake.describePlacementGroupsArgsForCall = append(fake.describePlacementGroupsArgsForCall, struct {
		arg1 *ec2.DescribePlacementGroupsInput
	}{arg1})
	fake.recordInvocation("DescribePlacementGroups", []interface{}{arg1})
	fake.describePlacementGroupsMutex.Unlock()
	if fake.DescribePlacementGroupsStub != nil {
		return fake.DescribePlacementGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePlacementGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePlacementGroupsCallCount() int {
	fake.describePlacementGroupsMutex.RLock()
	defer fake.describePlacementGroupsMutex.RUnlock()
	return len(fake.describePlacementGroupsArgsForCall)
}

func (fake *FakeEC2API) DescribePlacementGroupsCalls(stub func(*ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error)) {
	fake.describePlacementGroupsMutex.Lock()
	defer fake.describePlacementGroupsMutex.Unlock()
	fake.DescribePlacementGroupsStub = stub
}

func (fake *FakeEC2API) DescribePlacementGroupsArgsForCall(i int) *ec2.DescribePlacementGroupsInput {
	fake.describePlacementGroupsMutex.RLock()
	defer fake.describePlacementGroupsMutex.RUnlock()
	argsForCall := fake.describePlacementGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePlacementGroupsReturns(result1 *ec2.DescribePlacementGroupsOutput, result2 error) {
	fake.describePlacementGroupsMutex.Lock()
	defer fake.describePlacementGroupsMutex.Unlock()
	fake.DescribePlacementGroupsStub = nil
	fake.describePlacementGroupsReturns = struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePlacementGroupsReturnsOnCall(i int, result1 *ec2.DescribePlacementGroupsOutput, result2 error) {
	fake.describePlacementGroupsMutex.Lock()
	defer fake.describePlacementGroupsMutex.Unlock()
	fake.DescribePlacementGroupsStub = nil
	if fake.describePlacementGroupsReturnsOnCall == nil {
		fake.describePlacementGroupsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePlacementGroupsOutput
			result2 error
		})
	}
	fake.describePlacementGroupsReturnsOnCall[i] = struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePlacementGroupsRequest(arg1 *ec2.DescribePlacementGroupsInput) (*request.Request, *ec2.DescribePlacementGroupsOutput) {
	fake.describePlacementGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describePlacementGroupsRequestReturnsOnCall[len(fake.describePlacementGroupsRequestArgsForCall)]
	fake.describePlacementGroupsRequestArgsForCall = append(fake.describePlacementGroupsRequestArgsForCall, struct {
		arg1 *ec2.DescribePlacementGroupsInput
	}{arg1})
	fake.recordInvocation("DescribePlacementGroupsRequest", []interface{}{arg1})
	fake.describePlacementGroupsRequestMutex.Unlock()
	if fake.DescribePlacementGroupsRequestStub != nil {
		return fake.DescribePlacementGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePlacementGroupsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePlacementGroupsRequestCallCount() int {
	fake.describePlacementGroupsRequestMutex.RLock()
	defer fake.describePlacementGroupsRequestMutex.RUnlock()
	return len(fake.describePlacementGroupsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribePlacementGroupsRequestCalls(stub func(*ec2.DescribePlacementGroupsInput) (*request.Request, *ec2.DescribePlacementGroupsOutput)) {
	fake.describePlacementGroupsRequestMutex.Lock()
	defer fake.describePlacementGroupsRequestMutex.Unlock()
	fake.DescribePlacementGroupsRequestStub = stub
}

func (fake *FakeEC2API) DescribePlacementGroupsRequestArgsForCall(i int) *ec2.DescribePlacementGroupsInput {
	fake.describePlacementGroupsRequestMutex.RLock()
	defer fake.describePlacementGroupsRequestMutex.RUnlock()
	argsForCall := fake.describePlacementGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePlacementGroupsRequestReturns(result1 *request.Request, result2 *ec2.DescribePlacementGroupsOutput) {
	fake.describePlacementGroupsRequestMutex.Lock()
	defer fake.describePlacementGroupsRequestMutex.Unlock()
	fake.DescribePlacementGroupsRequestStub = nil
	fake.describePlacementGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribePlacementGroupsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePlacementGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribePlacementGroupsOutput) {
	fake.describePlacementGroupsRequestMutex.Lock()
	defer fake.describePlacementGroupsRequestMutex.Unlock()
	fake.DescribePlacementGroupsRequestStub = nil
	if fake.describePlacementGroupsRequestReturnsOnCall == nil {
		fake.describePlacementGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribePlacementGroupsOutput
		})
	}
	fake.describePlacementGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribePlacementGroupsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePlacementGroupsWithContext(arg1 aws.Context, arg2 *ec2.DescribePlacementGroupsInput, arg3 ...request.Option) (*ec2.DescribePlacementGroupsOutput, error) {
	fake.describePlacementGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describePlacementGroupsWithContextReturnsOnCall[len(fake.describePlacementGroupsWithContextArgsForCall)]
	fake.describePlacementGroupsWithContextArgsForCall = append(fake.describePlacementGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribePlacementGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribePlacementGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePlacementGroupsWithContextMutex.Unlock()
	if fake.DescribePlacementGroupsWithContextStub != nil {
		return fake.DescribePlacementGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePlacementGroupsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePlacementGroupsWithContextCallCount() int {
	fake.describePlacementGroupsWithContextMutex.RLock()
	defer fake.describePlacementGroupsWithContextMutex.RUnlock()
	return len(fake.describePlacementGroupsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribePlacementGroupsWithContextCalls(stub func(aws.Context, *ec2.DescribePlacementGroupsInput, ...request.Option) (*ec2.DescribePlacementGroupsOutput, error)) {
	fake.describePlacementGroupsWithContextMutex.Lock()
	defer fake.describePlacementGroupsWithContextMutex.Unlock()
	fake.DescribePlacementGroupsWithContextStub = stub
}

func (fake *FakeEC2API) DescribePlacementGroupsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribePlacementGroupsInput, []request.Option) {
	fake.describePlacementGroupsWithContextMutex.RLock()
	defer fake.describePlacementGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describePlacementGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribePlacementGroupsWithContextReturns(result1 *ec2.DescribePlacementGroupsOutput, result2 error) {
	fake.describePlacementGroupsWithContextMutex.Lock()
	defer fake.describePlacementGroupsWithContextMutex.Unlock()
	fake.DescribePlacementGroupsWithContextStub = nil
	fake.describePlacementGroupsWithContextReturns = struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePlacementGroupsWithContextReturnsOnCall(i int, result1 *ec2.DescribePlacementGroupsOutput, result2 error) {
	fake.describePlacementGroupsWithContextMutex.Lock()
	defer fake.describePlacementGroupsWithContextMutex.Unlock()
	fake.DescribePlacementGroupsWithContextStub = nil
	if fake.describePlacementGroupsWithContextReturnsOnCall == nil {
		fake.describePlacementGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePlacementGroupsOutput
			result2 error
		})
	}
	fake.describePlacementGroupsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribePlacementGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrefixLists(arg1 *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	fake.describePrefixListsMutex.Lock()
	ret, specificReturn := fake.describePrefixListsReturnsOnCall[len(fake.describePrefixListsArgsForCall)]
	fake.describePrefixListsArgsForCall = append(fake.describePrefixListsArgsForCall, struct {
		arg1 *ec2.DescribePrefixListsInput
	}{arg1})
	fake.recordInvocation("DescribePrefixLists", []interface{}{arg1})
	fake.describePrefixListsMutex.Unlock()
	if fake.DescribePrefixListsStub != nil {
		return fake.DescribePrefixListsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePrefixListsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePrefixListsCallCount() int {
	fake.describePrefixListsMutex.RLock()
	defer fake.describePrefixListsMutex.RUnlock()
	return len(fake.describePrefixListsArgsForCall)
}

func (fake *FakeEC2API) DescribePrefixListsCalls(stub func(*ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error)) {
	fake.describePrefixListsMutex.Lock()
	defer fake.describePrefixListsMutex.Unlock()
	fake.DescribePrefixListsStub = stub
}

func (fake *FakeEC2API) DescribePrefixListsArgsForCall(i int) *ec2.DescribePrefixListsInput {
	fake.describePrefixListsMutex.RLock()
	defer fake.describePrefixListsMutex.RUnlock()
	argsForCall := fake.describePrefixListsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePrefixListsReturns(result1 *ec2.DescribePrefixListsOutput, result2 error) {
	fake.describePrefixListsMutex.Lock()
	defer fake.describePrefixListsMutex.Unlock()
	fake.DescribePrefixListsStub = nil
	fake.describePrefixListsReturns = struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrefixListsReturnsOnCall(i int, result1 *ec2.DescribePrefixListsOutput, result2 error) {
	fake.describePrefixListsMutex.Lock()
	defer fake.describePrefixListsMutex.Unlock()
	fake.DescribePrefixListsStub = nil
	if fake.describePrefixListsReturnsOnCall == nil {
		fake.describePrefixListsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePrefixListsOutput
			result2 error
		})
	}
	fake.describePrefixListsReturnsOnCall[i] = struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrefixListsRequest(arg1 *ec2.DescribePrefixListsInput) (*request.Request, *ec2.DescribePrefixListsOutput) {
	fake.describePrefixListsRequestMutex.Lock()
	ret, specificReturn := fake.describePrefixListsRequestReturnsOnCall[len(fake.describePrefixListsRequestArgsForCall)]
	fake.describePrefixListsRequestArgsForCall = append(fake.describePrefixListsRequestArgsForCall, struct {
		arg1 *ec2.DescribePrefixListsInput
	}{arg1})
	fake.recordInvocation("DescribePrefixListsRequest", []interface{}{arg1})
	fake.describePrefixListsRequestMutex.Unlock()
	if fake.DescribePrefixListsRequestStub != nil {
		return fake.DescribePrefixListsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePrefixListsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePrefixListsRequestCallCount() int {
	fake.describePrefixListsRequestMutex.RLock()
	defer fake.describePrefixListsRequestMutex.RUnlock()
	return len(fake.describePrefixListsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribePrefixListsRequestCalls(stub func(*ec2.DescribePrefixListsInput) (*request.Request, *ec2.DescribePrefixListsOutput)) {
	fake.describePrefixListsRequestMutex.Lock()
	defer fake.describePrefixListsRequestMutex.Unlock()
	fake.DescribePrefixListsRequestStub = stub
}

func (fake *FakeEC2API) DescribePrefixListsRequestArgsForCall(i int) *ec2.DescribePrefixListsInput {
	fake.describePrefixListsRequestMutex.RLock()
	defer fake.describePrefixListsRequestMutex.RUnlock()
	argsForCall := fake.describePrefixListsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePrefixListsRequestReturns(result1 *request.Request, result2 *ec2.DescribePrefixListsOutput) {
	fake.describePrefixListsRequestMutex.Lock()
	defer fake.describePrefixListsRequestMutex.Unlock()
	fake.DescribePrefixListsRequestStub = nil
	fake.describePrefixListsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribePrefixListsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrefixListsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribePrefixListsOutput) {
	fake.describePrefixListsRequestMutex.Lock()
	defer fake.describePrefixListsRequestMutex.Unlock()
	fake.DescribePrefixListsRequestStub = nil
	if fake.describePrefixListsRequestReturnsOnCall == nil {
		fake.describePrefixListsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribePrefixListsOutput
		})
	}
	fake.describePrefixListsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribePrefixListsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrefixListsWithContext(arg1 aws.Context, arg2 *ec2.DescribePrefixListsInput, arg3 ...request.Option) (*ec2.DescribePrefixListsOutput, error) {
	fake.describePrefixListsWithContextMutex.Lock()
	ret, specificReturn := fake.describePrefixListsWithContextReturnsOnCall[len(fake.describePrefixListsWithContextArgsForCall)]
	fake.describePrefixListsWithContextArgsForCall = append(fake.describePrefixListsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribePrefixListsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribePrefixListsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePrefixListsWithContextMutex.Unlock()
	if fake.DescribePrefixListsWithContextStub != nil {
		return fake.DescribePrefixListsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePrefixListsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePrefixListsWithContextCallCount() int {
	fake.describePrefixListsWithContextMutex.RLock()
	defer fake.describePrefixListsWithContextMutex.RUnlock()
	return len(fake.describePrefixListsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribePrefixListsWithContextCalls(stub func(aws.Context, *ec2.DescribePrefixListsInput, ...request.Option) (*ec2.DescribePrefixListsOutput, error)) {
	fake.describePrefixListsWithContextMutex.Lock()
	defer fake.describePrefixListsWithContextMutex.Unlock()
	fake.DescribePrefixListsWithContextStub = stub
}

func (fake *FakeEC2API) DescribePrefixListsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribePrefixListsInput, []request.Option) {
	fake.describePrefixListsWithContextMutex.RLock()
	defer fake.describePrefixListsWithContextMutex.RUnlock()
	argsForCall := fake.describePrefixListsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribePrefixListsWithContextReturns(result1 *ec2.DescribePrefixListsOutput, result2 error) {
	fake.describePrefixListsWithContextMutex.Lock()
	defer fake.describePrefixListsWithContextMutex.Unlock()
	fake.DescribePrefixListsWithContextStub = nil
	fake.describePrefixListsWithContextReturns = struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrefixListsWithContextReturnsOnCall(i int, result1 *ec2.DescribePrefixListsOutput, result2 error) {
	fake.describePrefixListsWithContextMutex.Lock()
	defer fake.describePrefixListsWithContextMutex.Unlock()
	fake.DescribePrefixListsWithContextStub = nil
	if fake.describePrefixListsWithContextReturnsOnCall == nil {
		fake.describePrefixListsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePrefixListsOutput
			result2 error
		})
	}
	fake.describePrefixListsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribePrefixListsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrincipalIdFormat(arg1 *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error) {
	fake.describePrincipalIdFormatMutex.Lock()
	ret, specificReturn := fake.describePrincipalIdFormatReturnsOnCall[len(fake.describePrincipalIdFormatArgsForCall)]
	fake.describePrincipalIdFormatArgsForCall = append(fake.describePrincipalIdFormatArgsForCall, struct {
		arg1 *ec2.DescribePrincipalIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribePrincipalIdFormat", []interface{}{arg1})
	fake.describePrincipalIdFormatMutex.Unlock()
	if fake.DescribePrincipalIdFormatStub != nil {
		return fake.DescribePrincipalIdFormatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePrincipalIdFormatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePrincipalIdFormatCallCount() int {
	fake.describePrincipalIdFormatMutex.RLock()
	defer fake.describePrincipalIdFormatMutex.RUnlock()
	return len(fake.describePrincipalIdFormatArgsForCall)
}

func (fake *FakeEC2API) DescribePrincipalIdFormatCalls(stub func(*ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error)) {
	fake.describePrincipalIdFormatMutex.Lock()
	defer fake.describePrincipalIdFormatMutex.Unlock()
	fake.DescribePrincipalIdFormatStub = stub
}

func (fake *FakeEC2API) DescribePrincipalIdFormatArgsForCall(i int) *ec2.DescribePrincipalIdFormatInput {
	fake.describePrincipalIdFormatMutex.RLock()
	defer fake.describePrincipalIdFormatMutex.RUnlock()
	argsForCall := fake.describePrincipalIdFormatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePrincipalIdFormatReturns(result1 *ec2.DescribePrincipalIdFormatOutput, result2 error) {
	fake.describePrincipalIdFormatMutex.Lock()
	defer fake.describePrincipalIdFormatMutex.Unlock()
	fake.DescribePrincipalIdFormatStub = nil
	fake.describePrincipalIdFormatReturns = struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrincipalIdFormatReturnsOnCall(i int, result1 *ec2.DescribePrincipalIdFormatOutput, result2 error) {
	fake.describePrincipalIdFormatMutex.Lock()
	defer fake.describePrincipalIdFormatMutex.Unlock()
	fake.DescribePrincipalIdFormatStub = nil
	if fake.describePrincipalIdFormatReturnsOnCall == nil {
		fake.describePrincipalIdFormatReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePrincipalIdFormatOutput
			result2 error
		})
	}
	fake.describePrincipalIdFormatReturnsOnCall[i] = struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrincipalIdFormatRequest(arg1 *ec2.DescribePrincipalIdFormatInput) (*request.Request, *ec2.DescribePrincipalIdFormatOutput) {
	fake.describePrincipalIdFormatRequestMutex.Lock()
	ret, specificReturn := fake.describePrincipalIdFormatRequestReturnsOnCall[len(fake.describePrincipalIdFormatRequestArgsForCall)]
	fake.describePrincipalIdFormatRequestArgsForCall = append(fake.describePrincipalIdFormatRequestArgsForCall, struct {
		arg1 *ec2.DescribePrincipalIdFormatInput
	}{arg1})
	fake.recordInvocation("DescribePrincipalIdFormatRequest", []interface{}{arg1})
	fake.describePrincipalIdFormatRequestMutex.Unlock()
	if fake.DescribePrincipalIdFormatRequestStub != nil {
		return fake.DescribePrincipalIdFormatRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePrincipalIdFormatRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePrincipalIdFormatRequestCallCount() int {
	fake.describePrincipalIdFormatRequestMutex.RLock()
	defer fake.describePrincipalIdFormatRequestMutex.RUnlock()
	return len(fake.describePrincipalIdFormatRequestArgsForCall)
}

func (fake *FakeEC2API) DescribePrincipalIdFormatRequestCalls(stub func(*ec2.DescribePrincipalIdFormatInput) (*request.Request, *ec2.DescribePrincipalIdFormatOutput)) {
	fake.describePrincipalIdFormatRequestMutex.Lock()
	defer fake.describePrincipalIdFormatRequestMutex.Unlock()
	fake.DescribePrincipalIdFormatRequestStub = stub
}

func (fake *FakeEC2API) DescribePrincipalIdFormatRequestArgsForCall(i int) *ec2.DescribePrincipalIdFormatInput {
	fake.describePrincipalIdFormatRequestMutex.RLock()
	defer fake.describePrincipalIdFormatRequestMutex.RUnlock()
	argsForCall := fake.describePrincipalIdFormatRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePrincipalIdFormatRequestReturns(result1 *request.Request, result2 *ec2.DescribePrincipalIdFormatOutput) {
	fake.describePrincipalIdFormatRequestMutex.Lock()
	defer fake.describePrincipalIdFormatRequestMutex.Unlock()
	fake.DescribePrincipalIdFormatRequestStub = nil
	fake.describePrincipalIdFormatRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribePrincipalIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrincipalIdFormatRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribePrincipalIdFormatOutput) {
	fake.describePrincipalIdFormatRequestMutex.Lock()
	defer fake.describePrincipalIdFormatRequestMutex.Unlock()
	fake.DescribePrincipalIdFormatRequestStub = nil
	if fake.describePrincipalIdFormatRequestReturnsOnCall == nil {
		fake.describePrincipalIdFormatRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribePrincipalIdFormatOutput
		})
	}
	fake.describePrincipalIdFormatRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribePrincipalIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrincipalIdFormatWithContext(arg1 aws.Context, arg2 *ec2.DescribePrincipalIdFormatInput, arg3 ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error) {
	fake.describePrincipalIdFormatWithContextMutex.Lock()
	ret, specificReturn := fake.describePrincipalIdFormatWithContextReturnsOnCall[len(fake.describePrincipalIdFormatWithContextArgsForCall)]
	fake.describePrincipalIdFormatWithContextArgsForCall = append(fake.describePrincipalIdFormatWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribePrincipalIdFormatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribePrincipalIdFormatWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePrincipalIdFormatWithContextMutex.Unlock()
	if fake.DescribePrincipalIdFormatWithContextStub != nil {
		return fake.DescribePrincipalIdFormatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePrincipalIdFormatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePrincipalIdFormatWithContextCallCount() int {
	fake.describePrincipalIdFormatWithContextMutex.RLock()
	defer fake.describePrincipalIdFormatWithContextMutex.RUnlock()
	return len(fake.describePrincipalIdFormatWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribePrincipalIdFormatWithContextCalls(stub func(aws.Context, *ec2.DescribePrincipalIdFormatInput, ...request.Option) (*ec2.DescribePrincipalIdFormatOutput, error)) {
	fake.describePrincipalIdFormatWithContextMutex.Lock()
	defer fake.describePrincipalIdFormatWithContextMutex.Unlock()
	fake.DescribePrincipalIdFormatWithContextStub = stub
}

func (fake *FakeEC2API) DescribePrincipalIdFormatWithContextArgsForCall(i int) (aws.Context, *ec2.DescribePrincipalIdFormatInput, []request.Option) {
	fake.describePrincipalIdFormatWithContextMutex.RLock()
	defer fake.describePrincipalIdFormatWithContextMutex.RUnlock()
	argsForCall := fake.describePrincipalIdFormatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribePrincipalIdFormatWithContextReturns(result1 *ec2.DescribePrincipalIdFormatOutput, result2 error) {
	fake.describePrincipalIdFormatWithContextMutex.Lock()
	defer fake.describePrincipalIdFormatWithContextMutex.Unlock()
	fake.DescribePrincipalIdFormatWithContextStub = nil
	fake.describePrincipalIdFormatWithContextReturns = struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePrincipalIdFormatWithContextReturnsOnCall(i int, result1 *ec2.DescribePrincipalIdFormatOutput, result2 error) {
	fake.describePrincipalIdFormatWithContextMutex.Lock()
	defer fake.describePrincipalIdFormatWithContextMutex.Unlock()
	fake.DescribePrincipalIdFormatWithContextStub = nil
	if fake.describePrincipalIdFormatWithContextReturnsOnCall == nil {
		fake.describePrincipalIdFormatWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePrincipalIdFormatOutput
			result2 error
		})
	}
	fake.describePrincipalIdFormatWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribePrincipalIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePublicIpv4Pools(arg1 *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	fake.describePublicIpv4PoolsMutex.Lock()
	ret, specificReturn := fake.describePublicIpv4PoolsReturnsOnCall[len(fake.describePublicIpv4PoolsArgsForCall)]
	fake.describePublicIpv4PoolsArgsForCall = append(fake.describePublicIpv4PoolsArgsForCall, struct {
		arg1 *ec2.DescribePublicIpv4PoolsInput
	}{arg1})
	fake.recordInvocation("DescribePublicIpv4Pools", []interface{}{arg1})
	fake.describePublicIpv4PoolsMutex.Unlock()
	if fake.DescribePublicIpv4PoolsStub != nil {
		return fake.DescribePublicIpv4PoolsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePublicIpv4PoolsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsCallCount() int {
	fake.describePublicIpv4PoolsMutex.RLock()
	defer fake.describePublicIpv4PoolsMutex.RUnlock()
	return len(fake.describePublicIpv4PoolsArgsForCall)
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsCalls(stub func(*ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error)) {
	fake.describePublicIpv4PoolsMutex.Lock()
	defer fake.describePublicIpv4PoolsMutex.Unlock()
	fake.DescribePublicIpv4PoolsStub = stub
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsArgsForCall(i int) *ec2.DescribePublicIpv4PoolsInput {
	fake.describePublicIpv4PoolsMutex.RLock()
	defer fake.describePublicIpv4PoolsMutex.RUnlock()
	argsForCall := fake.describePublicIpv4PoolsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsReturns(result1 *ec2.DescribePublicIpv4PoolsOutput, result2 error) {
	fake.describePublicIpv4PoolsMutex.Lock()
	defer fake.describePublicIpv4PoolsMutex.Unlock()
	fake.DescribePublicIpv4PoolsStub = nil
	fake.describePublicIpv4PoolsReturns = struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsReturnsOnCall(i int, result1 *ec2.DescribePublicIpv4PoolsOutput, result2 error) {
	fake.describePublicIpv4PoolsMutex.Lock()
	defer fake.describePublicIpv4PoolsMutex.Unlock()
	fake.DescribePublicIpv4PoolsStub = nil
	if fake.describePublicIpv4PoolsReturnsOnCall == nil {
		fake.describePublicIpv4PoolsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePublicIpv4PoolsOutput
			result2 error
		})
	}
	fake.describePublicIpv4PoolsReturnsOnCall[i] = struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsRequest(arg1 *ec2.DescribePublicIpv4PoolsInput) (*request.Request, *ec2.DescribePublicIpv4PoolsOutput) {
	fake.describePublicIpv4PoolsRequestMutex.Lock()
	ret, specificReturn := fake.describePublicIpv4PoolsRequestReturnsOnCall[len(fake.describePublicIpv4PoolsRequestArgsForCall)]
	fake.describePublicIpv4PoolsRequestArgsForCall = append(fake.describePublicIpv4PoolsRequestArgsForCall, struct {
		arg1 *ec2.DescribePublicIpv4PoolsInput
	}{arg1})
	fake.recordInvocation("DescribePublicIpv4PoolsRequest", []interface{}{arg1})
	fake.describePublicIpv4PoolsRequestMutex.Unlock()
	if fake.DescribePublicIpv4PoolsRequestStub != nil {
		return fake.DescribePublicIpv4PoolsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePublicIpv4PoolsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsRequestCallCount() int {
	fake.describePublicIpv4PoolsRequestMutex.RLock()
	defer fake.describePublicIpv4PoolsRequestMutex.RUnlock()
	return len(fake.describePublicIpv4PoolsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsRequestCalls(stub func(*ec2.DescribePublicIpv4PoolsInput) (*request.Request, *ec2.DescribePublicIpv4PoolsOutput)) {
	fake.describePublicIpv4PoolsRequestMutex.Lock()
	defer fake.describePublicIpv4PoolsRequestMutex.Unlock()
	fake.DescribePublicIpv4PoolsRequestStub = stub
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsRequestArgsForCall(i int) *ec2.DescribePublicIpv4PoolsInput {
	fake.describePublicIpv4PoolsRequestMutex.RLock()
	defer fake.describePublicIpv4PoolsRequestMutex.RUnlock()
	argsForCall := fake.describePublicIpv4PoolsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsRequestReturns(result1 *request.Request, result2 *ec2.DescribePublicIpv4PoolsOutput) {
	fake.describePublicIpv4PoolsRequestMutex.Lock()
	defer fake.describePublicIpv4PoolsRequestMutex.Unlock()
	fake.DescribePublicIpv4PoolsRequestStub = nil
	fake.describePublicIpv4PoolsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribePublicIpv4PoolsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribePublicIpv4PoolsOutput) {
	fake.describePublicIpv4PoolsRequestMutex.Lock()
	defer fake.describePublicIpv4PoolsRequestMutex.Unlock()
	fake.DescribePublicIpv4PoolsRequestStub = nil
	if fake.describePublicIpv4PoolsRequestReturnsOnCall == nil {
		fake.describePublicIpv4PoolsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribePublicIpv4PoolsOutput
		})
	}
	fake.describePublicIpv4PoolsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribePublicIpv4PoolsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsWithContext(arg1 aws.Context, arg2 *ec2.DescribePublicIpv4PoolsInput, arg3 ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	fake.describePublicIpv4PoolsWithContextMutex.Lock()
	ret, specificReturn := fake.describePublicIpv4PoolsWithContextReturnsOnCall[len(fake.describePublicIpv4PoolsWithContextArgsForCall)]
	fake.describePublicIpv4PoolsWithContextArgsForCall = append(fake.describePublicIpv4PoolsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribePublicIpv4PoolsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribePublicIpv4PoolsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describePublicIpv4PoolsWithContextMutex.Unlock()
	if fake.DescribePublicIpv4PoolsWithContextStub != nil {
		return fake.DescribePublicIpv4PoolsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describePublicIpv4PoolsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsWithContextCallCount() int {
	fake.describePublicIpv4PoolsWithContextMutex.RLock()
	defer fake.describePublicIpv4PoolsWithContextMutex.RUnlock()
	return len(fake.describePublicIpv4PoolsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsWithContextCalls(stub func(aws.Context, *ec2.DescribePublicIpv4PoolsInput, ...request.Option) (*ec2.DescribePublicIpv4PoolsOutput, error)) {
	fake.describePublicIpv4PoolsWithContextMutex.Lock()
	defer fake.describePublicIpv4PoolsWithContextMutex.Unlock()
	fake.DescribePublicIpv4PoolsWithContextStub = stub
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribePublicIpv4PoolsInput, []request.Option) {
	fake.describePublicIpv4PoolsWithContextMutex.RLock()
	defer fake.describePublicIpv4PoolsWithContextMutex.RUnlock()
	argsForCall := fake.describePublicIpv4PoolsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsWithContextReturns(result1 *ec2.DescribePublicIpv4PoolsOutput, result2 error) {
	fake.describePublicIpv4PoolsWithContextMutex.Lock()
	defer fake.describePublicIpv4PoolsWithContextMutex.Unlock()
	fake.DescribePublicIpv4PoolsWithContextStub = nil
	fake.describePublicIpv4PoolsWithContextReturns = struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribePublicIpv4PoolsWithContextReturnsOnCall(i int, result1 *ec2.DescribePublicIpv4PoolsOutput, result2 error) {
	fake.describePublicIpv4PoolsWithContextMutex.Lock()
	defer fake.describePublicIpv4PoolsWithContextMutex.Unlock()
	fake.DescribePublicIpv4PoolsWithContextStub = nil
	if fake.describePublicIpv4PoolsWithContextReturnsOnCall == nil {
		fake.describePublicIpv4PoolsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribePublicIpv4PoolsOutput
			result2 error
		})
	}
	fake.describePublicIpv4PoolsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribePublicIpv4PoolsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRegions(arg1 *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	fake.describeRegionsMutex.Lock()
	ret, specificReturn := fake.describeRegionsReturnsOnCall[len(fake.describeRegionsArgsForCall)]
	fake.describeRegionsArgsForCall = append(fake.describeRegionsArgsForCall, struct {
		arg1 *ec2.DescribeRegionsInput
	}{arg1})
	fake.recordInvocation("DescribeRegions", []interface{}{arg1})
	fake.describeRegionsMutex.Unlock()
	if fake.DescribeRegionsStub != nil {
		return fake.DescribeRegionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRegionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeRegionsCallCount() int {
	fake.describeRegionsMutex.RLock()
	defer fake.describeRegionsMutex.RUnlock()
	return len(fake.describeRegionsArgsForCall)
}

func (fake *FakeEC2API) DescribeRegionsCalls(stub func(*ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error)) {
	fake.describeRegionsMutex.Lock()
	defer fake.describeRegionsMutex.Unlock()
	fake.DescribeRegionsStub = stub
}

func (fake *FakeEC2API) DescribeRegionsArgsForCall(i int) *ec2.DescribeRegionsInput {
	fake.describeRegionsMutex.RLock()
	defer fake.describeRegionsMutex.RUnlock()
	argsForCall := fake.describeRegionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeRegionsReturns(result1 *ec2.DescribeRegionsOutput, result2 error) {
	fake.describeRegionsMutex.Lock()
	defer fake.describeRegionsMutex.Unlock()
	fake.DescribeRegionsStub = nil
	fake.describeRegionsReturns = struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRegionsReturnsOnCall(i int, result1 *ec2.DescribeRegionsOutput, result2 error) {
	fake.describeRegionsMutex.Lock()
	defer fake.describeRegionsMutex.Unlock()
	fake.DescribeRegionsStub = nil
	if fake.describeRegionsReturnsOnCall == nil {
		fake.describeRegionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeRegionsOutput
			result2 error
		})
	}
	fake.describeRegionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRegionsRequest(arg1 *ec2.DescribeRegionsInput) (*request.Request, *ec2.DescribeRegionsOutput) {
	fake.describeRegionsRequestMutex.Lock()
	ret, specificReturn := fake.describeRegionsRequestReturnsOnCall[len(fake.describeRegionsRequestArgsForCall)]
	fake.describeRegionsRequestArgsForCall = append(fake.describeRegionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeRegionsInput
	}{arg1})
	fake.recordInvocation("DescribeRegionsRequest", []interface{}{arg1})
	fake.describeRegionsRequestMutex.Unlock()
	if fake.DescribeRegionsRequestStub != nil {
		return fake.DescribeRegionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRegionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeRegionsRequestCallCount() int {
	fake.describeRegionsRequestMutex.RLock()
	defer fake.describeRegionsRequestMutex.RUnlock()
	return len(fake.describeRegionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeRegionsRequestCalls(stub func(*ec2.DescribeRegionsInput) (*request.Request, *ec2.DescribeRegionsOutput)) {
	fake.describeRegionsRequestMutex.Lock()
	defer fake.describeRegionsRequestMutex.Unlock()
	fake.DescribeRegionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeRegionsRequestArgsForCall(i int) *ec2.DescribeRegionsInput {
	fake.describeRegionsRequestMutex.RLock()
	defer fake.describeRegionsRequestMutex.RUnlock()
	argsForCall := fake.describeRegionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeRegionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeRegionsOutput) {
	fake.describeRegionsRequestMutex.Lock()
	defer fake.describeRegionsRequestMutex.Unlock()
	fake.DescribeRegionsRequestStub = nil
	fake.describeRegionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeRegionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRegionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeRegionsOutput) {
	fake.describeRegionsRequestMutex.Lock()
	defer fake.describeRegionsRequestMutex.Unlock()
	fake.DescribeRegionsRequestStub = nil
	if fake.describeRegionsRequestReturnsOnCall == nil {
		fake.describeRegionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeRegionsOutput
		})
	}
	fake.describeRegionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeRegionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRegionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeRegionsInput, arg3 ...request.Option) (*ec2.DescribeRegionsOutput, error) {
	fake.describeRegionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeRegionsWithContextReturnsOnCall[len(fake.describeRegionsWithContextArgsForCall)]
	fake.describeRegionsWithContextArgsForCall = append(fake.describeRegionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeRegionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeRegionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeRegionsWithContextMutex.Unlock()
	if fake.DescribeRegionsWithContextStub != nil {
		return fake.DescribeRegionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRegionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeRegionsWithContextCallCount() int {
	fake.describeRegionsWithContextMutex.RLock()
	defer fake.describeRegionsWithContextMutex.RUnlock()
	return len(fake.describeRegionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeRegionsWithContextCalls(stub func(aws.Context, *ec2.DescribeRegionsInput, ...request.Option) (*ec2.DescribeRegionsOutput, error)) {
	fake.describeRegionsWithContextMutex.Lock()
	defer fake.describeRegionsWithContextMutex.Unlock()
	fake.DescribeRegionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeRegionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeRegionsInput, []request.Option) {
	fake.describeRegionsWithContextMutex.RLock()
	defer fake.describeRegionsWithContextMutex.RUnlock()
	argsForCall := fake.describeRegionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeRegionsWithContextReturns(result1 *ec2.DescribeRegionsOutput, result2 error) {
	fake.describeRegionsWithContextMutex.Lock()
	defer fake.describeRegionsWithContextMutex.Unlock()
	fake.DescribeRegionsWithContextStub = nil
	fake.describeRegionsWithContextReturns = struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRegionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeRegionsOutput, result2 error) {
	fake.describeRegionsWithContextMutex.Lock()
	defer fake.describeRegionsWithContextMutex.Unlock()
	fake.DescribeRegionsWithContextStub = nil
	if fake.describeRegionsWithContextReturnsOnCall == nil {
		fake.describeRegionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeRegionsOutput
			result2 error
		})
	}
	fake.describeRegionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeRegionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstances(arg1 *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	fake.describeReservedInstancesMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesReturnsOnCall[len(fake.describeReservedInstancesArgsForCall)]
	fake.describeReservedInstancesArgsForCall = append(fake.describeReservedInstancesArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstances", []interface{}{arg1})
	fake.describeReservedInstancesMutex.Unlock()
	if fake.DescribeReservedInstancesStub != nil {
		return fake.DescribeReservedInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesCallCount() int {
	fake.describeReservedInstancesMutex.RLock()
	defer fake.describeReservedInstancesMutex.RUnlock()
	return len(fake.describeReservedInstancesArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesCalls(stub func(*ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error)) {
	fake.describeReservedInstancesMutex.Lock()
	defer fake.describeReservedInstancesMutex.Unlock()
	fake.DescribeReservedInstancesStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesArgsForCall(i int) *ec2.DescribeReservedInstancesInput {
	fake.describeReservedInstancesMutex.RLock()
	defer fake.describeReservedInstancesMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesReturns(result1 *ec2.DescribeReservedInstancesOutput, result2 error) {
	fake.describeReservedInstancesMutex.Lock()
	defer fake.describeReservedInstancesMutex.Unlock()
	fake.DescribeReservedInstancesStub = nil
	fake.describeReservedInstancesReturns = struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesOutput, result2 error) {
	fake.describeReservedInstancesMutex.Lock()
	defer fake.describeReservedInstancesMutex.Unlock()
	fake.DescribeReservedInstancesStub = nil
	if fake.describeReservedInstancesReturnsOnCall == nil {
		fake.describeReservedInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesOutput
			result2 error
		})
	}
	fake.describeReservedInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesListings(arg1 *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	fake.describeReservedInstancesListingsMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesListingsReturnsOnCall[len(fake.describeReservedInstancesListingsArgsForCall)]
	fake.describeReservedInstancesListingsArgsForCall = append(fake.describeReservedInstancesListingsArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesListingsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesListings", []interface{}{arg1})
	fake.describeReservedInstancesListingsMutex.Unlock()
	if fake.DescribeReservedInstancesListingsStub != nil {
		return fake.DescribeReservedInstancesListingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesListingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsCallCount() int {
	fake.describeReservedInstancesListingsMutex.RLock()
	defer fake.describeReservedInstancesListingsMutex.RUnlock()
	return len(fake.describeReservedInstancesListingsArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsCalls(stub func(*ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error)) {
	fake.describeReservedInstancesListingsMutex.Lock()
	defer fake.describeReservedInstancesListingsMutex.Unlock()
	fake.DescribeReservedInstancesListingsStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsArgsForCall(i int) *ec2.DescribeReservedInstancesListingsInput {
	fake.describeReservedInstancesListingsMutex.RLock()
	defer fake.describeReservedInstancesListingsMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesListingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsReturns(result1 *ec2.DescribeReservedInstancesListingsOutput, result2 error) {
	fake.describeReservedInstancesListingsMutex.Lock()
	defer fake.describeReservedInstancesListingsMutex.Unlock()
	fake.DescribeReservedInstancesListingsStub = nil
	fake.describeReservedInstancesListingsReturns = struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesListingsOutput, result2 error) {
	fake.describeReservedInstancesListingsMutex.Lock()
	defer fake.describeReservedInstancesListingsMutex.Unlock()
	fake.DescribeReservedInstancesListingsStub = nil
	if fake.describeReservedInstancesListingsReturnsOnCall == nil {
		fake.describeReservedInstancesListingsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesListingsOutput
			result2 error
		})
	}
	fake.describeReservedInstancesListingsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsRequest(arg1 *ec2.DescribeReservedInstancesListingsInput) (*request.Request, *ec2.DescribeReservedInstancesListingsOutput) {
	fake.describeReservedInstancesListingsRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesListingsRequestReturnsOnCall[len(fake.describeReservedInstancesListingsRequestArgsForCall)]
	fake.describeReservedInstancesListingsRequestArgsForCall = append(fake.describeReservedInstancesListingsRequestArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesListingsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesListingsRequest", []interface{}{arg1})
	fake.describeReservedInstancesListingsRequestMutex.Unlock()
	if fake.DescribeReservedInstancesListingsRequestStub != nil {
		return fake.DescribeReservedInstancesListingsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesListingsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsRequestCallCount() int {
	fake.describeReservedInstancesListingsRequestMutex.RLock()
	defer fake.describeReservedInstancesListingsRequestMutex.RUnlock()
	return len(fake.describeReservedInstancesListingsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsRequestCalls(stub func(*ec2.DescribeReservedInstancesListingsInput) (*request.Request, *ec2.DescribeReservedInstancesListingsOutput)) {
	fake.describeReservedInstancesListingsRequestMutex.Lock()
	defer fake.describeReservedInstancesListingsRequestMutex.Unlock()
	fake.DescribeReservedInstancesListingsRequestStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsRequestArgsForCall(i int) *ec2.DescribeReservedInstancesListingsInput {
	fake.describeReservedInstancesListingsRequestMutex.RLock()
	defer fake.describeReservedInstancesListingsRequestMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesListingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsRequestReturns(result1 *request.Request, result2 *ec2.DescribeReservedInstancesListingsOutput) {
	fake.describeReservedInstancesListingsRequestMutex.Lock()
	defer fake.describeReservedInstancesListingsRequestMutex.Unlock()
	fake.DescribeReservedInstancesListingsRequestStub = nil
	fake.describeReservedInstancesListingsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesListingsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeReservedInstancesListingsOutput) {
	fake.describeReservedInstancesListingsRequestMutex.Lock()
	defer fake.describeReservedInstancesListingsRequestMutex.Unlock()
	fake.DescribeReservedInstancesListingsRequestStub = nil
	if fake.describeReservedInstancesListingsRequestReturnsOnCall == nil {
		fake.describeReservedInstancesListingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeReservedInstancesListingsOutput
		})
	}
	fake.describeReservedInstancesListingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesListingsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsWithContext(arg1 aws.Context, arg2 *ec2.DescribeReservedInstancesListingsInput, arg3 ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	fake.describeReservedInstancesListingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesListingsWithContextReturnsOnCall[len(fake.describeReservedInstancesListingsWithContextArgsForCall)]
	fake.describeReservedInstancesListingsWithContextArgsForCall = append(fake.describeReservedInstancesListingsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesListingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReservedInstancesListingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedInstancesListingsWithContextMutex.Unlock()
	if fake.DescribeReservedInstancesListingsWithContextStub != nil {
		return fake.DescribeReservedInstancesListingsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesListingsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsWithContextCallCount() int {
	fake.describeReservedInstancesListingsWithContextMutex.RLock()
	defer fake.describeReservedInstancesListingsWithContextMutex.RUnlock()
	return len(fake.describeReservedInstancesListingsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsWithContextCalls(stub func(aws.Context, *ec2.DescribeReservedInstancesListingsInput, ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error)) {
	fake.describeReservedInstancesListingsWithContextMutex.Lock()
	defer fake.describeReservedInstancesListingsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesListingsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeReservedInstancesListingsInput, []request.Option) {
	fake.describeReservedInstancesListingsWithContextMutex.RLock()
	defer fake.describeReservedInstancesListingsWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesListingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsWithContextReturns(result1 *ec2.DescribeReservedInstancesListingsOutput, result2 error) {
	fake.describeReservedInstancesListingsWithContextMutex.Lock()
	defer fake.describeReservedInstancesListingsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesListingsWithContextStub = nil
	fake.describeReservedInstancesListingsWithContextReturns = struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesListingsWithContextReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesListingsOutput, result2 error) {
	fake.describeReservedInstancesListingsWithContextMutex.Lock()
	defer fake.describeReservedInstancesListingsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesListingsWithContextStub = nil
	if fake.describeReservedInstancesListingsWithContextReturnsOnCall == nil {
		fake.describeReservedInstancesListingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesListingsOutput
			result2 error
		})
	}
	fake.describeReservedInstancesListingsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesListingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesModifications(arg1 *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	fake.describeReservedInstancesModificationsMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesModificationsReturnsOnCall[len(fake.describeReservedInstancesModificationsArgsForCall)]
	fake.describeReservedInstancesModificationsArgsForCall = append(fake.describeReservedInstancesModificationsArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesModificationsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesModifications", []interface{}{arg1})
	fake.describeReservedInstancesModificationsMutex.Unlock()
	if fake.DescribeReservedInstancesModificationsStub != nil {
		return fake.DescribeReservedInstancesModificationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesModificationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsCallCount() int {
	fake.describeReservedInstancesModificationsMutex.RLock()
	defer fake.describeReservedInstancesModificationsMutex.RUnlock()
	return len(fake.describeReservedInstancesModificationsArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsCalls(stub func(*ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error)) {
	fake.describeReservedInstancesModificationsMutex.Lock()
	defer fake.describeReservedInstancesModificationsMutex.Unlock()
	fake.DescribeReservedInstancesModificationsStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsArgsForCall(i int) *ec2.DescribeReservedInstancesModificationsInput {
	fake.describeReservedInstancesModificationsMutex.RLock()
	defer fake.describeReservedInstancesModificationsMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesModificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsReturns(result1 *ec2.DescribeReservedInstancesModificationsOutput, result2 error) {
	fake.describeReservedInstancesModificationsMutex.Lock()
	defer fake.describeReservedInstancesModificationsMutex.Unlock()
	fake.DescribeReservedInstancesModificationsStub = nil
	fake.describeReservedInstancesModificationsReturns = struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesModificationsOutput, result2 error) {
	fake.describeReservedInstancesModificationsMutex.Lock()
	defer fake.describeReservedInstancesModificationsMutex.Unlock()
	fake.DescribeReservedInstancesModificationsStub = nil
	if fake.describeReservedInstancesModificationsReturnsOnCall == nil {
		fake.describeReservedInstancesModificationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesModificationsOutput
			result2 error
		})
	}
	fake.describeReservedInstancesModificationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPages(arg1 *ec2.DescribeReservedInstancesModificationsInput, arg2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error {
	fake.describeReservedInstancesModificationsPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesModificationsPagesReturnsOnCall[len(fake.describeReservedInstancesModificationsPagesArgsForCall)]
	fake.describeReservedInstancesModificationsPagesArgsForCall = append(fake.describeReservedInstancesModificationsPagesArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesModificationsInput
		arg2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeReservedInstancesModificationsPages", []interface{}{arg1, arg2})
	fake.describeReservedInstancesModificationsPagesMutex.Unlock()
	if fake.DescribeReservedInstancesModificationsPagesStub != nil {
		return fake.DescribeReservedInstancesModificationsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeReservedInstancesModificationsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesCallCount() int {
	fake.describeReservedInstancesModificationsPagesMutex.RLock()
	defer fake.describeReservedInstancesModificationsPagesMutex.RUnlock()
	return len(fake.describeReservedInstancesModificationsPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesCalls(stub func(*ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error) {
	fake.describeReservedInstancesModificationsPagesMutex.Lock()
	defer fake.describeReservedInstancesModificationsPagesMutex.Unlock()
	fake.DescribeReservedInstancesModificationsPagesStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesArgsForCall(i int) (*ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) {
	fake.describeReservedInstancesModificationsPagesMutex.RLock()
	defer fake.describeReservedInstancesModificationsPagesMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesModificationsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesReturns(result1 error) {
	fake.describeReservedInstancesModificationsPagesMutex.Lock()
	defer fake.describeReservedInstancesModificationsPagesMutex.Unlock()
	fake.DescribeReservedInstancesModificationsPagesStub = nil
	fake.describeReservedInstancesModificationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesReturnsOnCall(i int, result1 error) {
	fake.describeReservedInstancesModificationsPagesMutex.Lock()
	defer fake.describeReservedInstancesModificationsPagesMutex.Unlock()
	fake.DescribeReservedInstancesModificationsPagesStub = nil
	if fake.describeReservedInstancesModificationsPagesReturnsOnCall == nil {
		fake.describeReservedInstancesModificationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedInstancesModificationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeReservedInstancesModificationsInput, arg3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedInstancesModificationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesModificationsPagesWithContextReturnsOnCall[len(fake.describeReservedInstancesModificationsPagesWithContextArgsForCall)]
	fake.describeReservedInstancesModificationsPagesWithContextArgsForCall = append(fake.describeReservedInstancesModificationsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesModificationsInput
		arg3 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeReservedInstancesModificationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedInstancesModificationsPagesWithContextMutex.Unlock()
	if fake.DescribeReservedInstancesModificationsPagesWithContextStub != nil {
		return fake.DescribeReservedInstancesModificationsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeReservedInstancesModificationsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesWithContextCallCount() int {
	fake.describeReservedInstancesModificationsPagesWithContextMutex.RLock()
	defer fake.describeReservedInstancesModificationsPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedInstancesModificationsPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, ...request.Option) error) {
	fake.describeReservedInstancesModificationsPagesWithContextMutex.Lock()
	defer fake.describeReservedInstancesModificationsPagesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesModificationsPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, []request.Option) {
	fake.describeReservedInstancesModificationsPagesWithContextMutex.RLock()
	defer fake.describeReservedInstancesModificationsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesModificationsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesWithContextReturns(result1 error) {
	fake.describeReservedInstancesModificationsPagesWithContextMutex.Lock()
	defer fake.describeReservedInstancesModificationsPagesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesModificationsPagesWithContextStub = nil
	fake.describeReservedInstancesModificationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReservedInstancesModificationsPagesWithContextMutex.Lock()
	defer fake.describeReservedInstancesModificationsPagesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesModificationsPagesWithContextStub = nil
	if fake.describeReservedInstancesModificationsPagesWithContextReturnsOnCall == nil {
		fake.describeReservedInstancesModificationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedInstancesModificationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsRequest(arg1 *ec2.DescribeReservedInstancesModificationsInput) (*request.Request, *ec2.DescribeReservedInstancesModificationsOutput) {
	fake.describeReservedInstancesModificationsRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesModificationsRequestReturnsOnCall[len(fake.describeReservedInstancesModificationsRequestArgsForCall)]
	fake.describeReservedInstancesModificationsRequestArgsForCall = append(fake.describeReservedInstancesModificationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesModificationsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesModificationsRequest", []interface{}{arg1})
	fake.describeReservedInstancesModificationsRequestMutex.Unlock()
	if fake.DescribeReservedInstancesModificationsRequestStub != nil {
		return fake.DescribeReservedInstancesModificationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesModificationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsRequestCallCount() int {
	fake.describeReservedInstancesModificationsRequestMutex.RLock()
	defer fake.describeReservedInstancesModificationsRequestMutex.RUnlock()
	return len(fake.describeReservedInstancesModificationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsRequestCalls(stub func(*ec2.DescribeReservedInstancesModificationsInput) (*request.Request, *ec2.DescribeReservedInstancesModificationsOutput)) {
	fake.describeReservedInstancesModificationsRequestMutex.Lock()
	defer fake.describeReservedInstancesModificationsRequestMutex.Unlock()
	fake.DescribeReservedInstancesModificationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsRequestArgsForCall(i int) *ec2.DescribeReservedInstancesModificationsInput {
	fake.describeReservedInstancesModificationsRequestMutex.RLock()
	defer fake.describeReservedInstancesModificationsRequestMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesModificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeReservedInstancesModificationsOutput) {
	fake.describeReservedInstancesModificationsRequestMutex.Lock()
	defer fake.describeReservedInstancesModificationsRequestMutex.Unlock()
	fake.DescribeReservedInstancesModificationsRequestStub = nil
	fake.describeReservedInstancesModificationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesModificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeReservedInstancesModificationsOutput) {
	fake.describeReservedInstancesModificationsRequestMutex.Lock()
	defer fake.describeReservedInstancesModificationsRequestMutex.Unlock()
	fake.DescribeReservedInstancesModificationsRequestStub = nil
	if fake.describeReservedInstancesModificationsRequestReturnsOnCall == nil {
		fake.describeReservedInstancesModificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeReservedInstancesModificationsOutput
		})
	}
	fake.describeReservedInstancesModificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesModificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeReservedInstancesModificationsInput, arg3 ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	fake.describeReservedInstancesModificationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesModificationsWithContextReturnsOnCall[len(fake.describeReservedInstancesModificationsWithContextArgsForCall)]
	fake.describeReservedInstancesModificationsWithContextArgsForCall = append(fake.describeReservedInstancesModificationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesModificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReservedInstancesModificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedInstancesModificationsWithContextMutex.Unlock()
	if fake.DescribeReservedInstancesModificationsWithContextStub != nil {
		return fake.DescribeReservedInstancesModificationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesModificationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsWithContextCallCount() int {
	fake.describeReservedInstancesModificationsWithContextMutex.RLock()
	defer fake.describeReservedInstancesModificationsWithContextMutex.RUnlock()
	return len(fake.describeReservedInstancesModificationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsWithContextCalls(stub func(aws.Context, *ec2.DescribeReservedInstancesModificationsInput, ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error)) {
	fake.describeReservedInstancesModificationsWithContextMutex.Lock()
	defer fake.describeReservedInstancesModificationsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesModificationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeReservedInstancesModificationsInput, []request.Option) {
	fake.describeReservedInstancesModificationsWithContextMutex.RLock()
	defer fake.describeReservedInstancesModificationsWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesModificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsWithContextReturns(result1 *ec2.DescribeReservedInstancesModificationsOutput, result2 error) {
	fake.describeReservedInstancesModificationsWithContextMutex.Lock()
	defer fake.describeReservedInstancesModificationsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesModificationsWithContextStub = nil
	fake.describeReservedInstancesModificationsWithContextReturns = struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesModificationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesModificationsOutput, result2 error) {
	fake.describeReservedInstancesModificationsWithContextMutex.Lock()
	defer fake.describeReservedInstancesModificationsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesModificationsWithContextStub = nil
	if fake.describeReservedInstancesModificationsWithContextReturnsOnCall == nil {
		fake.describeReservedInstancesModificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesModificationsOutput
			result2 error
		})
	}
	fake.describeReservedInstancesModificationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferings(arg1 *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	fake.describeReservedInstancesOfferingsMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesOfferingsReturnsOnCall[len(fake.describeReservedInstancesOfferingsArgsForCall)]
	fake.describeReservedInstancesOfferingsArgsForCall = append(fake.describeReservedInstancesOfferingsArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesOfferingsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesOfferings", []interface{}{arg1})
	fake.describeReservedInstancesOfferingsMutex.Unlock()
	if fake.DescribeReservedInstancesOfferingsStub != nil {
		return fake.DescribeReservedInstancesOfferingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesOfferingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsCallCount() int {
	fake.describeReservedInstancesOfferingsMutex.RLock()
	defer fake.describeReservedInstancesOfferingsMutex.RUnlock()
	return len(fake.describeReservedInstancesOfferingsArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsCalls(stub func(*ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error)) {
	fake.describeReservedInstancesOfferingsMutex.Lock()
	defer fake.describeReservedInstancesOfferingsMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsArgsForCall(i int) *ec2.DescribeReservedInstancesOfferingsInput {
	fake.describeReservedInstancesOfferingsMutex.RLock()
	defer fake.describeReservedInstancesOfferingsMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesOfferingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsReturns(result1 *ec2.DescribeReservedInstancesOfferingsOutput, result2 error) {
	fake.describeReservedInstancesOfferingsMutex.Lock()
	defer fake.describeReservedInstancesOfferingsMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsStub = nil
	fake.describeReservedInstancesOfferingsReturns = struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesOfferingsOutput, result2 error) {
	fake.describeReservedInstancesOfferingsMutex.Lock()
	defer fake.describeReservedInstancesOfferingsMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsStub = nil
	if fake.describeReservedInstancesOfferingsReturnsOnCall == nil {
		fake.describeReservedInstancesOfferingsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedInstancesOfferingsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPages(arg1 *ec2.DescribeReservedInstancesOfferingsInput, arg2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error {
	fake.describeReservedInstancesOfferingsPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesOfferingsPagesReturnsOnCall[len(fake.describeReservedInstancesOfferingsPagesArgsForCall)]
	fake.describeReservedInstancesOfferingsPagesArgsForCall = append(fake.describeReservedInstancesOfferingsPagesArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesOfferingsInput
		arg2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeReservedInstancesOfferingsPages", []interface{}{arg1, arg2})
	fake.describeReservedInstancesOfferingsPagesMutex.Unlock()
	if fake.DescribeReservedInstancesOfferingsPagesStub != nil {
		return fake.DescribeReservedInstancesOfferingsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeReservedInstancesOfferingsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesCallCount() int {
	fake.describeReservedInstancesOfferingsPagesMutex.RLock()
	defer fake.describeReservedInstancesOfferingsPagesMutex.RUnlock()
	return len(fake.describeReservedInstancesOfferingsPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesCalls(stub func(*ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error) {
	fake.describeReservedInstancesOfferingsPagesMutex.Lock()
	defer fake.describeReservedInstancesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsPagesStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesArgsForCall(i int) (*ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) {
	fake.describeReservedInstancesOfferingsPagesMutex.RLock()
	defer fake.describeReservedInstancesOfferingsPagesMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesOfferingsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesReturns(result1 error) {
	fake.describeReservedInstancesOfferingsPagesMutex.Lock()
	defer fake.describeReservedInstancesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsPagesStub = nil
	fake.describeReservedInstancesOfferingsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesReturnsOnCall(i int, result1 error) {
	fake.describeReservedInstancesOfferingsPagesMutex.Lock()
	defer fake.describeReservedInstancesOfferingsPagesMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsPagesStub = nil
	if fake.describeReservedInstancesOfferingsPagesReturnsOnCall == nil {
		fake.describeReservedInstancesOfferingsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedInstancesOfferingsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeReservedInstancesOfferingsInput, arg3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesOfferingsPagesWithContextReturnsOnCall[len(fake.describeReservedInstancesOfferingsPagesWithContextArgsForCall)]
	fake.describeReservedInstancesOfferingsPagesWithContextArgsForCall = append(fake.describeReservedInstancesOfferingsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesOfferingsInput
		arg3 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeReservedInstancesOfferingsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.Unlock()
	if fake.DescribeReservedInstancesOfferingsPagesWithContextStub != nil {
		return fake.DescribeReservedInstancesOfferingsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeReservedInstancesOfferingsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesWithContextCallCount() int {
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedInstancesOfferingsPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedInstancesOfferingsPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, ...request.Option) error) {
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedInstancesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, []request.Option) {
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedInstancesOfferingsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesOfferingsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesWithContextReturns(result1 error) {
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedInstancesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsPagesWithContextStub = nil
	fake.describeReservedInstancesOfferingsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.Lock()
	defer fake.describeReservedInstancesOfferingsPagesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsPagesWithContextStub = nil
	if fake.describeReservedInstancesOfferingsPagesWithContextReturnsOnCall == nil {
		fake.describeReservedInstancesOfferingsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedInstancesOfferingsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsRequest(arg1 *ec2.DescribeReservedInstancesOfferingsInput) (*request.Request, *ec2.DescribeReservedInstancesOfferingsOutput) {
	fake.describeReservedInstancesOfferingsRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesOfferingsRequestReturnsOnCall[len(fake.describeReservedInstancesOfferingsRequestArgsForCall)]
	fake.describeReservedInstancesOfferingsRequestArgsForCall = append(fake.describeReservedInstancesOfferingsRequestArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesOfferingsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesOfferingsRequest", []interface{}{arg1})
	fake.describeReservedInstancesOfferingsRequestMutex.Unlock()
	if fake.DescribeReservedInstancesOfferingsRequestStub != nil {
		return fake.DescribeReservedInstancesOfferingsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesOfferingsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsRequestCallCount() int {
	fake.describeReservedInstancesOfferingsRequestMutex.RLock()
	defer fake.describeReservedInstancesOfferingsRequestMutex.RUnlock()
	return len(fake.describeReservedInstancesOfferingsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsRequestCalls(stub func(*ec2.DescribeReservedInstancesOfferingsInput) (*request.Request, *ec2.DescribeReservedInstancesOfferingsOutput)) {
	fake.describeReservedInstancesOfferingsRequestMutex.Lock()
	defer fake.describeReservedInstancesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsRequestStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsRequestArgsForCall(i int) *ec2.DescribeReservedInstancesOfferingsInput {
	fake.describeReservedInstancesOfferingsRequestMutex.RLock()
	defer fake.describeReservedInstancesOfferingsRequestMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesOfferingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsRequestReturns(result1 *request.Request, result2 *ec2.DescribeReservedInstancesOfferingsOutput) {
	fake.describeReservedInstancesOfferingsRequestMutex.Lock()
	defer fake.describeReservedInstancesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsRequestStub = nil
	fake.describeReservedInstancesOfferingsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeReservedInstancesOfferingsOutput) {
	fake.describeReservedInstancesOfferingsRequestMutex.Lock()
	defer fake.describeReservedInstancesOfferingsRequestMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsRequestStub = nil
	if fake.describeReservedInstancesOfferingsRequestReturnsOnCall == nil {
		fake.describeReservedInstancesOfferingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeReservedInstancesOfferingsOutput
		})
	}
	fake.describeReservedInstancesOfferingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsWithContext(arg1 aws.Context, arg2 *ec2.DescribeReservedInstancesOfferingsInput, arg3 ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	fake.describeReservedInstancesOfferingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesOfferingsWithContextReturnsOnCall[len(fake.describeReservedInstancesOfferingsWithContextArgsForCall)]
	fake.describeReservedInstancesOfferingsWithContextArgsForCall = append(fake.describeReservedInstancesOfferingsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesOfferingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReservedInstancesOfferingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedInstancesOfferingsWithContextMutex.Unlock()
	if fake.DescribeReservedInstancesOfferingsWithContextStub != nil {
		return fake.DescribeReservedInstancesOfferingsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesOfferingsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsWithContextCallCount() int {
	fake.describeReservedInstancesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedInstancesOfferingsWithContextMutex.RUnlock()
	return len(fake.describeReservedInstancesOfferingsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsWithContextCalls(stub func(aws.Context, *ec2.DescribeReservedInstancesOfferingsInput, ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error)) {
	fake.describeReservedInstancesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedInstancesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeReservedInstancesOfferingsInput, []request.Option) {
	fake.describeReservedInstancesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedInstancesOfferingsWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesOfferingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsWithContextReturns(result1 *ec2.DescribeReservedInstancesOfferingsOutput, result2 error) {
	fake.describeReservedInstancesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedInstancesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsWithContextStub = nil
	fake.describeReservedInstancesOfferingsWithContextReturns = struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesOfferingsWithContextReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesOfferingsOutput, result2 error) {
	fake.describeReservedInstancesOfferingsWithContextMutex.Lock()
	defer fake.describeReservedInstancesOfferingsWithContextMutex.Unlock()
	fake.DescribeReservedInstancesOfferingsWithContextStub = nil
	if fake.describeReservedInstancesOfferingsWithContextReturnsOnCall == nil {
		fake.describeReservedInstancesOfferingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedInstancesOfferingsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesRequest(arg1 *ec2.DescribeReservedInstancesInput) (*request.Request, *ec2.DescribeReservedInstancesOutput) {
	fake.describeReservedInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesRequestReturnsOnCall[len(fake.describeReservedInstancesRequestArgsForCall)]
	fake.describeReservedInstancesRequestArgsForCall = append(fake.describeReservedInstancesRequestArgsForCall, struct {
		arg1 *ec2.DescribeReservedInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeReservedInstancesRequest", []interface{}{arg1})
	fake.describeReservedInstancesRequestMutex.Unlock()
	if fake.DescribeReservedInstancesRequestStub != nil {
		return fake.DescribeReservedInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesRequestCallCount() int {
	fake.describeReservedInstancesRequestMutex.RLock()
	defer fake.describeReservedInstancesRequestMutex.RUnlock()
	return len(fake.describeReservedInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesRequestCalls(stub func(*ec2.DescribeReservedInstancesInput) (*request.Request, *ec2.DescribeReservedInstancesOutput)) {
	fake.describeReservedInstancesRequestMutex.Lock()
	defer fake.describeReservedInstancesRequestMutex.Unlock()
	fake.DescribeReservedInstancesRequestStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesRequestArgsForCall(i int) *ec2.DescribeReservedInstancesInput {
	fake.describeReservedInstancesRequestMutex.RLock()
	defer fake.describeReservedInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeReservedInstancesRequestReturns(result1 *request.Request, result2 *ec2.DescribeReservedInstancesOutput) {
	fake.describeReservedInstancesRequestMutex.Lock()
	defer fake.describeReservedInstancesRequestMutex.Unlock()
	fake.DescribeReservedInstancesRequestStub = nil
	fake.describeReservedInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeReservedInstancesOutput) {
	fake.describeReservedInstancesRequestMutex.Lock()
	defer fake.describeReservedInstancesRequestMutex.Unlock()
	fake.DescribeReservedInstancesRequestStub = nil
	if fake.describeReservedInstancesRequestReturnsOnCall == nil {
		fake.describeReservedInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeReservedInstancesOutput
		})
	}
	fake.describeReservedInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeReservedInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesWithContext(arg1 aws.Context, arg2 *ec2.DescribeReservedInstancesInput, arg3 ...request.Option) (*ec2.DescribeReservedInstancesOutput, error) {
	fake.describeReservedInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedInstancesWithContextReturnsOnCall[len(fake.describeReservedInstancesWithContextArgsForCall)]
	fake.describeReservedInstancesWithContextArgsForCall = append(fake.describeReservedInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeReservedInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReservedInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedInstancesWithContextMutex.Unlock()
	if fake.DescribeReservedInstancesWithContextStub != nil {
		return fake.DescribeReservedInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeReservedInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeReservedInstancesWithContextCallCount() int {
	fake.describeReservedInstancesWithContextMutex.RLock()
	defer fake.describeReservedInstancesWithContextMutex.RUnlock()
	return len(fake.describeReservedInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeReservedInstancesWithContextCalls(stub func(aws.Context, *ec2.DescribeReservedInstancesInput, ...request.Option) (*ec2.DescribeReservedInstancesOutput, error)) {
	fake.describeReservedInstancesWithContextMutex.Lock()
	defer fake.describeReservedInstancesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeReservedInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeReservedInstancesInput, []request.Option) {
	fake.describeReservedInstancesWithContextMutex.RLock()
	defer fake.describeReservedInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeReservedInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeReservedInstancesWithContextReturns(result1 *ec2.DescribeReservedInstancesOutput, result2 error) {
	fake.describeReservedInstancesWithContextMutex.Lock()
	defer fake.describeReservedInstancesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesWithContextStub = nil
	fake.describeReservedInstancesWithContextReturns = struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeReservedInstancesWithContextReturnsOnCall(i int, result1 *ec2.DescribeReservedInstancesOutput, result2 error) {
	fake.describeReservedInstancesWithContextMutex.Lock()
	defer fake.describeReservedInstancesWithContextMutex.Unlock()
	fake.DescribeReservedInstancesWithContextStub = nil
	if fake.describeReservedInstancesWithContextReturnsOnCall == nil {
		fake.describeReservedInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeReservedInstancesOutput
			result2 error
		})
	}
	fake.describeReservedInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRouteTables(arg1 *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	fake.describeRouteTablesMutex.Lock()
	ret, specificReturn := fake.describeRouteTablesReturnsOnCall[len(fake.describeRouteTablesArgsForCall)]
	fake.describeRouteTablesArgsForCall = append(fake.describeRouteTablesArgsForCall, struct {
		arg1 *ec2.DescribeRouteTablesInput
	}{arg1})
	fake.recordInvocation("DescribeRouteTables", []interface{}{arg1})
	fake.describeRouteTablesMutex.Unlock()
	if fake.DescribeRouteTablesStub != nil {
		return fake.DescribeRouteTablesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRouteTablesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeRouteTablesCallCount() int {
	fake.describeRouteTablesMutex.RLock()
	defer fake.describeRouteTablesMutex.RUnlock()
	return len(fake.describeRouteTablesArgsForCall)
}

func (fake *FakeEC2API) DescribeRouteTablesCalls(stub func(*ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error)) {
	fake.describeRouteTablesMutex.Lock()
	defer fake.describeRouteTablesMutex.Unlock()
	fake.DescribeRouteTablesStub = stub
}

func (fake *FakeEC2API) DescribeRouteTablesArgsForCall(i int) *ec2.DescribeRouteTablesInput {
	fake.describeRouteTablesMutex.RLock()
	defer fake.describeRouteTablesMutex.RUnlock()
	argsForCall := fake.describeRouteTablesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeRouteTablesReturns(result1 *ec2.DescribeRouteTablesOutput, result2 error) {
	fake.describeRouteTablesMutex.Lock()
	defer fake.describeRouteTablesMutex.Unlock()
	fake.DescribeRouteTablesStub = nil
	fake.describeRouteTablesReturns = struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRouteTablesReturnsOnCall(i int, result1 *ec2.DescribeRouteTablesOutput, result2 error) {
	fake.describeRouteTablesMutex.Lock()
	defer fake.describeRouteTablesMutex.Unlock()
	fake.DescribeRouteTablesStub = nil
	if fake.describeRouteTablesReturnsOnCall == nil {
		fake.describeRouteTablesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeRouteTablesOutput
			result2 error
		})
	}
	fake.describeRouteTablesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRouteTablesPages(arg1 *ec2.DescribeRouteTablesInput, arg2 func(*ec2.DescribeRouteTablesOutput, bool) bool) error {
	fake.describeRouteTablesPagesMutex.Lock()
	ret, specificReturn := fake.describeRouteTablesPagesReturnsOnCall[len(fake.describeRouteTablesPagesArgsForCall)]
	fake.describeRouteTablesPagesArgsForCall = append(fake.describeRouteTablesPagesArgsForCall, struct {
		arg1 *ec2.DescribeRouteTablesInput
		arg2 func(*ec2.DescribeRouteTablesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeRouteTablesPages", []interface{}{arg1, arg2})
	fake.describeRouteTablesPagesMutex.Unlock()
	if fake.DescribeRouteTablesPagesStub != nil {
		return fake.DescribeRouteTablesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeRouteTablesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeRouteTablesPagesCallCount() int {
	fake.describeRouteTablesPagesMutex.RLock()
	defer fake.describeRouteTablesPagesMutex.RUnlock()
	return len(fake.describeRouteTablesPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeRouteTablesPagesCalls(stub func(*ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool) error) {
	fake.describeRouteTablesPagesMutex.Lock()
	defer fake.describeRouteTablesPagesMutex.Unlock()
	fake.DescribeRouteTablesPagesStub = stub
}

func (fake *FakeEC2API) DescribeRouteTablesPagesArgsForCall(i int) (*ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool) {
	fake.describeRouteTablesPagesMutex.RLock()
	defer fake.describeRouteTablesPagesMutex.RUnlock()
	argsForCall := fake.describeRouteTablesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeRouteTablesPagesReturns(result1 error) {
	fake.describeRouteTablesPagesMutex.Lock()
	defer fake.describeRouteTablesPagesMutex.Unlock()
	fake.DescribeRouteTablesPagesStub = nil
	fake.describeRouteTablesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeRouteTablesPagesReturnsOnCall(i int, result1 error) {
	fake.describeRouteTablesPagesMutex.Lock()
	defer fake.describeRouteTablesPagesMutex.Unlock()
	fake.DescribeRouteTablesPagesStub = nil
	if fake.describeRouteTablesPagesReturnsOnCall == nil {
		fake.describeRouteTablesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeRouteTablesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeRouteTablesPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeRouteTablesInput, arg3 func(*ec2.DescribeRouteTablesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeRouteTablesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeRouteTablesPagesWithContextReturnsOnCall[len(fake.describeRouteTablesPagesWithContextArgsForCall)]
	fake.describeRouteTablesPagesWithContextArgsForCall = append(fake.describeRouteTablesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeRouteTablesInput
		arg3 func(*ec2.DescribeRouteTablesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeRouteTablesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeRouteTablesPagesWithContextMutex.Unlock()
	if fake.DescribeRouteTablesPagesWithContextStub != nil {
		return fake.DescribeRouteTablesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeRouteTablesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeRouteTablesPagesWithContextCallCount() int {
	fake.describeRouteTablesPagesWithContextMutex.RLock()
	defer fake.describeRouteTablesPagesWithContextMutex.RUnlock()
	return len(fake.describeRouteTablesPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeRouteTablesPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool, ...request.Option) error) {
	fake.describeRouteTablesPagesWithContextMutex.Lock()
	defer fake.describeRouteTablesPagesWithContextMutex.Unlock()
	fake.DescribeRouteTablesPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeRouteTablesPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool, []request.Option) {
	fake.describeRouteTablesPagesWithContextMutex.RLock()
	defer fake.describeRouteTablesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeRouteTablesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeRouteTablesPagesWithContextReturns(result1 error) {
	fake.describeRouteTablesPagesWithContextMutex.Lock()
	defer fake.describeRouteTablesPagesWithContextMutex.Unlock()
	fake.DescribeRouteTablesPagesWithContextStub = nil
	fake.describeRouteTablesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeRouteTablesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeRouteTablesPagesWithContextMutex.Lock()
	defer fake.describeRouteTablesPagesWithContextMutex.Unlock()
	fake.DescribeRouteTablesPagesWithContextStub = nil
	if fake.describeRouteTablesPagesWithContextReturnsOnCall == nil {
		fake.describeRouteTablesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeRouteTablesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeRouteTablesRequest(arg1 *ec2.DescribeRouteTablesInput) (*request.Request, *ec2.DescribeRouteTablesOutput) {
	fake.describeRouteTablesRequestMutex.Lock()
	ret, specificReturn := fake.describeRouteTablesRequestReturnsOnCall[len(fake.describeRouteTablesRequestArgsForCall)]
	fake.describeRouteTablesRequestArgsForCall = append(fake.describeRouteTablesRequestArgsForCall, struct {
		arg1 *ec2.DescribeRouteTablesInput
	}{arg1})
	fake.recordInvocation("DescribeRouteTablesRequest", []interface{}{arg1})
	fake.describeRouteTablesRequestMutex.Unlock()
	if fake.DescribeRouteTablesRequestStub != nil {
		return fake.DescribeRouteTablesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRouteTablesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeRouteTablesRequestCallCount() int {
	fake.describeRouteTablesRequestMutex.RLock()
	defer fake.describeRouteTablesRequestMutex.RUnlock()
	return len(fake.describeRouteTablesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeRouteTablesRequestCalls(stub func(*ec2.DescribeRouteTablesInput) (*request.Request, *ec2.DescribeRouteTablesOutput)) {
	fake.describeRouteTablesRequestMutex.Lock()
	defer fake.describeRouteTablesRequestMutex.Unlock()
	fake.DescribeRouteTablesRequestStub = stub
}

func (fake *FakeEC2API) DescribeRouteTablesRequestArgsForCall(i int) *ec2.DescribeRouteTablesInput {
	fake.describeRouteTablesRequestMutex.RLock()
	defer fake.describeRouteTablesRequestMutex.RUnlock()
	argsForCall := fake.describeRouteTablesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeRouteTablesRequestReturns(result1 *request.Request, result2 *ec2.DescribeRouteTablesOutput) {
	fake.describeRouteTablesRequestMutex.Lock()
	defer fake.describeRouteTablesRequestMutex.Unlock()
	fake.DescribeRouteTablesRequestStub = nil
	fake.describeRouteTablesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeRouteTablesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRouteTablesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeRouteTablesOutput) {
	fake.describeRouteTablesRequestMutex.Lock()
	defer fake.describeRouteTablesRequestMutex.Unlock()
	fake.DescribeRouteTablesRequestStub = nil
	if fake.describeRouteTablesRequestReturnsOnCall == nil {
		fake.describeRouteTablesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeRouteTablesOutput
		})
	}
	fake.describeRouteTablesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeRouteTablesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRouteTablesWithContext(arg1 aws.Context, arg2 *ec2.DescribeRouteTablesInput, arg3 ...request.Option) (*ec2.DescribeRouteTablesOutput, error) {
	fake.describeRouteTablesWithContextMutex.Lock()
	ret, specificReturn := fake.describeRouteTablesWithContextReturnsOnCall[len(fake.describeRouteTablesWithContextArgsForCall)]
	fake.describeRouteTablesWithContextArgsForCall = append(fake.describeRouteTablesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeRouteTablesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeRouteTablesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeRouteTablesWithContextMutex.Unlock()
	if fake.DescribeRouteTablesWithContextStub != nil {
		return fake.DescribeRouteTablesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeRouteTablesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeRouteTablesWithContextCallCount() int {
	fake.describeRouteTablesWithContextMutex.RLock()
	defer fake.describeRouteTablesWithContextMutex.RUnlock()
	return len(fake.describeRouteTablesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeRouteTablesWithContextCalls(stub func(aws.Context, *ec2.DescribeRouteTablesInput, ...request.Option) (*ec2.DescribeRouteTablesOutput, error)) {
	fake.describeRouteTablesWithContextMutex.Lock()
	defer fake.describeRouteTablesWithContextMutex.Unlock()
	fake.DescribeRouteTablesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeRouteTablesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeRouteTablesInput, []request.Option) {
	fake.describeRouteTablesWithContextMutex.RLock()
	defer fake.describeRouteTablesWithContextMutex.RUnlock()
	argsForCall := fake.describeRouteTablesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeRouteTablesWithContextReturns(result1 *ec2.DescribeRouteTablesOutput, result2 error) {
	fake.describeRouteTablesWithContextMutex.Lock()
	defer fake.describeRouteTablesWithContextMutex.Unlock()
	fake.DescribeRouteTablesWithContextStub = nil
	fake.describeRouteTablesWithContextReturns = struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeRouteTablesWithContextReturnsOnCall(i int, result1 *ec2.DescribeRouteTablesOutput, result2 error) {
	fake.describeRouteTablesWithContextMutex.Lock()
	defer fake.describeRouteTablesWithContextMutex.Unlock()
	fake.DescribeRouteTablesWithContextStub = nil
	if fake.describeRouteTablesWithContextReturnsOnCall == nil {
		fake.describeRouteTablesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeRouteTablesOutput
			result2 error
		})
	}
	fake.describeRouteTablesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailability(arg1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	fake.describeScheduledInstanceAvailabilityMutex.Lock()
	ret, specificReturn := fake.describeScheduledInstanceAvailabilityReturnsOnCall[len(fake.describeScheduledInstanceAvailabilityArgsForCall)]
	fake.describeScheduledInstanceAvailabilityArgsForCall = append(fake.describeScheduledInstanceAvailabilityArgsForCall, struct {
		arg1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}{arg1})
	fake.recordInvocation("DescribeScheduledInstanceAvailability", []interface{}{arg1})
	fake.describeScheduledInstanceAvailabilityMutex.Unlock()
	if fake.DescribeScheduledInstanceAvailabilityStub != nil {
		return fake.DescribeScheduledInstanceAvailabilityStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeScheduledInstanceAvailabilityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityCallCount() int {
	fake.describeScheduledInstanceAvailabilityMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityMutex.RUnlock()
	return len(fake.describeScheduledInstanceAvailabilityArgsForCall)
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityCalls(stub func(*ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)) {
	fake.describeScheduledInstanceAvailabilityMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityStub = stub
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityArgsForCall(i int) *ec2.DescribeScheduledInstanceAvailabilityInput {
	fake.describeScheduledInstanceAvailabilityMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityMutex.RUnlock()
	argsForCall := fake.describeScheduledInstanceAvailabilityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityReturns(result1 *ec2.DescribeScheduledInstanceAvailabilityOutput, result2 error) {
	fake.describeScheduledInstanceAvailabilityMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityStub = nil
	fake.describeScheduledInstanceAvailabilityReturns = struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityReturnsOnCall(i int, result1 *ec2.DescribeScheduledInstanceAvailabilityOutput, result2 error) {
	fake.describeScheduledInstanceAvailabilityMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityStub = nil
	if fake.describeScheduledInstanceAvailabilityReturnsOnCall == nil {
		fake.describeScheduledInstanceAvailabilityReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
			result2 error
		})
	}
	fake.describeScheduledInstanceAvailabilityReturnsOnCall[i] = struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityRequest(arg1 *ec2.DescribeScheduledInstanceAvailabilityInput) (*request.Request, *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	fake.describeScheduledInstanceAvailabilityRequestMutex.Lock()
	ret, specificReturn := fake.describeScheduledInstanceAvailabilityRequestReturnsOnCall[len(fake.describeScheduledInstanceAvailabilityRequestArgsForCall)]
	fake.describeScheduledInstanceAvailabilityRequestArgsForCall = append(fake.describeScheduledInstanceAvailabilityRequestArgsForCall, struct {
		arg1 *ec2.DescribeScheduledInstanceAvailabilityInput
	}{arg1})
	fake.recordInvocation("DescribeScheduledInstanceAvailabilityRequest", []interface{}{arg1})
	fake.describeScheduledInstanceAvailabilityRequestMutex.Unlock()
	if fake.DescribeScheduledInstanceAvailabilityRequestStub != nil {
		return fake.DescribeScheduledInstanceAvailabilityRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeScheduledInstanceAvailabilityRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityRequestCallCount() int {
	fake.describeScheduledInstanceAvailabilityRequestMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityRequestMutex.RUnlock()
	return len(fake.describeScheduledInstanceAvailabilityRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityRequestCalls(stub func(*ec2.DescribeScheduledInstanceAvailabilityInput) (*request.Request, *ec2.DescribeScheduledInstanceAvailabilityOutput)) {
	fake.describeScheduledInstanceAvailabilityRequestMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityRequestMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityRequestStub = stub
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityRequestArgsForCall(i int) *ec2.DescribeScheduledInstanceAvailabilityInput {
	fake.describeScheduledInstanceAvailabilityRequestMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityRequestMutex.RUnlock()
	argsForCall := fake.describeScheduledInstanceAvailabilityRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityRequestReturns(result1 *request.Request, result2 *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	fake.describeScheduledInstanceAvailabilityRequestMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityRequestMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityRequestStub = nil
	fake.describeScheduledInstanceAvailabilityRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstanceAvailabilityOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	fake.describeScheduledInstanceAvailabilityRequestMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityRequestMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityRequestStub = nil
	if fake.describeScheduledInstanceAvailabilityRequestReturnsOnCall == nil {
		fake.describeScheduledInstanceAvailabilityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeScheduledInstanceAvailabilityOutput
		})
	}
	fake.describeScheduledInstanceAvailabilityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstanceAvailabilityOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityWithContext(arg1 aws.Context, arg2 *ec2.DescribeScheduledInstanceAvailabilityInput, arg3 ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	fake.describeScheduledInstanceAvailabilityWithContextMutex.Lock()
	ret, specificReturn := fake.describeScheduledInstanceAvailabilityWithContextReturnsOnCall[len(fake.describeScheduledInstanceAvailabilityWithContextArgsForCall)]
	fake.describeScheduledInstanceAvailabilityWithContextArgsForCall = append(fake.describeScheduledInstanceAvailabilityWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeScheduledInstanceAvailabilityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeScheduledInstanceAvailabilityWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeScheduledInstanceAvailabilityWithContextMutex.Unlock()
	if fake.DescribeScheduledInstanceAvailabilityWithContextStub != nil {
		return fake.DescribeScheduledInstanceAvailabilityWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeScheduledInstanceAvailabilityWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityWithContextCallCount() int {
	fake.describeScheduledInstanceAvailabilityWithContextMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityWithContextMutex.RUnlock()
	return len(fake.describeScheduledInstanceAvailabilityWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityWithContextCalls(stub func(aws.Context, *ec2.DescribeScheduledInstanceAvailabilityInput, ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)) {
	fake.describeScheduledInstanceAvailabilityWithContextMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityWithContextMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityWithContextStub = stub
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeScheduledInstanceAvailabilityInput, []request.Option) {
	fake.describeScheduledInstanceAvailabilityWithContextMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityWithContextMutex.RUnlock()
	argsForCall := fake.describeScheduledInstanceAvailabilityWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityWithContextReturns(result1 *ec2.DescribeScheduledInstanceAvailabilityOutput, result2 error) {
	fake.describeScheduledInstanceAvailabilityWithContextMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityWithContextMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityWithContextStub = nil
	fake.describeScheduledInstanceAvailabilityWithContextReturns = struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstanceAvailabilityWithContextReturnsOnCall(i int, result1 *ec2.DescribeScheduledInstanceAvailabilityOutput, result2 error) {
	fake.describeScheduledInstanceAvailabilityWithContextMutex.Lock()
	defer fake.describeScheduledInstanceAvailabilityWithContextMutex.Unlock()
	fake.DescribeScheduledInstanceAvailabilityWithContextStub = nil
	if fake.describeScheduledInstanceAvailabilityWithContextReturnsOnCall == nil {
		fake.describeScheduledInstanceAvailabilityWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
			result2 error
		})
	}
	fake.describeScheduledInstanceAvailabilityWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeScheduledInstanceAvailabilityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstances(arg1 *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
	fake.describeScheduledInstancesMutex.Lock()
	ret, specificReturn := fake.describeScheduledInstancesReturnsOnCall[len(fake.describeScheduledInstancesArgsForCall)]
	fake.describeScheduledInstancesArgsForCall = append(fake.describeScheduledInstancesArgsForCall, struct {
		arg1 *ec2.DescribeScheduledInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeScheduledInstances", []interface{}{arg1})
	fake.describeScheduledInstancesMutex.Unlock()
	if fake.DescribeScheduledInstancesStub != nil {
		return fake.DescribeScheduledInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeScheduledInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeScheduledInstancesCallCount() int {
	fake.describeScheduledInstancesMutex.RLock()
	defer fake.describeScheduledInstancesMutex.RUnlock()
	return len(fake.describeScheduledInstancesArgsForCall)
}

func (fake *FakeEC2API) DescribeScheduledInstancesCalls(stub func(*ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error)) {
	fake.describeScheduledInstancesMutex.Lock()
	defer fake.describeScheduledInstancesMutex.Unlock()
	fake.DescribeScheduledInstancesStub = stub
}

func (fake *FakeEC2API) DescribeScheduledInstancesArgsForCall(i int) *ec2.DescribeScheduledInstancesInput {
	fake.describeScheduledInstancesMutex.RLock()
	defer fake.describeScheduledInstancesMutex.RUnlock()
	argsForCall := fake.describeScheduledInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeScheduledInstancesReturns(result1 *ec2.DescribeScheduledInstancesOutput, result2 error) {
	fake.describeScheduledInstancesMutex.Lock()
	defer fake.describeScheduledInstancesMutex.Unlock()
	fake.DescribeScheduledInstancesStub = nil
	fake.describeScheduledInstancesReturns = struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstancesReturnsOnCall(i int, result1 *ec2.DescribeScheduledInstancesOutput, result2 error) {
	fake.describeScheduledInstancesMutex.Lock()
	defer fake.describeScheduledInstancesMutex.Unlock()
	fake.DescribeScheduledInstancesStub = nil
	if fake.describeScheduledInstancesReturnsOnCall == nil {
		fake.describeScheduledInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeScheduledInstancesOutput
			result2 error
		})
	}
	fake.describeScheduledInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstancesRequest(arg1 *ec2.DescribeScheduledInstancesInput) (*request.Request, *ec2.DescribeScheduledInstancesOutput) {
	fake.describeScheduledInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeScheduledInstancesRequestReturnsOnCall[len(fake.describeScheduledInstancesRequestArgsForCall)]
	fake.describeScheduledInstancesRequestArgsForCall = append(fake.describeScheduledInstancesRequestArgsForCall, struct {
		arg1 *ec2.DescribeScheduledInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeScheduledInstancesRequest", []interface{}{arg1})
	fake.describeScheduledInstancesRequestMutex.Unlock()
	if fake.DescribeScheduledInstancesRequestStub != nil {
		return fake.DescribeScheduledInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeScheduledInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeScheduledInstancesRequestCallCount() int {
	fake.describeScheduledInstancesRequestMutex.RLock()
	defer fake.describeScheduledInstancesRequestMutex.RUnlock()
	return len(fake.describeScheduledInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeScheduledInstancesRequestCalls(stub func(*ec2.DescribeScheduledInstancesInput) (*request.Request, *ec2.DescribeScheduledInstancesOutput)) {
	fake.describeScheduledInstancesRequestMutex.Lock()
	defer fake.describeScheduledInstancesRequestMutex.Unlock()
	fake.DescribeScheduledInstancesRequestStub = stub
}

func (fake *FakeEC2API) DescribeScheduledInstancesRequestArgsForCall(i int) *ec2.DescribeScheduledInstancesInput {
	fake.describeScheduledInstancesRequestMutex.RLock()
	defer fake.describeScheduledInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeScheduledInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeScheduledInstancesRequestReturns(result1 *request.Request, result2 *ec2.DescribeScheduledInstancesOutput) {
	fake.describeScheduledInstancesRequestMutex.Lock()
	defer fake.describeScheduledInstancesRequestMutex.Unlock()
	fake.DescribeScheduledInstancesRequestStub = nil
	fake.describeScheduledInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeScheduledInstancesOutput) {
	fake.describeScheduledInstancesRequestMutex.Lock()
	defer fake.describeScheduledInstancesRequestMutex.Unlock()
	fake.DescribeScheduledInstancesRequestStub = nil
	if fake.describeScheduledInstancesRequestReturnsOnCall == nil {
		fake.describeScheduledInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeScheduledInstancesOutput
		})
	}
	fake.describeScheduledInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeScheduledInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstancesWithContext(arg1 aws.Context, arg2 *ec2.DescribeScheduledInstancesInput, arg3 ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error) {
	fake.describeScheduledInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeScheduledInstancesWithContextReturnsOnCall[len(fake.describeScheduledInstancesWithContextArgsForCall)]
	fake.describeScheduledInstancesWithContextArgsForCall = append(fake.describeScheduledInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeScheduledInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeScheduledInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeScheduledInstancesWithContextMutex.Unlock()
	if fake.DescribeScheduledInstancesWithContextStub != nil {
		return fake.DescribeScheduledInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeScheduledInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeScheduledInstancesWithContextCallCount() int {
	fake.describeScheduledInstancesWithContextMutex.RLock()
	defer fake.describeScheduledInstancesWithContextMutex.RUnlock()
	return len(fake.describeScheduledInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeScheduledInstancesWithContextCalls(stub func(aws.Context, *ec2.DescribeScheduledInstancesInput, ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error)) {
	fake.describeScheduledInstancesWithContextMutex.Lock()
	defer fake.describeScheduledInstancesWithContextMutex.Unlock()
	fake.DescribeScheduledInstancesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeScheduledInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeScheduledInstancesInput, []request.Option) {
	fake.describeScheduledInstancesWithContextMutex.RLock()
	defer fake.describeScheduledInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeScheduledInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeScheduledInstancesWithContextReturns(result1 *ec2.DescribeScheduledInstancesOutput, result2 error) {
	fake.describeScheduledInstancesWithContextMutex.Lock()
	defer fake.describeScheduledInstancesWithContextMutex.Unlock()
	fake.DescribeScheduledInstancesWithContextStub = nil
	fake.describeScheduledInstancesWithContextReturns = struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeScheduledInstancesWithContextReturnsOnCall(i int, result1 *ec2.DescribeScheduledInstancesOutput, result2 error) {
	fake.describeScheduledInstancesWithContextMutex.Lock()
	defer fake.describeScheduledInstancesWithContextMutex.Unlock()
	fake.DescribeScheduledInstancesWithContextStub = nil
	if fake.describeScheduledInstancesWithContextReturnsOnCall == nil {
		fake.describeScheduledInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeScheduledInstancesOutput
			result2 error
		})
	}
	fake.describeScheduledInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupReferences(arg1 *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	fake.describeSecurityGroupReferencesMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupReferencesReturnsOnCall[len(fake.describeSecurityGroupReferencesArgsForCall)]
	fake.describeSecurityGroupReferencesArgsForCall = append(fake.describeSecurityGroupReferencesArgsForCall, struct {
		arg1 *ec2.DescribeSecurityGroupReferencesInput
	}{arg1})
	fake.recordInvocation("DescribeSecurityGroupReferences", []interface{}{arg1})
	fake.describeSecurityGroupReferencesMutex.Unlock()
	if fake.DescribeSecurityGroupReferencesStub != nil {
		return fake.DescribeSecurityGroupReferencesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSecurityGroupReferencesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesCallCount() int {
	fake.describeSecurityGroupReferencesMutex.RLock()
	defer fake.describeSecurityGroupReferencesMutex.RUnlock()
	return len(fake.describeSecurityGroupReferencesArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesCalls(stub func(*ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error)) {
	fake.describeSecurityGroupReferencesMutex.Lock()
	defer fake.describeSecurityGroupReferencesMutex.Unlock()
	fake.DescribeSecurityGroupReferencesStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesArgsForCall(i int) *ec2.DescribeSecurityGroupReferencesInput {
	fake.describeSecurityGroupReferencesMutex.RLock()
	defer fake.describeSecurityGroupReferencesMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupReferencesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesReturns(result1 *ec2.DescribeSecurityGroupReferencesOutput, result2 error) {
	fake.describeSecurityGroupReferencesMutex.Lock()
	defer fake.describeSecurityGroupReferencesMutex.Unlock()
	fake.DescribeSecurityGroupReferencesStub = nil
	fake.describeSecurityGroupReferencesReturns = struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesReturnsOnCall(i int, result1 *ec2.DescribeSecurityGroupReferencesOutput, result2 error) {
	fake.describeSecurityGroupReferencesMutex.Lock()
	defer fake.describeSecurityGroupReferencesMutex.Unlock()
	fake.DescribeSecurityGroupReferencesStub = nil
	if fake.describeSecurityGroupReferencesReturnsOnCall == nil {
		fake.describeSecurityGroupReferencesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSecurityGroupReferencesOutput
			result2 error
		})
	}
	fake.describeSecurityGroupReferencesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesRequest(arg1 *ec2.DescribeSecurityGroupReferencesInput) (*request.Request, *ec2.DescribeSecurityGroupReferencesOutput) {
	fake.describeSecurityGroupReferencesRequestMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupReferencesRequestReturnsOnCall[len(fake.describeSecurityGroupReferencesRequestArgsForCall)]
	fake.describeSecurityGroupReferencesRequestArgsForCall = append(fake.describeSecurityGroupReferencesRequestArgsForCall, struct {
		arg1 *ec2.DescribeSecurityGroupReferencesInput
	}{arg1})
	fake.recordInvocation("DescribeSecurityGroupReferencesRequest", []interface{}{arg1})
	fake.describeSecurityGroupReferencesRequestMutex.Unlock()
	if fake.DescribeSecurityGroupReferencesRequestStub != nil {
		return fake.DescribeSecurityGroupReferencesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSecurityGroupReferencesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesRequestCallCount() int {
	fake.describeSecurityGroupReferencesRequestMutex.RLock()
	defer fake.describeSecurityGroupReferencesRequestMutex.RUnlock()
	return len(fake.describeSecurityGroupReferencesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesRequestCalls(stub func(*ec2.DescribeSecurityGroupReferencesInput) (*request.Request, *ec2.DescribeSecurityGroupReferencesOutput)) {
	fake.describeSecurityGroupReferencesRequestMutex.Lock()
	defer fake.describeSecurityGroupReferencesRequestMutex.Unlock()
	fake.DescribeSecurityGroupReferencesRequestStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesRequestArgsForCall(i int) *ec2.DescribeSecurityGroupReferencesInput {
	fake.describeSecurityGroupReferencesRequestMutex.RLock()
	defer fake.describeSecurityGroupReferencesRequestMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupReferencesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesRequestReturns(result1 *request.Request, result2 *ec2.DescribeSecurityGroupReferencesOutput) {
	fake.describeSecurityGroupReferencesRequestMutex.Lock()
	defer fake.describeSecurityGroupReferencesRequestMutex.Unlock()
	fake.DescribeSecurityGroupReferencesRequestStub = nil
	fake.describeSecurityGroupReferencesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupReferencesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSecurityGroupReferencesOutput) {
	fake.describeSecurityGroupReferencesRequestMutex.Lock()
	defer fake.describeSecurityGroupReferencesRequestMutex.Unlock()
	fake.DescribeSecurityGroupReferencesRequestStub = nil
	if fake.describeSecurityGroupReferencesRequestReturnsOnCall == nil {
		fake.describeSecurityGroupReferencesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSecurityGroupReferencesOutput
		})
	}
	fake.describeSecurityGroupReferencesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupReferencesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesWithContext(arg1 aws.Context, arg2 *ec2.DescribeSecurityGroupReferencesInput, arg3 ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	fake.describeSecurityGroupReferencesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupReferencesWithContextReturnsOnCall[len(fake.describeSecurityGroupReferencesWithContextArgsForCall)]
	fake.describeSecurityGroupReferencesWithContextArgsForCall = append(fake.describeSecurityGroupReferencesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSecurityGroupReferencesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSecurityGroupReferencesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSecurityGroupReferencesWithContextMutex.Unlock()
	if fake.DescribeSecurityGroupReferencesWithContextStub != nil {
		return fake.DescribeSecurityGroupReferencesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSecurityGroupReferencesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesWithContextCallCount() int {
	fake.describeSecurityGroupReferencesWithContextMutex.RLock()
	defer fake.describeSecurityGroupReferencesWithContextMutex.RUnlock()
	return len(fake.describeSecurityGroupReferencesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesWithContextCalls(stub func(aws.Context, *ec2.DescribeSecurityGroupReferencesInput, ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error)) {
	fake.describeSecurityGroupReferencesWithContextMutex.Lock()
	defer fake.describeSecurityGroupReferencesWithContextMutex.Unlock()
	fake.DescribeSecurityGroupReferencesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSecurityGroupReferencesInput, []request.Option) {
	fake.describeSecurityGroupReferencesWithContextMutex.RLock()
	defer fake.describeSecurityGroupReferencesWithContextMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupReferencesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesWithContextReturns(result1 *ec2.DescribeSecurityGroupReferencesOutput, result2 error) {
	fake.describeSecurityGroupReferencesWithContextMutex.Lock()
	defer fake.describeSecurityGroupReferencesWithContextMutex.Unlock()
	fake.DescribeSecurityGroupReferencesWithContextStub = nil
	fake.describeSecurityGroupReferencesWithContextReturns = struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupReferencesWithContextReturnsOnCall(i int, result1 *ec2.DescribeSecurityGroupReferencesOutput, result2 error) {
	fake.describeSecurityGroupReferencesWithContextMutex.Lock()
	defer fake.describeSecurityGroupReferencesWithContextMutex.Unlock()
	fake.DescribeSecurityGroupReferencesWithContextStub = nil
	if fake.describeSecurityGroupReferencesWithContextReturnsOnCall == nil {
		fake.describeSecurityGroupReferencesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSecurityGroupReferencesOutput
			result2 error
		})
	}
	fake.describeSecurityGroupReferencesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSecurityGroupReferencesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroups(arg1 *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	fake.describeSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupsReturnsOnCall[len(fake.describeSecurityGroupsArgsForCall)]
	fake.describeSecurityGroupsArgsForCall = append(fake.describeSecurityGroupsArgsForCall, struct {
		arg1 *ec2.DescribeSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeSecurityGroups", []interface{}{arg1})
	fake.describeSecurityGroupsMutex.Unlock()
	if fake.DescribeSecurityGroupsStub != nil {
		return fake.DescribeSecurityGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSecurityGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSecurityGroupsCallCount() int {
	fake.describeSecurityGroupsMutex.RLock()
	defer fake.describeSecurityGroupsMutex.RUnlock()
	return len(fake.describeSecurityGroupsArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupsCalls(stub func(*ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error)) {
	fake.describeSecurityGroupsMutex.Lock()
	defer fake.describeSecurityGroupsMutex.Unlock()
	fake.DescribeSecurityGroupsStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupsArgsForCall(i int) *ec2.DescribeSecurityGroupsInput {
	fake.describeSecurityGroupsMutex.RLock()
	defer fake.describeSecurityGroupsMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSecurityGroupsReturns(result1 *ec2.DescribeSecurityGroupsOutput, result2 error) {
	fake.describeSecurityGroupsMutex.Lock()
	defer fake.describeSecurityGroupsMutex.Unlock()
	fake.DescribeSecurityGroupsStub = nil
	fake.describeSecurityGroupsReturns = struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupsReturnsOnCall(i int, result1 *ec2.DescribeSecurityGroupsOutput, result2 error) {
	fake.describeSecurityGroupsMutex.Lock()
	defer fake.describeSecurityGroupsMutex.Unlock()
	fake.DescribeSecurityGroupsStub = nil
	if fake.describeSecurityGroupsReturnsOnCall == nil {
		fake.describeSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeSecurityGroupsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupsPages(arg1 *ec2.DescribeSecurityGroupsInput, arg2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error {
	fake.describeSecurityGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupsPagesReturnsOnCall[len(fake.describeSecurityGroupsPagesArgsForCall)]
	fake.describeSecurityGroupsPagesArgsForCall = append(fake.describeSecurityGroupsPagesArgsForCall, struct {
		arg1 *ec2.DescribeSecurityGroupsInput
		arg2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeSecurityGroupsPages", []interface{}{arg1, arg2})
	fake.describeSecurityGroupsPagesMutex.Unlock()
	if fake.DescribeSecurityGroupsPagesStub != nil {
		return fake.DescribeSecurityGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSecurityGroupsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesCallCount() int {
	fake.describeSecurityGroupsPagesMutex.RLock()
	defer fake.describeSecurityGroupsPagesMutex.RUnlock()
	return len(fake.describeSecurityGroupsPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesCalls(stub func(*ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error) {
	fake.describeSecurityGroupsPagesMutex.Lock()
	defer fake.describeSecurityGroupsPagesMutex.Unlock()
	fake.DescribeSecurityGroupsPagesStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesArgsForCall(i int) (*ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool) {
	fake.describeSecurityGroupsPagesMutex.RLock()
	defer fake.describeSecurityGroupsPagesMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesReturns(result1 error) {
	fake.describeSecurityGroupsPagesMutex.Lock()
	defer fake.describeSecurityGroupsPagesMutex.Unlock()
	fake.DescribeSecurityGroupsPagesStub = nil
	fake.describeSecurityGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.describeSecurityGroupsPagesMutex.Lock()
	defer fake.describeSecurityGroupsPagesMutex.Unlock()
	fake.DescribeSecurityGroupsPagesStub = nil
	if fake.describeSecurityGroupsPagesReturnsOnCall == nil {
		fake.describeSecurityGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSecurityGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeSecurityGroupsInput, arg3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSecurityGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupsPagesWithContextReturnsOnCall[len(fake.describeSecurityGroupsPagesWithContextArgsForCall)]
	fake.describeSecurityGroupsPagesWithContextArgsForCall = append(fake.describeSecurityGroupsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSecurityGroupsInput
		arg3 func(*ec2.DescribeSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeSecurityGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSecurityGroupsPagesWithContextMutex.Unlock()
	if fake.DescribeSecurityGroupsPagesWithContextStub != nil {
		return fake.DescribeSecurityGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSecurityGroupsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesWithContextCallCount() int {
	fake.describeSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeSecurityGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeSecurityGroupsPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool, ...request.Option) error) {
	fake.describeSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeSecurityGroupsPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool, []request.Option) {
	fake.describeSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeSecurityGroupsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesWithContextReturns(result1 error) {
	fake.describeSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeSecurityGroupsPagesWithContextStub = nil
	fake.describeSecurityGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSecurityGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSecurityGroupsPagesWithContextMutex.Lock()
	defer fake.describeSecurityGroupsPagesWithContextMutex.Unlock()
	fake.DescribeSecurityGroupsPagesWithContextStub = nil
	if fake.describeSecurityGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeSecurityGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSecurityGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSecurityGroupsRequest(arg1 *ec2.DescribeSecurityGroupsInput) (*request.Request, *ec2.DescribeSecurityGroupsOutput) {
	fake.describeSecurityGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupsRequestReturnsOnCall[len(fake.describeSecurityGroupsRequestArgsForCall)]
	fake.describeSecurityGroupsRequestArgsForCall = append(fake.describeSecurityGroupsRequestArgsForCall, struct {
		arg1 *ec2.DescribeSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeSecurityGroupsRequest", []interface{}{arg1})
	fake.describeSecurityGroupsRequestMutex.Unlock()
	if fake.DescribeSecurityGroupsRequestStub != nil {
		return fake.DescribeSecurityGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSecurityGroupsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSecurityGroupsRequestCallCount() int {
	fake.describeSecurityGroupsRequestMutex.RLock()
	defer fake.describeSecurityGroupsRequestMutex.RUnlock()
	return len(fake.describeSecurityGroupsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupsRequestCalls(stub func(*ec2.DescribeSecurityGroupsInput) (*request.Request, *ec2.DescribeSecurityGroupsOutput)) {
	fake.describeSecurityGroupsRequestMutex.Lock()
	defer fake.describeSecurityGroupsRequestMutex.Unlock()
	fake.DescribeSecurityGroupsRequestStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupsRequestArgsForCall(i int) *ec2.DescribeSecurityGroupsInput {
	fake.describeSecurityGroupsRequestMutex.RLock()
	defer fake.describeSecurityGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSecurityGroupsRequestReturns(result1 *request.Request, result2 *ec2.DescribeSecurityGroupsOutput) {
	fake.describeSecurityGroupsRequestMutex.Lock()
	defer fake.describeSecurityGroupsRequestMutex.Unlock()
	fake.DescribeSecurityGroupsRequestStub = nil
	fake.describeSecurityGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSecurityGroupsOutput) {
	fake.describeSecurityGroupsRequestMutex.Lock()
	defer fake.describeSecurityGroupsRequestMutex.Unlock()
	fake.DescribeSecurityGroupsRequestStub = nil
	if fake.describeSecurityGroupsRequestReturnsOnCall == nil {
		fake.describeSecurityGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSecurityGroupsOutput
		})
	}
	fake.describeSecurityGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupsWithContext(arg1 aws.Context, arg2 *ec2.DescribeSecurityGroupsInput, arg3 ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error) {
	fake.describeSecurityGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSecurityGroupsWithContextReturnsOnCall[len(fake.describeSecurityGroupsWithContextArgsForCall)]
	fake.describeSecurityGroupsWithContextArgsForCall = append(fake.describeSecurityGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSecurityGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSecurityGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSecurityGroupsWithContextMutex.Unlock()
	if fake.DescribeSecurityGroupsWithContextStub != nil {
		return fake.DescribeSecurityGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSecurityGroupsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSecurityGroupsWithContextCallCount() int {
	fake.describeSecurityGroupsWithContextMutex.RLock()
	defer fake.describeSecurityGroupsWithContextMutex.RUnlock()
	return len(fake.describeSecurityGroupsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSecurityGroupsWithContextCalls(stub func(aws.Context, *ec2.DescribeSecurityGroupsInput, ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error)) {
	fake.describeSecurityGroupsWithContextMutex.Lock()
	defer fake.describeSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeSecurityGroupsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSecurityGroupsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSecurityGroupsInput, []request.Option) {
	fake.describeSecurityGroupsWithContextMutex.RLock()
	defer fake.describeSecurityGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeSecurityGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSecurityGroupsWithContextReturns(result1 *ec2.DescribeSecurityGroupsOutput, result2 error) {
	fake.describeSecurityGroupsWithContextMutex.Lock()
	defer fake.describeSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeSecurityGroupsWithContextStub = nil
	fake.describeSecurityGroupsWithContextReturns = struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSecurityGroupsWithContextReturnsOnCall(i int, result1 *ec2.DescribeSecurityGroupsOutput, result2 error) {
	fake.describeSecurityGroupsWithContextMutex.Lock()
	defer fake.describeSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeSecurityGroupsWithContextStub = nil
	if fake.describeSecurityGroupsWithContextReturnsOnCall == nil {
		fake.describeSecurityGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeSecurityGroupsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotAttribute(arg1 *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	fake.describeSnapshotAttributeMutex.Lock()
	ret, specificReturn := fake.describeSnapshotAttributeReturnsOnCall[len(fake.describeSnapshotAttributeArgsForCall)]
	fake.describeSnapshotAttributeArgsForCall = append(fake.describeSnapshotAttributeArgsForCall, struct {
		arg1 *ec2.DescribeSnapshotAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeSnapshotAttribute", []interface{}{arg1})
	fake.describeSnapshotAttributeMutex.Unlock()
	if fake.DescribeSnapshotAttributeStub != nil {
		return fake.DescribeSnapshotAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSnapshotAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSnapshotAttributeCallCount() int {
	fake.describeSnapshotAttributeMutex.RLock()
	defer fake.describeSnapshotAttributeMutex.RUnlock()
	return len(fake.describeSnapshotAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotAttributeCalls(stub func(*ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error)) {
	fake.describeSnapshotAttributeMutex.Lock()
	defer fake.describeSnapshotAttributeMutex.Unlock()
	fake.DescribeSnapshotAttributeStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotAttributeArgsForCall(i int) *ec2.DescribeSnapshotAttributeInput {
	fake.describeSnapshotAttributeMutex.RLock()
	defer fake.describeSnapshotAttributeMutex.RUnlock()
	argsForCall := fake.describeSnapshotAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSnapshotAttributeReturns(result1 *ec2.DescribeSnapshotAttributeOutput, result2 error) {
	fake.describeSnapshotAttributeMutex.Lock()
	defer fake.describeSnapshotAttributeMutex.Unlock()
	fake.DescribeSnapshotAttributeStub = nil
	fake.describeSnapshotAttributeReturns = struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotAttributeReturnsOnCall(i int, result1 *ec2.DescribeSnapshotAttributeOutput, result2 error) {
	fake.describeSnapshotAttributeMutex.Lock()
	defer fake.describeSnapshotAttributeMutex.Unlock()
	fake.DescribeSnapshotAttributeStub = nil
	if fake.describeSnapshotAttributeReturnsOnCall == nil {
		fake.describeSnapshotAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSnapshotAttributeOutput
			result2 error
		})
	}
	fake.describeSnapshotAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotAttributeRequest(arg1 *ec2.DescribeSnapshotAttributeInput) (*request.Request, *ec2.DescribeSnapshotAttributeOutput) {
	fake.describeSnapshotAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeSnapshotAttributeRequestReturnsOnCall[len(fake.describeSnapshotAttributeRequestArgsForCall)]
	fake.describeSnapshotAttributeRequestArgsForCall = append(fake.describeSnapshotAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeSnapshotAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeSnapshotAttributeRequest", []interface{}{arg1})
	fake.describeSnapshotAttributeRequestMutex.Unlock()
	if fake.DescribeSnapshotAttributeRequestStub != nil {
		return fake.DescribeSnapshotAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSnapshotAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSnapshotAttributeRequestCallCount() int {
	fake.describeSnapshotAttributeRequestMutex.RLock()
	defer fake.describeSnapshotAttributeRequestMutex.RUnlock()
	return len(fake.describeSnapshotAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotAttributeRequestCalls(stub func(*ec2.DescribeSnapshotAttributeInput) (*request.Request, *ec2.DescribeSnapshotAttributeOutput)) {
	fake.describeSnapshotAttributeRequestMutex.Lock()
	defer fake.describeSnapshotAttributeRequestMutex.Unlock()
	fake.DescribeSnapshotAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotAttributeRequestArgsForCall(i int) *ec2.DescribeSnapshotAttributeInput {
	fake.describeSnapshotAttributeRequestMutex.RLock()
	defer fake.describeSnapshotAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeSnapshotAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSnapshotAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeSnapshotAttributeOutput) {
	fake.describeSnapshotAttributeRequestMutex.Lock()
	defer fake.describeSnapshotAttributeRequestMutex.Unlock()
	fake.DescribeSnapshotAttributeRequestStub = nil
	fake.describeSnapshotAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSnapshotAttributeOutput) {
	fake.describeSnapshotAttributeRequestMutex.Lock()
	defer fake.describeSnapshotAttributeRequestMutex.Unlock()
	fake.DescribeSnapshotAttributeRequestStub = nil
	if fake.describeSnapshotAttributeRequestReturnsOnCall == nil {
		fake.describeSnapshotAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSnapshotAttributeOutput
		})
	}
	fake.describeSnapshotAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeSnapshotAttributeInput, arg3 ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error) {
	fake.describeSnapshotAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotAttributeWithContextReturnsOnCall[len(fake.describeSnapshotAttributeWithContextArgsForCall)]
	fake.describeSnapshotAttributeWithContextArgsForCall = append(fake.describeSnapshotAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSnapshotAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSnapshotAttributeWithContextMutex.Unlock()
	if fake.DescribeSnapshotAttributeWithContextStub != nil {
		return fake.DescribeSnapshotAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSnapshotAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSnapshotAttributeWithContextCallCount() int {
	fake.describeSnapshotAttributeWithContextMutex.RLock()
	defer fake.describeSnapshotAttributeWithContextMutex.RUnlock()
	return len(fake.describeSnapshotAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeSnapshotAttributeInput, ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error)) {
	fake.describeSnapshotAttributeWithContextMutex.Lock()
	defer fake.describeSnapshotAttributeWithContextMutex.Unlock()
	fake.DescribeSnapshotAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSnapshotAttributeInput, []request.Option) {
	fake.describeSnapshotAttributeWithContextMutex.RLock()
	defer fake.describeSnapshotAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeSnapshotAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSnapshotAttributeWithContextReturns(result1 *ec2.DescribeSnapshotAttributeOutput, result2 error) {
	fake.describeSnapshotAttributeWithContextMutex.Lock()
	defer fake.describeSnapshotAttributeWithContextMutex.Unlock()
	fake.DescribeSnapshotAttributeWithContextStub = nil
	fake.describeSnapshotAttributeWithContextReturns = struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeSnapshotAttributeOutput, result2 error) {
	fake.describeSnapshotAttributeWithContextMutex.Lock()
	defer fake.describeSnapshotAttributeWithContextMutex.Unlock()
	fake.DescribeSnapshotAttributeWithContextStub = nil
	if fake.describeSnapshotAttributeWithContextReturnsOnCall == nil {
		fake.describeSnapshotAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSnapshotAttributeOutput
			result2 error
		})
	}
	fake.describeSnapshotAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshots(arg1 *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	fake.describeSnapshotsMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsReturnsOnCall[len(fake.describeSnapshotsArgsForCall)]
	fake.describeSnapshotsArgsForCall = append(fake.describeSnapshotsArgsForCall, struct {
		arg1 *ec2.DescribeSnapshotsInput
	}{arg1})
	fake.recordInvocation("DescribeSnapshots", []interface{}{arg1})
	fake.describeSnapshotsMutex.Unlock()
	if fake.DescribeSnapshotsStub != nil {
		return fake.DescribeSnapshotsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSnapshotsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSnapshotsCallCount() int {
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	return len(fake.describeSnapshotsArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotsCalls(stub func(*ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error)) {
	fake.describeSnapshotsMutex.Lock()
	defer fake.describeSnapshotsMutex.Unlock()
	fake.DescribeSnapshotsStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotsArgsForCall(i int) *ec2.DescribeSnapshotsInput {
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	argsForCall := fake.describeSnapshotsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSnapshotsReturns(result1 *ec2.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsMutex.Lock()
	defer fake.describeSnapshotsMutex.Unlock()
	fake.DescribeSnapshotsStub = nil
	fake.describeSnapshotsReturns = struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotsReturnsOnCall(i int, result1 *ec2.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsMutex.Lock()
	defer fake.describeSnapshotsMutex.Unlock()
	fake.DescribeSnapshotsStub = nil
	if fake.describeSnapshotsReturnsOnCall == nil {
		fake.describeSnapshotsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSnapshotsOutput
			result2 error
		})
	}
	fake.describeSnapshotsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotsPages(arg1 *ec2.DescribeSnapshotsInput, arg2 func(*ec2.DescribeSnapshotsOutput, bool) bool) error {
	fake.describeSnapshotsPagesMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesReturnsOnCall[len(fake.describeSnapshotsPagesArgsForCall)]
	fake.describeSnapshotsPagesArgsForCall = append(fake.describeSnapshotsPagesArgsForCall, struct {
		arg1 *ec2.DescribeSnapshotsInput
		arg2 func(*ec2.DescribeSnapshotsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeSnapshotsPages", []interface{}{arg1, arg2})
	fake.describeSnapshotsPagesMutex.Unlock()
	if fake.DescribeSnapshotsPagesStub != nil {
		return fake.DescribeSnapshotsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSnapshotsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSnapshotsPagesCallCount() int {
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	return len(fake.describeSnapshotsPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotsPagesCalls(stub func(*ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool) error) {
	fake.describeSnapshotsPagesMutex.Lock()
	defer fake.describeSnapshotsPagesMutex.Unlock()
	fake.DescribeSnapshotsPagesStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotsPagesArgsForCall(i int) (*ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool) {
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	argsForCall := fake.describeSnapshotsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeSnapshotsPagesReturns(result1 error) {
	fake.describeSnapshotsPagesMutex.Lock()
	defer fake.describeSnapshotsPagesMutex.Unlock()
	fake.DescribeSnapshotsPagesStub = nil
	fake.describeSnapshotsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSnapshotsPagesReturnsOnCall(i int, result1 error) {
	fake.describeSnapshotsPagesMutex.Lock()
	defer fake.describeSnapshotsPagesMutex.Unlock()
	fake.DescribeSnapshotsPagesStub = nil
	if fake.describeSnapshotsPagesReturnsOnCall == nil {
		fake.describeSnapshotsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSnapshotsPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeSnapshotsInput, arg3 func(*ec2.DescribeSnapshotsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesWithContextReturnsOnCall[len(fake.describeSnapshotsPagesWithContextArgsForCall)]
	fake.describeSnapshotsPagesWithContextArgsForCall = append(fake.describeSnapshotsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotsInput
		arg3 func(*ec2.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeSnapshotsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSnapshotsPagesWithContextMutex.Unlock()
	if fake.DescribeSnapshotsPagesWithContextStub != nil {
		return fake.DescribeSnapshotsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSnapshotsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSnapshotsPagesWithContextCallCount() int {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotsPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool, ...request.Option) error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotsPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSnapshotsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeSnapshotsPagesWithContextReturns(result1 error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = nil
	fake.describeSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	defer fake.describeSnapshotsPagesWithContextMutex.Unlock()
	fake.DescribeSnapshotsPagesWithContextStub = nil
	if fake.describeSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSnapshotsRequest(arg1 *ec2.DescribeSnapshotsInput) (*request.Request, *ec2.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsRequestReturnsOnCall[len(fake.describeSnapshotsRequestArgsForCall)]
	fake.describeSnapshotsRequestArgsForCall = append(fake.describeSnapshotsRequestArgsForCall, struct {
		arg1 *ec2.DescribeSnapshotsInput
	}{arg1})
	fake.recordInvocation("DescribeSnapshotsRequest", []interface{}{arg1})
	fake.describeSnapshotsRequestMutex.Unlock()
	if fake.DescribeSnapshotsRequestStub != nil {
		return fake.DescribeSnapshotsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSnapshotsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSnapshotsRequestCallCount() int {
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	return len(fake.describeSnapshotsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotsRequestCalls(stub func(*ec2.DescribeSnapshotsInput) (*request.Request, *ec2.DescribeSnapshotsOutput)) {
	fake.describeSnapshotsRequestMutex.Lock()
	defer fake.describeSnapshotsRequestMutex.Unlock()
	fake.DescribeSnapshotsRequestStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotsRequestArgsForCall(i int) *ec2.DescribeSnapshotsInput {
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	argsForCall := fake.describeSnapshotsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSnapshotsRequestReturns(result1 *request.Request, result2 *ec2.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	defer fake.describeSnapshotsRequestMutex.Unlock()
	fake.DescribeSnapshotsRequestStub = nil
	fake.describeSnapshotsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	defer fake.describeSnapshotsRequestMutex.Unlock()
	fake.DescribeSnapshotsRequestStub = nil
	if fake.describeSnapshotsRequestReturnsOnCall == nil {
		fake.describeSnapshotsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSnapshotsOutput
		})
	}
	fake.describeSnapshotsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotsWithContext(arg1 aws.Context, arg2 *ec2.DescribeSnapshotsInput, arg3 ...request.Option) (*ec2.DescribeSnapshotsOutput, error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsWithContextReturnsOnCall[len(fake.describeSnapshotsWithContextArgsForCall)]
	fake.describeSnapshotsWithContextArgsForCall = append(fake.describeSnapshotsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSnapshotsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSnapshotsWithContextMutex.Unlock()
	if fake.DescribeSnapshotsWithContextStub != nil {
		return fake.DescribeSnapshotsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSnapshotsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSnapshotsWithContextCallCount() int {
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSnapshotsWithContextCalls(stub func(aws.Context, *ec2.DescribeSnapshotsInput, ...request.Option) (*ec2.DescribeSnapshotsOutput, error)) {
	fake.describeSnapshotsWithContextMutex.Lock()
	defer fake.describeSnapshotsWithContextMutex.Unlock()
	fake.DescribeSnapshotsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSnapshotsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSnapshotsInput, []request.Option) {
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	argsForCall := fake.describeSnapshotsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSnapshotsWithContextReturns(result1 *ec2.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	defer fake.describeSnapshotsWithContextMutex.Unlock()
	fake.DescribeSnapshotsWithContextStub = nil
	fake.describeSnapshotsWithContextReturns = struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSnapshotsWithContextReturnsOnCall(i int, result1 *ec2.DescribeSnapshotsOutput, result2 error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	defer fake.describeSnapshotsWithContextMutex.Unlock()
	fake.DescribeSnapshotsWithContextStub = nil
	if fake.describeSnapshotsWithContextReturnsOnCall == nil {
		fake.describeSnapshotsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSnapshotsOutput
			result2 error
		})
	}
	fake.describeSnapshotsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscription(arg1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	fake.describeSpotDatafeedSubscriptionMutex.Lock()
	ret, specificReturn := fake.describeSpotDatafeedSubscriptionReturnsOnCall[len(fake.describeSpotDatafeedSubscriptionArgsForCall)]
	fake.describeSpotDatafeedSubscriptionArgsForCall = append(fake.describeSpotDatafeedSubscriptionArgsForCall, struct {
		arg1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}{arg1})
	fake.recordInvocation("DescribeSpotDatafeedSubscription", []interface{}{arg1})
	fake.describeSpotDatafeedSubscriptionMutex.Unlock()
	if fake.DescribeSpotDatafeedSubscriptionStub != nil {
		return fake.DescribeSpotDatafeedSubscriptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotDatafeedSubscriptionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionCallCount() int {
	fake.describeSpotDatafeedSubscriptionMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionMutex.RUnlock()
	return len(fake.describeSpotDatafeedSubscriptionArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionCalls(stub func(*ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)) {
	fake.describeSpotDatafeedSubscriptionMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionStub = stub
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionArgsForCall(i int) *ec2.DescribeSpotDatafeedSubscriptionInput {
	fake.describeSpotDatafeedSubscriptionMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionMutex.RUnlock()
	argsForCall := fake.describeSpotDatafeedSubscriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionReturns(result1 *ec2.DescribeSpotDatafeedSubscriptionOutput, result2 error) {
	fake.describeSpotDatafeedSubscriptionMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionStub = nil
	fake.describeSpotDatafeedSubscriptionReturns = struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionReturnsOnCall(i int, result1 *ec2.DescribeSpotDatafeedSubscriptionOutput, result2 error) {
	fake.describeSpotDatafeedSubscriptionMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionStub = nil
	if fake.describeSpotDatafeedSubscriptionReturnsOnCall == nil {
		fake.describeSpotDatafeedSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
			result2 error
		})
	}
	fake.describeSpotDatafeedSubscriptionReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionRequest(arg1 *ec2.DescribeSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	fake.describeSpotDatafeedSubscriptionRequestMutex.Lock()
	ret, specificReturn := fake.describeSpotDatafeedSubscriptionRequestReturnsOnCall[len(fake.describeSpotDatafeedSubscriptionRequestArgsForCall)]
	fake.describeSpotDatafeedSubscriptionRequestArgsForCall = append(fake.describeSpotDatafeedSubscriptionRequestArgsForCall, struct {
		arg1 *ec2.DescribeSpotDatafeedSubscriptionInput
	}{arg1})
	fake.recordInvocation("DescribeSpotDatafeedSubscriptionRequest", []interface{}{arg1})
	fake.describeSpotDatafeedSubscriptionRequestMutex.Unlock()
	if fake.DescribeSpotDatafeedSubscriptionRequestStub != nil {
		return fake.DescribeSpotDatafeedSubscriptionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotDatafeedSubscriptionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionRequestCallCount() int {
	fake.describeSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionRequestMutex.RUnlock()
	return len(fake.describeSpotDatafeedSubscriptionRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionRequestCalls(stub func(*ec2.DescribeSpotDatafeedSubscriptionInput) (*request.Request, *ec2.DescribeSpotDatafeedSubscriptionOutput)) {
	fake.describeSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionRequestStub = stub
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionRequestArgsForCall(i int) *ec2.DescribeSpotDatafeedSubscriptionInput {
	fake.describeSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionRequestMutex.RUnlock()
	argsForCall := fake.describeSpotDatafeedSubscriptionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionRequestReturns(result1 *request.Request, result2 *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	fake.describeSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionRequestStub = nil
	fake.describeSpotDatafeedSubscriptionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotDatafeedSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	fake.describeSpotDatafeedSubscriptionRequestMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionRequestMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionRequestStub = nil
	if fake.describeSpotDatafeedSubscriptionRequestReturnsOnCall == nil {
		fake.describeSpotDatafeedSubscriptionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSpotDatafeedSubscriptionOutput
		})
	}
	fake.describeSpotDatafeedSubscriptionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotDatafeedSubscriptionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotDatafeedSubscriptionInput, arg3 ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	fake.describeSpotDatafeedSubscriptionWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotDatafeedSubscriptionWithContextReturnsOnCall[len(fake.describeSpotDatafeedSubscriptionWithContextArgsForCall)]
	fake.describeSpotDatafeedSubscriptionWithContextArgsForCall = append(fake.describeSpotDatafeedSubscriptionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotDatafeedSubscriptionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSpotDatafeedSubscriptionWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSpotDatafeedSubscriptionWithContextMutex.Unlock()
	if fake.DescribeSpotDatafeedSubscriptionWithContextStub != nil {
		return fake.DescribeSpotDatafeedSubscriptionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotDatafeedSubscriptionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionWithContextCallCount() int {
	fake.describeSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	return len(fake.describeSpotDatafeedSubscriptionWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotDatafeedSubscriptionInput, ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)) {
	fake.describeSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotDatafeedSubscriptionInput, []request.Option) {
	fake.describeSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotDatafeedSubscriptionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionWithContextReturns(result1 *ec2.DescribeSpotDatafeedSubscriptionOutput, result2 error) {
	fake.describeSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionWithContextStub = nil
	fake.describeSpotDatafeedSubscriptionWithContextReturns = struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotDatafeedSubscriptionWithContextReturnsOnCall(i int, result1 *ec2.DescribeSpotDatafeedSubscriptionOutput, result2 error) {
	fake.describeSpotDatafeedSubscriptionWithContextMutex.Lock()
	defer fake.describeSpotDatafeedSubscriptionWithContextMutex.Unlock()
	fake.DescribeSpotDatafeedSubscriptionWithContextStub = nil
	if fake.describeSpotDatafeedSubscriptionWithContextReturnsOnCall == nil {
		fake.describeSpotDatafeedSubscriptionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
			result2 error
		})
	}
	fake.describeSpotDatafeedSubscriptionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotDatafeedSubscriptionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetInstances(arg1 *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	fake.describeSpotFleetInstancesMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetInstancesReturnsOnCall[len(fake.describeSpotFleetInstancesArgsForCall)]
	fake.describeSpotFleetInstancesArgsForCall = append(fake.describeSpotFleetInstancesArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeSpotFleetInstances", []interface{}{arg1})
	fake.describeSpotFleetInstancesMutex.Unlock()
	if fake.DescribeSpotFleetInstancesStub != nil {
		return fake.DescribeSpotFleetInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesCallCount() int {
	fake.describeSpotFleetInstancesMutex.RLock()
	defer fake.describeSpotFleetInstancesMutex.RUnlock()
	return len(fake.describeSpotFleetInstancesArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesCalls(stub func(*ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error)) {
	fake.describeSpotFleetInstancesMutex.Lock()
	defer fake.describeSpotFleetInstancesMutex.Unlock()
	fake.DescribeSpotFleetInstancesStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesArgsForCall(i int) *ec2.DescribeSpotFleetInstancesInput {
	fake.describeSpotFleetInstancesMutex.RLock()
	defer fake.describeSpotFleetInstancesMutex.RUnlock()
	argsForCall := fake.describeSpotFleetInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesReturns(result1 *ec2.DescribeSpotFleetInstancesOutput, result2 error) {
	fake.describeSpotFleetInstancesMutex.Lock()
	defer fake.describeSpotFleetInstancesMutex.Unlock()
	fake.DescribeSpotFleetInstancesStub = nil
	fake.describeSpotFleetInstancesReturns = struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesReturnsOnCall(i int, result1 *ec2.DescribeSpotFleetInstancesOutput, result2 error) {
	fake.describeSpotFleetInstancesMutex.Lock()
	defer fake.describeSpotFleetInstancesMutex.Unlock()
	fake.DescribeSpotFleetInstancesStub = nil
	if fake.describeSpotFleetInstancesReturnsOnCall == nil {
		fake.describeSpotFleetInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotFleetInstancesOutput
			result2 error
		})
	}
	fake.describeSpotFleetInstancesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesRequest(arg1 *ec2.DescribeSpotFleetInstancesInput) (*request.Request, *ec2.DescribeSpotFleetInstancesOutput) {
	fake.describeSpotFleetInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetInstancesRequestReturnsOnCall[len(fake.describeSpotFleetInstancesRequestArgsForCall)]
	fake.describeSpotFleetInstancesRequestArgsForCall = append(fake.describeSpotFleetInstancesRequestArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeSpotFleetInstancesRequest", []interface{}{arg1})
	fake.describeSpotFleetInstancesRequestMutex.Unlock()
	if fake.DescribeSpotFleetInstancesRequestStub != nil {
		return fake.DescribeSpotFleetInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesRequestCallCount() int {
	fake.describeSpotFleetInstancesRequestMutex.RLock()
	defer fake.describeSpotFleetInstancesRequestMutex.RUnlock()
	return len(fake.describeSpotFleetInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesRequestCalls(stub func(*ec2.DescribeSpotFleetInstancesInput) (*request.Request, *ec2.DescribeSpotFleetInstancesOutput)) {
	fake.describeSpotFleetInstancesRequestMutex.Lock()
	defer fake.describeSpotFleetInstancesRequestMutex.Unlock()
	fake.DescribeSpotFleetInstancesRequestStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesRequestArgsForCall(i int) *ec2.DescribeSpotFleetInstancesInput {
	fake.describeSpotFleetInstancesRequestMutex.RLock()
	defer fake.describeSpotFleetInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeSpotFleetInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesRequestReturns(result1 *request.Request, result2 *ec2.DescribeSpotFleetInstancesOutput) {
	fake.describeSpotFleetInstancesRequestMutex.Lock()
	defer fake.describeSpotFleetInstancesRequestMutex.Unlock()
	fake.DescribeSpotFleetInstancesRequestStub = nil
	fake.describeSpotFleetInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSpotFleetInstancesOutput) {
	fake.describeSpotFleetInstancesRequestMutex.Lock()
	defer fake.describeSpotFleetInstancesRequestMutex.Unlock()
	fake.DescribeSpotFleetInstancesRequestStub = nil
	if fake.describeSpotFleetInstancesRequestReturnsOnCall == nil {
		fake.describeSpotFleetInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSpotFleetInstancesOutput
		})
	}
	fake.describeSpotFleetInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotFleetInstancesInput, arg3 ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	fake.describeSpotFleetInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetInstancesWithContextReturnsOnCall[len(fake.describeSpotFleetInstancesWithContextArgsForCall)]
	fake.describeSpotFleetInstancesWithContextArgsForCall = append(fake.describeSpotFleetInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSpotFleetInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSpotFleetInstancesWithContextMutex.Unlock()
	if fake.DescribeSpotFleetInstancesWithContextStub != nil {
		return fake.DescribeSpotFleetInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesWithContextCallCount() int {
	fake.describeSpotFleetInstancesWithContextMutex.RLock()
	defer fake.describeSpotFleetInstancesWithContextMutex.RUnlock()
	return len(fake.describeSpotFleetInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotFleetInstancesInput, ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error)) {
	fake.describeSpotFleetInstancesWithContextMutex.Lock()
	defer fake.describeSpotFleetInstancesWithContextMutex.Unlock()
	fake.DescribeSpotFleetInstancesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotFleetInstancesInput, []request.Option) {
	fake.describeSpotFleetInstancesWithContextMutex.RLock()
	defer fake.describeSpotFleetInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotFleetInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesWithContextReturns(result1 *ec2.DescribeSpotFleetInstancesOutput, result2 error) {
	fake.describeSpotFleetInstancesWithContextMutex.Lock()
	defer fake.describeSpotFleetInstancesWithContextMutex.Unlock()
	fake.DescribeSpotFleetInstancesWithContextStub = nil
	fake.describeSpotFleetInstancesWithContextReturns = struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetInstancesWithContextReturnsOnCall(i int, result1 *ec2.DescribeSpotFleetInstancesOutput, result2 error) {
	fake.describeSpotFleetInstancesWithContextMutex.Lock()
	defer fake.describeSpotFleetInstancesWithContextMutex.Unlock()
	fake.DescribeSpotFleetInstancesWithContextStub = nil
	if fake.describeSpotFleetInstancesWithContextReturnsOnCall == nil {
		fake.describeSpotFleetInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotFleetInstancesOutput
			result2 error
		})
	}
	fake.describeSpotFleetInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotFleetInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistory(arg1 *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	fake.describeSpotFleetRequestHistoryMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestHistoryReturnsOnCall[len(fake.describeSpotFleetRequestHistoryArgsForCall)]
	fake.describeSpotFleetRequestHistoryArgsForCall = append(fake.describeSpotFleetRequestHistoryArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetRequestHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeSpotFleetRequestHistory", []interface{}{arg1})
	fake.describeSpotFleetRequestHistoryMutex.Unlock()
	if fake.DescribeSpotFleetRequestHistoryStub != nil {
		return fake.DescribeSpotFleetRequestHistoryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetRequestHistoryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryCallCount() int {
	fake.describeSpotFleetRequestHistoryMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryMutex.RUnlock()
	return len(fake.describeSpotFleetRequestHistoryArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryCalls(stub func(*ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)) {
	fake.describeSpotFleetRequestHistoryMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryArgsForCall(i int) *ec2.DescribeSpotFleetRequestHistoryInput {
	fake.describeSpotFleetRequestHistoryMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryReturns(result1 *ec2.DescribeSpotFleetRequestHistoryOutput, result2 error) {
	fake.describeSpotFleetRequestHistoryMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryStub = nil
	fake.describeSpotFleetRequestHistoryReturns = struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryReturnsOnCall(i int, result1 *ec2.DescribeSpotFleetRequestHistoryOutput, result2 error) {
	fake.describeSpotFleetRequestHistoryMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryStub = nil
	if fake.describeSpotFleetRequestHistoryReturnsOnCall == nil {
		fake.describeSpotFleetRequestHistoryReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotFleetRequestHistoryOutput
			result2 error
		})
	}
	fake.describeSpotFleetRequestHistoryReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryRequest(arg1 *ec2.DescribeSpotFleetRequestHistoryInput) (*request.Request, *ec2.DescribeSpotFleetRequestHistoryOutput) {
	fake.describeSpotFleetRequestHistoryRequestMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestHistoryRequestReturnsOnCall[len(fake.describeSpotFleetRequestHistoryRequestArgsForCall)]
	fake.describeSpotFleetRequestHistoryRequestArgsForCall = append(fake.describeSpotFleetRequestHistoryRequestArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetRequestHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeSpotFleetRequestHistoryRequest", []interface{}{arg1})
	fake.describeSpotFleetRequestHistoryRequestMutex.Unlock()
	if fake.DescribeSpotFleetRequestHistoryRequestStub != nil {
		return fake.DescribeSpotFleetRequestHistoryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetRequestHistoryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryRequestCallCount() int {
	fake.describeSpotFleetRequestHistoryRequestMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryRequestMutex.RUnlock()
	return len(fake.describeSpotFleetRequestHistoryRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryRequestCalls(stub func(*ec2.DescribeSpotFleetRequestHistoryInput) (*request.Request, *ec2.DescribeSpotFleetRequestHistoryOutput)) {
	fake.describeSpotFleetRequestHistoryRequestMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryRequestMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryRequestStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryRequestArgsForCall(i int) *ec2.DescribeSpotFleetRequestHistoryInput {
	fake.describeSpotFleetRequestHistoryRequestMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryRequestMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryRequestReturns(result1 *request.Request, result2 *ec2.DescribeSpotFleetRequestHistoryOutput) {
	fake.describeSpotFleetRequestHistoryRequestMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryRequestMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryRequestStub = nil
	fake.describeSpotFleetRequestHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestHistoryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSpotFleetRequestHistoryOutput) {
	fake.describeSpotFleetRequestHistoryRequestMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryRequestMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryRequestStub = nil
	if fake.describeSpotFleetRequestHistoryRequestReturnsOnCall == nil {
		fake.describeSpotFleetRequestHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSpotFleetRequestHistoryOutput
		})
	}
	fake.describeSpotFleetRequestHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestHistoryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotFleetRequestHistoryInput, arg3 ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	fake.describeSpotFleetRequestHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestHistoryWithContextReturnsOnCall[len(fake.describeSpotFleetRequestHistoryWithContextArgsForCall)]
	fake.describeSpotFleetRequestHistoryWithContextArgsForCall = append(fake.describeSpotFleetRequestHistoryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetRequestHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSpotFleetRequestHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSpotFleetRequestHistoryWithContextMutex.Unlock()
	if fake.DescribeSpotFleetRequestHistoryWithContextStub != nil {
		return fake.DescribeSpotFleetRequestHistoryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetRequestHistoryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryWithContextCallCount() int {
	fake.describeSpotFleetRequestHistoryWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryWithContextMutex.RUnlock()
	return len(fake.describeSpotFleetRequestHistoryWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotFleetRequestHistoryInput, ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)) {
	fake.describeSpotFleetRequestHistoryWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotFleetRequestHistoryInput, []request.Option) {
	fake.describeSpotFleetRequestHistoryWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryWithContextReturns(result1 *ec2.DescribeSpotFleetRequestHistoryOutput, result2 error) {
	fake.describeSpotFleetRequestHistoryWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryWithContextStub = nil
	fake.describeSpotFleetRequestHistoryWithContextReturns = struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestHistoryWithContextReturnsOnCall(i int, result1 *ec2.DescribeSpotFleetRequestHistoryOutput, result2 error) {
	fake.describeSpotFleetRequestHistoryWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestHistoryWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestHistoryWithContextStub = nil
	if fake.describeSpotFleetRequestHistoryWithContextReturnsOnCall == nil {
		fake.describeSpotFleetRequestHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotFleetRequestHistoryOutput
			result2 error
		})
	}
	fake.describeSpotFleetRequestHistoryWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotFleetRequestHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequests(arg1 *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	fake.describeSpotFleetRequestsMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestsReturnsOnCall[len(fake.describeSpotFleetRequestsArgsForCall)]
	fake.describeSpotFleetRequestsArgsForCall = append(fake.describeSpotFleetRequestsArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetRequestsInput
	}{arg1})
	fake.recordInvocation("DescribeSpotFleetRequests", []interface{}{arg1})
	fake.describeSpotFleetRequestsMutex.Unlock()
	if fake.DescribeSpotFleetRequestsStub != nil {
		return fake.DescribeSpotFleetRequestsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetRequestsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsCallCount() int {
	fake.describeSpotFleetRequestsMutex.RLock()
	defer fake.describeSpotFleetRequestsMutex.RUnlock()
	return len(fake.describeSpotFleetRequestsArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsCalls(stub func(*ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error)) {
	fake.describeSpotFleetRequestsMutex.Lock()
	defer fake.describeSpotFleetRequestsMutex.Unlock()
	fake.DescribeSpotFleetRequestsStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsArgsForCall(i int) *ec2.DescribeSpotFleetRequestsInput {
	fake.describeSpotFleetRequestsMutex.RLock()
	defer fake.describeSpotFleetRequestsMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsReturns(result1 *ec2.DescribeSpotFleetRequestsOutput, result2 error) {
	fake.describeSpotFleetRequestsMutex.Lock()
	defer fake.describeSpotFleetRequestsMutex.Unlock()
	fake.DescribeSpotFleetRequestsStub = nil
	fake.describeSpotFleetRequestsReturns = struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsReturnsOnCall(i int, result1 *ec2.DescribeSpotFleetRequestsOutput, result2 error) {
	fake.describeSpotFleetRequestsMutex.Lock()
	defer fake.describeSpotFleetRequestsMutex.Unlock()
	fake.DescribeSpotFleetRequestsStub = nil
	if fake.describeSpotFleetRequestsReturnsOnCall == nil {
		fake.describeSpotFleetRequestsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotFleetRequestsOutput
			result2 error
		})
	}
	fake.describeSpotFleetRequestsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPages(arg1 *ec2.DescribeSpotFleetRequestsInput, arg2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error {
	fake.describeSpotFleetRequestsPagesMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestsPagesReturnsOnCall[len(fake.describeSpotFleetRequestsPagesArgsForCall)]
	fake.describeSpotFleetRequestsPagesArgsForCall = append(fake.describeSpotFleetRequestsPagesArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetRequestsInput
		arg2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeSpotFleetRequestsPages", []interface{}{arg1, arg2})
	fake.describeSpotFleetRequestsPagesMutex.Unlock()
	if fake.DescribeSpotFleetRequestsPagesStub != nil {
		return fake.DescribeSpotFleetRequestsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSpotFleetRequestsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesCallCount() int {
	fake.describeSpotFleetRequestsPagesMutex.RLock()
	defer fake.describeSpotFleetRequestsPagesMutex.RUnlock()
	return len(fake.describeSpotFleetRequestsPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesCalls(stub func(*ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error) {
	fake.describeSpotFleetRequestsPagesMutex.Lock()
	defer fake.describeSpotFleetRequestsPagesMutex.Unlock()
	fake.DescribeSpotFleetRequestsPagesStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesArgsForCall(i int) (*ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) {
	fake.describeSpotFleetRequestsPagesMutex.RLock()
	defer fake.describeSpotFleetRequestsPagesMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesReturns(result1 error) {
	fake.describeSpotFleetRequestsPagesMutex.Lock()
	defer fake.describeSpotFleetRequestsPagesMutex.Unlock()
	fake.DescribeSpotFleetRequestsPagesStub = nil
	fake.describeSpotFleetRequestsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesReturnsOnCall(i int, result1 error) {
	fake.describeSpotFleetRequestsPagesMutex.Lock()
	defer fake.describeSpotFleetRequestsPagesMutex.Unlock()
	fake.DescribeSpotFleetRequestsPagesStub = nil
	if fake.describeSpotFleetRequestsPagesReturnsOnCall == nil {
		fake.describeSpotFleetRequestsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSpotFleetRequestsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotFleetRequestsInput, arg3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSpotFleetRequestsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestsPagesWithContextReturnsOnCall[len(fake.describeSpotFleetRequestsPagesWithContextArgsForCall)]
	fake.describeSpotFleetRequestsPagesWithContextArgsForCall = append(fake.describeSpotFleetRequestsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetRequestsInput
		arg3 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeSpotFleetRequestsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSpotFleetRequestsPagesWithContextMutex.Unlock()
	if fake.DescribeSpotFleetRequestsPagesWithContextStub != nil {
		return fake.DescribeSpotFleetRequestsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSpotFleetRequestsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesWithContextCallCount() int {
	fake.describeSpotFleetRequestsPagesWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestsPagesWithContextMutex.RUnlock()
	return len(fake.describeSpotFleetRequestsPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, ...request.Option) error) {
	fake.describeSpotFleetRequestsPagesWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestsPagesWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestsPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, []request.Option) {
	fake.describeSpotFleetRequestsPagesWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesWithContextReturns(result1 error) {
	fake.describeSpotFleetRequestsPagesWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestsPagesWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestsPagesWithContextStub = nil
	fake.describeSpotFleetRequestsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSpotFleetRequestsPagesWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestsPagesWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestsPagesWithContextStub = nil
	if fake.describeSpotFleetRequestsPagesWithContextReturnsOnCall == nil {
		fake.describeSpotFleetRequestsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSpotFleetRequestsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsRequest(arg1 *ec2.DescribeSpotFleetRequestsInput) (*request.Request, *ec2.DescribeSpotFleetRequestsOutput) {
	fake.describeSpotFleetRequestsRequestMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestsRequestReturnsOnCall[len(fake.describeSpotFleetRequestsRequestArgsForCall)]
	fake.describeSpotFleetRequestsRequestArgsForCall = append(fake.describeSpotFleetRequestsRequestArgsForCall, struct {
		arg1 *ec2.DescribeSpotFleetRequestsInput
	}{arg1})
	fake.recordInvocation("DescribeSpotFleetRequestsRequest", []interface{}{arg1})
	fake.describeSpotFleetRequestsRequestMutex.Unlock()
	if fake.DescribeSpotFleetRequestsRequestStub != nil {
		return fake.DescribeSpotFleetRequestsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetRequestsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsRequestCallCount() int {
	fake.describeSpotFleetRequestsRequestMutex.RLock()
	defer fake.describeSpotFleetRequestsRequestMutex.RUnlock()
	return len(fake.describeSpotFleetRequestsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsRequestCalls(stub func(*ec2.DescribeSpotFleetRequestsInput) (*request.Request, *ec2.DescribeSpotFleetRequestsOutput)) {
	fake.describeSpotFleetRequestsRequestMutex.Lock()
	defer fake.describeSpotFleetRequestsRequestMutex.Unlock()
	fake.DescribeSpotFleetRequestsRequestStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsRequestArgsForCall(i int) *ec2.DescribeSpotFleetRequestsInput {
	fake.describeSpotFleetRequestsRequestMutex.RLock()
	defer fake.describeSpotFleetRequestsRequestMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsRequestReturns(result1 *request.Request, result2 *ec2.DescribeSpotFleetRequestsOutput) {
	fake.describeSpotFleetRequestsRequestMutex.Lock()
	defer fake.describeSpotFleetRequestsRequestMutex.Unlock()
	fake.DescribeSpotFleetRequestsRequestStub = nil
	fake.describeSpotFleetRequestsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSpotFleetRequestsOutput) {
	fake.describeSpotFleetRequestsRequestMutex.Lock()
	defer fake.describeSpotFleetRequestsRequestMutex.Unlock()
	fake.DescribeSpotFleetRequestsRequestStub = nil
	if fake.describeSpotFleetRequestsRequestReturnsOnCall == nil {
		fake.describeSpotFleetRequestsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSpotFleetRequestsOutput
		})
	}
	fake.describeSpotFleetRequestsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotFleetRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotFleetRequestsInput, arg3 ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	fake.describeSpotFleetRequestsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotFleetRequestsWithContextReturnsOnCall[len(fake.describeSpotFleetRequestsWithContextArgsForCall)]
	fake.describeSpotFleetRequestsWithContextArgsForCall = append(fake.describeSpotFleetRequestsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotFleetRequestsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSpotFleetRequestsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSpotFleetRequestsWithContextMutex.Unlock()
	if fake.DescribeSpotFleetRequestsWithContextStub != nil {
		return fake.DescribeSpotFleetRequestsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotFleetRequestsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsWithContextCallCount() int {
	fake.describeSpotFleetRequestsWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestsWithContextMutex.RUnlock()
	return len(fake.describeSpotFleetRequestsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotFleetRequestsInput, ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error)) {
	fake.describeSpotFleetRequestsWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestsWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotFleetRequestsInput, []request.Option) {
	fake.describeSpotFleetRequestsWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestsWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotFleetRequestsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsWithContextReturns(result1 *ec2.DescribeSpotFleetRequestsOutput, result2 error) {
	fake.describeSpotFleetRequestsWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestsWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestsWithContextStub = nil
	fake.describeSpotFleetRequestsWithContextReturns = struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotFleetRequestsWithContextReturnsOnCall(i int, result1 *ec2.DescribeSpotFleetRequestsOutput, result2 error) {
	fake.describeSpotFleetRequestsWithContextMutex.Lock()
	defer fake.describeSpotFleetRequestsWithContextMutex.Unlock()
	fake.DescribeSpotFleetRequestsWithContextStub = nil
	if fake.describeSpotFleetRequestsWithContextReturnsOnCall == nil {
		fake.describeSpotFleetRequestsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotFleetRequestsOutput
			result2 error
		})
	}
	fake.describeSpotFleetRequestsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotFleetRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotInstanceRequests(arg1 *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	fake.describeSpotInstanceRequestsMutex.Lock()
	ret, specificReturn := fake.describeSpotInstanceRequestsReturnsOnCall[len(fake.describeSpotInstanceRequestsArgsForCall)]
	fake.describeSpotInstanceRequestsArgsForCall = append(fake.describeSpotInstanceRequestsArgsForCall, struct {
		arg1 *ec2.DescribeSpotInstanceRequestsInput
	}{arg1})
	fake.recordInvocation("DescribeSpotInstanceRequests", []interface{}{arg1})
	fake.describeSpotInstanceRequestsMutex.Unlock()
	if fake.DescribeSpotInstanceRequestsStub != nil {
		return fake.DescribeSpotInstanceRequestsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotInstanceRequestsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsCallCount() int {
	fake.describeSpotInstanceRequestsMutex.RLock()
	defer fake.describeSpotInstanceRequestsMutex.RUnlock()
	return len(fake.describeSpotInstanceRequestsArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsCalls(stub func(*ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error)) {
	fake.describeSpotInstanceRequestsMutex.Lock()
	defer fake.describeSpotInstanceRequestsMutex.Unlock()
	fake.DescribeSpotInstanceRequestsStub = stub
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsArgsForCall(i int) *ec2.DescribeSpotInstanceRequestsInput {
	fake.describeSpotInstanceRequestsMutex.RLock()
	defer fake.describeSpotInstanceRequestsMutex.RUnlock()
	argsForCall := fake.describeSpotInstanceRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsReturns(result1 *ec2.DescribeSpotInstanceRequestsOutput, result2 error) {
	fake.describeSpotInstanceRequestsMutex.Lock()
	defer fake.describeSpotInstanceRequestsMutex.Unlock()
	fake.DescribeSpotInstanceRequestsStub = nil
	fake.describeSpotInstanceRequestsReturns = struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsReturnsOnCall(i int, result1 *ec2.DescribeSpotInstanceRequestsOutput, result2 error) {
	fake.describeSpotInstanceRequestsMutex.Lock()
	defer fake.describeSpotInstanceRequestsMutex.Unlock()
	fake.DescribeSpotInstanceRequestsStub = nil
	if fake.describeSpotInstanceRequestsReturnsOnCall == nil {
		fake.describeSpotInstanceRequestsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotInstanceRequestsOutput
			result2 error
		})
	}
	fake.describeSpotInstanceRequestsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsRequest(arg1 *ec2.DescribeSpotInstanceRequestsInput) (*request.Request, *ec2.DescribeSpotInstanceRequestsOutput) {
	fake.describeSpotInstanceRequestsRequestMutex.Lock()
	ret, specificReturn := fake.describeSpotInstanceRequestsRequestReturnsOnCall[len(fake.describeSpotInstanceRequestsRequestArgsForCall)]
	fake.describeSpotInstanceRequestsRequestArgsForCall = append(fake.describeSpotInstanceRequestsRequestArgsForCall, struct {
		arg1 *ec2.DescribeSpotInstanceRequestsInput
	}{arg1})
	fake.recordInvocation("DescribeSpotInstanceRequestsRequest", []interface{}{arg1})
	fake.describeSpotInstanceRequestsRequestMutex.Unlock()
	if fake.DescribeSpotInstanceRequestsRequestStub != nil {
		return fake.DescribeSpotInstanceRequestsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotInstanceRequestsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsRequestCallCount() int {
	fake.describeSpotInstanceRequestsRequestMutex.RLock()
	defer fake.describeSpotInstanceRequestsRequestMutex.RUnlock()
	return len(fake.describeSpotInstanceRequestsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsRequestCalls(stub func(*ec2.DescribeSpotInstanceRequestsInput) (*request.Request, *ec2.DescribeSpotInstanceRequestsOutput)) {
	fake.describeSpotInstanceRequestsRequestMutex.Lock()
	defer fake.describeSpotInstanceRequestsRequestMutex.Unlock()
	fake.DescribeSpotInstanceRequestsRequestStub = stub
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsRequestArgsForCall(i int) *ec2.DescribeSpotInstanceRequestsInput {
	fake.describeSpotInstanceRequestsRequestMutex.RLock()
	defer fake.describeSpotInstanceRequestsRequestMutex.RUnlock()
	argsForCall := fake.describeSpotInstanceRequestsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsRequestReturns(result1 *request.Request, result2 *ec2.DescribeSpotInstanceRequestsOutput) {
	fake.describeSpotInstanceRequestsRequestMutex.Lock()
	defer fake.describeSpotInstanceRequestsRequestMutex.Unlock()
	fake.DescribeSpotInstanceRequestsRequestStub = nil
	fake.describeSpotInstanceRequestsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotInstanceRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSpotInstanceRequestsOutput) {
	fake.describeSpotInstanceRequestsRequestMutex.Lock()
	defer fake.describeSpotInstanceRequestsRequestMutex.Unlock()
	fake.DescribeSpotInstanceRequestsRequestStub = nil
	if fake.describeSpotInstanceRequestsRequestReturnsOnCall == nil {
		fake.describeSpotInstanceRequestsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSpotInstanceRequestsOutput
		})
	}
	fake.describeSpotInstanceRequestsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotInstanceRequestsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotInstanceRequestsInput, arg3 ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	fake.describeSpotInstanceRequestsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotInstanceRequestsWithContextReturnsOnCall[len(fake.describeSpotInstanceRequestsWithContextArgsForCall)]
	fake.describeSpotInstanceRequestsWithContextArgsForCall = append(fake.describeSpotInstanceRequestsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotInstanceRequestsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSpotInstanceRequestsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSpotInstanceRequestsWithContextMutex.Unlock()
	if fake.DescribeSpotInstanceRequestsWithContextStub != nil {
		return fake.DescribeSpotInstanceRequestsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotInstanceRequestsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsWithContextCallCount() int {
	fake.describeSpotInstanceRequestsWithContextMutex.RLock()
	defer fake.describeSpotInstanceRequestsWithContextMutex.RUnlock()
	return len(fake.describeSpotInstanceRequestsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error)) {
	fake.describeSpotInstanceRequestsWithContextMutex.Lock()
	defer fake.describeSpotInstanceRequestsWithContextMutex.Unlock()
	fake.DescribeSpotInstanceRequestsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotInstanceRequestsInput, []request.Option) {
	fake.describeSpotInstanceRequestsWithContextMutex.RLock()
	defer fake.describeSpotInstanceRequestsWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotInstanceRequestsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsWithContextReturns(result1 *ec2.DescribeSpotInstanceRequestsOutput, result2 error) {
	fake.describeSpotInstanceRequestsWithContextMutex.Lock()
	defer fake.describeSpotInstanceRequestsWithContextMutex.Unlock()
	fake.DescribeSpotInstanceRequestsWithContextStub = nil
	fake.describeSpotInstanceRequestsWithContextReturns = struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotInstanceRequestsWithContextReturnsOnCall(i int, result1 *ec2.DescribeSpotInstanceRequestsOutput, result2 error) {
	fake.describeSpotInstanceRequestsWithContextMutex.Lock()
	defer fake.describeSpotInstanceRequestsWithContextMutex.Unlock()
	fake.DescribeSpotInstanceRequestsWithContextStub = nil
	if fake.describeSpotInstanceRequestsWithContextReturnsOnCall == nil {
		fake.describeSpotInstanceRequestsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotInstanceRequestsOutput
			result2 error
		})
	}
	fake.describeSpotInstanceRequestsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotInstanceRequestsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotPriceHistory(arg1 *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	fake.describeSpotPriceHistoryMutex.Lock()
	ret, specificReturn := fake.describeSpotPriceHistoryReturnsOnCall[len(fake.describeSpotPriceHistoryArgsForCall)]
	fake.describeSpotPriceHistoryArgsForCall = append(fake.describeSpotPriceHistoryArgsForCall, struct {
		arg1 *ec2.DescribeSpotPriceHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeSpotPriceHistory", []interface{}{arg1})
	fake.describeSpotPriceHistoryMutex.Unlock()
	if fake.DescribeSpotPriceHistoryStub != nil {
		return fake.DescribeSpotPriceHistoryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotPriceHistoryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryCallCount() int {
	fake.describeSpotPriceHistoryMutex.RLock()
	defer fake.describeSpotPriceHistoryMutex.RUnlock()
	return len(fake.describeSpotPriceHistoryArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryCalls(stub func(*ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error)) {
	fake.describeSpotPriceHistoryMutex.Lock()
	defer fake.describeSpotPriceHistoryMutex.Unlock()
	fake.DescribeSpotPriceHistoryStub = stub
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryArgsForCall(i int) *ec2.DescribeSpotPriceHistoryInput {
	fake.describeSpotPriceHistoryMutex.RLock()
	defer fake.describeSpotPriceHistoryMutex.RUnlock()
	argsForCall := fake.describeSpotPriceHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryReturns(result1 *ec2.DescribeSpotPriceHistoryOutput, result2 error) {
	fake.describeSpotPriceHistoryMutex.Lock()
	defer fake.describeSpotPriceHistoryMutex.Unlock()
	fake.DescribeSpotPriceHistoryStub = nil
	fake.describeSpotPriceHistoryReturns = struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryReturnsOnCall(i int, result1 *ec2.DescribeSpotPriceHistoryOutput, result2 error) {
	fake.describeSpotPriceHistoryMutex.Lock()
	defer fake.describeSpotPriceHistoryMutex.Unlock()
	fake.DescribeSpotPriceHistoryStub = nil
	if fake.describeSpotPriceHistoryReturnsOnCall == nil {
		fake.describeSpotPriceHistoryReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotPriceHistoryOutput
			result2 error
		})
	}
	fake.describeSpotPriceHistoryReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPages(arg1 *ec2.DescribeSpotPriceHistoryInput, arg2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error {
	fake.describeSpotPriceHistoryPagesMutex.Lock()
	ret, specificReturn := fake.describeSpotPriceHistoryPagesReturnsOnCall[len(fake.describeSpotPriceHistoryPagesArgsForCall)]
	fake.describeSpotPriceHistoryPagesArgsForCall = append(fake.describeSpotPriceHistoryPagesArgsForCall, struct {
		arg1 *ec2.DescribeSpotPriceHistoryInput
		arg2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeSpotPriceHistoryPages", []interface{}{arg1, arg2})
	fake.describeSpotPriceHistoryPagesMutex.Unlock()
	if fake.DescribeSpotPriceHistoryPagesStub != nil {
		return fake.DescribeSpotPriceHistoryPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSpotPriceHistoryPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesCallCount() int {
	fake.describeSpotPriceHistoryPagesMutex.RLock()
	defer fake.describeSpotPriceHistoryPagesMutex.RUnlock()
	return len(fake.describeSpotPriceHistoryPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesCalls(stub func(*ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error) {
	fake.describeSpotPriceHistoryPagesMutex.Lock()
	defer fake.describeSpotPriceHistoryPagesMutex.Unlock()
	fake.DescribeSpotPriceHistoryPagesStub = stub
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesArgsForCall(i int) (*ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) {
	fake.describeSpotPriceHistoryPagesMutex.RLock()
	defer fake.describeSpotPriceHistoryPagesMutex.RUnlock()
	argsForCall := fake.describeSpotPriceHistoryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesReturns(result1 error) {
	fake.describeSpotPriceHistoryPagesMutex.Lock()
	defer fake.describeSpotPriceHistoryPagesMutex.Unlock()
	fake.DescribeSpotPriceHistoryPagesStub = nil
	fake.describeSpotPriceHistoryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesReturnsOnCall(i int, result1 error) {
	fake.describeSpotPriceHistoryPagesMutex.Lock()
	defer fake.describeSpotPriceHistoryPagesMutex.Unlock()
	fake.DescribeSpotPriceHistoryPagesStub = nil
	if fake.describeSpotPriceHistoryPagesReturnsOnCall == nil {
		fake.describeSpotPriceHistoryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSpotPriceHistoryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotPriceHistoryInput, arg3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSpotPriceHistoryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotPriceHistoryPagesWithContextReturnsOnCall[len(fake.describeSpotPriceHistoryPagesWithContextArgsForCall)]
	fake.describeSpotPriceHistoryPagesWithContextArgsForCall = append(fake.describeSpotPriceHistoryPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotPriceHistoryInput
		arg3 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeSpotPriceHistoryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSpotPriceHistoryPagesWithContextMutex.Unlock()
	if fake.DescribeSpotPriceHistoryPagesWithContextStub != nil {
		return fake.DescribeSpotPriceHistoryPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeSpotPriceHistoryPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesWithContextCallCount() int {
	fake.describeSpotPriceHistoryPagesWithContextMutex.RLock()
	defer fake.describeSpotPriceHistoryPagesWithContextMutex.RUnlock()
	return len(fake.describeSpotPriceHistoryPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, ...request.Option) error) {
	fake.describeSpotPriceHistoryPagesWithContextMutex.Lock()
	defer fake.describeSpotPriceHistoryPagesWithContextMutex.Unlock()
	fake.DescribeSpotPriceHistoryPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, []request.Option) {
	fake.describeSpotPriceHistoryPagesWithContextMutex.RLock()
	defer fake.describeSpotPriceHistoryPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotPriceHistoryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesWithContextReturns(result1 error) {
	fake.describeSpotPriceHistoryPagesWithContextMutex.Lock()
	defer fake.describeSpotPriceHistoryPagesWithContextMutex.Unlock()
	fake.DescribeSpotPriceHistoryPagesWithContextStub = nil
	fake.describeSpotPriceHistoryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeSpotPriceHistoryPagesWithContextMutex.Lock()
	defer fake.describeSpotPriceHistoryPagesWithContextMutex.Unlock()
	fake.DescribeSpotPriceHistoryPagesWithContextStub = nil
	if fake.describeSpotPriceHistoryPagesWithContextReturnsOnCall == nil {
		fake.describeSpotPriceHistoryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSpotPriceHistoryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryRequest(arg1 *ec2.DescribeSpotPriceHistoryInput) (*request.Request, *ec2.DescribeSpotPriceHistoryOutput) {
	fake.describeSpotPriceHistoryRequestMutex.Lock()
	ret, specificReturn := fake.describeSpotPriceHistoryRequestReturnsOnCall[len(fake.describeSpotPriceHistoryRequestArgsForCall)]
	fake.describeSpotPriceHistoryRequestArgsForCall = append(fake.describeSpotPriceHistoryRequestArgsForCall, struct {
		arg1 *ec2.DescribeSpotPriceHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeSpotPriceHistoryRequest", []interface{}{arg1})
	fake.describeSpotPriceHistoryRequestMutex.Unlock()
	if fake.DescribeSpotPriceHistoryRequestStub != nil {
		return fake.DescribeSpotPriceHistoryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotPriceHistoryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryRequestCallCount() int {
	fake.describeSpotPriceHistoryRequestMutex.RLock()
	defer fake.describeSpotPriceHistoryRequestMutex.RUnlock()
	return len(fake.describeSpotPriceHistoryRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryRequestCalls(stub func(*ec2.DescribeSpotPriceHistoryInput) (*request.Request, *ec2.DescribeSpotPriceHistoryOutput)) {
	fake.describeSpotPriceHistoryRequestMutex.Lock()
	defer fake.describeSpotPriceHistoryRequestMutex.Unlock()
	fake.DescribeSpotPriceHistoryRequestStub = stub
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryRequestArgsForCall(i int) *ec2.DescribeSpotPriceHistoryInput {
	fake.describeSpotPriceHistoryRequestMutex.RLock()
	defer fake.describeSpotPriceHistoryRequestMutex.RUnlock()
	argsForCall := fake.describeSpotPriceHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryRequestReturns(result1 *request.Request, result2 *ec2.DescribeSpotPriceHistoryOutput) {
	fake.describeSpotPriceHistoryRequestMutex.Lock()
	defer fake.describeSpotPriceHistoryRequestMutex.Unlock()
	fake.DescribeSpotPriceHistoryRequestStub = nil
	fake.describeSpotPriceHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotPriceHistoryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSpotPriceHistoryOutput) {
	fake.describeSpotPriceHistoryRequestMutex.Lock()
	defer fake.describeSpotPriceHistoryRequestMutex.Unlock()
	fake.DescribeSpotPriceHistoryRequestStub = nil
	if fake.describeSpotPriceHistoryRequestReturnsOnCall == nil {
		fake.describeSpotPriceHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSpotPriceHistoryOutput
		})
	}
	fake.describeSpotPriceHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSpotPriceHistoryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotPriceHistoryInput, arg3 ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	fake.describeSpotPriceHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.describeSpotPriceHistoryWithContextReturnsOnCall[len(fake.describeSpotPriceHistoryWithContextArgsForCall)]
	fake.describeSpotPriceHistoryWithContextArgsForCall = append(fake.describeSpotPriceHistoryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotPriceHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSpotPriceHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSpotPriceHistoryWithContextMutex.Unlock()
	if fake.DescribeSpotPriceHistoryWithContextStub != nil {
		return fake.DescribeSpotPriceHistoryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSpotPriceHistoryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryWithContextCallCount() int {
	fake.describeSpotPriceHistoryWithContextMutex.RLock()
	defer fake.describeSpotPriceHistoryWithContextMutex.RUnlock()
	return len(fake.describeSpotPriceHistoryWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotPriceHistoryInput, ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error)) {
	fake.describeSpotPriceHistoryWithContextMutex.Lock()
	defer fake.describeSpotPriceHistoryWithContextMutex.Unlock()
	fake.DescribeSpotPriceHistoryWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotPriceHistoryInput, []request.Option) {
	fake.describeSpotPriceHistoryWithContextMutex.RLock()
	defer fake.describeSpotPriceHistoryWithContextMutex.RUnlock()
	argsForCall := fake.describeSpotPriceHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryWithContextReturns(result1 *ec2.DescribeSpotPriceHistoryOutput, result2 error) {
	fake.describeSpotPriceHistoryWithContextMutex.Lock()
	defer fake.describeSpotPriceHistoryWithContextMutex.Unlock()
	fake.DescribeSpotPriceHistoryWithContextStub = nil
	fake.describeSpotPriceHistoryWithContextReturns = struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSpotPriceHistoryWithContextReturnsOnCall(i int, result1 *ec2.DescribeSpotPriceHistoryOutput, result2 error) {
	fake.describeSpotPriceHistoryWithContextMutex.Lock()
	defer fake.describeSpotPriceHistoryWithContextMutex.Unlock()
	fake.DescribeSpotPriceHistoryWithContextStub = nil
	if fake.describeSpotPriceHistoryWithContextReturnsOnCall == nil {
		fake.describeSpotPriceHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSpotPriceHistoryOutput
			result2 error
		})
	}
	fake.describeSpotPriceHistoryWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSpotPriceHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeStaleSecurityGroups(arg1 *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	fake.describeStaleSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.describeStaleSecurityGroupsReturnsOnCall[len(fake.describeStaleSecurityGroupsArgsForCall)]
	fake.describeStaleSecurityGroupsArgsForCall = append(fake.describeStaleSecurityGroupsArgsForCall, struct {
		arg1 *ec2.DescribeStaleSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeStaleSecurityGroups", []interface{}{arg1})
	fake.describeStaleSecurityGroupsMutex.Unlock()
	if fake.DescribeStaleSecurityGroupsStub != nil {
		return fake.DescribeStaleSecurityGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeStaleSecurityGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsCallCount() int {
	fake.describeStaleSecurityGroupsMutex.RLock()
	defer fake.describeStaleSecurityGroupsMutex.RUnlock()
	return len(fake.describeStaleSecurityGroupsArgsForCall)
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsCalls(stub func(*ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error)) {
	fake.describeStaleSecurityGroupsMutex.Lock()
	defer fake.describeStaleSecurityGroupsMutex.Unlock()
	fake.DescribeStaleSecurityGroupsStub = stub
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsArgsForCall(i int) *ec2.DescribeStaleSecurityGroupsInput {
	fake.describeStaleSecurityGroupsMutex.RLock()
	defer fake.describeStaleSecurityGroupsMutex.RUnlock()
	argsForCall := fake.describeStaleSecurityGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsReturns(result1 *ec2.DescribeStaleSecurityGroupsOutput, result2 error) {
	fake.describeStaleSecurityGroupsMutex.Lock()
	defer fake.describeStaleSecurityGroupsMutex.Unlock()
	fake.DescribeStaleSecurityGroupsStub = nil
	fake.describeStaleSecurityGroupsReturns = struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsReturnsOnCall(i int, result1 *ec2.DescribeStaleSecurityGroupsOutput, result2 error) {
	fake.describeStaleSecurityGroupsMutex.Lock()
	defer fake.describeStaleSecurityGroupsMutex.Unlock()
	fake.DescribeStaleSecurityGroupsStub = nil
	if fake.describeStaleSecurityGroupsReturnsOnCall == nil {
		fake.describeStaleSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeStaleSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeStaleSecurityGroupsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsRequest(arg1 *ec2.DescribeStaleSecurityGroupsInput) (*request.Request, *ec2.DescribeStaleSecurityGroupsOutput) {
	fake.describeStaleSecurityGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeStaleSecurityGroupsRequestReturnsOnCall[len(fake.describeStaleSecurityGroupsRequestArgsForCall)]
	fake.describeStaleSecurityGroupsRequestArgsForCall = append(fake.describeStaleSecurityGroupsRequestArgsForCall, struct {
		arg1 *ec2.DescribeStaleSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeStaleSecurityGroupsRequest", []interface{}{arg1})
	fake.describeStaleSecurityGroupsRequestMutex.Unlock()
	if fake.DescribeStaleSecurityGroupsRequestStub != nil {
		return fake.DescribeStaleSecurityGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeStaleSecurityGroupsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsRequestCallCount() int {
	fake.describeStaleSecurityGroupsRequestMutex.RLock()
	defer fake.describeStaleSecurityGroupsRequestMutex.RUnlock()
	return len(fake.describeStaleSecurityGroupsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsRequestCalls(stub func(*ec2.DescribeStaleSecurityGroupsInput) (*request.Request, *ec2.DescribeStaleSecurityGroupsOutput)) {
	fake.describeStaleSecurityGroupsRequestMutex.Lock()
	defer fake.describeStaleSecurityGroupsRequestMutex.Unlock()
	fake.DescribeStaleSecurityGroupsRequestStub = stub
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsRequestArgsForCall(i int) *ec2.DescribeStaleSecurityGroupsInput {
	fake.describeStaleSecurityGroupsRequestMutex.RLock()
	defer fake.describeStaleSecurityGroupsRequestMutex.RUnlock()
	argsForCall := fake.describeStaleSecurityGroupsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsRequestReturns(result1 *request.Request, result2 *ec2.DescribeStaleSecurityGroupsOutput) {
	fake.describeStaleSecurityGroupsRequestMutex.Lock()
	defer fake.describeStaleSecurityGroupsRequestMutex.Unlock()
	fake.DescribeStaleSecurityGroupsRequestStub = nil
	fake.describeStaleSecurityGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeStaleSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeStaleSecurityGroupsOutput) {
	fake.describeStaleSecurityGroupsRequestMutex.Lock()
	defer fake.describeStaleSecurityGroupsRequestMutex.Unlock()
	fake.DescribeStaleSecurityGroupsRequestStub = nil
	if fake.describeStaleSecurityGroupsRequestReturnsOnCall == nil {
		fake.describeStaleSecurityGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeStaleSecurityGroupsOutput
		})
	}
	fake.describeStaleSecurityGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeStaleSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsWithContext(arg1 aws.Context, arg2 *ec2.DescribeStaleSecurityGroupsInput, arg3 ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	fake.describeStaleSecurityGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeStaleSecurityGroupsWithContextReturnsOnCall[len(fake.describeStaleSecurityGroupsWithContextArgsForCall)]
	fake.describeStaleSecurityGroupsWithContextArgsForCall = append(fake.describeStaleSecurityGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeStaleSecurityGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStaleSecurityGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStaleSecurityGroupsWithContextMutex.Unlock()
	if fake.DescribeStaleSecurityGroupsWithContextStub != nil {
		return fake.DescribeStaleSecurityGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeStaleSecurityGroupsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsWithContextCallCount() int {
	fake.describeStaleSecurityGroupsWithContextMutex.RLock()
	defer fake.describeStaleSecurityGroupsWithContextMutex.RUnlock()
	return len(fake.describeStaleSecurityGroupsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsWithContextCalls(stub func(aws.Context, *ec2.DescribeStaleSecurityGroupsInput, ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error)) {
	fake.describeStaleSecurityGroupsWithContextMutex.Lock()
	defer fake.describeStaleSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeStaleSecurityGroupsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeStaleSecurityGroupsInput, []request.Option) {
	fake.describeStaleSecurityGroupsWithContextMutex.RLock()
	defer fake.describeStaleSecurityGroupsWithContextMutex.RUnlock()
	argsForCall := fake.describeStaleSecurityGroupsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsWithContextReturns(result1 *ec2.DescribeStaleSecurityGroupsOutput, result2 error) {
	fake.describeStaleSecurityGroupsWithContextMutex.Lock()
	defer fake.describeStaleSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeStaleSecurityGroupsWithContextStub = nil
	fake.describeStaleSecurityGroupsWithContextReturns = struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeStaleSecurityGroupsWithContextReturnsOnCall(i int, result1 *ec2.DescribeStaleSecurityGroupsOutput, result2 error) {
	fake.describeStaleSecurityGroupsWithContextMutex.Lock()
	defer fake.describeStaleSecurityGroupsWithContextMutex.Unlock()
	fake.DescribeStaleSecurityGroupsWithContextStub = nil
	if fake.describeStaleSecurityGroupsWithContextReturnsOnCall == nil {
		fake.describeStaleSecurityGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeStaleSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeStaleSecurityGroupsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeStaleSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSubnets(arg1 *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	fake.describeSubnetsMutex.Lock()
	ret, specificReturn := fake.describeSubnetsReturnsOnCall[len(fake.describeSubnetsArgsForCall)]
	fake.describeSubnetsArgsForCall = append(fake.describeSubnetsArgsForCall, struct {
		arg1 *ec2.DescribeSubnetsInput
	}{arg1})
	fake.recordInvocation("DescribeSubnets", []interface{}{arg1})
	fake.describeSubnetsMutex.Unlock()
	if fake.DescribeSubnetsStub != nil {
		return fake.DescribeSubnetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSubnetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSubnetsCallCount() int {
	fake.describeSubnetsMutex.RLock()
	defer fake.describeSubnetsMutex.RUnlock()
	return len(fake.describeSubnetsArgsForCall)
}

func (fake *FakeEC2API) DescribeSubnetsCalls(stub func(*ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error)) {
	fake.describeSubnetsMutex.Lock()
	defer fake.describeSubnetsMutex.Unlock()
	fake.DescribeSubnetsStub = stub
}

func (fake *FakeEC2API) DescribeSubnetsArgsForCall(i int) *ec2.DescribeSubnetsInput {
	fake.describeSubnetsMutex.RLock()
	defer fake.describeSubnetsMutex.RUnlock()
	argsForCall := fake.describeSubnetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSubnetsReturns(result1 *ec2.DescribeSubnetsOutput, result2 error) {
	fake.describeSubnetsMutex.Lock()
	defer fake.describeSubnetsMutex.Unlock()
	fake.DescribeSubnetsStub = nil
	fake.describeSubnetsReturns = struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSubnetsReturnsOnCall(i int, result1 *ec2.DescribeSubnetsOutput, result2 error) {
	fake.describeSubnetsMutex.Lock()
	defer fake.describeSubnetsMutex.Unlock()
	fake.DescribeSubnetsStub = nil
	if fake.describeSubnetsReturnsOnCall == nil {
		fake.describeSubnetsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSubnetsOutput
			result2 error
		})
	}
	fake.describeSubnetsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSubnetsRequest(arg1 *ec2.DescribeSubnetsInput) (*request.Request, *ec2.DescribeSubnetsOutput) {
	fake.describeSubnetsRequestMutex.Lock()
	ret, specificReturn := fake.describeSubnetsRequestReturnsOnCall[len(fake.describeSubnetsRequestArgsForCall)]
	fake.describeSubnetsRequestArgsForCall = append(fake.describeSubnetsRequestArgsForCall, struct {
		arg1 *ec2.DescribeSubnetsInput
	}{arg1})
	fake.recordInvocation("DescribeSubnetsRequest", []interface{}{arg1})
	fake.describeSubnetsRequestMutex.Unlock()
	if fake.DescribeSubnetsRequestStub != nil {
		return fake.DescribeSubnetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSubnetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSubnetsRequestCallCount() int {
	fake.describeSubnetsRequestMutex.RLock()
	defer fake.describeSubnetsRequestMutex.RUnlock()
	return len(fake.describeSubnetsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeSubnetsRequestCalls(stub func(*ec2.DescribeSubnetsInput) (*request.Request, *ec2.DescribeSubnetsOutput)) {
	fake.describeSubnetsRequestMutex.Lock()
	defer fake.describeSubnetsRequestMutex.Unlock()
	fake.DescribeSubnetsRequestStub = stub
}

func (fake *FakeEC2API) DescribeSubnetsRequestArgsForCall(i int) *ec2.DescribeSubnetsInput {
	fake.describeSubnetsRequestMutex.RLock()
	defer fake.describeSubnetsRequestMutex.RUnlock()
	argsForCall := fake.describeSubnetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeSubnetsRequestReturns(result1 *request.Request, result2 *ec2.DescribeSubnetsOutput) {
	fake.describeSubnetsRequestMutex.Lock()
	defer fake.describeSubnetsRequestMutex.Unlock()
	fake.DescribeSubnetsRequestStub = nil
	fake.describeSubnetsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeSubnetsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSubnetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeSubnetsOutput) {
	fake.describeSubnetsRequestMutex.Lock()
	defer fake.describeSubnetsRequestMutex.Unlock()
	fake.DescribeSubnetsRequestStub = nil
	if fake.describeSubnetsRequestReturnsOnCall == nil {
		fake.describeSubnetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeSubnetsOutput
		})
	}
	fake.describeSubnetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeSubnetsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSubnetsWithContext(arg1 aws.Context, arg2 *ec2.DescribeSubnetsInput, arg3 ...request.Option) (*ec2.DescribeSubnetsOutput, error) {
	fake.describeSubnetsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSubnetsWithContextReturnsOnCall[len(fake.describeSubnetsWithContextArgsForCall)]
	fake.describeSubnetsWithContextArgsForCall = append(fake.describeSubnetsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSubnetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSubnetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSubnetsWithContextMutex.Unlock()
	if fake.DescribeSubnetsWithContextStub != nil {
		return fake.DescribeSubnetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeSubnetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeSubnetsWithContextCallCount() int {
	fake.describeSubnetsWithContextMutex.RLock()
	defer fake.describeSubnetsWithContextMutex.RUnlock()
	return len(fake.describeSubnetsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeSubnetsWithContextCalls(stub func(aws.Context, *ec2.DescribeSubnetsInput, ...request.Option) (*ec2.DescribeSubnetsOutput, error)) {
	fake.describeSubnetsWithContextMutex.Lock()
	defer fake.describeSubnetsWithContextMutex.Unlock()
	fake.DescribeSubnetsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeSubnetsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSubnetsInput, []request.Option) {
	fake.describeSubnetsWithContextMutex.RLock()
	defer fake.describeSubnetsWithContextMutex.RUnlock()
	argsForCall := fake.describeSubnetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeSubnetsWithContextReturns(result1 *ec2.DescribeSubnetsOutput, result2 error) {
	fake.describeSubnetsWithContextMutex.Lock()
	defer fake.describeSubnetsWithContextMutex.Unlock()
	fake.DescribeSubnetsWithContextStub = nil
	fake.describeSubnetsWithContextReturns = struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeSubnetsWithContextReturnsOnCall(i int, result1 *ec2.DescribeSubnetsOutput, result2 error) {
	fake.describeSubnetsWithContextMutex.Lock()
	defer fake.describeSubnetsWithContextMutex.Unlock()
	fake.DescribeSubnetsWithContextStub = nil
	if fake.describeSubnetsWithContextReturnsOnCall == nil {
		fake.describeSubnetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeSubnetsOutput
			result2 error
		})
	}
	fake.describeSubnetsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeSubnetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTags(arg1 *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	fake.describeTagsMutex.Lock()
	ret, specificReturn := fake.describeTagsReturnsOnCall[len(fake.describeTagsArgsForCall)]
	fake.describeTagsArgsForCall = append(fake.describeTagsArgsForCall, struct {
		arg1 *ec2.DescribeTagsInput
	}{arg1})
	fake.recordInvocation("DescribeTags", []interface{}{arg1})
	fake.describeTagsMutex.Unlock()
	if fake.DescribeTagsStub != nil {
		return fake.DescribeTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTagsCallCount() int {
	fake.describeTagsMutex.RLock()
	defer fake.describeTagsMutex.RUnlock()
	return len(fake.describeTagsArgsForCall)
}

func (fake *FakeEC2API) DescribeTagsCalls(stub func(*ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error)) {
	fake.describeTagsMutex.Lock()
	defer fake.describeTagsMutex.Unlock()
	fake.DescribeTagsStub = stub
}

func (fake *FakeEC2API) DescribeTagsArgsForCall(i int) *ec2.DescribeTagsInput {
	fake.describeTagsMutex.RLock()
	defer fake.describeTagsMutex.RUnlock()
	argsForCall := fake.describeTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTagsReturns(result1 *ec2.DescribeTagsOutput, result2 error) {
	fake.describeTagsMutex.Lock()
	defer fake.describeTagsMutex.Unlock()
	fake.DescribeTagsStub = nil
	fake.describeTagsReturns = struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTagsReturnsOnCall(i int, result1 *ec2.DescribeTagsOutput, result2 error) {
	fake.describeTagsMutex.Lock()
	defer fake.describeTagsMutex.Unlock()
	fake.DescribeTagsStub = nil
	if fake.describeTagsReturnsOnCall == nil {
		fake.describeTagsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTagsOutput
			result2 error
		})
	}
	fake.describeTagsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTagsPages(arg1 *ec2.DescribeTagsInput, arg2 func(*ec2.DescribeTagsOutput, bool) bool) error {
	fake.describeTagsPagesMutex.Lock()
	ret, specificReturn := fake.describeTagsPagesReturnsOnCall[len(fake.describeTagsPagesArgsForCall)]
	fake.describeTagsPagesArgsForCall = append(fake.describeTagsPagesArgsForCall, struct {
		arg1 *ec2.DescribeTagsInput
		arg2 func(*ec2.DescribeTagsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeTagsPages", []interface{}{arg1, arg2})
	fake.describeTagsPagesMutex.Unlock()
	if fake.DescribeTagsPagesStub != nil {
		return fake.DescribeTagsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeTagsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeTagsPagesCallCount() int {
	fake.describeTagsPagesMutex.RLock()
	defer fake.describeTagsPagesMutex.RUnlock()
	return len(fake.describeTagsPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeTagsPagesCalls(stub func(*ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool) error) {
	fake.describeTagsPagesMutex.Lock()
	defer fake.describeTagsPagesMutex.Unlock()
	fake.DescribeTagsPagesStub = stub
}

func (fake *FakeEC2API) DescribeTagsPagesArgsForCall(i int) (*ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool) {
	fake.describeTagsPagesMutex.RLock()
	defer fake.describeTagsPagesMutex.RUnlock()
	argsForCall := fake.describeTagsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeTagsPagesReturns(result1 error) {
	fake.describeTagsPagesMutex.Lock()
	defer fake.describeTagsPagesMutex.Unlock()
	fake.DescribeTagsPagesStub = nil
	fake.describeTagsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeTagsPagesReturnsOnCall(i int, result1 error) {
	fake.describeTagsPagesMutex.Lock()
	defer fake.describeTagsPagesMutex.Unlock()
	fake.DescribeTagsPagesStub = nil
	if fake.describeTagsPagesReturnsOnCall == nil {
		fake.describeTagsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeTagsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeTagsPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeTagsInput, arg3 func(*ec2.DescribeTagsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeTagsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeTagsPagesWithContextReturnsOnCall[len(fake.describeTagsPagesWithContextArgsForCall)]
	fake.describeTagsPagesWithContextArgsForCall = append(fake.describeTagsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTagsInput
		arg3 func(*ec2.DescribeTagsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeTagsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeTagsPagesWithContextMutex.Unlock()
	if fake.DescribeTagsPagesWithContextStub != nil {
		return fake.DescribeTagsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeTagsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeTagsPagesWithContextCallCount() int {
	fake.describeTagsPagesWithContextMutex.RLock()
	defer fake.describeTagsPagesWithContextMutex.RUnlock()
	return len(fake.describeTagsPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeTagsPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool, ...request.Option) error) {
	fake.describeTagsPagesWithContextMutex.Lock()
	defer fake.describeTagsPagesWithContextMutex.Unlock()
	fake.DescribeTagsPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeTagsPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool, []request.Option) {
	fake.describeTagsPagesWithContextMutex.RLock()
	defer fake.describeTagsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeTagsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeTagsPagesWithContextReturns(result1 error) {
	fake.describeTagsPagesWithContextMutex.Lock()
	defer fake.describeTagsPagesWithContextMutex.Unlock()
	fake.DescribeTagsPagesWithContextStub = nil
	fake.describeTagsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeTagsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeTagsPagesWithContextMutex.Lock()
	defer fake.describeTagsPagesWithContextMutex.Unlock()
	fake.DescribeTagsPagesWithContextStub = nil
	if fake.describeTagsPagesWithContextReturnsOnCall == nil {
		fake.describeTagsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeTagsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeTagsRequest(arg1 *ec2.DescribeTagsInput) (*request.Request, *ec2.DescribeTagsOutput) {
	fake.describeTagsRequestMutex.Lock()
	ret, specificReturn := fake.describeTagsRequestReturnsOnCall[len(fake.describeTagsRequestArgsForCall)]
	fake.describeTagsRequestArgsForCall = append(fake.describeTagsRequestArgsForCall, struct {
		arg1 *ec2.DescribeTagsInput
	}{arg1})
	fake.recordInvocation("DescribeTagsRequest", []interface{}{arg1})
	fake.describeTagsRequestMutex.Unlock()
	if fake.DescribeTagsRequestStub != nil {
		return fake.DescribeTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTagsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTagsRequestCallCount() int {
	fake.describeTagsRequestMutex.RLock()
	defer fake.describeTagsRequestMutex.RUnlock()
	return len(fake.describeTagsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeTagsRequestCalls(stub func(*ec2.DescribeTagsInput) (*request.Request, *ec2.DescribeTagsOutput)) {
	fake.describeTagsRequestMutex.Lock()
	defer fake.describeTagsRequestMutex.Unlock()
	fake.DescribeTagsRequestStub = stub
}

func (fake *FakeEC2API) DescribeTagsRequestArgsForCall(i int) *ec2.DescribeTagsInput {
	fake.describeTagsRequestMutex.RLock()
	defer fake.describeTagsRequestMutex.RUnlock()
	argsForCall := fake.describeTagsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTagsRequestReturns(result1 *request.Request, result2 *ec2.DescribeTagsOutput) {
	fake.describeTagsRequestMutex.Lock()
	defer fake.describeTagsRequestMutex.Unlock()
	fake.DescribeTagsRequestStub = nil
	fake.describeTagsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeTagsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeTagsOutput) {
	fake.describeTagsRequestMutex.Lock()
	defer fake.describeTagsRequestMutex.Unlock()
	fake.DescribeTagsRequestStub = nil
	if fake.describeTagsRequestReturnsOnCall == nil {
		fake.describeTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeTagsOutput
		})
	}
	fake.describeTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeTagsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTagsWithContext(arg1 aws.Context, arg2 *ec2.DescribeTagsInput, arg3 ...request.Option) (*ec2.DescribeTagsOutput, error) {
	fake.describeTagsWithContextMutex.Lock()
	ret, specificReturn := fake.describeTagsWithContextReturnsOnCall[len(fake.describeTagsWithContextArgsForCall)]
	fake.describeTagsWithContextArgsForCall = append(fake.describeTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTagsWithContextMutex.Unlock()
	if fake.DescribeTagsWithContextStub != nil {
		return fake.DescribeTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTagsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTagsWithContextCallCount() int {
	fake.describeTagsWithContextMutex.RLock()
	defer fake.describeTagsWithContextMutex.RUnlock()
	return len(fake.describeTagsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeTagsWithContextCalls(stub func(aws.Context, *ec2.DescribeTagsInput, ...request.Option) (*ec2.DescribeTagsOutput, error)) {
	fake.describeTagsWithContextMutex.Lock()
	defer fake.describeTagsWithContextMutex.Unlock()
	fake.DescribeTagsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeTagsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeTagsInput, []request.Option) {
	fake.describeTagsWithContextMutex.RLock()
	defer fake.describeTagsWithContextMutex.RUnlock()
	argsForCall := fake.describeTagsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeTagsWithContextReturns(result1 *ec2.DescribeTagsOutput, result2 error) {
	fake.describeTagsWithContextMutex.Lock()
	defer fake.describeTagsWithContextMutex.Unlock()
	fake.DescribeTagsWithContextStub = nil
	fake.describeTagsWithContextReturns = struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTagsWithContextReturnsOnCall(i int, result1 *ec2.DescribeTagsOutput, result2 error) {
	fake.describeTagsWithContextMutex.Lock()
	defer fake.describeTagsWithContextMutex.Unlock()
	fake.DescribeTagsWithContextStub = nil
	if fake.describeTagsWithContextReturnsOnCall == nil {
		fake.describeTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTagsOutput
			result2 error
		})
	}
	fake.describeTagsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachments(arg1 *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayAttachmentsReturnsOnCall[len(fake.describeTransitGatewayAttachmentsArgsForCall)]
	fake.describeTransitGatewayAttachmentsArgsForCall = append(fake.describeTransitGatewayAttachmentsArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayAttachmentsInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayAttachments", []interface{}{arg1})
	fake.describeTransitGatewayAttachmentsMutex.Unlock()
	if fake.DescribeTransitGatewayAttachmentsStub != nil {
		return fake.DescribeTransitGatewayAttachmentsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayAttachmentsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsCallCount() int {
	fake.describeTransitGatewayAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsMutex.RUnlock()
	return len(fake.describeTransitGatewayAttachmentsArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsCalls(stub func(*ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsArgsForCall(i int) *ec2.DescribeTransitGatewayAttachmentsInput {
	fake.describeTransitGatewayAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayAttachmentsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsReturns(result1 *ec2.DescribeTransitGatewayAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsStub = nil
	fake.describeTransitGatewayAttachmentsReturns = struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsStub = nil
	if fake.describeTransitGatewayAttachmentsReturnsOnCall == nil {
		fake.describeTransitGatewayAttachmentsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayAttachmentsOutput
			result2 error
		})
	}
	fake.describeTransitGatewayAttachmentsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsRequest(arg1 *ec2.DescribeTransitGatewayAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayAttachmentsOutput) {
	fake.describeTransitGatewayAttachmentsRequestMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayAttachmentsRequestReturnsOnCall[len(fake.describeTransitGatewayAttachmentsRequestArgsForCall)]
	fake.describeTransitGatewayAttachmentsRequestArgsForCall = append(fake.describeTransitGatewayAttachmentsRequestArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayAttachmentsInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayAttachmentsRequest", []interface{}{arg1})
	fake.describeTransitGatewayAttachmentsRequestMutex.Unlock()
	if fake.DescribeTransitGatewayAttachmentsRequestStub != nil {
		return fake.DescribeTransitGatewayAttachmentsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayAttachmentsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsRequestCallCount() int {
	fake.describeTransitGatewayAttachmentsRequestMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsRequestMutex.RUnlock()
	return len(fake.describeTransitGatewayAttachmentsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsRequestCalls(stub func(*ec2.DescribeTransitGatewayAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayAttachmentsOutput)) {
	fake.describeTransitGatewayAttachmentsRequestMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsRequestMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsRequestStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsRequestArgsForCall(i int) *ec2.DescribeTransitGatewayAttachmentsInput {
	fake.describeTransitGatewayAttachmentsRequestMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsRequestMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayAttachmentsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsRequestReturns(result1 *request.Request, result2 *ec2.DescribeTransitGatewayAttachmentsOutput) {
	fake.describeTransitGatewayAttachmentsRequestMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsRequestMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsRequestStub = nil
	fake.describeTransitGatewayAttachmentsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayAttachmentsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeTransitGatewayAttachmentsOutput) {
	fake.describeTransitGatewayAttachmentsRequestMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsRequestMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsRequestStub = nil
	if fake.describeTransitGatewayAttachmentsRequestReturnsOnCall == nil {
		fake.describeTransitGatewayAttachmentsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeTransitGatewayAttachmentsOutput
		})
	}
	fake.describeTransitGatewayAttachmentsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayAttachmentsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsWithContext(arg1 aws.Context, arg2 *ec2.DescribeTransitGatewayAttachmentsInput, arg3 ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	fake.describeTransitGatewayAttachmentsWithContextMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayAttachmentsWithContextReturnsOnCall[len(fake.describeTransitGatewayAttachmentsWithContextArgsForCall)]
	fake.describeTransitGatewayAttachmentsWithContextArgsForCall = append(fake.describeTransitGatewayAttachmentsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewayAttachmentsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTransitGatewayAttachmentsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTransitGatewayAttachmentsWithContextMutex.Unlock()
	if fake.DescribeTransitGatewayAttachmentsWithContextStub != nil {
		return fake.DescribeTransitGatewayAttachmentsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayAttachmentsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsWithContextCallCount() int {
	fake.describeTransitGatewayAttachmentsWithContextMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsWithContextMutex.RUnlock()
	return len(fake.describeTransitGatewayAttachmentsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsWithContextCalls(stub func(aws.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...request.Option) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)) {
	fake.describeTransitGatewayAttachmentsWithContextMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsWithContextMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeTransitGatewayAttachmentsInput, []request.Option) {
	fake.describeTransitGatewayAttachmentsWithContextMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsWithContextMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayAttachmentsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsWithContextReturns(result1 *ec2.DescribeTransitGatewayAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayAttachmentsWithContextMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsWithContextMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsWithContextStub = nil
	fake.describeTransitGatewayAttachmentsWithContextReturns = struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayAttachmentsWithContextReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayAttachmentsWithContextMutex.Lock()
	defer fake.describeTransitGatewayAttachmentsWithContextMutex.Unlock()
	fake.DescribeTransitGatewayAttachmentsWithContextStub = nil
	if fake.describeTransitGatewayAttachmentsWithContextReturnsOnCall == nil {
		fake.describeTransitGatewayAttachmentsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayAttachmentsOutput
			result2 error
		})
	}
	fake.describeTransitGatewayAttachmentsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTables(arg1 *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	fake.describeTransitGatewayRouteTablesMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayRouteTablesReturnsOnCall[len(fake.describeTransitGatewayRouteTablesArgsForCall)]
	fake.describeTransitGatewayRouteTablesArgsForCall = append(fake.describeTransitGatewayRouteTablesArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayRouteTablesInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayRouteTables", []interface{}{arg1})
	fake.describeTransitGatewayRouteTablesMutex.Unlock()
	if fake.DescribeTransitGatewayRouteTablesStub != nil {
		return fake.DescribeTransitGatewayRouteTablesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayRouteTablesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesCallCount() int {
	fake.describeTransitGatewayRouteTablesMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesMutex.RUnlock()
	return len(fake.describeTransitGatewayRouteTablesArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesCalls(stub func(*ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)) {
	fake.describeTransitGatewayRouteTablesMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesArgsForCall(i int) *ec2.DescribeTransitGatewayRouteTablesInput {
	fake.describeTransitGatewayRouteTablesMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayRouteTablesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesReturns(result1 *ec2.DescribeTransitGatewayRouteTablesOutput, result2 error) {
	fake.describeTransitGatewayRouteTablesMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesStub = nil
	fake.describeTransitGatewayRouteTablesReturns = struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayRouteTablesOutput, result2 error) {
	fake.describeTransitGatewayRouteTablesMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesStub = nil
	if fake.describeTransitGatewayRouteTablesReturnsOnCall == nil {
		fake.describeTransitGatewayRouteTablesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayRouteTablesOutput
			result2 error
		})
	}
	fake.describeTransitGatewayRouteTablesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesRequest(arg1 *ec2.DescribeTransitGatewayRouteTablesInput) (*request.Request, *ec2.DescribeTransitGatewayRouteTablesOutput) {
	fake.describeTransitGatewayRouteTablesRequestMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayRouteTablesRequestReturnsOnCall[len(fake.describeTransitGatewayRouteTablesRequestArgsForCall)]
	fake.describeTransitGatewayRouteTablesRequestArgsForCall = append(fake.describeTransitGatewayRouteTablesRequestArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayRouteTablesInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayRouteTablesRequest", []interface{}{arg1})
	fake.describeTransitGatewayRouteTablesRequestMutex.Unlock()
	if fake.DescribeTransitGatewayRouteTablesRequestStub != nil {
		return fake.DescribeTransitGatewayRouteTablesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayRouteTablesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesRequestCallCount() int {
	fake.describeTransitGatewayRouteTablesRequestMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesRequestMutex.RUnlock()
	return len(fake.describeTransitGatewayRouteTablesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesRequestCalls(stub func(*ec2.DescribeTransitGatewayRouteTablesInput) (*request.Request, *ec2.DescribeTransitGatewayRouteTablesOutput)) {
	fake.describeTransitGatewayRouteTablesRequestMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesRequestMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesRequestStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesRequestArgsForCall(i int) *ec2.DescribeTransitGatewayRouteTablesInput {
	fake.describeTransitGatewayRouteTablesRequestMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesRequestMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayRouteTablesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesRequestReturns(result1 *request.Request, result2 *ec2.DescribeTransitGatewayRouteTablesOutput) {
	fake.describeTransitGatewayRouteTablesRequestMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesRequestMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesRequestStub = nil
	fake.describeTransitGatewayRouteTablesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayRouteTablesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeTransitGatewayRouteTablesOutput) {
	fake.describeTransitGatewayRouteTablesRequestMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesRequestMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesRequestStub = nil
	if fake.describeTransitGatewayRouteTablesRequestReturnsOnCall == nil {
		fake.describeTransitGatewayRouteTablesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeTransitGatewayRouteTablesOutput
		})
	}
	fake.describeTransitGatewayRouteTablesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayRouteTablesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesWithContext(arg1 aws.Context, arg2 *ec2.DescribeTransitGatewayRouteTablesInput, arg3 ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	fake.describeTransitGatewayRouteTablesWithContextMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayRouteTablesWithContextReturnsOnCall[len(fake.describeTransitGatewayRouteTablesWithContextArgsForCall)]
	fake.describeTransitGatewayRouteTablesWithContextArgsForCall = append(fake.describeTransitGatewayRouteTablesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewayRouteTablesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTransitGatewayRouteTablesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTransitGatewayRouteTablesWithContextMutex.Unlock()
	if fake.DescribeTransitGatewayRouteTablesWithContextStub != nil {
		return fake.DescribeTransitGatewayRouteTablesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayRouteTablesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesWithContextCallCount() int {
	fake.describeTransitGatewayRouteTablesWithContextMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesWithContextMutex.RUnlock()
	return len(fake.describeTransitGatewayRouteTablesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesWithContextCalls(stub func(aws.Context, *ec2.DescribeTransitGatewayRouteTablesInput, ...request.Option) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)) {
	fake.describeTransitGatewayRouteTablesWithContextMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesWithContextMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeTransitGatewayRouteTablesInput, []request.Option) {
	fake.describeTransitGatewayRouteTablesWithContextMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesWithContextMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayRouteTablesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesWithContextReturns(result1 *ec2.DescribeTransitGatewayRouteTablesOutput, result2 error) {
	fake.describeTransitGatewayRouteTablesWithContextMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesWithContextMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesWithContextStub = nil
	fake.describeTransitGatewayRouteTablesWithContextReturns = struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayRouteTablesWithContextReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayRouteTablesOutput, result2 error) {
	fake.describeTransitGatewayRouteTablesWithContextMutex.Lock()
	defer fake.describeTransitGatewayRouteTablesWithContextMutex.Unlock()
	fake.DescribeTransitGatewayRouteTablesWithContextStub = nil
	if fake.describeTransitGatewayRouteTablesWithContextReturnsOnCall == nil {
		fake.describeTransitGatewayRouteTablesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayRouteTablesOutput
			result2 error
		})
	}
	fake.describeTransitGatewayRouteTablesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayRouteTablesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachments(arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	fake.describeTransitGatewayVpcAttachmentsMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayVpcAttachmentsReturnsOnCall[len(fake.describeTransitGatewayVpcAttachmentsArgsForCall)]
	fake.describeTransitGatewayVpcAttachmentsArgsForCall = append(fake.describeTransitGatewayVpcAttachmentsArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayVpcAttachments", []interface{}{arg1})
	fake.describeTransitGatewayVpcAttachmentsMutex.Unlock()
	if fake.DescribeTransitGatewayVpcAttachmentsStub != nil {
		return fake.DescribeTransitGatewayVpcAttachmentsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayVpcAttachmentsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsCallCount() int {
	fake.describeTransitGatewayVpcAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsMutex.RUnlock()
	return len(fake.describeTransitGatewayVpcAttachmentsArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsCalls(stub func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)) {
	fake.describeTransitGatewayVpcAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsArgsForCall(i int) *ec2.DescribeTransitGatewayVpcAttachmentsInput {
	fake.describeTransitGatewayVpcAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayVpcAttachmentsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsReturns(result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayVpcAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsStub = nil
	fake.describeTransitGatewayVpcAttachmentsReturns = struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayVpcAttachmentsMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsStub = nil
	if fake.describeTransitGatewayVpcAttachmentsReturnsOnCall == nil {
		fake.describeTransitGatewayVpcAttachmentsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
			result2 error
		})
	}
	fake.describeTransitGatewayVpcAttachmentsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsRequest(arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayVpcAttachmentsRequestReturnsOnCall[len(fake.describeTransitGatewayVpcAttachmentsRequestArgsForCall)]
	fake.describeTransitGatewayVpcAttachmentsRequestArgsForCall = append(fake.describeTransitGatewayVpcAttachmentsRequestArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewayVpcAttachmentsInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewayVpcAttachmentsRequest", []interface{}{arg1})
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.Unlock()
	if fake.DescribeTransitGatewayVpcAttachmentsRequestStub != nil {
		return fake.DescribeTransitGatewayVpcAttachmentsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayVpcAttachmentsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsRequestCallCount() int {
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsRequestMutex.RUnlock()
	return len(fake.describeTransitGatewayVpcAttachmentsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsRequestCalls(stub func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) (*request.Request, *ec2.DescribeTransitGatewayVpcAttachmentsOutput)) {
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsRequestMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsRequestStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsRequestArgsForCall(i int) *ec2.DescribeTransitGatewayVpcAttachmentsInput {
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsRequestMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayVpcAttachmentsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsRequestReturns(result1 *request.Request, result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsRequestMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsRequestStub = nil
	fake.describeTransitGatewayVpcAttachmentsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsRequestMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsRequestStub = nil
	if fake.describeTransitGatewayVpcAttachmentsRequestReturnsOnCall == nil {
		fake.describeTransitGatewayVpcAttachmentsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		})
	}
	fake.describeTransitGatewayVpcAttachmentsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsWithContext(arg1 aws.Context, arg2 *ec2.DescribeTransitGatewayVpcAttachmentsInput, arg3 ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewayVpcAttachmentsWithContextReturnsOnCall[len(fake.describeTransitGatewayVpcAttachmentsWithContextArgsForCall)]
	fake.describeTransitGatewayVpcAttachmentsWithContextArgsForCall = append(fake.describeTransitGatewayVpcAttachmentsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewayVpcAttachmentsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTransitGatewayVpcAttachmentsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Unlock()
	if fake.DescribeTransitGatewayVpcAttachmentsWithContextStub != nil {
		return fake.DescribeTransitGatewayVpcAttachmentsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewayVpcAttachmentsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsWithContextCallCount() int {
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsWithContextMutex.RUnlock()
	return len(fake.describeTransitGatewayVpcAttachmentsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsWithContextCalls(stub func(aws.Context, *ec2.DescribeTransitGatewayVpcAttachmentsInput, ...request.Option) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)) {
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeTransitGatewayVpcAttachmentsInput, []request.Option) {
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsWithContextMutex.RUnlock()
	argsForCall := fake.describeTransitGatewayVpcAttachmentsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsWithContextReturns(result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsWithContextStub = nil
	fake.describeTransitGatewayVpcAttachmentsWithContextReturns = struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewayVpcAttachmentsWithContextReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, result2 error) {
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Lock()
	defer fake.describeTransitGatewayVpcAttachmentsWithContextMutex.Unlock()
	fake.DescribeTransitGatewayVpcAttachmentsWithContextStub = nil
	if fake.describeTransitGatewayVpcAttachmentsWithContextReturnsOnCall == nil {
		fake.describeTransitGatewayVpcAttachmentsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
			result2 error
		})
	}
	fake.describeTransitGatewayVpcAttachmentsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGateways(arg1 *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error) {
	fake.describeTransitGatewaysMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewaysReturnsOnCall[len(fake.describeTransitGatewaysArgsForCall)]
	fake.describeTransitGatewaysArgsForCall = append(fake.describeTransitGatewaysArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGateways", []interface{}{arg1})
	fake.describeTransitGatewaysMutex.Unlock()
	if fake.DescribeTransitGatewaysStub != nil {
		return fake.DescribeTransitGatewaysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewaysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewaysCallCount() int {
	fake.describeTransitGatewaysMutex.RLock()
	defer fake.describeTransitGatewaysMutex.RUnlock()
	return len(fake.describeTransitGatewaysArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewaysCalls(stub func(*ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error)) {
	fake.describeTransitGatewaysMutex.Lock()
	defer fake.describeTransitGatewaysMutex.Unlock()
	fake.DescribeTransitGatewaysStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewaysArgsForCall(i int) *ec2.DescribeTransitGatewaysInput {
	fake.describeTransitGatewaysMutex.RLock()
	defer fake.describeTransitGatewaysMutex.RUnlock()
	argsForCall := fake.describeTransitGatewaysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewaysReturns(result1 *ec2.DescribeTransitGatewaysOutput, result2 error) {
	fake.describeTransitGatewaysMutex.Lock()
	defer fake.describeTransitGatewaysMutex.Unlock()
	fake.DescribeTransitGatewaysStub = nil
	fake.describeTransitGatewaysReturns = struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewaysReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewaysOutput, result2 error) {
	fake.describeTransitGatewaysMutex.Lock()
	defer fake.describeTransitGatewaysMutex.Unlock()
	fake.DescribeTransitGatewaysStub = nil
	if fake.describeTransitGatewaysReturnsOnCall == nil {
		fake.describeTransitGatewaysReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewaysOutput
			result2 error
		})
	}
	fake.describeTransitGatewaysReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewaysRequest(arg1 *ec2.DescribeTransitGatewaysInput) (*request.Request, *ec2.DescribeTransitGatewaysOutput) {
	fake.describeTransitGatewaysRequestMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewaysRequestReturnsOnCall[len(fake.describeTransitGatewaysRequestArgsForCall)]
	fake.describeTransitGatewaysRequestArgsForCall = append(fake.describeTransitGatewaysRequestArgsForCall, struct {
		arg1 *ec2.DescribeTransitGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeTransitGatewaysRequest", []interface{}{arg1})
	fake.describeTransitGatewaysRequestMutex.Unlock()
	if fake.DescribeTransitGatewaysRequestStub != nil {
		return fake.DescribeTransitGatewaysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewaysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewaysRequestCallCount() int {
	fake.describeTransitGatewaysRequestMutex.RLock()
	defer fake.describeTransitGatewaysRequestMutex.RUnlock()
	return len(fake.describeTransitGatewaysRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewaysRequestCalls(stub func(*ec2.DescribeTransitGatewaysInput) (*request.Request, *ec2.DescribeTransitGatewaysOutput)) {
	fake.describeTransitGatewaysRequestMutex.Lock()
	defer fake.describeTransitGatewaysRequestMutex.Unlock()
	fake.DescribeTransitGatewaysRequestStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewaysRequestArgsForCall(i int) *ec2.DescribeTransitGatewaysInput {
	fake.describeTransitGatewaysRequestMutex.RLock()
	defer fake.describeTransitGatewaysRequestMutex.RUnlock()
	argsForCall := fake.describeTransitGatewaysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeTransitGatewaysRequestReturns(result1 *request.Request, result2 *ec2.DescribeTransitGatewaysOutput) {
	fake.describeTransitGatewaysRequestMutex.Lock()
	defer fake.describeTransitGatewaysRequestMutex.Unlock()
	fake.DescribeTransitGatewaysRequestStub = nil
	fake.describeTransitGatewaysRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewaysRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeTransitGatewaysOutput) {
	fake.describeTransitGatewaysRequestMutex.Lock()
	defer fake.describeTransitGatewaysRequestMutex.Unlock()
	fake.DescribeTransitGatewaysRequestStub = nil
	if fake.describeTransitGatewaysRequestReturnsOnCall == nil {
		fake.describeTransitGatewaysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeTransitGatewaysOutput
		})
	}
	fake.describeTransitGatewaysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeTransitGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewaysWithContext(arg1 aws.Context, arg2 *ec2.DescribeTransitGatewaysInput, arg3 ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error) {
	fake.describeTransitGatewaysWithContextMutex.Lock()
	ret, specificReturn := fake.describeTransitGatewaysWithContextReturnsOnCall[len(fake.describeTransitGatewaysWithContextArgsForCall)]
	fake.describeTransitGatewaysWithContextArgsForCall = append(fake.describeTransitGatewaysWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeTransitGatewaysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTransitGatewaysWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTransitGatewaysWithContextMutex.Unlock()
	if fake.DescribeTransitGatewaysWithContextStub != nil {
		return fake.DescribeTransitGatewaysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTransitGatewaysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeTransitGatewaysWithContextCallCount() int {
	fake.describeTransitGatewaysWithContextMutex.RLock()
	defer fake.describeTransitGatewaysWithContextMutex.RUnlock()
	return len(fake.describeTransitGatewaysWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeTransitGatewaysWithContextCalls(stub func(aws.Context, *ec2.DescribeTransitGatewaysInput, ...request.Option) (*ec2.DescribeTransitGatewaysOutput, error)) {
	fake.describeTransitGatewaysWithContextMutex.Lock()
	defer fake.describeTransitGatewaysWithContextMutex.Unlock()
	fake.DescribeTransitGatewaysWithContextStub = stub
}

func (fake *FakeEC2API) DescribeTransitGatewaysWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeTransitGatewaysInput, []request.Option) {
	fake.describeTransitGatewaysWithContextMutex.RLock()
	defer fake.describeTransitGatewaysWithContextMutex.RUnlock()
	argsForCall := fake.describeTransitGatewaysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeTransitGatewaysWithContextReturns(result1 *ec2.DescribeTransitGatewaysOutput, result2 error) {
	fake.describeTransitGatewaysWithContextMutex.Lock()
	defer fake.describeTransitGatewaysWithContextMutex.Unlock()
	fake.DescribeTransitGatewaysWithContextStub = nil
	fake.describeTransitGatewaysWithContextReturns = struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeTransitGatewaysWithContextReturnsOnCall(i int, result1 *ec2.DescribeTransitGatewaysOutput, result2 error) {
	fake.describeTransitGatewaysWithContextMutex.Lock()
	defer fake.describeTransitGatewaysWithContextMutex.Unlock()
	fake.DescribeTransitGatewaysWithContextStub = nil
	if fake.describeTransitGatewaysWithContextReturnsOnCall == nil {
		fake.describeTransitGatewaysWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeTransitGatewaysOutput
			result2 error
		})
	}
	fake.describeTransitGatewaysWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeTransitGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeAttribute(arg1 *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	fake.describeVolumeAttributeMutex.Lock()
	ret, specificReturn := fake.describeVolumeAttributeReturnsOnCall[len(fake.describeVolumeAttributeArgsForCall)]
	fake.describeVolumeAttributeArgsForCall = append(fake.describeVolumeAttributeArgsForCall, struct {
		arg1 *ec2.DescribeVolumeAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeVolumeAttribute", []interface{}{arg1})
	fake.describeVolumeAttributeMutex.Unlock()
	if fake.DescribeVolumeAttributeStub != nil {
		return fake.DescribeVolumeAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumeAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumeAttributeCallCount() int {
	fake.describeVolumeAttributeMutex.RLock()
	defer fake.describeVolumeAttributeMutex.RUnlock()
	return len(fake.describeVolumeAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeAttributeCalls(stub func(*ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error)) {
	fake.describeVolumeAttributeMutex.Lock()
	defer fake.describeVolumeAttributeMutex.Unlock()
	fake.DescribeVolumeAttributeStub = stub
}

func (fake *FakeEC2API) DescribeVolumeAttributeArgsForCall(i int) *ec2.DescribeVolumeAttributeInput {
	fake.describeVolumeAttributeMutex.RLock()
	defer fake.describeVolumeAttributeMutex.RUnlock()
	argsForCall := fake.describeVolumeAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumeAttributeReturns(result1 *ec2.DescribeVolumeAttributeOutput, result2 error) {
	fake.describeVolumeAttributeMutex.Lock()
	defer fake.describeVolumeAttributeMutex.Unlock()
	fake.DescribeVolumeAttributeStub = nil
	fake.describeVolumeAttributeReturns = struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeAttributeReturnsOnCall(i int, result1 *ec2.DescribeVolumeAttributeOutput, result2 error) {
	fake.describeVolumeAttributeMutex.Lock()
	defer fake.describeVolumeAttributeMutex.Unlock()
	fake.DescribeVolumeAttributeStub = nil
	if fake.describeVolumeAttributeReturnsOnCall == nil {
		fake.describeVolumeAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumeAttributeOutput
			result2 error
		})
	}
	fake.describeVolumeAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeAttributeRequest(arg1 *ec2.DescribeVolumeAttributeInput) (*request.Request, *ec2.DescribeVolumeAttributeOutput) {
	fake.describeVolumeAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeVolumeAttributeRequestReturnsOnCall[len(fake.describeVolumeAttributeRequestArgsForCall)]
	fake.describeVolumeAttributeRequestArgsForCall = append(fake.describeVolumeAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeVolumeAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeVolumeAttributeRequest", []interface{}{arg1})
	fake.describeVolumeAttributeRequestMutex.Unlock()
	if fake.DescribeVolumeAttributeRequestStub != nil {
		return fake.DescribeVolumeAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumeAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumeAttributeRequestCallCount() int {
	fake.describeVolumeAttributeRequestMutex.RLock()
	defer fake.describeVolumeAttributeRequestMutex.RUnlock()
	return len(fake.describeVolumeAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeAttributeRequestCalls(stub func(*ec2.DescribeVolumeAttributeInput) (*request.Request, *ec2.DescribeVolumeAttributeOutput)) {
	fake.describeVolumeAttributeRequestMutex.Lock()
	defer fake.describeVolumeAttributeRequestMutex.Unlock()
	fake.DescribeVolumeAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeVolumeAttributeRequestArgsForCall(i int) *ec2.DescribeVolumeAttributeInput {
	fake.describeVolumeAttributeRequestMutex.RLock()
	defer fake.describeVolumeAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeVolumeAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumeAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeVolumeAttributeOutput) {
	fake.describeVolumeAttributeRequestMutex.Lock()
	defer fake.describeVolumeAttributeRequestMutex.Unlock()
	fake.DescribeVolumeAttributeRequestStub = nil
	fake.describeVolumeAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVolumeAttributeOutput) {
	fake.describeVolumeAttributeRequestMutex.Lock()
	defer fake.describeVolumeAttributeRequestMutex.Unlock()
	fake.DescribeVolumeAttributeRequestStub = nil
	if fake.describeVolumeAttributeRequestReturnsOnCall == nil {
		fake.describeVolumeAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVolumeAttributeOutput
		})
	}
	fake.describeVolumeAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumeAttributeInput, arg3 ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error) {
	fake.describeVolumeAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeVolumeAttributeWithContextReturnsOnCall[len(fake.describeVolumeAttributeWithContextArgsForCall)]
	fake.describeVolumeAttributeWithContextArgsForCall = append(fake.describeVolumeAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumeAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVolumeAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVolumeAttributeWithContextMutex.Unlock()
	if fake.DescribeVolumeAttributeWithContextStub != nil {
		return fake.DescribeVolumeAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumeAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumeAttributeWithContextCallCount() int {
	fake.describeVolumeAttributeWithContextMutex.RLock()
	defer fake.describeVolumeAttributeWithContextMutex.RUnlock()
	return len(fake.describeVolumeAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumeAttributeInput, ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error)) {
	fake.describeVolumeAttributeWithContextMutex.Lock()
	defer fake.describeVolumeAttributeWithContextMutex.Unlock()
	fake.DescribeVolumeAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVolumeAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumeAttributeInput, []request.Option) {
	fake.describeVolumeAttributeWithContextMutex.RLock()
	defer fake.describeVolumeAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeVolumeAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVolumeAttributeWithContextReturns(result1 *ec2.DescribeVolumeAttributeOutput, result2 error) {
	fake.describeVolumeAttributeWithContextMutex.Lock()
	defer fake.describeVolumeAttributeWithContextMutex.Unlock()
	fake.DescribeVolumeAttributeWithContextStub = nil
	fake.describeVolumeAttributeWithContextReturns = struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeVolumeAttributeOutput, result2 error) {
	fake.describeVolumeAttributeWithContextMutex.Lock()
	defer fake.describeVolumeAttributeWithContextMutex.Unlock()
	fake.DescribeVolumeAttributeWithContextStub = nil
	if fake.describeVolumeAttributeWithContextReturnsOnCall == nil {
		fake.describeVolumeAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumeAttributeOutput
			result2 error
		})
	}
	fake.describeVolumeAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeStatus(arg1 *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	fake.describeVolumeStatusMutex.Lock()
	ret, specificReturn := fake.describeVolumeStatusReturnsOnCall[len(fake.describeVolumeStatusArgsForCall)]
	fake.describeVolumeStatusArgsForCall = append(fake.describeVolumeStatusArgsForCall, struct {
		arg1 *ec2.DescribeVolumeStatusInput
	}{arg1})
	fake.recordInvocation("DescribeVolumeStatus", []interface{}{arg1})
	fake.describeVolumeStatusMutex.Unlock()
	if fake.DescribeVolumeStatusStub != nil {
		return fake.DescribeVolumeStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumeStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumeStatusCallCount() int {
	fake.describeVolumeStatusMutex.RLock()
	defer fake.describeVolumeStatusMutex.RUnlock()
	return len(fake.describeVolumeStatusArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeStatusCalls(stub func(*ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error)) {
	fake.describeVolumeStatusMutex.Lock()
	defer fake.describeVolumeStatusMutex.Unlock()
	fake.DescribeVolumeStatusStub = stub
}

func (fake *FakeEC2API) DescribeVolumeStatusArgsForCall(i int) *ec2.DescribeVolumeStatusInput {
	fake.describeVolumeStatusMutex.RLock()
	defer fake.describeVolumeStatusMutex.RUnlock()
	argsForCall := fake.describeVolumeStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumeStatusReturns(result1 *ec2.DescribeVolumeStatusOutput, result2 error) {
	fake.describeVolumeStatusMutex.Lock()
	defer fake.describeVolumeStatusMutex.Unlock()
	fake.DescribeVolumeStatusStub = nil
	fake.describeVolumeStatusReturns = struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeStatusReturnsOnCall(i int, result1 *ec2.DescribeVolumeStatusOutput, result2 error) {
	fake.describeVolumeStatusMutex.Lock()
	defer fake.describeVolumeStatusMutex.Unlock()
	fake.DescribeVolumeStatusStub = nil
	if fake.describeVolumeStatusReturnsOnCall == nil {
		fake.describeVolumeStatusReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumeStatusOutput
			result2 error
		})
	}
	fake.describeVolumeStatusReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeStatusPages(arg1 *ec2.DescribeVolumeStatusInput, arg2 func(*ec2.DescribeVolumeStatusOutput, bool) bool) error {
	fake.describeVolumeStatusPagesMutex.Lock()
	ret, specificReturn := fake.describeVolumeStatusPagesReturnsOnCall[len(fake.describeVolumeStatusPagesArgsForCall)]
	fake.describeVolumeStatusPagesArgsForCall = append(fake.describeVolumeStatusPagesArgsForCall, struct {
		arg1 *ec2.DescribeVolumeStatusInput
		arg2 func(*ec2.DescribeVolumeStatusOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeVolumeStatusPages", []interface{}{arg1, arg2})
	fake.describeVolumeStatusPagesMutex.Unlock()
	if fake.DescribeVolumeStatusPagesStub != nil {
		return fake.DescribeVolumeStatusPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeVolumeStatusPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesCallCount() int {
	fake.describeVolumeStatusPagesMutex.RLock()
	defer fake.describeVolumeStatusPagesMutex.RUnlock()
	return len(fake.describeVolumeStatusPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesCalls(stub func(*ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool) error) {
	fake.describeVolumeStatusPagesMutex.Lock()
	defer fake.describeVolumeStatusPagesMutex.Unlock()
	fake.DescribeVolumeStatusPagesStub = stub
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesArgsForCall(i int) (*ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool) {
	fake.describeVolumeStatusPagesMutex.RLock()
	defer fake.describeVolumeStatusPagesMutex.RUnlock()
	argsForCall := fake.describeVolumeStatusPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesReturns(result1 error) {
	fake.describeVolumeStatusPagesMutex.Lock()
	defer fake.describeVolumeStatusPagesMutex.Unlock()
	fake.DescribeVolumeStatusPagesStub = nil
	fake.describeVolumeStatusPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesReturnsOnCall(i int, result1 error) {
	fake.describeVolumeStatusPagesMutex.Lock()
	defer fake.describeVolumeStatusPagesMutex.Unlock()
	fake.DescribeVolumeStatusPagesStub = nil
	if fake.describeVolumeStatusPagesReturnsOnCall == nil {
		fake.describeVolumeStatusPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeVolumeStatusPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumeStatusInput, arg3 func(*ec2.DescribeVolumeStatusOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeVolumeStatusPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeVolumeStatusPagesWithContextReturnsOnCall[len(fake.describeVolumeStatusPagesWithContextArgsForCall)]
	fake.describeVolumeStatusPagesWithContextArgsForCall = append(fake.describeVolumeStatusPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumeStatusInput
		arg3 func(*ec2.DescribeVolumeStatusOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeVolumeStatusPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeVolumeStatusPagesWithContextMutex.Unlock()
	if fake.DescribeVolumeStatusPagesWithContextStub != nil {
		return fake.DescribeVolumeStatusPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeVolumeStatusPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesWithContextCallCount() int {
	fake.describeVolumeStatusPagesWithContextMutex.RLock()
	defer fake.describeVolumeStatusPagesWithContextMutex.RUnlock()
	return len(fake.describeVolumeStatusPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool, ...request.Option) error) {
	fake.describeVolumeStatusPagesWithContextMutex.Lock()
	defer fake.describeVolumeStatusPagesWithContextMutex.Unlock()
	fake.DescribeVolumeStatusPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool, []request.Option) {
	fake.describeVolumeStatusPagesWithContextMutex.RLock()
	defer fake.describeVolumeStatusPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeVolumeStatusPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesWithContextReturns(result1 error) {
	fake.describeVolumeStatusPagesWithContextMutex.Lock()
	defer fake.describeVolumeStatusPagesWithContextMutex.Unlock()
	fake.DescribeVolumeStatusPagesWithContextStub = nil
	fake.describeVolumeStatusPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumeStatusPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeVolumeStatusPagesWithContextMutex.Lock()
	defer fake.describeVolumeStatusPagesWithContextMutex.Unlock()
	fake.DescribeVolumeStatusPagesWithContextStub = nil
	if fake.describeVolumeStatusPagesWithContextReturnsOnCall == nil {
		fake.describeVolumeStatusPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeVolumeStatusPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumeStatusRequest(arg1 *ec2.DescribeVolumeStatusInput) (*request.Request, *ec2.DescribeVolumeStatusOutput) {
	fake.describeVolumeStatusRequestMutex.Lock()
	ret, specificReturn := fake.describeVolumeStatusRequestReturnsOnCall[len(fake.describeVolumeStatusRequestArgsForCall)]
	fake.describeVolumeStatusRequestArgsForCall = append(fake.describeVolumeStatusRequestArgsForCall, struct {
		arg1 *ec2.DescribeVolumeStatusInput
	}{arg1})
	fake.recordInvocation("DescribeVolumeStatusRequest", []interface{}{arg1})
	fake.describeVolumeStatusRequestMutex.Unlock()
	if fake.DescribeVolumeStatusRequestStub != nil {
		return fake.DescribeVolumeStatusRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumeStatusRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumeStatusRequestCallCount() int {
	fake.describeVolumeStatusRequestMutex.RLock()
	defer fake.describeVolumeStatusRequestMutex.RUnlock()
	return len(fake.describeVolumeStatusRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeStatusRequestCalls(stub func(*ec2.DescribeVolumeStatusInput) (*request.Request, *ec2.DescribeVolumeStatusOutput)) {
	fake.describeVolumeStatusRequestMutex.Lock()
	defer fake.describeVolumeStatusRequestMutex.Unlock()
	fake.DescribeVolumeStatusRequestStub = stub
}

func (fake *FakeEC2API) DescribeVolumeStatusRequestArgsForCall(i int) *ec2.DescribeVolumeStatusInput {
	fake.describeVolumeStatusRequestMutex.RLock()
	defer fake.describeVolumeStatusRequestMutex.RUnlock()
	argsForCall := fake.describeVolumeStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumeStatusRequestReturns(result1 *request.Request, result2 *ec2.DescribeVolumeStatusOutput) {
	fake.describeVolumeStatusRequestMutex.Lock()
	defer fake.describeVolumeStatusRequestMutex.Unlock()
	fake.DescribeVolumeStatusRequestStub = nil
	fake.describeVolumeStatusRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeStatusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVolumeStatusOutput) {
	fake.describeVolumeStatusRequestMutex.Lock()
	defer fake.describeVolumeStatusRequestMutex.Unlock()
	fake.DescribeVolumeStatusRequestStub = nil
	if fake.describeVolumeStatusRequestReturnsOnCall == nil {
		fake.describeVolumeStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVolumeStatusOutput
		})
	}
	fake.describeVolumeStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumeStatusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeStatusWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumeStatusInput, arg3 ...request.Option) (*ec2.DescribeVolumeStatusOutput, error) {
	fake.describeVolumeStatusWithContextMutex.Lock()
	ret, specificReturn := fake.describeVolumeStatusWithContextReturnsOnCall[len(fake.describeVolumeStatusWithContextArgsForCall)]
	fake.describeVolumeStatusWithContextArgsForCall = append(fake.describeVolumeStatusWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumeStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVolumeStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVolumeStatusWithContextMutex.Unlock()
	if fake.DescribeVolumeStatusWithContextStub != nil {
		return fake.DescribeVolumeStatusWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumeStatusWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumeStatusWithContextCallCount() int {
	fake.describeVolumeStatusWithContextMutex.RLock()
	defer fake.describeVolumeStatusWithContextMutex.RUnlock()
	return len(fake.describeVolumeStatusWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumeStatusWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumeStatusInput, ...request.Option) (*ec2.DescribeVolumeStatusOutput, error)) {
	fake.describeVolumeStatusWithContextMutex.Lock()
	defer fake.describeVolumeStatusWithContextMutex.Unlock()
	fake.DescribeVolumeStatusWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVolumeStatusWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumeStatusInput, []request.Option) {
	fake.describeVolumeStatusWithContextMutex.RLock()
	defer fake.describeVolumeStatusWithContextMutex.RUnlock()
	argsForCall := fake.describeVolumeStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVolumeStatusWithContextReturns(result1 *ec2.DescribeVolumeStatusOutput, result2 error) {
	fake.describeVolumeStatusWithContextMutex.Lock()
	defer fake.describeVolumeStatusWithContextMutex.Unlock()
	fake.DescribeVolumeStatusWithContextStub = nil
	fake.describeVolumeStatusWithContextReturns = struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumeStatusWithContextReturnsOnCall(i int, result1 *ec2.DescribeVolumeStatusOutput, result2 error) {
	fake.describeVolumeStatusWithContextMutex.Lock()
	defer fake.describeVolumeStatusWithContextMutex.Unlock()
	fake.DescribeVolumeStatusWithContextStub = nil
	if fake.describeVolumeStatusWithContextReturnsOnCall == nil {
		fake.describeVolumeStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumeStatusOutput
			result2 error
		})
	}
	fake.describeVolumeStatusWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumeStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumes(arg1 *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	fake.describeVolumesMutex.Lock()
	ret, specificReturn := fake.describeVolumesReturnsOnCall[len(fake.describeVolumesArgsForCall)]
	fake.describeVolumesArgsForCall = append(fake.describeVolumesArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
	}{arg1})
	fake.recordInvocation("DescribeVolumes", []interface{}{arg1})
	fake.describeVolumesMutex.Unlock()
	if fake.DescribeVolumesStub != nil {
		return fake.DescribeVolumesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumesCallCount() int {
	fake.describeVolumesMutex.RLock()
	defer fake.describeVolumesMutex.RUnlock()
	return len(fake.describeVolumesArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesCalls(stub func(*ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error)) {
	fake.describeVolumesMutex.Lock()
	defer fake.describeVolumesMutex.Unlock()
	fake.DescribeVolumesStub = stub
}

func (fake *FakeEC2API) DescribeVolumesArgsForCall(i int) *ec2.DescribeVolumesInput {
	fake.describeVolumesMutex.RLock()
	defer fake.describeVolumesMutex.RUnlock()
	argsForCall := fake.describeVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumesReturns(result1 *ec2.DescribeVolumesOutput, result2 error) {
	fake.describeVolumesMutex.Lock()
	defer fake.describeVolumesMutex.Unlock()
	fake.DescribeVolumesStub = nil
	fake.describeVolumesReturns = struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesReturnsOnCall(i int, result1 *ec2.DescribeVolumesOutput, result2 error) {
	fake.describeVolumesMutex.Lock()
	defer fake.describeVolumesMutex.Unlock()
	fake.DescribeVolumesStub = nil
	if fake.describeVolumesReturnsOnCall == nil {
		fake.describeVolumesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumesOutput
			result2 error
		})
	}
	fake.describeVolumesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesModifications(arg1 *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
	fake.describeVolumesModificationsMutex.Lock()
	ret, specificReturn := fake.describeVolumesModificationsReturnsOnCall[len(fake.describeVolumesModificationsArgsForCall)]
	fake.describeVolumesModificationsArgsForCall = append(fake.describeVolumesModificationsArgsForCall, struct {
		arg1 *ec2.DescribeVolumesModificationsInput
	}{arg1})
	fake.recordInvocation("DescribeVolumesModifications", []interface{}{arg1})
	fake.describeVolumesModificationsMutex.Unlock()
	if fake.DescribeVolumesModificationsStub != nil {
		return fake.DescribeVolumesModificationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesModificationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumesModificationsCallCount() int {
	fake.describeVolumesModificationsMutex.RLock()
	defer fake.describeVolumesModificationsMutex.RUnlock()
	return len(fake.describeVolumesModificationsArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesModificationsCalls(stub func(*ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error)) {
	fake.describeVolumesModificationsMutex.Lock()
	defer fake.describeVolumesModificationsMutex.Unlock()
	fake.DescribeVolumesModificationsStub = stub
}

func (fake *FakeEC2API) DescribeVolumesModificationsArgsForCall(i int) *ec2.DescribeVolumesModificationsInput {
	fake.describeVolumesModificationsMutex.RLock()
	defer fake.describeVolumesModificationsMutex.RUnlock()
	argsForCall := fake.describeVolumesModificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumesModificationsReturns(result1 *ec2.DescribeVolumesModificationsOutput, result2 error) {
	fake.describeVolumesModificationsMutex.Lock()
	defer fake.describeVolumesModificationsMutex.Unlock()
	fake.DescribeVolumesModificationsStub = nil
	fake.describeVolumesModificationsReturns = struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesModificationsReturnsOnCall(i int, result1 *ec2.DescribeVolumesModificationsOutput, result2 error) {
	fake.describeVolumesModificationsMutex.Lock()
	defer fake.describeVolumesModificationsMutex.Unlock()
	fake.DescribeVolumesModificationsStub = nil
	if fake.describeVolumesModificationsReturnsOnCall == nil {
		fake.describeVolumesModificationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumesModificationsOutput
			result2 error
		})
	}
	fake.describeVolumesModificationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesModificationsRequest(arg1 *ec2.DescribeVolumesModificationsInput) (*request.Request, *ec2.DescribeVolumesModificationsOutput) {
	fake.describeVolumesModificationsRequestMutex.Lock()
	ret, specificReturn := fake.describeVolumesModificationsRequestReturnsOnCall[len(fake.describeVolumesModificationsRequestArgsForCall)]
	fake.describeVolumesModificationsRequestArgsForCall = append(fake.describeVolumesModificationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVolumesModificationsInput
	}{arg1})
	fake.recordInvocation("DescribeVolumesModificationsRequest", []interface{}{arg1})
	fake.describeVolumesModificationsRequestMutex.Unlock()
	if fake.DescribeVolumesModificationsRequestStub != nil {
		return fake.DescribeVolumesModificationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesModificationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumesModificationsRequestCallCount() int {
	fake.describeVolumesModificationsRequestMutex.RLock()
	defer fake.describeVolumesModificationsRequestMutex.RUnlock()
	return len(fake.describeVolumesModificationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesModificationsRequestCalls(stub func(*ec2.DescribeVolumesModificationsInput) (*request.Request, *ec2.DescribeVolumesModificationsOutput)) {
	fake.describeVolumesModificationsRequestMutex.Lock()
	defer fake.describeVolumesModificationsRequestMutex.Unlock()
	fake.DescribeVolumesModificationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVolumesModificationsRequestArgsForCall(i int) *ec2.DescribeVolumesModificationsInput {
	fake.describeVolumesModificationsRequestMutex.RLock()
	defer fake.describeVolumesModificationsRequestMutex.RUnlock()
	argsForCall := fake.describeVolumesModificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumesModificationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVolumesModificationsOutput) {
	fake.describeVolumesModificationsRequestMutex.Lock()
	defer fake.describeVolumesModificationsRequestMutex.Unlock()
	fake.DescribeVolumesModificationsRequestStub = nil
	fake.describeVolumesModificationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesModificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesModificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVolumesModificationsOutput) {
	fake.describeVolumesModificationsRequestMutex.Lock()
	defer fake.describeVolumesModificationsRequestMutex.Unlock()
	fake.DescribeVolumesModificationsRequestStub = nil
	if fake.describeVolumesModificationsRequestReturnsOnCall == nil {
		fake.describeVolumesModificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVolumesModificationsOutput
		})
	}
	fake.describeVolumesModificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesModificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesModificationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumesModificationsInput, arg3 ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {
	fake.describeVolumesModificationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVolumesModificationsWithContextReturnsOnCall[len(fake.describeVolumesModificationsWithContextArgsForCall)]
	fake.describeVolumesModificationsWithContextArgsForCall = append(fake.describeVolumesModificationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesModificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVolumesModificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVolumesModificationsWithContextMutex.Unlock()
	if fake.DescribeVolumesModificationsWithContextStub != nil {
		return fake.DescribeVolumesModificationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesModificationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumesModificationsWithContextCallCount() int {
	fake.describeVolumesModificationsWithContextMutex.RLock()
	defer fake.describeVolumesModificationsWithContextMutex.RUnlock()
	return len(fake.describeVolumesModificationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesModificationsWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumesModificationsInput, ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error)) {
	fake.describeVolumesModificationsWithContextMutex.Lock()
	defer fake.describeVolumesModificationsWithContextMutex.Unlock()
	fake.DescribeVolumesModificationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVolumesModificationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumesModificationsInput, []request.Option) {
	fake.describeVolumesModificationsWithContextMutex.RLock()
	defer fake.describeVolumesModificationsWithContextMutex.RUnlock()
	argsForCall := fake.describeVolumesModificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVolumesModificationsWithContextReturns(result1 *ec2.DescribeVolumesModificationsOutput, result2 error) {
	fake.describeVolumesModificationsWithContextMutex.Lock()
	defer fake.describeVolumesModificationsWithContextMutex.Unlock()
	fake.DescribeVolumesModificationsWithContextStub = nil
	fake.describeVolumesModificationsWithContextReturns = struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesModificationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVolumesModificationsOutput, result2 error) {
	fake.describeVolumesModificationsWithContextMutex.Lock()
	defer fake.describeVolumesModificationsWithContextMutex.Unlock()
	fake.DescribeVolumesModificationsWithContextStub = nil
	if fake.describeVolumesModificationsWithContextReturnsOnCall == nil {
		fake.describeVolumesModificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumesModificationsOutput
			result2 error
		})
	}
	fake.describeVolumesModificationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumesModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesPages(arg1 *ec2.DescribeVolumesInput, arg2 func(*ec2.DescribeVolumesOutput, bool) bool) error {
	fake.describeVolumesPagesMutex.Lock()
	ret, specificReturn := fake.describeVolumesPagesReturnsOnCall[len(fake.describeVolumesPagesArgsForCall)]
	fake.describeVolumesPagesArgsForCall = append(fake.describeVolumesPagesArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
		arg2 func(*ec2.DescribeVolumesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeVolumesPages", []interface{}{arg1, arg2})
	fake.describeVolumesPagesMutex.Unlock()
	if fake.DescribeVolumesPagesStub != nil {
		return fake.DescribeVolumesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeVolumesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeVolumesPagesCallCount() int {
	fake.describeVolumesPagesMutex.RLock()
	defer fake.describeVolumesPagesMutex.RUnlock()
	return len(fake.describeVolumesPagesArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesPagesCalls(stub func(*ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool) error) {
	fake.describeVolumesPagesMutex.Lock()
	defer fake.describeVolumesPagesMutex.Unlock()
	fake.DescribeVolumesPagesStub = stub
}

func (fake *FakeEC2API) DescribeVolumesPagesArgsForCall(i int) (*ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool) {
	fake.describeVolumesPagesMutex.RLock()
	defer fake.describeVolumesPagesMutex.RUnlock()
	argsForCall := fake.describeVolumesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEC2API) DescribeVolumesPagesReturns(result1 error) {
	fake.describeVolumesPagesMutex.Lock()
	defer fake.describeVolumesPagesMutex.Unlock()
	fake.DescribeVolumesPagesStub = nil
	fake.describeVolumesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumesPagesReturnsOnCall(i int, result1 error) {
	fake.describeVolumesPagesMutex.Lock()
	defer fake.describeVolumesPagesMutex.Unlock()
	fake.DescribeVolumesPagesStub = nil
	if fake.describeVolumesPagesReturnsOnCall == nil {
		fake.describeVolumesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeVolumesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumesPagesWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumesInput, arg3 func(*ec2.DescribeVolumesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeVolumesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeVolumesPagesWithContextReturnsOnCall[len(fake.describeVolumesPagesWithContextArgsForCall)]
	fake.describeVolumesPagesWithContextArgsForCall = append(fake.describeVolumesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 func(*ec2.DescribeVolumesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeVolumesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeVolumesPagesWithContextMutex.Unlock()
	if fake.DescribeVolumesPagesWithContextStub != nil {
		return fake.DescribeVolumesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeVolumesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) DescribeVolumesPagesWithContextCallCount() int {
	fake.describeVolumesPagesWithContextMutex.RLock()
	defer fake.describeVolumesPagesWithContextMutex.RUnlock()
	return len(fake.describeVolumesPagesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesPagesWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool, ...request.Option) error) {
	fake.describeVolumesPagesWithContextMutex.Lock()
	defer fake.describeVolumesPagesWithContextMutex.Unlock()
	fake.DescribeVolumesPagesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVolumesPagesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool, []request.Option) {
	fake.describeVolumesPagesWithContextMutex.RLock()
	defer fake.describeVolumesPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeVolumesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeEC2API) DescribeVolumesPagesWithContextReturns(result1 error) {
	fake.describeVolumesPagesWithContextMutex.Lock()
	defer fake.describeVolumesPagesWithContextMutex.Unlock()
	fake.DescribeVolumesPagesWithContextStub = nil
	fake.describeVolumesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeVolumesPagesWithContextMutex.Lock()
	defer fake.describeVolumesPagesWithContextMutex.Unlock()
	fake.DescribeVolumesPagesWithContextStub = nil
	if fake.describeVolumesPagesWithContextReturnsOnCall == nil {
		fake.describeVolumesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeVolumesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) DescribeVolumesRequest(arg1 *ec2.DescribeVolumesInput) (*request.Request, *ec2.DescribeVolumesOutput) {
	fake.describeVolumesRequestMutex.Lock()
	ret, specificReturn := fake.describeVolumesRequestReturnsOnCall[len(fake.describeVolumesRequestArgsForCall)]
	fake.describeVolumesRequestArgsForCall = append(fake.describeVolumesRequestArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
	}{arg1})
	fake.recordInvocation("DescribeVolumesRequest", []interface{}{arg1})
	fake.describeVolumesRequestMutex.Unlock()
	if fake.DescribeVolumesRequestStub != nil {
		return fake.DescribeVolumesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumesRequestCallCount() int {
	fake.describeVolumesRequestMutex.RLock()
	defer fake.describeVolumesRequestMutex.RUnlock()
	return len(fake.describeVolumesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesRequestCalls(stub func(*ec2.DescribeVolumesInput) (*request.Request, *ec2.DescribeVolumesOutput)) {
	fake.describeVolumesRequestMutex.Lock()
	defer fake.describeVolumesRequestMutex.Unlock()
	fake.DescribeVolumesRequestStub = stub
}

func (fake *FakeEC2API) DescribeVolumesRequestArgsForCall(i int) *ec2.DescribeVolumesInput {
	fake.describeVolumesRequestMutex.RLock()
	defer fake.describeVolumesRequestMutex.RUnlock()
	argsForCall := fake.describeVolumesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVolumesRequestReturns(result1 *request.Request, result2 *ec2.DescribeVolumesOutput) {
	fake.describeVolumesRequestMutex.Lock()
	defer fake.describeVolumesRequestMutex.Unlock()
	fake.DescribeVolumesRequestStub = nil
	fake.describeVolumesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVolumesOutput) {
	fake.describeVolumesRequestMutex.Lock()
	defer fake.describeVolumesRequestMutex.Unlock()
	fake.DescribeVolumesRequestStub = nil
	if fake.describeVolumesRequestReturnsOnCall == nil {
		fake.describeVolumesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVolumesOutput
		})
	}
	fake.describeVolumesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVolumesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumesInput, arg3 ...request.Option) (*ec2.DescribeVolumesOutput, error) {
	fake.describeVolumesWithContextMutex.Lock()
	ret, specificReturn := fake.describeVolumesWithContextReturnsOnCall[len(fake.describeVolumesWithContextArgsForCall)]
	fake.describeVolumesWithContextArgsForCall = append(fake.describeVolumesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVolumesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVolumesWithContextMutex.Unlock()
	if fake.DescribeVolumesWithContextStub != nil {
		return fake.DescribeVolumesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVolumesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVolumesWithContextCallCount() int {
	fake.describeVolumesWithContextMutex.RLock()
	defer fake.describeVolumesWithContextMutex.RUnlock()
	return len(fake.describeVolumesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVolumesWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumesInput, ...request.Option) (*ec2.DescribeVolumesOutput, error)) {
	fake.describeVolumesWithContextMutex.Lock()
	defer fake.describeVolumesWithContextMutex.Unlock()
	fake.DescribeVolumesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVolumesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumesInput, []request.Option) {
	fake.describeVolumesWithContextMutex.RLock()
	defer fake.describeVolumesWithContextMutex.RUnlock()
	argsForCall := fake.describeVolumesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVolumesWithContextReturns(result1 *ec2.DescribeVolumesOutput, result2 error) {
	fake.describeVolumesWithContextMutex.Lock()
	defer fake.describeVolumesWithContextMutex.Unlock()
	fake.DescribeVolumesWithContextStub = nil
	fake.describeVolumesWithContextReturns = struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVolumesWithContextReturnsOnCall(i int, result1 *ec2.DescribeVolumesOutput, result2 error) {
	fake.describeVolumesWithContextMutex.Lock()
	defer fake.describeVolumesWithContextMutex.Unlock()
	fake.DescribeVolumesWithContextStub = nil
	if fake.describeVolumesWithContextReturnsOnCall == nil {
		fake.describeVolumesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVolumesOutput
			result2 error
		})
	}
	fake.describeVolumesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVolumesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcAttribute(arg1 *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
	fake.describeVpcAttributeMutex.Lock()
	ret, specificReturn := fake.describeVpcAttributeReturnsOnCall[len(fake.describeVpcAttributeArgsForCall)]
	fake.describeVpcAttributeArgsForCall = append(fake.describeVpcAttributeArgsForCall, struct {
		arg1 *ec2.DescribeVpcAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeVpcAttribute", []interface{}{arg1})
	fake.describeVpcAttributeMutex.Unlock()
	if fake.DescribeVpcAttributeStub != nil {
		return fake.DescribeVpcAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcAttributeCallCount() int {
	fake.describeVpcAttributeMutex.RLock()
	defer fake.describeVpcAttributeMutex.RUnlock()
	return len(fake.describeVpcAttributeArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcAttributeCalls(stub func(*ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error)) {
	fake.describeVpcAttributeMutex.Lock()
	defer fake.describeVpcAttributeMutex.Unlock()
	fake.DescribeVpcAttributeStub = stub
}

func (fake *FakeEC2API) DescribeVpcAttributeArgsForCall(i int) *ec2.DescribeVpcAttributeInput {
	fake.describeVpcAttributeMutex.RLock()
	defer fake.describeVpcAttributeMutex.RUnlock()
	argsForCall := fake.describeVpcAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcAttributeReturns(result1 *ec2.DescribeVpcAttributeOutput, result2 error) {
	fake.describeVpcAttributeMutex.Lock()
	defer fake.describeVpcAttributeMutex.Unlock()
	fake.DescribeVpcAttributeStub = nil
	fake.describeVpcAttributeReturns = struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcAttributeReturnsOnCall(i int, result1 *ec2.DescribeVpcAttributeOutput, result2 error) {
	fake.describeVpcAttributeMutex.Lock()
	defer fake.describeVpcAttributeMutex.Unlock()
	fake.DescribeVpcAttributeStub = nil
	if fake.describeVpcAttributeReturnsOnCall == nil {
		fake.describeVpcAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcAttributeOutput
			result2 error
		})
	}
	fake.describeVpcAttributeReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcAttributeRequest(arg1 *ec2.DescribeVpcAttributeInput) (*request.Request, *ec2.DescribeVpcAttributeOutput) {
	fake.describeVpcAttributeRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcAttributeRequestReturnsOnCall[len(fake.describeVpcAttributeRequestArgsForCall)]
	fake.describeVpcAttributeRequestArgsForCall = append(fake.describeVpcAttributeRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcAttributeInput
	}{arg1})
	fake.recordInvocation("DescribeVpcAttributeRequest", []interface{}{arg1})
	fake.describeVpcAttributeRequestMutex.Unlock()
	if fake.DescribeVpcAttributeRequestStub != nil {
		return fake.DescribeVpcAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcAttributeRequestCallCount() int {
	fake.describeVpcAttributeRequestMutex.RLock()
	defer fake.describeVpcAttributeRequestMutex.RUnlock()
	return len(fake.describeVpcAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcAttributeRequestCalls(stub func(*ec2.DescribeVpcAttributeInput) (*request.Request, *ec2.DescribeVpcAttributeOutput)) {
	fake.describeVpcAttributeRequestMutex.Lock()
	defer fake.describeVpcAttributeRequestMutex.Unlock()
	fake.DescribeVpcAttributeRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcAttributeRequestArgsForCall(i int) *ec2.DescribeVpcAttributeInput {
	fake.describeVpcAttributeRequestMutex.RLock()
	defer fake.describeVpcAttributeRequestMutex.RUnlock()
	argsForCall := fake.describeVpcAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcAttributeRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcAttributeOutput) {
	fake.describeVpcAttributeRequestMutex.Lock()
	defer fake.describeVpcAttributeRequestMutex.Unlock()
	fake.DescribeVpcAttributeRequestStub = nil
	fake.describeVpcAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcAttributeOutput) {
	fake.describeVpcAttributeRequestMutex.Lock()
	defer fake.describeVpcAttributeRequestMutex.Unlock()
	fake.DescribeVpcAttributeRequestStub = nil
	if fake.describeVpcAttributeRequestReturnsOnCall == nil {
		fake.describeVpcAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcAttributeOutput
		})
	}
	fake.describeVpcAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcAttributeWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcAttributeInput, arg3 ...request.Option) (*ec2.DescribeVpcAttributeOutput, error) {
	fake.describeVpcAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcAttributeWithContextReturnsOnCall[len(fake.describeVpcAttributeWithContextArgsForCall)]
	fake.describeVpcAttributeWithContextArgsForCall = append(fake.describeVpcAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcAttributeWithContextMutex.Unlock()
	if fake.DescribeVpcAttributeWithContextStub != nil {
		return fake.DescribeVpcAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcAttributeWithContextCallCount() int {
	fake.describeVpcAttributeWithContextMutex.RLock()
	defer fake.describeVpcAttributeWithContextMutex.RUnlock()
	return len(fake.describeVpcAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcAttributeWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcAttributeInput, ...request.Option) (*ec2.DescribeVpcAttributeOutput, error)) {
	fake.describeVpcAttributeWithContextMutex.Lock()
	defer fake.describeVpcAttributeWithContextMutex.Unlock()
	fake.DescribeVpcAttributeWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcAttributeInput, []request.Option) {
	fake.describeVpcAttributeWithContextMutex.RLock()
	defer fake.describeVpcAttributeWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcAttributeWithContextReturns(result1 *ec2.DescribeVpcAttributeOutput, result2 error) {
	fake.describeVpcAttributeWithContextMutex.Lock()
	defer fake.describeVpcAttributeWithContextMutex.Unlock()
	fake.DescribeVpcAttributeWithContextStub = nil
	fake.describeVpcAttributeWithContextReturns = struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcAttributeWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcAttributeOutput, result2 error) {
	fake.describeVpcAttributeWithContextMutex.Lock()
	defer fake.describeVpcAttributeWithContextMutex.Unlock()
	fake.DescribeVpcAttributeWithContextStub = nil
	if fake.describeVpcAttributeWithContextReturnsOnCall == nil {
		fake.describeVpcAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcAttributeOutput
			result2 error
		})
	}
	fake.describeVpcAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLink(arg1 *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
	fake.describeVpcClassicLinkMutex.Lock()
	ret, specificReturn := fake.describeVpcClassicLinkReturnsOnCall[len(fake.describeVpcClassicLinkArgsForCall)]
	fake.describeVpcClassicLinkArgsForCall = append(fake.describeVpcClassicLinkArgsForCall, struct {
		arg1 *ec2.DescribeVpcClassicLinkInput
	}{arg1})
	fake.recordInvocation("DescribeVpcClassicLink", []interface{}{arg1})
	fake.describeVpcClassicLinkMutex.Unlock()
	if fake.DescribeVpcClassicLinkStub != nil {
		return fake.DescribeVpcClassicLinkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcClassicLinkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcClassicLinkCallCount() int {
	fake.describeVpcClassicLinkMutex.RLock()
	defer fake.describeVpcClassicLinkMutex.RUnlock()
	return len(fake.describeVpcClassicLinkArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcClassicLinkCalls(stub func(*ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error)) {
	fake.describeVpcClassicLinkMutex.Lock()
	defer fake.describeVpcClassicLinkMutex.Unlock()
	fake.DescribeVpcClassicLinkStub = stub
}

func (fake *FakeEC2API) DescribeVpcClassicLinkArgsForCall(i int) *ec2.DescribeVpcClassicLinkInput {
	fake.describeVpcClassicLinkMutex.RLock()
	defer fake.describeVpcClassicLinkMutex.RUnlock()
	argsForCall := fake.describeVpcClassicLinkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcClassicLinkReturns(result1 *ec2.DescribeVpcClassicLinkOutput, result2 error) {
	fake.describeVpcClassicLinkMutex.Lock()
	defer fake.describeVpcClassicLinkMutex.Unlock()
	fake.DescribeVpcClassicLinkStub = nil
	fake.describeVpcClassicLinkReturns = struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkReturnsOnCall(i int, result1 *ec2.DescribeVpcClassicLinkOutput, result2 error) {
	fake.describeVpcClassicLinkMutex.Lock()
	defer fake.describeVpcClassicLinkMutex.Unlock()
	fake.DescribeVpcClassicLinkStub = nil
	if fake.describeVpcClassicLinkReturnsOnCall == nil {
		fake.describeVpcClassicLinkReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcClassicLinkOutput
			result2 error
		})
	}
	fake.describeVpcClassicLinkReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupport(arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	fake.describeVpcClassicLinkDnsSupportMutex.Lock()
	ret, specificReturn := fake.describeVpcClassicLinkDnsSupportReturnsOnCall[len(fake.describeVpcClassicLinkDnsSupportArgsForCall)]
	fake.describeVpcClassicLinkDnsSupportArgsForCall = append(fake.describeVpcClassicLinkDnsSupportArgsForCall, struct {
		arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}{arg1})
	fake.recordInvocation("DescribeVpcClassicLinkDnsSupport", []interface{}{arg1})
	fake.describeVpcClassicLinkDnsSupportMutex.Unlock()
	if fake.DescribeVpcClassicLinkDnsSupportStub != nil {
		return fake.DescribeVpcClassicLinkDnsSupportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcClassicLinkDnsSupportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportCallCount() int {
	fake.describeVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportMutex.RUnlock()
	return len(fake.describeVpcClassicLinkDnsSupportArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportCalls(stub func(*ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)) {
	fake.describeVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportStub = stub
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportArgsForCall(i int) *ec2.DescribeVpcClassicLinkDnsSupportInput {
	fake.describeVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportMutex.RUnlock()
	argsForCall := fake.describeVpcClassicLinkDnsSupportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportReturns(result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.describeVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportStub = nil
	fake.describeVpcClassicLinkDnsSupportReturns = struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportReturnsOnCall(i int, result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.describeVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportStub = nil
	if fake.describeVpcClassicLinkDnsSupportReturnsOnCall == nil {
		fake.describeVpcClassicLinkDnsSupportReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
			result2 error
		})
	}
	fake.describeVpcClassicLinkDnsSupportReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportRequest(arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	fake.describeVpcClassicLinkDnsSupportRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcClassicLinkDnsSupportRequestReturnsOnCall[len(fake.describeVpcClassicLinkDnsSupportRequestArgsForCall)]
	fake.describeVpcClassicLinkDnsSupportRequestArgsForCall = append(fake.describeVpcClassicLinkDnsSupportRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcClassicLinkDnsSupportInput
	}{arg1})
	fake.recordInvocation("DescribeVpcClassicLinkDnsSupportRequest", []interface{}{arg1})
	fake.describeVpcClassicLinkDnsSupportRequestMutex.Unlock()
	if fake.DescribeVpcClassicLinkDnsSupportRequestStub != nil {
		return fake.DescribeVpcClassicLinkDnsSupportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcClassicLinkDnsSupportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportRequestCallCount() int {
	fake.describeVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	return len(fake.describeVpcClassicLinkDnsSupportRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportRequestCalls(stub func(*ec2.DescribeVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DescribeVpcClassicLinkDnsSupportOutput)) {
	fake.describeVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportRequestArgsForCall(i int) *ec2.DescribeVpcClassicLinkDnsSupportInput {
	fake.describeVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	argsForCall := fake.describeVpcClassicLinkDnsSupportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	fake.describeVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportRequestStub = nil
	fake.describeVpcClassicLinkDnsSupportRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	fake.describeVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportRequestStub = nil
	if fake.describeVpcClassicLinkDnsSupportRequestReturnsOnCall == nil {
		fake.describeVpcClassicLinkDnsSupportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		})
	}
	fake.describeVpcClassicLinkDnsSupportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcClassicLinkDnsSupportInput, arg3 ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcClassicLinkDnsSupportWithContextReturnsOnCall[len(fake.describeVpcClassicLinkDnsSupportWithContextArgsForCall)]
	fake.describeVpcClassicLinkDnsSupportWithContextArgsForCall = append(fake.describeVpcClassicLinkDnsSupportWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcClassicLinkDnsSupportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcClassicLinkDnsSupportWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	if fake.DescribeVpcClassicLinkDnsSupportWithContextStub != nil {
		return fake.DescribeVpcClassicLinkDnsSupportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcClassicLinkDnsSupportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportWithContextCallCount() int {
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	return len(fake.describeVpcClassicLinkDnsSupportWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcClassicLinkDnsSupportInput, ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)) {
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcClassicLinkDnsSupportInput, []request.Option) {
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcClassicLinkDnsSupportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportWithContextReturns(result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportWithContextStub = nil
	fake.describeVpcClassicLinkDnsSupportWithContextReturns = struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkDnsSupportWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.describeVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.DescribeVpcClassicLinkDnsSupportWithContextStub = nil
	if fake.describeVpcClassicLinkDnsSupportWithContextReturnsOnCall == nil {
		fake.describeVpcClassicLinkDnsSupportWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
			result2 error
		})
	}
	fake.describeVpcClassicLinkDnsSupportWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkRequest(arg1 *ec2.DescribeVpcClassicLinkInput) (*request.Request, *ec2.DescribeVpcClassicLinkOutput) {
	fake.describeVpcClassicLinkRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcClassicLinkRequestReturnsOnCall[len(fake.describeVpcClassicLinkRequestArgsForCall)]
	fake.describeVpcClassicLinkRequestArgsForCall = append(fake.describeVpcClassicLinkRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcClassicLinkInput
	}{arg1})
	fake.recordInvocation("DescribeVpcClassicLinkRequest", []interface{}{arg1})
	fake.describeVpcClassicLinkRequestMutex.Unlock()
	if fake.DescribeVpcClassicLinkRequestStub != nil {
		return fake.DescribeVpcClassicLinkRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcClassicLinkRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcClassicLinkRequestCallCount() int {
	fake.describeVpcClassicLinkRequestMutex.RLock()
	defer fake.describeVpcClassicLinkRequestMutex.RUnlock()
	return len(fake.describeVpcClassicLinkRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcClassicLinkRequestCalls(stub func(*ec2.DescribeVpcClassicLinkInput) (*request.Request, *ec2.DescribeVpcClassicLinkOutput)) {
	fake.describeVpcClassicLinkRequestMutex.Lock()
	defer fake.describeVpcClassicLinkRequestMutex.Unlock()
	fake.DescribeVpcClassicLinkRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcClassicLinkRequestArgsForCall(i int) *ec2.DescribeVpcClassicLinkInput {
	fake.describeVpcClassicLinkRequestMutex.RLock()
	defer fake.describeVpcClassicLinkRequestMutex.RUnlock()
	argsForCall := fake.describeVpcClassicLinkRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcClassicLinkRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcClassicLinkOutput) {
	fake.describeVpcClassicLinkRequestMutex.Lock()
	defer fake.describeVpcClassicLinkRequestMutex.Unlock()
	fake.DescribeVpcClassicLinkRequestStub = nil
	fake.describeVpcClassicLinkRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcClassicLinkOutput) {
	fake.describeVpcClassicLinkRequestMutex.Lock()
	defer fake.describeVpcClassicLinkRequestMutex.Unlock()
	fake.DescribeVpcClassicLinkRequestStub = nil
	if fake.describeVpcClassicLinkRequestReturnsOnCall == nil {
		fake.describeVpcClassicLinkRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcClassicLinkOutput
		})
	}
	fake.describeVpcClassicLinkRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcClassicLinkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcClassicLinkInput, arg3 ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error) {
	fake.describeVpcClassicLinkWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcClassicLinkWithContextReturnsOnCall[len(fake.describeVpcClassicLinkWithContextArgsForCall)]
	fake.describeVpcClassicLinkWithContextArgsForCall = append(fake.describeVpcClassicLinkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcClassicLinkInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcClassicLinkWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcClassicLinkWithContextMutex.Unlock()
	if fake.DescribeVpcClassicLinkWithContextStub != nil {
		return fake.DescribeVpcClassicLinkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcClassicLinkWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcClassicLinkWithContextCallCount() int {
	fake.describeVpcClassicLinkWithContextMutex.RLock()
	defer fake.describeVpcClassicLinkWithContextMutex.RUnlock()
	return len(fake.describeVpcClassicLinkWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcClassicLinkWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcClassicLinkInput, ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error)) {
	fake.describeVpcClassicLinkWithContextMutex.Lock()
	defer fake.describeVpcClassicLinkWithContextMutex.Unlock()
	fake.DescribeVpcClassicLinkWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcClassicLinkWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcClassicLinkInput, []request.Option) {
	fake.describeVpcClassicLinkWithContextMutex.RLock()
	defer fake.describeVpcClassicLinkWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcClassicLinkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcClassicLinkWithContextReturns(result1 *ec2.DescribeVpcClassicLinkOutput, result2 error) {
	fake.describeVpcClassicLinkWithContextMutex.Lock()
	defer fake.describeVpcClassicLinkWithContextMutex.Unlock()
	fake.DescribeVpcClassicLinkWithContextStub = nil
	fake.describeVpcClassicLinkWithContextReturns = struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcClassicLinkWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcClassicLinkOutput, result2 error) {
	fake.describeVpcClassicLinkWithContextMutex.Lock()
	defer fake.describeVpcClassicLinkWithContextMutex.Unlock()
	fake.DescribeVpcClassicLinkWithContextStub = nil
	if fake.describeVpcClassicLinkWithContextReturnsOnCall == nil {
		fake.describeVpcClassicLinkWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcClassicLinkOutput
			result2 error
		})
	}
	fake.describeVpcClassicLinkWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotifications(arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	fake.describeVpcEndpointConnectionNotificationsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointConnectionNotificationsReturnsOnCall[len(fake.describeVpcEndpointConnectionNotificationsArgsForCall)]
	fake.describeVpcEndpointConnectionNotificationsArgsForCall = append(fake.describeVpcEndpointConnectionNotificationsArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointConnectionNotifications", []interface{}{arg1})
	fake.describeVpcEndpointConnectionNotificationsMutex.Unlock()
	if fake.DescribeVpcEndpointConnectionNotificationsStub != nil {
		return fake.DescribeVpcEndpointConnectionNotificationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointConnectionNotificationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsCallCount() int {
	fake.describeVpcEndpointConnectionNotificationsMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsMutex.RUnlock()
	return len(fake.describeVpcEndpointConnectionNotificationsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsCalls(stub func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)) {
	fake.describeVpcEndpointConnectionNotificationsMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsArgsForCall(i int) *ec2.DescribeVpcEndpointConnectionNotificationsInput {
	fake.describeVpcEndpointConnectionNotificationsMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointConnectionNotificationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsReturns(result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.describeVpcEndpointConnectionNotificationsMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsStub = nil
	fake.describeVpcEndpointConnectionNotificationsReturns = struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.describeVpcEndpointConnectionNotificationsMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsStub = nil
	if fake.describeVpcEndpointConnectionNotificationsReturnsOnCall == nil {
		fake.describeVpcEndpointConnectionNotificationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointConnectionNotificationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsRequest(arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointConnectionNotificationsRequestReturnsOnCall[len(fake.describeVpcEndpointConnectionNotificationsRequestArgsForCall)]
	fake.describeVpcEndpointConnectionNotificationsRequestArgsForCall = append(fake.describeVpcEndpointConnectionNotificationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointConnectionNotificationsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointConnectionNotificationsRequest", []interface{}{arg1})
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	if fake.DescribeVpcEndpointConnectionNotificationsRequestStub != nil {
		return fake.DescribeVpcEndpointConnectionNotificationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointConnectionNotificationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsRequestCallCount() int {
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsRequestMutex.RUnlock()
	return len(fake.describeVpcEndpointConnectionNotificationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsRequestCalls(stub func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionNotificationsOutput)) {
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsRequestArgsForCall(i int) *ec2.DescribeVpcEndpointConnectionNotificationsInput {
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointConnectionNotificationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsRequestStub = nil
	fake.describeVpcEndpointConnectionNotificationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsRequestMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsRequestStub = nil
	if fake.describeVpcEndpointConnectionNotificationsRequestReturnsOnCall == nil {
		fake.describeVpcEndpointConnectionNotificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		})
	}
	fake.describeVpcEndpointConnectionNotificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcEndpointConnectionNotificationsInput, arg3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointConnectionNotificationsWithContextReturnsOnCall[len(fake.describeVpcEndpointConnectionNotificationsWithContextArgsForCall)]
	fake.describeVpcEndpointConnectionNotificationsWithContextArgsForCall = append(fake.describeVpcEndpointConnectionNotificationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointConnectionNotificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcEndpointConnectionNotificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	if fake.DescribeVpcEndpointConnectionNotificationsWithContextStub != nil {
		return fake.DescribeVpcEndpointConnectionNotificationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointConnectionNotificationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsWithContextCallCount() int {
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsWithContextMutex.RUnlock()
	return len(fake.describeVpcEndpointConnectionNotificationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcEndpointConnectionNotificationsInput, ...request.Option) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)) {
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcEndpointConnectionNotificationsInput, []request.Option) {
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointConnectionNotificationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsWithContextReturns(result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsWithContextStub = nil
	fake.describeVpcEndpointConnectionNotificationsWithContextReturns = struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionNotificationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, result2 error) {
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Lock()
	defer fake.describeVpcEndpointConnectionNotificationsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointConnectionNotificationsWithContextStub = nil
	if fake.describeVpcEndpointConnectionNotificationsWithContextReturnsOnCall == nil {
		fake.describeVpcEndpointConnectionNotificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointConnectionNotificationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnections(arg1 *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	fake.describeVpcEndpointConnectionsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointConnectionsReturnsOnCall[len(fake.describeVpcEndpointConnectionsArgsForCall)]
	fake.describeVpcEndpointConnectionsArgsForCall = append(fake.describeVpcEndpointConnectionsArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointConnections", []interface{}{arg1})
	fake.describeVpcEndpointConnectionsMutex.Unlock()
	if fake.DescribeVpcEndpointConnectionsStub != nil {
		return fake.DescribeVpcEndpointConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsCallCount() int {
	fake.describeVpcEndpointConnectionsMutex.RLock()
	defer fake.describeVpcEndpointConnectionsMutex.RUnlock()
	return len(fake.describeVpcEndpointConnectionsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsCalls(stub func(*ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error)) {
	fake.describeVpcEndpointConnectionsMutex.Lock()
	defer fake.describeVpcEndpointConnectionsMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsArgsForCall(i int) *ec2.DescribeVpcEndpointConnectionsInput {
	fake.describeVpcEndpointConnectionsMutex.RLock()
	defer fake.describeVpcEndpointConnectionsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsReturns(result1 *ec2.DescribeVpcEndpointConnectionsOutput, result2 error) {
	fake.describeVpcEndpointConnectionsMutex.Lock()
	defer fake.describeVpcEndpointConnectionsMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsStub = nil
	fake.describeVpcEndpointConnectionsReturns = struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointConnectionsOutput, result2 error) {
	fake.describeVpcEndpointConnectionsMutex.Lock()
	defer fake.describeVpcEndpointConnectionsMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsStub = nil
	if fake.describeVpcEndpointConnectionsReturnsOnCall == nil {
		fake.describeVpcEndpointConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointConnectionsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsRequest(arg1 *ec2.DescribeVpcEndpointConnectionsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionsOutput) {
	fake.describeVpcEndpointConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointConnectionsRequestReturnsOnCall[len(fake.describeVpcEndpointConnectionsRequestArgsForCall)]
	fake.describeVpcEndpointConnectionsRequestArgsForCall = append(fake.describeVpcEndpointConnectionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointConnectionsRequest", []interface{}{arg1})
	fake.describeVpcEndpointConnectionsRequestMutex.Unlock()
	if fake.DescribeVpcEndpointConnectionsRequestStub != nil {
		return fake.DescribeVpcEndpointConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsRequestCallCount() int {
	fake.describeVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.describeVpcEndpointConnectionsRequestMutex.RUnlock()
	return len(fake.describeVpcEndpointConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsRequestCalls(stub func(*ec2.DescribeVpcEndpointConnectionsInput) (*request.Request, *ec2.DescribeVpcEndpointConnectionsOutput)) {
	fake.describeVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.describeVpcEndpointConnectionsRequestMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsRequestArgsForCall(i int) *ec2.DescribeVpcEndpointConnectionsInput {
	fake.describeVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.describeVpcEndpointConnectionsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcEndpointConnectionsOutput) {
	fake.describeVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.describeVpcEndpointConnectionsRequestMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsRequestStub = nil
	fake.describeVpcEndpointConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcEndpointConnectionsOutput) {
	fake.describeVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.describeVpcEndpointConnectionsRequestMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsRequestStub = nil
	if fake.describeVpcEndpointConnectionsRequestReturnsOnCall == nil {
		fake.describeVpcEndpointConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcEndpointConnectionsOutput
		})
	}
	fake.describeVpcEndpointConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcEndpointConnectionsInput, arg3 ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	fake.describeVpcEndpointConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointConnectionsWithContextReturnsOnCall[len(fake.describeVpcEndpointConnectionsWithContextArgsForCall)]
	fake.describeVpcEndpointConnectionsWithContextArgsForCall = append(fake.describeVpcEndpointConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcEndpointConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointConnectionsWithContextMutex.Unlock()
	if fake.DescribeVpcEndpointConnectionsWithContextStub != nil {
		return fake.DescribeVpcEndpointConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsWithContextCallCount() int {
	fake.describeVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.describeVpcEndpointConnectionsWithContextMutex.RUnlock()
	return len(fake.describeVpcEndpointConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcEndpointConnectionsInput, ...request.Option) (*ec2.DescribeVpcEndpointConnectionsOutput, error)) {
	fake.describeVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.describeVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcEndpointConnectionsInput, []request.Option) {
	fake.describeVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.describeVpcEndpointConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsWithContextReturns(result1 *ec2.DescribeVpcEndpointConnectionsOutput, result2 error) {
	fake.describeVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.describeVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsWithContextStub = nil
	fake.describeVpcEndpointConnectionsWithContextReturns = struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointConnectionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointConnectionsOutput, result2 error) {
	fake.describeVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.describeVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointConnectionsWithContextStub = nil
	if fake.describeVpcEndpointConnectionsWithContextReturnsOnCall == nil {
		fake.describeVpcEndpointConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointConnectionsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurations(arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServiceConfigurationsReturnsOnCall[len(fake.describeVpcEndpointServiceConfigurationsArgsForCall)]
	fake.describeVpcEndpointServiceConfigurationsArgsForCall = append(fake.describeVpcEndpointServiceConfigurationsArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointServiceConfigurations", []interface{}{arg1})
	fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	if fake.DescribeVpcEndpointServiceConfigurationsStub != nil {
		return fake.DescribeVpcEndpointServiceConfigurationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServiceConfigurationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsCallCount() int {
	fake.describeVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.RUnlock()
	return len(fake.describeVpcEndpointServiceConfigurationsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsCalls(stub func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsArgsForCall(i int) *ec2.DescribeVpcEndpointServiceConfigurationsInput {
	fake.describeVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServiceConfigurationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsReturns(result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsStub = nil
	fake.describeVpcEndpointServiceConfigurationsReturns = struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsStub = nil
	if fake.describeVpcEndpointServiceConfigurationsReturnsOnCall == nil {
		fake.describeVpcEndpointServiceConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServiceConfigurationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsRequest(arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServiceConfigurationsRequestReturnsOnCall[len(fake.describeVpcEndpointServiceConfigurationsRequestArgsForCall)]
	fake.describeVpcEndpointServiceConfigurationsRequestArgsForCall = append(fake.describeVpcEndpointServiceConfigurationsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointServiceConfigurationsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointServiceConfigurationsRequest", []interface{}{arg1})
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	if fake.DescribeVpcEndpointServiceConfigurationsRequestStub != nil {
		return fake.DescribeVpcEndpointServiceConfigurationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServiceConfigurationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsRequestCallCount() int {
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsRequestMutex.RUnlock()
	return len(fake.describeVpcEndpointServiceConfigurationsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsRequestCalls(stub func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) (*request.Request, *ec2.DescribeVpcEndpointServiceConfigurationsOutput)) {
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsRequestArgsForCall(i int) *ec2.DescribeVpcEndpointServiceConfigurationsInput {
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServiceConfigurationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsRequestStub = nil
	fake.describeVpcEndpointServiceConfigurationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsRequestMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsRequestStub = nil
	if fake.describeVpcEndpointServiceConfigurationsRequestReturnsOnCall == nil {
		fake.describeVpcEndpointServiceConfigurationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		})
	}
	fake.describeVpcEndpointServiceConfigurationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, arg3 ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServiceConfigurationsWithContextReturnsOnCall[len(fake.describeVpcEndpointServiceConfigurationsWithContextArgsForCall)]
	fake.describeVpcEndpointServiceConfigurationsWithContextArgsForCall = append(fake.describeVpcEndpointServiceConfigurationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcEndpointServiceConfigurationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	if fake.DescribeVpcEndpointServiceConfigurationsWithContextStub != nil {
		return fake.DescribeVpcEndpointServiceConfigurationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServiceConfigurationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsWithContextCallCount() int {
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsWithContextMutex.RUnlock()
	return len(fake.describeVpcEndpointServiceConfigurationsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, ...request.Option) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)) {
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, []request.Option) {
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServiceConfigurationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsWithContextReturns(result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsWithContextStub = nil
	fake.describeVpcEndpointServiceConfigurationsWithContextReturns = struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsWithContextStub = nil
	if fake.describeVpcEndpointServiceConfigurationsWithContextReturnsOnCall == nil {
		fake.describeVpcEndpointServiceConfigurationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServiceConfigurationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissions(arg1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicePermissionsReturnsOnCall[len(fake.describeVpcEndpointServicePermissionsArgsForCall)]
	fake.describeVpcEndpointServicePermissionsArgsForCall = append(fake.describeVpcEndpointServicePermissionsArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointServicePermissions", []interface{}{arg1})
	fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	if fake.DescribeVpcEndpointServicePermissionsStub != nil {
		return fake.DescribeVpcEndpointServicePermissionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServicePermissionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsCallCount() int {
	fake.describeVpcEndpointServicePermissionsMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsMutex.RUnlock()
	return len(fake.describeVpcEndpointServicePermissionsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsCalls(stub func(*ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsArgsForCall(i int) *ec2.DescribeVpcEndpointServicePermissionsInput {
	fake.describeVpcEndpointServicePermissionsMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicePermissionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsReturns(result1 *ec2.DescribeVpcEndpointServicePermissionsOutput, result2 error) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsStub = nil
	fake.describeVpcEndpointServicePermissionsReturns = struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServicePermissionsOutput, result2 error) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsStub = nil
	if fake.describeVpcEndpointServicePermissionsReturnsOnCall == nil {
		fake.describeVpcEndpointServicePermissionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServicePermissionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsRequest(arg1 *ec2.DescribeVpcEndpointServicePermissionsInput) (*request.Request, *ec2.DescribeVpcEndpointServicePermissionsOutput) {
	fake.describeVpcEndpointServicePermissionsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicePermissionsRequestReturnsOnCall[len(fake.describeVpcEndpointServicePermissionsRequestArgsForCall)]
	fake.describeVpcEndpointServicePermissionsRequestArgsForCall = append(fake.describeVpcEndpointServicePermissionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointServicePermissionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointServicePermissionsRequest", []interface{}{arg1})
	fake.describeVpcEndpointServicePermissionsRequestMutex.Unlock()
	if fake.DescribeVpcEndpointServicePermissionsRequestStub != nil {
		return fake.DescribeVpcEndpointServicePermissionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServicePermissionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsRequestCallCount() int {
	fake.describeVpcEndpointServicePermissionsRequestMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsRequestMutex.RUnlock()
	return len(fake.describeVpcEndpointServicePermissionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsRequestCalls(stub func(*ec2.DescribeVpcEndpointServicePermissionsInput) (*request.Request, *ec2.DescribeVpcEndpointServicePermissionsOutput)) {
	fake.describeVpcEndpointServicePermissionsRequestMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsRequestMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsRequestArgsForCall(i int) *ec2.DescribeVpcEndpointServicePermissionsInput {
	fake.describeVpcEndpointServicePermissionsRequestMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicePermissionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcEndpointServicePermissionsOutput) {
	fake.describeVpcEndpointServicePermissionsRequestMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsRequestMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsRequestStub = nil
	fake.describeVpcEndpointServicePermissionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicePermissionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcEndpointServicePermissionsOutput) {
	fake.describeVpcEndpointServicePermissionsRequestMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsRequestMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsRequestStub = nil
	if fake.describeVpcEndpointServicePermissionsRequestReturnsOnCall == nil {
		fake.describeVpcEndpointServicePermissionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcEndpointServicePermissionsOutput
		})
	}
	fake.describeVpcEndpointServicePermissionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicePermissionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcEndpointServicePermissionsInput, arg3 ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	fake.describeVpcEndpointServicePermissionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicePermissionsWithContextReturnsOnCall[len(fake.describeVpcEndpointServicePermissionsWithContextArgsForCall)]
	fake.describeVpcEndpointServicePermissionsWithContextArgsForCall = append(fake.describeVpcEndpointServicePermissionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointServicePermissionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcEndpointServicePermissionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointServicePermissionsWithContextMutex.Unlock()
	if fake.DescribeVpcEndpointServicePermissionsWithContextStub != nil {
		return fake.DescribeVpcEndpointServicePermissionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServicePermissionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsWithContextCallCount() int {
	fake.describeVpcEndpointServicePermissionsWithContextMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsWithContextMutex.RUnlock()
	return len(fake.describeVpcEndpointServicePermissionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, ...request.Option) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)) {
	fake.describeVpcEndpointServicePermissionsWithContextMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, []request.Option) {
	fake.describeVpcEndpointServicePermissionsWithContextMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicePermissionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsWithContextReturns(result1 *ec2.DescribeVpcEndpointServicePermissionsOutput, result2 error) {
	fake.describeVpcEndpointServicePermissionsWithContextMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsWithContextStub = nil
	fake.describeVpcEndpointServicePermissionsWithContextReturns = struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServicePermissionsOutput, result2 error) {
	fake.describeVpcEndpointServicePermissionsWithContextMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsWithContextStub = nil
	if fake.describeVpcEndpointServicePermissionsWithContextReturnsOnCall == nil {
		fake.describeVpcEndpointServicePermissionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServicePermissionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServices(arg1 *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	fake.describeVpcEndpointServicesMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicesReturnsOnCall[len(fake.describeVpcEndpointServicesArgsForCall)]
	fake.describeVpcEndpointServicesArgsForCall = append(fake.describeVpcEndpointServicesArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointServicesInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointServices", []interface{}{arg1})
	fake.describeVpcEndpointServicesMutex.Unlock()
	if fake.DescribeVpcEndpointServicesStub != nil {
		return fake.DescribeVpcEndpointServicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesCallCount() int {
	fake.describeVpcEndpointServicesMutex.RLock()
	defer fake.describeVpcEndpointServicesMutex.RUnlock()
	return len(fake.describeVpcEndpointServicesArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesCalls(stub func(*ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error)) {
	fake.describeVpcEndpointServicesMutex.Lock()
	defer fake.describeVpcEndpointServicesMutex.Unlock()
	fake.DescribeVpcEndpointServicesStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesArgsForCall(i int) *ec2.DescribeVpcEndpointServicesInput {
	fake.describeVpcEndpointServicesMutex.RLock()
	defer fake.describeVpcEndpointServicesMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesReturns(result1 *ec2.DescribeVpcEndpointServicesOutput, result2 error) {
	fake.describeVpcEndpointServicesMutex.Lock()
	defer fake.describeVpcEndpointServicesMutex.Unlock()
	fake.DescribeVpcEndpointServicesStub = nil
	fake.describeVpcEndpointServicesReturns = struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServicesOutput, result2 error) {
	fake.describeVpcEndpointServicesMutex.Lock()
	defer fake.describeVpcEndpointServicesMutex.Unlock()
	fake.DescribeVpcEndpointServicesStub = nil
	if fake.describeVpcEndpointServicesReturnsOnCall == nil {
		fake.describeVpcEndpointServicesReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServicesOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServicesReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesRequest(arg1 *ec2.DescribeVpcEndpointServicesInput) (*request.Request, *ec2.DescribeVpcEndpointServicesOutput) {
	fake.describeVpcEndpointServicesRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicesRequestReturnsOnCall[len(fake.describeVpcEndpointServicesRequestArgsForCall)]
	fake.describeVpcEndpointServicesRequestArgsForCall = append(fake.describeVpcEndpointServicesRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointServicesInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointServicesRequest", []interface{}{arg1})
	fake.describeVpcEndpointServicesRequestMutex.Unlock()
	if fake.DescribeVpcEndpointServicesRequestStub != nil {
		return fake.DescribeVpcEndpointServicesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServicesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesRequestCallCount() int {
	fake.describeVpcEndpointServicesRequestMutex.RLock()
	defer fake.describeVpcEndpointServicesRequestMutex.RUnlock()
	return len(fake.describeVpcEndpointServicesRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesRequestCalls(stub func(*ec2.DescribeVpcEndpointServicesInput) (*request.Request, *ec2.DescribeVpcEndpointServicesOutput)) {
	fake.describeVpcEndpointServicesRequestMutex.Lock()
	defer fake.describeVpcEndpointServicesRequestMutex.Unlock()
	fake.DescribeVpcEndpointServicesRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesRequestArgsForCall(i int) *ec2.DescribeVpcEndpointServicesInput {
	fake.describeVpcEndpointServicesRequestMutex.RLock()
	defer fake.describeVpcEndpointServicesRequestMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcEndpointServicesOutput) {
	fake.describeVpcEndpointServicesRequestMutex.Lock()
	defer fake.describeVpcEndpointServicesRequestMutex.Unlock()
	fake.DescribeVpcEndpointServicesRequestStub = nil
	fake.describeVpcEndpointServicesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcEndpointServicesOutput) {
	fake.describeVpcEndpointServicesRequestMutex.Lock()
	defer fake.describeVpcEndpointServicesRequestMutex.Unlock()
	fake.DescribeVpcEndpointServicesRequestStub = nil
	if fake.describeVpcEndpointServicesRequestReturnsOnCall == nil {
		fake.describeVpcEndpointServicesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcEndpointServicesOutput
		})
	}
	fake.describeVpcEndpointServicesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointServicesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcEndpointServicesInput, arg3 ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	fake.describeVpcEndpointServicesWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicesWithContextReturnsOnCall[len(fake.describeVpcEndpointServicesWithContextArgsForCall)]
	fake.describeVpcEndpointServicesWithContextArgsForCall = append(fake.describeVpcEndpointServicesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointServicesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcEndpointServicesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointServicesWithContextMutex.Unlock()
	if fake.DescribeVpcEndpointServicesWithContextStub != nil {
		return fake.DescribeVpcEndpointServicesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointServicesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesWithContextCallCount() int {
	fake.describeVpcEndpointServicesWithContextMutex.RLock()
	defer fake.describeVpcEndpointServicesWithContextMutex.RUnlock()
	return len(fake.describeVpcEndpointServicesWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcEndpointServicesInput, ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error)) {
	fake.describeVpcEndpointServicesWithContextMutex.Lock()
	defer fake.describeVpcEndpointServicesWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServicesWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcEndpointServicesInput, []request.Option) {
	fake.describeVpcEndpointServicesWithContextMutex.RLock()
	defer fake.describeVpcEndpointServicesWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesWithContextReturns(result1 *ec2.DescribeVpcEndpointServicesOutput, result2 error) {
	fake.describeVpcEndpointServicesWithContextMutex.Lock()
	defer fake.describeVpcEndpointServicesWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServicesWithContextStub = nil
	fake.describeVpcEndpointServicesWithContextReturns = struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicesWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServicesOutput, result2 error) {
	fake.describeVpcEndpointServicesWithContextMutex.Lock()
	defer fake.describeVpcEndpointServicesWithContextMutex.Unlock()
	fake.DescribeVpcEndpointServicesWithContextStub = nil
	if fake.describeVpcEndpointServicesWithContextReturnsOnCall == nil {
		fake.describeVpcEndpointServicesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServicesOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServicesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpoints(arg1 *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
	fake.describeVpcEndpointsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointsReturnsOnCall[len(fake.describeVpcEndpointsArgsForCall)]
	fake.describeVpcEndpointsArgsForCall = append(fake.describeVpcEndpointsArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpoints", []interface{}{arg1})
	fake.describeVpcEndpointsMutex.Unlock()
	if fake.DescribeVpcEndpointsStub != nil {
		return fake.DescribeVpcEndpointsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointsCallCount() int {
	fake.describeVpcEndpointsMutex.RLock()
	defer fake.describeVpcEndpointsMutex.RUnlock()
	return len(fake.describeVpcEndpointsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointsCalls(stub func(*ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error)) {
	fake.describeVpcEndpointsMutex.Lock()
	defer fake.describeVpcEndpointsMutex.Unlock()
	fake.DescribeVpcEndpointsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointsArgsForCall(i int) *ec2.DescribeVpcEndpointsInput {
	fake.describeVpcEndpointsMutex.RLock()
	defer fake.describeVpcEndpointsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointsReturns(result1 *ec2.DescribeVpcEndpointsOutput, result2 error) {
	fake.describeVpcEndpointsMutex.Lock()
	defer fake.describeVpcEndpointsMutex.Unlock()
	fake.DescribeVpcEndpointsStub = nil
	fake.describeVpcEndpointsReturns = struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointsOutput, result2 error) {
	fake.describeVpcEndpointsMutex.Lock()
	defer fake.describeVpcEndpointsMutex.Unlock()
	fake.DescribeVpcEndpointsStub = nil
	if fake.describeVpcEndpointsReturnsOnCall == nil {
		fake.describeVpcEndpointsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointsRequest(arg1 *ec2.DescribeVpcEndpointsInput) (*request.Request, *ec2.DescribeVpcEndpointsOutput) {
	fake.describeVpcEndpointsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointsRequestReturnsOnCall[len(fake.describeVpcEndpointsRequestArgsForCall)]
	fake.describeVpcEndpointsRequestArgsForCall = append(fake.describeVpcEndpointsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcEndpointsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcEndpointsRequest", []interface{}{arg1})
	fake.describeVpcEndpointsRequestMutex.Unlock()
	if fake.DescribeVpcEndpointsRequestStub != nil {
		return fake.DescribeVpcEndpointsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointsRequestCallCount() int {
	fake.describeVpcEndpointsRequestMutex.RLock()
	defer fake.describeVpcEndpointsRequestMutex.RUnlock()
	return len(fake.describeVpcEndpointsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointsRequestCalls(stub func(*ec2.DescribeVpcEndpointsInput) (*request.Request, *ec2.DescribeVpcEndpointsOutput)) {
	fake.describeVpcEndpointsRequestMutex.Lock()
	defer fake.describeVpcEndpointsRequestMutex.Unlock()
	fake.DescribeVpcEndpointsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointsRequestArgsForCall(i int) *ec2.DescribeVpcEndpointsInput {
	fake.describeVpcEndpointsRequestMutex.RLock()
	defer fake.describeVpcEndpointsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcEndpointsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcEndpointsOutput) {
	fake.describeVpcEndpointsRequestMutex.Lock()
	defer fake.describeVpcEndpointsRequestMutex.Unlock()
	fake.DescribeVpcEndpointsRequestStub = nil
	fake.describeVpcEndpointsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcEndpointsOutput) {
	fake.describeVpcEndpointsRequestMutex.Lock()
	defer fake.describeVpcEndpointsRequestMutex.Unlock()
	fake.DescribeVpcEndpointsRequestStub = nil
	if fake.describeVpcEndpointsRequestReturnsOnCall == nil {
		fake.describeVpcEndpointsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcEndpointsOutput
		})
	}
	fake.describeVpcEndpointsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcEndpointsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcEndpointsInput, arg3 ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error) {
	fake.describeVpcEndpointsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointsWithContextReturnsOnCall[len(fake.describeVpcEndpointsWithContextArgsForCall)]
	fake.describeVpcEndpointsWithContextArgsForCall = append(fake.describeVpcEndpointsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcEndpointsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcEndpointsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointsWithContextMutex.Unlock()
	if fake.DescribeVpcEndpointsWithContextStub != nil {
		return fake.DescribeVpcEndpointsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcEndpointsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointsWithContextCallCount() int {
	fake.describeVpcEndpointsWithContextMutex.RLock()
	defer fake.describeVpcEndpointsWithContextMutex.RUnlock()
	return len(fake.describeVpcEndpointsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcEndpointsInput, ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error)) {
	fake.describeVpcEndpointsWithContextMutex.Lock()
	defer fake.describeVpcEndpointsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcEndpointsInput, []request.Option) {
	fake.describeVpcEndpointsWithContextMutex.RLock()
	defer fake.describeVpcEndpointsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointsWithContextReturns(result1 *ec2.DescribeVpcEndpointsOutput, result2 error) {
	fake.describeVpcEndpointsWithContextMutex.Lock()
	defer fake.describeVpcEndpointsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointsWithContextStub = nil
	fake.describeVpcEndpointsWithContextReturns = struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointsOutput, result2 error) {
	fake.describeVpcEndpointsWithContextMutex.Lock()
	defer fake.describeVpcEndpointsWithContextMutex.Unlock()
	fake.DescribeVpcEndpointsWithContextStub = nil
	if fake.describeVpcEndpointsWithContextReturnsOnCall == nil {
		fake.describeVpcEndpointsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcPeeringConnections(arg1 *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	fake.describeVpcPeeringConnectionsMutex.Lock()
	ret, specificReturn := fake.describeVpcPeeringConnectionsReturnsOnCall[len(fake.describeVpcPeeringConnectionsArgsForCall)]
	fake.describeVpcPeeringConnectionsArgsForCall = append(fake.describeVpcPeeringConnectionsArgsForCall, struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcPeeringConnections", []interface{}{arg1})
	fake.describeVpcPeeringConnectionsMutex.Unlock()
	if fake.DescribeVpcPeeringConnectionsStub != nil {
		return fake.DescribeVpcPeeringConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcPeeringConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsCallCount() int {
	fake.describeVpcPeeringConnectionsMutex.RLock()
	defer fake.describeVpcPeeringConnectionsMutex.RUnlock()
	return len(fake.describeVpcPeeringConnectionsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsCalls(stub func(*ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error)) {
	fake.describeVpcPeeringConnectionsMutex.Lock()
	defer fake.describeVpcPeeringConnectionsMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsStub = stub
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsArgsForCall(i int) *ec2.DescribeVpcPeeringConnectionsInput {
	fake.describeVpcPeeringConnectionsMutex.RLock()
	defer fake.describeVpcPeeringConnectionsMutex.RUnlock()
	argsForCall := fake.describeVpcPeeringConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsReturns(result1 *ec2.DescribeVpcPeeringConnectionsOutput, result2 error) {
	fake.describeVpcPeeringConnectionsMutex.Lock()
	defer fake.describeVpcPeeringConnectionsMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsStub = nil
	fake.describeVpcPeeringConnectionsReturns = struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsReturnsOnCall(i int, result1 *ec2.DescribeVpcPeeringConnectionsOutput, result2 error) {
	fake.describeVpcPeeringConnectionsMutex.Lock()
	defer fake.describeVpcPeeringConnectionsMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsStub = nil
	if fake.describeVpcPeeringConnectionsReturnsOnCall == nil {
		fake.describeVpcPeeringConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcPeeringConnectionsOutput
			result2 error
		})
	}
	fake.describeVpcPeeringConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsRequest(arg1 *ec2.DescribeVpcPeeringConnectionsInput) (*request.Request, *ec2.DescribeVpcPeeringConnectionsOutput) {
	fake.describeVpcPeeringConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcPeeringConnectionsRequestReturnsOnCall[len(fake.describeVpcPeeringConnectionsRequestArgsForCall)]
	fake.describeVpcPeeringConnectionsRequestArgsForCall = append(fake.describeVpcPeeringConnectionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcPeeringConnectionsRequest", []interface{}{arg1})
	fake.describeVpcPeeringConnectionsRequestMutex.Unlock()
	if fake.DescribeVpcPeeringConnectionsRequestStub != nil {
		return fake.DescribeVpcPeeringConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcPeeringConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsRequestCallCount() int {
	fake.describeVpcPeeringConnectionsRequestMutex.RLock()
	defer fake.describeVpcPeeringConnectionsRequestMutex.RUnlock()
	return len(fake.describeVpcPeeringConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsRequestCalls(stub func(*ec2.DescribeVpcPeeringConnectionsInput) (*request.Request, *ec2.DescribeVpcPeeringConnectionsOutput)) {
	fake.describeVpcPeeringConnectionsRequestMutex.Lock()
	defer fake.describeVpcPeeringConnectionsRequestMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsRequestArgsForCall(i int) *ec2.DescribeVpcPeeringConnectionsInput {
	fake.describeVpcPeeringConnectionsRequestMutex.RLock()
	defer fake.describeVpcPeeringConnectionsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcPeeringConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcPeeringConnectionsOutput) {
	fake.describeVpcPeeringConnectionsRequestMutex.Lock()
	defer fake.describeVpcPeeringConnectionsRequestMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsRequestStub = nil
	fake.describeVpcPeeringConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcPeeringConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcPeeringConnectionsOutput) {
	fake.describeVpcPeeringConnectionsRequestMutex.Lock()
	defer fake.describeVpcPeeringConnectionsRequestMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsRequestStub = nil
	if fake.describeVpcPeeringConnectionsRequestReturnsOnCall == nil {
		fake.describeVpcPeeringConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcPeeringConnectionsOutput
		})
	}
	fake.describeVpcPeeringConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcPeeringConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcPeeringConnectionsInput, arg3 ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	fake.describeVpcPeeringConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcPeeringConnectionsWithContextReturnsOnCall[len(fake.describeVpcPeeringConnectionsWithContextArgsForCall)]
	fake.describeVpcPeeringConnectionsWithContextArgsForCall = append(fake.describeVpcPeeringConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcPeeringConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcPeeringConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcPeeringConnectionsWithContextMutex.Unlock()
	if fake.DescribeVpcPeeringConnectionsWithContextStub != nil {
		return fake.DescribeVpcPeeringConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcPeeringConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsWithContextCallCount() int {
	fake.describeVpcPeeringConnectionsWithContextMutex.RLock()
	defer fake.describeVpcPeeringConnectionsWithContextMutex.RUnlock()
	return len(fake.describeVpcPeeringConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error)) {
	fake.describeVpcPeeringConnectionsWithContextMutex.Lock()
	defer fake.describeVpcPeeringConnectionsWithContextMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, []request.Option) {
	fake.describeVpcPeeringConnectionsWithContextMutex.RLock()
	defer fake.describeVpcPeeringConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcPeeringConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsWithContextReturns(result1 *ec2.DescribeVpcPeeringConnectionsOutput, result2 error) {
	fake.describeVpcPeeringConnectionsWithContextMutex.Lock()
	defer fake.describeVpcPeeringConnectionsWithContextMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsWithContextStub = nil
	fake.describeVpcPeeringConnectionsWithContextReturns = struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcPeeringConnectionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcPeeringConnectionsOutput, result2 error) {
	fake.describeVpcPeeringConnectionsWithContextMutex.Lock()
	defer fake.describeVpcPeeringConnectionsWithContextMutex.Unlock()
	fake.DescribeVpcPeeringConnectionsWithContextStub = nil
	if fake.describeVpcPeeringConnectionsWithContextReturnsOnCall == nil {
		fake.describeVpcPeeringConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcPeeringConnectionsOutput
			result2 error
		})
	}
	fake.describeVpcPeeringConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcPeeringConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcs(arg1 *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	fake.describeVpcsMutex.Lock()
	ret, specificReturn := fake.describeVpcsReturnsOnCall[len(fake.describeVpcsArgsForCall)]
	fake.describeVpcsArgsForCall = append(fake.describeVpcsArgsForCall, struct {
		arg1 *ec2.DescribeVpcsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcs", []interface{}{arg1})
	fake.describeVpcsMutex.Unlock()
	if fake.DescribeVpcsStub != nil {
		return fake.DescribeVpcsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcsCallCount() int {
	fake.describeVpcsMutex.RLock()
	defer fake.describeVpcsMutex.RUnlock()
	return len(fake.describeVpcsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcsCalls(stub func(*ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error)) {
	fake.describeVpcsMutex.Lock()
	defer fake.describeVpcsMutex.Unlock()
	fake.DescribeVpcsStub = stub
}

func (fake *FakeEC2API) DescribeVpcsArgsForCall(i int) *ec2.DescribeVpcsInput {
	fake.describeVpcsMutex.RLock()
	defer fake.describeVpcsMutex.RUnlock()
	argsForCall := fake.describeVpcsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcsReturns(result1 *ec2.DescribeVpcsOutput, result2 error) {
	fake.describeVpcsMutex.Lock()
	defer fake.describeVpcsMutex.Unlock()
	fake.DescribeVpcsStub = nil
	fake.describeVpcsReturns = struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcsReturnsOnCall(i int, result1 *ec2.DescribeVpcsOutput, result2 error) {
	fake.describeVpcsMutex.Lock()
	defer fake.describeVpcsMutex.Unlock()
	fake.DescribeVpcsStub = nil
	if fake.describeVpcsReturnsOnCall == nil {
		fake.describeVpcsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcsOutput
			result2 error
		})
	}
	fake.describeVpcsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcsRequest(arg1 *ec2.DescribeVpcsInput) (*request.Request, *ec2.DescribeVpcsOutput) {
	fake.describeVpcsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpcsRequestReturnsOnCall[len(fake.describeVpcsRequestArgsForCall)]
	fake.describeVpcsRequestArgsForCall = append(fake.describeVpcsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpcsInput
	}{arg1})
	fake.recordInvocation("DescribeVpcsRequest", []interface{}{arg1})
	fake.describeVpcsRequestMutex.Unlock()
	if fake.DescribeVpcsRequestStub != nil {
		return fake.DescribeVpcsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcsRequestCallCount() int {
	fake.describeVpcsRequestMutex.RLock()
	defer fake.describeVpcsRequestMutex.RUnlock()
	return len(fake.describeVpcsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcsRequestCalls(stub func(*ec2.DescribeVpcsInput) (*request.Request, *ec2.DescribeVpcsOutput)) {
	fake.describeVpcsRequestMutex.Lock()
	defer fake.describeVpcsRequestMutex.Unlock()
	fake.DescribeVpcsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpcsRequestArgsForCall(i int) *ec2.DescribeVpcsInput {
	fake.describeVpcsRequestMutex.RLock()
	defer fake.describeVpcsRequestMutex.RUnlock()
	argsForCall := fake.describeVpcsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpcsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpcsOutput) {
	fake.describeVpcsRequestMutex.Lock()
	defer fake.describeVpcsRequestMutex.Unlock()
	fake.DescribeVpcsRequestStub = nil
	fake.describeVpcsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpcsOutput) {
	fake.describeVpcsRequestMutex.Lock()
	defer fake.describeVpcsRequestMutex.Unlock()
	fake.DescribeVpcsRequestStub = nil
	if fake.describeVpcsRequestReturnsOnCall == nil {
		fake.describeVpcsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpcsOutput
		})
	}
	fake.describeVpcsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpcsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcsInput, arg3 ...request.Option) (*ec2.DescribeVpcsOutput, error) {
	fake.describeVpcsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpcsWithContextReturnsOnCall[len(fake.describeVpcsWithContextArgsForCall)]
	fake.describeVpcsWithContextArgsForCall = append(fake.describeVpcsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpcsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpcsWithContextMutex.Unlock()
	if fake.DescribeVpcsWithContextStub != nil {
		return fake.DescribeVpcsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpcsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcsWithContextCallCount() int {
	fake.describeVpcsWithContextMutex.RLock()
	defer fake.describeVpcsWithContextMutex.RUnlock()
	return len(fake.describeVpcsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcsInput, ...request.Option) (*ec2.DescribeVpcsOutput, error)) {
	fake.describeVpcsWithContextMutex.Lock()
	defer fake.describeVpcsWithContextMutex.Unlock()
	fake.DescribeVpcsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpcsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcsInput, []request.Option) {
	fake.describeVpcsWithContextMutex.RLock()
	defer fake.describeVpcsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpcsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcsWithContextReturns(result1 *ec2.DescribeVpcsOutput, result2 error) {
	fake.describeVpcsWithContextMutex.Lock()
	defer fake.describeVpcsWithContextMutex.Unlock()
	fake.DescribeVpcsWithContextStub = nil
	fake.describeVpcsWithContextReturns = struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpcsOutput, result2 error) {
	fake.describeVpcsWithContextMutex.Lock()
	defer fake.describeVpcsWithContextMutex.Unlock()
	fake.DescribeVpcsWithContextStub = nil
	if fake.describeVpcsWithContextReturnsOnCall == nil {
		fake.describeVpcsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcsOutput
			result2 error
		})
	}
	fake.describeVpcsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnConnections(arg1 *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
	fake.describeVpnConnectionsMutex.Lock()
	ret, specificReturn := fake.describeVpnConnectionsReturnsOnCall[len(fake.describeVpnConnectionsArgsForCall)]
	fake.describeVpnConnectionsArgsForCall = append(fake.describeVpnConnectionsArgsForCall, struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpnConnections", []interface{}{arg1})
	fake.describeVpnConnectionsMutex.Unlock()
	if fake.DescribeVpnConnectionsStub != nil {
		return fake.DescribeVpnConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpnConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpnConnectionsCallCount() int {
	fake.describeVpnConnectionsMutex.RLock()
	defer fake.describeVpnConnectionsMutex.RUnlock()
	return len(fake.describeVpnConnectionsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpnConnectionsCalls(stub func(*ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error)) {
	fake.describeVpnConnectionsMutex.Lock()
	defer fake.describeVpnConnectionsMutex.Unlock()
	fake.DescribeVpnConnectionsStub = stub
}

func (fake *FakeEC2API) DescribeVpnConnectionsArgsForCall(i int) *ec2.DescribeVpnConnectionsInput {
	fake.describeVpnConnectionsMutex.RLock()
	defer fake.describeVpnConnectionsMutex.RUnlock()
	argsForCall := fake.describeVpnConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpnConnectionsReturns(result1 *ec2.DescribeVpnConnectionsOutput, result2 error) {
	fake.describeVpnConnectionsMutex.Lock()
	defer fake.describeVpnConnectionsMutex.Unlock()
	fake.DescribeVpnConnectionsStub = nil
	fake.describeVpnConnectionsReturns = struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnConnectionsReturnsOnCall(i int, result1 *ec2.DescribeVpnConnectionsOutput, result2 error) {
	fake.describeVpnConnectionsMutex.Lock()
	defer fake.describeVpnConnectionsMutex.Unlock()
	fake.DescribeVpnConnectionsStub = nil
	if fake.describeVpnConnectionsReturnsOnCall == nil {
		fake.describeVpnConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpnConnectionsOutput
			result2 error
		})
	}
	fake.describeVpnConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnConnectionsRequest(arg1 *ec2.DescribeVpnConnectionsInput) (*request.Request, *ec2.DescribeVpnConnectionsOutput) {
	fake.describeVpnConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.describeVpnConnectionsRequestReturnsOnCall[len(fake.describeVpnConnectionsRequestArgsForCall)]
	fake.describeVpnConnectionsRequestArgsForCall = append(fake.describeVpnConnectionsRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("DescribeVpnConnectionsRequest", []interface{}{arg1})
	fake.describeVpnConnectionsRequestMutex.Unlock()
	if fake.DescribeVpnConnectionsRequestStub != nil {
		return fake.DescribeVpnConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpnConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpnConnectionsRequestCallCount() int {
	fake.describeVpnConnectionsRequestMutex.RLock()
	defer fake.describeVpnConnectionsRequestMutex.RUnlock()
	return len(fake.describeVpnConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpnConnectionsRequestCalls(stub func(*ec2.DescribeVpnConnectionsInput) (*request.Request, *ec2.DescribeVpnConnectionsOutput)) {
	fake.describeVpnConnectionsRequestMutex.Lock()
	defer fake.describeVpnConnectionsRequestMutex.Unlock()
	fake.DescribeVpnConnectionsRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpnConnectionsRequestArgsForCall(i int) *ec2.DescribeVpnConnectionsInput {
	fake.describeVpnConnectionsRequestMutex.RLock()
	defer fake.describeVpnConnectionsRequestMutex.RUnlock()
	argsForCall := fake.describeVpnConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpnConnectionsRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpnConnectionsOutput) {
	fake.describeVpnConnectionsRequestMutex.Lock()
	defer fake.describeVpnConnectionsRequestMutex.Unlock()
	fake.DescribeVpnConnectionsRequestStub = nil
	fake.describeVpnConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpnConnectionsOutput) {
	fake.describeVpnConnectionsRequestMutex.Lock()
	defer fake.describeVpnConnectionsRequestMutex.Unlock()
	fake.DescribeVpnConnectionsRequestStub = nil
	if fake.describeVpnConnectionsRequestReturnsOnCall == nil {
		fake.describeVpnConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpnConnectionsOutput
		})
	}
	fake.describeVpnConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnConnectionsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpnConnectionsInput, arg3 ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error) {
	fake.describeVpnConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpnConnectionsWithContextReturnsOnCall[len(fake.describeVpnConnectionsWithContextArgsForCall)]
	fake.describeVpnConnectionsWithContextArgsForCall = append(fake.describeVpnConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpnConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpnConnectionsWithContextMutex.Unlock()
	if fake.DescribeVpnConnectionsWithContextStub != nil {
		return fake.DescribeVpnConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpnConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpnConnectionsWithContextCallCount() int {
	fake.describeVpnConnectionsWithContextMutex.RLock()
	defer fake.describeVpnConnectionsWithContextMutex.RUnlock()
	return len(fake.describeVpnConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpnConnectionsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpnConnectionsInput, ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error)) {
	fake.describeVpnConnectionsWithContextMutex.Lock()
	defer fake.describeVpnConnectionsWithContextMutex.Unlock()
	fake.DescribeVpnConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpnConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpnConnectionsInput, []request.Option) {
	fake.describeVpnConnectionsWithContextMutex.RLock()
	defer fake.describeVpnConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.describeVpnConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpnConnectionsWithContextReturns(result1 *ec2.DescribeVpnConnectionsOutput, result2 error) {
	fake.describeVpnConnectionsWithContextMutex.Lock()
	defer fake.describeVpnConnectionsWithContextMutex.Unlock()
	fake.DescribeVpnConnectionsWithContextStub = nil
	fake.describeVpnConnectionsWithContextReturns = struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnConnectionsWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpnConnectionsOutput, result2 error) {
	fake.describeVpnConnectionsWithContextMutex.Lock()
	defer fake.describeVpnConnectionsWithContextMutex.Unlock()
	fake.DescribeVpnConnectionsWithContextStub = nil
	if fake.describeVpnConnectionsWithContextReturnsOnCall == nil {
		fake.describeVpnConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpnConnectionsOutput
			result2 error
		})
	}
	fake.describeVpnConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnGateways(arg1 *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
	fake.describeVpnGatewaysMutex.Lock()
	ret, specificReturn := fake.describeVpnGatewaysReturnsOnCall[len(fake.describeVpnGatewaysArgsForCall)]
	fake.describeVpnGatewaysArgsForCall = append(fake.describeVpnGatewaysArgsForCall, struct {
		arg1 *ec2.DescribeVpnGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeVpnGateways", []interface{}{arg1})
	fake.describeVpnGatewaysMutex.Unlock()
	if fake.DescribeVpnGatewaysStub != nil {
		return fake.DescribeVpnGatewaysStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpnGatewaysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpnGatewaysCallCount() int {
	fake.describeVpnGatewaysMutex.RLock()
	defer fake.describeVpnGatewaysMutex.RUnlock()
	return len(fake.describeVpnGatewaysArgsForCall)
}

func (fake *FakeEC2API) DescribeVpnGatewaysCalls(stub func(*ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error)) {
	fake.describeVpnGatewaysMutex.Lock()
	defer fake.describeVpnGatewaysMutex.Unlock()
	fake.DescribeVpnGatewaysStub = stub
}

func (fake *FakeEC2API) DescribeVpnGatewaysArgsForCall(i int) *ec2.DescribeVpnGatewaysInput {
	fake.describeVpnGatewaysMutex.RLock()
	defer fake.describeVpnGatewaysMutex.RUnlock()
	argsForCall := fake.describeVpnGatewaysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpnGatewaysReturns(result1 *ec2.DescribeVpnGatewaysOutput, result2 error) {
	fake.describeVpnGatewaysMutex.Lock()
	defer fake.describeVpnGatewaysMutex.Unlock()
	fake.DescribeVpnGatewaysStub = nil
	fake.describeVpnGatewaysReturns = struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnGatewaysReturnsOnCall(i int, result1 *ec2.DescribeVpnGatewaysOutput, result2 error) {
	fake.describeVpnGatewaysMutex.Lock()
	defer fake.describeVpnGatewaysMutex.Unlock()
	fake.DescribeVpnGatewaysStub = nil
	if fake.describeVpnGatewaysReturnsOnCall == nil {
		fake.describeVpnGatewaysReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpnGatewaysOutput
			result2 error
		})
	}
	fake.describeVpnGatewaysReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnGatewaysRequest(arg1 *ec2.DescribeVpnGatewaysInput) (*request.Request, *ec2.DescribeVpnGatewaysOutput) {
	fake.describeVpnGatewaysRequestMutex.Lock()
	ret, specificReturn := fake.describeVpnGatewaysRequestReturnsOnCall[len(fake.describeVpnGatewaysRequestArgsForCall)]
	fake.describeVpnGatewaysRequestArgsForCall = append(fake.describeVpnGatewaysRequestArgsForCall, struct {
		arg1 *ec2.DescribeVpnGatewaysInput
	}{arg1})
	fake.recordInvocation("DescribeVpnGatewaysRequest", []interface{}{arg1})
	fake.describeVpnGatewaysRequestMutex.Unlock()
	if fake.DescribeVpnGatewaysRequestStub != nil {
		return fake.DescribeVpnGatewaysRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpnGatewaysRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpnGatewaysRequestCallCount() int {
	fake.describeVpnGatewaysRequestMutex.RLock()
	defer fake.describeVpnGatewaysRequestMutex.RUnlock()
	return len(fake.describeVpnGatewaysRequestArgsForCall)
}

func (fake *FakeEC2API) DescribeVpnGatewaysRequestCalls(stub func(*ec2.DescribeVpnGatewaysInput) (*request.Request, *ec2.DescribeVpnGatewaysOutput)) {
	fake.describeVpnGatewaysRequestMutex.Lock()
	defer fake.describeVpnGatewaysRequestMutex.Unlock()
	fake.DescribeVpnGatewaysRequestStub = stub
}

func (fake *FakeEC2API) DescribeVpnGatewaysRequestArgsForCall(i int) *ec2.DescribeVpnGatewaysInput {
	fake.describeVpnGatewaysRequestMutex.RLock()
	defer fake.describeVpnGatewaysRequestMutex.RUnlock()
	argsForCall := fake.describeVpnGatewaysRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DescribeVpnGatewaysRequestReturns(result1 *request.Request, result2 *ec2.DescribeVpnGatewaysOutput) {
	fake.describeVpnGatewaysRequestMutex.Lock()
	defer fake.describeVpnGatewaysRequestMutex.Unlock()
	fake.DescribeVpnGatewaysRequestStub = nil
	fake.describeVpnGatewaysRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnGatewaysRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DescribeVpnGatewaysOutput) {
	fake.describeVpnGatewaysRequestMutex.Lock()
	defer fake.describeVpnGatewaysRequestMutex.Unlock()
	fake.DescribeVpnGatewaysRequestStub = nil
	if fake.describeVpnGatewaysRequestReturnsOnCall == nil {
		fake.describeVpnGatewaysRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DescribeVpnGatewaysOutput
		})
	}
	fake.describeVpnGatewaysRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DescribeVpnGatewaysOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnGatewaysWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpnGatewaysInput, arg3 ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error) {
	fake.describeVpnGatewaysWithContextMutex.Lock()
	ret, specificReturn := fake.describeVpnGatewaysWithContextReturnsOnCall[len(fake.describeVpnGatewaysWithContextArgsForCall)]
	fake.describeVpnGatewaysWithContextArgsForCall = append(fake.describeVpnGatewaysWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnGatewaysInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeVpnGatewaysWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeVpnGatewaysWithContextMutex.Unlock()
	if fake.DescribeVpnGatewaysWithContextStub != nil {
		return fake.DescribeVpnGatewaysWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeVpnGatewaysWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpnGatewaysWithContextCallCount() int {
	fake.describeVpnGatewaysWithContextMutex.RLock()
	defer fake.describeVpnGatewaysWithContextMutex.RUnlock()
	return len(fake.describeVpnGatewaysWithContextArgsForCall)
}

func (fake *FakeEC2API) DescribeVpnGatewaysWithContextCalls(stub func(aws.Context, *ec2.DescribeVpnGatewaysInput, ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error)) {
	fake.describeVpnGatewaysWithContextMutex.Lock()
	defer fake.describeVpnGatewaysWithContextMutex.Unlock()
	fake.DescribeVpnGatewaysWithContextStub = stub
}

func (fake *FakeEC2API) DescribeVpnGatewaysWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpnGatewaysInput, []request.Option) {
	fake.describeVpnGatewaysWithContextMutex.RLock()
	defer fake.describeVpnGatewaysWithContextMutex.RUnlock()
	argsForCall := fake.describeVpnGatewaysWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpnGatewaysWithContextReturns(result1 *ec2.DescribeVpnGatewaysOutput, result2 error) {
	fake.describeVpnGatewaysWithContextMutex.Lock()
	defer fake.describeVpnGatewaysWithContextMutex.Unlock()
	fake.DescribeVpnGatewaysWithContextStub = nil
	fake.describeVpnGatewaysWithContextReturns = struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpnGatewaysWithContextReturnsOnCall(i int, result1 *ec2.DescribeVpnGatewaysOutput, result2 error) {
	fake.describeVpnGatewaysWithContextMutex.Lock()
	defer fake.describeVpnGatewaysWithContextMutex.Unlock()
	fake.DescribeVpnGatewaysWithContextStub = nil
	if fake.describeVpnGatewaysWithContextReturnsOnCall == nil {
		fake.describeVpnGatewaysWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpnGatewaysOutput
			result2 error
		})
	}
	fake.describeVpnGatewaysWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpnGatewaysOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachClassicLinkVpc(arg1 *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
	fake.detachClassicLinkVpcMutex.Lock()
	ret, specificReturn := fake.detachClassicLinkVpcReturnsOnCall[len(fake.detachClassicLinkVpcArgsForCall)]
	fake.detachClassicLinkVpcArgsForCall = append(fake.detachClassicLinkVpcArgsForCall, struct {
		arg1 *ec2.DetachClassicLinkVpcInput
	}{arg1})
	fake.recordInvocation("DetachClassicLinkVpc", []interface{}{arg1})
	fake.detachClassicLinkVpcMutex.Unlock()
	if fake.DetachClassicLinkVpcStub != nil {
		return fake.DetachClassicLinkVpcStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachClassicLinkVpcReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachClassicLinkVpcCallCount() int {
	fake.detachClassicLinkVpcMutex.RLock()
	defer fake.detachClassicLinkVpcMutex.RUnlock()
	return len(fake.detachClassicLinkVpcArgsForCall)
}

func (fake *FakeEC2API) DetachClassicLinkVpcCalls(stub func(*ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error)) {
	fake.detachClassicLinkVpcMutex.Lock()
	defer fake.detachClassicLinkVpcMutex.Unlock()
	fake.DetachClassicLinkVpcStub = stub
}

func (fake *FakeEC2API) DetachClassicLinkVpcArgsForCall(i int) *ec2.DetachClassicLinkVpcInput {
	fake.detachClassicLinkVpcMutex.RLock()
	defer fake.detachClassicLinkVpcMutex.RUnlock()
	argsForCall := fake.detachClassicLinkVpcArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachClassicLinkVpcReturns(result1 *ec2.DetachClassicLinkVpcOutput, result2 error) {
	fake.detachClassicLinkVpcMutex.Lock()
	defer fake.detachClassicLinkVpcMutex.Unlock()
	fake.DetachClassicLinkVpcStub = nil
	fake.detachClassicLinkVpcReturns = struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachClassicLinkVpcReturnsOnCall(i int, result1 *ec2.DetachClassicLinkVpcOutput, result2 error) {
	fake.detachClassicLinkVpcMutex.Lock()
	defer fake.detachClassicLinkVpcMutex.Unlock()
	fake.DetachClassicLinkVpcStub = nil
	if fake.detachClassicLinkVpcReturnsOnCall == nil {
		fake.detachClassicLinkVpcReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachClassicLinkVpcOutput
			result2 error
		})
	}
	fake.detachClassicLinkVpcReturnsOnCall[i] = struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachClassicLinkVpcRequest(arg1 *ec2.DetachClassicLinkVpcInput) (*request.Request, *ec2.DetachClassicLinkVpcOutput) {
	fake.detachClassicLinkVpcRequestMutex.Lock()
	ret, specificReturn := fake.detachClassicLinkVpcRequestReturnsOnCall[len(fake.detachClassicLinkVpcRequestArgsForCall)]
	fake.detachClassicLinkVpcRequestArgsForCall = append(fake.detachClassicLinkVpcRequestArgsForCall, struct {
		arg1 *ec2.DetachClassicLinkVpcInput
	}{arg1})
	fake.recordInvocation("DetachClassicLinkVpcRequest", []interface{}{arg1})
	fake.detachClassicLinkVpcRequestMutex.Unlock()
	if fake.DetachClassicLinkVpcRequestStub != nil {
		return fake.DetachClassicLinkVpcRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachClassicLinkVpcRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachClassicLinkVpcRequestCallCount() int {
	fake.detachClassicLinkVpcRequestMutex.RLock()
	defer fake.detachClassicLinkVpcRequestMutex.RUnlock()
	return len(fake.detachClassicLinkVpcRequestArgsForCall)
}

func (fake *FakeEC2API) DetachClassicLinkVpcRequestCalls(stub func(*ec2.DetachClassicLinkVpcInput) (*request.Request, *ec2.DetachClassicLinkVpcOutput)) {
	fake.detachClassicLinkVpcRequestMutex.Lock()
	defer fake.detachClassicLinkVpcRequestMutex.Unlock()
	fake.DetachClassicLinkVpcRequestStub = stub
}

func (fake *FakeEC2API) DetachClassicLinkVpcRequestArgsForCall(i int) *ec2.DetachClassicLinkVpcInput {
	fake.detachClassicLinkVpcRequestMutex.RLock()
	defer fake.detachClassicLinkVpcRequestMutex.RUnlock()
	argsForCall := fake.detachClassicLinkVpcRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachClassicLinkVpcRequestReturns(result1 *request.Request, result2 *ec2.DetachClassicLinkVpcOutput) {
	fake.detachClassicLinkVpcRequestMutex.Lock()
	defer fake.detachClassicLinkVpcRequestMutex.Unlock()
	fake.DetachClassicLinkVpcRequestStub = nil
	fake.detachClassicLinkVpcRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DetachClassicLinkVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachClassicLinkVpcRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DetachClassicLinkVpcOutput) {
	fake.detachClassicLinkVpcRequestMutex.Lock()
	defer fake.detachClassicLinkVpcRequestMutex.Unlock()
	fake.DetachClassicLinkVpcRequestStub = nil
	if fake.detachClassicLinkVpcRequestReturnsOnCall == nil {
		fake.detachClassicLinkVpcRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DetachClassicLinkVpcOutput
		})
	}
	fake.detachClassicLinkVpcRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DetachClassicLinkVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachClassicLinkVpcWithContext(arg1 aws.Context, arg2 *ec2.DetachClassicLinkVpcInput, arg3 ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error) {
	fake.detachClassicLinkVpcWithContextMutex.Lock()
	ret, specificReturn := fake.detachClassicLinkVpcWithContextReturnsOnCall[len(fake.detachClassicLinkVpcWithContextArgsForCall)]
	fake.detachClassicLinkVpcWithContextArgsForCall = append(fake.detachClassicLinkVpcWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DetachClassicLinkVpcInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachClassicLinkVpcWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachClassicLinkVpcWithContextMutex.Unlock()
	if fake.DetachClassicLinkVpcWithContextStub != nil {
		return fake.DetachClassicLinkVpcWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachClassicLinkVpcWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachClassicLinkVpcWithContextCallCount() int {
	fake.detachClassicLinkVpcWithContextMutex.RLock()
	defer fake.detachClassicLinkVpcWithContextMutex.RUnlock()
	return len(fake.detachClassicLinkVpcWithContextArgsForCall)
}

func (fake *FakeEC2API) DetachClassicLinkVpcWithContextCalls(stub func(aws.Context, *ec2.DetachClassicLinkVpcInput, ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error)) {
	fake.detachClassicLinkVpcWithContextMutex.Lock()
	defer fake.detachClassicLinkVpcWithContextMutex.Unlock()
	fake.DetachClassicLinkVpcWithContextStub = stub
}

func (fake *FakeEC2API) DetachClassicLinkVpcWithContextArgsForCall(i int) (aws.Context, *ec2.DetachClassicLinkVpcInput, []request.Option) {
	fake.detachClassicLinkVpcWithContextMutex.RLock()
	defer fake.detachClassicLinkVpcWithContextMutex.RUnlock()
	argsForCall := fake.detachClassicLinkVpcWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DetachClassicLinkVpcWithContextReturns(result1 *ec2.DetachClassicLinkVpcOutput, result2 error) {
	fake.detachClassicLinkVpcWithContextMutex.Lock()
	defer fake.detachClassicLinkVpcWithContextMutex.Unlock()
	fake.DetachClassicLinkVpcWithContextStub = nil
	fake.detachClassicLinkVpcWithContextReturns = struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachClassicLinkVpcWithContextReturnsOnCall(i int, result1 *ec2.DetachClassicLinkVpcOutput, result2 error) {
	fake.detachClassicLinkVpcWithContextMutex.Lock()
	defer fake.detachClassicLinkVpcWithContextMutex.Unlock()
	fake.DetachClassicLinkVpcWithContextStub = nil
	if fake.detachClassicLinkVpcWithContextReturnsOnCall == nil {
		fake.detachClassicLinkVpcWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachClassicLinkVpcOutput
			result2 error
		})
	}
	fake.detachClassicLinkVpcWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DetachClassicLinkVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachInternetGateway(arg1 *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	fake.detachInternetGatewayMutex.Lock()
	ret, specificReturn := fake.detachInternetGatewayReturnsOnCall[len(fake.detachInternetGatewayArgsForCall)]
	fake.detachInternetGatewayArgsForCall = append(fake.detachInternetGatewayArgsForCall, struct {
		arg1 *ec2.DetachInternetGatewayInput
	}{arg1})
	fake.recordInvocation("DetachInternetGateway", []interface{}{arg1})
	fake.detachInternetGatewayMutex.Unlock()
	if fake.DetachInternetGatewayStub != nil {
		return fake.DetachInternetGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachInternetGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachInternetGatewayCallCount() int {
	fake.detachInternetGatewayMutex.RLock()
	defer fake.detachInternetGatewayMutex.RUnlock()
	return len(fake.detachInternetGatewayArgsForCall)
}

func (fake *FakeEC2API) DetachInternetGatewayCalls(stub func(*ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error)) {
	fake.detachInternetGatewayMutex.Lock()
	defer fake.detachInternetGatewayMutex.Unlock()
	fake.DetachInternetGatewayStub = stub
}

func (fake *FakeEC2API) DetachInternetGatewayArgsForCall(i int) *ec2.DetachInternetGatewayInput {
	fake.detachInternetGatewayMutex.RLock()
	defer fake.detachInternetGatewayMutex.RUnlock()
	argsForCall := fake.detachInternetGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachInternetGatewayReturns(result1 *ec2.DetachInternetGatewayOutput, result2 error) {
	fake.detachInternetGatewayMutex.Lock()
	defer fake.detachInternetGatewayMutex.Unlock()
	fake.DetachInternetGatewayStub = nil
	fake.detachInternetGatewayReturns = struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachInternetGatewayReturnsOnCall(i int, result1 *ec2.DetachInternetGatewayOutput, result2 error) {
	fake.detachInternetGatewayMutex.Lock()
	defer fake.detachInternetGatewayMutex.Unlock()
	fake.DetachInternetGatewayStub = nil
	if fake.detachInternetGatewayReturnsOnCall == nil {
		fake.detachInternetGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachInternetGatewayOutput
			result2 error
		})
	}
	fake.detachInternetGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachInternetGatewayRequest(arg1 *ec2.DetachInternetGatewayInput) (*request.Request, *ec2.DetachInternetGatewayOutput) {
	fake.detachInternetGatewayRequestMutex.Lock()
	ret, specificReturn := fake.detachInternetGatewayRequestReturnsOnCall[len(fake.detachInternetGatewayRequestArgsForCall)]
	fake.detachInternetGatewayRequestArgsForCall = append(fake.detachInternetGatewayRequestArgsForCall, struct {
		arg1 *ec2.DetachInternetGatewayInput
	}{arg1})
	fake.recordInvocation("DetachInternetGatewayRequest", []interface{}{arg1})
	fake.detachInternetGatewayRequestMutex.Unlock()
	if fake.DetachInternetGatewayRequestStub != nil {
		return fake.DetachInternetGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachInternetGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachInternetGatewayRequestCallCount() int {
	fake.detachInternetGatewayRequestMutex.RLock()
	defer fake.detachInternetGatewayRequestMutex.RUnlock()
	return len(fake.detachInternetGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DetachInternetGatewayRequestCalls(stub func(*ec2.DetachInternetGatewayInput) (*request.Request, *ec2.DetachInternetGatewayOutput)) {
	fake.detachInternetGatewayRequestMutex.Lock()
	defer fake.detachInternetGatewayRequestMutex.Unlock()
	fake.DetachInternetGatewayRequestStub = stub
}

func (fake *FakeEC2API) DetachInternetGatewayRequestArgsForCall(i int) *ec2.DetachInternetGatewayInput {
	fake.detachInternetGatewayRequestMutex.RLock()
	defer fake.detachInternetGatewayRequestMutex.RUnlock()
	argsForCall := fake.detachInternetGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachInternetGatewayRequestReturns(result1 *request.Request, result2 *ec2.DetachInternetGatewayOutput) {
	fake.detachInternetGatewayRequestMutex.Lock()
	defer fake.detachInternetGatewayRequestMutex.Unlock()
	fake.DetachInternetGatewayRequestStub = nil
	fake.detachInternetGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DetachInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachInternetGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DetachInternetGatewayOutput) {
	fake.detachInternetGatewayRequestMutex.Lock()
	defer fake.detachInternetGatewayRequestMutex.Unlock()
	fake.DetachInternetGatewayRequestStub = nil
	if fake.detachInternetGatewayRequestReturnsOnCall == nil {
		fake.detachInternetGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DetachInternetGatewayOutput
		})
	}
	fake.detachInternetGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DetachInternetGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachInternetGatewayWithContext(arg1 aws.Context, arg2 *ec2.DetachInternetGatewayInput, arg3 ...request.Option) (*ec2.DetachInternetGatewayOutput, error) {
	fake.detachInternetGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.detachInternetGatewayWithContextReturnsOnCall[len(fake.detachInternetGatewayWithContextArgsForCall)]
	fake.detachInternetGatewayWithContextArgsForCall = append(fake.detachInternetGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DetachInternetGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachInternetGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachInternetGatewayWithContextMutex.Unlock()
	if fake.DetachInternetGatewayWithContextStub != nil {
		return fake.DetachInternetGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachInternetGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachInternetGatewayWithContextCallCount() int {
	fake.detachInternetGatewayWithContextMutex.RLock()
	defer fake.detachInternetGatewayWithContextMutex.RUnlock()
	return len(fake.detachInternetGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DetachInternetGatewayWithContextCalls(stub func(aws.Context, *ec2.DetachInternetGatewayInput, ...request.Option) (*ec2.DetachInternetGatewayOutput, error)) {
	fake.detachInternetGatewayWithContextMutex.Lock()
	defer fake.detachInternetGatewayWithContextMutex.Unlock()
	fake.DetachInternetGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DetachInternetGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DetachInternetGatewayInput, []request.Option) {
	fake.detachInternetGatewayWithContextMutex.RLock()
	defer fake.detachInternetGatewayWithContextMutex.RUnlock()
	argsForCall := fake.detachInternetGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DetachInternetGatewayWithContextReturns(result1 *ec2.DetachInternetGatewayOutput, result2 error) {
	fake.detachInternetGatewayWithContextMutex.Lock()
	defer fake.detachInternetGatewayWithContextMutex.Unlock()
	fake.DetachInternetGatewayWithContextStub = nil
	fake.detachInternetGatewayWithContextReturns = struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachInternetGatewayWithContextReturnsOnCall(i int, result1 *ec2.DetachInternetGatewayOutput, result2 error) {
	fake.detachInternetGatewayWithContextMutex.Lock()
	defer fake.detachInternetGatewayWithContextMutex.Unlock()
	fake.DetachInternetGatewayWithContextStub = nil
	if fake.detachInternetGatewayWithContextReturnsOnCall == nil {
		fake.detachInternetGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachInternetGatewayOutput
			result2 error
		})
	}
	fake.detachInternetGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DetachInternetGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachNetworkInterface(arg1 *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	fake.detachNetworkInterfaceMutex.Lock()
	ret, specificReturn := fake.detachNetworkInterfaceReturnsOnCall[len(fake.detachNetworkInterfaceArgsForCall)]
	fake.detachNetworkInterfaceArgsForCall = append(fake.detachNetworkInterfaceArgsForCall, struct {
		arg1 *ec2.DetachNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("DetachNetworkInterface", []interface{}{arg1})
	fake.detachNetworkInterfaceMutex.Unlock()
	if fake.DetachNetworkInterfaceStub != nil {
		return fake.DetachNetworkInterfaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachNetworkInterfaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachNetworkInterfaceCallCount() int {
	fake.detachNetworkInterfaceMutex.RLock()
	defer fake.detachNetworkInterfaceMutex.RUnlock()
	return len(fake.detachNetworkInterfaceArgsForCall)
}

func (fake *FakeEC2API) DetachNetworkInterfaceCalls(stub func(*ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error)) {
	fake.detachNetworkInterfaceMutex.Lock()
	defer fake.detachNetworkInterfaceMutex.Unlock()
	fake.DetachNetworkInterfaceStub = stub
}

func (fake *FakeEC2API) DetachNetworkInterfaceArgsForCall(i int) *ec2.DetachNetworkInterfaceInput {
	fake.detachNetworkInterfaceMutex.RLock()
	defer fake.detachNetworkInterfaceMutex.RUnlock()
	argsForCall := fake.detachNetworkInterfaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachNetworkInterfaceReturns(result1 *ec2.DetachNetworkInterfaceOutput, result2 error) {
	fake.detachNetworkInterfaceMutex.Lock()
	defer fake.detachNetworkInterfaceMutex.Unlock()
	fake.DetachNetworkInterfaceStub = nil
	fake.detachNetworkInterfaceReturns = struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachNetworkInterfaceReturnsOnCall(i int, result1 *ec2.DetachNetworkInterfaceOutput, result2 error) {
	fake.detachNetworkInterfaceMutex.Lock()
	defer fake.detachNetworkInterfaceMutex.Unlock()
	fake.DetachNetworkInterfaceStub = nil
	if fake.detachNetworkInterfaceReturnsOnCall == nil {
		fake.detachNetworkInterfaceReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachNetworkInterfaceOutput
			result2 error
		})
	}
	fake.detachNetworkInterfaceReturnsOnCall[i] = struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachNetworkInterfaceRequest(arg1 *ec2.DetachNetworkInterfaceInput) (*request.Request, *ec2.DetachNetworkInterfaceOutput) {
	fake.detachNetworkInterfaceRequestMutex.Lock()
	ret, specificReturn := fake.detachNetworkInterfaceRequestReturnsOnCall[len(fake.detachNetworkInterfaceRequestArgsForCall)]
	fake.detachNetworkInterfaceRequestArgsForCall = append(fake.detachNetworkInterfaceRequestArgsForCall, struct {
		arg1 *ec2.DetachNetworkInterfaceInput
	}{arg1})
	fake.recordInvocation("DetachNetworkInterfaceRequest", []interface{}{arg1})
	fake.detachNetworkInterfaceRequestMutex.Unlock()
	if fake.DetachNetworkInterfaceRequestStub != nil {
		return fake.DetachNetworkInterfaceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachNetworkInterfaceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachNetworkInterfaceRequestCallCount() int {
	fake.detachNetworkInterfaceRequestMutex.RLock()
	defer fake.detachNetworkInterfaceRequestMutex.RUnlock()
	return len(fake.detachNetworkInterfaceRequestArgsForCall)
}

func (fake *FakeEC2API) DetachNetworkInterfaceRequestCalls(stub func(*ec2.DetachNetworkInterfaceInput) (*request.Request, *ec2.DetachNetworkInterfaceOutput)) {
	fake.detachNetworkInterfaceRequestMutex.Lock()
	defer fake.detachNetworkInterfaceRequestMutex.Unlock()
	fake.DetachNetworkInterfaceRequestStub = stub
}

func (fake *FakeEC2API) DetachNetworkInterfaceRequestArgsForCall(i int) *ec2.DetachNetworkInterfaceInput {
	fake.detachNetworkInterfaceRequestMutex.RLock()
	defer fake.detachNetworkInterfaceRequestMutex.RUnlock()
	argsForCall := fake.detachNetworkInterfaceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachNetworkInterfaceRequestReturns(result1 *request.Request, result2 *ec2.DetachNetworkInterfaceOutput) {
	fake.detachNetworkInterfaceRequestMutex.Lock()
	defer fake.detachNetworkInterfaceRequestMutex.Unlock()
	fake.DetachNetworkInterfaceRequestStub = nil
	fake.detachNetworkInterfaceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DetachNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachNetworkInterfaceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DetachNetworkInterfaceOutput) {
	fake.detachNetworkInterfaceRequestMutex.Lock()
	defer fake.detachNetworkInterfaceRequestMutex.Unlock()
	fake.DetachNetworkInterfaceRequestStub = nil
	if fake.detachNetworkInterfaceRequestReturnsOnCall == nil {
		fake.detachNetworkInterfaceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DetachNetworkInterfaceOutput
		})
	}
	fake.detachNetworkInterfaceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DetachNetworkInterfaceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachNetworkInterfaceWithContext(arg1 aws.Context, arg2 *ec2.DetachNetworkInterfaceInput, arg3 ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error) {
	fake.detachNetworkInterfaceWithContextMutex.Lock()
	ret, specificReturn := fake.detachNetworkInterfaceWithContextReturnsOnCall[len(fake.detachNetworkInterfaceWithContextArgsForCall)]
	fake.detachNetworkInterfaceWithContextArgsForCall = append(fake.detachNetworkInterfaceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DetachNetworkInterfaceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachNetworkInterfaceWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachNetworkInterfaceWithContextMutex.Unlock()
	if fake.DetachNetworkInterfaceWithContextStub != nil {
		return fake.DetachNetworkInterfaceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachNetworkInterfaceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachNetworkInterfaceWithContextCallCount() int {
	fake.detachNetworkInterfaceWithContextMutex.RLock()
	defer fake.detachNetworkInterfaceWithContextMutex.RUnlock()
	return len(fake.detachNetworkInterfaceWithContextArgsForCall)
}

func (fake *FakeEC2API) DetachNetworkInterfaceWithContextCalls(stub func(aws.Context, *ec2.DetachNetworkInterfaceInput, ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error)) {
	fake.detachNetworkInterfaceWithContextMutex.Lock()
	defer fake.detachNetworkInterfaceWithContextMutex.Unlock()
	fake.DetachNetworkInterfaceWithContextStub = stub
}

func (fake *FakeEC2API) DetachNetworkInterfaceWithContextArgsForCall(i int) (aws.Context, *ec2.DetachNetworkInterfaceInput, []request.Option) {
	fake.detachNetworkInterfaceWithContextMutex.RLock()
	defer fake.detachNetworkInterfaceWithContextMutex.RUnlock()
	argsForCall := fake.detachNetworkInterfaceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DetachNetworkInterfaceWithContextReturns(result1 *ec2.DetachNetworkInterfaceOutput, result2 error) {
	fake.detachNetworkInterfaceWithContextMutex.Lock()
	defer fake.detachNetworkInterfaceWithContextMutex.Unlock()
	fake.DetachNetworkInterfaceWithContextStub = nil
	fake.detachNetworkInterfaceWithContextReturns = struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachNetworkInterfaceWithContextReturnsOnCall(i int, result1 *ec2.DetachNetworkInterfaceOutput, result2 error) {
	fake.detachNetworkInterfaceWithContextMutex.Lock()
	defer fake.detachNetworkInterfaceWithContextMutex.Unlock()
	fake.DetachNetworkInterfaceWithContextStub = nil
	if fake.detachNetworkInterfaceWithContextReturnsOnCall == nil {
		fake.detachNetworkInterfaceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachNetworkInterfaceOutput
			result2 error
		})
	}
	fake.detachNetworkInterfaceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DetachNetworkInterfaceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVolume(arg1 *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	fake.detachVolumeMutex.Lock()
	ret, specificReturn := fake.detachVolumeReturnsOnCall[len(fake.detachVolumeArgsForCall)]
	fake.detachVolumeArgsForCall = append(fake.detachVolumeArgsForCall, struct {
		arg1 *ec2.DetachVolumeInput
	}{arg1})
	fake.recordInvocation("DetachVolume", []interface{}{arg1})
	fake.detachVolumeMutex.Unlock()
	if fake.DetachVolumeStub != nil {
		return fake.DetachVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachVolumeCallCount() int {
	fake.detachVolumeMutex.RLock()
	defer fake.detachVolumeMutex.RUnlock()
	return len(fake.detachVolumeArgsForCall)
}

func (fake *FakeEC2API) DetachVolumeCalls(stub func(*ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error)) {
	fake.detachVolumeMutex.Lock()
	defer fake.detachVolumeMutex.Unlock()
	fake.DetachVolumeStub = stub
}

func (fake *FakeEC2API) DetachVolumeArgsForCall(i int) *ec2.DetachVolumeInput {
	fake.detachVolumeMutex.RLock()
	defer fake.detachVolumeMutex.RUnlock()
	argsForCall := fake.detachVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachVolumeReturns(result1 *ec2.VolumeAttachment, result2 error) {
	fake.detachVolumeMutex.Lock()
	defer fake.detachVolumeMutex.Unlock()
	fake.DetachVolumeStub = nil
	fake.detachVolumeReturns = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVolumeReturnsOnCall(i int, result1 *ec2.VolumeAttachment, result2 error) {
	fake.detachVolumeMutex.Lock()
	defer fake.detachVolumeMutex.Unlock()
	fake.DetachVolumeStub = nil
	if fake.detachVolumeReturnsOnCall == nil {
		fake.detachVolumeReturnsOnCall = make(map[int]struct {
			result1 *ec2.VolumeAttachment
			result2 error
		})
	}
	fake.detachVolumeReturnsOnCall[i] = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVolumeRequest(arg1 *ec2.DetachVolumeInput) (*request.Request, *ec2.VolumeAttachment) {
	fake.detachVolumeRequestMutex.Lock()
	ret, specificReturn := fake.detachVolumeRequestReturnsOnCall[len(fake.detachVolumeRequestArgsForCall)]
	fake.detachVolumeRequestArgsForCall = append(fake.detachVolumeRequestArgsForCall, struct {
		arg1 *ec2.DetachVolumeInput
	}{arg1})
	fake.recordInvocation("DetachVolumeRequest", []interface{}{arg1})
	fake.detachVolumeRequestMutex.Unlock()
	if fake.DetachVolumeRequestStub != nil {
		return fake.DetachVolumeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachVolumeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachVolumeRequestCallCount() int {
	fake.detachVolumeRequestMutex.RLock()
	defer fake.detachVolumeRequestMutex.RUnlock()
	return len(fake.detachVolumeRequestArgsForCall)
}

func (fake *FakeEC2API) DetachVolumeRequestCalls(stub func(*ec2.DetachVolumeInput) (*request.Request, *ec2.VolumeAttachment)) {
	fake.detachVolumeRequestMutex.Lock()
	defer fake.detachVolumeRequestMutex.Unlock()
	fake.DetachVolumeRequestStub = stub
}

func (fake *FakeEC2API) DetachVolumeRequestArgsForCall(i int) *ec2.DetachVolumeInput {
	fake.detachVolumeRequestMutex.RLock()
	defer fake.detachVolumeRequestMutex.RUnlock()
	argsForCall := fake.detachVolumeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachVolumeRequestReturns(result1 *request.Request, result2 *ec2.VolumeAttachment) {
	fake.detachVolumeRequestMutex.Lock()
	defer fake.detachVolumeRequestMutex.Unlock()
	fake.DetachVolumeRequestStub = nil
	fake.detachVolumeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVolumeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.VolumeAttachment) {
	fake.detachVolumeRequestMutex.Lock()
	defer fake.detachVolumeRequestMutex.Unlock()
	fake.DetachVolumeRequestStub = nil
	if fake.detachVolumeRequestReturnsOnCall == nil {
		fake.detachVolumeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.VolumeAttachment
		})
	}
	fake.detachVolumeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.VolumeAttachment
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVolumeWithContext(arg1 aws.Context, arg2 *ec2.DetachVolumeInput, arg3 ...request.Option) (*ec2.VolumeAttachment, error) {
	fake.detachVolumeWithContextMutex.Lock()
	ret, specificReturn := fake.detachVolumeWithContextReturnsOnCall[len(fake.detachVolumeWithContextArgsForCall)]
	fake.detachVolumeWithContextArgsForCall = append(fake.detachVolumeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DetachVolumeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachVolumeWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachVolumeWithContextMutex.Unlock()
	if fake.DetachVolumeWithContextStub != nil {
		return fake.DetachVolumeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachVolumeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachVolumeWithContextCallCount() int {
	fake.detachVolumeWithContextMutex.RLock()
	defer fake.detachVolumeWithContextMutex.RUnlock()
	return len(fake.detachVolumeWithContextArgsForCall)
}

func (fake *FakeEC2API) DetachVolumeWithContextCalls(stub func(aws.Context, *ec2.DetachVolumeInput, ...request.Option) (*ec2.VolumeAttachment, error)) {
	fake.detachVolumeWithContextMutex.Lock()
	defer fake.detachVolumeWithContextMutex.Unlock()
	fake.DetachVolumeWithContextStub = stub
}

func (fake *FakeEC2API) DetachVolumeWithContextArgsForCall(i int) (aws.Context, *ec2.DetachVolumeInput, []request.Option) {
	fake.detachVolumeWithContextMutex.RLock()
	defer fake.detachVolumeWithContextMutex.RUnlock()
	argsForCall := fake.detachVolumeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DetachVolumeWithContextReturns(result1 *ec2.VolumeAttachment, result2 error) {
	fake.detachVolumeWithContextMutex.Lock()
	defer fake.detachVolumeWithContextMutex.Unlock()
	fake.DetachVolumeWithContextStub = nil
	fake.detachVolumeWithContextReturns = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVolumeWithContextReturnsOnCall(i int, result1 *ec2.VolumeAttachment, result2 error) {
	fake.detachVolumeWithContextMutex.Lock()
	defer fake.detachVolumeWithContextMutex.Unlock()
	fake.DetachVolumeWithContextStub = nil
	if fake.detachVolumeWithContextReturnsOnCall == nil {
		fake.detachVolumeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.VolumeAttachment
			result2 error
		})
	}
	fake.detachVolumeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.VolumeAttachment
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVpnGateway(arg1 *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
	fake.detachVpnGatewayMutex.Lock()
	ret, specificReturn := fake.detachVpnGatewayReturnsOnCall[len(fake.detachVpnGatewayArgsForCall)]
	fake.detachVpnGatewayArgsForCall = append(fake.detachVpnGatewayArgsForCall, struct {
		arg1 *ec2.DetachVpnGatewayInput
	}{arg1})
	fake.recordInvocation("DetachVpnGateway", []interface{}{arg1})
	fake.detachVpnGatewayMutex.Unlock()
	if fake.DetachVpnGatewayStub != nil {
		return fake.DetachVpnGatewayStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachVpnGatewayReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachVpnGatewayCallCount() int {
	fake.detachVpnGatewayMutex.RLock()
	defer fake.detachVpnGatewayMutex.RUnlock()
	return len(fake.detachVpnGatewayArgsForCall)
}

func (fake *FakeEC2API) DetachVpnGatewayCalls(stub func(*ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error)) {
	fake.detachVpnGatewayMutex.Lock()
	defer fake.detachVpnGatewayMutex.Unlock()
	fake.DetachVpnGatewayStub = stub
}

func (fake *FakeEC2API) DetachVpnGatewayArgsForCall(i int) *ec2.DetachVpnGatewayInput {
	fake.detachVpnGatewayMutex.RLock()
	defer fake.detachVpnGatewayMutex.RUnlock()
	argsForCall := fake.detachVpnGatewayArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachVpnGatewayReturns(result1 *ec2.DetachVpnGatewayOutput, result2 error) {
	fake.detachVpnGatewayMutex.Lock()
	defer fake.detachVpnGatewayMutex.Unlock()
	fake.DetachVpnGatewayStub = nil
	fake.detachVpnGatewayReturns = struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVpnGatewayReturnsOnCall(i int, result1 *ec2.DetachVpnGatewayOutput, result2 error) {
	fake.detachVpnGatewayMutex.Lock()
	defer fake.detachVpnGatewayMutex.Unlock()
	fake.DetachVpnGatewayStub = nil
	if fake.detachVpnGatewayReturnsOnCall == nil {
		fake.detachVpnGatewayReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachVpnGatewayOutput
			result2 error
		})
	}
	fake.detachVpnGatewayReturnsOnCall[i] = struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVpnGatewayRequest(arg1 *ec2.DetachVpnGatewayInput) (*request.Request, *ec2.DetachVpnGatewayOutput) {
	fake.detachVpnGatewayRequestMutex.Lock()
	ret, specificReturn := fake.detachVpnGatewayRequestReturnsOnCall[len(fake.detachVpnGatewayRequestArgsForCall)]
	fake.detachVpnGatewayRequestArgsForCall = append(fake.detachVpnGatewayRequestArgsForCall, struct {
		arg1 *ec2.DetachVpnGatewayInput
	}{arg1})
	fake.recordInvocation("DetachVpnGatewayRequest", []interface{}{arg1})
	fake.detachVpnGatewayRequestMutex.Unlock()
	if fake.DetachVpnGatewayRequestStub != nil {
		return fake.DetachVpnGatewayRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachVpnGatewayRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachVpnGatewayRequestCallCount() int {
	fake.detachVpnGatewayRequestMutex.RLock()
	defer fake.detachVpnGatewayRequestMutex.RUnlock()
	return len(fake.detachVpnGatewayRequestArgsForCall)
}

func (fake *FakeEC2API) DetachVpnGatewayRequestCalls(stub func(*ec2.DetachVpnGatewayInput) (*request.Request, *ec2.DetachVpnGatewayOutput)) {
	fake.detachVpnGatewayRequestMutex.Lock()
	defer fake.detachVpnGatewayRequestMutex.Unlock()
	fake.DetachVpnGatewayRequestStub = stub
}

func (fake *FakeEC2API) DetachVpnGatewayRequestArgsForCall(i int) *ec2.DetachVpnGatewayInput {
	fake.detachVpnGatewayRequestMutex.RLock()
	defer fake.detachVpnGatewayRequestMutex.RUnlock()
	argsForCall := fake.detachVpnGatewayRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DetachVpnGatewayRequestReturns(result1 *request.Request, result2 *ec2.DetachVpnGatewayOutput) {
	fake.detachVpnGatewayRequestMutex.Lock()
	defer fake.detachVpnGatewayRequestMutex.Unlock()
	fake.DetachVpnGatewayRequestStub = nil
	fake.detachVpnGatewayRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DetachVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVpnGatewayRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DetachVpnGatewayOutput) {
	fake.detachVpnGatewayRequestMutex.Lock()
	defer fake.detachVpnGatewayRequestMutex.Unlock()
	fake.DetachVpnGatewayRequestStub = nil
	if fake.detachVpnGatewayRequestReturnsOnCall == nil {
		fake.detachVpnGatewayRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DetachVpnGatewayOutput
		})
	}
	fake.detachVpnGatewayRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DetachVpnGatewayOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVpnGatewayWithContext(arg1 aws.Context, arg2 *ec2.DetachVpnGatewayInput, arg3 ...request.Option) (*ec2.DetachVpnGatewayOutput, error) {
	fake.detachVpnGatewayWithContextMutex.Lock()
	ret, specificReturn := fake.detachVpnGatewayWithContextReturnsOnCall[len(fake.detachVpnGatewayWithContextArgsForCall)]
	fake.detachVpnGatewayWithContextArgsForCall = append(fake.detachVpnGatewayWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DetachVpnGatewayInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DetachVpnGatewayWithContext", []interface{}{arg1, arg2, arg3})
	fake.detachVpnGatewayWithContextMutex.Unlock()
	if fake.DetachVpnGatewayWithContextStub != nil {
		return fake.DetachVpnGatewayWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.detachVpnGatewayWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DetachVpnGatewayWithContextCallCount() int {
	fake.detachVpnGatewayWithContextMutex.RLock()
	defer fake.detachVpnGatewayWithContextMutex.RUnlock()
	return len(fake.detachVpnGatewayWithContextArgsForCall)
}

func (fake *FakeEC2API) DetachVpnGatewayWithContextCalls(stub func(aws.Context, *ec2.DetachVpnGatewayInput, ...request.Option) (*ec2.DetachVpnGatewayOutput, error)) {
	fake.detachVpnGatewayWithContextMutex.Lock()
	defer fake.detachVpnGatewayWithContextMutex.Unlock()
	fake.DetachVpnGatewayWithContextStub = stub
}

func (fake *FakeEC2API) DetachVpnGatewayWithContextArgsForCall(i int) (aws.Context, *ec2.DetachVpnGatewayInput, []request.Option) {
	fake.detachVpnGatewayWithContextMutex.RLock()
	defer fake.detachVpnGatewayWithContextMutex.RUnlock()
	argsForCall := fake.detachVpnGatewayWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DetachVpnGatewayWithContextReturns(result1 *ec2.DetachVpnGatewayOutput, result2 error) {
	fake.detachVpnGatewayWithContextMutex.Lock()
	defer fake.detachVpnGatewayWithContextMutex.Unlock()
	fake.DetachVpnGatewayWithContextStub = nil
	fake.detachVpnGatewayWithContextReturns = struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DetachVpnGatewayWithContextReturnsOnCall(i int, result1 *ec2.DetachVpnGatewayOutput, result2 error) {
	fake.detachVpnGatewayWithContextMutex.Lock()
	defer fake.detachVpnGatewayWithContextMutex.Unlock()
	fake.DetachVpnGatewayWithContextStub = nil
	if fake.detachVpnGatewayWithContextReturnsOnCall == nil {
		fake.detachVpnGatewayWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DetachVpnGatewayOutput
			result2 error
		})
	}
	fake.detachVpnGatewayWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DetachVpnGatewayOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagation(arg1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	fake.disableTransitGatewayRouteTablePropagationMutex.Lock()
	ret, specificReturn := fake.disableTransitGatewayRouteTablePropagationReturnsOnCall[len(fake.disableTransitGatewayRouteTablePropagationArgsForCall)]
	fake.disableTransitGatewayRouteTablePropagationArgsForCall = append(fake.disableTransitGatewayRouteTablePropagationArgsForCall, struct {
		arg1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}{arg1})
	fake.recordInvocation("DisableTransitGatewayRouteTablePropagation", []interface{}{arg1})
	fake.disableTransitGatewayRouteTablePropagationMutex.Unlock()
	if fake.DisableTransitGatewayRouteTablePropagationStub != nil {
		return fake.DisableTransitGatewayRouteTablePropagationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableTransitGatewayRouteTablePropagationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationCallCount() int {
	fake.disableTransitGatewayRouteTablePropagationMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationMutex.RUnlock()
	return len(fake.disableTransitGatewayRouteTablePropagationArgsForCall)
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationCalls(stub func(*ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)) {
	fake.disableTransitGatewayRouteTablePropagationMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationStub = stub
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationArgsForCall(i int) *ec2.DisableTransitGatewayRouteTablePropagationInput {
	fake.disableTransitGatewayRouteTablePropagationMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationMutex.RUnlock()
	argsForCall := fake.disableTransitGatewayRouteTablePropagationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationReturns(result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.disableTransitGatewayRouteTablePropagationMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationStub = nil
	fake.disableTransitGatewayRouteTablePropagationReturns = struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationReturnsOnCall(i int, result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.disableTransitGatewayRouteTablePropagationMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationStub = nil
	if fake.disableTransitGatewayRouteTablePropagationReturnsOnCall == nil {
		fake.disableTransitGatewayRouteTablePropagationReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
			result2 error
		})
	}
	fake.disableTransitGatewayRouteTablePropagationReturnsOnCall[i] = struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationRequest(arg1 *ec2.DisableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	ret, specificReturn := fake.disableTransitGatewayRouteTablePropagationRequestReturnsOnCall[len(fake.disableTransitGatewayRouteTablePropagationRequestArgsForCall)]
	fake.disableTransitGatewayRouteTablePropagationRequestArgsForCall = append(fake.disableTransitGatewayRouteTablePropagationRequestArgsForCall, struct {
		arg1 *ec2.DisableTransitGatewayRouteTablePropagationInput
	}{arg1})
	fake.recordInvocation("DisableTransitGatewayRouteTablePropagationRequest", []interface{}{arg1})
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	if fake.DisableTransitGatewayRouteTablePropagationRequestStub != nil {
		return fake.DisableTransitGatewayRouteTablePropagationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableTransitGatewayRouteTablePropagationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationRequestCallCount() int {
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationRequestMutex.RUnlock()
	return len(fake.disableTransitGatewayRouteTablePropagationRequestArgsForCall)
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationRequestCalls(stub func(*ec2.DisableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.DisableTransitGatewayRouteTablePropagationOutput)) {
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationRequestStub = stub
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationRequestArgsForCall(i int) *ec2.DisableTransitGatewayRouteTablePropagationInput {
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationRequestMutex.RUnlock()
	argsForCall := fake.disableTransitGatewayRouteTablePropagationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationRequestReturns(result1 *request.Request, result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationRequestStub = nil
	fake.disableTransitGatewayRouteTablePropagationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationRequestStub = nil
	if fake.disableTransitGatewayRouteTablePropagationRequestReturnsOnCall == nil {
		fake.disableTransitGatewayRouteTablePropagationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		})
	}
	fake.disableTransitGatewayRouteTablePropagationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationWithContext(arg1 aws.Context, arg2 *ec2.DisableTransitGatewayRouteTablePropagationInput, arg3 ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	ret, specificReturn := fake.disableTransitGatewayRouteTablePropagationWithContextReturnsOnCall[len(fake.disableTransitGatewayRouteTablePropagationWithContextArgsForCall)]
	fake.disableTransitGatewayRouteTablePropagationWithContextArgsForCall = append(fake.disableTransitGatewayRouteTablePropagationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisableTransitGatewayRouteTablePropagationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisableTransitGatewayRouteTablePropagationWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	if fake.DisableTransitGatewayRouteTablePropagationWithContextStub != nil {
		return fake.DisableTransitGatewayRouteTablePropagationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableTransitGatewayRouteTablePropagationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationWithContextCallCount() int {
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationWithContextMutex.RUnlock()
	return len(fake.disableTransitGatewayRouteTablePropagationWithContextArgsForCall)
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationWithContextCalls(stub func(aws.Context, *ec2.DisableTransitGatewayRouteTablePropagationInput, ...request.Option) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)) {
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationWithContextStub = stub
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationWithContextArgsForCall(i int) (aws.Context, *ec2.DisableTransitGatewayRouteTablePropagationInput, []request.Option) {
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationWithContextMutex.RUnlock()
	argsForCall := fake.disableTransitGatewayRouteTablePropagationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationWithContextReturns(result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationWithContextStub = nil
	fake.disableTransitGatewayRouteTablePropagationWithContextReturns = struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableTransitGatewayRouteTablePropagationWithContextReturnsOnCall(i int, result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	defer fake.disableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	fake.DisableTransitGatewayRouteTablePropagationWithContextStub = nil
	if fake.disableTransitGatewayRouteTablePropagationWithContextReturnsOnCall == nil {
		fake.disableTransitGatewayRouteTablePropagationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
			result2 error
		})
	}
	fake.disableTransitGatewayRouteTablePropagationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVgwRoutePropagation(arg1 *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
	fake.disableVgwRoutePropagationMutex.Lock()
	ret, specificReturn := fake.disableVgwRoutePropagationReturnsOnCall[len(fake.disableVgwRoutePropagationArgsForCall)]
	fake.disableVgwRoutePropagationArgsForCall = append(fake.disableVgwRoutePropagationArgsForCall, struct {
		arg1 *ec2.DisableVgwRoutePropagationInput
	}{arg1})
	fake.recordInvocation("DisableVgwRoutePropagation", []interface{}{arg1})
	fake.disableVgwRoutePropagationMutex.Unlock()
	if fake.DisableVgwRoutePropagationStub != nil {
		return fake.DisableVgwRoutePropagationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVgwRoutePropagationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVgwRoutePropagationCallCount() int {
	fake.disableVgwRoutePropagationMutex.RLock()
	defer fake.disableVgwRoutePropagationMutex.RUnlock()
	return len(fake.disableVgwRoutePropagationArgsForCall)
}

func (fake *FakeEC2API) DisableVgwRoutePropagationCalls(stub func(*ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error)) {
	fake.disableVgwRoutePropagationMutex.Lock()
	defer fake.disableVgwRoutePropagationMutex.Unlock()
	fake.DisableVgwRoutePropagationStub = stub
}

func (fake *FakeEC2API) DisableVgwRoutePropagationArgsForCall(i int) *ec2.DisableVgwRoutePropagationInput {
	fake.disableVgwRoutePropagationMutex.RLock()
	defer fake.disableVgwRoutePropagationMutex.RUnlock()
	argsForCall := fake.disableVgwRoutePropagationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableVgwRoutePropagationReturns(result1 *ec2.DisableVgwRoutePropagationOutput, result2 error) {
	fake.disableVgwRoutePropagationMutex.Lock()
	defer fake.disableVgwRoutePropagationMutex.Unlock()
	fake.DisableVgwRoutePropagationStub = nil
	fake.disableVgwRoutePropagationReturns = struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVgwRoutePropagationReturnsOnCall(i int, result1 *ec2.DisableVgwRoutePropagationOutput, result2 error) {
	fake.disableVgwRoutePropagationMutex.Lock()
	defer fake.disableVgwRoutePropagationMutex.Unlock()
	fake.DisableVgwRoutePropagationStub = nil
	if fake.disableVgwRoutePropagationReturnsOnCall == nil {
		fake.disableVgwRoutePropagationReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableVgwRoutePropagationOutput
			result2 error
		})
	}
	fake.disableVgwRoutePropagationReturnsOnCall[i] = struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVgwRoutePropagationRequest(arg1 *ec2.DisableVgwRoutePropagationInput) (*request.Request, *ec2.DisableVgwRoutePropagationOutput) {
	fake.disableVgwRoutePropagationRequestMutex.Lock()
	ret, specificReturn := fake.disableVgwRoutePropagationRequestReturnsOnCall[len(fake.disableVgwRoutePropagationRequestArgsForCall)]
	fake.disableVgwRoutePropagationRequestArgsForCall = append(fake.disableVgwRoutePropagationRequestArgsForCall, struct {
		arg1 *ec2.DisableVgwRoutePropagationInput
	}{arg1})
	fake.recordInvocation("DisableVgwRoutePropagationRequest", []interface{}{arg1})
	fake.disableVgwRoutePropagationRequestMutex.Unlock()
	if fake.DisableVgwRoutePropagationRequestStub != nil {
		return fake.DisableVgwRoutePropagationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVgwRoutePropagationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVgwRoutePropagationRequestCallCount() int {
	fake.disableVgwRoutePropagationRequestMutex.RLock()
	defer fake.disableVgwRoutePropagationRequestMutex.RUnlock()
	return len(fake.disableVgwRoutePropagationRequestArgsForCall)
}

func (fake *FakeEC2API) DisableVgwRoutePropagationRequestCalls(stub func(*ec2.DisableVgwRoutePropagationInput) (*request.Request, *ec2.DisableVgwRoutePropagationOutput)) {
	fake.disableVgwRoutePropagationRequestMutex.Lock()
	defer fake.disableVgwRoutePropagationRequestMutex.Unlock()
	fake.DisableVgwRoutePropagationRequestStub = stub
}

func (fake *FakeEC2API) DisableVgwRoutePropagationRequestArgsForCall(i int) *ec2.DisableVgwRoutePropagationInput {
	fake.disableVgwRoutePropagationRequestMutex.RLock()
	defer fake.disableVgwRoutePropagationRequestMutex.RUnlock()
	argsForCall := fake.disableVgwRoutePropagationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableVgwRoutePropagationRequestReturns(result1 *request.Request, result2 *ec2.DisableVgwRoutePropagationOutput) {
	fake.disableVgwRoutePropagationRequestMutex.Lock()
	defer fake.disableVgwRoutePropagationRequestMutex.Unlock()
	fake.DisableVgwRoutePropagationRequestStub = nil
	fake.disableVgwRoutePropagationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisableVgwRoutePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVgwRoutePropagationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisableVgwRoutePropagationOutput) {
	fake.disableVgwRoutePropagationRequestMutex.Lock()
	defer fake.disableVgwRoutePropagationRequestMutex.Unlock()
	fake.DisableVgwRoutePropagationRequestStub = nil
	if fake.disableVgwRoutePropagationRequestReturnsOnCall == nil {
		fake.disableVgwRoutePropagationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisableVgwRoutePropagationOutput
		})
	}
	fake.disableVgwRoutePropagationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisableVgwRoutePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVgwRoutePropagationWithContext(arg1 aws.Context, arg2 *ec2.DisableVgwRoutePropagationInput, arg3 ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error) {
	fake.disableVgwRoutePropagationWithContextMutex.Lock()
	ret, specificReturn := fake.disableVgwRoutePropagationWithContextReturnsOnCall[len(fake.disableVgwRoutePropagationWithContextArgsForCall)]
	fake.disableVgwRoutePropagationWithContextArgsForCall = append(fake.disableVgwRoutePropagationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisableVgwRoutePropagationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisableVgwRoutePropagationWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableVgwRoutePropagationWithContextMutex.Unlock()
	if fake.DisableVgwRoutePropagationWithContextStub != nil {
		return fake.DisableVgwRoutePropagationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVgwRoutePropagationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVgwRoutePropagationWithContextCallCount() int {
	fake.disableVgwRoutePropagationWithContextMutex.RLock()
	defer fake.disableVgwRoutePropagationWithContextMutex.RUnlock()
	return len(fake.disableVgwRoutePropagationWithContextArgsForCall)
}

func (fake *FakeEC2API) DisableVgwRoutePropagationWithContextCalls(stub func(aws.Context, *ec2.DisableVgwRoutePropagationInput, ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error)) {
	fake.disableVgwRoutePropagationWithContextMutex.Lock()
	defer fake.disableVgwRoutePropagationWithContextMutex.Unlock()
	fake.DisableVgwRoutePropagationWithContextStub = stub
}

func (fake *FakeEC2API) DisableVgwRoutePropagationWithContextArgsForCall(i int) (aws.Context, *ec2.DisableVgwRoutePropagationInput, []request.Option) {
	fake.disableVgwRoutePropagationWithContextMutex.RLock()
	defer fake.disableVgwRoutePropagationWithContextMutex.RUnlock()
	argsForCall := fake.disableVgwRoutePropagationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisableVgwRoutePropagationWithContextReturns(result1 *ec2.DisableVgwRoutePropagationOutput, result2 error) {
	fake.disableVgwRoutePropagationWithContextMutex.Lock()
	defer fake.disableVgwRoutePropagationWithContextMutex.Unlock()
	fake.DisableVgwRoutePropagationWithContextStub = nil
	fake.disableVgwRoutePropagationWithContextReturns = struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVgwRoutePropagationWithContextReturnsOnCall(i int, result1 *ec2.DisableVgwRoutePropagationOutput, result2 error) {
	fake.disableVgwRoutePropagationWithContextMutex.Lock()
	defer fake.disableVgwRoutePropagationWithContextMutex.Unlock()
	fake.DisableVgwRoutePropagationWithContextStub = nil
	if fake.disableVgwRoutePropagationWithContextReturnsOnCall == nil {
		fake.disableVgwRoutePropagationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableVgwRoutePropagationOutput
			result2 error
		})
	}
	fake.disableVgwRoutePropagationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLink(arg1 *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
	fake.disableVpcClassicLinkMutex.Lock()
	ret, specificReturn := fake.disableVpcClassicLinkReturnsOnCall[len(fake.disableVpcClassicLinkArgsForCall)]
	fake.disableVpcClassicLinkArgsForCall = append(fake.disableVpcClassicLinkArgsForCall, struct {
		arg1 *ec2.DisableVpcClassicLinkInput
	}{arg1})
	fake.recordInvocation("DisableVpcClassicLink", []interface{}{arg1})
	fake.disableVpcClassicLinkMutex.Unlock()
	if fake.DisableVpcClassicLinkStub != nil {
		return fake.DisableVpcClassicLinkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVpcClassicLinkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVpcClassicLinkCallCount() int {
	fake.disableVpcClassicLinkMutex.RLock()
	defer fake.disableVpcClassicLinkMutex.RUnlock()
	return len(fake.disableVpcClassicLinkArgsForCall)
}

func (fake *FakeEC2API) DisableVpcClassicLinkCalls(stub func(*ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error)) {
	fake.disableVpcClassicLinkMutex.Lock()
	defer fake.disableVpcClassicLinkMutex.Unlock()
	fake.DisableVpcClassicLinkStub = stub
}

func (fake *FakeEC2API) DisableVpcClassicLinkArgsForCall(i int) *ec2.DisableVpcClassicLinkInput {
	fake.disableVpcClassicLinkMutex.RLock()
	defer fake.disableVpcClassicLinkMutex.RUnlock()
	argsForCall := fake.disableVpcClassicLinkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableVpcClassicLinkReturns(result1 *ec2.DisableVpcClassicLinkOutput, result2 error) {
	fake.disableVpcClassicLinkMutex.Lock()
	defer fake.disableVpcClassicLinkMutex.Unlock()
	fake.DisableVpcClassicLinkStub = nil
	fake.disableVpcClassicLinkReturns = struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkReturnsOnCall(i int, result1 *ec2.DisableVpcClassicLinkOutput, result2 error) {
	fake.disableVpcClassicLinkMutex.Lock()
	defer fake.disableVpcClassicLinkMutex.Unlock()
	fake.DisableVpcClassicLinkStub = nil
	if fake.disableVpcClassicLinkReturnsOnCall == nil {
		fake.disableVpcClassicLinkReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableVpcClassicLinkOutput
			result2 error
		})
	}
	fake.disableVpcClassicLinkReturnsOnCall[i] = struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupport(arg1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	fake.disableVpcClassicLinkDnsSupportMutex.Lock()
	ret, specificReturn := fake.disableVpcClassicLinkDnsSupportReturnsOnCall[len(fake.disableVpcClassicLinkDnsSupportArgsForCall)]
	fake.disableVpcClassicLinkDnsSupportArgsForCall = append(fake.disableVpcClassicLinkDnsSupportArgsForCall, struct {
		arg1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}{arg1})
	fake.recordInvocation("DisableVpcClassicLinkDnsSupport", []interface{}{arg1})
	fake.disableVpcClassicLinkDnsSupportMutex.Unlock()
	if fake.DisableVpcClassicLinkDnsSupportStub != nil {
		return fake.DisableVpcClassicLinkDnsSupportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVpcClassicLinkDnsSupportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportCallCount() int {
	fake.disableVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportMutex.RUnlock()
	return len(fake.disableVpcClassicLinkDnsSupportArgsForCall)
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportCalls(stub func(*ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)) {
	fake.disableVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportStub = stub
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportArgsForCall(i int) *ec2.DisableVpcClassicLinkDnsSupportInput {
	fake.disableVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportMutex.RUnlock()
	argsForCall := fake.disableVpcClassicLinkDnsSupportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportReturns(result1 *ec2.DisableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.disableVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportStub = nil
	fake.disableVpcClassicLinkDnsSupportReturns = struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportReturnsOnCall(i int, result1 *ec2.DisableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.disableVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportStub = nil
	if fake.disableVpcClassicLinkDnsSupportReturnsOnCall == nil {
		fake.disableVpcClassicLinkDnsSupportReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
			result2 error
		})
	}
	fake.disableVpcClassicLinkDnsSupportReturnsOnCall[i] = struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportRequest(arg1 *ec2.DisableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	fake.disableVpcClassicLinkDnsSupportRequestMutex.Lock()
	ret, specificReturn := fake.disableVpcClassicLinkDnsSupportRequestReturnsOnCall[len(fake.disableVpcClassicLinkDnsSupportRequestArgsForCall)]
	fake.disableVpcClassicLinkDnsSupportRequestArgsForCall = append(fake.disableVpcClassicLinkDnsSupportRequestArgsForCall, struct {
		arg1 *ec2.DisableVpcClassicLinkDnsSupportInput
	}{arg1})
	fake.recordInvocation("DisableVpcClassicLinkDnsSupportRequest", []interface{}{arg1})
	fake.disableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	if fake.DisableVpcClassicLinkDnsSupportRequestStub != nil {
		return fake.DisableVpcClassicLinkDnsSupportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVpcClassicLinkDnsSupportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportRequestCallCount() int {
	fake.disableVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	return len(fake.disableVpcClassicLinkDnsSupportRequestArgsForCall)
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportRequestCalls(stub func(*ec2.DisableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.DisableVpcClassicLinkDnsSupportOutput)) {
	fake.disableVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportRequestStub = stub
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportRequestArgsForCall(i int) *ec2.DisableVpcClassicLinkDnsSupportInput {
	fake.disableVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	argsForCall := fake.disableVpcClassicLinkDnsSupportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportRequestReturns(result1 *request.Request, result2 *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	fake.disableVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportRequestStub = nil
	fake.disableVpcClassicLinkDnsSupportRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkDnsSupportOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	fake.disableVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportRequestStub = nil
	if fake.disableVpcClassicLinkDnsSupportRequestReturnsOnCall == nil {
		fake.disableVpcClassicLinkDnsSupportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisableVpcClassicLinkDnsSupportOutput
		})
	}
	fake.disableVpcClassicLinkDnsSupportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkDnsSupportOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportWithContext(arg1 aws.Context, arg2 *ec2.DisableVpcClassicLinkDnsSupportInput, arg3 ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	ret, specificReturn := fake.disableVpcClassicLinkDnsSupportWithContextReturnsOnCall[len(fake.disableVpcClassicLinkDnsSupportWithContextArgsForCall)]
	fake.disableVpcClassicLinkDnsSupportWithContextArgsForCall = append(fake.disableVpcClassicLinkDnsSupportWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisableVpcClassicLinkDnsSupportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisableVpcClassicLinkDnsSupportWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	if fake.DisableVpcClassicLinkDnsSupportWithContextStub != nil {
		return fake.DisableVpcClassicLinkDnsSupportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVpcClassicLinkDnsSupportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportWithContextCallCount() int {
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	return len(fake.disableVpcClassicLinkDnsSupportWithContextArgsForCall)
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportWithContextCalls(stub func(aws.Context, *ec2.DisableVpcClassicLinkDnsSupportInput, ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)) {
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportWithContextStub = stub
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportWithContextArgsForCall(i int) (aws.Context, *ec2.DisableVpcClassicLinkDnsSupportInput, []request.Option) {
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	argsForCall := fake.disableVpcClassicLinkDnsSupportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportWithContextReturns(result1 *ec2.DisableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportWithContextStub = nil
	fake.disableVpcClassicLinkDnsSupportWithContextReturns = struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkDnsSupportWithContextReturnsOnCall(i int, result1 *ec2.DisableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.disableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.DisableVpcClassicLinkDnsSupportWithContextStub = nil
	if fake.disableVpcClassicLinkDnsSupportWithContextReturnsOnCall == nil {
		fake.disableVpcClassicLinkDnsSupportWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
			result2 error
		})
	}
	fake.disableVpcClassicLinkDnsSupportWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkRequest(arg1 *ec2.DisableVpcClassicLinkInput) (*request.Request, *ec2.DisableVpcClassicLinkOutput) {
	fake.disableVpcClassicLinkRequestMutex.Lock()
	ret, specificReturn := fake.disableVpcClassicLinkRequestReturnsOnCall[len(fake.disableVpcClassicLinkRequestArgsForCall)]
	fake.disableVpcClassicLinkRequestArgsForCall = append(fake.disableVpcClassicLinkRequestArgsForCall, struct {
		arg1 *ec2.DisableVpcClassicLinkInput
	}{arg1})
	fake.recordInvocation("DisableVpcClassicLinkRequest", []interface{}{arg1})
	fake.disableVpcClassicLinkRequestMutex.Unlock()
	if fake.DisableVpcClassicLinkRequestStub != nil {
		return fake.DisableVpcClassicLinkRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVpcClassicLinkRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVpcClassicLinkRequestCallCount() int {
	fake.disableVpcClassicLinkRequestMutex.RLock()
	defer fake.disableVpcClassicLinkRequestMutex.RUnlock()
	return len(fake.disableVpcClassicLinkRequestArgsForCall)
}

func (fake *FakeEC2API) DisableVpcClassicLinkRequestCalls(stub func(*ec2.DisableVpcClassicLinkInput) (*request.Request, *ec2.DisableVpcClassicLinkOutput)) {
	fake.disableVpcClassicLinkRequestMutex.Lock()
	defer fake.disableVpcClassicLinkRequestMutex.Unlock()
	fake.DisableVpcClassicLinkRequestStub = stub
}

func (fake *FakeEC2API) DisableVpcClassicLinkRequestArgsForCall(i int) *ec2.DisableVpcClassicLinkInput {
	fake.disableVpcClassicLinkRequestMutex.RLock()
	defer fake.disableVpcClassicLinkRequestMutex.RUnlock()
	argsForCall := fake.disableVpcClassicLinkRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisableVpcClassicLinkRequestReturns(result1 *request.Request, result2 *ec2.DisableVpcClassicLinkOutput) {
	fake.disableVpcClassicLinkRequestMutex.Lock()
	defer fake.disableVpcClassicLinkRequestMutex.Unlock()
	fake.DisableVpcClassicLinkRequestStub = nil
	fake.disableVpcClassicLinkRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisableVpcClassicLinkOutput) {
	fake.disableVpcClassicLinkRequestMutex.Lock()
	defer fake.disableVpcClassicLinkRequestMutex.Unlock()
	fake.DisableVpcClassicLinkRequestStub = nil
	if fake.disableVpcClassicLinkRequestReturnsOnCall == nil {
		fake.disableVpcClassicLinkRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisableVpcClassicLinkOutput
		})
	}
	fake.disableVpcClassicLinkRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisableVpcClassicLinkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkWithContext(arg1 aws.Context, arg2 *ec2.DisableVpcClassicLinkInput, arg3 ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error) {
	fake.disableVpcClassicLinkWithContextMutex.Lock()
	ret, specificReturn := fake.disableVpcClassicLinkWithContextReturnsOnCall[len(fake.disableVpcClassicLinkWithContextArgsForCall)]
	fake.disableVpcClassicLinkWithContextArgsForCall = append(fake.disableVpcClassicLinkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisableVpcClassicLinkInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisableVpcClassicLinkWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableVpcClassicLinkWithContextMutex.Unlock()
	if fake.DisableVpcClassicLinkWithContextStub != nil {
		return fake.DisableVpcClassicLinkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableVpcClassicLinkWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisableVpcClassicLinkWithContextCallCount() int {
	fake.disableVpcClassicLinkWithContextMutex.RLock()
	defer fake.disableVpcClassicLinkWithContextMutex.RUnlock()
	return len(fake.disableVpcClassicLinkWithContextArgsForCall)
}

func (fake *FakeEC2API) DisableVpcClassicLinkWithContextCalls(stub func(aws.Context, *ec2.DisableVpcClassicLinkInput, ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error)) {
	fake.disableVpcClassicLinkWithContextMutex.Lock()
	defer fake.disableVpcClassicLinkWithContextMutex.Unlock()
	fake.DisableVpcClassicLinkWithContextStub = stub
}

func (fake *FakeEC2API) DisableVpcClassicLinkWithContextArgsForCall(i int) (aws.Context, *ec2.DisableVpcClassicLinkInput, []request.Option) {
	fake.disableVpcClassicLinkWithContextMutex.RLock()
	defer fake.disableVpcClassicLinkWithContextMutex.RUnlock()
	argsForCall := fake.disableVpcClassicLinkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisableVpcClassicLinkWithContextReturns(result1 *ec2.DisableVpcClassicLinkOutput, result2 error) {
	fake.disableVpcClassicLinkWithContextMutex.Lock()
	defer fake.disableVpcClassicLinkWithContextMutex.Unlock()
	fake.DisableVpcClassicLinkWithContextStub = nil
	fake.disableVpcClassicLinkWithContextReturns = struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisableVpcClassicLinkWithContextReturnsOnCall(i int, result1 *ec2.DisableVpcClassicLinkOutput, result2 error) {
	fake.disableVpcClassicLinkWithContextMutex.Lock()
	defer fake.disableVpcClassicLinkWithContextMutex.Unlock()
	fake.DisableVpcClassicLinkWithContextStub = nil
	if fake.disableVpcClassicLinkWithContextReturnsOnCall == nil {
		fake.disableVpcClassicLinkWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisableVpcClassicLinkOutput
			result2 error
		})
	}
	fake.disableVpcClassicLinkWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateAddress(arg1 *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	fake.disassociateAddressMutex.Lock()
	ret, specificReturn := fake.disassociateAddressReturnsOnCall[len(fake.disassociateAddressArgsForCall)]
	fake.disassociateAddressArgsForCall = append(fake.disassociateAddressArgsForCall, struct {
		arg1 *ec2.DisassociateAddressInput
	}{arg1})
	fake.recordInvocation("DisassociateAddress", []interface{}{arg1})
	fake.disassociateAddressMutex.Unlock()
	if fake.DisassociateAddressStub != nil {
		return fake.DisassociateAddressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateAddressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateAddressCallCount() int {
	fake.disassociateAddressMutex.RLock()
	defer fake.disassociateAddressMutex.RUnlock()
	return len(fake.disassociateAddressArgsForCall)
}

func (fake *FakeEC2API) DisassociateAddressCalls(stub func(*ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error)) {
	fake.disassociateAddressMutex.Lock()
	defer fake.disassociateAddressMutex.Unlock()
	fake.DisassociateAddressStub = stub
}

func (fake *FakeEC2API) DisassociateAddressArgsForCall(i int) *ec2.DisassociateAddressInput {
	fake.disassociateAddressMutex.RLock()
	defer fake.disassociateAddressMutex.RUnlock()
	argsForCall := fake.disassociateAddressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateAddressReturns(result1 *ec2.DisassociateAddressOutput, result2 error) {
	fake.disassociateAddressMutex.Lock()
	defer fake.disassociateAddressMutex.Unlock()
	fake.DisassociateAddressStub = nil
	fake.disassociateAddressReturns = struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateAddressReturnsOnCall(i int, result1 *ec2.DisassociateAddressOutput, result2 error) {
	fake.disassociateAddressMutex.Lock()
	defer fake.disassociateAddressMutex.Unlock()
	fake.DisassociateAddressStub = nil
	if fake.disassociateAddressReturnsOnCall == nil {
		fake.disassociateAddressReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateAddressOutput
			result2 error
		})
	}
	fake.disassociateAddressReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateAddressRequest(arg1 *ec2.DisassociateAddressInput) (*request.Request, *ec2.DisassociateAddressOutput) {
	fake.disassociateAddressRequestMutex.Lock()
	ret, specificReturn := fake.disassociateAddressRequestReturnsOnCall[len(fake.disassociateAddressRequestArgsForCall)]
	fake.disassociateAddressRequestArgsForCall = append(fake.disassociateAddressRequestArgsForCall, struct {
		arg1 *ec2.DisassociateAddressInput
	}{arg1})
	fake.recordInvocation("DisassociateAddressRequest", []interface{}{arg1})
	fake.disassociateAddressRequestMutex.Unlock()
	if fake.DisassociateAddressRequestStub != nil {
		return fake.DisassociateAddressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateAddressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateAddressRequestCallCount() int {
	fake.disassociateAddressRequestMutex.RLock()
	defer fake.disassociateAddressRequestMutex.RUnlock()
	return len(fake.disassociateAddressRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateAddressRequestCalls(stub func(*ec2.DisassociateAddressInput) (*request.Request, *ec2.DisassociateAddressOutput)) {
	fake.disassociateAddressRequestMutex.Lock()
	defer fake.disassociateAddressRequestMutex.Unlock()
	fake.DisassociateAddressRequestStub = stub
}

func (fake *FakeEC2API) DisassociateAddressRequestArgsForCall(i int) *ec2.DisassociateAddressInput {
	fake.disassociateAddressRequestMutex.RLock()
	defer fake.disassociateAddressRequestMutex.RUnlock()
	argsForCall := fake.disassociateAddressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateAddressRequestReturns(result1 *request.Request, result2 *ec2.DisassociateAddressOutput) {
	fake.disassociateAddressRequestMutex.Lock()
	defer fake.disassociateAddressRequestMutex.Unlock()
	fake.DisassociateAddressRequestStub = nil
	fake.disassociateAddressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateAddressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateAddressOutput) {
	fake.disassociateAddressRequestMutex.Lock()
	defer fake.disassociateAddressRequestMutex.Unlock()
	fake.DisassociateAddressRequestStub = nil
	if fake.disassociateAddressRequestReturnsOnCall == nil {
		fake.disassociateAddressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateAddressOutput
		})
	}
	fake.disassociateAddressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateAddressWithContext(arg1 aws.Context, arg2 *ec2.DisassociateAddressInput, arg3 ...request.Option) (*ec2.DisassociateAddressOutput, error) {
	fake.disassociateAddressWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateAddressWithContextReturnsOnCall[len(fake.disassociateAddressWithContextArgsForCall)]
	fake.disassociateAddressWithContextArgsForCall = append(fake.disassociateAddressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateAddressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateAddressWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateAddressWithContextMutex.Unlock()
	if fake.DisassociateAddressWithContextStub != nil {
		return fake.DisassociateAddressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateAddressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateAddressWithContextCallCount() int {
	fake.disassociateAddressWithContextMutex.RLock()
	defer fake.disassociateAddressWithContextMutex.RUnlock()
	return len(fake.disassociateAddressWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateAddressWithContextCalls(stub func(aws.Context, *ec2.DisassociateAddressInput, ...request.Option) (*ec2.DisassociateAddressOutput, error)) {
	fake.disassociateAddressWithContextMutex.Lock()
	defer fake.disassociateAddressWithContextMutex.Unlock()
	fake.DisassociateAddressWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateAddressWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateAddressInput, []request.Option) {
	fake.disassociateAddressWithContextMutex.RLock()
	defer fake.disassociateAddressWithContextMutex.RUnlock()
	argsForCall := fake.disassociateAddressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateAddressWithContextReturns(result1 *ec2.DisassociateAddressOutput, result2 error) {
	fake.disassociateAddressWithContextMutex.Lock()
	defer fake.disassociateAddressWithContextMutex.Unlock()
	fake.DisassociateAddressWithContextStub = nil
	fake.disassociateAddressWithContextReturns = struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateAddressWithContextReturnsOnCall(i int, result1 *ec2.DisassociateAddressOutput, result2 error) {
	fake.disassociateAddressWithContextMutex.Lock()
	defer fake.disassociateAddressWithContextMutex.Unlock()
	fake.DisassociateAddressWithContextStub = nil
	if fake.disassociateAddressWithContextReturnsOnCall == nil {
		fake.disassociateAddressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateAddressOutput
			result2 error
		})
	}
	fake.disassociateAddressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetwork(arg1 *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	fake.disassociateClientVpnTargetNetworkMutex.Lock()
	ret, specificReturn := fake.disassociateClientVpnTargetNetworkReturnsOnCall[len(fake.disassociateClientVpnTargetNetworkArgsForCall)]
	fake.disassociateClientVpnTargetNetworkArgsForCall = append(fake.disassociateClientVpnTargetNetworkArgsForCall, struct {
		arg1 *ec2.DisassociateClientVpnTargetNetworkInput
	}{arg1})
	fake.recordInvocation("DisassociateClientVpnTargetNetwork", []interface{}{arg1})
	fake.disassociateClientVpnTargetNetworkMutex.Unlock()
	if fake.DisassociateClientVpnTargetNetworkStub != nil {
		return fake.DisassociateClientVpnTargetNetworkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateClientVpnTargetNetworkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkCallCount() int {
	fake.disassociateClientVpnTargetNetworkMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkMutex.RUnlock()
	return len(fake.disassociateClientVpnTargetNetworkArgsForCall)
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkCalls(stub func(*ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)) {
	fake.disassociateClientVpnTargetNetworkMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkStub = stub
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkArgsForCall(i int) *ec2.DisassociateClientVpnTargetNetworkInput {
	fake.disassociateClientVpnTargetNetworkMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkMutex.RUnlock()
	argsForCall := fake.disassociateClientVpnTargetNetworkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkReturns(result1 *ec2.DisassociateClientVpnTargetNetworkOutput, result2 error) {
	fake.disassociateClientVpnTargetNetworkMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkStub = nil
	fake.disassociateClientVpnTargetNetworkReturns = struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkReturnsOnCall(i int, result1 *ec2.DisassociateClientVpnTargetNetworkOutput, result2 error) {
	fake.disassociateClientVpnTargetNetworkMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkStub = nil
	if fake.disassociateClientVpnTargetNetworkReturnsOnCall == nil {
		fake.disassociateClientVpnTargetNetworkReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateClientVpnTargetNetworkOutput
			result2 error
		})
	}
	fake.disassociateClientVpnTargetNetworkReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkRequest(arg1 *ec2.DisassociateClientVpnTargetNetworkInput) (*request.Request, *ec2.DisassociateClientVpnTargetNetworkOutput) {
	fake.disassociateClientVpnTargetNetworkRequestMutex.Lock()
	ret, specificReturn := fake.disassociateClientVpnTargetNetworkRequestReturnsOnCall[len(fake.disassociateClientVpnTargetNetworkRequestArgsForCall)]
	fake.disassociateClientVpnTargetNetworkRequestArgsForCall = append(fake.disassociateClientVpnTargetNetworkRequestArgsForCall, struct {
		arg1 *ec2.DisassociateClientVpnTargetNetworkInput
	}{arg1})
	fake.recordInvocation("DisassociateClientVpnTargetNetworkRequest", []interface{}{arg1})
	fake.disassociateClientVpnTargetNetworkRequestMutex.Unlock()
	if fake.DisassociateClientVpnTargetNetworkRequestStub != nil {
		return fake.DisassociateClientVpnTargetNetworkRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateClientVpnTargetNetworkRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkRequestCallCount() int {
	fake.disassociateClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkRequestMutex.RUnlock()
	return len(fake.disassociateClientVpnTargetNetworkRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkRequestCalls(stub func(*ec2.DisassociateClientVpnTargetNetworkInput) (*request.Request, *ec2.DisassociateClientVpnTargetNetworkOutput)) {
	fake.disassociateClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkRequestMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkRequestStub = stub
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkRequestArgsForCall(i int) *ec2.DisassociateClientVpnTargetNetworkInput {
	fake.disassociateClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkRequestMutex.RUnlock()
	argsForCall := fake.disassociateClientVpnTargetNetworkRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkRequestReturns(result1 *request.Request, result2 *ec2.DisassociateClientVpnTargetNetworkOutput) {
	fake.disassociateClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkRequestMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkRequestStub = nil
	fake.disassociateClientVpnTargetNetworkRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateClientVpnTargetNetworkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateClientVpnTargetNetworkOutput) {
	fake.disassociateClientVpnTargetNetworkRequestMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkRequestMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkRequestStub = nil
	if fake.disassociateClientVpnTargetNetworkRequestReturnsOnCall == nil {
		fake.disassociateClientVpnTargetNetworkRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateClientVpnTargetNetworkOutput
		})
	}
	fake.disassociateClientVpnTargetNetworkRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateClientVpnTargetNetworkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkWithContext(arg1 aws.Context, arg2 *ec2.DisassociateClientVpnTargetNetworkInput, arg3 ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	fake.disassociateClientVpnTargetNetworkWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateClientVpnTargetNetworkWithContextReturnsOnCall[len(fake.disassociateClientVpnTargetNetworkWithContextArgsForCall)]
	fake.disassociateClientVpnTargetNetworkWithContextArgsForCall = append(fake.disassociateClientVpnTargetNetworkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateClientVpnTargetNetworkInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateClientVpnTargetNetworkWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateClientVpnTargetNetworkWithContextMutex.Unlock()
	if fake.DisassociateClientVpnTargetNetworkWithContextStub != nil {
		return fake.DisassociateClientVpnTargetNetworkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateClientVpnTargetNetworkWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkWithContextCallCount() int {
	fake.disassociateClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkWithContextMutex.RUnlock()
	return len(fake.disassociateClientVpnTargetNetworkWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkWithContextCalls(stub func(aws.Context, *ec2.DisassociateClientVpnTargetNetworkInput, ...request.Option) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)) {
	fake.disassociateClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateClientVpnTargetNetworkInput, []request.Option) {
	fake.disassociateClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkWithContextMutex.RUnlock()
	argsForCall := fake.disassociateClientVpnTargetNetworkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkWithContextReturns(result1 *ec2.DisassociateClientVpnTargetNetworkOutput, result2 error) {
	fake.disassociateClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkWithContextStub = nil
	fake.disassociateClientVpnTargetNetworkWithContextReturns = struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateClientVpnTargetNetworkWithContextReturnsOnCall(i int, result1 *ec2.DisassociateClientVpnTargetNetworkOutput, result2 error) {
	fake.disassociateClientVpnTargetNetworkWithContextMutex.Lock()
	defer fake.disassociateClientVpnTargetNetworkWithContextMutex.Unlock()
	fake.DisassociateClientVpnTargetNetworkWithContextStub = nil
	if fake.disassociateClientVpnTargetNetworkWithContextReturnsOnCall == nil {
		fake.disassociateClientVpnTargetNetworkWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateClientVpnTargetNetworkOutput
			result2 error
		})
	}
	fake.disassociateClientVpnTargetNetworkWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateClientVpnTargetNetworkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateIamInstanceProfile(arg1 *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	fake.disassociateIamInstanceProfileMutex.Lock()
	ret, specificReturn := fake.disassociateIamInstanceProfileReturnsOnCall[len(fake.disassociateIamInstanceProfileArgsForCall)]
	fake.disassociateIamInstanceProfileArgsForCall = append(fake.disassociateIamInstanceProfileArgsForCall, struct {
		arg1 *ec2.DisassociateIamInstanceProfileInput
	}{arg1})
	fake.recordInvocation("DisassociateIamInstanceProfile", []interface{}{arg1})
	fake.disassociateIamInstanceProfileMutex.Unlock()
	if fake.DisassociateIamInstanceProfileStub != nil {
		return fake.DisassociateIamInstanceProfileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateIamInstanceProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileCallCount() int {
	fake.disassociateIamInstanceProfileMutex.RLock()
	defer fake.disassociateIamInstanceProfileMutex.RUnlock()
	return len(fake.disassociateIamInstanceProfileArgsForCall)
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileCalls(stub func(*ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error)) {
	fake.disassociateIamInstanceProfileMutex.Lock()
	defer fake.disassociateIamInstanceProfileMutex.Unlock()
	fake.DisassociateIamInstanceProfileStub = stub
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileArgsForCall(i int) *ec2.DisassociateIamInstanceProfileInput {
	fake.disassociateIamInstanceProfileMutex.RLock()
	defer fake.disassociateIamInstanceProfileMutex.RUnlock()
	argsForCall := fake.disassociateIamInstanceProfileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileReturns(result1 *ec2.DisassociateIamInstanceProfileOutput, result2 error) {
	fake.disassociateIamInstanceProfileMutex.Lock()
	defer fake.disassociateIamInstanceProfileMutex.Unlock()
	fake.DisassociateIamInstanceProfileStub = nil
	fake.disassociateIamInstanceProfileReturns = struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileReturnsOnCall(i int, result1 *ec2.DisassociateIamInstanceProfileOutput, result2 error) {
	fake.disassociateIamInstanceProfileMutex.Lock()
	defer fake.disassociateIamInstanceProfileMutex.Unlock()
	fake.DisassociateIamInstanceProfileStub = nil
	if fake.disassociateIamInstanceProfileReturnsOnCall == nil {
		fake.disassociateIamInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateIamInstanceProfileOutput
			result2 error
		})
	}
	fake.disassociateIamInstanceProfileReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileRequest(arg1 *ec2.DisassociateIamInstanceProfileInput) (*request.Request, *ec2.DisassociateIamInstanceProfileOutput) {
	fake.disassociateIamInstanceProfileRequestMutex.Lock()
	ret, specificReturn := fake.disassociateIamInstanceProfileRequestReturnsOnCall[len(fake.disassociateIamInstanceProfileRequestArgsForCall)]
	fake.disassociateIamInstanceProfileRequestArgsForCall = append(fake.disassociateIamInstanceProfileRequestArgsForCall, struct {
		arg1 *ec2.DisassociateIamInstanceProfileInput
	}{arg1})
	fake.recordInvocation("DisassociateIamInstanceProfileRequest", []interface{}{arg1})
	fake.disassociateIamInstanceProfileRequestMutex.Unlock()
	if fake.DisassociateIamInstanceProfileRequestStub != nil {
		return fake.DisassociateIamInstanceProfileRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateIamInstanceProfileRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileRequestCallCount() int {
	fake.disassociateIamInstanceProfileRequestMutex.RLock()
	defer fake.disassociateIamInstanceProfileRequestMutex.RUnlock()
	return len(fake.disassociateIamInstanceProfileRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileRequestCalls(stub func(*ec2.DisassociateIamInstanceProfileInput) (*request.Request, *ec2.DisassociateIamInstanceProfileOutput)) {
	fake.disassociateIamInstanceProfileRequestMutex.Lock()
	defer fake.disassociateIamInstanceProfileRequestMutex.Unlock()
	fake.DisassociateIamInstanceProfileRequestStub = stub
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileRequestArgsForCall(i int) *ec2.DisassociateIamInstanceProfileInput {
	fake.disassociateIamInstanceProfileRequestMutex.RLock()
	defer fake.disassociateIamInstanceProfileRequestMutex.RUnlock()
	argsForCall := fake.disassociateIamInstanceProfileRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileRequestReturns(result1 *request.Request, result2 *ec2.DisassociateIamInstanceProfileOutput) {
	fake.disassociateIamInstanceProfileRequestMutex.Lock()
	defer fake.disassociateIamInstanceProfileRequestMutex.Unlock()
	fake.DisassociateIamInstanceProfileRequestStub = nil
	fake.disassociateIamInstanceProfileRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateIamInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateIamInstanceProfileOutput) {
	fake.disassociateIamInstanceProfileRequestMutex.Lock()
	defer fake.disassociateIamInstanceProfileRequestMutex.Unlock()
	fake.DisassociateIamInstanceProfileRequestStub = nil
	if fake.disassociateIamInstanceProfileRequestReturnsOnCall == nil {
		fake.disassociateIamInstanceProfileRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateIamInstanceProfileOutput
		})
	}
	fake.disassociateIamInstanceProfileRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateIamInstanceProfileOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileWithContext(arg1 aws.Context, arg2 *ec2.DisassociateIamInstanceProfileInput, arg3 ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	fake.disassociateIamInstanceProfileWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateIamInstanceProfileWithContextReturnsOnCall[len(fake.disassociateIamInstanceProfileWithContextArgsForCall)]
	fake.disassociateIamInstanceProfileWithContextArgsForCall = append(fake.disassociateIamInstanceProfileWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateIamInstanceProfileInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateIamInstanceProfileWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateIamInstanceProfileWithContextMutex.Unlock()
	if fake.DisassociateIamInstanceProfileWithContextStub != nil {
		return fake.DisassociateIamInstanceProfileWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateIamInstanceProfileWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileWithContextCallCount() int {
	fake.disassociateIamInstanceProfileWithContextMutex.RLock()
	defer fake.disassociateIamInstanceProfileWithContextMutex.RUnlock()
	return len(fake.disassociateIamInstanceProfileWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileWithContextCalls(stub func(aws.Context, *ec2.DisassociateIamInstanceProfileInput, ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error)) {
	fake.disassociateIamInstanceProfileWithContextMutex.Lock()
	defer fake.disassociateIamInstanceProfileWithContextMutex.Unlock()
	fake.DisassociateIamInstanceProfileWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateIamInstanceProfileInput, []request.Option) {
	fake.disassociateIamInstanceProfileWithContextMutex.RLock()
	defer fake.disassociateIamInstanceProfileWithContextMutex.RUnlock()
	argsForCall := fake.disassociateIamInstanceProfileWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileWithContextReturns(result1 *ec2.DisassociateIamInstanceProfileOutput, result2 error) {
	fake.disassociateIamInstanceProfileWithContextMutex.Lock()
	defer fake.disassociateIamInstanceProfileWithContextMutex.Unlock()
	fake.DisassociateIamInstanceProfileWithContextStub = nil
	fake.disassociateIamInstanceProfileWithContextReturns = struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateIamInstanceProfileWithContextReturnsOnCall(i int, result1 *ec2.DisassociateIamInstanceProfileOutput, result2 error) {
	fake.disassociateIamInstanceProfileWithContextMutex.Lock()
	defer fake.disassociateIamInstanceProfileWithContextMutex.Unlock()
	fake.DisassociateIamInstanceProfileWithContextStub = nil
	if fake.disassociateIamInstanceProfileWithContextReturnsOnCall == nil {
		fake.disassociateIamInstanceProfileWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateIamInstanceProfileOutput
			result2 error
		})
	}
	fake.disassociateIamInstanceProfileWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateIamInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateRouteTable(arg1 *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	fake.disassociateRouteTableMutex.Lock()
	ret, specificReturn := fake.disassociateRouteTableReturnsOnCall[len(fake.disassociateRouteTableArgsForCall)]
	fake.disassociateRouteTableArgsForCall = append(fake.disassociateRouteTableArgsForCall, struct {
		arg1 *ec2.DisassociateRouteTableInput
	}{arg1})
	fake.recordInvocation("DisassociateRouteTable", []interface{}{arg1})
	fake.disassociateRouteTableMutex.Unlock()
	if fake.DisassociateRouteTableStub != nil {
		return fake.DisassociateRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateRouteTableCallCount() int {
	fake.disassociateRouteTableMutex.RLock()
	defer fake.disassociateRouteTableMutex.RUnlock()
	return len(fake.disassociateRouteTableArgsForCall)
}

func (fake *FakeEC2API) DisassociateRouteTableCalls(stub func(*ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error)) {
	fake.disassociateRouteTableMutex.Lock()
	defer fake.disassociateRouteTableMutex.Unlock()
	fake.DisassociateRouteTableStub = stub
}

func (fake *FakeEC2API) DisassociateRouteTableArgsForCall(i int) *ec2.DisassociateRouteTableInput {
	fake.disassociateRouteTableMutex.RLock()
	defer fake.disassociateRouteTableMutex.RUnlock()
	argsForCall := fake.disassociateRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateRouteTableReturns(result1 *ec2.DisassociateRouteTableOutput, result2 error) {
	fake.disassociateRouteTableMutex.Lock()
	defer fake.disassociateRouteTableMutex.Unlock()
	fake.DisassociateRouteTableStub = nil
	fake.disassociateRouteTableReturns = struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateRouteTableReturnsOnCall(i int, result1 *ec2.DisassociateRouteTableOutput, result2 error) {
	fake.disassociateRouteTableMutex.Lock()
	defer fake.disassociateRouteTableMutex.Unlock()
	fake.DisassociateRouteTableStub = nil
	if fake.disassociateRouteTableReturnsOnCall == nil {
		fake.disassociateRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateRouteTableOutput
			result2 error
		})
	}
	fake.disassociateRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateRouteTableRequest(arg1 *ec2.DisassociateRouteTableInput) (*request.Request, *ec2.DisassociateRouteTableOutput) {
	fake.disassociateRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.disassociateRouteTableRequestReturnsOnCall[len(fake.disassociateRouteTableRequestArgsForCall)]
	fake.disassociateRouteTableRequestArgsForCall = append(fake.disassociateRouteTableRequestArgsForCall, struct {
		arg1 *ec2.DisassociateRouteTableInput
	}{arg1})
	fake.recordInvocation("DisassociateRouteTableRequest", []interface{}{arg1})
	fake.disassociateRouteTableRequestMutex.Unlock()
	if fake.DisassociateRouteTableRequestStub != nil {
		return fake.DisassociateRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateRouteTableRequestCallCount() int {
	fake.disassociateRouteTableRequestMutex.RLock()
	defer fake.disassociateRouteTableRequestMutex.RUnlock()
	return len(fake.disassociateRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateRouteTableRequestCalls(stub func(*ec2.DisassociateRouteTableInput) (*request.Request, *ec2.DisassociateRouteTableOutput)) {
	fake.disassociateRouteTableRequestMutex.Lock()
	defer fake.disassociateRouteTableRequestMutex.Unlock()
	fake.DisassociateRouteTableRequestStub = stub
}

func (fake *FakeEC2API) DisassociateRouteTableRequestArgsForCall(i int) *ec2.DisassociateRouteTableInput {
	fake.disassociateRouteTableRequestMutex.RLock()
	defer fake.disassociateRouteTableRequestMutex.RUnlock()
	argsForCall := fake.disassociateRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateRouteTableRequestReturns(result1 *request.Request, result2 *ec2.DisassociateRouteTableOutput) {
	fake.disassociateRouteTableRequestMutex.Lock()
	defer fake.disassociateRouteTableRequestMutex.Unlock()
	fake.DisassociateRouteTableRequestStub = nil
	fake.disassociateRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateRouteTableOutput) {
	fake.disassociateRouteTableRequestMutex.Lock()
	defer fake.disassociateRouteTableRequestMutex.Unlock()
	fake.DisassociateRouteTableRequestStub = nil
	if fake.disassociateRouteTableRequestReturnsOnCall == nil {
		fake.disassociateRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateRouteTableOutput
		})
	}
	fake.disassociateRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateRouteTableWithContext(arg1 aws.Context, arg2 *ec2.DisassociateRouteTableInput, arg3 ...request.Option) (*ec2.DisassociateRouteTableOutput, error) {
	fake.disassociateRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateRouteTableWithContextReturnsOnCall[len(fake.disassociateRouteTableWithContextArgsForCall)]
	fake.disassociateRouteTableWithContextArgsForCall = append(fake.disassociateRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateRouteTableWithContextMutex.Unlock()
	if fake.DisassociateRouteTableWithContextStub != nil {
		return fake.DisassociateRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateRouteTableWithContextCallCount() int {
	fake.disassociateRouteTableWithContextMutex.RLock()
	defer fake.disassociateRouteTableWithContextMutex.RUnlock()
	return len(fake.disassociateRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateRouteTableWithContextCalls(stub func(aws.Context, *ec2.DisassociateRouteTableInput, ...request.Option) (*ec2.DisassociateRouteTableOutput, error)) {
	fake.disassociateRouteTableWithContextMutex.Lock()
	defer fake.disassociateRouteTableWithContextMutex.Unlock()
	fake.DisassociateRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateRouteTableInput, []request.Option) {
	fake.disassociateRouteTableWithContextMutex.RLock()
	defer fake.disassociateRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.disassociateRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateRouteTableWithContextReturns(result1 *ec2.DisassociateRouteTableOutput, result2 error) {
	fake.disassociateRouteTableWithContextMutex.Lock()
	defer fake.disassociateRouteTableWithContextMutex.Unlock()
	fake.DisassociateRouteTableWithContextStub = nil
	fake.disassociateRouteTableWithContextReturns = struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateRouteTableWithContextReturnsOnCall(i int, result1 *ec2.DisassociateRouteTableOutput, result2 error) {
	fake.disassociateRouteTableWithContextMutex.Lock()
	defer fake.disassociateRouteTableWithContextMutex.Unlock()
	fake.DisassociateRouteTableWithContextStub = nil
	if fake.disassociateRouteTableWithContextReturnsOnCall == nil {
		fake.disassociateRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateRouteTableOutput
			result2 error
		})
	}
	fake.disassociateRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlock(arg1 *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	fake.disassociateSubnetCidrBlockMutex.Lock()
	ret, specificReturn := fake.disassociateSubnetCidrBlockReturnsOnCall[len(fake.disassociateSubnetCidrBlockArgsForCall)]
	fake.disassociateSubnetCidrBlockArgsForCall = append(fake.disassociateSubnetCidrBlockArgsForCall, struct {
		arg1 *ec2.DisassociateSubnetCidrBlockInput
	}{arg1})
	fake.recordInvocation("DisassociateSubnetCidrBlock", []interface{}{arg1})
	fake.disassociateSubnetCidrBlockMutex.Unlock()
	if fake.DisassociateSubnetCidrBlockStub != nil {
		return fake.DisassociateSubnetCidrBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateSubnetCidrBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockCallCount() int {
	fake.disassociateSubnetCidrBlockMutex.RLock()
	defer fake.disassociateSubnetCidrBlockMutex.RUnlock()
	return len(fake.disassociateSubnetCidrBlockArgsForCall)
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockCalls(stub func(*ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error)) {
	fake.disassociateSubnetCidrBlockMutex.Lock()
	defer fake.disassociateSubnetCidrBlockMutex.Unlock()
	fake.DisassociateSubnetCidrBlockStub = stub
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockArgsForCall(i int) *ec2.DisassociateSubnetCidrBlockInput {
	fake.disassociateSubnetCidrBlockMutex.RLock()
	defer fake.disassociateSubnetCidrBlockMutex.RUnlock()
	argsForCall := fake.disassociateSubnetCidrBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockReturns(result1 *ec2.DisassociateSubnetCidrBlockOutput, result2 error) {
	fake.disassociateSubnetCidrBlockMutex.Lock()
	defer fake.disassociateSubnetCidrBlockMutex.Unlock()
	fake.DisassociateSubnetCidrBlockStub = nil
	fake.disassociateSubnetCidrBlockReturns = struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockReturnsOnCall(i int, result1 *ec2.DisassociateSubnetCidrBlockOutput, result2 error) {
	fake.disassociateSubnetCidrBlockMutex.Lock()
	defer fake.disassociateSubnetCidrBlockMutex.Unlock()
	fake.DisassociateSubnetCidrBlockStub = nil
	if fake.disassociateSubnetCidrBlockReturnsOnCall == nil {
		fake.disassociateSubnetCidrBlockReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateSubnetCidrBlockOutput
			result2 error
		})
	}
	fake.disassociateSubnetCidrBlockReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockRequest(arg1 *ec2.DisassociateSubnetCidrBlockInput) (*request.Request, *ec2.DisassociateSubnetCidrBlockOutput) {
	fake.disassociateSubnetCidrBlockRequestMutex.Lock()
	ret, specificReturn := fake.disassociateSubnetCidrBlockRequestReturnsOnCall[len(fake.disassociateSubnetCidrBlockRequestArgsForCall)]
	fake.disassociateSubnetCidrBlockRequestArgsForCall = append(fake.disassociateSubnetCidrBlockRequestArgsForCall, struct {
		arg1 *ec2.DisassociateSubnetCidrBlockInput
	}{arg1})
	fake.recordInvocation("DisassociateSubnetCidrBlockRequest", []interface{}{arg1})
	fake.disassociateSubnetCidrBlockRequestMutex.Unlock()
	if fake.DisassociateSubnetCidrBlockRequestStub != nil {
		return fake.DisassociateSubnetCidrBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateSubnetCidrBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockRequestCallCount() int {
	fake.disassociateSubnetCidrBlockRequestMutex.RLock()
	defer fake.disassociateSubnetCidrBlockRequestMutex.RUnlock()
	return len(fake.disassociateSubnetCidrBlockRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockRequestCalls(stub func(*ec2.DisassociateSubnetCidrBlockInput) (*request.Request, *ec2.DisassociateSubnetCidrBlockOutput)) {
	fake.disassociateSubnetCidrBlockRequestMutex.Lock()
	defer fake.disassociateSubnetCidrBlockRequestMutex.Unlock()
	fake.DisassociateSubnetCidrBlockRequestStub = stub
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockRequestArgsForCall(i int) *ec2.DisassociateSubnetCidrBlockInput {
	fake.disassociateSubnetCidrBlockRequestMutex.RLock()
	defer fake.disassociateSubnetCidrBlockRequestMutex.RUnlock()
	argsForCall := fake.disassociateSubnetCidrBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockRequestReturns(result1 *request.Request, result2 *ec2.DisassociateSubnetCidrBlockOutput) {
	fake.disassociateSubnetCidrBlockRequestMutex.Lock()
	defer fake.disassociateSubnetCidrBlockRequestMutex.Unlock()
	fake.DisassociateSubnetCidrBlockRequestStub = nil
	fake.disassociateSubnetCidrBlockRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateSubnetCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateSubnetCidrBlockOutput) {
	fake.disassociateSubnetCidrBlockRequestMutex.Lock()
	defer fake.disassociateSubnetCidrBlockRequestMutex.Unlock()
	fake.DisassociateSubnetCidrBlockRequestStub = nil
	if fake.disassociateSubnetCidrBlockRequestReturnsOnCall == nil {
		fake.disassociateSubnetCidrBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateSubnetCidrBlockOutput
		})
	}
	fake.disassociateSubnetCidrBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateSubnetCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockWithContext(arg1 aws.Context, arg2 *ec2.DisassociateSubnetCidrBlockInput, arg3 ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	fake.disassociateSubnetCidrBlockWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateSubnetCidrBlockWithContextReturnsOnCall[len(fake.disassociateSubnetCidrBlockWithContextArgsForCall)]
	fake.disassociateSubnetCidrBlockWithContextArgsForCall = append(fake.disassociateSubnetCidrBlockWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateSubnetCidrBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateSubnetCidrBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateSubnetCidrBlockWithContextMutex.Unlock()
	if fake.DisassociateSubnetCidrBlockWithContextStub != nil {
		return fake.DisassociateSubnetCidrBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateSubnetCidrBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockWithContextCallCount() int {
	fake.disassociateSubnetCidrBlockWithContextMutex.RLock()
	defer fake.disassociateSubnetCidrBlockWithContextMutex.RUnlock()
	return len(fake.disassociateSubnetCidrBlockWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockWithContextCalls(stub func(aws.Context, *ec2.DisassociateSubnetCidrBlockInput, ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error)) {
	fake.disassociateSubnetCidrBlockWithContextMutex.Lock()
	defer fake.disassociateSubnetCidrBlockWithContextMutex.Unlock()
	fake.DisassociateSubnetCidrBlockWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateSubnetCidrBlockInput, []request.Option) {
	fake.disassociateSubnetCidrBlockWithContextMutex.RLock()
	defer fake.disassociateSubnetCidrBlockWithContextMutex.RUnlock()
	argsForCall := fake.disassociateSubnetCidrBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockWithContextReturns(result1 *ec2.DisassociateSubnetCidrBlockOutput, result2 error) {
	fake.disassociateSubnetCidrBlockWithContextMutex.Lock()
	defer fake.disassociateSubnetCidrBlockWithContextMutex.Unlock()
	fake.DisassociateSubnetCidrBlockWithContextStub = nil
	fake.disassociateSubnetCidrBlockWithContextReturns = struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateSubnetCidrBlockWithContextReturnsOnCall(i int, result1 *ec2.DisassociateSubnetCidrBlockOutput, result2 error) {
	fake.disassociateSubnetCidrBlockWithContextMutex.Lock()
	defer fake.disassociateSubnetCidrBlockWithContextMutex.Unlock()
	fake.DisassociateSubnetCidrBlockWithContextStub = nil
	if fake.disassociateSubnetCidrBlockWithContextReturnsOnCall == nil {
		fake.disassociateSubnetCidrBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateSubnetCidrBlockOutput
			result2 error
		})
	}
	fake.disassociateSubnetCidrBlockWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateSubnetCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTable(arg1 *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	fake.disassociateTransitGatewayRouteTableMutex.Lock()
	ret, specificReturn := fake.disassociateTransitGatewayRouteTableReturnsOnCall[len(fake.disassociateTransitGatewayRouteTableArgsForCall)]
	fake.disassociateTransitGatewayRouteTableArgsForCall = append(fake.disassociateTransitGatewayRouteTableArgsForCall, struct {
		arg1 *ec2.DisassociateTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("DisassociateTransitGatewayRouteTable", []interface{}{arg1})
	fake.disassociateTransitGatewayRouteTableMutex.Unlock()
	if fake.DisassociateTransitGatewayRouteTableStub != nil {
		return fake.DisassociateTransitGatewayRouteTableStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateTransitGatewayRouteTableReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableCallCount() int {
	fake.disassociateTransitGatewayRouteTableMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableMutex.RUnlock()
	return len(fake.disassociateTransitGatewayRouteTableArgsForCall)
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableCalls(stub func(*ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)) {
	fake.disassociateTransitGatewayRouteTableMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableStub = stub
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableArgsForCall(i int) *ec2.DisassociateTransitGatewayRouteTableInput {
	fake.disassociateTransitGatewayRouteTableMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableMutex.RUnlock()
	argsForCall := fake.disassociateTransitGatewayRouteTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableReturns(result1 *ec2.DisassociateTransitGatewayRouteTableOutput, result2 error) {
	fake.disassociateTransitGatewayRouteTableMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableStub = nil
	fake.disassociateTransitGatewayRouteTableReturns = struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableReturnsOnCall(i int, result1 *ec2.DisassociateTransitGatewayRouteTableOutput, result2 error) {
	fake.disassociateTransitGatewayRouteTableMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableStub = nil
	if fake.disassociateTransitGatewayRouteTableReturnsOnCall == nil {
		fake.disassociateTransitGatewayRouteTableReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.disassociateTransitGatewayRouteTableReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableRequest(arg1 *ec2.DisassociateTransitGatewayRouteTableInput) (*request.Request, *ec2.DisassociateTransitGatewayRouteTableOutput) {
	fake.disassociateTransitGatewayRouteTableRequestMutex.Lock()
	ret, specificReturn := fake.disassociateTransitGatewayRouteTableRequestReturnsOnCall[len(fake.disassociateTransitGatewayRouteTableRequestArgsForCall)]
	fake.disassociateTransitGatewayRouteTableRequestArgsForCall = append(fake.disassociateTransitGatewayRouteTableRequestArgsForCall, struct {
		arg1 *ec2.DisassociateTransitGatewayRouteTableInput
	}{arg1})
	fake.recordInvocation("DisassociateTransitGatewayRouteTableRequest", []interface{}{arg1})
	fake.disassociateTransitGatewayRouteTableRequestMutex.Unlock()
	if fake.DisassociateTransitGatewayRouteTableRequestStub != nil {
		return fake.DisassociateTransitGatewayRouteTableRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateTransitGatewayRouteTableRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableRequestCallCount() int {
	fake.disassociateTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableRequestMutex.RUnlock()
	return len(fake.disassociateTransitGatewayRouteTableRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableRequestCalls(stub func(*ec2.DisassociateTransitGatewayRouteTableInput) (*request.Request, *ec2.DisassociateTransitGatewayRouteTableOutput)) {
	fake.disassociateTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableRequestMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableRequestStub = stub
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableRequestArgsForCall(i int) *ec2.DisassociateTransitGatewayRouteTableInput {
	fake.disassociateTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableRequestMutex.RUnlock()
	argsForCall := fake.disassociateTransitGatewayRouteTableRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableRequestReturns(result1 *request.Request, result2 *ec2.DisassociateTransitGatewayRouteTableOutput) {
	fake.disassociateTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableRequestMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableRequestStub = nil
	fake.disassociateTransitGatewayRouteTableRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateTransitGatewayRouteTableOutput) {
	fake.disassociateTransitGatewayRouteTableRequestMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableRequestMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableRequestStub = nil
	if fake.disassociateTransitGatewayRouteTableRequestReturnsOnCall == nil {
		fake.disassociateTransitGatewayRouteTableRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateTransitGatewayRouteTableOutput
		})
	}
	fake.disassociateTransitGatewayRouteTableRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateTransitGatewayRouteTableOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableWithContext(arg1 aws.Context, arg2 *ec2.DisassociateTransitGatewayRouteTableInput, arg3 ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	fake.disassociateTransitGatewayRouteTableWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateTransitGatewayRouteTableWithContextReturnsOnCall[len(fake.disassociateTransitGatewayRouteTableWithContextArgsForCall)]
	fake.disassociateTransitGatewayRouteTableWithContextArgsForCall = append(fake.disassociateTransitGatewayRouteTableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateTransitGatewayRouteTableInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateTransitGatewayRouteTableWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateTransitGatewayRouteTableWithContextMutex.Unlock()
	if fake.DisassociateTransitGatewayRouteTableWithContextStub != nil {
		return fake.DisassociateTransitGatewayRouteTableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateTransitGatewayRouteTableWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableWithContextCallCount() int {
	fake.disassociateTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableWithContextMutex.RUnlock()
	return len(fake.disassociateTransitGatewayRouteTableWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableWithContextCalls(stub func(aws.Context, *ec2.DisassociateTransitGatewayRouteTableInput, ...request.Option) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)) {
	fake.disassociateTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateTransitGatewayRouteTableInput, []request.Option) {
	fake.disassociateTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableWithContextMutex.RUnlock()
	argsForCall := fake.disassociateTransitGatewayRouteTableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableWithContextReturns(result1 *ec2.DisassociateTransitGatewayRouteTableOutput, result2 error) {
	fake.disassociateTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableWithContextStub = nil
	fake.disassociateTransitGatewayRouteTableWithContextReturns = struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateTransitGatewayRouteTableWithContextReturnsOnCall(i int, result1 *ec2.DisassociateTransitGatewayRouteTableOutput, result2 error) {
	fake.disassociateTransitGatewayRouteTableWithContextMutex.Lock()
	defer fake.disassociateTransitGatewayRouteTableWithContextMutex.Unlock()
	fake.DisassociateTransitGatewayRouteTableWithContextStub = nil
	if fake.disassociateTransitGatewayRouteTableWithContextReturnsOnCall == nil {
		fake.disassociateTransitGatewayRouteTableWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateTransitGatewayRouteTableOutput
			result2 error
		})
	}
	fake.disassociateTransitGatewayRouteTableWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateTransitGatewayRouteTableOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateVpcCidrBlock(arg1 *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	fake.disassociateVpcCidrBlockMutex.Lock()
	ret, specificReturn := fake.disassociateVpcCidrBlockReturnsOnCall[len(fake.disassociateVpcCidrBlockArgsForCall)]
	fake.disassociateVpcCidrBlockArgsForCall = append(fake.disassociateVpcCidrBlockArgsForCall, struct {
		arg1 *ec2.DisassociateVpcCidrBlockInput
	}{arg1})
	fake.recordInvocation("DisassociateVpcCidrBlock", []interface{}{arg1})
	fake.disassociateVpcCidrBlockMutex.Unlock()
	if fake.DisassociateVpcCidrBlockStub != nil {
		return fake.DisassociateVpcCidrBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateVpcCidrBlockReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockCallCount() int {
	fake.disassociateVpcCidrBlockMutex.RLock()
	defer fake.disassociateVpcCidrBlockMutex.RUnlock()
	return len(fake.disassociateVpcCidrBlockArgsForCall)
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockCalls(stub func(*ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error)) {
	fake.disassociateVpcCidrBlockMutex.Lock()
	defer fake.disassociateVpcCidrBlockMutex.Unlock()
	fake.DisassociateVpcCidrBlockStub = stub
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockArgsForCall(i int) *ec2.DisassociateVpcCidrBlockInput {
	fake.disassociateVpcCidrBlockMutex.RLock()
	defer fake.disassociateVpcCidrBlockMutex.RUnlock()
	argsForCall := fake.disassociateVpcCidrBlockArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockReturns(result1 *ec2.DisassociateVpcCidrBlockOutput, result2 error) {
	fake.disassociateVpcCidrBlockMutex.Lock()
	defer fake.disassociateVpcCidrBlockMutex.Unlock()
	fake.DisassociateVpcCidrBlockStub = nil
	fake.disassociateVpcCidrBlockReturns = struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockReturnsOnCall(i int, result1 *ec2.DisassociateVpcCidrBlockOutput, result2 error) {
	fake.disassociateVpcCidrBlockMutex.Lock()
	defer fake.disassociateVpcCidrBlockMutex.Unlock()
	fake.DisassociateVpcCidrBlockStub = nil
	if fake.disassociateVpcCidrBlockReturnsOnCall == nil {
		fake.disassociateVpcCidrBlockReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateVpcCidrBlockOutput
			result2 error
		})
	}
	fake.disassociateVpcCidrBlockReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockRequest(arg1 *ec2.DisassociateVpcCidrBlockInput) (*request.Request, *ec2.DisassociateVpcCidrBlockOutput) {
	fake.disassociateVpcCidrBlockRequestMutex.Lock()
	ret, specificReturn := fake.disassociateVpcCidrBlockRequestReturnsOnCall[len(fake.disassociateVpcCidrBlockRequestArgsForCall)]
	fake.disassociateVpcCidrBlockRequestArgsForCall = append(fake.disassociateVpcCidrBlockRequestArgsForCall, struct {
		arg1 *ec2.DisassociateVpcCidrBlockInput
	}{arg1})
	fake.recordInvocation("DisassociateVpcCidrBlockRequest", []interface{}{arg1})
	fake.disassociateVpcCidrBlockRequestMutex.Unlock()
	if fake.DisassociateVpcCidrBlockRequestStub != nil {
		return fake.DisassociateVpcCidrBlockRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateVpcCidrBlockRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockRequestCallCount() int {
	fake.disassociateVpcCidrBlockRequestMutex.RLock()
	defer fake.disassociateVpcCidrBlockRequestMutex.RUnlock()
	return len(fake.disassociateVpcCidrBlockRequestArgsForCall)
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockRequestCalls(stub func(*ec2.DisassociateVpcCidrBlockInput) (*request.Request, *ec2.DisassociateVpcCidrBlockOutput)) {
	fake.disassociateVpcCidrBlockRequestMutex.Lock()
	defer fake.disassociateVpcCidrBlockRequestMutex.Unlock()
	fake.DisassociateVpcCidrBlockRequestStub = stub
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockRequestArgsForCall(i int) *ec2.DisassociateVpcCidrBlockInput {
	fake.disassociateVpcCidrBlockRequestMutex.RLock()
	defer fake.disassociateVpcCidrBlockRequestMutex.RUnlock()
	argsForCall := fake.disassociateVpcCidrBlockRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockRequestReturns(result1 *request.Request, result2 *ec2.DisassociateVpcCidrBlockOutput) {
	fake.disassociateVpcCidrBlockRequestMutex.Lock()
	defer fake.disassociateVpcCidrBlockRequestMutex.Unlock()
	fake.DisassociateVpcCidrBlockRequestStub = nil
	fake.disassociateVpcCidrBlockRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.DisassociateVpcCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.DisassociateVpcCidrBlockOutput) {
	fake.disassociateVpcCidrBlockRequestMutex.Lock()
	defer fake.disassociateVpcCidrBlockRequestMutex.Unlock()
	fake.DisassociateVpcCidrBlockRequestStub = nil
	if fake.disassociateVpcCidrBlockRequestReturnsOnCall == nil {
		fake.disassociateVpcCidrBlockRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.DisassociateVpcCidrBlockOutput
		})
	}
	fake.disassociateVpcCidrBlockRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.DisassociateVpcCidrBlockOutput
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockWithContext(arg1 aws.Context, arg2 *ec2.DisassociateVpcCidrBlockInput, arg3 ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	fake.disassociateVpcCidrBlockWithContextMutex.Lock()
	ret, specificReturn := fake.disassociateVpcCidrBlockWithContextReturnsOnCall[len(fake.disassociateVpcCidrBlockWithContextArgsForCall)]
	fake.disassociateVpcCidrBlockWithContextArgsForCall = append(fake.disassociateVpcCidrBlockWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DisassociateVpcCidrBlockInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisassociateVpcCidrBlockWithContext", []interface{}{arg1, arg2, arg3})
	fake.disassociateVpcCidrBlockWithContextMutex.Unlock()
	if fake.DisassociateVpcCidrBlockWithContextStub != nil {
		return fake.DisassociateVpcCidrBlockWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disassociateVpcCidrBlockWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockWithContextCallCount() int {
	fake.disassociateVpcCidrBlockWithContextMutex.RLock()
	defer fake.disassociateVpcCidrBlockWithContextMutex.RUnlock()
	return len(fake.disassociateVpcCidrBlockWithContextArgsForCall)
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockWithContextCalls(stub func(aws.Context, *ec2.DisassociateVpcCidrBlockInput, ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error)) {
	fake.disassociateVpcCidrBlockWithContextMutex.Lock()
	defer fake.disassociateVpcCidrBlockWithContextMutex.Unlock()
	fake.DisassociateVpcCidrBlockWithContextStub = stub
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockWithContextArgsForCall(i int) (aws.Context, *ec2.DisassociateVpcCidrBlockInput, []request.Option) {
	fake.disassociateVpcCidrBlockWithContextMutex.RLock()
	defer fake.disassociateVpcCidrBlockWithContextMutex.RUnlock()
	argsForCall := fake.disassociateVpcCidrBlockWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockWithContextReturns(result1 *ec2.DisassociateVpcCidrBlockOutput, result2 error) {
	fake.disassociateVpcCidrBlockWithContextMutex.Lock()
	defer fake.disassociateVpcCidrBlockWithContextMutex.Unlock()
	fake.DisassociateVpcCidrBlockWithContextStub = nil
	fake.disassociateVpcCidrBlockWithContextReturns = struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DisassociateVpcCidrBlockWithContextReturnsOnCall(i int, result1 *ec2.DisassociateVpcCidrBlockOutput, result2 error) {
	fake.disassociateVpcCidrBlockWithContextMutex.Lock()
	defer fake.disassociateVpcCidrBlockWithContextMutex.Unlock()
	fake.DisassociateVpcCidrBlockWithContextStub = nil
	if fake.disassociateVpcCidrBlockWithContextReturnsOnCall == nil {
		fake.disassociateVpcCidrBlockWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.DisassociateVpcCidrBlockOutput
			result2 error
		})
	}
	fake.disassociateVpcCidrBlockWithContextReturnsOnCall[i] = struct {
		result1 *ec2.DisassociateVpcCidrBlockOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagation(arg1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	fake.enableTransitGatewayRouteTablePropagationMutex.Lock()
	ret, specificReturn := fake.enableTransitGatewayRouteTablePropagationReturnsOnCall[len(fake.enableTransitGatewayRouteTablePropagationArgsForCall)]
	fake.enableTransitGatewayRouteTablePropagationArgsForCall = append(fake.enableTransitGatewayRouteTablePropagationArgsForCall, struct {
		arg1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}{arg1})
	fake.recordInvocation("EnableTransitGatewayRouteTablePropagation", []interface{}{arg1})
	fake.enableTransitGatewayRouteTablePropagationMutex.Unlock()
	if fake.EnableTransitGatewayRouteTablePropagationStub != nil {
		return fake.EnableTransitGatewayRouteTablePropagationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableTransitGatewayRouteTablePropagationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationCallCount() int {
	fake.enableTransitGatewayRouteTablePropagationMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationMutex.RUnlock()
	return len(fake.enableTransitGatewayRouteTablePropagationArgsForCall)
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationCalls(stub func(*ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)) {
	fake.enableTransitGatewayRouteTablePropagationMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationStub = stub
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationArgsForCall(i int) *ec2.EnableTransitGatewayRouteTablePropagationInput {
	fake.enableTransitGatewayRouteTablePropagationMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationMutex.RUnlock()
	argsForCall := fake.enableTransitGatewayRouteTablePropagationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationReturns(result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.enableTransitGatewayRouteTablePropagationMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationStub = nil
	fake.enableTransitGatewayRouteTablePropagationReturns = struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationReturnsOnCall(i int, result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.enableTransitGatewayRouteTablePropagationMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationStub = nil
	if fake.enableTransitGatewayRouteTablePropagationReturnsOnCall == nil {
		fake.enableTransitGatewayRouteTablePropagationReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
			result2 error
		})
	}
	fake.enableTransitGatewayRouteTablePropagationReturnsOnCall[i] = struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationRequest(arg1 *ec2.EnableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	ret, specificReturn := fake.enableTransitGatewayRouteTablePropagationRequestReturnsOnCall[len(fake.enableTransitGatewayRouteTablePropagationRequestArgsForCall)]
	fake.enableTransitGatewayRouteTablePropagationRequestArgsForCall = append(fake.enableTransitGatewayRouteTablePropagationRequestArgsForCall, struct {
		arg1 *ec2.EnableTransitGatewayRouteTablePropagationInput
	}{arg1})
	fake.recordInvocation("EnableTransitGatewayRouteTablePropagationRequest", []interface{}{arg1})
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	if fake.EnableTransitGatewayRouteTablePropagationRequestStub != nil {
		return fake.EnableTransitGatewayRouteTablePropagationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableTransitGatewayRouteTablePropagationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationRequestCallCount() int {
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationRequestMutex.RUnlock()
	return len(fake.enableTransitGatewayRouteTablePropagationRequestArgsForCall)
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationRequestCalls(stub func(*ec2.EnableTransitGatewayRouteTablePropagationInput) (*request.Request, *ec2.EnableTransitGatewayRouteTablePropagationOutput)) {
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationRequestStub = stub
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationRequestArgsForCall(i int) *ec2.EnableTransitGatewayRouteTablePropagationInput {
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationRequestMutex.RUnlock()
	argsForCall := fake.enableTransitGatewayRouteTablePropagationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationRequestReturns(result1 *request.Request, result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationRequestStub = nil
	fake.enableTransitGatewayRouteTablePropagationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationRequestMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationRequestStub = nil
	if fake.enableTransitGatewayRouteTablePropagationRequestReturnsOnCall == nil {
		fake.enableTransitGatewayRouteTablePropagationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		})
	}
	fake.enableTransitGatewayRouteTablePropagationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationWithContext(arg1 aws.Context, arg2 *ec2.EnableTransitGatewayRouteTablePropagationInput, arg3 ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	ret, specificReturn := fake.enableTransitGatewayRouteTablePropagationWithContextReturnsOnCall[len(fake.enableTransitGatewayRouteTablePropagationWithContextArgsForCall)]
	fake.enableTransitGatewayRouteTablePropagationWithContextArgsForCall = append(fake.enableTransitGatewayRouteTablePropagationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.EnableTransitGatewayRouteTablePropagationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableTransitGatewayRouteTablePropagationWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	if fake.EnableTransitGatewayRouteTablePropagationWithContextStub != nil {
		return fake.EnableTransitGatewayRouteTablePropagationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableTransitGatewayRouteTablePropagationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationWithContextCallCount() int {
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationWithContextMutex.RUnlock()
	return len(fake.enableTransitGatewayRouteTablePropagationWithContextArgsForCall)
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationWithContextCalls(stub func(aws.Context, *ec2.EnableTransitGatewayRouteTablePropagationInput, ...request.Option) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)) {
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationWithContextStub = stub
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationWithContextArgsForCall(i int) (aws.Context, *ec2.EnableTransitGatewayRouteTablePropagationInput, []request.Option) {
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationWithContextMutex.RUnlock()
	argsForCall := fake.enableTransitGatewayRouteTablePropagationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationWithContextReturns(result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationWithContextStub = nil
	fake.enableTransitGatewayRouteTablePropagationWithContextReturns = struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableTransitGatewayRouteTablePropagationWithContextReturnsOnCall(i int, result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput, result2 error) {
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Lock()
	defer fake.enableTransitGatewayRouteTablePropagationWithContextMutex.Unlock()
	fake.EnableTransitGatewayRouteTablePropagationWithContextStub = nil
	if fake.enableTransitGatewayRouteTablePropagationWithContextReturnsOnCall == nil {
		fake.enableTransitGatewayRouteTablePropagationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
			result2 error
		})
	}
	fake.enableTransitGatewayRouteTablePropagationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVgwRoutePropagation(arg1 *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
	fake.enableVgwRoutePropagationMutex.Lock()
	ret, specificReturn := fake.enableVgwRoutePropagationReturnsOnCall[len(fake.enableVgwRoutePropagationArgsForCall)]
	fake.enableVgwRoutePropagationArgsForCall = append(fake.enableVgwRoutePropagationArgsForCall, struct {
		arg1 *ec2.EnableVgwRoutePropagationInput
	}{arg1})
	fake.recordInvocation("EnableVgwRoutePropagation", []interface{}{arg1})
	fake.enableVgwRoutePropagationMutex.Unlock()
	if fake.EnableVgwRoutePropagationStub != nil {
		return fake.EnableVgwRoutePropagationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVgwRoutePropagationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVgwRoutePropagationCallCount() int {
	fake.enableVgwRoutePropagationMutex.RLock()
	defer fake.enableVgwRoutePropagationMutex.RUnlock()
	return len(fake.enableVgwRoutePropagationArgsForCall)
}

func (fake *FakeEC2API) EnableVgwRoutePropagationCalls(stub func(*ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error)) {
	fake.enableVgwRoutePropagationMutex.Lock()
	defer fake.enableVgwRoutePropagationMutex.Unlock()
	fake.EnableVgwRoutePropagationStub = stub
}

func (fake *FakeEC2API) EnableVgwRoutePropagationArgsForCall(i int) *ec2.EnableVgwRoutePropagationInput {
	fake.enableVgwRoutePropagationMutex.RLock()
	defer fake.enableVgwRoutePropagationMutex.RUnlock()
	argsForCall := fake.enableVgwRoutePropagationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVgwRoutePropagationReturns(result1 *ec2.EnableVgwRoutePropagationOutput, result2 error) {
	fake.enableVgwRoutePropagationMutex.Lock()
	defer fake.enableVgwRoutePropagationMutex.Unlock()
	fake.EnableVgwRoutePropagationStub = nil
	fake.enableVgwRoutePropagationReturns = struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVgwRoutePropagationReturnsOnCall(i int, result1 *ec2.EnableVgwRoutePropagationOutput, result2 error) {
	fake.enableVgwRoutePropagationMutex.Lock()
	defer fake.enableVgwRoutePropagationMutex.Unlock()
	fake.EnableVgwRoutePropagationStub = nil
	if fake.enableVgwRoutePropagationReturnsOnCall == nil {
		fake.enableVgwRoutePropagationReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVgwRoutePropagationOutput
			result2 error
		})
	}
	fake.enableVgwRoutePropagationReturnsOnCall[i] = struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVgwRoutePropagationRequest(arg1 *ec2.EnableVgwRoutePropagationInput) (*request.Request, *ec2.EnableVgwRoutePropagationOutput) {
	fake.enableVgwRoutePropagationRequestMutex.Lock()
	ret, specificReturn := fake.enableVgwRoutePropagationRequestReturnsOnCall[len(fake.enableVgwRoutePropagationRequestArgsForCall)]
	fake.enableVgwRoutePropagationRequestArgsForCall = append(fake.enableVgwRoutePropagationRequestArgsForCall, struct {
		arg1 *ec2.EnableVgwRoutePropagationInput
	}{arg1})
	fake.recordInvocation("EnableVgwRoutePropagationRequest", []interface{}{arg1})
	fake.enableVgwRoutePropagationRequestMutex.Unlock()
	if fake.EnableVgwRoutePropagationRequestStub != nil {
		return fake.EnableVgwRoutePropagationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVgwRoutePropagationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVgwRoutePropagationRequestCallCount() int {
	fake.enableVgwRoutePropagationRequestMutex.RLock()
	defer fake.enableVgwRoutePropagationRequestMutex.RUnlock()
	return len(fake.enableVgwRoutePropagationRequestArgsForCall)
}

func (fake *FakeEC2API) EnableVgwRoutePropagationRequestCalls(stub func(*ec2.EnableVgwRoutePropagationInput) (*request.Request, *ec2.EnableVgwRoutePropagationOutput)) {
	fake.enableVgwRoutePropagationRequestMutex.Lock()
	defer fake.enableVgwRoutePropagationRequestMutex.Unlock()
	fake.EnableVgwRoutePropagationRequestStub = stub
}

func (fake *FakeEC2API) EnableVgwRoutePropagationRequestArgsForCall(i int) *ec2.EnableVgwRoutePropagationInput {
	fake.enableVgwRoutePropagationRequestMutex.RLock()
	defer fake.enableVgwRoutePropagationRequestMutex.RUnlock()
	argsForCall := fake.enableVgwRoutePropagationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVgwRoutePropagationRequestReturns(result1 *request.Request, result2 *ec2.EnableVgwRoutePropagationOutput) {
	fake.enableVgwRoutePropagationRequestMutex.Lock()
	defer fake.enableVgwRoutePropagationRequestMutex.Unlock()
	fake.EnableVgwRoutePropagationRequestStub = nil
	fake.enableVgwRoutePropagationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.EnableVgwRoutePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVgwRoutePropagationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.EnableVgwRoutePropagationOutput) {
	fake.enableVgwRoutePropagationRequestMutex.Lock()
	defer fake.enableVgwRoutePropagationRequestMutex.Unlock()
	fake.EnableVgwRoutePropagationRequestStub = nil
	if fake.enableVgwRoutePropagationRequestReturnsOnCall == nil {
		fake.enableVgwRoutePropagationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.EnableVgwRoutePropagationOutput
		})
	}
	fake.enableVgwRoutePropagationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.EnableVgwRoutePropagationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVgwRoutePropagationWithContext(arg1 aws.Context, arg2 *ec2.EnableVgwRoutePropagationInput, arg3 ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error) {
	fake.enableVgwRoutePropagationWithContextMutex.Lock()
	ret, specificReturn := fake.enableVgwRoutePropagationWithContextReturnsOnCall[len(fake.enableVgwRoutePropagationWithContextArgsForCall)]
	fake.enableVgwRoutePropagationWithContextArgsForCall = append(fake.enableVgwRoutePropagationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.EnableVgwRoutePropagationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableVgwRoutePropagationWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableVgwRoutePropagationWithContextMutex.Unlock()
	if fake.EnableVgwRoutePropagationWithContextStub != nil {
		return fake.EnableVgwRoutePropagationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVgwRoutePropagationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVgwRoutePropagationWithContextCallCount() int {
	fake.enableVgwRoutePropagationWithContextMutex.RLock()
	defer fake.enableVgwRoutePropagationWithContextMutex.RUnlock()
	return len(fake.enableVgwRoutePropagationWithContextArgsForCall)
}

func (fake *FakeEC2API) EnableVgwRoutePropagationWithContextCalls(stub func(aws.Context, *ec2.EnableVgwRoutePropagationInput, ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error)) {
	fake.enableVgwRoutePropagationWithContextMutex.Lock()
	defer fake.enableVgwRoutePropagationWithContextMutex.Unlock()
	fake.EnableVgwRoutePropagationWithContextStub = stub
}

func (fake *FakeEC2API) EnableVgwRoutePropagationWithContextArgsForCall(i int) (aws.Context, *ec2.EnableVgwRoutePropagationInput, []request.Option) {
	fake.enableVgwRoutePropagationWithContextMutex.RLock()
	defer fake.enableVgwRoutePropagationWithContextMutex.RUnlock()
	argsForCall := fake.enableVgwRoutePropagationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) EnableVgwRoutePropagationWithContextReturns(result1 *ec2.EnableVgwRoutePropagationOutput, result2 error) {
	fake.enableVgwRoutePropagationWithContextMutex.Lock()
	defer fake.enableVgwRoutePropagationWithContextMutex.Unlock()
	fake.EnableVgwRoutePropagationWithContextStub = nil
	fake.enableVgwRoutePropagationWithContextReturns = struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVgwRoutePropagationWithContextReturnsOnCall(i int, result1 *ec2.EnableVgwRoutePropagationOutput, result2 error) {
	fake.enableVgwRoutePropagationWithContextMutex.Lock()
	defer fake.enableVgwRoutePropagationWithContextMutex.Unlock()
	fake.EnableVgwRoutePropagationWithContextStub = nil
	if fake.enableVgwRoutePropagationWithContextReturnsOnCall == nil {
		fake.enableVgwRoutePropagationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVgwRoutePropagationOutput
			result2 error
		})
	}
	fake.enableVgwRoutePropagationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.EnableVgwRoutePropagationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVolumeIO(arg1 *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	fake.enableVolumeIOMutex.Lock()
	ret, specificReturn := fake.enableVolumeIOReturnsOnCall[len(fake.enableVolumeIOArgsForCall)]
	fake.enableVolumeIOArgsForCall = append(fake.enableVolumeIOArgsForCall, struct {
		arg1 *ec2.EnableVolumeIOInput
	}{arg1})
	fake.recordInvocation("EnableVolumeIO", []interface{}{arg1})
	fake.enableVolumeIOMutex.Unlock()
	if fake.EnableVolumeIOStub != nil {
		return fake.EnableVolumeIOStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVolumeIOReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVolumeIOCallCount() int {
	fake.enableVolumeIOMutex.RLock()
	defer fake.enableVolumeIOMutex.RUnlock()
	return len(fake.enableVolumeIOArgsForCall)
}

func (fake *FakeEC2API) EnableVolumeIOCalls(stub func(*ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error)) {
	fake.enableVolumeIOMutex.Lock()
	defer fake.enableVolumeIOMutex.Unlock()
	fake.EnableVolumeIOStub = stub
}

func (fake *FakeEC2API) EnableVolumeIOArgsForCall(i int) *ec2.EnableVolumeIOInput {
	fake.enableVolumeIOMutex.RLock()
	defer fake.enableVolumeIOMutex.RUnlock()
	argsForCall := fake.enableVolumeIOArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVolumeIOReturns(result1 *ec2.EnableVolumeIOOutput, result2 error) {
	fake.enableVolumeIOMutex.Lock()
	defer fake.enableVolumeIOMutex.Unlock()
	fake.EnableVolumeIOStub = nil
	fake.enableVolumeIOReturns = struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVolumeIOReturnsOnCall(i int, result1 *ec2.EnableVolumeIOOutput, result2 error) {
	fake.enableVolumeIOMutex.Lock()
	defer fake.enableVolumeIOMutex.Unlock()
	fake.EnableVolumeIOStub = nil
	if fake.enableVolumeIOReturnsOnCall == nil {
		fake.enableVolumeIOReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVolumeIOOutput
			result2 error
		})
	}
	fake.enableVolumeIOReturnsOnCall[i] = struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVolumeIORequest(arg1 *ec2.EnableVolumeIOInput) (*request.Request, *ec2.EnableVolumeIOOutput) {
	fake.enableVolumeIORequestMutex.Lock()
	ret, specificReturn := fake.enableVolumeIORequestReturnsOnCall[len(fake.enableVolumeIORequestArgsForCall)]
	fake.enableVolumeIORequestArgsForCall = append(fake.enableVolumeIORequestArgsForCall, struct {
		arg1 *ec2.EnableVolumeIOInput
	}{arg1})
	fake.recordInvocation("EnableVolumeIORequest", []interface{}{arg1})
	fake.enableVolumeIORequestMutex.Unlock()
	if fake.EnableVolumeIORequestStub != nil {
		return fake.EnableVolumeIORequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVolumeIORequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVolumeIORequestCallCount() int {
	fake.enableVolumeIORequestMutex.RLock()
	defer fake.enableVolumeIORequestMutex.RUnlock()
	return len(fake.enableVolumeIORequestArgsForCall)
}

func (fake *FakeEC2API) EnableVolumeIORequestCalls(stub func(*ec2.EnableVolumeIOInput) (*request.Request, *ec2.EnableVolumeIOOutput)) {
	fake.enableVolumeIORequestMutex.Lock()
	defer fake.enableVolumeIORequestMutex.Unlock()
	fake.EnableVolumeIORequestStub = stub
}

func (fake *FakeEC2API) EnableVolumeIORequestArgsForCall(i int) *ec2.EnableVolumeIOInput {
	fake.enableVolumeIORequestMutex.RLock()
	defer fake.enableVolumeIORequestMutex.RUnlock()
	argsForCall := fake.enableVolumeIORequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVolumeIORequestReturns(result1 *request.Request, result2 *ec2.EnableVolumeIOOutput) {
	fake.enableVolumeIORequestMutex.Lock()
	defer fake.enableVolumeIORequestMutex.Unlock()
	fake.EnableVolumeIORequestStub = nil
	fake.enableVolumeIORequestReturns = struct {
		result1 *request.Request
		result2 *ec2.EnableVolumeIOOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVolumeIORequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.EnableVolumeIOOutput) {
	fake.enableVolumeIORequestMutex.Lock()
	defer fake.enableVolumeIORequestMutex.Unlock()
	fake.EnableVolumeIORequestStub = nil
	if fake.enableVolumeIORequestReturnsOnCall == nil {
		fake.enableVolumeIORequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.EnableVolumeIOOutput
		})
	}
	fake.enableVolumeIORequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.EnableVolumeIOOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVolumeIOWithContext(arg1 aws.Context, arg2 *ec2.EnableVolumeIOInput, arg3 ...request.Option) (*ec2.EnableVolumeIOOutput, error) {
	fake.enableVolumeIOWithContextMutex.Lock()
	ret, specificReturn := fake.enableVolumeIOWithContextReturnsOnCall[len(fake.enableVolumeIOWithContextArgsForCall)]
	fake.enableVolumeIOWithContextArgsForCall = append(fake.enableVolumeIOWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.EnableVolumeIOInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableVolumeIOWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableVolumeIOWithContextMutex.Unlock()
	if fake.EnableVolumeIOWithContextStub != nil {
		return fake.EnableVolumeIOWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVolumeIOWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVolumeIOWithContextCallCount() int {
	fake.enableVolumeIOWithContextMutex.RLock()
	defer fake.enableVolumeIOWithContextMutex.RUnlock()
	return len(fake.enableVolumeIOWithContextArgsForCall)
}

func (fake *FakeEC2API) EnableVolumeIOWithContextCalls(stub func(aws.Context, *ec2.EnableVolumeIOInput, ...request.Option) (*ec2.EnableVolumeIOOutput, error)) {
	fake.enableVolumeIOWithContextMutex.Lock()
	defer fake.enableVolumeIOWithContextMutex.Unlock()
	fake.EnableVolumeIOWithContextStub = stub
}

func (fake *FakeEC2API) EnableVolumeIOWithContextArgsForCall(i int) (aws.Context, *ec2.EnableVolumeIOInput, []request.Option) {
	fake.enableVolumeIOWithContextMutex.RLock()
	defer fake.enableVolumeIOWithContextMutex.RUnlock()
	argsForCall := fake.enableVolumeIOWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) EnableVolumeIOWithContextReturns(result1 *ec2.EnableVolumeIOOutput, result2 error) {
	fake.enableVolumeIOWithContextMutex.Lock()
	defer fake.enableVolumeIOWithContextMutex.Unlock()
	fake.EnableVolumeIOWithContextStub = nil
	fake.enableVolumeIOWithContextReturns = struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVolumeIOWithContextReturnsOnCall(i int, result1 *ec2.EnableVolumeIOOutput, result2 error) {
	fake.enableVolumeIOWithContextMutex.Lock()
	defer fake.enableVolumeIOWithContextMutex.Unlock()
	fake.EnableVolumeIOWithContextStub = nil
	if fake.enableVolumeIOWithContextReturnsOnCall == nil {
		fake.enableVolumeIOWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVolumeIOOutput
			result2 error
		})
	}
	fake.enableVolumeIOWithContextReturnsOnCall[i] = struct {
		result1 *ec2.EnableVolumeIOOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLink(arg1 *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
	fake.enableVpcClassicLinkMutex.Lock()
	ret, specificReturn := fake.enableVpcClassicLinkReturnsOnCall[len(fake.enableVpcClassicLinkArgsForCall)]
	fake.enableVpcClassicLinkArgsForCall = append(fake.enableVpcClassicLinkArgsForCall, struct {
		arg1 *ec2.EnableVpcClassicLinkInput
	}{arg1})
	fake.recordInvocation("EnableVpcClassicLink", []interface{}{arg1})
	fake.enableVpcClassicLinkMutex.Unlock()
	if fake.EnableVpcClassicLinkStub != nil {
		return fake.EnableVpcClassicLinkStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVpcClassicLinkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVpcClassicLinkCallCount() int {
	fake.enableVpcClassicLinkMutex.RLock()
	defer fake.enableVpcClassicLinkMutex.RUnlock()
	return len(fake.enableVpcClassicLinkArgsForCall)
}

func (fake *FakeEC2API) EnableVpcClassicLinkCalls(stub func(*ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error)) {
	fake.enableVpcClassicLinkMutex.Lock()
	defer fake.enableVpcClassicLinkMutex.Unlock()
	fake.EnableVpcClassicLinkStub = stub
}

func (fake *FakeEC2API) EnableVpcClassicLinkArgsForCall(i int) *ec2.EnableVpcClassicLinkInput {
	fake.enableVpcClassicLinkMutex.RLock()
	defer fake.enableVpcClassicLinkMutex.RUnlock()
	argsForCall := fake.enableVpcClassicLinkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVpcClassicLinkReturns(result1 *ec2.EnableVpcClassicLinkOutput, result2 error) {
	fake.enableVpcClassicLinkMutex.Lock()
	defer fake.enableVpcClassicLinkMutex.Unlock()
	fake.EnableVpcClassicLinkStub = nil
	fake.enableVpcClassicLinkReturns = struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkReturnsOnCall(i int, result1 *ec2.EnableVpcClassicLinkOutput, result2 error) {
	fake.enableVpcClassicLinkMutex.Lock()
	defer fake.enableVpcClassicLinkMutex.Unlock()
	fake.EnableVpcClassicLinkStub = nil
	if fake.enableVpcClassicLinkReturnsOnCall == nil {
		fake.enableVpcClassicLinkReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVpcClassicLinkOutput
			result2 error
		})
	}
	fake.enableVpcClassicLinkReturnsOnCall[i] = struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupport(arg1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	fake.enableVpcClassicLinkDnsSupportMutex.Lock()
	ret, specificReturn := fake.enableVpcClassicLinkDnsSupportReturnsOnCall[len(fake.enableVpcClassicLinkDnsSupportArgsForCall)]
	fake.enableVpcClassicLinkDnsSupportArgsForCall = append(fake.enableVpcClassicLinkDnsSupportArgsForCall, struct {
		arg1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}{arg1})
	fake.recordInvocation("EnableVpcClassicLinkDnsSupport", []interface{}{arg1})
	fake.enableVpcClassicLinkDnsSupportMutex.Unlock()
	if fake.EnableVpcClassicLinkDnsSupportStub != nil {
		return fake.EnableVpcClassicLinkDnsSupportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVpcClassicLinkDnsSupportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportCallCount() int {
	fake.enableVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportMutex.RUnlock()
	return len(fake.enableVpcClassicLinkDnsSupportArgsForCall)
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportCalls(stub func(*ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)) {
	fake.enableVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportStub = stub
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportArgsForCall(i int) *ec2.EnableVpcClassicLinkDnsSupportInput {
	fake.enableVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportMutex.RUnlock()
	argsForCall := fake.enableVpcClassicLinkDnsSupportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportReturns(result1 *ec2.EnableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.enableVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportStub = nil
	fake.enableVpcClassicLinkDnsSupportReturns = struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportReturnsOnCall(i int, result1 *ec2.EnableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.enableVpcClassicLinkDnsSupportMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportStub = nil
	if fake.enableVpcClassicLinkDnsSupportReturnsOnCall == nil {
		fake.enableVpcClassicLinkDnsSupportReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
			result2 error
		})
	}
	fake.enableVpcClassicLinkDnsSupportReturnsOnCall[i] = struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportRequest(arg1 *ec2.EnableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	fake.enableVpcClassicLinkDnsSupportRequestMutex.Lock()
	ret, specificReturn := fake.enableVpcClassicLinkDnsSupportRequestReturnsOnCall[len(fake.enableVpcClassicLinkDnsSupportRequestArgsForCall)]
	fake.enableVpcClassicLinkDnsSupportRequestArgsForCall = append(fake.enableVpcClassicLinkDnsSupportRequestArgsForCall, struct {
		arg1 *ec2.EnableVpcClassicLinkDnsSupportInput
	}{arg1})
	fake.recordInvocation("EnableVpcClassicLinkDnsSupportRequest", []interface{}{arg1})
	fake.enableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	if fake.EnableVpcClassicLinkDnsSupportRequestStub != nil {
		return fake.EnableVpcClassicLinkDnsSupportRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVpcClassicLinkDnsSupportRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportRequestCallCount() int {
	fake.enableVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	return len(fake.enableVpcClassicLinkDnsSupportRequestArgsForCall)
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportRequestCalls(stub func(*ec2.EnableVpcClassicLinkDnsSupportInput) (*request.Request, *ec2.EnableVpcClassicLinkDnsSupportOutput)) {
	fake.enableVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportRequestStub = stub
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportRequestArgsForCall(i int) *ec2.EnableVpcClassicLinkDnsSupportInput {
	fake.enableVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	argsForCall := fake.enableVpcClassicLinkDnsSupportRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportRequestReturns(result1 *request.Request, result2 *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	fake.enableVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportRequestStub = nil
	fake.enableVpcClassicLinkDnsSupportRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkDnsSupportOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	fake.enableVpcClassicLinkDnsSupportRequestMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportRequestMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportRequestStub = nil
	if fake.enableVpcClassicLinkDnsSupportRequestReturnsOnCall == nil {
		fake.enableVpcClassicLinkDnsSupportRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.EnableVpcClassicLinkDnsSupportOutput
		})
	}
	fake.enableVpcClassicLinkDnsSupportRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkDnsSupportOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportWithContext(arg1 aws.Context, arg2 *ec2.EnableVpcClassicLinkDnsSupportInput, arg3 ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	ret, specificReturn := fake.enableVpcClassicLinkDnsSupportWithContextReturnsOnCall[len(fake.enableVpcClassicLinkDnsSupportWithContextArgsForCall)]
	fake.enableVpcClassicLinkDnsSupportWithContextArgsForCall = append(fake.enableVpcClassicLinkDnsSupportWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.EnableVpcClassicLinkDnsSupportInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableVpcClassicLinkDnsSupportWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	if fake.EnableVpcClassicLinkDnsSupportWithContextStub != nil {
		return fake.EnableVpcClassicLinkDnsSupportWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVpcClassicLinkDnsSupportWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportWithContextCallCount() int {
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	return len(fake.enableVpcClassicLinkDnsSupportWithContextArgsForCall)
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportWithContextCalls(stub func(aws.Context, *ec2.EnableVpcClassicLinkDnsSupportInput, ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)) {
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportWithContextStub = stub
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportWithContextArgsForCall(i int) (aws.Context, *ec2.EnableVpcClassicLinkDnsSupportInput, []request.Option) {
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	argsForCall := fake.enableVpcClassicLinkDnsSupportWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportWithContextReturns(result1 *ec2.EnableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportWithContextStub = nil
	fake.enableVpcClassicLinkDnsSupportWithContextReturns = struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkDnsSupportWithContextReturnsOnCall(i int, result1 *ec2.EnableVpcClassicLinkDnsSupportOutput, result2 error) {
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.Lock()
	defer fake.enableVpcClassicLinkDnsSupportWithContextMutex.Unlock()
	fake.EnableVpcClassicLinkDnsSupportWithContextStub = nil
	if fake.enableVpcClassicLinkDnsSupportWithContextReturnsOnCall == nil {
		fake.enableVpcClassicLinkDnsSupportWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
			result2 error
		})
	}
	fake.enableVpcClassicLinkDnsSupportWithContextReturnsOnCall[i] = struct {
		result1 *ec2.EnableVpcClassicLinkDnsSupportOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkRequest(arg1 *ec2.EnableVpcClassicLinkInput) (*request.Request, *ec2.EnableVpcClassicLinkOutput) {
	fake.enableVpcClassicLinkRequestMutex.Lock()
	ret, specificReturn := fake.enableVpcClassicLinkRequestReturnsOnCall[len(fake.enableVpcClassicLinkRequestArgsForCall)]
	fake.enableVpcClassicLinkRequestArgsForCall = append(fake.enableVpcClassicLinkRequestArgsForCall, struct {
		arg1 *ec2.EnableVpcClassicLinkInput
	}{arg1})
	fake.recordInvocation("EnableVpcClassicLinkRequest", []interface{}{arg1})
	fake.enableVpcClassicLinkRequestMutex.Unlock()
	if fake.EnableVpcClassicLinkRequestStub != nil {
		return fake.EnableVpcClassicLinkRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVpcClassicLinkRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVpcClassicLinkRequestCallCount() int {
	fake.enableVpcClassicLinkRequestMutex.RLock()
	defer fake.enableVpcClassicLinkRequestMutex.RUnlock()
	return len(fake.enableVpcClassicLinkRequestArgsForCall)
}

func (fake *FakeEC2API) EnableVpcClassicLinkRequestCalls(stub func(*ec2.EnableVpcClassicLinkInput) (*request.Request, *ec2.EnableVpcClassicLinkOutput)) {
	fake.enableVpcClassicLinkRequestMutex.Lock()
	defer fake.enableVpcClassicLinkRequestMutex.Unlock()
	fake.EnableVpcClassicLinkRequestStub = stub
}

func (fake *FakeEC2API) EnableVpcClassicLinkRequestArgsForCall(i int) *ec2.EnableVpcClassicLinkInput {
	fake.enableVpcClassicLinkRequestMutex.RLock()
	defer fake.enableVpcClassicLinkRequestMutex.RUnlock()
	argsForCall := fake.enableVpcClassicLinkRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) EnableVpcClassicLinkRequestReturns(result1 *request.Request, result2 *ec2.EnableVpcClassicLinkOutput) {
	fake.enableVpcClassicLinkRequestMutex.Lock()
	defer fake.enableVpcClassicLinkRequestMutex.Unlock()
	fake.EnableVpcClassicLinkRequestStub = nil
	fake.enableVpcClassicLinkRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.EnableVpcClassicLinkOutput) {
	fake.enableVpcClassicLinkRequestMutex.Lock()
	defer fake.enableVpcClassicLinkRequestMutex.Unlock()
	fake.EnableVpcClassicLinkRequestStub = nil
	if fake.enableVpcClassicLinkRequestReturnsOnCall == nil {
		fake.enableVpcClassicLinkRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.EnableVpcClassicLinkOutput
		})
	}
	fake.enableVpcClassicLinkRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.EnableVpcClassicLinkOutput
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkWithContext(arg1 aws.Context, arg2 *ec2.EnableVpcClassicLinkInput, arg3 ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error) {
	fake.enableVpcClassicLinkWithContextMutex.Lock()
	ret, specificReturn := fake.enableVpcClassicLinkWithContextReturnsOnCall[len(fake.enableVpcClassicLinkWithContextArgsForCall)]
	fake.enableVpcClassicLinkWithContextArgsForCall = append(fake.enableVpcClassicLinkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.EnableVpcClassicLinkInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableVpcClassicLinkWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableVpcClassicLinkWithContextMutex.Unlock()
	if fake.EnableVpcClassicLinkWithContextStub != nil {
		return fake.EnableVpcClassicLinkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableVpcClassicLinkWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) EnableVpcClassicLinkWithContextCallCount() int {
	fake.enableVpcClassicLinkWithContextMutex.RLock()
	defer fake.enableVpcClassicLinkWithContextMutex.RUnlock()
	return len(fake.enableVpcClassicLinkWithContextArgsForCall)
}

func (fake *FakeEC2API) EnableVpcClassicLinkWithContextCalls(stub func(aws.Context, *ec2.EnableVpcClassicLinkInput, ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error)) {
	fake.enableVpcClassicLinkWithContextMutex.Lock()
	defer fake.enableVpcClassicLinkWithContextMutex.Unlock()
	fake.EnableVpcClassicLinkWithContextStub = stub
}

func (fake *FakeEC2API) EnableVpcClassicLinkWithContextArgsForCall(i int) (aws.Context, *ec2.EnableVpcClassicLinkInput, []request.Option) {
	fake.enableVpcClassicLinkWithContextMutex.RLock()
	defer fake.enableVpcClassicLinkWithContextMutex.RUnlock()
	argsForCall := fake.enableVpcClassicLinkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) EnableVpcClassicLinkWithContextReturns(result1 *ec2.EnableVpcClassicLinkOutput, result2 error) {
	fake.enableVpcClassicLinkWithContextMutex.Lock()
	defer fake.enableVpcClassicLinkWithContextMutex.Unlock()
	fake.EnableVpcClassicLinkWithContextStub = nil
	fake.enableVpcClassicLinkWithContextReturns = struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) EnableVpcClassicLinkWithContextReturnsOnCall(i int, result1 *ec2.EnableVpcClassicLinkOutput, result2 error) {
	fake.enableVpcClassicLinkWithContextMutex.Lock()
	defer fake.enableVpcClassicLinkWithContextMutex.Unlock()
	fake.EnableVpcClassicLinkWithContextStub = nil
	if fake.enableVpcClassicLinkWithContextReturnsOnCall == nil {
		fake.enableVpcClassicLinkWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.EnableVpcClassicLinkOutput
			result2 error
		})
	}
	fake.enableVpcClassicLinkWithContextReturnsOnCall[i] = struct {
		result1 *ec2.EnableVpcClassicLinkOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationList(arg1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	fake.exportClientVpnClientCertificateRevocationListMutex.Lock()
	ret, specificReturn := fake.exportClientVpnClientCertificateRevocationListReturnsOnCall[len(fake.exportClientVpnClientCertificateRevocationListArgsForCall)]
	fake.exportClientVpnClientCertificateRevocationListArgsForCall = append(fake.exportClientVpnClientCertificateRevocationListArgsForCall, struct {
		arg1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}{arg1})
	fake.recordInvocation("ExportClientVpnClientCertificateRevocationList", []interface{}{arg1})
	fake.exportClientVpnClientCertificateRevocationListMutex.Unlock()
	if fake.ExportClientVpnClientCertificateRevocationListStub != nil {
		return fake.ExportClientVpnClientCertificateRevocationListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportClientVpnClientCertificateRevocationListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListCallCount() int {
	fake.exportClientVpnClientCertificateRevocationListMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListMutex.RUnlock()
	return len(fake.exportClientVpnClientCertificateRevocationListArgsForCall)
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListCalls(stub func(*ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)) {
	fake.exportClientVpnClientCertificateRevocationListMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListStub = stub
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListArgsForCall(i int) *ec2.ExportClientVpnClientCertificateRevocationListInput {
	fake.exportClientVpnClientCertificateRevocationListMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListMutex.RUnlock()
	argsForCall := fake.exportClientVpnClientCertificateRevocationListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListReturns(result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.exportClientVpnClientCertificateRevocationListMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListStub = nil
	fake.exportClientVpnClientCertificateRevocationListReturns = struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListReturnsOnCall(i int, result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.exportClientVpnClientCertificateRevocationListMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListStub = nil
	if fake.exportClientVpnClientCertificateRevocationListReturnsOnCall == nil {
		fake.exportClientVpnClientCertificateRevocationListReturnsOnCall = make(map[int]struct {
			result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
			result2 error
		})
	}
	fake.exportClientVpnClientCertificateRevocationListReturnsOnCall[i] = struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListRequest(arg1 *ec2.ExportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.Lock()
	ret, specificReturn := fake.exportClientVpnClientCertificateRevocationListRequestReturnsOnCall[len(fake.exportClientVpnClientCertificateRevocationListRequestArgsForCall)]
	fake.exportClientVpnClientCertificateRevocationListRequestArgsForCall = append(fake.exportClientVpnClientCertificateRevocationListRequestArgsForCall, struct {
		arg1 *ec2.ExportClientVpnClientCertificateRevocationListInput
	}{arg1})
	fake.recordInvocation("ExportClientVpnClientCertificateRevocationListRequest", []interface{}{arg1})
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	if fake.ExportClientVpnClientCertificateRevocationListRequestStub != nil {
		return fake.ExportClientVpnClientCertificateRevocationListRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportClientVpnClientCertificateRevocationListRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListRequestCallCount() int {
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListRequestMutex.RUnlock()
	return len(fake.exportClientVpnClientCertificateRevocationListRequestArgsForCall)
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListRequestCalls(stub func(*ec2.ExportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ExportClientVpnClientCertificateRevocationListOutput)) {
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListRequestStub = stub
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListRequestArgsForCall(i int) *ec2.ExportClientVpnClientCertificateRevocationListInput {
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListRequestMutex.RUnlock()
	argsForCall := fake.exportClientVpnClientCertificateRevocationListRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListRequestReturns(result1 *request.Request, result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListRequestStub = nil
	fake.exportClientVpnClientCertificateRevocationListRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListRequestStub = nil
	if fake.exportClientVpnClientCertificateRevocationListRequestReturnsOnCall == nil {
		fake.exportClientVpnClientCertificateRevocationListRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		})
	}
	fake.exportClientVpnClientCertificateRevocationListRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListWithContext(arg1 aws.Context, arg2 *ec2.ExportClientVpnClientCertificateRevocationListInput, arg3 ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	ret, specificReturn := fake.exportClientVpnClientCertificateRevocationListWithContextReturnsOnCall[len(fake.exportClientVpnClientCertificateRevocationListWithContextArgsForCall)]
	fake.exportClientVpnClientCertificateRevocationListWithContextArgsForCall = append(fake.exportClientVpnClientCertificateRevocationListWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ExportClientVpnClientCertificateRevocationListInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ExportClientVpnClientCertificateRevocationListWithContext", []interface{}{arg1, arg2, arg3})
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	if fake.ExportClientVpnClientCertificateRevocationListWithContextStub != nil {
		return fake.ExportClientVpnClientCertificateRevocationListWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportClientVpnClientCertificateRevocationListWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListWithContextCallCount() int {
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListWithContextMutex.RUnlock()
	return len(fake.exportClientVpnClientCertificateRevocationListWithContextArgsForCall)
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListWithContextCalls(stub func(aws.Context, *ec2.ExportClientVpnClientCertificateRevocationListInput, ...request.Option) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)) {
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListWithContextStub = stub
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListWithContextArgsForCall(i int) (aws.Context, *ec2.ExportClientVpnClientCertificateRevocationListInput, []request.Option) {
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListWithContextMutex.RUnlock()
	argsForCall := fake.exportClientVpnClientCertificateRevocationListWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListWithContextReturns(result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListWithContextStub = nil
	fake.exportClientVpnClientCertificateRevocationListWithContextReturns = struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientCertificateRevocationListWithContextReturnsOnCall(i int, result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	defer fake.exportClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	fake.ExportClientVpnClientCertificateRevocationListWithContextStub = nil
	if fake.exportClientVpnClientCertificateRevocationListWithContextReturnsOnCall == nil {
		fake.exportClientVpnClientCertificateRevocationListWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
			result2 error
		})
	}
	fake.exportClientVpnClientCertificateRevocationListWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientConfiguration(arg1 *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	fake.exportClientVpnClientConfigurationMutex.Lock()
	ret, specificReturn := fake.exportClientVpnClientConfigurationReturnsOnCall[len(fake.exportClientVpnClientConfigurationArgsForCall)]
	fake.exportClientVpnClientConfigurationArgsForCall = append(fake.exportClientVpnClientConfigurationArgsForCall, struct {
		arg1 *ec2.ExportClientVpnClientConfigurationInput
	}{arg1})
	fake.recordInvocation("ExportClientVpnClientConfiguration", []interface{}{arg1})
	fake.exportClientVpnClientConfigurationMutex.Unlock()
	if fake.ExportClientVpnClientConfigurationStub != nil {
		return fake.ExportClientVpnClientConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportClientVpnClientConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationCallCount() int {
	fake.exportClientVpnClientConfigurationMutex.RLock()
	defer fake.exportClientVpnClientConfigurationMutex.RUnlock()
	return len(fake.exportClientVpnClientConfigurationArgsForCall)
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationCalls(stub func(*ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error)) {
	fake.exportClientVpnClientConfigurationMutex.Lock()
	defer fake.exportClientVpnClientConfigurationMutex.Unlock()
	fake.ExportClientVpnClientConfigurationStub = stub
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationArgsForCall(i int) *ec2.ExportClientVpnClientConfigurationInput {
	fake.exportClientVpnClientConfigurationMutex.RLock()
	defer fake.exportClientVpnClientConfigurationMutex.RUnlock()
	argsForCall := fake.exportClientVpnClientConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationReturns(result1 *ec2.ExportClientVpnClientConfigurationOutput, result2 error) {
	fake.exportClientVpnClientConfigurationMutex.Lock()
	defer fake.exportClientVpnClientConfigurationMutex.Unlock()
	fake.ExportClientVpnClientConfigurationStub = nil
	fake.exportClientVpnClientConfigurationReturns = struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationReturnsOnCall(i int, result1 *ec2.ExportClientVpnClientConfigurationOutput, result2 error) {
	fake.exportClientVpnClientConfigurationMutex.Lock()
	defer fake.exportClientVpnClientConfigurationMutex.Unlock()
	fake.ExportClientVpnClientConfigurationStub = nil
	if fake.exportClientVpnClientConfigurationReturnsOnCall == nil {
		fake.exportClientVpnClientConfigurationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ExportClientVpnClientConfigurationOutput
			result2 error
		})
	}
	fake.exportClientVpnClientConfigurationReturnsOnCall[i] = struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationRequest(arg1 *ec2.ExportClientVpnClientConfigurationInput) (*request.Request, *ec2.ExportClientVpnClientConfigurationOutput) {
	fake.exportClientVpnClientConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.exportClientVpnClientConfigurationRequestReturnsOnCall[len(fake.exportClientVpnClientConfigurationRequestArgsForCall)]
	fake.exportClientVpnClientConfigurationRequestArgsForCall = append(fake.exportClientVpnClientConfigurationRequestArgsForCall, struct {
		arg1 *ec2.ExportClientVpnClientConfigurationInput
	}{arg1})
	fake.recordInvocation("ExportClientVpnClientConfigurationRequest", []interface{}{arg1})
	fake.exportClientVpnClientConfigurationRequestMutex.Unlock()
	if fake.ExportClientVpnClientConfigurationRequestStub != nil {
		return fake.ExportClientVpnClientConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportClientVpnClientConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationRequestCallCount() int {
	fake.exportClientVpnClientConfigurationRequestMutex.RLock()
	defer fake.exportClientVpnClientConfigurationRequestMutex.RUnlock()
	return len(fake.exportClientVpnClientConfigurationRequestArgsForCall)
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationRequestCalls(stub func(*ec2.ExportClientVpnClientConfigurationInput) (*request.Request, *ec2.ExportClientVpnClientConfigurationOutput)) {
	fake.exportClientVpnClientConfigurationRequestMutex.Lock()
	defer fake.exportClientVpnClientConfigurationRequestMutex.Unlock()
	fake.ExportClientVpnClientConfigurationRequestStub = stub
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationRequestArgsForCall(i int) *ec2.ExportClientVpnClientConfigurationInput {
	fake.exportClientVpnClientConfigurationRequestMutex.RLock()
	defer fake.exportClientVpnClientConfigurationRequestMutex.RUnlock()
	argsForCall := fake.exportClientVpnClientConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationRequestReturns(result1 *request.Request, result2 *ec2.ExportClientVpnClientConfigurationOutput) {
	fake.exportClientVpnClientConfigurationRequestMutex.Lock()
	defer fake.exportClientVpnClientConfigurationRequestMutex.Unlock()
	fake.ExportClientVpnClientConfigurationRequestStub = nil
	fake.exportClientVpnClientConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientConfigurationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ExportClientVpnClientConfigurationOutput) {
	fake.exportClientVpnClientConfigurationRequestMutex.Lock()
	defer fake.exportClientVpnClientConfigurationRequestMutex.Unlock()
	fake.ExportClientVpnClientConfigurationRequestStub = nil
	if fake.exportClientVpnClientConfigurationRequestReturnsOnCall == nil {
		fake.exportClientVpnClientConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ExportClientVpnClientConfigurationOutput
		})
	}
	fake.exportClientVpnClientConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ExportClientVpnClientConfigurationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationWithContext(arg1 aws.Context, arg2 *ec2.ExportClientVpnClientConfigurationInput, arg3 ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	fake.exportClientVpnClientConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.exportClientVpnClientConfigurationWithContextReturnsOnCall[len(fake.exportClientVpnClientConfigurationWithContextArgsForCall)]
	fake.exportClientVpnClientConfigurationWithContextArgsForCall = append(fake.exportClientVpnClientConfigurationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ExportClientVpnClientConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ExportClientVpnClientConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.exportClientVpnClientConfigurationWithContextMutex.Unlock()
	if fake.ExportClientVpnClientConfigurationWithContextStub != nil {
		return fake.ExportClientVpnClientConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportClientVpnClientConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationWithContextCallCount() int {
	fake.exportClientVpnClientConfigurationWithContextMutex.RLock()
	defer fake.exportClientVpnClientConfigurationWithContextMutex.RUnlock()
	return len(fake.exportClientVpnClientConfigurationWithContextArgsForCall)
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationWithContextCalls(stub func(aws.Context, *ec2.ExportClientVpnClientConfigurationInput, ...request.Option) (*ec2.ExportClientVpnClientConfigurationOutput, error)) {
	fake.exportClientVpnClientConfigurationWithContextMutex.Lock()
	defer fake.exportClientVpnClientConfigurationWithContextMutex.Unlock()
	fake.ExportClientVpnClientConfigurationWithContextStub = stub
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationWithContextArgsForCall(i int) (aws.Context, *ec2.ExportClientVpnClientConfigurationInput, []request.Option) {
	fake.exportClientVpnClientConfigurationWithContextMutex.RLock()
	defer fake.exportClientVpnClientConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.exportClientVpnClientConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationWithContextReturns(result1 *ec2.ExportClientVpnClientConfigurationOutput, result2 error) {
	fake.exportClientVpnClientConfigurationWithContextMutex.Lock()
	defer fake.exportClientVpnClientConfigurationWithContextMutex.Unlock()
	fake.ExportClientVpnClientConfigurationWithContextStub = nil
	fake.exportClientVpnClientConfigurationWithContextReturns = struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportClientVpnClientConfigurationWithContextReturnsOnCall(i int, result1 *ec2.ExportClientVpnClientConfigurationOutput, result2 error) {
	fake.exportClientVpnClientConfigurationWithContextMutex.Lock()
	defer fake.exportClientVpnClientConfigurationWithContextMutex.Unlock()
	fake.ExportClientVpnClientConfigurationWithContextStub = nil
	if fake.exportClientVpnClientConfigurationWithContextReturnsOnCall == nil {
		fake.exportClientVpnClientConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ExportClientVpnClientConfigurationOutput
			result2 error
		})
	}
	fake.exportClientVpnClientConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ExportClientVpnClientConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportTransitGatewayRoutes(arg1 *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	fake.exportTransitGatewayRoutesMutex.Lock()
	ret, specificReturn := fake.exportTransitGatewayRoutesReturnsOnCall[len(fake.exportTransitGatewayRoutesArgsForCall)]
	fake.exportTransitGatewayRoutesArgsForCall = append(fake.exportTransitGatewayRoutesArgsForCall, struct {
		arg1 *ec2.ExportTransitGatewayRoutesInput
	}{arg1})
	fake.recordInvocation("ExportTransitGatewayRoutes", []interface{}{arg1})
	fake.exportTransitGatewayRoutesMutex.Unlock()
	if fake.ExportTransitGatewayRoutesStub != nil {
		return fake.ExportTransitGatewayRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportTransitGatewayRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesCallCount() int {
	fake.exportTransitGatewayRoutesMutex.RLock()
	defer fake.exportTransitGatewayRoutesMutex.RUnlock()
	return len(fake.exportTransitGatewayRoutesArgsForCall)
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesCalls(stub func(*ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error)) {
	fake.exportTransitGatewayRoutesMutex.Lock()
	defer fake.exportTransitGatewayRoutesMutex.Unlock()
	fake.ExportTransitGatewayRoutesStub = stub
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesArgsForCall(i int) *ec2.ExportTransitGatewayRoutesInput {
	fake.exportTransitGatewayRoutesMutex.RLock()
	defer fake.exportTransitGatewayRoutesMutex.RUnlock()
	argsForCall := fake.exportTransitGatewayRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesReturns(result1 *ec2.ExportTransitGatewayRoutesOutput, result2 error) {
	fake.exportTransitGatewayRoutesMutex.Lock()
	defer fake.exportTransitGatewayRoutesMutex.Unlock()
	fake.ExportTransitGatewayRoutesStub = nil
	fake.exportTransitGatewayRoutesReturns = struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesReturnsOnCall(i int, result1 *ec2.ExportTransitGatewayRoutesOutput, result2 error) {
	fake.exportTransitGatewayRoutesMutex.Lock()
	defer fake.exportTransitGatewayRoutesMutex.Unlock()
	fake.ExportTransitGatewayRoutesStub = nil
	if fake.exportTransitGatewayRoutesReturnsOnCall == nil {
		fake.exportTransitGatewayRoutesReturnsOnCall = make(map[int]struct {
			result1 *ec2.ExportTransitGatewayRoutesOutput
			result2 error
		})
	}
	fake.exportTransitGatewayRoutesReturnsOnCall[i] = struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesRequest(arg1 *ec2.ExportTransitGatewayRoutesInput) (*request.Request, *ec2.ExportTransitGatewayRoutesOutput) {
	fake.exportTransitGatewayRoutesRequestMutex.Lock()
	ret, specificReturn := fake.exportTransitGatewayRoutesRequestReturnsOnCall[len(fake.exportTransitGatewayRoutesRequestArgsForCall)]
	fake.exportTransitGatewayRoutesRequestArgsForCall = append(fake.exportTransitGatewayRoutesRequestArgsForCall, struct {
		arg1 *ec2.ExportTransitGatewayRoutesInput
	}{arg1})
	fake.recordInvocation("ExportTransitGatewayRoutesRequest", []interface{}{arg1})
	fake.exportTransitGatewayRoutesRequestMutex.Unlock()
	if fake.ExportTransitGatewayRoutesRequestStub != nil {
		return fake.ExportTransitGatewayRoutesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportTransitGatewayRoutesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesRequestCallCount() int {
	fake.exportTransitGatewayRoutesRequestMutex.RLock()
	defer fake.exportTransitGatewayRoutesRequestMutex.RUnlock()
	return len(fake.exportTransitGatewayRoutesRequestArgsForCall)
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesRequestCalls(stub func(*ec2.ExportTransitGatewayRoutesInput) (*request.Request, *ec2.ExportTransitGatewayRoutesOutput)) {
	fake.exportTransitGatewayRoutesRequestMutex.Lock()
	defer fake.exportTransitGatewayRoutesRequestMutex.Unlock()
	fake.ExportTransitGatewayRoutesRequestStub = stub
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesRequestArgsForCall(i int) *ec2.ExportTransitGatewayRoutesInput {
	fake.exportTransitGatewayRoutesRequestMutex.RLock()
	defer fake.exportTransitGatewayRoutesRequestMutex.RUnlock()
	argsForCall := fake.exportTransitGatewayRoutesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesRequestReturns(result1 *request.Request, result2 *ec2.ExportTransitGatewayRoutesOutput) {
	fake.exportTransitGatewayRoutesRequestMutex.Lock()
	defer fake.exportTransitGatewayRoutesRequestMutex.Unlock()
	fake.ExportTransitGatewayRoutesRequestStub = nil
	fake.exportTransitGatewayRoutesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ExportTransitGatewayRoutesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ExportTransitGatewayRoutesOutput) {
	fake.exportTransitGatewayRoutesRequestMutex.Lock()
	defer fake.exportTransitGatewayRoutesRequestMutex.Unlock()
	fake.ExportTransitGatewayRoutesRequestStub = nil
	if fake.exportTransitGatewayRoutesRequestReturnsOnCall == nil {
		fake.exportTransitGatewayRoutesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ExportTransitGatewayRoutesOutput
		})
	}
	fake.exportTransitGatewayRoutesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ExportTransitGatewayRoutesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesWithContext(arg1 aws.Context, arg2 *ec2.ExportTransitGatewayRoutesInput, arg3 ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	fake.exportTransitGatewayRoutesWithContextMutex.Lock()
	ret, specificReturn := fake.exportTransitGatewayRoutesWithContextReturnsOnCall[len(fake.exportTransitGatewayRoutesWithContextArgsForCall)]
	fake.exportTransitGatewayRoutesWithContextArgsForCall = append(fake.exportTransitGatewayRoutesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ExportTransitGatewayRoutesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ExportTransitGatewayRoutesWithContext", []interface{}{arg1, arg2, arg3})
	fake.exportTransitGatewayRoutesWithContextMutex.Unlock()
	if fake.ExportTransitGatewayRoutesWithContextStub != nil {
		return fake.ExportTransitGatewayRoutesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportTransitGatewayRoutesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesWithContextCallCount() int {
	fake.exportTransitGatewayRoutesWithContextMutex.RLock()
	defer fake.exportTransitGatewayRoutesWithContextMutex.RUnlock()
	return len(fake.exportTransitGatewayRoutesWithContextArgsForCall)
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesWithContextCalls(stub func(aws.Context, *ec2.ExportTransitGatewayRoutesInput, ...request.Option) (*ec2.ExportTransitGatewayRoutesOutput, error)) {
	fake.exportTransitGatewayRoutesWithContextMutex.Lock()
	defer fake.exportTransitGatewayRoutesWithContextMutex.Unlock()
	fake.ExportTransitGatewayRoutesWithContextStub = stub
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesWithContextArgsForCall(i int) (aws.Context, *ec2.ExportTransitGatewayRoutesInput, []request.Option) {
	fake.exportTransitGatewayRoutesWithContextMutex.RLock()
	defer fake.exportTransitGatewayRoutesWithContextMutex.RUnlock()
	argsForCall := fake.exportTransitGatewayRoutesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesWithContextReturns(result1 *ec2.ExportTransitGatewayRoutesOutput, result2 error) {
	fake.exportTransitGatewayRoutesWithContextMutex.Lock()
	defer fake.exportTransitGatewayRoutesWithContextMutex.Unlock()
	fake.ExportTransitGatewayRoutesWithContextStub = nil
	fake.exportTransitGatewayRoutesWithContextReturns = struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ExportTransitGatewayRoutesWithContextReturnsOnCall(i int, result1 *ec2.ExportTransitGatewayRoutesOutput, result2 error) {
	fake.exportTransitGatewayRoutesWithContextMutex.Lock()
	defer fake.exportTransitGatewayRoutesWithContextMutex.Unlock()
	fake.ExportTransitGatewayRoutesWithContextStub = nil
	if fake.exportTransitGatewayRoutesWithContextReturnsOnCall == nil {
		fake.exportTransitGatewayRoutesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ExportTransitGatewayRoutesOutput
			result2 error
		})
	}
	fake.exportTransitGatewayRoutesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ExportTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleOutput(arg1 *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	fake.getConsoleOutputMutex.Lock()
	ret, specificReturn := fake.getConsoleOutputReturnsOnCall[len(fake.getConsoleOutputArgsForCall)]
	fake.getConsoleOutputArgsForCall = append(fake.getConsoleOutputArgsForCall, struct {
		arg1 *ec2.GetConsoleOutputInput
	}{arg1})
	fake.recordInvocation("GetConsoleOutput", []interface{}{arg1})
	fake.getConsoleOutputMutex.Unlock()
	if fake.GetConsoleOutputStub != nil {
		return fake.GetConsoleOutputStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsoleOutputReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetConsoleOutputCallCount() int {
	fake.getConsoleOutputMutex.RLock()
	defer fake.getConsoleOutputMutex.RUnlock()
	return len(fake.getConsoleOutputArgsForCall)
}

func (fake *FakeEC2API) GetConsoleOutputCalls(stub func(*ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error)) {
	fake.getConsoleOutputMutex.Lock()
	defer fake.getConsoleOutputMutex.Unlock()
	fake.GetConsoleOutputStub = stub
}

func (fake *FakeEC2API) GetConsoleOutputArgsForCall(i int) *ec2.GetConsoleOutputInput {
	fake.getConsoleOutputMutex.RLock()
	defer fake.getConsoleOutputMutex.RUnlock()
	argsForCall := fake.getConsoleOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetConsoleOutputReturns(result1 *ec2.GetConsoleOutputOutput, result2 error) {
	fake.getConsoleOutputMutex.Lock()
	defer fake.getConsoleOutputMutex.Unlock()
	fake.GetConsoleOutputStub = nil
	fake.getConsoleOutputReturns = struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleOutputReturnsOnCall(i int, result1 *ec2.GetConsoleOutputOutput, result2 error) {
	fake.getConsoleOutputMutex.Lock()
	defer fake.getConsoleOutputMutex.Unlock()
	fake.GetConsoleOutputStub = nil
	if fake.getConsoleOutputReturnsOnCall == nil {
		fake.getConsoleOutputReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetConsoleOutputOutput
			result2 error
		})
	}
	fake.getConsoleOutputReturnsOnCall[i] = struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleOutputRequest(arg1 *ec2.GetConsoleOutputInput) (*request.Request, *ec2.GetConsoleOutputOutput) {
	fake.getConsoleOutputRequestMutex.Lock()
	ret, specificReturn := fake.getConsoleOutputRequestReturnsOnCall[len(fake.getConsoleOutputRequestArgsForCall)]
	fake.getConsoleOutputRequestArgsForCall = append(fake.getConsoleOutputRequestArgsForCall, struct {
		arg1 *ec2.GetConsoleOutputInput
	}{arg1})
	fake.recordInvocation("GetConsoleOutputRequest", []interface{}{arg1})
	fake.getConsoleOutputRequestMutex.Unlock()
	if fake.GetConsoleOutputRequestStub != nil {
		return fake.GetConsoleOutputRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsoleOutputRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetConsoleOutputRequestCallCount() int {
	fake.getConsoleOutputRequestMutex.RLock()
	defer fake.getConsoleOutputRequestMutex.RUnlock()
	return len(fake.getConsoleOutputRequestArgsForCall)
}

func (fake *FakeEC2API) GetConsoleOutputRequestCalls(stub func(*ec2.GetConsoleOutputInput) (*request.Request, *ec2.GetConsoleOutputOutput)) {
	fake.getConsoleOutputRequestMutex.Lock()
	defer fake.getConsoleOutputRequestMutex.Unlock()
	fake.GetConsoleOutputRequestStub = stub
}

func (fake *FakeEC2API) GetConsoleOutputRequestArgsForCall(i int) *ec2.GetConsoleOutputInput {
	fake.getConsoleOutputRequestMutex.RLock()
	defer fake.getConsoleOutputRequestMutex.RUnlock()
	argsForCall := fake.getConsoleOutputRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetConsoleOutputRequestReturns(result1 *request.Request, result2 *ec2.GetConsoleOutputOutput) {
	fake.getConsoleOutputRequestMutex.Lock()
	defer fake.getConsoleOutputRequestMutex.Unlock()
	fake.GetConsoleOutputRequestStub = nil
	fake.getConsoleOutputRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetConsoleOutputOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleOutputRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetConsoleOutputOutput) {
	fake.getConsoleOutputRequestMutex.Lock()
	defer fake.getConsoleOutputRequestMutex.Unlock()
	fake.GetConsoleOutputRequestStub = nil
	if fake.getConsoleOutputRequestReturnsOnCall == nil {
		fake.getConsoleOutputRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetConsoleOutputOutput
		})
	}
	fake.getConsoleOutputRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetConsoleOutputOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleOutputWithContext(arg1 aws.Context, arg2 *ec2.GetConsoleOutputInput, arg3 ...request.Option) (*ec2.GetConsoleOutputOutput, error) {
	fake.getConsoleOutputWithContextMutex.Lock()
	ret, specificReturn := fake.getConsoleOutputWithContextReturnsOnCall[len(fake.getConsoleOutputWithContextArgsForCall)]
	fake.getConsoleOutputWithContextArgsForCall = append(fake.getConsoleOutputWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetConsoleOutputInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetConsoleOutputWithContext", []interface{}{arg1, arg2, arg3})
	fake.getConsoleOutputWithContextMutex.Unlock()
	if fake.GetConsoleOutputWithContextStub != nil {
		return fake.GetConsoleOutputWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsoleOutputWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetConsoleOutputWithContextCallCount() int {
	fake.getConsoleOutputWithContextMutex.RLock()
	defer fake.getConsoleOutputWithContextMutex.RUnlock()
	return len(fake.getConsoleOutputWithContextArgsForCall)
}

func (fake *FakeEC2API) GetConsoleOutputWithContextCalls(stub func(aws.Context, *ec2.GetConsoleOutputInput, ...request.Option) (*ec2.GetConsoleOutputOutput, error)) {
	fake.getConsoleOutputWithContextMutex.Lock()
	defer fake.getConsoleOutputWithContextMutex.Unlock()
	fake.GetConsoleOutputWithContextStub = stub
}

func (fake *FakeEC2API) GetConsoleOutputWithContextArgsForCall(i int) (aws.Context, *ec2.GetConsoleOutputInput, []request.Option) {
	fake.getConsoleOutputWithContextMutex.RLock()
	defer fake.getConsoleOutputWithContextMutex.RUnlock()
	argsForCall := fake.getConsoleOutputWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetConsoleOutputWithContextReturns(result1 *ec2.GetConsoleOutputOutput, result2 error) {
	fake.getConsoleOutputWithContextMutex.Lock()
	defer fake.getConsoleOutputWithContextMutex.Unlock()
	fake.GetConsoleOutputWithContextStub = nil
	fake.getConsoleOutputWithContextReturns = struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleOutputWithContextReturnsOnCall(i int, result1 *ec2.GetConsoleOutputOutput, result2 error) {
	fake.getConsoleOutputWithContextMutex.Lock()
	defer fake.getConsoleOutputWithContextMutex.Unlock()
	fake.GetConsoleOutputWithContextStub = nil
	if fake.getConsoleOutputWithContextReturnsOnCall == nil {
		fake.getConsoleOutputWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetConsoleOutputOutput
			result2 error
		})
	}
	fake.getConsoleOutputWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetConsoleOutputOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleScreenshot(arg1 *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
	fake.getConsoleScreenshotMutex.Lock()
	ret, specificReturn := fake.getConsoleScreenshotReturnsOnCall[len(fake.getConsoleScreenshotArgsForCall)]
	fake.getConsoleScreenshotArgsForCall = append(fake.getConsoleScreenshotArgsForCall, struct {
		arg1 *ec2.GetConsoleScreenshotInput
	}{arg1})
	fake.recordInvocation("GetConsoleScreenshot", []interface{}{arg1})
	fake.getConsoleScreenshotMutex.Unlock()
	if fake.GetConsoleScreenshotStub != nil {
		return fake.GetConsoleScreenshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsoleScreenshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetConsoleScreenshotCallCount() int {
	fake.getConsoleScreenshotMutex.RLock()
	defer fake.getConsoleScreenshotMutex.RUnlock()
	return len(fake.getConsoleScreenshotArgsForCall)
}

func (fake *FakeEC2API) GetConsoleScreenshotCalls(stub func(*ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error)) {
	fake.getConsoleScreenshotMutex.Lock()
	defer fake.getConsoleScreenshotMutex.Unlock()
	fake.GetConsoleScreenshotStub = stub
}

func (fake *FakeEC2API) GetConsoleScreenshotArgsForCall(i int) *ec2.GetConsoleScreenshotInput {
	fake.getConsoleScreenshotMutex.RLock()
	defer fake.getConsoleScreenshotMutex.RUnlock()
	argsForCall := fake.getConsoleScreenshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetConsoleScreenshotReturns(result1 *ec2.GetConsoleScreenshotOutput, result2 error) {
	fake.getConsoleScreenshotMutex.Lock()
	defer fake.getConsoleScreenshotMutex.Unlock()
	fake.GetConsoleScreenshotStub = nil
	fake.getConsoleScreenshotReturns = struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleScreenshotReturnsOnCall(i int, result1 *ec2.GetConsoleScreenshotOutput, result2 error) {
	fake.getConsoleScreenshotMutex.Lock()
	defer fake.getConsoleScreenshotMutex.Unlock()
	fake.GetConsoleScreenshotStub = nil
	if fake.getConsoleScreenshotReturnsOnCall == nil {
		fake.getConsoleScreenshotReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetConsoleScreenshotOutput
			result2 error
		})
	}
	fake.getConsoleScreenshotReturnsOnCall[i] = struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleScreenshotRequest(arg1 *ec2.GetConsoleScreenshotInput) (*request.Request, *ec2.GetConsoleScreenshotOutput) {
	fake.getConsoleScreenshotRequestMutex.Lock()
	ret, specificReturn := fake.getConsoleScreenshotRequestReturnsOnCall[len(fake.getConsoleScreenshotRequestArgsForCall)]
	fake.getConsoleScreenshotRequestArgsForCall = append(fake.getConsoleScreenshotRequestArgsForCall, struct {
		arg1 *ec2.GetConsoleScreenshotInput
	}{arg1})
	fake.recordInvocation("GetConsoleScreenshotRequest", []interface{}{arg1})
	fake.getConsoleScreenshotRequestMutex.Unlock()
	if fake.GetConsoleScreenshotRequestStub != nil {
		return fake.GetConsoleScreenshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsoleScreenshotRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetConsoleScreenshotRequestCallCount() int {
	fake.getConsoleScreenshotRequestMutex.RLock()
	defer fake.getConsoleScreenshotRequestMutex.RUnlock()
	return len(fake.getConsoleScreenshotRequestArgsForCall)
}

func (fake *FakeEC2API) GetConsoleScreenshotRequestCalls(stub func(*ec2.GetConsoleScreenshotInput) (*request.Request, *ec2.GetConsoleScreenshotOutput)) {
	fake.getConsoleScreenshotRequestMutex.Lock()
	defer fake.getConsoleScreenshotRequestMutex.Unlock()
	fake.GetConsoleScreenshotRequestStub = stub
}

func (fake *FakeEC2API) GetConsoleScreenshotRequestArgsForCall(i int) *ec2.GetConsoleScreenshotInput {
	fake.getConsoleScreenshotRequestMutex.RLock()
	defer fake.getConsoleScreenshotRequestMutex.RUnlock()
	argsForCall := fake.getConsoleScreenshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetConsoleScreenshotRequestReturns(result1 *request.Request, result2 *ec2.GetConsoleScreenshotOutput) {
	fake.getConsoleScreenshotRequestMutex.Lock()
	defer fake.getConsoleScreenshotRequestMutex.Unlock()
	fake.GetConsoleScreenshotRequestStub = nil
	fake.getConsoleScreenshotRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetConsoleScreenshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleScreenshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetConsoleScreenshotOutput) {
	fake.getConsoleScreenshotRequestMutex.Lock()
	defer fake.getConsoleScreenshotRequestMutex.Unlock()
	fake.GetConsoleScreenshotRequestStub = nil
	if fake.getConsoleScreenshotRequestReturnsOnCall == nil {
		fake.getConsoleScreenshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetConsoleScreenshotOutput
		})
	}
	fake.getConsoleScreenshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetConsoleScreenshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleScreenshotWithContext(arg1 aws.Context, arg2 *ec2.GetConsoleScreenshotInput, arg3 ...request.Option) (*ec2.GetConsoleScreenshotOutput, error) {
	fake.getConsoleScreenshotWithContextMutex.Lock()
	ret, specificReturn := fake.getConsoleScreenshotWithContextReturnsOnCall[len(fake.getConsoleScreenshotWithContextArgsForCall)]
	fake.getConsoleScreenshotWithContextArgsForCall = append(fake.getConsoleScreenshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetConsoleScreenshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetConsoleScreenshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.getConsoleScreenshotWithContextMutex.Unlock()
	if fake.GetConsoleScreenshotWithContextStub != nil {
		return fake.GetConsoleScreenshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConsoleScreenshotWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetConsoleScreenshotWithContextCallCount() int {
	fake.getConsoleScreenshotWithContextMutex.RLock()
	defer fake.getConsoleScreenshotWithContextMutex.RUnlock()
	return len(fake.getConsoleScreenshotWithContextArgsForCall)
}

func (fake *FakeEC2API) GetConsoleScreenshotWithContextCalls(stub func(aws.Context, *ec2.GetConsoleScreenshotInput, ...request.Option) (*ec2.GetConsoleScreenshotOutput, error)) {
	fake.getConsoleScreenshotWithContextMutex.Lock()
	defer fake.getConsoleScreenshotWithContextMutex.Unlock()
	fake.GetConsoleScreenshotWithContextStub = stub
}

func (fake *FakeEC2API) GetConsoleScreenshotWithContextArgsForCall(i int) (aws.Context, *ec2.GetConsoleScreenshotInput, []request.Option) {
	fake.getConsoleScreenshotWithContextMutex.RLock()
	defer fake.getConsoleScreenshotWithContextMutex.RUnlock()
	argsForCall := fake.getConsoleScreenshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetConsoleScreenshotWithContextReturns(result1 *ec2.GetConsoleScreenshotOutput, result2 error) {
	fake.getConsoleScreenshotWithContextMutex.Lock()
	defer fake.getConsoleScreenshotWithContextMutex.Unlock()
	fake.GetConsoleScreenshotWithContextStub = nil
	fake.getConsoleScreenshotWithContextReturns = struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetConsoleScreenshotWithContextReturnsOnCall(i int, result1 *ec2.GetConsoleScreenshotOutput, result2 error) {
	fake.getConsoleScreenshotWithContextMutex.Lock()
	defer fake.getConsoleScreenshotWithContextMutex.Unlock()
	fake.GetConsoleScreenshotWithContextStub = nil
	if fake.getConsoleScreenshotWithContextReturnsOnCall == nil {
		fake.getConsoleScreenshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetConsoleScreenshotOutput
			result2 error
		})
	}
	fake.getConsoleScreenshotWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetConsoleScreenshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetHostReservationPurchasePreview(arg1 *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	fake.getHostReservationPurchasePreviewMutex.Lock()
	ret, specificReturn := fake.getHostReservationPurchasePreviewReturnsOnCall[len(fake.getHostReservationPurchasePreviewArgsForCall)]
	fake.getHostReservationPurchasePreviewArgsForCall = append(fake.getHostReservationPurchasePreviewArgsForCall, struct {
		arg1 *ec2.GetHostReservationPurchasePreviewInput
	}{arg1})
	fake.recordInvocation("GetHostReservationPurchasePreview", []interface{}{arg1})
	fake.getHostReservationPurchasePreviewMutex.Unlock()
	if fake.GetHostReservationPurchasePreviewStub != nil {
		return fake.GetHostReservationPurchasePreviewStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getHostReservationPurchasePreviewReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewCallCount() int {
	fake.getHostReservationPurchasePreviewMutex.RLock()
	defer fake.getHostReservationPurchasePreviewMutex.RUnlock()
	return len(fake.getHostReservationPurchasePreviewArgsForCall)
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewCalls(stub func(*ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error)) {
	fake.getHostReservationPurchasePreviewMutex.Lock()
	defer fake.getHostReservationPurchasePreviewMutex.Unlock()
	fake.GetHostReservationPurchasePreviewStub = stub
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewArgsForCall(i int) *ec2.GetHostReservationPurchasePreviewInput {
	fake.getHostReservationPurchasePreviewMutex.RLock()
	defer fake.getHostReservationPurchasePreviewMutex.RUnlock()
	argsForCall := fake.getHostReservationPurchasePreviewArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewReturns(result1 *ec2.GetHostReservationPurchasePreviewOutput, result2 error) {
	fake.getHostReservationPurchasePreviewMutex.Lock()
	defer fake.getHostReservationPurchasePreviewMutex.Unlock()
	fake.GetHostReservationPurchasePreviewStub = nil
	fake.getHostReservationPurchasePreviewReturns = struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewReturnsOnCall(i int, result1 *ec2.GetHostReservationPurchasePreviewOutput, result2 error) {
	fake.getHostReservationPurchasePreviewMutex.Lock()
	defer fake.getHostReservationPurchasePreviewMutex.Unlock()
	fake.GetHostReservationPurchasePreviewStub = nil
	if fake.getHostReservationPurchasePreviewReturnsOnCall == nil {
		fake.getHostReservationPurchasePreviewReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetHostReservationPurchasePreviewOutput
			result2 error
		})
	}
	fake.getHostReservationPurchasePreviewReturnsOnCall[i] = struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewRequest(arg1 *ec2.GetHostReservationPurchasePreviewInput) (*request.Request, *ec2.GetHostReservationPurchasePreviewOutput) {
	fake.getHostReservationPurchasePreviewRequestMutex.Lock()
	ret, specificReturn := fake.getHostReservationPurchasePreviewRequestReturnsOnCall[len(fake.getHostReservationPurchasePreviewRequestArgsForCall)]
	fake.getHostReservationPurchasePreviewRequestArgsForCall = append(fake.getHostReservationPurchasePreviewRequestArgsForCall, struct {
		arg1 *ec2.GetHostReservationPurchasePreviewInput
	}{arg1})
	fake.recordInvocation("GetHostReservationPurchasePreviewRequest", []interface{}{arg1})
	fake.getHostReservationPurchasePreviewRequestMutex.Unlock()
	if fake.GetHostReservationPurchasePreviewRequestStub != nil {
		return fake.GetHostReservationPurchasePreviewRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getHostReservationPurchasePreviewRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewRequestCallCount() int {
	fake.getHostReservationPurchasePreviewRequestMutex.RLock()
	defer fake.getHostReservationPurchasePreviewRequestMutex.RUnlock()
	return len(fake.getHostReservationPurchasePreviewRequestArgsForCall)
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewRequestCalls(stub func(*ec2.GetHostReservationPurchasePreviewInput) (*request.Request, *ec2.GetHostReservationPurchasePreviewOutput)) {
	fake.getHostReservationPurchasePreviewRequestMutex.Lock()
	defer fake.getHostReservationPurchasePreviewRequestMutex.Unlock()
	fake.GetHostReservationPurchasePreviewRequestStub = stub
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewRequestArgsForCall(i int) *ec2.GetHostReservationPurchasePreviewInput {
	fake.getHostReservationPurchasePreviewRequestMutex.RLock()
	defer fake.getHostReservationPurchasePreviewRequestMutex.RUnlock()
	argsForCall := fake.getHostReservationPurchasePreviewRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewRequestReturns(result1 *request.Request, result2 *ec2.GetHostReservationPurchasePreviewOutput) {
	fake.getHostReservationPurchasePreviewRequestMutex.Lock()
	defer fake.getHostReservationPurchasePreviewRequestMutex.Unlock()
	fake.GetHostReservationPurchasePreviewRequestStub = nil
	fake.getHostReservationPurchasePreviewRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetHostReservationPurchasePreviewOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetHostReservationPurchasePreviewOutput) {
	fake.getHostReservationPurchasePreviewRequestMutex.Lock()
	defer fake.getHostReservationPurchasePreviewRequestMutex.Unlock()
	fake.GetHostReservationPurchasePreviewRequestStub = nil
	if fake.getHostReservationPurchasePreviewRequestReturnsOnCall == nil {
		fake.getHostReservationPurchasePreviewRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetHostReservationPurchasePreviewOutput
		})
	}
	fake.getHostReservationPurchasePreviewRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetHostReservationPurchasePreviewOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewWithContext(arg1 aws.Context, arg2 *ec2.GetHostReservationPurchasePreviewInput, arg3 ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	fake.getHostReservationPurchasePreviewWithContextMutex.Lock()
	ret, specificReturn := fake.getHostReservationPurchasePreviewWithContextReturnsOnCall[len(fake.getHostReservationPurchasePreviewWithContextArgsForCall)]
	fake.getHostReservationPurchasePreviewWithContextArgsForCall = append(fake.getHostReservationPurchasePreviewWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetHostReservationPurchasePreviewInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetHostReservationPurchasePreviewWithContext", []interface{}{arg1, arg2, arg3})
	fake.getHostReservationPurchasePreviewWithContextMutex.Unlock()
	if fake.GetHostReservationPurchasePreviewWithContextStub != nil {
		return fake.GetHostReservationPurchasePreviewWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getHostReservationPurchasePreviewWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewWithContextCallCount() int {
	fake.getHostReservationPurchasePreviewWithContextMutex.RLock()
	defer fake.getHostReservationPurchasePreviewWithContextMutex.RUnlock()
	return len(fake.getHostReservationPurchasePreviewWithContextArgsForCall)
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewWithContextCalls(stub func(aws.Context, *ec2.GetHostReservationPurchasePreviewInput, ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error)) {
	fake.getHostReservationPurchasePreviewWithContextMutex.Lock()
	defer fake.getHostReservationPurchasePreviewWithContextMutex.Unlock()
	fake.GetHostReservationPurchasePreviewWithContextStub = stub
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewWithContextArgsForCall(i int) (aws.Context, *ec2.GetHostReservationPurchasePreviewInput, []request.Option) {
	fake.getHostReservationPurchasePreviewWithContextMutex.RLock()
	defer fake.getHostReservationPurchasePreviewWithContextMutex.RUnlock()
	argsForCall := fake.getHostReservationPurchasePreviewWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewWithContextReturns(result1 *ec2.GetHostReservationPurchasePreviewOutput, result2 error) {
	fake.getHostReservationPurchasePreviewWithContextMutex.Lock()
	defer fake.getHostReservationPurchasePreviewWithContextMutex.Unlock()
	fake.GetHostReservationPurchasePreviewWithContextStub = nil
	fake.getHostReservationPurchasePreviewWithContextReturns = struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetHostReservationPurchasePreviewWithContextReturnsOnCall(i int, result1 *ec2.GetHostReservationPurchasePreviewOutput, result2 error) {
	fake.getHostReservationPurchasePreviewWithContextMutex.Lock()
	defer fake.getHostReservationPurchasePreviewWithContextMutex.Unlock()
	fake.GetHostReservationPurchasePreviewWithContextStub = nil
	if fake.getHostReservationPurchasePreviewWithContextReturnsOnCall == nil {
		fake.getHostReservationPurchasePreviewWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetHostReservationPurchasePreviewOutput
			result2 error
		})
	}
	fake.getHostReservationPurchasePreviewWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetHostReservationPurchasePreviewOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetLaunchTemplateData(arg1 *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error) {
	fake.getLaunchTemplateDataMutex.Lock()
	ret, specificReturn := fake.getLaunchTemplateDataReturnsOnCall[len(fake.getLaunchTemplateDataArgsForCall)]
	fake.getLaunchTemplateDataArgsForCall = append(fake.getLaunchTemplateDataArgsForCall, struct {
		arg1 *ec2.GetLaunchTemplateDataInput
	}{arg1})
	fake.recordInvocation("GetLaunchTemplateData", []interface{}{arg1})
	fake.getLaunchTemplateDataMutex.Unlock()
	if fake.GetLaunchTemplateDataStub != nil {
		return fake.GetLaunchTemplateDataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLaunchTemplateDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetLaunchTemplateDataCallCount() int {
	fake.getLaunchTemplateDataMutex.RLock()
	defer fake.getLaunchTemplateDataMutex.RUnlock()
	return len(fake.getLaunchTemplateDataArgsForCall)
}

func (fake *FakeEC2API) GetLaunchTemplateDataCalls(stub func(*ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error)) {
	fake.getLaunchTemplateDataMutex.Lock()
	defer fake.getLaunchTemplateDataMutex.Unlock()
	fake.GetLaunchTemplateDataStub = stub
}

func (fake *FakeEC2API) GetLaunchTemplateDataArgsForCall(i int) *ec2.GetLaunchTemplateDataInput {
	fake.getLaunchTemplateDataMutex.RLock()
	defer fake.getLaunchTemplateDataMutex.RUnlock()
	argsForCall := fake.getLaunchTemplateDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetLaunchTemplateDataReturns(result1 *ec2.GetLaunchTemplateDataOutput, result2 error) {
	fake.getLaunchTemplateDataMutex.Lock()
	defer fake.getLaunchTemplateDataMutex.Unlock()
	fake.GetLaunchTemplateDataStub = nil
	fake.getLaunchTemplateDataReturns = struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetLaunchTemplateDataReturnsOnCall(i int, result1 *ec2.GetLaunchTemplateDataOutput, result2 error) {
	fake.getLaunchTemplateDataMutex.Lock()
	defer fake.getLaunchTemplateDataMutex.Unlock()
	fake.GetLaunchTemplateDataStub = nil
	if fake.getLaunchTemplateDataReturnsOnCall == nil {
		fake.getLaunchTemplateDataReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetLaunchTemplateDataOutput
			result2 error
		})
	}
	fake.getLaunchTemplateDataReturnsOnCall[i] = struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetLaunchTemplateDataRequest(arg1 *ec2.GetLaunchTemplateDataInput) (*request.Request, *ec2.GetLaunchTemplateDataOutput) {
	fake.getLaunchTemplateDataRequestMutex.Lock()
	ret, specificReturn := fake.getLaunchTemplateDataRequestReturnsOnCall[len(fake.getLaunchTemplateDataRequestArgsForCall)]
	fake.getLaunchTemplateDataRequestArgsForCall = append(fake.getLaunchTemplateDataRequestArgsForCall, struct {
		arg1 *ec2.GetLaunchTemplateDataInput
	}{arg1})
	fake.recordInvocation("GetLaunchTemplateDataRequest", []interface{}{arg1})
	fake.getLaunchTemplateDataRequestMutex.Unlock()
	if fake.GetLaunchTemplateDataRequestStub != nil {
		return fake.GetLaunchTemplateDataRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLaunchTemplateDataRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetLaunchTemplateDataRequestCallCount() int {
	fake.getLaunchTemplateDataRequestMutex.RLock()
	defer fake.getLaunchTemplateDataRequestMutex.RUnlock()
	return len(fake.getLaunchTemplateDataRequestArgsForCall)
}

func (fake *FakeEC2API) GetLaunchTemplateDataRequestCalls(stub func(*ec2.GetLaunchTemplateDataInput) (*request.Request, *ec2.GetLaunchTemplateDataOutput)) {
	fake.getLaunchTemplateDataRequestMutex.Lock()
	defer fake.getLaunchTemplateDataRequestMutex.Unlock()
	fake.GetLaunchTemplateDataRequestStub = stub
}

func (fake *FakeEC2API) GetLaunchTemplateDataRequestArgsForCall(i int) *ec2.GetLaunchTemplateDataInput {
	fake.getLaunchTemplateDataRequestMutex.RLock()
	defer fake.getLaunchTemplateDataRequestMutex.RUnlock()
	argsForCall := fake.getLaunchTemplateDataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetLaunchTemplateDataRequestReturns(result1 *request.Request, result2 *ec2.GetLaunchTemplateDataOutput) {
	fake.getLaunchTemplateDataRequestMutex.Lock()
	defer fake.getLaunchTemplateDataRequestMutex.Unlock()
	fake.GetLaunchTemplateDataRequestStub = nil
	fake.getLaunchTemplateDataRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetLaunchTemplateDataOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetLaunchTemplateDataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetLaunchTemplateDataOutput) {
	fake.getLaunchTemplateDataRequestMutex.Lock()
	defer fake.getLaunchTemplateDataRequestMutex.Unlock()
	fake.GetLaunchTemplateDataRequestStub = nil
	if fake.getLaunchTemplateDataRequestReturnsOnCall == nil {
		fake.getLaunchTemplateDataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetLaunchTemplateDataOutput
		})
	}
	fake.getLaunchTemplateDataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetLaunchTemplateDataOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetLaunchTemplateDataWithContext(arg1 aws.Context, arg2 *ec2.GetLaunchTemplateDataInput, arg3 ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error) {
	fake.getLaunchTemplateDataWithContextMutex.Lock()
	ret, specificReturn := fake.getLaunchTemplateDataWithContextReturnsOnCall[len(fake.getLaunchTemplateDataWithContextArgsForCall)]
	fake.getLaunchTemplateDataWithContextArgsForCall = append(fake.getLaunchTemplateDataWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetLaunchTemplateDataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetLaunchTemplateDataWithContext", []interface{}{arg1, arg2, arg3})
	fake.getLaunchTemplateDataWithContextMutex.Unlock()
	if fake.GetLaunchTemplateDataWithContextStub != nil {
		return fake.GetLaunchTemplateDataWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLaunchTemplateDataWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetLaunchTemplateDataWithContextCallCount() int {
	fake.getLaunchTemplateDataWithContextMutex.RLock()
	defer fake.getLaunchTemplateDataWithContextMutex.RUnlock()
	return len(fake.getLaunchTemplateDataWithContextArgsForCall)
}

func (fake *FakeEC2API) GetLaunchTemplateDataWithContextCalls(stub func(aws.Context, *ec2.GetLaunchTemplateDataInput, ...request.Option) (*ec2.GetLaunchTemplateDataOutput, error)) {
	fake.getLaunchTemplateDataWithContextMutex.Lock()
	defer fake.getLaunchTemplateDataWithContextMutex.Unlock()
	fake.GetLaunchTemplateDataWithContextStub = stub
}

func (fake *FakeEC2API) GetLaunchTemplateDataWithContextArgsForCall(i int) (aws.Context, *ec2.GetLaunchTemplateDataInput, []request.Option) {
	fake.getLaunchTemplateDataWithContextMutex.RLock()
	defer fake.getLaunchTemplateDataWithContextMutex.RUnlock()
	argsForCall := fake.getLaunchTemplateDataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetLaunchTemplateDataWithContextReturns(result1 *ec2.GetLaunchTemplateDataOutput, result2 error) {
	fake.getLaunchTemplateDataWithContextMutex.Lock()
	defer fake.getLaunchTemplateDataWithContextMutex.Unlock()
	fake.GetLaunchTemplateDataWithContextStub = nil
	fake.getLaunchTemplateDataWithContextReturns = struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetLaunchTemplateDataWithContextReturnsOnCall(i int, result1 *ec2.GetLaunchTemplateDataOutput, result2 error) {
	fake.getLaunchTemplateDataWithContextMutex.Lock()
	defer fake.getLaunchTemplateDataWithContextMutex.Unlock()
	fake.GetLaunchTemplateDataWithContextStub = nil
	if fake.getLaunchTemplateDataWithContextReturnsOnCall == nil {
		fake.getLaunchTemplateDataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetLaunchTemplateDataOutput
			result2 error
		})
	}
	fake.getLaunchTemplateDataWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetLaunchTemplateDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetPasswordData(arg1 *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	fake.getPasswordDataMutex.Lock()
	ret, specificReturn := fake.getPasswordDataReturnsOnCall[len(fake.getPasswordDataArgsForCall)]
	fake.getPasswordDataArgsForCall = append(fake.getPasswordDataArgsForCall, struct {
		arg1 *ec2.GetPasswordDataInput
	}{arg1})
	fake.recordInvocation("GetPasswordData", []interface{}{arg1})
	fake.getPasswordDataMutex.Unlock()
	if fake.GetPasswordDataStub != nil {
		return fake.GetPasswordDataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPasswordDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetPasswordDataCallCount() int {
	fake.getPasswordDataMutex.RLock()
	defer fake.getPasswordDataMutex.RUnlock()
	return len(fake.getPasswordDataArgsForCall)
}

func (fake *FakeEC2API) GetPasswordDataCalls(stub func(*ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error)) {
	fake.getPasswordDataMutex.Lock()
	defer fake.getPasswordDataMutex.Unlock()
	fake.GetPasswordDataStub = stub
}

func (fake *FakeEC2API) GetPasswordDataArgsForCall(i int) *ec2.GetPasswordDataInput {
	fake.getPasswordDataMutex.RLock()
	defer fake.getPasswordDataMutex.RUnlock()
	argsForCall := fake.getPasswordDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetPasswordDataReturns(result1 *ec2.GetPasswordDataOutput, result2 error) {
	fake.getPasswordDataMutex.Lock()
	defer fake.getPasswordDataMutex.Unlock()
	fake.GetPasswordDataStub = nil
	fake.getPasswordDataReturns = struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetPasswordDataReturnsOnCall(i int, result1 *ec2.GetPasswordDataOutput, result2 error) {
	fake.getPasswordDataMutex.Lock()
	defer fake.getPasswordDataMutex.Unlock()
	fake.GetPasswordDataStub = nil
	if fake.getPasswordDataReturnsOnCall == nil {
		fake.getPasswordDataReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetPasswordDataOutput
			result2 error
		})
	}
	fake.getPasswordDataReturnsOnCall[i] = struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetPasswordDataRequest(arg1 *ec2.GetPasswordDataInput) (*request.Request, *ec2.GetPasswordDataOutput) {
	fake.getPasswordDataRequestMutex.Lock()
	ret, specificReturn := fake.getPasswordDataRequestReturnsOnCall[len(fake.getPasswordDataRequestArgsForCall)]
	fake.getPasswordDataRequestArgsForCall = append(fake.getPasswordDataRequestArgsForCall, struct {
		arg1 *ec2.GetPasswordDataInput
	}{arg1})
	fake.recordInvocation("GetPasswordDataRequest", []interface{}{arg1})
	fake.getPasswordDataRequestMutex.Unlock()
	if fake.GetPasswordDataRequestStub != nil {
		return fake.GetPasswordDataRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPasswordDataRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetPasswordDataRequestCallCount() int {
	fake.getPasswordDataRequestMutex.RLock()
	defer fake.getPasswordDataRequestMutex.RUnlock()
	return len(fake.getPasswordDataRequestArgsForCall)
}

func (fake *FakeEC2API) GetPasswordDataRequestCalls(stub func(*ec2.GetPasswordDataInput) (*request.Request, *ec2.GetPasswordDataOutput)) {
	fake.getPasswordDataRequestMutex.Lock()
	defer fake.getPasswordDataRequestMutex.Unlock()
	fake.GetPasswordDataRequestStub = stub
}

func (fake *FakeEC2API) GetPasswordDataRequestArgsForCall(i int) *ec2.GetPasswordDataInput {
	fake.getPasswordDataRequestMutex.RLock()
	defer fake.getPasswordDataRequestMutex.RUnlock()
	argsForCall := fake.getPasswordDataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetPasswordDataRequestReturns(result1 *request.Request, result2 *ec2.GetPasswordDataOutput) {
	fake.getPasswordDataRequestMutex.Lock()
	defer fake.getPasswordDataRequestMutex.Unlock()
	fake.GetPasswordDataRequestStub = nil
	fake.getPasswordDataRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetPasswordDataOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetPasswordDataRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetPasswordDataOutput) {
	fake.getPasswordDataRequestMutex.Lock()
	defer fake.getPasswordDataRequestMutex.Unlock()
	fake.GetPasswordDataRequestStub = nil
	if fake.getPasswordDataRequestReturnsOnCall == nil {
		fake.getPasswordDataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetPasswordDataOutput
		})
	}
	fake.getPasswordDataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetPasswordDataOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetPasswordDataWithContext(arg1 aws.Context, arg2 *ec2.GetPasswordDataInput, arg3 ...request.Option) (*ec2.GetPasswordDataOutput, error) {
	fake.getPasswordDataWithContextMutex.Lock()
	ret, specificReturn := fake.getPasswordDataWithContextReturnsOnCall[len(fake.getPasswordDataWithContextArgsForCall)]
	fake.getPasswordDataWithContextArgsForCall = append(fake.getPasswordDataWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetPasswordDataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPasswordDataWithContext", []interface{}{arg1, arg2, arg3})
	fake.getPasswordDataWithContextMutex.Unlock()
	if fake.GetPasswordDataWithContextStub != nil {
		return fake.GetPasswordDataWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPasswordDataWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetPasswordDataWithContextCallCount() int {
	fake.getPasswordDataWithContextMutex.RLock()
	defer fake.getPasswordDataWithContextMutex.RUnlock()
	return len(fake.getPasswordDataWithContextArgsForCall)
}

func (fake *FakeEC2API) GetPasswordDataWithContextCalls(stub func(aws.Context, *ec2.GetPasswordDataInput, ...request.Option) (*ec2.GetPasswordDataOutput, error)) {
	fake.getPasswordDataWithContextMutex.Lock()
	defer fake.getPasswordDataWithContextMutex.Unlock()
	fake.GetPasswordDataWithContextStub = stub
}

func (fake *FakeEC2API) GetPasswordDataWithContextArgsForCall(i int) (aws.Context, *ec2.GetPasswordDataInput, []request.Option) {
	fake.getPasswordDataWithContextMutex.RLock()
	defer fake.getPasswordDataWithContextMutex.RUnlock()
	argsForCall := fake.getPasswordDataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetPasswordDataWithContextReturns(result1 *ec2.GetPasswordDataOutput, result2 error) {
	fake.getPasswordDataWithContextMutex.Lock()
	defer fake.getPasswordDataWithContextMutex.Unlock()
	fake.GetPasswordDataWithContextStub = nil
	fake.getPasswordDataWithContextReturns = struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetPasswordDataWithContextReturnsOnCall(i int, result1 *ec2.GetPasswordDataOutput, result2 error) {
	fake.getPasswordDataWithContextMutex.Lock()
	defer fake.getPasswordDataWithContextMutex.Unlock()
	fake.GetPasswordDataWithContextStub = nil
	if fake.getPasswordDataWithContextReturnsOnCall == nil {
		fake.getPasswordDataWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetPasswordDataOutput
			result2 error
		})
	}
	fake.getPasswordDataWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetPasswordDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuote(arg1 *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	fake.getReservedInstancesExchangeQuoteMutex.Lock()
	ret, specificReturn := fake.getReservedInstancesExchangeQuoteReturnsOnCall[len(fake.getReservedInstancesExchangeQuoteArgsForCall)]
	fake.getReservedInstancesExchangeQuoteArgsForCall = append(fake.getReservedInstancesExchangeQuoteArgsForCall, struct {
		arg1 *ec2.GetReservedInstancesExchangeQuoteInput
	}{arg1})
	fake.recordInvocation("GetReservedInstancesExchangeQuote", []interface{}{arg1})
	fake.getReservedInstancesExchangeQuoteMutex.Unlock()
	if fake.GetReservedInstancesExchangeQuoteStub != nil {
		return fake.GetReservedInstancesExchangeQuoteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReservedInstancesExchangeQuoteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteCallCount() int {
	fake.getReservedInstancesExchangeQuoteMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteMutex.RUnlock()
	return len(fake.getReservedInstancesExchangeQuoteArgsForCall)
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteCalls(stub func(*ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)) {
	fake.getReservedInstancesExchangeQuoteMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteStub = stub
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteArgsForCall(i int) *ec2.GetReservedInstancesExchangeQuoteInput {
	fake.getReservedInstancesExchangeQuoteMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteMutex.RUnlock()
	argsForCall := fake.getReservedInstancesExchangeQuoteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteReturns(result1 *ec2.GetReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.getReservedInstancesExchangeQuoteMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteStub = nil
	fake.getReservedInstancesExchangeQuoteReturns = struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteReturnsOnCall(i int, result1 *ec2.GetReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.getReservedInstancesExchangeQuoteMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteStub = nil
	if fake.getReservedInstancesExchangeQuoteReturnsOnCall == nil {
		fake.getReservedInstancesExchangeQuoteReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetReservedInstancesExchangeQuoteOutput
			result2 error
		})
	}
	fake.getReservedInstancesExchangeQuoteReturnsOnCall[i] = struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteRequest(arg1 *ec2.GetReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.GetReservedInstancesExchangeQuoteOutput) {
	fake.getReservedInstancesExchangeQuoteRequestMutex.Lock()
	ret, specificReturn := fake.getReservedInstancesExchangeQuoteRequestReturnsOnCall[len(fake.getReservedInstancesExchangeQuoteRequestArgsForCall)]
	fake.getReservedInstancesExchangeQuoteRequestArgsForCall = append(fake.getReservedInstancesExchangeQuoteRequestArgsForCall, struct {
		arg1 *ec2.GetReservedInstancesExchangeQuoteInput
	}{arg1})
	fake.recordInvocation("GetReservedInstancesExchangeQuoteRequest", []interface{}{arg1})
	fake.getReservedInstancesExchangeQuoteRequestMutex.Unlock()
	if fake.GetReservedInstancesExchangeQuoteRequestStub != nil {
		return fake.GetReservedInstancesExchangeQuoteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReservedInstancesExchangeQuoteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteRequestCallCount() int {
	fake.getReservedInstancesExchangeQuoteRequestMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteRequestMutex.RUnlock()
	return len(fake.getReservedInstancesExchangeQuoteRequestArgsForCall)
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteRequestCalls(stub func(*ec2.GetReservedInstancesExchangeQuoteInput) (*request.Request, *ec2.GetReservedInstancesExchangeQuoteOutput)) {
	fake.getReservedInstancesExchangeQuoteRequestMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteRequestMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteRequestStub = stub
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteRequestArgsForCall(i int) *ec2.GetReservedInstancesExchangeQuoteInput {
	fake.getReservedInstancesExchangeQuoteRequestMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteRequestMutex.RUnlock()
	argsForCall := fake.getReservedInstancesExchangeQuoteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteRequestReturns(result1 *request.Request, result2 *ec2.GetReservedInstancesExchangeQuoteOutput) {
	fake.getReservedInstancesExchangeQuoteRequestMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteRequestMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteRequestStub = nil
	fake.getReservedInstancesExchangeQuoteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetReservedInstancesExchangeQuoteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetReservedInstancesExchangeQuoteOutput) {
	fake.getReservedInstancesExchangeQuoteRequestMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteRequestMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteRequestStub = nil
	if fake.getReservedInstancesExchangeQuoteRequestReturnsOnCall == nil {
		fake.getReservedInstancesExchangeQuoteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetReservedInstancesExchangeQuoteOutput
		})
	}
	fake.getReservedInstancesExchangeQuoteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetReservedInstancesExchangeQuoteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteWithContext(arg1 aws.Context, arg2 *ec2.GetReservedInstancesExchangeQuoteInput, arg3 ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	fake.getReservedInstancesExchangeQuoteWithContextMutex.Lock()
	ret, specificReturn := fake.getReservedInstancesExchangeQuoteWithContextReturnsOnCall[len(fake.getReservedInstancesExchangeQuoteWithContextArgsForCall)]
	fake.getReservedInstancesExchangeQuoteWithContextArgsForCall = append(fake.getReservedInstancesExchangeQuoteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetReservedInstancesExchangeQuoteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetReservedInstancesExchangeQuoteWithContext", []interface{}{arg1, arg2, arg3})
	fake.getReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	if fake.GetReservedInstancesExchangeQuoteWithContextStub != nil {
		return fake.GetReservedInstancesExchangeQuoteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReservedInstancesExchangeQuoteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteWithContextCallCount() int {
	fake.getReservedInstancesExchangeQuoteWithContextMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteWithContextMutex.RUnlock()
	return len(fake.getReservedInstancesExchangeQuoteWithContextArgsForCall)
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteWithContextCalls(stub func(aws.Context, *ec2.GetReservedInstancesExchangeQuoteInput, ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)) {
	fake.getReservedInstancesExchangeQuoteWithContextMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteWithContextStub = stub
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteWithContextArgsForCall(i int) (aws.Context, *ec2.GetReservedInstancesExchangeQuoteInput, []request.Option) {
	fake.getReservedInstancesExchangeQuoteWithContextMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteWithContextMutex.RUnlock()
	argsForCall := fake.getReservedInstancesExchangeQuoteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteWithContextReturns(result1 *ec2.GetReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.getReservedInstancesExchangeQuoteWithContextMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteWithContextStub = nil
	fake.getReservedInstancesExchangeQuoteWithContextReturns = struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetReservedInstancesExchangeQuoteWithContextReturnsOnCall(i int, result1 *ec2.GetReservedInstancesExchangeQuoteOutput, result2 error) {
	fake.getReservedInstancesExchangeQuoteWithContextMutex.Lock()
	defer fake.getReservedInstancesExchangeQuoteWithContextMutex.Unlock()
	fake.GetReservedInstancesExchangeQuoteWithContextStub = nil
	if fake.getReservedInstancesExchangeQuoteWithContextReturnsOnCall == nil {
		fake.getReservedInstancesExchangeQuoteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetReservedInstancesExchangeQuoteOutput
			result2 error
		})
	}
	fake.getReservedInstancesExchangeQuoteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetReservedInstancesExchangeQuoteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagations(arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	fake.getTransitGatewayAttachmentPropagationsMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayAttachmentPropagationsReturnsOnCall[len(fake.getTransitGatewayAttachmentPropagationsArgsForCall)]
	fake.getTransitGatewayAttachmentPropagationsArgsForCall = append(fake.getTransitGatewayAttachmentPropagationsArgsForCall, struct {
		arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}{arg1})
	fake.recordInvocation("GetTransitGatewayAttachmentPropagations", []interface{}{arg1})
	fake.getTransitGatewayAttachmentPropagationsMutex.Unlock()
	if fake.GetTransitGatewayAttachmentPropagationsStub != nil {
		return fake.GetTransitGatewayAttachmentPropagationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayAttachmentPropagationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsCallCount() int {
	fake.getTransitGatewayAttachmentPropagationsMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsMutex.RUnlock()
	return len(fake.getTransitGatewayAttachmentPropagationsArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsCalls(stub func(*ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)) {
	fake.getTransitGatewayAttachmentPropagationsMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsArgsForCall(i int) *ec2.GetTransitGatewayAttachmentPropagationsInput {
	fake.getTransitGatewayAttachmentPropagationsMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsMutex.RUnlock()
	argsForCall := fake.getTransitGatewayAttachmentPropagationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsReturns(result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput, result2 error) {
	fake.getTransitGatewayAttachmentPropagationsMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsStub = nil
	fake.getTransitGatewayAttachmentPropagationsReturns = struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsReturnsOnCall(i int, result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput, result2 error) {
	fake.getTransitGatewayAttachmentPropagationsMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsStub = nil
	if fake.getTransitGatewayAttachmentPropagationsReturnsOnCall == nil {
		fake.getTransitGatewayAttachmentPropagationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
			result2 error
		})
	}
	fake.getTransitGatewayAttachmentPropagationsReturnsOnCall[i] = struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsRequest(arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput) (*request.Request, *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayAttachmentPropagationsRequestReturnsOnCall[len(fake.getTransitGatewayAttachmentPropagationsRequestArgsForCall)]
	fake.getTransitGatewayAttachmentPropagationsRequestArgsForCall = append(fake.getTransitGatewayAttachmentPropagationsRequestArgsForCall, struct {
		arg1 *ec2.GetTransitGatewayAttachmentPropagationsInput
	}{arg1})
	fake.recordInvocation("GetTransitGatewayAttachmentPropagationsRequest", []interface{}{arg1})
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.Unlock()
	if fake.GetTransitGatewayAttachmentPropagationsRequestStub != nil {
		return fake.GetTransitGatewayAttachmentPropagationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayAttachmentPropagationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsRequestCallCount() int {
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsRequestMutex.RUnlock()
	return len(fake.getTransitGatewayAttachmentPropagationsRequestArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsRequestCalls(stub func(*ec2.GetTransitGatewayAttachmentPropagationsInput) (*request.Request, *ec2.GetTransitGatewayAttachmentPropagationsOutput)) {
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsRequestMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsRequestStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsRequestArgsForCall(i int) *ec2.GetTransitGatewayAttachmentPropagationsInput {
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsRequestMutex.RUnlock()
	argsForCall := fake.getTransitGatewayAttachmentPropagationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsRequestReturns(result1 *request.Request, result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsRequestMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsRequestStub = nil
	fake.getTransitGatewayAttachmentPropagationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsRequestMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsRequestStub = nil
	if fake.getTransitGatewayAttachmentPropagationsRequestReturnsOnCall == nil {
		fake.getTransitGatewayAttachmentPropagationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		})
	}
	fake.getTransitGatewayAttachmentPropagationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsWithContext(arg1 aws.Context, arg2 *ec2.GetTransitGatewayAttachmentPropagationsInput, arg3 ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayAttachmentPropagationsWithContextReturnsOnCall[len(fake.getTransitGatewayAttachmentPropagationsWithContextArgsForCall)]
	fake.getTransitGatewayAttachmentPropagationsWithContextArgsForCall = append(fake.getTransitGatewayAttachmentPropagationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetTransitGatewayAttachmentPropagationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetTransitGatewayAttachmentPropagationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Unlock()
	if fake.GetTransitGatewayAttachmentPropagationsWithContextStub != nil {
		return fake.GetTransitGatewayAttachmentPropagationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayAttachmentPropagationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsWithContextCallCount() int {
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsWithContextMutex.RUnlock()
	return len(fake.getTransitGatewayAttachmentPropagationsWithContextArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsWithContextCalls(stub func(aws.Context, *ec2.GetTransitGatewayAttachmentPropagationsInput, ...request.Option) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)) {
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsWithContextStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsWithContextArgsForCall(i int) (aws.Context, *ec2.GetTransitGatewayAttachmentPropagationsInput, []request.Option) {
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsWithContextMutex.RUnlock()
	argsForCall := fake.getTransitGatewayAttachmentPropagationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsWithContextReturns(result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput, result2 error) {
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsWithContextStub = nil
	fake.getTransitGatewayAttachmentPropagationsWithContextReturns = struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayAttachmentPropagationsWithContextReturnsOnCall(i int, result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput, result2 error) {
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Lock()
	defer fake.getTransitGatewayAttachmentPropagationsWithContextMutex.Unlock()
	fake.GetTransitGatewayAttachmentPropagationsWithContextStub = nil
	if fake.getTransitGatewayAttachmentPropagationsWithContextReturnsOnCall == nil {
		fake.getTransitGatewayAttachmentPropagationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
			result2 error
		})
	}
	fake.getTransitGatewayAttachmentPropagationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociations(arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	fake.getTransitGatewayRouteTableAssociationsMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayRouteTableAssociationsReturnsOnCall[len(fake.getTransitGatewayRouteTableAssociationsArgsForCall)]
	fake.getTransitGatewayRouteTableAssociationsArgsForCall = append(fake.getTransitGatewayRouteTableAssociationsArgsForCall, struct {
		arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}{arg1})
	fake.recordInvocation("GetTransitGatewayRouteTableAssociations", []interface{}{arg1})
	fake.getTransitGatewayRouteTableAssociationsMutex.Unlock()
	if fake.GetTransitGatewayRouteTableAssociationsStub != nil {
		return fake.GetTransitGatewayRouteTableAssociationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayRouteTableAssociationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsCallCount() int {
	fake.getTransitGatewayRouteTableAssociationsMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsMutex.RUnlock()
	return len(fake.getTransitGatewayRouteTableAssociationsArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsCalls(stub func(*ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)) {
	fake.getTransitGatewayRouteTableAssociationsMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsArgsForCall(i int) *ec2.GetTransitGatewayRouteTableAssociationsInput {
	fake.getTransitGatewayRouteTableAssociationsMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsMutex.RUnlock()
	argsForCall := fake.getTransitGatewayRouteTableAssociationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsReturns(result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput, result2 error) {
	fake.getTransitGatewayRouteTableAssociationsMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsStub = nil
	fake.getTransitGatewayRouteTableAssociationsReturns = struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsReturnsOnCall(i int, result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput, result2 error) {
	fake.getTransitGatewayRouteTableAssociationsMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsStub = nil
	if fake.getTransitGatewayRouteTableAssociationsReturnsOnCall == nil {
		fake.getTransitGatewayRouteTableAssociationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
			result2 error
		})
	}
	fake.getTransitGatewayRouteTableAssociationsReturnsOnCall[i] = struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsRequest(arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayRouteTableAssociationsRequestReturnsOnCall[len(fake.getTransitGatewayRouteTableAssociationsRequestArgsForCall)]
	fake.getTransitGatewayRouteTableAssociationsRequestArgsForCall = append(fake.getTransitGatewayRouteTableAssociationsRequestArgsForCall, struct {
		arg1 *ec2.GetTransitGatewayRouteTableAssociationsInput
	}{arg1})
	fake.recordInvocation("GetTransitGatewayRouteTableAssociationsRequest", []interface{}{arg1})
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.Unlock()
	if fake.GetTransitGatewayRouteTableAssociationsRequestStub != nil {
		return fake.GetTransitGatewayRouteTableAssociationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayRouteTableAssociationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsRequestCallCount() int {
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsRequestMutex.RUnlock()
	return len(fake.getTransitGatewayRouteTableAssociationsRequestArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsRequestCalls(stub func(*ec2.GetTransitGatewayRouteTableAssociationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTableAssociationsOutput)) {
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsRequestMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsRequestStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsRequestArgsForCall(i int) *ec2.GetTransitGatewayRouteTableAssociationsInput {
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsRequestMutex.RUnlock()
	argsForCall := fake.getTransitGatewayRouteTableAssociationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsRequestReturns(result1 *request.Request, result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsRequestMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsRequestStub = nil
	fake.getTransitGatewayRouteTableAssociationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsRequestMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsRequestStub = nil
	if fake.getTransitGatewayRouteTableAssociationsRequestReturnsOnCall == nil {
		fake.getTransitGatewayRouteTableAssociationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		})
	}
	fake.getTransitGatewayRouteTableAssociationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsWithContext(arg1 aws.Context, arg2 *ec2.GetTransitGatewayRouteTableAssociationsInput, arg3 ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayRouteTableAssociationsWithContextReturnsOnCall[len(fake.getTransitGatewayRouteTableAssociationsWithContextArgsForCall)]
	fake.getTransitGatewayRouteTableAssociationsWithContextArgsForCall = append(fake.getTransitGatewayRouteTableAssociationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetTransitGatewayRouteTableAssociationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetTransitGatewayRouteTableAssociationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Unlock()
	if fake.GetTransitGatewayRouteTableAssociationsWithContextStub != nil {
		return fake.GetTransitGatewayRouteTableAssociationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayRouteTableAssociationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsWithContextCallCount() int {
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsWithContextMutex.RUnlock()
	return len(fake.getTransitGatewayRouteTableAssociationsWithContextArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsWithContextCalls(stub func(aws.Context, *ec2.GetTransitGatewayRouteTableAssociationsInput, ...request.Option) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)) {
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsWithContextStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsWithContextArgsForCall(i int) (aws.Context, *ec2.GetTransitGatewayRouteTableAssociationsInput, []request.Option) {
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsWithContextMutex.RUnlock()
	argsForCall := fake.getTransitGatewayRouteTableAssociationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsWithContextReturns(result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput, result2 error) {
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsWithContextStub = nil
	fake.getTransitGatewayRouteTableAssociationsWithContextReturns = struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTableAssociationsWithContextReturnsOnCall(i int, result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput, result2 error) {
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Lock()
	defer fake.getTransitGatewayRouteTableAssociationsWithContextMutex.Unlock()
	fake.GetTransitGatewayRouteTableAssociationsWithContextStub = nil
	if fake.getTransitGatewayRouteTableAssociationsWithContextReturnsOnCall == nil {
		fake.getTransitGatewayRouteTableAssociationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
			result2 error
		})
	}
	fake.getTransitGatewayRouteTableAssociationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagations(arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	fake.getTransitGatewayRouteTablePropagationsMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayRouteTablePropagationsReturnsOnCall[len(fake.getTransitGatewayRouteTablePropagationsArgsForCall)]
	fake.getTransitGatewayRouteTablePropagationsArgsForCall = append(fake.getTransitGatewayRouteTablePropagationsArgsForCall, struct {
		arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}{arg1})
	fake.recordInvocation("GetTransitGatewayRouteTablePropagations", []interface{}{arg1})
	fake.getTransitGatewayRouteTablePropagationsMutex.Unlock()
	if fake.GetTransitGatewayRouteTablePropagationsStub != nil {
		return fake.GetTransitGatewayRouteTablePropagationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayRouteTablePropagationsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsCallCount() int {
	fake.getTransitGatewayRouteTablePropagationsMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsMutex.RUnlock()
	return len(fake.getTransitGatewayRouteTablePropagationsArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsCalls(stub func(*ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)) {
	fake.getTransitGatewayRouteTablePropagationsMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsArgsForCall(i int) *ec2.GetTransitGatewayRouteTablePropagationsInput {
	fake.getTransitGatewayRouteTablePropagationsMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsMutex.RUnlock()
	argsForCall := fake.getTransitGatewayRouteTablePropagationsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsReturns(result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput, result2 error) {
	fake.getTransitGatewayRouteTablePropagationsMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsStub = nil
	fake.getTransitGatewayRouteTablePropagationsReturns = struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsReturnsOnCall(i int, result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput, result2 error) {
	fake.getTransitGatewayRouteTablePropagationsMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsStub = nil
	if fake.getTransitGatewayRouteTablePropagationsReturnsOnCall == nil {
		fake.getTransitGatewayRouteTablePropagationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
			result2 error
		})
	}
	fake.getTransitGatewayRouteTablePropagationsReturnsOnCall[i] = struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsRequest(arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayRouteTablePropagationsRequestReturnsOnCall[len(fake.getTransitGatewayRouteTablePropagationsRequestArgsForCall)]
	fake.getTransitGatewayRouteTablePropagationsRequestArgsForCall = append(fake.getTransitGatewayRouteTablePropagationsRequestArgsForCall, struct {
		arg1 *ec2.GetTransitGatewayRouteTablePropagationsInput
	}{arg1})
	fake.recordInvocation("GetTransitGatewayRouteTablePropagationsRequest", []interface{}{arg1})
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.Unlock()
	if fake.GetTransitGatewayRouteTablePropagationsRequestStub != nil {
		return fake.GetTransitGatewayRouteTablePropagationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayRouteTablePropagationsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsRequestCallCount() int {
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsRequestMutex.RUnlock()
	return len(fake.getTransitGatewayRouteTablePropagationsRequestArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsRequestCalls(stub func(*ec2.GetTransitGatewayRouteTablePropagationsInput) (*request.Request, *ec2.GetTransitGatewayRouteTablePropagationsOutput)) {
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsRequestMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsRequestStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsRequestArgsForCall(i int) *ec2.GetTransitGatewayRouteTablePropagationsInput {
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsRequestMutex.RUnlock()
	argsForCall := fake.getTransitGatewayRouteTablePropagationsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsRequestReturns(result1 *request.Request, result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsRequestMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsRequestStub = nil
	fake.getTransitGatewayRouteTablePropagationsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsRequestMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsRequestStub = nil
	if fake.getTransitGatewayRouteTablePropagationsRequestReturnsOnCall == nil {
		fake.getTransitGatewayRouteTablePropagationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		})
	}
	fake.getTransitGatewayRouteTablePropagationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsWithContext(arg1 aws.Context, arg2 *ec2.GetTransitGatewayRouteTablePropagationsInput, arg3 ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Lock()
	ret, specificReturn := fake.getTransitGatewayRouteTablePropagationsWithContextReturnsOnCall[len(fake.getTransitGatewayRouteTablePropagationsWithContextArgsForCall)]
	fake.getTransitGatewayRouteTablePropagationsWithContextArgsForCall = append(fake.getTransitGatewayRouteTablePropagationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetTransitGatewayRouteTablePropagationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetTransitGatewayRouteTablePropagationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Unlock()
	if fake.GetTransitGatewayRouteTablePropagationsWithContextStub != nil {
		return fake.GetTransitGatewayRouteTablePropagationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTransitGatewayRouteTablePropagationsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsWithContextCallCount() int {
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsWithContextMutex.RUnlock()
	return len(fake.getTransitGatewayRouteTablePropagationsWithContextArgsForCall)
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsWithContextCalls(stub func(aws.Context, *ec2.GetTransitGatewayRouteTablePropagationsInput, ...request.Option) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)) {
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsWithContextStub = stub
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsWithContextArgsForCall(i int) (aws.Context, *ec2.GetTransitGatewayRouteTablePropagationsInput, []request.Option) {
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsWithContextMutex.RUnlock()
	argsForCall := fake.getTransitGatewayRouteTablePropagationsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsWithContextReturns(result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput, result2 error) {
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsWithContextStub = nil
	fake.getTransitGatewayRouteTablePropagationsWithContextReturns = struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) GetTransitGatewayRouteTablePropagationsWithContextReturnsOnCall(i int, result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput, result2 error) {
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Lock()
	defer fake.getTransitGatewayRouteTablePropagationsWithContextMutex.Unlock()
	fake.GetTransitGatewayRouteTablePropagationsWithContextStub = nil
	if fake.getTransitGatewayRouteTablePropagationsWithContextReturnsOnCall == nil {
		fake.getTransitGatewayRouteTablePropagationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
			result2 error
		})
	}
	fake.getTransitGatewayRouteTablePropagationsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationList(arg1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	fake.importClientVpnClientCertificateRevocationListMutex.Lock()
	ret, specificReturn := fake.importClientVpnClientCertificateRevocationListReturnsOnCall[len(fake.importClientVpnClientCertificateRevocationListArgsForCall)]
	fake.importClientVpnClientCertificateRevocationListArgsForCall = append(fake.importClientVpnClientCertificateRevocationListArgsForCall, struct {
		arg1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}{arg1})
	fake.recordInvocation("ImportClientVpnClientCertificateRevocationList", []interface{}{arg1})
	fake.importClientVpnClientCertificateRevocationListMutex.Unlock()
	if fake.ImportClientVpnClientCertificateRevocationListStub != nil {
		return fake.ImportClientVpnClientCertificateRevocationListStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importClientVpnClientCertificateRevocationListReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListCallCount() int {
	fake.importClientVpnClientCertificateRevocationListMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListMutex.RUnlock()
	return len(fake.importClientVpnClientCertificateRevocationListArgsForCall)
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListCalls(stub func(*ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)) {
	fake.importClientVpnClientCertificateRevocationListMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListStub = stub
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListArgsForCall(i int) *ec2.ImportClientVpnClientCertificateRevocationListInput {
	fake.importClientVpnClientCertificateRevocationListMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListMutex.RUnlock()
	argsForCall := fake.importClientVpnClientCertificateRevocationListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListReturns(result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.importClientVpnClientCertificateRevocationListMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListStub = nil
	fake.importClientVpnClientCertificateRevocationListReturns = struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListReturnsOnCall(i int, result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.importClientVpnClientCertificateRevocationListMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListStub = nil
	if fake.importClientVpnClientCertificateRevocationListReturnsOnCall == nil {
		fake.importClientVpnClientCertificateRevocationListReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
			result2 error
		})
	}
	fake.importClientVpnClientCertificateRevocationListReturnsOnCall[i] = struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListRequest(arg1 *ec2.ImportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
	fake.importClientVpnClientCertificateRevocationListRequestMutex.Lock()
	ret, specificReturn := fake.importClientVpnClientCertificateRevocationListRequestReturnsOnCall[len(fake.importClientVpnClientCertificateRevocationListRequestArgsForCall)]
	fake.importClientVpnClientCertificateRevocationListRequestArgsForCall = append(fake.importClientVpnClientCertificateRevocationListRequestArgsForCall, struct {
		arg1 *ec2.ImportClientVpnClientCertificateRevocationListInput
	}{arg1})
	fake.recordInvocation("ImportClientVpnClientCertificateRevocationListRequest", []interface{}{arg1})
	fake.importClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	if fake.ImportClientVpnClientCertificateRevocationListRequestStub != nil {
		return fake.ImportClientVpnClientCertificateRevocationListRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importClientVpnClientCertificateRevocationListRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListRequestCallCount() int {
	fake.importClientVpnClientCertificateRevocationListRequestMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListRequestMutex.RUnlock()
	return len(fake.importClientVpnClientCertificateRevocationListRequestArgsForCall)
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListRequestCalls(stub func(*ec2.ImportClientVpnClientCertificateRevocationListInput) (*request.Request, *ec2.ImportClientVpnClientCertificateRevocationListOutput)) {
	fake.importClientVpnClientCertificateRevocationListRequestMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListRequestStub = stub
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListRequestArgsForCall(i int) *ec2.ImportClientVpnClientCertificateRevocationListInput {
	fake.importClientVpnClientCertificateRevocationListRequestMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListRequestMutex.RUnlock()
	argsForCall := fake.importClientVpnClientCertificateRevocationListRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListRequestReturns(result1 *request.Request, result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
	fake.importClientVpnClientCertificateRevocationListRequestMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListRequestStub = nil
	fake.importClientVpnClientCertificateRevocationListRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
	fake.importClientVpnClientCertificateRevocationListRequestMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListRequestMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListRequestStub = nil
	if fake.importClientVpnClientCertificateRevocationListRequestReturnsOnCall == nil {
		fake.importClientVpnClientCertificateRevocationListRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		})
	}
	fake.importClientVpnClientCertificateRevocationListRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListWithContext(arg1 aws.Context, arg2 *ec2.ImportClientVpnClientCertificateRevocationListInput, arg3 ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	ret, specificReturn := fake.importClientVpnClientCertificateRevocationListWithContextReturnsOnCall[len(fake.importClientVpnClientCertificateRevocationListWithContextArgsForCall)]
	fake.importClientVpnClientCertificateRevocationListWithContextArgsForCall = append(fake.importClientVpnClientCertificateRevocationListWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ImportClientVpnClientCertificateRevocationListInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportClientVpnClientCertificateRevocationListWithContext", []interface{}{arg1, arg2, arg3})
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	if fake.ImportClientVpnClientCertificateRevocationListWithContextStub != nil {
		return fake.ImportClientVpnClientCertificateRevocationListWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importClientVpnClientCertificateRevocationListWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListWithContextCallCount() int {
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListWithContextMutex.RUnlock()
	return len(fake.importClientVpnClientCertificateRevocationListWithContextArgsForCall)
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListWithContextCalls(stub func(aws.Context, *ec2.ImportClientVpnClientCertificateRevocationListInput, ...request.Option) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)) {
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListWithContextStub = stub
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListWithContextArgsForCall(i int) (aws.Context, *ec2.ImportClientVpnClientCertificateRevocationListInput, []request.Option) {
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListWithContextMutex.RUnlock()
	argsForCall := fake.importClientVpnClientCertificateRevocationListWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListWithContextReturns(result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListWithContextStub = nil
	fake.importClientVpnClientCertificateRevocationListWithContextReturns = struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportClientVpnClientCertificateRevocationListWithContextReturnsOnCall(i int, result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput, result2 error) {
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.Lock()
	defer fake.importClientVpnClientCertificateRevocationListWithContextMutex.Unlock()
	fake.ImportClientVpnClientCertificateRevocationListWithContextStub = nil
	if fake.importClientVpnClientCertificateRevocationListWithContextReturnsOnCall == nil {
		fake.importClientVpnClientCertificateRevocationListWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
			result2 error
		})
	}
	fake.importClientVpnClientCertificateRevocationListWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportImage(arg1 *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	fake.importImageMutex.Lock()
	ret, specificReturn := fake.importImageReturnsOnCall[len(fake.importImageArgsForCall)]
	fake.importImageArgsForCall = append(fake.importImageArgsForCall, struct {
		arg1 *ec2.ImportImageInput
	}{arg1})
	fake.recordInvocation("ImportImage", []interface{}{arg1})
	fake.importImageMutex.Unlock()
	if fake.ImportImageStub != nil {
		return fake.ImportImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportImageCallCount() int {
	fake.importImageMutex.RLock()
	defer fake.importImageMutex.RUnlock()
	return len(fake.importImageArgsForCall)
}

func (fake *FakeEC2API) ImportImageCalls(stub func(*ec2.ImportImageInput) (*ec2.ImportImageOutput, error)) {
	fake.importImageMutex.Lock()
	defer fake.importImageMutex.Unlock()
	fake.ImportImageStub = stub
}

func (fake *FakeEC2API) ImportImageArgsForCall(i int) *ec2.ImportImageInput {
	fake.importImageMutex.RLock()
	defer fake.importImageMutex.RUnlock()
	argsForCall := fake.importImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportImageReturns(result1 *ec2.ImportImageOutput, result2 error) {
	fake.importImageMutex.Lock()
	defer fake.importImageMutex.Unlock()
	fake.ImportImageStub = nil
	fake.importImageReturns = struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportImageReturnsOnCall(i int, result1 *ec2.ImportImageOutput, result2 error) {
	fake.importImageMutex.Lock()
	defer fake.importImageMutex.Unlock()
	fake.ImportImageStub = nil
	if fake.importImageReturnsOnCall == nil {
		fake.importImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportImageOutput
			result2 error
		})
	}
	fake.importImageReturnsOnCall[i] = struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportImageRequest(arg1 *ec2.ImportImageInput) (*request.Request, *ec2.ImportImageOutput) {
	fake.importImageRequestMutex.Lock()
	ret, specificReturn := fake.importImageRequestReturnsOnCall[len(fake.importImageRequestArgsForCall)]
	fake.importImageRequestArgsForCall = append(fake.importImageRequestArgsForCall, struct {
		arg1 *ec2.ImportImageInput
	}{arg1})
	fake.recordInvocation("ImportImageRequest", []interface{}{arg1})
	fake.importImageRequestMutex.Unlock()
	if fake.ImportImageRequestStub != nil {
		return fake.ImportImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportImageRequestCallCount() int {
	fake.importImageRequestMutex.RLock()
	defer fake.importImageRequestMutex.RUnlock()
	return len(fake.importImageRequestArgsForCall)
}

func (fake *FakeEC2API) ImportImageRequestCalls(stub func(*ec2.ImportImageInput) (*request.Request, *ec2.ImportImageOutput)) {
	fake.importImageRequestMutex.Lock()
	defer fake.importImageRequestMutex.Unlock()
	fake.ImportImageRequestStub = stub
}

func (fake *FakeEC2API) ImportImageRequestArgsForCall(i int) *ec2.ImportImageInput {
	fake.importImageRequestMutex.RLock()
	defer fake.importImageRequestMutex.RUnlock()
	argsForCall := fake.importImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportImageRequestReturns(result1 *request.Request, result2 *ec2.ImportImageOutput) {
	fake.importImageRequestMutex.Lock()
	defer fake.importImageRequestMutex.Unlock()
	fake.ImportImageRequestStub = nil
	fake.importImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ImportImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ImportImageOutput) {
	fake.importImageRequestMutex.Lock()
	defer fake.importImageRequestMutex.Unlock()
	fake.ImportImageRequestStub = nil
	if fake.importImageRequestReturnsOnCall == nil {
		fake.importImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ImportImageOutput
		})
	}
	fake.importImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ImportImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportImageWithContext(arg1 aws.Context, arg2 *ec2.ImportImageInput, arg3 ...request.Option) (*ec2.ImportImageOutput, error) {
	fake.importImageWithContextMutex.Lock()
	ret, specificReturn := fake.importImageWithContextReturnsOnCall[len(fake.importImageWithContextArgsForCall)]
	fake.importImageWithContextArgsForCall = append(fake.importImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ImportImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.importImageWithContextMutex.Unlock()
	if fake.ImportImageWithContextStub != nil {
		return fake.ImportImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportImageWithContextCallCount() int {
	fake.importImageWithContextMutex.RLock()
	defer fake.importImageWithContextMutex.RUnlock()
	return len(fake.importImageWithContextArgsForCall)
}

func (fake *FakeEC2API) ImportImageWithContextCalls(stub func(aws.Context, *ec2.ImportImageInput, ...request.Option) (*ec2.ImportImageOutput, error)) {
	fake.importImageWithContextMutex.Lock()
	defer fake.importImageWithContextMutex.Unlock()
	fake.ImportImageWithContextStub = stub
}

func (fake *FakeEC2API) ImportImageWithContextArgsForCall(i int) (aws.Context, *ec2.ImportImageInput, []request.Option) {
	fake.importImageWithContextMutex.RLock()
	defer fake.importImageWithContextMutex.RUnlock()
	argsForCall := fake.importImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ImportImageWithContextReturns(result1 *ec2.ImportImageOutput, result2 error) {
	fake.importImageWithContextMutex.Lock()
	defer fake.importImageWithContextMutex.Unlock()
	fake.ImportImageWithContextStub = nil
	fake.importImageWithContextReturns = struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportImageWithContextReturnsOnCall(i int, result1 *ec2.ImportImageOutput, result2 error) {
	fake.importImageWithContextMutex.Lock()
	defer fake.importImageWithContextMutex.Unlock()
	fake.ImportImageWithContextStub = nil
	if fake.importImageWithContextReturnsOnCall == nil {
		fake.importImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportImageOutput
			result2 error
		})
	}
	fake.importImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ImportImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportInstance(arg1 *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	fake.importInstanceMutex.Lock()
	ret, specificReturn := fake.importInstanceReturnsOnCall[len(fake.importInstanceArgsForCall)]
	fake.importInstanceArgsForCall = append(fake.importInstanceArgsForCall, struct {
		arg1 *ec2.ImportInstanceInput
	}{arg1})
	fake.recordInvocation("ImportInstance", []interface{}{arg1})
	fake.importInstanceMutex.Unlock()
	if fake.ImportInstanceStub != nil {
		return fake.ImportInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportInstanceCallCount() int {
	fake.importInstanceMutex.RLock()
	defer fake.importInstanceMutex.RUnlock()
	return len(fake.importInstanceArgsForCall)
}

func (fake *FakeEC2API) ImportInstanceCalls(stub func(*ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error)) {
	fake.importInstanceMutex.Lock()
	defer fake.importInstanceMutex.Unlock()
	fake.ImportInstanceStub = stub
}

func (fake *FakeEC2API) ImportInstanceArgsForCall(i int) *ec2.ImportInstanceInput {
	fake.importInstanceMutex.RLock()
	defer fake.importInstanceMutex.RUnlock()
	argsForCall := fake.importInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportInstanceReturns(result1 *ec2.ImportInstanceOutput, result2 error) {
	fake.importInstanceMutex.Lock()
	defer fake.importInstanceMutex.Unlock()
	fake.ImportInstanceStub = nil
	fake.importInstanceReturns = struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportInstanceReturnsOnCall(i int, result1 *ec2.ImportInstanceOutput, result2 error) {
	fake.importInstanceMutex.Lock()
	defer fake.importInstanceMutex.Unlock()
	fake.ImportInstanceStub = nil
	if fake.importInstanceReturnsOnCall == nil {
		fake.importInstanceReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportInstanceOutput
			result2 error
		})
	}
	fake.importInstanceReturnsOnCall[i] = struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportInstanceRequest(arg1 *ec2.ImportInstanceInput) (*request.Request, *ec2.ImportInstanceOutput) {
	fake.importInstanceRequestMutex.Lock()
	ret, specificReturn := fake.importInstanceRequestReturnsOnCall[len(fake.importInstanceRequestArgsForCall)]
	fake.importInstanceRequestArgsForCall = append(fake.importInstanceRequestArgsForCall, struct {
		arg1 *ec2.ImportInstanceInput
	}{arg1})
	fake.recordInvocation("ImportInstanceRequest", []interface{}{arg1})
	fake.importInstanceRequestMutex.Unlock()
	if fake.ImportInstanceRequestStub != nil {
		return fake.ImportInstanceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importInstanceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportInstanceRequestCallCount() int {
	fake.importInstanceRequestMutex.RLock()
	defer fake.importInstanceRequestMutex.RUnlock()
	return len(fake.importInstanceRequestArgsForCall)
}

func (fake *FakeEC2API) ImportInstanceRequestCalls(stub func(*ec2.ImportInstanceInput) (*request.Request, *ec2.ImportInstanceOutput)) {
	fake.importInstanceRequestMutex.Lock()
	defer fake.importInstanceRequestMutex.Unlock()
	fake.ImportInstanceRequestStub = stub
}

func (fake *FakeEC2API) ImportInstanceRequestArgsForCall(i int) *ec2.ImportInstanceInput {
	fake.importInstanceRequestMutex.RLock()
	defer fake.importInstanceRequestMutex.RUnlock()
	argsForCall := fake.importInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportInstanceRequestReturns(result1 *request.Request, result2 *ec2.ImportInstanceOutput) {
	fake.importInstanceRequestMutex.Lock()
	defer fake.importInstanceRequestMutex.Unlock()
	fake.ImportInstanceRequestStub = nil
	fake.importInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ImportInstanceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ImportInstanceOutput) {
	fake.importInstanceRequestMutex.Lock()
	defer fake.importInstanceRequestMutex.Unlock()
	fake.ImportInstanceRequestStub = nil
	if fake.importInstanceRequestReturnsOnCall == nil {
		fake.importInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ImportInstanceOutput
		})
	}
	fake.importInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ImportInstanceOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportInstanceWithContext(arg1 aws.Context, arg2 *ec2.ImportInstanceInput, arg3 ...request.Option) (*ec2.ImportInstanceOutput, error) {
	fake.importInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.importInstanceWithContextReturnsOnCall[len(fake.importInstanceWithContextArgsForCall)]
	fake.importInstanceWithContextArgsForCall = append(fake.importInstanceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ImportInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.importInstanceWithContextMutex.Unlock()
	if fake.ImportInstanceWithContextStub != nil {
		return fake.ImportInstanceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importInstanceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportInstanceWithContextCallCount() int {
	fake.importInstanceWithContextMutex.RLock()
	defer fake.importInstanceWithContextMutex.RUnlock()
	return len(fake.importInstanceWithContextArgsForCall)
}

func (fake *FakeEC2API) ImportInstanceWithContextCalls(stub func(aws.Context, *ec2.ImportInstanceInput, ...request.Option) (*ec2.ImportInstanceOutput, error)) {
	fake.importInstanceWithContextMutex.Lock()
	defer fake.importInstanceWithContextMutex.Unlock()
	fake.ImportInstanceWithContextStub = stub
}

func (fake *FakeEC2API) ImportInstanceWithContextArgsForCall(i int) (aws.Context, *ec2.ImportInstanceInput, []request.Option) {
	fake.importInstanceWithContextMutex.RLock()
	defer fake.importInstanceWithContextMutex.RUnlock()
	argsForCall := fake.importInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ImportInstanceWithContextReturns(result1 *ec2.ImportInstanceOutput, result2 error) {
	fake.importInstanceWithContextMutex.Lock()
	defer fake.importInstanceWithContextMutex.Unlock()
	fake.ImportInstanceWithContextStub = nil
	fake.importInstanceWithContextReturns = struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportInstanceWithContextReturnsOnCall(i int, result1 *ec2.ImportInstanceOutput, result2 error) {
	fake.importInstanceWithContextMutex.Lock()
	defer fake.importInstanceWithContextMutex.Unlock()
	fake.ImportInstanceWithContextStub = nil
	if fake.importInstanceWithContextReturnsOnCall == nil {
		fake.importInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportInstanceOutput
			result2 error
		})
	}
	fake.importInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ImportInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportKeyPair(arg1 *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	fake.importKeyPairMutex.Lock()
	ret, specificReturn := fake.importKeyPairReturnsOnCall[len(fake.importKeyPairArgsForCall)]
	fake.importKeyPairArgsForCall = append(fake.importKeyPairArgsForCall, struct {
		arg1 *ec2.ImportKeyPairInput
	}{arg1})
	fake.recordInvocation("ImportKeyPair", []interface{}{arg1})
	fake.importKeyPairMutex.Unlock()
	if fake.ImportKeyPairStub != nil {
		return fake.ImportKeyPairStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importKeyPairReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportKeyPairCallCount() int {
	fake.importKeyPairMutex.RLock()
	defer fake.importKeyPairMutex.RUnlock()
	return len(fake.importKeyPairArgsForCall)
}

func (fake *FakeEC2API) ImportKeyPairCalls(stub func(*ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error)) {
	fake.importKeyPairMutex.Lock()
	defer fake.importKeyPairMutex.Unlock()
	fake.ImportKeyPairStub = stub
}

func (fake *FakeEC2API) ImportKeyPairArgsForCall(i int) *ec2.ImportKeyPairInput {
	fake.importKeyPairMutex.RLock()
	defer fake.importKeyPairMutex.RUnlock()
	argsForCall := fake.importKeyPairArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportKeyPairReturns(result1 *ec2.ImportKeyPairOutput, result2 error) {
	fake.importKeyPairMutex.Lock()
	defer fake.importKeyPairMutex.Unlock()
	fake.ImportKeyPairStub = nil
	fake.importKeyPairReturns = struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportKeyPairReturnsOnCall(i int, result1 *ec2.ImportKeyPairOutput, result2 error) {
	fake.importKeyPairMutex.Lock()
	defer fake.importKeyPairMutex.Unlock()
	fake.ImportKeyPairStub = nil
	if fake.importKeyPairReturnsOnCall == nil {
		fake.importKeyPairReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportKeyPairOutput
			result2 error
		})
	}
	fake.importKeyPairReturnsOnCall[i] = struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportKeyPairRequest(arg1 *ec2.ImportKeyPairInput) (*request.Request, *ec2.ImportKeyPairOutput) {
	fake.importKeyPairRequestMutex.Lock()
	ret, specificReturn := fake.importKeyPairRequestReturnsOnCall[len(fake.importKeyPairRequestArgsForCall)]
	fake.importKeyPairRequestArgsForCall = append(fake.importKeyPairRequestArgsForCall, struct {
		arg1 *ec2.ImportKeyPairInput
	}{arg1})
	fake.recordInvocation("ImportKeyPairRequest", []interface{}{arg1})
	fake.importKeyPairRequestMutex.Unlock()
	if fake.ImportKeyPairRequestStub != nil {
		return fake.ImportKeyPairRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importKeyPairRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportKeyPairRequestCallCount() int {
	fake.importKeyPairRequestMutex.RLock()
	defer fake.importKeyPairRequestMutex.RUnlock()
	return len(fake.importKeyPairRequestArgsForCall)
}

func (fake *FakeEC2API) ImportKeyPairRequestCalls(stub func(*ec2.ImportKeyPairInput) (*request.Request, *ec2.ImportKeyPairOutput)) {
	fake.importKeyPairRequestMutex.Lock()
	defer fake.importKeyPairRequestMutex.Unlock()
	fake.ImportKeyPairRequestStub = stub
}

func (fake *FakeEC2API) ImportKeyPairRequestArgsForCall(i int) *ec2.ImportKeyPairInput {
	fake.importKeyPairRequestMutex.RLock()
	defer fake.importKeyPairRequestMutex.RUnlock()
	argsForCall := fake.importKeyPairRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportKeyPairRequestReturns(result1 *request.Request, result2 *ec2.ImportKeyPairOutput) {
	fake.importKeyPairRequestMutex.Lock()
	defer fake.importKeyPairRequestMutex.Unlock()
	fake.ImportKeyPairRequestStub = nil
	fake.importKeyPairRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ImportKeyPairOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportKeyPairRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ImportKeyPairOutput) {
	fake.importKeyPairRequestMutex.Lock()
	defer fake.importKeyPairRequestMutex.Unlock()
	fake.ImportKeyPairRequestStub = nil
	if fake.importKeyPairRequestReturnsOnCall == nil {
		fake.importKeyPairRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ImportKeyPairOutput
		})
	}
	fake.importKeyPairRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ImportKeyPairOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportKeyPairWithContext(arg1 aws.Context, arg2 *ec2.ImportKeyPairInput, arg3 ...request.Option) (*ec2.ImportKeyPairOutput, error) {
	fake.importKeyPairWithContextMutex.Lock()
	ret, specificReturn := fake.importKeyPairWithContextReturnsOnCall[len(fake.importKeyPairWithContextArgsForCall)]
	fake.importKeyPairWithContextArgsForCall = append(fake.importKeyPairWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ImportKeyPairInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportKeyPairWithContext", []interface{}{arg1, arg2, arg3})
	fake.importKeyPairWithContextMutex.Unlock()
	if fake.ImportKeyPairWithContextStub != nil {
		return fake.ImportKeyPairWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importKeyPairWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportKeyPairWithContextCallCount() int {
	fake.importKeyPairWithContextMutex.RLock()
	defer fake.importKeyPairWithContextMutex.RUnlock()
	return len(fake.importKeyPairWithContextArgsForCall)
}

func (fake *FakeEC2API) ImportKeyPairWithContextCalls(stub func(aws.Context, *ec2.ImportKeyPairInput, ...request.Option) (*ec2.ImportKeyPairOutput, error)) {
	fake.importKeyPairWithContextMutex.Lock()
	defer fake.importKeyPairWithContextMutex.Unlock()
	fake.ImportKeyPairWithContextStub = stub
}

func (fake *FakeEC2API) ImportKeyPairWithContextArgsForCall(i int) (aws.Context, *ec2.ImportKeyPairInput, []request.Option) {
	fake.importKeyPairWithContextMutex.RLock()
	defer fake.importKeyPairWithContextMutex.RUnlock()
	argsForCall := fake.importKeyPairWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ImportKeyPairWithContextReturns(result1 *ec2.ImportKeyPairOutput, result2 error) {
	fake.importKeyPairWithContextMutex.Lock()
	defer fake.importKeyPairWithContextMutex.Unlock()
	fake.ImportKeyPairWithContextStub = nil
	fake.importKeyPairWithContextReturns = struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportKeyPairWithContextReturnsOnCall(i int, result1 *ec2.ImportKeyPairOutput, result2 error) {
	fake.importKeyPairWithContextMutex.Lock()
	defer fake.importKeyPairWithContextMutex.Unlock()
	fake.ImportKeyPairWithContextStub = nil
	if fake.importKeyPairWithContextReturnsOnCall == nil {
		fake.importKeyPairWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportKeyPairOutput
			result2 error
		})
	}
	fake.importKeyPairWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ImportKeyPairOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportSnapshot(arg1 *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	fake.importSnapshotMutex.Lock()
	ret, specificReturn := fake.importSnapshotReturnsOnCall[len(fake.importSnapshotArgsForCall)]
	fake.importSnapshotArgsForCall = append(fake.importSnapshotArgsForCall, struct {
		arg1 *ec2.ImportSnapshotInput
	}{arg1})
	fake.recordInvocation("ImportSnapshot", []interface{}{arg1})
	fake.importSnapshotMutex.Unlock()
	if fake.ImportSnapshotStub != nil {
		return fake.ImportSnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importSnapshotReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportSnapshotCallCount() int {
	fake.importSnapshotMutex.RLock()
	defer fake.importSnapshotMutex.RUnlock()
	return len(fake.importSnapshotArgsForCall)
}

func (fake *FakeEC2API) ImportSnapshotCalls(stub func(*ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error)) {
	fake.importSnapshotMutex.Lock()
	defer fake.importSnapshotMutex.Unlock()
	fake.ImportSnapshotStub = stub
}

func (fake *FakeEC2API) ImportSnapshotArgsForCall(i int) *ec2.ImportSnapshotInput {
	fake.importSnapshotMutex.RLock()
	defer fake.importSnapshotMutex.RUnlock()
	argsForCall := fake.importSnapshotArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportSnapshotReturns(result1 *ec2.ImportSnapshotOutput, result2 error) {
	fake.importSnapshotMutex.Lock()
	defer fake.importSnapshotMutex.Unlock()
	fake.ImportSnapshotStub = nil
	fake.importSnapshotReturns = struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportSnapshotReturnsOnCall(i int, result1 *ec2.ImportSnapshotOutput, result2 error) {
	fake.importSnapshotMutex.Lock()
	defer fake.importSnapshotMutex.Unlock()
	fake.ImportSnapshotStub = nil
	if fake.importSnapshotReturnsOnCall == nil {
		fake.importSnapshotReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportSnapshotOutput
			result2 error
		})
	}
	fake.importSnapshotReturnsOnCall[i] = struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportSnapshotRequest(arg1 *ec2.ImportSnapshotInput) (*request.Request, *ec2.ImportSnapshotOutput) {
	fake.importSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.importSnapshotRequestReturnsOnCall[len(fake.importSnapshotRequestArgsForCall)]
	fake.importSnapshotRequestArgsForCall = append(fake.importSnapshotRequestArgsForCall, struct {
		arg1 *ec2.ImportSnapshotInput
	}{arg1})
	fake.recordInvocation("ImportSnapshotRequest", []interface{}{arg1})
	fake.importSnapshotRequestMutex.Unlock()
	if fake.ImportSnapshotRequestStub != nil {
		return fake.ImportSnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importSnapshotRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportSnapshotRequestCallCount() int {
	fake.importSnapshotRequestMutex.RLock()
	defer fake.importSnapshotRequestMutex.RUnlock()
	return len(fake.importSnapshotRequestArgsForCall)
}

func (fake *FakeEC2API) ImportSnapshotRequestCalls(stub func(*ec2.ImportSnapshotInput) (*request.Request, *ec2.ImportSnapshotOutput)) {
	fake.importSnapshotRequestMutex.Lock()
	defer fake.importSnapshotRequestMutex.Unlock()
	fake.ImportSnapshotRequestStub = stub
}

func (fake *FakeEC2API) ImportSnapshotRequestArgsForCall(i int) *ec2.ImportSnapshotInput {
	fake.importSnapshotRequestMutex.RLock()
	defer fake.importSnapshotRequestMutex.RUnlock()
	argsForCall := fake.importSnapshotRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportSnapshotRequestReturns(result1 *request.Request, result2 *ec2.ImportSnapshotOutput) {
	fake.importSnapshotRequestMutex.Lock()
	defer fake.importSnapshotRequestMutex.Unlock()
	fake.ImportSnapshotRequestStub = nil
	fake.importSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ImportSnapshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ImportSnapshotOutput) {
	fake.importSnapshotRequestMutex.Lock()
	defer fake.importSnapshotRequestMutex.Unlock()
	fake.ImportSnapshotRequestStub = nil
	if fake.importSnapshotRequestReturnsOnCall == nil {
		fake.importSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ImportSnapshotOutput
		})
	}
	fake.importSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ImportSnapshotOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportSnapshotWithContext(arg1 aws.Context, arg2 *ec2.ImportSnapshotInput, arg3 ...request.Option) (*ec2.ImportSnapshotOutput, error) {
	fake.importSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.importSnapshotWithContextReturnsOnCall[len(fake.importSnapshotWithContextArgsForCall)]
	fake.importSnapshotWithContextArgsForCall = append(fake.importSnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ImportSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.importSnapshotWithContextMutex.Unlock()
	if fake.ImportSnapshotWithContextStub != nil {
		return fake.ImportSnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importSnapshotWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportSnapshotWithContextCallCount() int {
	fake.importSnapshotWithContextMutex.RLock()
	defer fake.importSnapshotWithContextMutex.RUnlock()
	return len(fake.importSnapshotWithContextArgsForCall)
}

func (fake *FakeEC2API) ImportSnapshotWithContextCalls(stub func(aws.Context, *ec2.ImportSnapshotInput, ...request.Option) (*ec2.ImportSnapshotOutput, error)) {
	fake.importSnapshotWithContextMutex.Lock()
	defer fake.importSnapshotWithContextMutex.Unlock()
	fake.ImportSnapshotWithContextStub = stub
}

func (fake *FakeEC2API) ImportSnapshotWithContextArgsForCall(i int) (aws.Context, *ec2.ImportSnapshotInput, []request.Option) {
	fake.importSnapshotWithContextMutex.RLock()
	defer fake.importSnapshotWithContextMutex.RUnlock()
	argsForCall := fake.importSnapshotWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ImportSnapshotWithContextReturns(result1 *ec2.ImportSnapshotOutput, result2 error) {
	fake.importSnapshotWithContextMutex.Lock()
	defer fake.importSnapshotWithContextMutex.Unlock()
	fake.ImportSnapshotWithContextStub = nil
	fake.importSnapshotWithContextReturns = struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportSnapshotWithContextReturnsOnCall(i int, result1 *ec2.ImportSnapshotOutput, result2 error) {
	fake.importSnapshotWithContextMutex.Lock()
	defer fake.importSnapshotWithContextMutex.Unlock()
	fake.ImportSnapshotWithContextStub = nil
	if fake.importSnapshotWithContextReturnsOnCall == nil {
		fake.importSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportSnapshotOutput
			result2 error
		})
	}
	fake.importSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ImportSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportVolume(arg1 *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	fake.importVolumeMutex.Lock()
	ret, specificReturn := fake.importVolumeReturnsOnCall[len(fake.importVolumeArgsForCall)]
	fake.importVolumeArgsForCall = append(fake.importVolumeArgsForCall, struct {
		arg1 *ec2.ImportVolumeInput
	}{arg1})
	fake.recordInvocation("ImportVolume", []interface{}{arg1})
	fake.importVolumeMutex.Unlock()
	if fake.ImportVolumeStub != nil {
		return fake.ImportVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportVolumeCallCount() int {
	fake.importVolumeMutex.RLock()
	defer fake.importVolumeMutex.RUnlock()
	return len(fake.importVolumeArgsForCall)
}

func (fake *FakeEC2API) ImportVolumeCalls(stub func(*ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error)) {
	fake.importVolumeMutex.Lock()
	defer fake.importVolumeMutex.Unlock()
	fake.ImportVolumeStub = stub
}

func (fake *FakeEC2API) ImportVolumeArgsForCall(i int) *ec2.ImportVolumeInput {
	fake.importVolumeMutex.RLock()
	defer fake.importVolumeMutex.RUnlock()
	argsForCall := fake.importVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportVolumeReturns(result1 *ec2.ImportVolumeOutput, result2 error) {
	fake.importVolumeMutex.Lock()
	defer fake.importVolumeMutex.Unlock()
	fake.ImportVolumeStub = nil
	fake.importVolumeReturns = struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportVolumeReturnsOnCall(i int, result1 *ec2.ImportVolumeOutput, result2 error) {
	fake.importVolumeMutex.Lock()
	defer fake.importVolumeMutex.Unlock()
	fake.ImportVolumeStub = nil
	if fake.importVolumeReturnsOnCall == nil {
		fake.importVolumeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportVolumeOutput
			result2 error
		})
	}
	fake.importVolumeReturnsOnCall[i] = struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportVolumeRequest(arg1 *ec2.ImportVolumeInput) (*request.Request, *ec2.ImportVolumeOutput) {
	fake.importVolumeRequestMutex.Lock()
	ret, specificReturn := fake.importVolumeRequestReturnsOnCall[len(fake.importVolumeRequestArgsForCall)]
	fake.importVolumeRequestArgsForCall = append(fake.importVolumeRequestArgsForCall, struct {
		arg1 *ec2.ImportVolumeInput
	}{arg1})
	fake.recordInvocation("ImportVolumeRequest", []interface{}{arg1})
	fake.importVolumeRequestMutex.Unlock()
	if fake.ImportVolumeRequestStub != nil {
		return fake.ImportVolumeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importVolumeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportVolumeRequestCallCount() int {
	fake.importVolumeRequestMutex.RLock()
	defer fake.importVolumeRequestMutex.RUnlock()
	return len(fake.importVolumeRequestArgsForCall)
}

func (fake *FakeEC2API) ImportVolumeRequestCalls(stub func(*ec2.ImportVolumeInput) (*request.Request, *ec2.ImportVolumeOutput)) {
	fake.importVolumeRequestMutex.Lock()
	defer fake.importVolumeRequestMutex.Unlock()
	fake.ImportVolumeRequestStub = stub
}

func (fake *FakeEC2API) ImportVolumeRequestArgsForCall(i int) *ec2.ImportVolumeInput {
	fake.importVolumeRequestMutex.RLock()
	defer fake.importVolumeRequestMutex.RUnlock()
	argsForCall := fake.importVolumeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ImportVolumeRequestReturns(result1 *request.Request, result2 *ec2.ImportVolumeOutput) {
	fake.importVolumeRequestMutex.Lock()
	defer fake.importVolumeRequestMutex.Unlock()
	fake.ImportVolumeRequestStub = nil
	fake.importVolumeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ImportVolumeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportVolumeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ImportVolumeOutput) {
	fake.importVolumeRequestMutex.Lock()
	defer fake.importVolumeRequestMutex.Unlock()
	fake.ImportVolumeRequestStub = nil
	if fake.importVolumeRequestReturnsOnCall == nil {
		fake.importVolumeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ImportVolumeOutput
		})
	}
	fake.importVolumeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ImportVolumeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ImportVolumeWithContext(arg1 aws.Context, arg2 *ec2.ImportVolumeInput, arg3 ...request.Option) (*ec2.ImportVolumeOutput, error) {
	fake.importVolumeWithContextMutex.Lock()
	ret, specificReturn := fake.importVolumeWithContextReturnsOnCall[len(fake.importVolumeWithContextArgsForCall)]
	fake.importVolumeWithContextArgsForCall = append(fake.importVolumeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ImportVolumeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ImportVolumeWithContext", []interface{}{arg1, arg2, arg3})
	fake.importVolumeWithContextMutex.Unlock()
	if fake.ImportVolumeWithContextStub != nil {
		return fake.ImportVolumeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.importVolumeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ImportVolumeWithContextCallCount() int {
	fake.importVolumeWithContextMutex.RLock()
	defer fake.importVolumeWithContextMutex.RUnlock()
	return len(fake.importVolumeWithContextArgsForCall)
}

func (fake *FakeEC2API) ImportVolumeWithContextCalls(stub func(aws.Context, *ec2.ImportVolumeInput, ...request.Option) (*ec2.ImportVolumeOutput, error)) {
	fake.importVolumeWithContextMutex.Lock()
	defer fake.importVolumeWithContextMutex.Unlock()
	fake.ImportVolumeWithContextStub = stub
}

func (fake *FakeEC2API) ImportVolumeWithContextArgsForCall(i int) (aws.Context, *ec2.ImportVolumeInput, []request.Option) {
	fake.importVolumeWithContextMutex.RLock()
	defer fake.importVolumeWithContextMutex.RUnlock()
	argsForCall := fake.importVolumeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ImportVolumeWithContextReturns(result1 *ec2.ImportVolumeOutput, result2 error) {
	fake.importVolumeWithContextMutex.Lock()
	defer fake.importVolumeWithContextMutex.Unlock()
	fake.ImportVolumeWithContextStub = nil
	fake.importVolumeWithContextReturns = struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ImportVolumeWithContextReturnsOnCall(i int, result1 *ec2.ImportVolumeOutput, result2 error) {
	fake.importVolumeWithContextMutex.Lock()
	defer fake.importVolumeWithContextMutex.Unlock()
	fake.ImportVolumeWithContextStub = nil
	if fake.importVolumeWithContextReturnsOnCall == nil {
		fake.importVolumeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ImportVolumeOutput
			result2 error
		})
	}
	fake.importVolumeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ImportVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyCapacityReservation(arg1 *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error) {
	fake.modifyCapacityReservationMutex.Lock()
	ret, specificReturn := fake.modifyCapacityReservationReturnsOnCall[len(fake.modifyCapacityReservationArgsForCall)]
	fake.modifyCapacityReservationArgsForCall = append(fake.modifyCapacityReservationArgsForCall, struct {
		arg1 *ec2.ModifyCapacityReservationInput
	}{arg1})
	fake.recordInvocation("ModifyCapacityReservation", []interface{}{arg1})
	fake.modifyCapacityReservationMutex.Unlock()
	if fake.ModifyCapacityReservationStub != nil {
		return fake.ModifyCapacityReservationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyCapacityReservationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyCapacityReservationCallCount() int {
	fake.modifyCapacityReservationMutex.RLock()
	defer fake.modifyCapacityReservationMutex.RUnlock()
	return len(fake.modifyCapacityReservationArgsForCall)
}

func (fake *FakeEC2API) ModifyCapacityReservationCalls(stub func(*ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error)) {
	fake.modifyCapacityReservationMutex.Lock()
	defer fake.modifyCapacityReservationMutex.Unlock()
	fake.ModifyCapacityReservationStub = stub
}

func (fake *FakeEC2API) ModifyCapacityReservationArgsForCall(i int) *ec2.ModifyCapacityReservationInput {
	fake.modifyCapacityReservationMutex.RLock()
	defer fake.modifyCapacityReservationMutex.RUnlock()
	argsForCall := fake.modifyCapacityReservationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyCapacityReservationReturns(result1 *ec2.ModifyCapacityReservationOutput, result2 error) {
	fake.modifyCapacityReservationMutex.Lock()
	defer fake.modifyCapacityReservationMutex.Unlock()
	fake.ModifyCapacityReservationStub = nil
	fake.modifyCapacityReservationReturns = struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyCapacityReservationReturnsOnCall(i int, result1 *ec2.ModifyCapacityReservationOutput, result2 error) {
	fake.modifyCapacityReservationMutex.Lock()
	defer fake.modifyCapacityReservationMutex.Unlock()
	fake.ModifyCapacityReservationStub = nil
	if fake.modifyCapacityReservationReturnsOnCall == nil {
		fake.modifyCapacityReservationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyCapacityReservationOutput
			result2 error
		})
	}
	fake.modifyCapacityReservationReturnsOnCall[i] = struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyCapacityReservationRequest(arg1 *ec2.ModifyCapacityReservationInput) (*request.Request, *ec2.ModifyCapacityReservationOutput) {
	fake.modifyCapacityReservationRequestMutex.Lock()
	ret, specificReturn := fake.modifyCapacityReservationRequestReturnsOnCall[len(fake.modifyCapacityReservationRequestArgsForCall)]
	fake.modifyCapacityReservationRequestArgsForCall = append(fake.modifyCapacityReservationRequestArgsForCall, struct {
		arg1 *ec2.ModifyCapacityReservationInput
	}{arg1})
	fake.recordInvocation("ModifyCapacityReservationRequest", []interface{}{arg1})
	fake.modifyCapacityReservationRequestMutex.Unlock()
	if fake.ModifyCapacityReservationRequestStub != nil {
		return fake.ModifyCapacityReservationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyCapacityReservationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyCapacityReservationRequestCallCount() int {
	fake.modifyCapacityReservationRequestMutex.RLock()
	defer fake.modifyCapacityReservationRequestMutex.RUnlock()
	return len(fake.modifyCapacityReservationRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyCapacityReservationRequestCalls(stub func(*ec2.ModifyCapacityReservationInput) (*request.Request, *ec2.ModifyCapacityReservationOutput)) {
	fake.modifyCapacityReservationRequestMutex.Lock()
	defer fake.modifyCapacityReservationRequestMutex.Unlock()
	fake.ModifyCapacityReservationRequestStub = stub
}

func (fake *FakeEC2API) ModifyCapacityReservationRequestArgsForCall(i int) *ec2.ModifyCapacityReservationInput {
	fake.modifyCapacityReservationRequestMutex.RLock()
	defer fake.modifyCapacityReservationRequestMutex.RUnlock()
	argsForCall := fake.modifyCapacityReservationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyCapacityReservationRequestReturns(result1 *request.Request, result2 *ec2.ModifyCapacityReservationOutput) {
	fake.modifyCapacityReservationRequestMutex.Lock()
	defer fake.modifyCapacityReservationRequestMutex.Unlock()
	fake.ModifyCapacityReservationRequestStub = nil
	fake.modifyCapacityReservationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyCapacityReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyCapacityReservationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyCapacityReservationOutput) {
	fake.modifyCapacityReservationRequestMutex.Lock()
	defer fake.modifyCapacityReservationRequestMutex.Unlock()
	fake.ModifyCapacityReservationRequestStub = nil
	if fake.modifyCapacityReservationRequestReturnsOnCall == nil {
		fake.modifyCapacityReservationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyCapacityReservationOutput
		})
	}
	fake.modifyCapacityReservationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyCapacityReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyCapacityReservationWithContext(arg1 aws.Context, arg2 *ec2.ModifyCapacityReservationInput, arg3 ...request.Option) (*ec2.ModifyCapacityReservationOutput, error) {
	fake.modifyCapacityReservationWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCapacityReservationWithContextReturnsOnCall[len(fake.modifyCapacityReservationWithContextArgsForCall)]
	fake.modifyCapacityReservationWithContextArgsForCall = append(fake.modifyCapacityReservationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyCapacityReservationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyCapacityReservationWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCapacityReservationWithContextMutex.Unlock()
	if fake.ModifyCapacityReservationWithContextStub != nil {
		return fake.ModifyCapacityReservationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyCapacityReservationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyCapacityReservationWithContextCallCount() int {
	fake.modifyCapacityReservationWithContextMutex.RLock()
	defer fake.modifyCapacityReservationWithContextMutex.RUnlock()
	return len(fake.modifyCapacityReservationWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyCapacityReservationWithContextCalls(stub func(aws.Context, *ec2.ModifyCapacityReservationInput, ...request.Option) (*ec2.ModifyCapacityReservationOutput, error)) {
	fake.modifyCapacityReservationWithContextMutex.Lock()
	defer fake.modifyCapacityReservationWithContextMutex.Unlock()
	fake.ModifyCapacityReservationWithContextStub = stub
}

func (fake *FakeEC2API) ModifyCapacityReservationWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyCapacityReservationInput, []request.Option) {
	fake.modifyCapacityReservationWithContextMutex.RLock()
	defer fake.modifyCapacityReservationWithContextMutex.RUnlock()
	argsForCall := fake.modifyCapacityReservationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyCapacityReservationWithContextReturns(result1 *ec2.ModifyCapacityReservationOutput, result2 error) {
	fake.modifyCapacityReservationWithContextMutex.Lock()
	defer fake.modifyCapacityReservationWithContextMutex.Unlock()
	fake.ModifyCapacityReservationWithContextStub = nil
	fake.modifyCapacityReservationWithContextReturns = struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyCapacityReservationWithContextReturnsOnCall(i int, result1 *ec2.ModifyCapacityReservationOutput, result2 error) {
	fake.modifyCapacityReservationWithContextMutex.Lock()
	defer fake.modifyCapacityReservationWithContextMutex.Unlock()
	fake.ModifyCapacityReservationWithContextStub = nil
	if fake.modifyCapacityReservationWithContextReturnsOnCall == nil {
		fake.modifyCapacityReservationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyCapacityReservationOutput
			result2 error
		})
	}
	fake.modifyCapacityReservationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyCapacityReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyClientVpnEndpoint(arg1 *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error) {
	fake.modifyClientVpnEndpointMutex.Lock()
	ret, specificReturn := fake.modifyClientVpnEndpointReturnsOnCall[len(fake.modifyClientVpnEndpointArgsForCall)]
	fake.modifyClientVpnEndpointArgsForCall = append(fake.modifyClientVpnEndpointArgsForCall, struct {
		arg1 *ec2.ModifyClientVpnEndpointInput
	}{arg1})
	fake.recordInvocation("ModifyClientVpnEndpoint", []interface{}{arg1})
	fake.modifyClientVpnEndpointMutex.Unlock()
	if fake.ModifyClientVpnEndpointStub != nil {
		return fake.ModifyClientVpnEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyClientVpnEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyClientVpnEndpointCallCount() int {
	fake.modifyClientVpnEndpointMutex.RLock()
	defer fake.modifyClientVpnEndpointMutex.RUnlock()
	return len(fake.modifyClientVpnEndpointArgsForCall)
}

func (fake *FakeEC2API) ModifyClientVpnEndpointCalls(stub func(*ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error)) {
	fake.modifyClientVpnEndpointMutex.Lock()
	defer fake.modifyClientVpnEndpointMutex.Unlock()
	fake.ModifyClientVpnEndpointStub = stub
}

func (fake *FakeEC2API) ModifyClientVpnEndpointArgsForCall(i int) *ec2.ModifyClientVpnEndpointInput {
	fake.modifyClientVpnEndpointMutex.RLock()
	defer fake.modifyClientVpnEndpointMutex.RUnlock()
	argsForCall := fake.modifyClientVpnEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyClientVpnEndpointReturns(result1 *ec2.ModifyClientVpnEndpointOutput, result2 error) {
	fake.modifyClientVpnEndpointMutex.Lock()
	defer fake.modifyClientVpnEndpointMutex.Unlock()
	fake.ModifyClientVpnEndpointStub = nil
	fake.modifyClientVpnEndpointReturns = struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyClientVpnEndpointReturnsOnCall(i int, result1 *ec2.ModifyClientVpnEndpointOutput, result2 error) {
	fake.modifyClientVpnEndpointMutex.Lock()
	defer fake.modifyClientVpnEndpointMutex.Unlock()
	fake.ModifyClientVpnEndpointStub = nil
	if fake.modifyClientVpnEndpointReturnsOnCall == nil {
		fake.modifyClientVpnEndpointReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyClientVpnEndpointOutput
			result2 error
		})
	}
	fake.modifyClientVpnEndpointReturnsOnCall[i] = struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyClientVpnEndpointRequest(arg1 *ec2.ModifyClientVpnEndpointInput) (*request.Request, *ec2.ModifyClientVpnEndpointOutput) {
	fake.modifyClientVpnEndpointRequestMutex.Lock()
	ret, specificReturn := fake.modifyClientVpnEndpointRequestReturnsOnCall[len(fake.modifyClientVpnEndpointRequestArgsForCall)]
	fake.modifyClientVpnEndpointRequestArgsForCall = append(fake.modifyClientVpnEndpointRequestArgsForCall, struct {
		arg1 *ec2.ModifyClientVpnEndpointInput
	}{arg1})
	fake.recordInvocation("ModifyClientVpnEndpointRequest", []interface{}{arg1})
	fake.modifyClientVpnEndpointRequestMutex.Unlock()
	if fake.ModifyClientVpnEndpointRequestStub != nil {
		return fake.ModifyClientVpnEndpointRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyClientVpnEndpointRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyClientVpnEndpointRequestCallCount() int {
	fake.modifyClientVpnEndpointRequestMutex.RLock()
	defer fake.modifyClientVpnEndpointRequestMutex.RUnlock()
	return len(fake.modifyClientVpnEndpointRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyClientVpnEndpointRequestCalls(stub func(*ec2.ModifyClientVpnEndpointInput) (*request.Request, *ec2.ModifyClientVpnEndpointOutput)) {
	fake.modifyClientVpnEndpointRequestMutex.Lock()
	defer fake.modifyClientVpnEndpointRequestMutex.Unlock()
	fake.ModifyClientVpnEndpointRequestStub = stub
}

func (fake *FakeEC2API) ModifyClientVpnEndpointRequestArgsForCall(i int) *ec2.ModifyClientVpnEndpointInput {
	fake.modifyClientVpnEndpointRequestMutex.RLock()
	defer fake.modifyClientVpnEndpointRequestMutex.RUnlock()
	argsForCall := fake.modifyClientVpnEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyClientVpnEndpointRequestReturns(result1 *request.Request, result2 *ec2.ModifyClientVpnEndpointOutput) {
	fake.modifyClientVpnEndpointRequestMutex.Lock()
	defer fake.modifyClientVpnEndpointRequestMutex.Unlock()
	fake.ModifyClientVpnEndpointRequestStub = nil
	fake.modifyClientVpnEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyClientVpnEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyClientVpnEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyClientVpnEndpointOutput) {
	fake.modifyClientVpnEndpointRequestMutex.Lock()
	defer fake.modifyClientVpnEndpointRequestMutex.Unlock()
	fake.ModifyClientVpnEndpointRequestStub = nil
	if fake.modifyClientVpnEndpointRequestReturnsOnCall == nil {
		fake.modifyClientVpnEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyClientVpnEndpointOutput
		})
	}
	fake.modifyClientVpnEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyClientVpnEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyClientVpnEndpointWithContext(arg1 aws.Context, arg2 *ec2.ModifyClientVpnEndpointInput, arg3 ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error) {
	fake.modifyClientVpnEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.modifyClientVpnEndpointWithContextReturnsOnCall[len(fake.modifyClientVpnEndpointWithContextArgsForCall)]
	fake.modifyClientVpnEndpointWithContextArgsForCall = append(fake.modifyClientVpnEndpointWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyClientVpnEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyClientVpnEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyClientVpnEndpointWithContextMutex.Unlock()
	if fake.ModifyClientVpnEndpointWithContextStub != nil {
		return fake.ModifyClientVpnEndpointWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyClientVpnEndpointWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyClientVpnEndpointWithContextCallCount() int {
	fake.modifyClientVpnEndpointWithContextMutex.RLock()
	defer fake.modifyClientVpnEndpointWithContextMutex.RUnlock()
	return len(fake.modifyClientVpnEndpointWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyClientVpnEndpointWithContextCalls(stub func(aws.Context, *ec2.ModifyClientVpnEndpointInput, ...request.Option) (*ec2.ModifyClientVpnEndpointOutput, error)) {
	fake.modifyClientVpnEndpointWithContextMutex.Lock()
	defer fake.modifyClientVpnEndpointWithContextMutex.Unlock()
	fake.ModifyClientVpnEndpointWithContextStub = stub
}

func (fake *FakeEC2API) ModifyClientVpnEndpointWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyClientVpnEndpointInput, []request.Option) {
	fake.modifyClientVpnEndpointWithContextMutex.RLock()
	defer fake.modifyClientVpnEndpointWithContextMutex.RUnlock()
	argsForCall := fake.modifyClientVpnEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyClientVpnEndpointWithContextReturns(result1 *ec2.ModifyClientVpnEndpointOutput, result2 error) {
	fake.modifyClientVpnEndpointWithContextMutex.Lock()
	defer fake.modifyClientVpnEndpointWithContextMutex.Unlock()
	fake.ModifyClientVpnEndpointWithContextStub = nil
	fake.modifyClientVpnEndpointWithContextReturns = struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyClientVpnEndpointWithContextReturnsOnCall(i int, result1 *ec2.ModifyClientVpnEndpointOutput, result2 error) {
	fake.modifyClientVpnEndpointWithContextMutex.Lock()
	defer fake.modifyClientVpnEndpointWithContextMutex.Unlock()
	fake.ModifyClientVpnEndpointWithContextStub = nil
	if fake.modifyClientVpnEndpointWithContextReturnsOnCall == nil {
		fake.modifyClientVpnEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyClientVpnEndpointOutput
			result2 error
		})
	}
	fake.modifyClientVpnEndpointWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyClientVpnEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFleet(arg1 *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error) {
	fake.modifyFleetMutex.Lock()
	ret, specificReturn := fake.modifyFleetReturnsOnCall[len(fake.modifyFleetArgsForCall)]
	fake.modifyFleetArgsForCall = append(fake.modifyFleetArgsForCall, struct {
		arg1 *ec2.ModifyFleetInput
	}{arg1})
	fake.recordInvocation("ModifyFleet", []interface{}{arg1})
	fake.modifyFleetMutex.Unlock()
	if fake.ModifyFleetStub != nil {
		return fake.ModifyFleetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyFleetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyFleetCallCount() int {
	fake.modifyFleetMutex.RLock()
	defer fake.modifyFleetMutex.RUnlock()
	return len(fake.modifyFleetArgsForCall)
}

func (fake *FakeEC2API) ModifyFleetCalls(stub func(*ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error)) {
	fake.modifyFleetMutex.Lock()
	defer fake.modifyFleetMutex.Unlock()
	fake.ModifyFleetStub = stub
}

func (fake *FakeEC2API) ModifyFleetArgsForCall(i int) *ec2.ModifyFleetInput {
	fake.modifyFleetMutex.RLock()
	defer fake.modifyFleetMutex.RUnlock()
	argsForCall := fake.modifyFleetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyFleetReturns(result1 *ec2.ModifyFleetOutput, result2 error) {
	fake.modifyFleetMutex.Lock()
	defer fake.modifyFleetMutex.Unlock()
	fake.ModifyFleetStub = nil
	fake.modifyFleetReturns = struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFleetReturnsOnCall(i int, result1 *ec2.ModifyFleetOutput, result2 error) {
	fake.modifyFleetMutex.Lock()
	defer fake.modifyFleetMutex.Unlock()
	fake.ModifyFleetStub = nil
	if fake.modifyFleetReturnsOnCall == nil {
		fake.modifyFleetReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyFleetOutput
			result2 error
		})
	}
	fake.modifyFleetReturnsOnCall[i] = struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFleetRequest(arg1 *ec2.ModifyFleetInput) (*request.Request, *ec2.ModifyFleetOutput) {
	fake.modifyFleetRequestMutex.Lock()
	ret, specificReturn := fake.modifyFleetRequestReturnsOnCall[len(fake.modifyFleetRequestArgsForCall)]
	fake.modifyFleetRequestArgsForCall = append(fake.modifyFleetRequestArgsForCall, struct {
		arg1 *ec2.ModifyFleetInput
	}{arg1})
	fake.recordInvocation("ModifyFleetRequest", []interface{}{arg1})
	fake.modifyFleetRequestMutex.Unlock()
	if fake.ModifyFleetRequestStub != nil {
		return fake.ModifyFleetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyFleetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyFleetRequestCallCount() int {
	fake.modifyFleetRequestMutex.RLock()
	defer fake.modifyFleetRequestMutex.RUnlock()
	return len(fake.modifyFleetRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyFleetRequestCalls(stub func(*ec2.ModifyFleetInput) (*request.Request, *ec2.ModifyFleetOutput)) {
	fake.modifyFleetRequestMutex.Lock()
	defer fake.modifyFleetRequestMutex.Unlock()
	fake.ModifyFleetRequestStub = stub
}

func (fake *FakeEC2API) ModifyFleetRequestArgsForCall(i int) *ec2.ModifyFleetInput {
	fake.modifyFleetRequestMutex.RLock()
	defer fake.modifyFleetRequestMutex.RUnlock()
	argsForCall := fake.modifyFleetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyFleetRequestReturns(result1 *request.Request, result2 *ec2.ModifyFleetOutput) {
	fake.modifyFleetRequestMutex.Lock()
	defer fake.modifyFleetRequestMutex.Unlock()
	fake.ModifyFleetRequestStub = nil
	fake.modifyFleetRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyFleetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFleetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyFleetOutput) {
	fake.modifyFleetRequestMutex.Lock()
	defer fake.modifyFleetRequestMutex.Unlock()
	fake.ModifyFleetRequestStub = nil
	if fake.modifyFleetRequestReturnsOnCall == nil {
		fake.modifyFleetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyFleetOutput
		})
	}
	fake.modifyFleetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyFleetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFleetWithContext(arg1 aws.Context, arg2 *ec2.ModifyFleetInput, arg3 ...request.Option) (*ec2.ModifyFleetOutput, error) {
	fake.modifyFleetWithContextMutex.Lock()
	ret, specificReturn := fake.modifyFleetWithContextReturnsOnCall[len(fake.modifyFleetWithContextArgsForCall)]
	fake.modifyFleetWithContextArgsForCall = append(fake.modifyFleetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyFleetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyFleetWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyFleetWithContextMutex.Unlock()
	if fake.ModifyFleetWithContextStub != nil {
		return fake.ModifyFleetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyFleetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyFleetWithContextCallCount() int {
	fake.modifyFleetWithContextMutex.RLock()
	defer fake.modifyFleetWithContextMutex.RUnlock()
	return len(fake.modifyFleetWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyFleetWithContextCalls(stub func(aws.Context, *ec2.ModifyFleetInput, ...request.Option) (*ec2.ModifyFleetOutput, error)) {
	fake.modifyFleetWithContextMutex.Lock()
	defer fake.modifyFleetWithContextMutex.Unlock()
	fake.ModifyFleetWithContextStub = stub
}

func (fake *FakeEC2API) ModifyFleetWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyFleetInput, []request.Option) {
	fake.modifyFleetWithContextMutex.RLock()
	defer fake.modifyFleetWithContextMutex.RUnlock()
	argsForCall := fake.modifyFleetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyFleetWithContextReturns(result1 *ec2.ModifyFleetOutput, result2 error) {
	fake.modifyFleetWithContextMutex.Lock()
	defer fake.modifyFleetWithContextMutex.Unlock()
	fake.ModifyFleetWithContextStub = nil
	fake.modifyFleetWithContextReturns = struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFleetWithContextReturnsOnCall(i int, result1 *ec2.ModifyFleetOutput, result2 error) {
	fake.modifyFleetWithContextMutex.Lock()
	defer fake.modifyFleetWithContextMutex.Unlock()
	fake.ModifyFleetWithContextStub = nil
	if fake.modifyFleetWithContextReturnsOnCall == nil {
		fake.modifyFleetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyFleetOutput
			result2 error
		})
	}
	fake.modifyFleetWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFpgaImageAttribute(arg1 *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	fake.modifyFpgaImageAttributeMutex.Lock()
	ret, specificReturn := fake.modifyFpgaImageAttributeReturnsOnCall[len(fake.modifyFpgaImageAttributeArgsForCall)]
	fake.modifyFpgaImageAttributeArgsForCall = append(fake.modifyFpgaImageAttributeArgsForCall, struct {
		arg1 *ec2.ModifyFpgaImageAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyFpgaImageAttribute", []interface{}{arg1})
	fake.modifyFpgaImageAttributeMutex.Unlock()
	if fake.ModifyFpgaImageAttributeStub != nil {
		return fake.ModifyFpgaImageAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyFpgaImageAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeCallCount() int {
	fake.modifyFpgaImageAttributeMutex.RLock()
	defer fake.modifyFpgaImageAttributeMutex.RUnlock()
	return len(fake.modifyFpgaImageAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeCalls(stub func(*ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error)) {
	fake.modifyFpgaImageAttributeMutex.Lock()
	defer fake.modifyFpgaImageAttributeMutex.Unlock()
	fake.ModifyFpgaImageAttributeStub = stub
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeArgsForCall(i int) *ec2.ModifyFpgaImageAttributeInput {
	fake.modifyFpgaImageAttributeMutex.RLock()
	defer fake.modifyFpgaImageAttributeMutex.RUnlock()
	argsForCall := fake.modifyFpgaImageAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeReturns(result1 *ec2.ModifyFpgaImageAttributeOutput, result2 error) {
	fake.modifyFpgaImageAttributeMutex.Lock()
	defer fake.modifyFpgaImageAttributeMutex.Unlock()
	fake.ModifyFpgaImageAttributeStub = nil
	fake.modifyFpgaImageAttributeReturns = struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeReturnsOnCall(i int, result1 *ec2.ModifyFpgaImageAttributeOutput, result2 error) {
	fake.modifyFpgaImageAttributeMutex.Lock()
	defer fake.modifyFpgaImageAttributeMutex.Unlock()
	fake.ModifyFpgaImageAttributeStub = nil
	if fake.modifyFpgaImageAttributeReturnsOnCall == nil {
		fake.modifyFpgaImageAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyFpgaImageAttributeOutput
			result2 error
		})
	}
	fake.modifyFpgaImageAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeRequest(arg1 *ec2.ModifyFpgaImageAttributeInput) (*request.Request, *ec2.ModifyFpgaImageAttributeOutput) {
	fake.modifyFpgaImageAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyFpgaImageAttributeRequestReturnsOnCall[len(fake.modifyFpgaImageAttributeRequestArgsForCall)]
	fake.modifyFpgaImageAttributeRequestArgsForCall = append(fake.modifyFpgaImageAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifyFpgaImageAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyFpgaImageAttributeRequest", []interface{}{arg1})
	fake.modifyFpgaImageAttributeRequestMutex.Unlock()
	if fake.ModifyFpgaImageAttributeRequestStub != nil {
		return fake.ModifyFpgaImageAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyFpgaImageAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeRequestCallCount() int {
	fake.modifyFpgaImageAttributeRequestMutex.RLock()
	defer fake.modifyFpgaImageAttributeRequestMutex.RUnlock()
	return len(fake.modifyFpgaImageAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeRequestCalls(stub func(*ec2.ModifyFpgaImageAttributeInput) (*request.Request, *ec2.ModifyFpgaImageAttributeOutput)) {
	fake.modifyFpgaImageAttributeRequestMutex.Lock()
	defer fake.modifyFpgaImageAttributeRequestMutex.Unlock()
	fake.ModifyFpgaImageAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeRequestArgsForCall(i int) *ec2.ModifyFpgaImageAttributeInput {
	fake.modifyFpgaImageAttributeRequestMutex.RLock()
	defer fake.modifyFpgaImageAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyFpgaImageAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifyFpgaImageAttributeOutput) {
	fake.modifyFpgaImageAttributeRequestMutex.Lock()
	defer fake.modifyFpgaImageAttributeRequestMutex.Unlock()
	fake.ModifyFpgaImageAttributeRequestStub = nil
	fake.modifyFpgaImageAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyFpgaImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyFpgaImageAttributeOutput) {
	fake.modifyFpgaImageAttributeRequestMutex.Lock()
	defer fake.modifyFpgaImageAttributeRequestMutex.Unlock()
	fake.ModifyFpgaImageAttributeRequestStub = nil
	if fake.modifyFpgaImageAttributeRequestReturnsOnCall == nil {
		fake.modifyFpgaImageAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyFpgaImageAttributeOutput
		})
	}
	fake.modifyFpgaImageAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyFpgaImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifyFpgaImageAttributeInput, arg3 ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	fake.modifyFpgaImageAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyFpgaImageAttributeWithContextReturnsOnCall[len(fake.modifyFpgaImageAttributeWithContextArgsForCall)]
	fake.modifyFpgaImageAttributeWithContextArgsForCall = append(fake.modifyFpgaImageAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyFpgaImageAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyFpgaImageAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyFpgaImageAttributeWithContextMutex.Unlock()
	if fake.ModifyFpgaImageAttributeWithContextStub != nil {
		return fake.ModifyFpgaImageAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyFpgaImageAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeWithContextCallCount() int {
	fake.modifyFpgaImageAttributeWithContextMutex.RLock()
	defer fake.modifyFpgaImageAttributeWithContextMutex.RUnlock()
	return len(fake.modifyFpgaImageAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifyFpgaImageAttributeInput, ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error)) {
	fake.modifyFpgaImageAttributeWithContextMutex.Lock()
	defer fake.modifyFpgaImageAttributeWithContextMutex.Unlock()
	fake.ModifyFpgaImageAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyFpgaImageAttributeInput, []request.Option) {
	fake.modifyFpgaImageAttributeWithContextMutex.RLock()
	defer fake.modifyFpgaImageAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyFpgaImageAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeWithContextReturns(result1 *ec2.ModifyFpgaImageAttributeOutput, result2 error) {
	fake.modifyFpgaImageAttributeWithContextMutex.Lock()
	defer fake.modifyFpgaImageAttributeWithContextMutex.Unlock()
	fake.ModifyFpgaImageAttributeWithContextStub = nil
	fake.modifyFpgaImageAttributeWithContextReturns = struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyFpgaImageAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifyFpgaImageAttributeOutput, result2 error) {
	fake.modifyFpgaImageAttributeWithContextMutex.Lock()
	defer fake.modifyFpgaImageAttributeWithContextMutex.Unlock()
	fake.ModifyFpgaImageAttributeWithContextStub = nil
	if fake.modifyFpgaImageAttributeWithContextReturnsOnCall == nil {
		fake.modifyFpgaImageAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyFpgaImageAttributeOutput
			result2 error
		})
	}
	fake.modifyFpgaImageAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyHosts(arg1 *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
	fake.modifyHostsMutex.Lock()
	ret, specificReturn := fake.modifyHostsReturnsOnCall[len(fake.modifyHostsArgsForCall)]
	fake.modifyHostsArgsForCall = append(fake.modifyHostsArgsForCall, struct {
		arg1 *ec2.ModifyHostsInput
	}{arg1})
	fake.recordInvocation("ModifyHosts", []interface{}{arg1})
	fake.modifyHostsMutex.Unlock()
	if fake.ModifyHostsStub != nil {
		return fake.ModifyHostsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyHostsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyHostsCallCount() int {
	fake.modifyHostsMutex.RLock()
	defer fake.modifyHostsMutex.RUnlock()
	return len(fake.modifyHostsArgsForCall)
}

func (fake *FakeEC2API) ModifyHostsCalls(stub func(*ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error)) {
	fake.modifyHostsMutex.Lock()
	defer fake.modifyHostsMutex.Unlock()
	fake.ModifyHostsStub = stub
}

func (fake *FakeEC2API) ModifyHostsArgsForCall(i int) *ec2.ModifyHostsInput {
	fake.modifyHostsMutex.RLock()
	defer fake.modifyHostsMutex.RUnlock()
	argsForCall := fake.modifyHostsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyHostsReturns(result1 *ec2.ModifyHostsOutput, result2 error) {
	fake.modifyHostsMutex.Lock()
	defer fake.modifyHostsMutex.Unlock()
	fake.ModifyHostsStub = nil
	fake.modifyHostsReturns = struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyHostsReturnsOnCall(i int, result1 *ec2.ModifyHostsOutput, result2 error) {
	fake.modifyHostsMutex.Lock()
	defer fake.modifyHostsMutex.Unlock()
	fake.ModifyHostsStub = nil
	if fake.modifyHostsReturnsOnCall == nil {
		fake.modifyHostsReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyHostsOutput
			result2 error
		})
	}
	fake.modifyHostsReturnsOnCall[i] = struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyHostsRequest(arg1 *ec2.ModifyHostsInput) (*request.Request, *ec2.ModifyHostsOutput) {
	fake.modifyHostsRequestMutex.Lock()
	ret, specificReturn := fake.modifyHostsRequestReturnsOnCall[len(fake.modifyHostsRequestArgsForCall)]
	fake.modifyHostsRequestArgsForCall = append(fake.modifyHostsRequestArgsForCall, struct {
		arg1 *ec2.ModifyHostsInput
	}{arg1})
	fake.recordInvocation("ModifyHostsRequest", []interface{}{arg1})
	fake.modifyHostsRequestMutex.Unlock()
	if fake.ModifyHostsRequestStub != nil {
		return fake.ModifyHostsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyHostsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyHostsRequestCallCount() int {
	fake.modifyHostsRequestMutex.RLock()
	defer fake.modifyHostsRequestMutex.RUnlock()
	return len(fake.modifyHostsRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyHostsRequestCalls(stub func(*ec2.ModifyHostsInput) (*request.Request, *ec2.ModifyHostsOutput)) {
	fake.modifyHostsRequestMutex.Lock()
	defer fake.modifyHostsRequestMutex.Unlock()
	fake.ModifyHostsRequestStub = stub
}

func (fake *FakeEC2API) ModifyHostsRequestArgsForCall(i int) *ec2.ModifyHostsInput {
	fake.modifyHostsRequestMutex.RLock()
	defer fake.modifyHostsRequestMutex.RUnlock()
	argsForCall := fake.modifyHostsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyHostsRequestReturns(result1 *request.Request, result2 *ec2.ModifyHostsOutput) {
	fake.modifyHostsRequestMutex.Lock()
	defer fake.modifyHostsRequestMutex.Unlock()
	fake.ModifyHostsRequestStub = nil
	fake.modifyHostsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyHostsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyHostsOutput) {
	fake.modifyHostsRequestMutex.Lock()
	defer fake.modifyHostsRequestMutex.Unlock()
	fake.ModifyHostsRequestStub = nil
	if fake.modifyHostsRequestReturnsOnCall == nil {
		fake.modifyHostsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyHostsOutput
		})
	}
	fake.modifyHostsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyHostsWithContext(arg1 aws.Context, arg2 *ec2.ModifyHostsInput, arg3 ...request.Option) (*ec2.ModifyHostsOutput, error) {
	fake.modifyHostsWithContextMutex.Lock()
	ret, specificReturn := fake.modifyHostsWithContextReturnsOnCall[len(fake.modifyHostsWithContextArgsForCall)]
	fake.modifyHostsWithContextArgsForCall = append(fake.modifyHostsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyHostsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyHostsWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyHostsWithContextMutex.Unlock()
	if fake.ModifyHostsWithContextStub != nil {
		return fake.ModifyHostsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyHostsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyHostsWithContextCallCount() int {
	fake.modifyHostsWithContextMutex.RLock()
	defer fake.modifyHostsWithContextMutex.RUnlock()
	return len(fake.modifyHostsWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyHostsWithContextCalls(stub func(aws.Context, *ec2.ModifyHostsInput, ...request.Option) (*ec2.ModifyHostsOutput, error)) {
	fake.modifyHostsWithContextMutex.Lock()
	defer fake.modifyHostsWithContextMutex.Unlock()
	fake.ModifyHostsWithContextStub = stub
}

func (fake *FakeEC2API) ModifyHostsWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyHostsInput, []request.Option) {
	fake.modifyHostsWithContextMutex.RLock()
	defer fake.modifyHostsWithContextMutex.RUnlock()
	argsForCall := fake.modifyHostsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyHostsWithContextReturns(result1 *ec2.ModifyHostsOutput, result2 error) {
	fake.modifyHostsWithContextMutex.Lock()
	defer fake.modifyHostsWithContextMutex.Unlock()
	fake.ModifyHostsWithContextStub = nil
	fake.modifyHostsWithContextReturns = struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyHostsWithContextReturnsOnCall(i int, result1 *ec2.ModifyHostsOutput, result2 error) {
	fake.modifyHostsWithContextMutex.Lock()
	defer fake.modifyHostsWithContextMutex.Unlock()
	fake.ModifyHostsWithContextStub = nil
	if fake.modifyHostsWithContextReturnsOnCall == nil {
		fake.modifyHostsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyHostsOutput
			result2 error
		})
	}
	fake.modifyHostsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdFormat(arg1 *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
	fake.modifyIdFormatMutex.Lock()
	ret, specificReturn := fake.modifyIdFormatReturnsOnCall[len(fake.modifyIdFormatArgsForCall)]
	fake.modifyIdFormatArgsForCall = append(fake.modifyIdFormatArgsForCall, struct {
		arg1 *ec2.ModifyIdFormatInput
	}{arg1})
	fake.recordInvocation("ModifyIdFormat", []interface{}{arg1})
	fake.modifyIdFormatMutex.Unlock()
	if fake.ModifyIdFormatStub != nil {
		return fake.ModifyIdFormatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyIdFormatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyIdFormatCallCount() int {
	fake.modifyIdFormatMutex.RLock()
	defer fake.modifyIdFormatMutex.RUnlock()
	return len(fake.modifyIdFormatArgsForCall)
}

func (fake *FakeEC2API) ModifyIdFormatCalls(stub func(*ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error)) {
	fake.modifyIdFormatMutex.Lock()
	defer fake.modifyIdFormatMutex.Unlock()
	fake.ModifyIdFormatStub = stub
}

func (fake *FakeEC2API) ModifyIdFormatArgsForCall(i int) *ec2.ModifyIdFormatInput {
	fake.modifyIdFormatMutex.RLock()
	defer fake.modifyIdFormatMutex.RUnlock()
	argsForCall := fake.modifyIdFormatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyIdFormatReturns(result1 *ec2.ModifyIdFormatOutput, result2 error) {
	fake.modifyIdFormatMutex.Lock()
	defer fake.modifyIdFormatMutex.Unlock()
	fake.ModifyIdFormatStub = nil
	fake.modifyIdFormatReturns = struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdFormatReturnsOnCall(i int, result1 *ec2.ModifyIdFormatOutput, result2 error) {
	fake.modifyIdFormatMutex.Lock()
	defer fake.modifyIdFormatMutex.Unlock()
	fake.ModifyIdFormatStub = nil
	if fake.modifyIdFormatReturnsOnCall == nil {
		fake.modifyIdFormatReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyIdFormatOutput
			result2 error
		})
	}
	fake.modifyIdFormatReturnsOnCall[i] = struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdFormatRequest(arg1 *ec2.ModifyIdFormatInput) (*request.Request, *ec2.ModifyIdFormatOutput) {
	fake.modifyIdFormatRequestMutex.Lock()
	ret, specificReturn := fake.modifyIdFormatRequestReturnsOnCall[len(fake.modifyIdFormatRequestArgsForCall)]
	fake.modifyIdFormatRequestArgsForCall = append(fake.modifyIdFormatRequestArgsForCall, struct {
		arg1 *ec2.ModifyIdFormatInput
	}{arg1})
	fake.recordInvocation("ModifyIdFormatRequest", []interface{}{arg1})
	fake.modifyIdFormatRequestMutex.Unlock()
	if fake.ModifyIdFormatRequestStub != nil {
		return fake.ModifyIdFormatRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyIdFormatRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyIdFormatRequestCallCount() int {
	fake.modifyIdFormatRequestMutex.RLock()
	defer fake.modifyIdFormatRequestMutex.RUnlock()
	return len(fake.modifyIdFormatRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyIdFormatRequestCalls(stub func(*ec2.ModifyIdFormatInput) (*request.Request, *ec2.ModifyIdFormatOutput)) {
	fake.modifyIdFormatRequestMutex.Lock()
	defer fake.modifyIdFormatRequestMutex.Unlock()
	fake.ModifyIdFormatRequestStub = stub
}

func (fake *FakeEC2API) ModifyIdFormatRequestArgsForCall(i int) *ec2.ModifyIdFormatInput {
	fake.modifyIdFormatRequestMutex.RLock()
	defer fake.modifyIdFormatRequestMutex.RUnlock()
	argsForCall := fake.modifyIdFormatRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyIdFormatRequestReturns(result1 *request.Request, result2 *ec2.ModifyIdFormatOutput) {
	fake.modifyIdFormatRequestMutex.Lock()
	defer fake.modifyIdFormatRequestMutex.Unlock()
	fake.ModifyIdFormatRequestStub = nil
	fake.modifyIdFormatRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdFormatRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyIdFormatOutput) {
	fake.modifyIdFormatRequestMutex.Lock()
	defer fake.modifyIdFormatRequestMutex.Unlock()
	fake.ModifyIdFormatRequestStub = nil
	if fake.modifyIdFormatRequestReturnsOnCall == nil {
		fake.modifyIdFormatRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyIdFormatOutput
		})
	}
	fake.modifyIdFormatRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdFormatWithContext(arg1 aws.Context, arg2 *ec2.ModifyIdFormatInput, arg3 ...request.Option) (*ec2.ModifyIdFormatOutput, error) {
	fake.modifyIdFormatWithContextMutex.Lock()
	ret, specificReturn := fake.modifyIdFormatWithContextReturnsOnCall[len(fake.modifyIdFormatWithContextArgsForCall)]
	fake.modifyIdFormatWithContextArgsForCall = append(fake.modifyIdFormatWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyIdFormatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyIdFormatWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyIdFormatWithContextMutex.Unlock()
	if fake.ModifyIdFormatWithContextStub != nil {
		return fake.ModifyIdFormatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyIdFormatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyIdFormatWithContextCallCount() int {
	fake.modifyIdFormatWithContextMutex.RLock()
	defer fake.modifyIdFormatWithContextMutex.RUnlock()
	return len(fake.modifyIdFormatWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyIdFormatWithContextCalls(stub func(aws.Context, *ec2.ModifyIdFormatInput, ...request.Option) (*ec2.ModifyIdFormatOutput, error)) {
	fake.modifyIdFormatWithContextMutex.Lock()
	defer fake.modifyIdFormatWithContextMutex.Unlock()
	fake.ModifyIdFormatWithContextStub = stub
}

func (fake *FakeEC2API) ModifyIdFormatWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyIdFormatInput, []request.Option) {
	fake.modifyIdFormatWithContextMutex.RLock()
	defer fake.modifyIdFormatWithContextMutex.RUnlock()
	argsForCall := fake.modifyIdFormatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyIdFormatWithContextReturns(result1 *ec2.ModifyIdFormatOutput, result2 error) {
	fake.modifyIdFormatWithContextMutex.Lock()
	defer fake.modifyIdFormatWithContextMutex.Unlock()
	fake.ModifyIdFormatWithContextStub = nil
	fake.modifyIdFormatWithContextReturns = struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdFormatWithContextReturnsOnCall(i int, result1 *ec2.ModifyIdFormatOutput, result2 error) {
	fake.modifyIdFormatWithContextMutex.Lock()
	defer fake.modifyIdFormatWithContextMutex.Unlock()
	fake.ModifyIdFormatWithContextStub = nil
	if fake.modifyIdFormatWithContextReturnsOnCall == nil {
		fake.modifyIdFormatWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyIdFormatOutput
			result2 error
		})
	}
	fake.modifyIdFormatWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdentityIdFormat(arg1 *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
	fake.modifyIdentityIdFormatMutex.Lock()
	ret, specificReturn := fake.modifyIdentityIdFormatReturnsOnCall[len(fake.modifyIdentityIdFormatArgsForCall)]
	fake.modifyIdentityIdFormatArgsForCall = append(fake.modifyIdentityIdFormatArgsForCall, struct {
		arg1 *ec2.ModifyIdentityIdFormatInput
	}{arg1})
	fake.recordInvocation("ModifyIdentityIdFormat", []interface{}{arg1})
	fake.modifyIdentityIdFormatMutex.Unlock()
	if fake.ModifyIdentityIdFormatStub != nil {
		return fake.ModifyIdentityIdFormatStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyIdentityIdFormatReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyIdentityIdFormatCallCount() int {
	fake.modifyIdentityIdFormatMutex.RLock()
	defer fake.modifyIdentityIdFormatMutex.RUnlock()
	return len(fake.modifyIdentityIdFormatArgsForCall)
}

func (fake *FakeEC2API) ModifyIdentityIdFormatCalls(stub func(*ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error)) {
	fake.modifyIdentityIdFormatMutex.Lock()
	defer fake.modifyIdentityIdFormatMutex.Unlock()
	fake.ModifyIdentityIdFormatStub = stub
}

func (fake *FakeEC2API) ModifyIdentityIdFormatArgsForCall(i int) *ec2.ModifyIdentityIdFormatInput {
	fake.modifyIdentityIdFormatMutex.RLock()
	defer fake.modifyIdentityIdFormatMutex.RUnlock()
	argsForCall := fake.modifyIdentityIdFormatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyIdentityIdFormatReturns(result1 *ec2.ModifyIdentityIdFormatOutput, result2 error) {
	fake.modifyIdentityIdFormatMutex.Lock()
	defer fake.modifyIdentityIdFormatMutex.Unlock()
	fake.ModifyIdentityIdFormatStub = nil
	fake.modifyIdentityIdFormatReturns = struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdentityIdFormatReturnsOnCall(i int, result1 *ec2.ModifyIdentityIdFormatOutput, result2 error) {
	fake.modifyIdentityIdFormatMutex.Lock()
	defer fake.modifyIdentityIdFormatMutex.Unlock()
	fake.ModifyIdentityIdFormatStub = nil
	if fake.modifyIdentityIdFormatReturnsOnCall == nil {
		fake.modifyIdentityIdFormatReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyIdentityIdFormatOutput
			result2 error
		})
	}
	fake.modifyIdentityIdFormatReturnsOnCall[i] = struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdentityIdFormatRequest(arg1 *ec2.ModifyIdentityIdFormatInput) (*request.Request, *ec2.ModifyIdentityIdFormatOutput) {
	fake.modifyIdentityIdFormatRequestMutex.Lock()
	ret, specificReturn := fake.modifyIdentityIdFormatRequestReturnsOnCall[len(fake.modifyIdentityIdFormatRequestArgsForCall)]
	fake.modifyIdentityIdFormatRequestArgsForCall = append(fake.modifyIdentityIdFormatRequestArgsForCall, struct {
		arg1 *ec2.ModifyIdentityIdFormatInput
	}{arg1})
	fake.recordInvocation("ModifyIdentityIdFormatRequest", []interface{}{arg1})
	fake.modifyIdentityIdFormatRequestMutex.Unlock()
	if fake.ModifyIdentityIdFormatRequestStub != nil {
		return fake.ModifyIdentityIdFormatRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyIdentityIdFormatRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyIdentityIdFormatRequestCallCount() int {
	fake.modifyIdentityIdFormatRequestMutex.RLock()
	defer fake.modifyIdentityIdFormatRequestMutex.RUnlock()
	return len(fake.modifyIdentityIdFormatRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyIdentityIdFormatRequestCalls(stub func(*ec2.ModifyIdentityIdFormatInput) (*request.Request, *ec2.ModifyIdentityIdFormatOutput)) {
	fake.modifyIdentityIdFormatRequestMutex.Lock()
	defer fake.modifyIdentityIdFormatRequestMutex.Unlock()
	fake.ModifyIdentityIdFormatRequestStub = stub
}

func (fake *FakeEC2API) ModifyIdentityIdFormatRequestArgsForCall(i int) *ec2.ModifyIdentityIdFormatInput {
	fake.modifyIdentityIdFormatRequestMutex.RLock()
	defer fake.modifyIdentityIdFormatRequestMutex.RUnlock()
	argsForCall := fake.modifyIdentityIdFormatRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyIdentityIdFormatRequestReturns(result1 *request.Request, result2 *ec2.ModifyIdentityIdFormatOutput) {
	fake.modifyIdentityIdFormatRequestMutex.Lock()
	defer fake.modifyIdentityIdFormatRequestMutex.Unlock()
	fake.ModifyIdentityIdFormatRequestStub = nil
	fake.modifyIdentityIdFormatRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyIdentityIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdentityIdFormatRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyIdentityIdFormatOutput) {
	fake.modifyIdentityIdFormatRequestMutex.Lock()
	defer fake.modifyIdentityIdFormatRequestMutex.Unlock()
	fake.ModifyIdentityIdFormatRequestStub = nil
	if fake.modifyIdentityIdFormatRequestReturnsOnCall == nil {
		fake.modifyIdentityIdFormatRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyIdentityIdFormatOutput
		})
	}
	fake.modifyIdentityIdFormatRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyIdentityIdFormatOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdentityIdFormatWithContext(arg1 aws.Context, arg2 *ec2.ModifyIdentityIdFormatInput, arg3 ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error) {
	fake.modifyIdentityIdFormatWithContextMutex.Lock()
	ret, specificReturn := fake.modifyIdentityIdFormatWithContextReturnsOnCall[len(fake.modifyIdentityIdFormatWithContextArgsForCall)]
	fake.modifyIdentityIdFormatWithContextArgsForCall = append(fake.modifyIdentityIdFormatWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyIdentityIdFormatInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyIdentityIdFormatWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyIdentityIdFormatWithContextMutex.Unlock()
	if fake.ModifyIdentityIdFormatWithContextStub != nil {
		return fake.ModifyIdentityIdFormatWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyIdentityIdFormatWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyIdentityIdFormatWithContextCallCount() int {
	fake.modifyIdentityIdFormatWithContextMutex.RLock()
	defer fake.modifyIdentityIdFormatWithContextMutex.RUnlock()
	return len(fake.modifyIdentityIdFormatWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyIdentityIdFormatWithContextCalls(stub func(aws.Context, *ec2.ModifyIdentityIdFormatInput, ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error)) {
	fake.modifyIdentityIdFormatWithContextMutex.Lock()
	defer fake.modifyIdentityIdFormatWithContextMutex.Unlock()
	fake.ModifyIdentityIdFormatWithContextStub = stub
}

func (fake *FakeEC2API) ModifyIdentityIdFormatWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyIdentityIdFormatInput, []request.Option) {
	fake.modifyIdentityIdFormatWithContextMutex.RLock()
	defer fake.modifyIdentityIdFormatWithContextMutex.RUnlock()
	argsForCall := fake.modifyIdentityIdFormatWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyIdentityIdFormatWithContextReturns(result1 *ec2.ModifyIdentityIdFormatOutput, result2 error) {
	fake.modifyIdentityIdFormatWithContextMutex.Lock()
	defer fake.modifyIdentityIdFormatWithContextMutex.Unlock()
	fake.ModifyIdentityIdFormatWithContextStub = nil
	fake.modifyIdentityIdFormatWithContextReturns = struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyIdentityIdFormatWithContextReturnsOnCall(i int, result1 *ec2.ModifyIdentityIdFormatOutput, result2 error) {
	fake.modifyIdentityIdFormatWithContextMutex.Lock()
	defer fake.modifyIdentityIdFormatWithContextMutex.Unlock()
	fake.ModifyIdentityIdFormatWithContextStub = nil
	if fake.modifyIdentityIdFormatWithContextReturnsOnCall == nil {
		fake.modifyIdentityIdFormatWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyIdentityIdFormatOutput
			result2 error
		})
	}
	fake.modifyIdentityIdFormatWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyIdentityIdFormatOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyImageAttribute(arg1 *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	fake.modifyImageAttributeMutex.Lock()
	ret, specificReturn := fake.modifyImageAttributeReturnsOnCall[len(fake.modifyImageAttributeArgsForCall)]
	fake.modifyImageAttributeArgsForCall = append(fake.modifyImageAttributeArgsForCall, struct {
		arg1 *ec2.ModifyImageAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyImageAttribute", []interface{}{arg1})
	fake.modifyImageAttributeMutex.Unlock()
	if fake.ModifyImageAttributeStub != nil {
		return fake.ModifyImageAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyImageAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyImageAttributeCallCount() int {
	fake.modifyImageAttributeMutex.RLock()
	defer fake.modifyImageAttributeMutex.RUnlock()
	return len(fake.modifyImageAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifyImageAttributeCalls(stub func(*ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error)) {
	fake.modifyImageAttributeMutex.Lock()
	defer fake.modifyImageAttributeMutex.Unlock()
	fake.ModifyImageAttributeStub = stub
}

func (fake *FakeEC2API) ModifyImageAttributeArgsForCall(i int) *ec2.ModifyImageAttributeInput {
	fake.modifyImageAttributeMutex.RLock()
	defer fake.modifyImageAttributeMutex.RUnlock()
	argsForCall := fake.modifyImageAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyImageAttributeReturns(result1 *ec2.ModifyImageAttributeOutput, result2 error) {
	fake.modifyImageAttributeMutex.Lock()
	defer fake.modifyImageAttributeMutex.Unlock()
	fake.ModifyImageAttributeStub = nil
	fake.modifyImageAttributeReturns = struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyImageAttributeReturnsOnCall(i int, result1 *ec2.ModifyImageAttributeOutput, result2 error) {
	fake.modifyImageAttributeMutex.Lock()
	defer fake.modifyImageAttributeMutex.Unlock()
	fake.ModifyImageAttributeStub = nil
	if fake.modifyImageAttributeReturnsOnCall == nil {
		fake.modifyImageAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyImageAttributeOutput
			result2 error
		})
	}
	fake.modifyImageAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyImageAttributeRequest(arg1 *ec2.ModifyImageAttributeInput) (*request.Request, *ec2.ModifyImageAttributeOutput) {
	fake.modifyImageAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyImageAttributeRequestReturnsOnCall[len(fake.modifyImageAttributeRequestArgsForCall)]
	fake.modifyImageAttributeRequestArgsForCall = append(fake.modifyImageAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifyImageAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyImageAttributeRequest", []interface{}{arg1})
	fake.modifyImageAttributeRequestMutex.Unlock()
	if fake.ModifyImageAttributeRequestStub != nil {
		return fake.ModifyImageAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyImageAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyImageAttributeRequestCallCount() int {
	fake.modifyImageAttributeRequestMutex.RLock()
	defer fake.modifyImageAttributeRequestMutex.RUnlock()
	return len(fake.modifyImageAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyImageAttributeRequestCalls(stub func(*ec2.ModifyImageAttributeInput) (*request.Request, *ec2.ModifyImageAttributeOutput)) {
	fake.modifyImageAttributeRequestMutex.Lock()
	defer fake.modifyImageAttributeRequestMutex.Unlock()
	fake.ModifyImageAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifyImageAttributeRequestArgsForCall(i int) *ec2.ModifyImageAttributeInput {
	fake.modifyImageAttributeRequestMutex.RLock()
	defer fake.modifyImageAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyImageAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyImageAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifyImageAttributeOutput) {
	fake.modifyImageAttributeRequestMutex.Lock()
	defer fake.modifyImageAttributeRequestMutex.Unlock()
	fake.ModifyImageAttributeRequestStub = nil
	fake.modifyImageAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyImageAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyImageAttributeOutput) {
	fake.modifyImageAttributeRequestMutex.Lock()
	defer fake.modifyImageAttributeRequestMutex.Unlock()
	fake.ModifyImageAttributeRequestStub = nil
	if fake.modifyImageAttributeRequestReturnsOnCall == nil {
		fake.modifyImageAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyImageAttributeOutput
		})
	}
	fake.modifyImageAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyImageAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifyImageAttributeInput, arg3 ...request.Option) (*ec2.ModifyImageAttributeOutput, error) {
	fake.modifyImageAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyImageAttributeWithContextReturnsOnCall[len(fake.modifyImageAttributeWithContextArgsForCall)]
	fake.modifyImageAttributeWithContextArgsForCall = append(fake.modifyImageAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyImageAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyImageAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyImageAttributeWithContextMutex.Unlock()
	if fake.ModifyImageAttributeWithContextStub != nil {
		return fake.ModifyImageAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyImageAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyImageAttributeWithContextCallCount() int {
	fake.modifyImageAttributeWithContextMutex.RLock()
	defer fake.modifyImageAttributeWithContextMutex.RUnlock()
	return len(fake.modifyImageAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyImageAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifyImageAttributeInput, ...request.Option) (*ec2.ModifyImageAttributeOutput, error)) {
	fake.modifyImageAttributeWithContextMutex.Lock()
	defer fake.modifyImageAttributeWithContextMutex.Unlock()
	fake.ModifyImageAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyImageAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyImageAttributeInput, []request.Option) {
	fake.modifyImageAttributeWithContextMutex.RLock()
	defer fake.modifyImageAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyImageAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyImageAttributeWithContextReturns(result1 *ec2.ModifyImageAttributeOutput, result2 error) {
	fake.modifyImageAttributeWithContextMutex.Lock()
	defer fake.modifyImageAttributeWithContextMutex.Unlock()
	fake.ModifyImageAttributeWithContextStub = nil
	fake.modifyImageAttributeWithContextReturns = struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyImageAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifyImageAttributeOutput, result2 error) {
	fake.modifyImageAttributeWithContextMutex.Lock()
	defer fake.modifyImageAttributeWithContextMutex.Unlock()
	fake.ModifyImageAttributeWithContextStub = nil
	if fake.modifyImageAttributeWithContextReturnsOnCall == nil {
		fake.modifyImageAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyImageAttributeOutput
			result2 error
		})
	}
	fake.modifyImageAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceAttribute(arg1 *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	fake.modifyInstanceAttributeMutex.Lock()
	ret, specificReturn := fake.modifyInstanceAttributeReturnsOnCall[len(fake.modifyInstanceAttributeArgsForCall)]
	fake.modifyInstanceAttributeArgsForCall = append(fake.modifyInstanceAttributeArgsForCall, struct {
		arg1 *ec2.ModifyInstanceAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyInstanceAttribute", []interface{}{arg1})
	fake.modifyInstanceAttributeMutex.Unlock()
	if fake.ModifyInstanceAttributeStub != nil {
		return fake.ModifyInstanceAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceAttributeCallCount() int {
	fake.modifyInstanceAttributeMutex.RLock()
	defer fake.modifyInstanceAttributeMutex.RUnlock()
	return len(fake.modifyInstanceAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceAttributeCalls(stub func(*ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error)) {
	fake.modifyInstanceAttributeMutex.Lock()
	defer fake.modifyInstanceAttributeMutex.Unlock()
	fake.ModifyInstanceAttributeStub = stub
}

func (fake *FakeEC2API) ModifyInstanceAttributeArgsForCall(i int) *ec2.ModifyInstanceAttributeInput {
	fake.modifyInstanceAttributeMutex.RLock()
	defer fake.modifyInstanceAttributeMutex.RUnlock()
	argsForCall := fake.modifyInstanceAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstanceAttributeReturns(result1 *ec2.ModifyInstanceAttributeOutput, result2 error) {
	fake.modifyInstanceAttributeMutex.Lock()
	defer fake.modifyInstanceAttributeMutex.Unlock()
	fake.ModifyInstanceAttributeStub = nil
	fake.modifyInstanceAttributeReturns = struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceAttributeReturnsOnCall(i int, result1 *ec2.ModifyInstanceAttributeOutput, result2 error) {
	fake.modifyInstanceAttributeMutex.Lock()
	defer fake.modifyInstanceAttributeMutex.Unlock()
	fake.ModifyInstanceAttributeStub = nil
	if fake.modifyInstanceAttributeReturnsOnCall == nil {
		fake.modifyInstanceAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstanceAttributeOutput
			result2 error
		})
	}
	fake.modifyInstanceAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceAttributeRequest(arg1 *ec2.ModifyInstanceAttributeInput) (*request.Request, *ec2.ModifyInstanceAttributeOutput) {
	fake.modifyInstanceAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyInstanceAttributeRequestReturnsOnCall[len(fake.modifyInstanceAttributeRequestArgsForCall)]
	fake.modifyInstanceAttributeRequestArgsForCall = append(fake.modifyInstanceAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifyInstanceAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyInstanceAttributeRequest", []interface{}{arg1})
	fake.modifyInstanceAttributeRequestMutex.Unlock()
	if fake.ModifyInstanceAttributeRequestStub != nil {
		return fake.ModifyInstanceAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceAttributeRequestCallCount() int {
	fake.modifyInstanceAttributeRequestMutex.RLock()
	defer fake.modifyInstanceAttributeRequestMutex.RUnlock()
	return len(fake.modifyInstanceAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceAttributeRequestCalls(stub func(*ec2.ModifyInstanceAttributeInput) (*request.Request, *ec2.ModifyInstanceAttributeOutput)) {
	fake.modifyInstanceAttributeRequestMutex.Lock()
	defer fake.modifyInstanceAttributeRequestMutex.Unlock()
	fake.ModifyInstanceAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifyInstanceAttributeRequestArgsForCall(i int) *ec2.ModifyInstanceAttributeInput {
	fake.modifyInstanceAttributeRequestMutex.RLock()
	defer fake.modifyInstanceAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyInstanceAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstanceAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifyInstanceAttributeOutput) {
	fake.modifyInstanceAttributeRequestMutex.Lock()
	defer fake.modifyInstanceAttributeRequestMutex.Unlock()
	fake.ModifyInstanceAttributeRequestStub = nil
	fake.modifyInstanceAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyInstanceAttributeOutput) {
	fake.modifyInstanceAttributeRequestMutex.Lock()
	defer fake.modifyInstanceAttributeRequestMutex.Unlock()
	fake.ModifyInstanceAttributeRequestStub = nil
	if fake.modifyInstanceAttributeRequestReturnsOnCall == nil {
		fake.modifyInstanceAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyInstanceAttributeOutput
		})
	}
	fake.modifyInstanceAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifyInstanceAttributeInput, arg3 ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error) {
	fake.modifyInstanceAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyInstanceAttributeWithContextReturnsOnCall[len(fake.modifyInstanceAttributeWithContextArgsForCall)]
	fake.modifyInstanceAttributeWithContextArgsForCall = append(fake.modifyInstanceAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstanceAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyInstanceAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyInstanceAttributeWithContextMutex.Unlock()
	if fake.ModifyInstanceAttributeWithContextStub != nil {
		return fake.ModifyInstanceAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceAttributeWithContextCallCount() int {
	fake.modifyInstanceAttributeWithContextMutex.RLock()
	defer fake.modifyInstanceAttributeWithContextMutex.RUnlock()
	return len(fake.modifyInstanceAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifyInstanceAttributeInput, ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error)) {
	fake.modifyInstanceAttributeWithContextMutex.Lock()
	defer fake.modifyInstanceAttributeWithContextMutex.Unlock()
	fake.ModifyInstanceAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyInstanceAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyInstanceAttributeInput, []request.Option) {
	fake.modifyInstanceAttributeWithContextMutex.RLock()
	defer fake.modifyInstanceAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyInstanceAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyInstanceAttributeWithContextReturns(result1 *ec2.ModifyInstanceAttributeOutput, result2 error) {
	fake.modifyInstanceAttributeWithContextMutex.Lock()
	defer fake.modifyInstanceAttributeWithContextMutex.Unlock()
	fake.ModifyInstanceAttributeWithContextStub = nil
	fake.modifyInstanceAttributeWithContextReturns = struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifyInstanceAttributeOutput, result2 error) {
	fake.modifyInstanceAttributeWithContextMutex.Lock()
	defer fake.modifyInstanceAttributeWithContextMutex.Unlock()
	fake.ModifyInstanceAttributeWithContextStub = nil
	if fake.modifyInstanceAttributeWithContextReturnsOnCall == nil {
		fake.modifyInstanceAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstanceAttributeOutput
			result2 error
		})
	}
	fake.modifyInstanceAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributes(arg1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	fake.modifyInstanceCapacityReservationAttributesMutex.Lock()
	ret, specificReturn := fake.modifyInstanceCapacityReservationAttributesReturnsOnCall[len(fake.modifyInstanceCapacityReservationAttributesArgsForCall)]
	fake.modifyInstanceCapacityReservationAttributesArgsForCall = append(fake.modifyInstanceCapacityReservationAttributesArgsForCall, struct {
		arg1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}{arg1})
	fake.recordInvocation("ModifyInstanceCapacityReservationAttributes", []interface{}{arg1})
	fake.modifyInstanceCapacityReservationAttributesMutex.Unlock()
	if fake.ModifyInstanceCapacityReservationAttributesStub != nil {
		return fake.ModifyInstanceCapacityReservationAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceCapacityReservationAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesCallCount() int {
	fake.modifyInstanceCapacityReservationAttributesMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesMutex.RUnlock()
	return len(fake.modifyInstanceCapacityReservationAttributesArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesCalls(stub func(*ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)) {
	fake.modifyInstanceCapacityReservationAttributesMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesStub = stub
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesArgsForCall(i int) *ec2.ModifyInstanceCapacityReservationAttributesInput {
	fake.modifyInstanceCapacityReservationAttributesMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesMutex.RUnlock()
	argsForCall := fake.modifyInstanceCapacityReservationAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesReturns(result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput, result2 error) {
	fake.modifyInstanceCapacityReservationAttributesMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesStub = nil
	fake.modifyInstanceCapacityReservationAttributesReturns = struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesReturnsOnCall(i int, result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput, result2 error) {
	fake.modifyInstanceCapacityReservationAttributesMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesStub = nil
	if fake.modifyInstanceCapacityReservationAttributesReturnsOnCall == nil {
		fake.modifyInstanceCapacityReservationAttributesReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
			result2 error
		})
	}
	fake.modifyInstanceCapacityReservationAttributesReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesRequest(arg1 *ec2.ModifyInstanceCapacityReservationAttributesInput) (*request.Request, *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.Lock()
	ret, specificReturn := fake.modifyInstanceCapacityReservationAttributesRequestReturnsOnCall[len(fake.modifyInstanceCapacityReservationAttributesRequestArgsForCall)]
	fake.modifyInstanceCapacityReservationAttributesRequestArgsForCall = append(fake.modifyInstanceCapacityReservationAttributesRequestArgsForCall, struct {
		arg1 *ec2.ModifyInstanceCapacityReservationAttributesInput
	}{arg1})
	fake.recordInvocation("ModifyInstanceCapacityReservationAttributesRequest", []interface{}{arg1})
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.Unlock()
	if fake.ModifyInstanceCapacityReservationAttributesRequestStub != nil {
		return fake.ModifyInstanceCapacityReservationAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceCapacityReservationAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesRequestCallCount() int {
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesRequestMutex.RUnlock()
	return len(fake.modifyInstanceCapacityReservationAttributesRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesRequestCalls(stub func(*ec2.ModifyInstanceCapacityReservationAttributesInput) (*request.Request, *ec2.ModifyInstanceCapacityReservationAttributesOutput)) {
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesRequestMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesRequestStub = stub
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesRequestArgsForCall(i int) *ec2.ModifyInstanceCapacityReservationAttributesInput {
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesRequestMutex.RUnlock()
	argsForCall := fake.modifyInstanceCapacityReservationAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesRequestReturns(result1 *request.Request, result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesRequestMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesRequestStub = nil
	fake.modifyInstanceCapacityReservationAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesRequestMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesRequestStub = nil
	if fake.modifyInstanceCapacityReservationAttributesRequestReturnsOnCall == nil {
		fake.modifyInstanceCapacityReservationAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		})
	}
	fake.modifyInstanceCapacityReservationAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesWithContext(arg1 aws.Context, arg2 *ec2.ModifyInstanceCapacityReservationAttributesInput, arg3 ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.modifyInstanceCapacityReservationAttributesWithContextReturnsOnCall[len(fake.modifyInstanceCapacityReservationAttributesWithContextArgsForCall)]
	fake.modifyInstanceCapacityReservationAttributesWithContextArgsForCall = append(fake.modifyInstanceCapacityReservationAttributesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstanceCapacityReservationAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyInstanceCapacityReservationAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Unlock()
	if fake.ModifyInstanceCapacityReservationAttributesWithContextStub != nil {
		return fake.ModifyInstanceCapacityReservationAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceCapacityReservationAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesWithContextCallCount() int {
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesWithContextMutex.RUnlock()
	return len(fake.modifyInstanceCapacityReservationAttributesWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesWithContextCalls(stub func(aws.Context, *ec2.ModifyInstanceCapacityReservationAttributesInput, ...request.Option) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)) {
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesWithContextStub = stub
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyInstanceCapacityReservationAttributesInput, []request.Option) {
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesWithContextMutex.RUnlock()
	argsForCall := fake.modifyInstanceCapacityReservationAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesWithContextReturns(result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput, result2 error) {
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesWithContextStub = nil
	fake.modifyInstanceCapacityReservationAttributesWithContextReturns = struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCapacityReservationAttributesWithContextReturnsOnCall(i int, result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput, result2 error) {
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Lock()
	defer fake.modifyInstanceCapacityReservationAttributesWithContextMutex.Unlock()
	fake.ModifyInstanceCapacityReservationAttributesWithContextStub = nil
	if fake.modifyInstanceCapacityReservationAttributesWithContextReturnsOnCall == nil {
		fake.modifyInstanceCapacityReservationAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
			result2 error
		})
	}
	fake.modifyInstanceCapacityReservationAttributesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecification(arg1 *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	fake.modifyInstanceCreditSpecificationMutex.Lock()
	ret, specificReturn := fake.modifyInstanceCreditSpecificationReturnsOnCall[len(fake.modifyInstanceCreditSpecificationArgsForCall)]
	fake.modifyInstanceCreditSpecificationArgsForCall = append(fake.modifyInstanceCreditSpecificationArgsForCall, struct {
		arg1 *ec2.ModifyInstanceCreditSpecificationInput
	}{arg1})
	fake.recordInvocation("ModifyInstanceCreditSpecification", []interface{}{arg1})
	fake.modifyInstanceCreditSpecificationMutex.Unlock()
	if fake.ModifyInstanceCreditSpecificationStub != nil {
		return fake.ModifyInstanceCreditSpecificationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceCreditSpecificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationCallCount() int {
	fake.modifyInstanceCreditSpecificationMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationMutex.RUnlock()
	return len(fake.modifyInstanceCreditSpecificationArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationCalls(stub func(*ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error)) {
	fake.modifyInstanceCreditSpecificationMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationStub = stub
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationArgsForCall(i int) *ec2.ModifyInstanceCreditSpecificationInput {
	fake.modifyInstanceCreditSpecificationMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationMutex.RUnlock()
	argsForCall := fake.modifyInstanceCreditSpecificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationReturns(result1 *ec2.ModifyInstanceCreditSpecificationOutput, result2 error) {
	fake.modifyInstanceCreditSpecificationMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationStub = nil
	fake.modifyInstanceCreditSpecificationReturns = struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationReturnsOnCall(i int, result1 *ec2.ModifyInstanceCreditSpecificationOutput, result2 error) {
	fake.modifyInstanceCreditSpecificationMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationStub = nil
	if fake.modifyInstanceCreditSpecificationReturnsOnCall == nil {
		fake.modifyInstanceCreditSpecificationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstanceCreditSpecificationOutput
			result2 error
		})
	}
	fake.modifyInstanceCreditSpecificationReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationRequest(arg1 *ec2.ModifyInstanceCreditSpecificationInput) (*request.Request, *ec2.ModifyInstanceCreditSpecificationOutput) {
	fake.modifyInstanceCreditSpecificationRequestMutex.Lock()
	ret, specificReturn := fake.modifyInstanceCreditSpecificationRequestReturnsOnCall[len(fake.modifyInstanceCreditSpecificationRequestArgsForCall)]
	fake.modifyInstanceCreditSpecificationRequestArgsForCall = append(fake.modifyInstanceCreditSpecificationRequestArgsForCall, struct {
		arg1 *ec2.ModifyInstanceCreditSpecificationInput
	}{arg1})
	fake.recordInvocation("ModifyInstanceCreditSpecificationRequest", []interface{}{arg1})
	fake.modifyInstanceCreditSpecificationRequestMutex.Unlock()
	if fake.ModifyInstanceCreditSpecificationRequestStub != nil {
		return fake.ModifyInstanceCreditSpecificationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceCreditSpecificationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationRequestCallCount() int {
	fake.modifyInstanceCreditSpecificationRequestMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationRequestMutex.RUnlock()
	return len(fake.modifyInstanceCreditSpecificationRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationRequestCalls(stub func(*ec2.ModifyInstanceCreditSpecificationInput) (*request.Request, *ec2.ModifyInstanceCreditSpecificationOutput)) {
	fake.modifyInstanceCreditSpecificationRequestMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationRequestMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationRequestStub = stub
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationRequestArgsForCall(i int) *ec2.ModifyInstanceCreditSpecificationInput {
	fake.modifyInstanceCreditSpecificationRequestMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationRequestMutex.RUnlock()
	argsForCall := fake.modifyInstanceCreditSpecificationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationRequestReturns(result1 *request.Request, result2 *ec2.ModifyInstanceCreditSpecificationOutput) {
	fake.modifyInstanceCreditSpecificationRequestMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationRequestMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationRequestStub = nil
	fake.modifyInstanceCreditSpecificationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCreditSpecificationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyInstanceCreditSpecificationOutput) {
	fake.modifyInstanceCreditSpecificationRequestMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationRequestMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationRequestStub = nil
	if fake.modifyInstanceCreditSpecificationRequestReturnsOnCall == nil {
		fake.modifyInstanceCreditSpecificationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyInstanceCreditSpecificationOutput
		})
	}
	fake.modifyInstanceCreditSpecificationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstanceCreditSpecificationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationWithContext(arg1 aws.Context, arg2 *ec2.ModifyInstanceCreditSpecificationInput, arg3 ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	fake.modifyInstanceCreditSpecificationWithContextMutex.Lock()
	ret, specificReturn := fake.modifyInstanceCreditSpecificationWithContextReturnsOnCall[len(fake.modifyInstanceCreditSpecificationWithContextArgsForCall)]
	fake.modifyInstanceCreditSpecificationWithContextArgsForCall = append(fake.modifyInstanceCreditSpecificationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstanceCreditSpecificationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyInstanceCreditSpecificationWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyInstanceCreditSpecificationWithContextMutex.Unlock()
	if fake.ModifyInstanceCreditSpecificationWithContextStub != nil {
		return fake.ModifyInstanceCreditSpecificationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstanceCreditSpecificationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationWithContextCallCount() int {
	fake.modifyInstanceCreditSpecificationWithContextMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationWithContextMutex.RUnlock()
	return len(fake.modifyInstanceCreditSpecificationWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationWithContextCalls(stub func(aws.Context, *ec2.ModifyInstanceCreditSpecificationInput, ...request.Option) (*ec2.ModifyInstanceCreditSpecificationOutput, error)) {
	fake.modifyInstanceCreditSpecificationWithContextMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationWithContextMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationWithContextStub = stub
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyInstanceCreditSpecificationInput, []request.Option) {
	fake.modifyInstanceCreditSpecificationWithContextMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationWithContextMutex.RUnlock()
	argsForCall := fake.modifyInstanceCreditSpecificationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationWithContextReturns(result1 *ec2.ModifyInstanceCreditSpecificationOutput, result2 error) {
	fake.modifyInstanceCreditSpecificationWithContextMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationWithContextMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationWithContextStub = nil
	fake.modifyInstanceCreditSpecificationWithContextReturns = struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstanceCreditSpecificationWithContextReturnsOnCall(i int, result1 *ec2.ModifyInstanceCreditSpecificationOutput, result2 error) {
	fake.modifyInstanceCreditSpecificationWithContextMutex.Lock()
	defer fake.modifyInstanceCreditSpecificationWithContextMutex.Unlock()
	fake.ModifyInstanceCreditSpecificationWithContextStub = nil
	if fake.modifyInstanceCreditSpecificationWithContextReturnsOnCall == nil {
		fake.modifyInstanceCreditSpecificationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstanceCreditSpecificationOutput
			result2 error
		})
	}
	fake.modifyInstanceCreditSpecificationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstanceCreditSpecificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstancePlacement(arg1 *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
	fake.modifyInstancePlacementMutex.Lock()
	ret, specificReturn := fake.modifyInstancePlacementReturnsOnCall[len(fake.modifyInstancePlacementArgsForCall)]
	fake.modifyInstancePlacementArgsForCall = append(fake.modifyInstancePlacementArgsForCall, struct {
		arg1 *ec2.ModifyInstancePlacementInput
	}{arg1})
	fake.recordInvocation("ModifyInstancePlacement", []interface{}{arg1})
	fake.modifyInstancePlacementMutex.Unlock()
	if fake.ModifyInstancePlacementStub != nil {
		return fake.ModifyInstancePlacementStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstancePlacementReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstancePlacementCallCount() int {
	fake.modifyInstancePlacementMutex.RLock()
	defer fake.modifyInstancePlacementMutex.RUnlock()
	return len(fake.modifyInstancePlacementArgsForCall)
}

func (fake *FakeEC2API) ModifyInstancePlacementCalls(stub func(*ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error)) {
	fake.modifyInstancePlacementMutex.Lock()
	defer fake.modifyInstancePlacementMutex.Unlock()
	fake.ModifyInstancePlacementStub = stub
}

func (fake *FakeEC2API) ModifyInstancePlacementArgsForCall(i int) *ec2.ModifyInstancePlacementInput {
	fake.modifyInstancePlacementMutex.RLock()
	defer fake.modifyInstancePlacementMutex.RUnlock()
	argsForCall := fake.modifyInstancePlacementArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstancePlacementReturns(result1 *ec2.ModifyInstancePlacementOutput, result2 error) {
	fake.modifyInstancePlacementMutex.Lock()
	defer fake.modifyInstancePlacementMutex.Unlock()
	fake.ModifyInstancePlacementStub = nil
	fake.modifyInstancePlacementReturns = struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstancePlacementReturnsOnCall(i int, result1 *ec2.ModifyInstancePlacementOutput, result2 error) {
	fake.modifyInstancePlacementMutex.Lock()
	defer fake.modifyInstancePlacementMutex.Unlock()
	fake.ModifyInstancePlacementStub = nil
	if fake.modifyInstancePlacementReturnsOnCall == nil {
		fake.modifyInstancePlacementReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstancePlacementOutput
			result2 error
		})
	}
	fake.modifyInstancePlacementReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstancePlacementRequest(arg1 *ec2.ModifyInstancePlacementInput) (*request.Request, *ec2.ModifyInstancePlacementOutput) {
	fake.modifyInstancePlacementRequestMutex.Lock()
	ret, specificReturn := fake.modifyInstancePlacementRequestReturnsOnCall[len(fake.modifyInstancePlacementRequestArgsForCall)]
	fake.modifyInstancePlacementRequestArgsForCall = append(fake.modifyInstancePlacementRequestArgsForCall, struct {
		arg1 *ec2.ModifyInstancePlacementInput
	}{arg1})
	fake.recordInvocation("ModifyInstancePlacementRequest", []interface{}{arg1})
	fake.modifyInstancePlacementRequestMutex.Unlock()
	if fake.ModifyInstancePlacementRequestStub != nil {
		return fake.ModifyInstancePlacementRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstancePlacementRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstancePlacementRequestCallCount() int {
	fake.modifyInstancePlacementRequestMutex.RLock()
	defer fake.modifyInstancePlacementRequestMutex.RUnlock()
	return len(fake.modifyInstancePlacementRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyInstancePlacementRequestCalls(stub func(*ec2.ModifyInstancePlacementInput) (*request.Request, *ec2.ModifyInstancePlacementOutput)) {
	fake.modifyInstancePlacementRequestMutex.Lock()
	defer fake.modifyInstancePlacementRequestMutex.Unlock()
	fake.ModifyInstancePlacementRequestStub = stub
}

func (fake *FakeEC2API) ModifyInstancePlacementRequestArgsForCall(i int) *ec2.ModifyInstancePlacementInput {
	fake.modifyInstancePlacementRequestMutex.RLock()
	defer fake.modifyInstancePlacementRequestMutex.RUnlock()
	argsForCall := fake.modifyInstancePlacementRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyInstancePlacementRequestReturns(result1 *request.Request, result2 *ec2.ModifyInstancePlacementOutput) {
	fake.modifyInstancePlacementRequestMutex.Lock()
	defer fake.modifyInstancePlacementRequestMutex.Unlock()
	fake.ModifyInstancePlacementRequestStub = nil
	fake.modifyInstancePlacementRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstancePlacementOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstancePlacementRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyInstancePlacementOutput) {
	fake.modifyInstancePlacementRequestMutex.Lock()
	defer fake.modifyInstancePlacementRequestMutex.Unlock()
	fake.ModifyInstancePlacementRequestStub = nil
	if fake.modifyInstancePlacementRequestReturnsOnCall == nil {
		fake.modifyInstancePlacementRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyInstancePlacementOutput
		})
	}
	fake.modifyInstancePlacementRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyInstancePlacementOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstancePlacementWithContext(arg1 aws.Context, arg2 *ec2.ModifyInstancePlacementInput, arg3 ...request.Option) (*ec2.ModifyInstancePlacementOutput, error) {
	fake.modifyInstancePlacementWithContextMutex.Lock()
	ret, specificReturn := fake.modifyInstancePlacementWithContextReturnsOnCall[len(fake.modifyInstancePlacementWithContextArgsForCall)]
	fake.modifyInstancePlacementWithContextArgsForCall = append(fake.modifyInstancePlacementWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyInstancePlacementInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyInstancePlacementWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyInstancePlacementWithContextMutex.Unlock()
	if fake.ModifyInstancePlacementWithContextStub != nil {
		return fake.ModifyInstancePlacementWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyInstancePlacementWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyInstancePlacementWithContextCallCount() int {
	fake.modifyInstancePlacementWithContextMutex.RLock()
	defer fake.modifyInstancePlacementWithContextMutex.RUnlock()
	return len(fake.modifyInstancePlacementWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyInstancePlacementWithContextCalls(stub func(aws.Context, *ec2.ModifyInstancePlacementInput, ...request.Option) (*ec2.ModifyInstancePlacementOutput, error)) {
	fake.modifyInstancePlacementWithContextMutex.Lock()
	defer fake.modifyInstancePlacementWithContextMutex.Unlock()
	fake.ModifyInstancePlacementWithContextStub = stub
}

func (fake *FakeEC2API) ModifyInstancePlacementWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyInstancePlacementInput, []request.Option) {
	fake.modifyInstancePlacementWithContextMutex.RLock()
	defer fake.modifyInstancePlacementWithContextMutex.RUnlock()
	argsForCall := fake.modifyInstancePlacementWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyInstancePlacementWithContextReturns(result1 *ec2.ModifyInstancePlacementOutput, result2 error) {
	fake.modifyInstancePlacementWithContextMutex.Lock()
	defer fake.modifyInstancePlacementWithContextMutex.Unlock()
	fake.ModifyInstancePlacementWithContextStub = nil
	fake.modifyInstancePlacementWithContextReturns = struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyInstancePlacementWithContextReturnsOnCall(i int, result1 *ec2.ModifyInstancePlacementOutput, result2 error) {
	fake.modifyInstancePlacementWithContextMutex.Lock()
	defer fake.modifyInstancePlacementWithContextMutex.Unlock()
	fake.ModifyInstancePlacementWithContextStub = nil
	if fake.modifyInstancePlacementWithContextReturnsOnCall == nil {
		fake.modifyInstancePlacementWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyInstancePlacementOutput
			result2 error
		})
	}
	fake.modifyInstancePlacementWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyInstancePlacementOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyLaunchTemplate(arg1 *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error) {
	fake.modifyLaunchTemplateMutex.Lock()
	ret, specificReturn := fake.modifyLaunchTemplateReturnsOnCall[len(fake.modifyLaunchTemplateArgsForCall)]
	fake.modifyLaunchTemplateArgsForCall = append(fake.modifyLaunchTemplateArgsForCall, struct {
		arg1 *ec2.ModifyLaunchTemplateInput
	}{arg1})
	fake.recordInvocation("ModifyLaunchTemplate", []interface{}{arg1})
	fake.modifyLaunchTemplateMutex.Unlock()
	if fake.ModifyLaunchTemplateStub != nil {
		return fake.ModifyLaunchTemplateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyLaunchTemplateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyLaunchTemplateCallCount() int {
	fake.modifyLaunchTemplateMutex.RLock()
	defer fake.modifyLaunchTemplateMutex.RUnlock()
	return len(fake.modifyLaunchTemplateArgsForCall)
}

func (fake *FakeEC2API) ModifyLaunchTemplateCalls(stub func(*ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error)) {
	fake.modifyLaunchTemplateMutex.Lock()
	defer fake.modifyLaunchTemplateMutex.Unlock()
	fake.ModifyLaunchTemplateStub = stub
}

func (fake *FakeEC2API) ModifyLaunchTemplateArgsForCall(i int) *ec2.ModifyLaunchTemplateInput {
	fake.modifyLaunchTemplateMutex.RLock()
	defer fake.modifyLaunchTemplateMutex.RUnlock()
	argsForCall := fake.modifyLaunchTemplateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyLaunchTemplateReturns(result1 *ec2.ModifyLaunchTemplateOutput, result2 error) {
	fake.modifyLaunchTemplateMutex.Lock()
	defer fake.modifyLaunchTemplateMutex.Unlock()
	fake.ModifyLaunchTemplateStub = nil
	fake.modifyLaunchTemplateReturns = struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyLaunchTemplateReturnsOnCall(i int, result1 *ec2.ModifyLaunchTemplateOutput, result2 error) {
	fake.modifyLaunchTemplateMutex.Lock()
	defer fake.modifyLaunchTemplateMutex.Unlock()
	fake.ModifyLaunchTemplateStub = nil
	if fake.modifyLaunchTemplateReturnsOnCall == nil {
		fake.modifyLaunchTemplateReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyLaunchTemplateOutput
			result2 error
		})
	}
	fake.modifyLaunchTemplateReturnsOnCall[i] = struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyLaunchTemplateRequest(arg1 *ec2.ModifyLaunchTemplateInput) (*request.Request, *ec2.ModifyLaunchTemplateOutput) {
	fake.modifyLaunchTemplateRequestMutex.Lock()
	ret, specificReturn := fake.modifyLaunchTemplateRequestReturnsOnCall[len(fake.modifyLaunchTemplateRequestArgsForCall)]
	fake.modifyLaunchTemplateRequestArgsForCall = append(fake.modifyLaunchTemplateRequestArgsForCall, struct {
		arg1 *ec2.ModifyLaunchTemplateInput
	}{arg1})
	fake.recordInvocation("ModifyLaunchTemplateRequest", []interface{}{arg1})
	fake.modifyLaunchTemplateRequestMutex.Unlock()
	if fake.ModifyLaunchTemplateRequestStub != nil {
		return fake.ModifyLaunchTemplateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyLaunchTemplateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyLaunchTemplateRequestCallCount() int {
	fake.modifyLaunchTemplateRequestMutex.RLock()
	defer fake.modifyLaunchTemplateRequestMutex.RUnlock()
	return len(fake.modifyLaunchTemplateRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyLaunchTemplateRequestCalls(stub func(*ec2.ModifyLaunchTemplateInput) (*request.Request, *ec2.ModifyLaunchTemplateOutput)) {
	fake.modifyLaunchTemplateRequestMutex.Lock()
	defer fake.modifyLaunchTemplateRequestMutex.Unlock()
	fake.ModifyLaunchTemplateRequestStub = stub
}

func (fake *FakeEC2API) ModifyLaunchTemplateRequestArgsForCall(i int) *ec2.ModifyLaunchTemplateInput {
	fake.modifyLaunchTemplateRequestMutex.RLock()
	defer fake.modifyLaunchTemplateRequestMutex.RUnlock()
	argsForCall := fake.modifyLaunchTemplateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyLaunchTemplateRequestReturns(result1 *request.Request, result2 *ec2.ModifyLaunchTemplateOutput) {
	fake.modifyLaunchTemplateRequestMutex.Lock()
	defer fake.modifyLaunchTemplateRequestMutex.Unlock()
	fake.ModifyLaunchTemplateRequestStub = nil
	fake.modifyLaunchTemplateRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyLaunchTemplateOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyLaunchTemplateRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyLaunchTemplateOutput) {
	fake.modifyLaunchTemplateRequestMutex.Lock()
	defer fake.modifyLaunchTemplateRequestMutex.Unlock()
	fake.ModifyLaunchTemplateRequestStub = nil
	if fake.modifyLaunchTemplateRequestReturnsOnCall == nil {
		fake.modifyLaunchTemplateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyLaunchTemplateOutput
		})
	}
	fake.modifyLaunchTemplateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyLaunchTemplateOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyLaunchTemplateWithContext(arg1 aws.Context, arg2 *ec2.ModifyLaunchTemplateInput, arg3 ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error) {
	fake.modifyLaunchTemplateWithContextMutex.Lock()
	ret, specificReturn := fake.modifyLaunchTemplateWithContextReturnsOnCall[len(fake.modifyLaunchTemplateWithContextArgsForCall)]
	fake.modifyLaunchTemplateWithContextArgsForCall = append(fake.modifyLaunchTemplateWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyLaunchTemplateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyLaunchTemplateWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyLaunchTemplateWithContextMutex.Unlock()
	if fake.ModifyLaunchTemplateWithContextStub != nil {
		return fake.ModifyLaunchTemplateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyLaunchTemplateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyLaunchTemplateWithContextCallCount() int {
	fake.modifyLaunchTemplateWithContextMutex.RLock()
	defer fake.modifyLaunchTemplateWithContextMutex.RUnlock()
	return len(fake.modifyLaunchTemplateWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyLaunchTemplateWithContextCalls(stub func(aws.Context, *ec2.ModifyLaunchTemplateInput, ...request.Option) (*ec2.ModifyLaunchTemplateOutput, error)) {
	fake.modifyLaunchTemplateWithContextMutex.Lock()
	defer fake.modifyLaunchTemplateWithContextMutex.Unlock()
	fake.ModifyLaunchTemplateWithContextStub = stub
}

func (fake *FakeEC2API) ModifyLaunchTemplateWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyLaunchTemplateInput, []request.Option) {
	fake.modifyLaunchTemplateWithContextMutex.RLock()
	defer fake.modifyLaunchTemplateWithContextMutex.RUnlock()
	argsForCall := fake.modifyLaunchTemplateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyLaunchTemplateWithContextReturns(result1 *ec2.ModifyLaunchTemplateOutput, result2 error) {
	fake.modifyLaunchTemplateWithContextMutex.Lock()
	defer fake.modifyLaunchTemplateWithContextMutex.Unlock()
	fake.ModifyLaunchTemplateWithContextStub = nil
	fake.modifyLaunchTemplateWithContextReturns = struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyLaunchTemplateWithContextReturnsOnCall(i int, result1 *ec2.ModifyLaunchTemplateOutput, result2 error) {
	fake.modifyLaunchTemplateWithContextMutex.Lock()
	defer fake.modifyLaunchTemplateWithContextMutex.Unlock()
	fake.ModifyLaunchTemplateWithContextStub = nil
	if fake.modifyLaunchTemplateWithContextReturnsOnCall == nil {
		fake.modifyLaunchTemplateWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyLaunchTemplateOutput
			result2 error
		})
	}
	fake.modifyLaunchTemplateWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyLaunchTemplateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttribute(arg1 *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	fake.modifyNetworkInterfaceAttributeMutex.Lock()
	ret, specificReturn := fake.modifyNetworkInterfaceAttributeReturnsOnCall[len(fake.modifyNetworkInterfaceAttributeArgsForCall)]
	fake.modifyNetworkInterfaceAttributeArgsForCall = append(fake.modifyNetworkInterfaceAttributeArgsForCall, struct {
		arg1 *ec2.ModifyNetworkInterfaceAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyNetworkInterfaceAttribute", []interface{}{arg1})
	fake.modifyNetworkInterfaceAttributeMutex.Unlock()
	if fake.ModifyNetworkInterfaceAttributeStub != nil {
		return fake.ModifyNetworkInterfaceAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyNetworkInterfaceAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeCallCount() int {
	fake.modifyNetworkInterfaceAttributeMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeMutex.RUnlock()
	return len(fake.modifyNetworkInterfaceAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeCalls(stub func(*ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)) {
	fake.modifyNetworkInterfaceAttributeMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeStub = stub
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeArgsForCall(i int) *ec2.ModifyNetworkInterfaceAttributeInput {
	fake.modifyNetworkInterfaceAttributeMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeMutex.RUnlock()
	argsForCall := fake.modifyNetworkInterfaceAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeReturns(result1 *ec2.ModifyNetworkInterfaceAttributeOutput, result2 error) {
	fake.modifyNetworkInterfaceAttributeMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeStub = nil
	fake.modifyNetworkInterfaceAttributeReturns = struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeReturnsOnCall(i int, result1 *ec2.ModifyNetworkInterfaceAttributeOutput, result2 error) {
	fake.modifyNetworkInterfaceAttributeMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeStub = nil
	if fake.modifyNetworkInterfaceAttributeReturnsOnCall == nil {
		fake.modifyNetworkInterfaceAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyNetworkInterfaceAttributeOutput
			result2 error
		})
	}
	fake.modifyNetworkInterfaceAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeRequest(arg1 *ec2.ModifyNetworkInterfaceAttributeInput) (*request.Request, *ec2.ModifyNetworkInterfaceAttributeOutput) {
	fake.modifyNetworkInterfaceAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyNetworkInterfaceAttributeRequestReturnsOnCall[len(fake.modifyNetworkInterfaceAttributeRequestArgsForCall)]
	fake.modifyNetworkInterfaceAttributeRequestArgsForCall = append(fake.modifyNetworkInterfaceAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifyNetworkInterfaceAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyNetworkInterfaceAttributeRequest", []interface{}{arg1})
	fake.modifyNetworkInterfaceAttributeRequestMutex.Unlock()
	if fake.ModifyNetworkInterfaceAttributeRequestStub != nil {
		return fake.ModifyNetworkInterfaceAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyNetworkInterfaceAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeRequestCallCount() int {
	fake.modifyNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeRequestMutex.RUnlock()
	return len(fake.modifyNetworkInterfaceAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeRequestCalls(stub func(*ec2.ModifyNetworkInterfaceAttributeInput) (*request.Request, *ec2.ModifyNetworkInterfaceAttributeOutput)) {
	fake.modifyNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeRequestArgsForCall(i int) *ec2.ModifyNetworkInterfaceAttributeInput {
	fake.modifyNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyNetworkInterfaceAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifyNetworkInterfaceAttributeOutput) {
	fake.modifyNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeRequestStub = nil
	fake.modifyNetworkInterfaceAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyNetworkInterfaceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyNetworkInterfaceAttributeOutput) {
	fake.modifyNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeRequestStub = nil
	if fake.modifyNetworkInterfaceAttributeRequestReturnsOnCall == nil {
		fake.modifyNetworkInterfaceAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyNetworkInterfaceAttributeOutput
		})
	}
	fake.modifyNetworkInterfaceAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyNetworkInterfaceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifyNetworkInterfaceAttributeInput, arg3 ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	fake.modifyNetworkInterfaceAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyNetworkInterfaceAttributeWithContextReturnsOnCall[len(fake.modifyNetworkInterfaceAttributeWithContextArgsForCall)]
	fake.modifyNetworkInterfaceAttributeWithContextArgsForCall = append(fake.modifyNetworkInterfaceAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyNetworkInterfaceAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyNetworkInterfaceAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyNetworkInterfaceAttributeWithContextMutex.Unlock()
	if fake.ModifyNetworkInterfaceAttributeWithContextStub != nil {
		return fake.ModifyNetworkInterfaceAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyNetworkInterfaceAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeWithContextCallCount() int {
	fake.modifyNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeWithContextMutex.RUnlock()
	return len(fake.modifyNetworkInterfaceAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifyNetworkInterfaceAttributeInput, ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)) {
	fake.modifyNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyNetworkInterfaceAttributeInput, []request.Option) {
	fake.modifyNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyNetworkInterfaceAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeWithContextReturns(result1 *ec2.ModifyNetworkInterfaceAttributeOutput, result2 error) {
	fake.modifyNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeWithContextStub = nil
	fake.modifyNetworkInterfaceAttributeWithContextReturns = struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyNetworkInterfaceAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifyNetworkInterfaceAttributeOutput, result2 error) {
	fake.modifyNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.modifyNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.ModifyNetworkInterfaceAttributeWithContextStub = nil
	if fake.modifyNetworkInterfaceAttributeWithContextReturnsOnCall == nil {
		fake.modifyNetworkInterfaceAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyNetworkInterfaceAttributeOutput
			result2 error
		})
	}
	fake.modifyNetworkInterfaceAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyReservedInstances(arg1 *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	fake.modifyReservedInstancesMutex.Lock()
	ret, specificReturn := fake.modifyReservedInstancesReturnsOnCall[len(fake.modifyReservedInstancesArgsForCall)]
	fake.modifyReservedInstancesArgsForCall = append(fake.modifyReservedInstancesArgsForCall, struct {
		arg1 *ec2.ModifyReservedInstancesInput
	}{arg1})
	fake.recordInvocation("ModifyReservedInstances", []interface{}{arg1})
	fake.modifyReservedInstancesMutex.Unlock()
	if fake.ModifyReservedInstancesStub != nil {
		return fake.ModifyReservedInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyReservedInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyReservedInstancesCallCount() int {
	fake.modifyReservedInstancesMutex.RLock()
	defer fake.modifyReservedInstancesMutex.RUnlock()
	return len(fake.modifyReservedInstancesArgsForCall)
}

func (fake *FakeEC2API) ModifyReservedInstancesCalls(stub func(*ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error)) {
	fake.modifyReservedInstancesMutex.Lock()
	defer fake.modifyReservedInstancesMutex.Unlock()
	fake.ModifyReservedInstancesStub = stub
}

func (fake *FakeEC2API) ModifyReservedInstancesArgsForCall(i int) *ec2.ModifyReservedInstancesInput {
	fake.modifyReservedInstancesMutex.RLock()
	defer fake.modifyReservedInstancesMutex.RUnlock()
	argsForCall := fake.modifyReservedInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyReservedInstancesReturns(result1 *ec2.ModifyReservedInstancesOutput, result2 error) {
	fake.modifyReservedInstancesMutex.Lock()
	defer fake.modifyReservedInstancesMutex.Unlock()
	fake.ModifyReservedInstancesStub = nil
	fake.modifyReservedInstancesReturns = struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyReservedInstancesReturnsOnCall(i int, result1 *ec2.ModifyReservedInstancesOutput, result2 error) {
	fake.modifyReservedInstancesMutex.Lock()
	defer fake.modifyReservedInstancesMutex.Unlock()
	fake.ModifyReservedInstancesStub = nil
	if fake.modifyReservedInstancesReturnsOnCall == nil {
		fake.modifyReservedInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyReservedInstancesOutput
			result2 error
		})
	}
	fake.modifyReservedInstancesReturnsOnCall[i] = struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyReservedInstancesRequest(arg1 *ec2.ModifyReservedInstancesInput) (*request.Request, *ec2.ModifyReservedInstancesOutput) {
	fake.modifyReservedInstancesRequestMutex.Lock()
	ret, specificReturn := fake.modifyReservedInstancesRequestReturnsOnCall[len(fake.modifyReservedInstancesRequestArgsForCall)]
	fake.modifyReservedInstancesRequestArgsForCall = append(fake.modifyReservedInstancesRequestArgsForCall, struct {
		arg1 *ec2.ModifyReservedInstancesInput
	}{arg1})
	fake.recordInvocation("ModifyReservedInstancesRequest", []interface{}{arg1})
	fake.modifyReservedInstancesRequestMutex.Unlock()
	if fake.ModifyReservedInstancesRequestStub != nil {
		return fake.ModifyReservedInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyReservedInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyReservedInstancesRequestCallCount() int {
	fake.modifyReservedInstancesRequestMutex.RLock()
	defer fake.modifyReservedInstancesRequestMutex.RUnlock()
	return len(fake.modifyReservedInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyReservedInstancesRequestCalls(stub func(*ec2.ModifyReservedInstancesInput) (*request.Request, *ec2.ModifyReservedInstancesOutput)) {
	fake.modifyReservedInstancesRequestMutex.Lock()
	defer fake.modifyReservedInstancesRequestMutex.Unlock()
	fake.ModifyReservedInstancesRequestStub = stub
}

func (fake *FakeEC2API) ModifyReservedInstancesRequestArgsForCall(i int) *ec2.ModifyReservedInstancesInput {
	fake.modifyReservedInstancesRequestMutex.RLock()
	defer fake.modifyReservedInstancesRequestMutex.RUnlock()
	argsForCall := fake.modifyReservedInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyReservedInstancesRequestReturns(result1 *request.Request, result2 *ec2.ModifyReservedInstancesOutput) {
	fake.modifyReservedInstancesRequestMutex.Lock()
	defer fake.modifyReservedInstancesRequestMutex.Unlock()
	fake.ModifyReservedInstancesRequestStub = nil
	fake.modifyReservedInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyReservedInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyReservedInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyReservedInstancesOutput) {
	fake.modifyReservedInstancesRequestMutex.Lock()
	defer fake.modifyReservedInstancesRequestMutex.Unlock()
	fake.ModifyReservedInstancesRequestStub = nil
	if fake.modifyReservedInstancesRequestReturnsOnCall == nil {
		fake.modifyReservedInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyReservedInstancesOutput
		})
	}
	fake.modifyReservedInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyReservedInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyReservedInstancesWithContext(arg1 aws.Context, arg2 *ec2.ModifyReservedInstancesInput, arg3 ...request.Option) (*ec2.ModifyReservedInstancesOutput, error) {
	fake.modifyReservedInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.modifyReservedInstancesWithContextReturnsOnCall[len(fake.modifyReservedInstancesWithContextArgsForCall)]
	fake.modifyReservedInstancesWithContextArgsForCall = append(fake.modifyReservedInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyReservedInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyReservedInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyReservedInstancesWithContextMutex.Unlock()
	if fake.ModifyReservedInstancesWithContextStub != nil {
		return fake.ModifyReservedInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyReservedInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyReservedInstancesWithContextCallCount() int {
	fake.modifyReservedInstancesWithContextMutex.RLock()
	defer fake.modifyReservedInstancesWithContextMutex.RUnlock()
	return len(fake.modifyReservedInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyReservedInstancesWithContextCalls(stub func(aws.Context, *ec2.ModifyReservedInstancesInput, ...request.Option) (*ec2.ModifyReservedInstancesOutput, error)) {
	fake.modifyReservedInstancesWithContextMutex.Lock()
	defer fake.modifyReservedInstancesWithContextMutex.Unlock()
	fake.ModifyReservedInstancesWithContextStub = stub
}

func (fake *FakeEC2API) ModifyReservedInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyReservedInstancesInput, []request.Option) {
	fake.modifyReservedInstancesWithContextMutex.RLock()
	defer fake.modifyReservedInstancesWithContextMutex.RUnlock()
	argsForCall := fake.modifyReservedInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyReservedInstancesWithContextReturns(result1 *ec2.ModifyReservedInstancesOutput, result2 error) {
	fake.modifyReservedInstancesWithContextMutex.Lock()
	defer fake.modifyReservedInstancesWithContextMutex.Unlock()
	fake.ModifyReservedInstancesWithContextStub = nil
	fake.modifyReservedInstancesWithContextReturns = struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyReservedInstancesWithContextReturnsOnCall(i int, result1 *ec2.ModifyReservedInstancesOutput, result2 error) {
	fake.modifyReservedInstancesWithContextMutex.Lock()
	defer fake.modifyReservedInstancesWithContextMutex.Unlock()
	fake.ModifyReservedInstancesWithContextStub = nil
	if fake.modifyReservedInstancesWithContextReturnsOnCall == nil {
		fake.modifyReservedInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyReservedInstancesOutput
			result2 error
		})
	}
	fake.modifyReservedInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyReservedInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySnapshotAttribute(arg1 *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	fake.modifySnapshotAttributeMutex.Lock()
	ret, specificReturn := fake.modifySnapshotAttributeReturnsOnCall[len(fake.modifySnapshotAttributeArgsForCall)]
	fake.modifySnapshotAttributeArgsForCall = append(fake.modifySnapshotAttributeArgsForCall, struct {
		arg1 *ec2.ModifySnapshotAttributeInput
	}{arg1})
	fake.recordInvocation("ModifySnapshotAttribute", []interface{}{arg1})
	fake.modifySnapshotAttributeMutex.Unlock()
	if fake.ModifySnapshotAttributeStub != nil {
		return fake.ModifySnapshotAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySnapshotAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySnapshotAttributeCallCount() int {
	fake.modifySnapshotAttributeMutex.RLock()
	defer fake.modifySnapshotAttributeMutex.RUnlock()
	return len(fake.modifySnapshotAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifySnapshotAttributeCalls(stub func(*ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error)) {
	fake.modifySnapshotAttributeMutex.Lock()
	defer fake.modifySnapshotAttributeMutex.Unlock()
	fake.ModifySnapshotAttributeStub = stub
}

func (fake *FakeEC2API) ModifySnapshotAttributeArgsForCall(i int) *ec2.ModifySnapshotAttributeInput {
	fake.modifySnapshotAttributeMutex.RLock()
	defer fake.modifySnapshotAttributeMutex.RUnlock()
	argsForCall := fake.modifySnapshotAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifySnapshotAttributeReturns(result1 *ec2.ModifySnapshotAttributeOutput, result2 error) {
	fake.modifySnapshotAttributeMutex.Lock()
	defer fake.modifySnapshotAttributeMutex.Unlock()
	fake.ModifySnapshotAttributeStub = nil
	fake.modifySnapshotAttributeReturns = struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySnapshotAttributeReturnsOnCall(i int, result1 *ec2.ModifySnapshotAttributeOutput, result2 error) {
	fake.modifySnapshotAttributeMutex.Lock()
	defer fake.modifySnapshotAttributeMutex.Unlock()
	fake.ModifySnapshotAttributeStub = nil
	if fake.modifySnapshotAttributeReturnsOnCall == nil {
		fake.modifySnapshotAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifySnapshotAttributeOutput
			result2 error
		})
	}
	fake.modifySnapshotAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySnapshotAttributeRequest(arg1 *ec2.ModifySnapshotAttributeInput) (*request.Request, *ec2.ModifySnapshotAttributeOutput) {
	fake.modifySnapshotAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifySnapshotAttributeRequestReturnsOnCall[len(fake.modifySnapshotAttributeRequestArgsForCall)]
	fake.modifySnapshotAttributeRequestArgsForCall = append(fake.modifySnapshotAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifySnapshotAttributeInput
	}{arg1})
	fake.recordInvocation("ModifySnapshotAttributeRequest", []interface{}{arg1})
	fake.modifySnapshotAttributeRequestMutex.Unlock()
	if fake.ModifySnapshotAttributeRequestStub != nil {
		return fake.ModifySnapshotAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySnapshotAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySnapshotAttributeRequestCallCount() int {
	fake.modifySnapshotAttributeRequestMutex.RLock()
	defer fake.modifySnapshotAttributeRequestMutex.RUnlock()
	return len(fake.modifySnapshotAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifySnapshotAttributeRequestCalls(stub func(*ec2.ModifySnapshotAttributeInput) (*request.Request, *ec2.ModifySnapshotAttributeOutput)) {
	fake.modifySnapshotAttributeRequestMutex.Lock()
	defer fake.modifySnapshotAttributeRequestMutex.Unlock()
	fake.ModifySnapshotAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifySnapshotAttributeRequestArgsForCall(i int) *ec2.ModifySnapshotAttributeInput {
	fake.modifySnapshotAttributeRequestMutex.RLock()
	defer fake.modifySnapshotAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifySnapshotAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifySnapshotAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifySnapshotAttributeOutput) {
	fake.modifySnapshotAttributeRequestMutex.Lock()
	defer fake.modifySnapshotAttributeRequestMutex.Unlock()
	fake.ModifySnapshotAttributeRequestStub = nil
	fake.modifySnapshotAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifySnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySnapshotAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifySnapshotAttributeOutput) {
	fake.modifySnapshotAttributeRequestMutex.Lock()
	defer fake.modifySnapshotAttributeRequestMutex.Unlock()
	fake.ModifySnapshotAttributeRequestStub = nil
	if fake.modifySnapshotAttributeRequestReturnsOnCall == nil {
		fake.modifySnapshotAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifySnapshotAttributeOutput
		})
	}
	fake.modifySnapshotAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifySnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySnapshotAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifySnapshotAttributeInput, arg3 ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error) {
	fake.modifySnapshotAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifySnapshotAttributeWithContextReturnsOnCall[len(fake.modifySnapshotAttributeWithContextArgsForCall)]
	fake.modifySnapshotAttributeWithContextArgsForCall = append(fake.modifySnapshotAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifySnapshotAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifySnapshotAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifySnapshotAttributeWithContextMutex.Unlock()
	if fake.ModifySnapshotAttributeWithContextStub != nil {
		return fake.ModifySnapshotAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySnapshotAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySnapshotAttributeWithContextCallCount() int {
	fake.modifySnapshotAttributeWithContextMutex.RLock()
	defer fake.modifySnapshotAttributeWithContextMutex.RUnlock()
	return len(fake.modifySnapshotAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifySnapshotAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifySnapshotAttributeInput, ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error)) {
	fake.modifySnapshotAttributeWithContextMutex.Lock()
	defer fake.modifySnapshotAttributeWithContextMutex.Unlock()
	fake.ModifySnapshotAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifySnapshotAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifySnapshotAttributeInput, []request.Option) {
	fake.modifySnapshotAttributeWithContextMutex.RLock()
	defer fake.modifySnapshotAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifySnapshotAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifySnapshotAttributeWithContextReturns(result1 *ec2.ModifySnapshotAttributeOutput, result2 error) {
	fake.modifySnapshotAttributeWithContextMutex.Lock()
	defer fake.modifySnapshotAttributeWithContextMutex.Unlock()
	fake.ModifySnapshotAttributeWithContextStub = nil
	fake.modifySnapshotAttributeWithContextReturns = struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySnapshotAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifySnapshotAttributeOutput, result2 error) {
	fake.modifySnapshotAttributeWithContextMutex.Lock()
	defer fake.modifySnapshotAttributeWithContextMutex.Unlock()
	fake.ModifySnapshotAttributeWithContextStub = nil
	if fake.modifySnapshotAttributeWithContextReturnsOnCall == nil {
		fake.modifySnapshotAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifySnapshotAttributeOutput
			result2 error
		})
	}
	fake.modifySnapshotAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifySnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySpotFleetRequest(arg1 *ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error) {
	fake.modifySpotFleetRequestMutex.Lock()
	ret, specificReturn := fake.modifySpotFleetRequestReturnsOnCall[len(fake.modifySpotFleetRequestArgsForCall)]
	fake.modifySpotFleetRequestArgsForCall = append(fake.modifySpotFleetRequestArgsForCall, struct {
		arg1 *ec2.ModifySpotFleetRequestInput
	}{arg1})
	fake.recordInvocation("ModifySpotFleetRequest", []interface{}{arg1})
	fake.modifySpotFleetRequestMutex.Unlock()
	if fake.ModifySpotFleetRequestStub != nil {
		return fake.ModifySpotFleetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySpotFleetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySpotFleetRequestCallCount() int {
	fake.modifySpotFleetRequestMutex.RLock()
	defer fake.modifySpotFleetRequestMutex.RUnlock()
	return len(fake.modifySpotFleetRequestArgsForCall)
}

func (fake *FakeEC2API) ModifySpotFleetRequestCalls(stub func(*ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error)) {
	fake.modifySpotFleetRequestMutex.Lock()
	defer fake.modifySpotFleetRequestMutex.Unlock()
	fake.ModifySpotFleetRequestStub = stub
}

func (fake *FakeEC2API) ModifySpotFleetRequestArgsForCall(i int) *ec2.ModifySpotFleetRequestInput {
	fake.modifySpotFleetRequestMutex.RLock()
	defer fake.modifySpotFleetRequestMutex.RUnlock()
	argsForCall := fake.modifySpotFleetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifySpotFleetRequestReturns(result1 *ec2.ModifySpotFleetRequestOutput, result2 error) {
	fake.modifySpotFleetRequestMutex.Lock()
	defer fake.modifySpotFleetRequestMutex.Unlock()
	fake.ModifySpotFleetRequestStub = nil
	fake.modifySpotFleetRequestReturns = struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySpotFleetRequestReturnsOnCall(i int, result1 *ec2.ModifySpotFleetRequestOutput, result2 error) {
	fake.modifySpotFleetRequestMutex.Lock()
	defer fake.modifySpotFleetRequestMutex.Unlock()
	fake.ModifySpotFleetRequestStub = nil
	if fake.modifySpotFleetRequestReturnsOnCall == nil {
		fake.modifySpotFleetRequestReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifySpotFleetRequestOutput
			result2 error
		})
	}
	fake.modifySpotFleetRequestReturnsOnCall[i] = struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySpotFleetRequestRequest(arg1 *ec2.ModifySpotFleetRequestInput) (*request.Request, *ec2.ModifySpotFleetRequestOutput) {
	fake.modifySpotFleetRequestRequestMutex.Lock()
	ret, specificReturn := fake.modifySpotFleetRequestRequestReturnsOnCall[len(fake.modifySpotFleetRequestRequestArgsForCall)]
	fake.modifySpotFleetRequestRequestArgsForCall = append(fake.modifySpotFleetRequestRequestArgsForCall, struct {
		arg1 *ec2.ModifySpotFleetRequestInput
	}{arg1})
	fake.recordInvocation("ModifySpotFleetRequestRequest", []interface{}{arg1})
	fake.modifySpotFleetRequestRequestMutex.Unlock()
	if fake.ModifySpotFleetRequestRequestStub != nil {
		return fake.ModifySpotFleetRequestRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySpotFleetRequestRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySpotFleetRequestRequestCallCount() int {
	fake.modifySpotFleetRequestRequestMutex.RLock()
	defer fake.modifySpotFleetRequestRequestMutex.RUnlock()
	return len(fake.modifySpotFleetRequestRequestArgsForCall)
}

func (fake *FakeEC2API) ModifySpotFleetRequestRequestCalls(stub func(*ec2.ModifySpotFleetRequestInput) (*request.Request, *ec2.ModifySpotFleetRequestOutput)) {
	fake.modifySpotFleetRequestRequestMutex.Lock()
	defer fake.modifySpotFleetRequestRequestMutex.Unlock()
	fake.ModifySpotFleetRequestRequestStub = stub
}

func (fake *FakeEC2API) ModifySpotFleetRequestRequestArgsForCall(i int) *ec2.ModifySpotFleetRequestInput {
	fake.modifySpotFleetRequestRequestMutex.RLock()
	defer fake.modifySpotFleetRequestRequestMutex.RUnlock()
	argsForCall := fake.modifySpotFleetRequestRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifySpotFleetRequestRequestReturns(result1 *request.Request, result2 *ec2.ModifySpotFleetRequestOutput) {
	fake.modifySpotFleetRequestRequestMutex.Lock()
	defer fake.modifySpotFleetRequestRequestMutex.Unlock()
	fake.ModifySpotFleetRequestRequestStub = nil
	fake.modifySpotFleetRequestRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifySpotFleetRequestOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySpotFleetRequestRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifySpotFleetRequestOutput) {
	fake.modifySpotFleetRequestRequestMutex.Lock()
	defer fake.modifySpotFleetRequestRequestMutex.Unlock()
	fake.ModifySpotFleetRequestRequestStub = nil
	if fake.modifySpotFleetRequestRequestReturnsOnCall == nil {
		fake.modifySpotFleetRequestRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifySpotFleetRequestOutput
		})
	}
	fake.modifySpotFleetRequestRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifySpotFleetRequestOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySpotFleetRequestWithContext(arg1 aws.Context, arg2 *ec2.ModifySpotFleetRequestInput, arg3 ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error) {
	fake.modifySpotFleetRequestWithContextMutex.Lock()
	ret, specificReturn := fake.modifySpotFleetRequestWithContextReturnsOnCall[len(fake.modifySpotFleetRequestWithContextArgsForCall)]
	fake.modifySpotFleetRequestWithContextArgsForCall = append(fake.modifySpotFleetRequestWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifySpotFleetRequestInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifySpotFleetRequestWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifySpotFleetRequestWithContextMutex.Unlock()
	if fake.ModifySpotFleetRequestWithContextStub != nil {
		return fake.ModifySpotFleetRequestWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySpotFleetRequestWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySpotFleetRequestWithContextCallCount() int {
	fake.modifySpotFleetRequestWithContextMutex.RLock()
	defer fake.modifySpotFleetRequestWithContextMutex.RUnlock()
	return len(fake.modifySpotFleetRequestWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifySpotFleetRequestWithContextCalls(stub func(aws.Context, *ec2.ModifySpotFleetRequestInput, ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error)) {
	fake.modifySpotFleetRequestWithContextMutex.Lock()
	defer fake.modifySpotFleetRequestWithContextMutex.Unlock()
	fake.ModifySpotFleetRequestWithContextStub = stub
}

func (fake *FakeEC2API) ModifySpotFleetRequestWithContextArgsForCall(i int) (aws.Context, *ec2.ModifySpotFleetRequestInput, []request.Option) {
	fake.modifySpotFleetRequestWithContextMutex.RLock()
	defer fake.modifySpotFleetRequestWithContextMutex.RUnlock()
	argsForCall := fake.modifySpotFleetRequestWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifySpotFleetRequestWithContextReturns(result1 *ec2.ModifySpotFleetRequestOutput, result2 error) {
	fake.modifySpotFleetRequestWithContextMutex.Lock()
	defer fake.modifySpotFleetRequestWithContextMutex.Unlock()
	fake.ModifySpotFleetRequestWithContextStub = nil
	fake.modifySpotFleetRequestWithContextReturns = struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySpotFleetRequestWithContextReturnsOnCall(i int, result1 *ec2.ModifySpotFleetRequestOutput, result2 error) {
	fake.modifySpotFleetRequestWithContextMutex.Lock()
	defer fake.modifySpotFleetRequestWithContextMutex.Unlock()
	fake.ModifySpotFleetRequestWithContextStub = nil
	if fake.modifySpotFleetRequestWithContextReturnsOnCall == nil {
		fake.modifySpotFleetRequestWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifySpotFleetRequestOutput
			result2 error
		})
	}
	fake.modifySpotFleetRequestWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifySpotFleetRequestOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySubnetAttribute(arg1 *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	fake.modifySubnetAttributeMutex.Lock()
	ret, specificReturn := fake.modifySubnetAttributeReturnsOnCall[len(fake.modifySubnetAttributeArgsForCall)]
	fake.modifySubnetAttributeArgsForCall = append(fake.modifySubnetAttributeArgsForCall, struct {
		arg1 *ec2.ModifySubnetAttributeInput
	}{arg1})
	fake.recordInvocation("ModifySubnetAttribute", []interface{}{arg1})
	fake.modifySubnetAttributeMutex.Unlock()
	if fake.ModifySubnetAttributeStub != nil {
		return fake.ModifySubnetAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySubnetAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySubnetAttributeCallCount() int {
	fake.modifySubnetAttributeMutex.RLock()
	defer fake.modifySubnetAttributeMutex.RUnlock()
	return len(fake.modifySubnetAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifySubnetAttributeCalls(stub func(*ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error)) {
	fake.modifySubnetAttributeMutex.Lock()
	defer fake.modifySubnetAttributeMutex.Unlock()
	fake.ModifySubnetAttributeStub = stub
}

func (fake *FakeEC2API) ModifySubnetAttributeArgsForCall(i int) *ec2.ModifySubnetAttributeInput {
	fake.modifySubnetAttributeMutex.RLock()
	defer fake.modifySubnetAttributeMutex.RUnlock()
	argsForCall := fake.modifySubnetAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifySubnetAttributeReturns(result1 *ec2.ModifySubnetAttributeOutput, result2 error) {
	fake.modifySubnetAttributeMutex.Lock()
	defer fake.modifySubnetAttributeMutex.Unlock()
	fake.ModifySubnetAttributeStub = nil
	fake.modifySubnetAttributeReturns = struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySubnetAttributeReturnsOnCall(i int, result1 *ec2.ModifySubnetAttributeOutput, result2 error) {
	fake.modifySubnetAttributeMutex.Lock()
	defer fake.modifySubnetAttributeMutex.Unlock()
	fake.ModifySubnetAttributeStub = nil
	if fake.modifySubnetAttributeReturnsOnCall == nil {
		fake.modifySubnetAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifySubnetAttributeOutput
			result2 error
		})
	}
	fake.modifySubnetAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySubnetAttributeRequest(arg1 *ec2.ModifySubnetAttributeInput) (*request.Request, *ec2.ModifySubnetAttributeOutput) {
	fake.modifySubnetAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifySubnetAttributeRequestReturnsOnCall[len(fake.modifySubnetAttributeRequestArgsForCall)]
	fake.modifySubnetAttributeRequestArgsForCall = append(fake.modifySubnetAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifySubnetAttributeInput
	}{arg1})
	fake.recordInvocation("ModifySubnetAttributeRequest", []interface{}{arg1})
	fake.modifySubnetAttributeRequestMutex.Unlock()
	if fake.ModifySubnetAttributeRequestStub != nil {
		return fake.ModifySubnetAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySubnetAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySubnetAttributeRequestCallCount() int {
	fake.modifySubnetAttributeRequestMutex.RLock()
	defer fake.modifySubnetAttributeRequestMutex.RUnlock()
	return len(fake.modifySubnetAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifySubnetAttributeRequestCalls(stub func(*ec2.ModifySubnetAttributeInput) (*request.Request, *ec2.ModifySubnetAttributeOutput)) {
	fake.modifySubnetAttributeRequestMutex.Lock()
	defer fake.modifySubnetAttributeRequestMutex.Unlock()
	fake.ModifySubnetAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifySubnetAttributeRequestArgsForCall(i int) *ec2.ModifySubnetAttributeInput {
	fake.modifySubnetAttributeRequestMutex.RLock()
	defer fake.modifySubnetAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifySubnetAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifySubnetAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifySubnetAttributeOutput) {
	fake.modifySubnetAttributeRequestMutex.Lock()
	defer fake.modifySubnetAttributeRequestMutex.Unlock()
	fake.ModifySubnetAttributeRequestStub = nil
	fake.modifySubnetAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifySubnetAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySubnetAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifySubnetAttributeOutput) {
	fake.modifySubnetAttributeRequestMutex.Lock()
	defer fake.modifySubnetAttributeRequestMutex.Unlock()
	fake.ModifySubnetAttributeRequestStub = nil
	if fake.modifySubnetAttributeRequestReturnsOnCall == nil {
		fake.modifySubnetAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifySubnetAttributeOutput
		})
	}
	fake.modifySubnetAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifySubnetAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySubnetAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifySubnetAttributeInput, arg3 ...request.Option) (*ec2.ModifySubnetAttributeOutput, error) {
	fake.modifySubnetAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifySubnetAttributeWithContextReturnsOnCall[len(fake.modifySubnetAttributeWithContextArgsForCall)]
	fake.modifySubnetAttributeWithContextArgsForCall = append(fake.modifySubnetAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifySubnetAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifySubnetAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifySubnetAttributeWithContextMutex.Unlock()
	if fake.ModifySubnetAttributeWithContextStub != nil {
		return fake.ModifySubnetAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifySubnetAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifySubnetAttributeWithContextCallCount() int {
	fake.modifySubnetAttributeWithContextMutex.RLock()
	defer fake.modifySubnetAttributeWithContextMutex.RUnlock()
	return len(fake.modifySubnetAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifySubnetAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifySubnetAttributeInput, ...request.Option) (*ec2.ModifySubnetAttributeOutput, error)) {
	fake.modifySubnetAttributeWithContextMutex.Lock()
	defer fake.modifySubnetAttributeWithContextMutex.Unlock()
	fake.ModifySubnetAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifySubnetAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifySubnetAttributeInput, []request.Option) {
	fake.modifySubnetAttributeWithContextMutex.RLock()
	defer fake.modifySubnetAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifySubnetAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifySubnetAttributeWithContextReturns(result1 *ec2.ModifySubnetAttributeOutput, result2 error) {
	fake.modifySubnetAttributeWithContextMutex.Lock()
	defer fake.modifySubnetAttributeWithContextMutex.Unlock()
	fake.ModifySubnetAttributeWithContextStub = nil
	fake.modifySubnetAttributeWithContextReturns = struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifySubnetAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifySubnetAttributeOutput, result2 error) {
	fake.modifySubnetAttributeWithContextMutex.Lock()
	defer fake.modifySubnetAttributeWithContextMutex.Unlock()
	fake.ModifySubnetAttributeWithContextStub = nil
	if fake.modifySubnetAttributeWithContextReturnsOnCall == nil {
		fake.modifySubnetAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifySubnetAttributeOutput
			result2 error
		})
	}
	fake.modifySubnetAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifySubnetAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachment(arg1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	fake.modifyTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.modifyTransitGatewayVpcAttachmentReturnsOnCall[len(fake.modifyTransitGatewayVpcAttachmentArgsForCall)]
	fake.modifyTransitGatewayVpcAttachmentArgsForCall = append(fake.modifyTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("ModifyTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.modifyTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.ModifyTransitGatewayVpcAttachmentStub != nil {
		return fake.ModifyTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentCallCount() int {
	fake.modifyTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.modifyTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentCalls(stub func(*ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)) {
	fake.modifyTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.ModifyTransitGatewayVpcAttachmentInput {
	fake.modifyTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.modifyTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentReturns(result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.modifyTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentStub = nil
	fake.modifyTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.modifyTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentStub = nil
	if fake.modifyTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.modifyTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.modifyTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentRequest(arg1 *ec2.ModifyTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.Lock()
	ret, specificReturn := fake.modifyTransitGatewayVpcAttachmentRequestReturnsOnCall[len(fake.modifyTransitGatewayVpcAttachmentRequestArgsForCall)]
	fake.modifyTransitGatewayVpcAttachmentRequestArgsForCall = append(fake.modifyTransitGatewayVpcAttachmentRequestArgsForCall, struct {
		arg1 *ec2.ModifyTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("ModifyTransitGatewayVpcAttachmentRequest", []interface{}{arg1})
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.Unlock()
	if fake.ModifyTransitGatewayVpcAttachmentRequestStub != nil {
		return fake.ModifyTransitGatewayVpcAttachmentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTransitGatewayVpcAttachmentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentRequestCallCount() int {
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	return len(fake.modifyTransitGatewayVpcAttachmentRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentRequestCalls(stub func(*ec2.ModifyTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.ModifyTransitGatewayVpcAttachmentOutput)) {
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentRequestStub = stub
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentRequestArgsForCall(i int) *ec2.ModifyTransitGatewayVpcAttachmentInput {
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	argsForCall := fake.modifyTransitGatewayVpcAttachmentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentRequestReturns(result1 *request.Request, result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentRequestStub = nil
	fake.modifyTransitGatewayVpcAttachmentRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentRequestStub = nil
	if fake.modifyTransitGatewayVpcAttachmentRequestReturnsOnCall == nil {
		fake.modifyTransitGatewayVpcAttachmentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		})
	}
	fake.modifyTransitGatewayVpcAttachmentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentWithContext(arg1 aws.Context, arg2 *ec2.ModifyTransitGatewayVpcAttachmentInput, arg3 ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Lock()
	ret, specificReturn := fake.modifyTransitGatewayVpcAttachmentWithContextReturnsOnCall[len(fake.modifyTransitGatewayVpcAttachmentWithContextArgsForCall)]
	fake.modifyTransitGatewayVpcAttachmentWithContextArgsForCall = append(fake.modifyTransitGatewayVpcAttachmentWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyTransitGatewayVpcAttachmentWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	if fake.ModifyTransitGatewayVpcAttachmentWithContextStub != nil {
		return fake.ModifyTransitGatewayVpcAttachmentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyTransitGatewayVpcAttachmentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentWithContextCallCount() int {
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	return len(fake.modifyTransitGatewayVpcAttachmentWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentWithContextCalls(stub func(aws.Context, *ec2.ModifyTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)) {
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentWithContextStub = stub
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyTransitGatewayVpcAttachmentInput, []request.Option) {
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	argsForCall := fake.modifyTransitGatewayVpcAttachmentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentWithContextReturns(result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentWithContextStub = nil
	fake.modifyTransitGatewayVpcAttachmentWithContextReturns = struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyTransitGatewayVpcAttachmentWithContextReturnsOnCall(i int, result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.modifyTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.ModifyTransitGatewayVpcAttachmentWithContextStub = nil
	if fake.modifyTransitGatewayVpcAttachmentWithContextReturnsOnCall == nil {
		fake.modifyTransitGatewayVpcAttachmentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.modifyTransitGatewayVpcAttachmentWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolume(arg1 *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
	fake.modifyVolumeMutex.Lock()
	ret, specificReturn := fake.modifyVolumeReturnsOnCall[len(fake.modifyVolumeArgsForCall)]
	fake.modifyVolumeArgsForCall = append(fake.modifyVolumeArgsForCall, struct {
		arg1 *ec2.ModifyVolumeInput
	}{arg1})
	fake.recordInvocation("ModifyVolume", []interface{}{arg1})
	fake.modifyVolumeMutex.Unlock()
	if fake.ModifyVolumeStub != nil {
		return fake.ModifyVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVolumeCallCount() int {
	fake.modifyVolumeMutex.RLock()
	defer fake.modifyVolumeMutex.RUnlock()
	return len(fake.modifyVolumeArgsForCall)
}

func (fake *FakeEC2API) ModifyVolumeCalls(stub func(*ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error)) {
	fake.modifyVolumeMutex.Lock()
	defer fake.modifyVolumeMutex.Unlock()
	fake.ModifyVolumeStub = stub
}

func (fake *FakeEC2API) ModifyVolumeArgsForCall(i int) *ec2.ModifyVolumeInput {
	fake.modifyVolumeMutex.RLock()
	defer fake.modifyVolumeMutex.RUnlock()
	argsForCall := fake.modifyVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVolumeReturns(result1 *ec2.ModifyVolumeOutput, result2 error) {
	fake.modifyVolumeMutex.Lock()
	defer fake.modifyVolumeMutex.Unlock()
	fake.ModifyVolumeStub = nil
	fake.modifyVolumeReturns = struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeReturnsOnCall(i int, result1 *ec2.ModifyVolumeOutput, result2 error) {
	fake.modifyVolumeMutex.Lock()
	defer fake.modifyVolumeMutex.Unlock()
	fake.ModifyVolumeStub = nil
	if fake.modifyVolumeReturnsOnCall == nil {
		fake.modifyVolumeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVolumeOutput
			result2 error
		})
	}
	fake.modifyVolumeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeAttribute(arg1 *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	fake.modifyVolumeAttributeMutex.Lock()
	ret, specificReturn := fake.modifyVolumeAttributeReturnsOnCall[len(fake.modifyVolumeAttributeArgsForCall)]
	fake.modifyVolumeAttributeArgsForCall = append(fake.modifyVolumeAttributeArgsForCall, struct {
		arg1 *ec2.ModifyVolumeAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyVolumeAttribute", []interface{}{arg1})
	fake.modifyVolumeAttributeMutex.Unlock()
	if fake.ModifyVolumeAttributeStub != nil {
		return fake.ModifyVolumeAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVolumeAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVolumeAttributeCallCount() int {
	fake.modifyVolumeAttributeMutex.RLock()
	defer fake.modifyVolumeAttributeMutex.RUnlock()
	return len(fake.modifyVolumeAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifyVolumeAttributeCalls(stub func(*ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error)) {
	fake.modifyVolumeAttributeMutex.Lock()
	defer fake.modifyVolumeAttributeMutex.Unlock()
	fake.ModifyVolumeAttributeStub = stub
}

func (fake *FakeEC2API) ModifyVolumeAttributeArgsForCall(i int) *ec2.ModifyVolumeAttributeInput {
	fake.modifyVolumeAttributeMutex.RLock()
	defer fake.modifyVolumeAttributeMutex.RUnlock()
	argsForCall := fake.modifyVolumeAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVolumeAttributeReturns(result1 *ec2.ModifyVolumeAttributeOutput, result2 error) {
	fake.modifyVolumeAttributeMutex.Lock()
	defer fake.modifyVolumeAttributeMutex.Unlock()
	fake.ModifyVolumeAttributeStub = nil
	fake.modifyVolumeAttributeReturns = struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeAttributeReturnsOnCall(i int, result1 *ec2.ModifyVolumeAttributeOutput, result2 error) {
	fake.modifyVolumeAttributeMutex.Lock()
	defer fake.modifyVolumeAttributeMutex.Unlock()
	fake.ModifyVolumeAttributeStub = nil
	if fake.modifyVolumeAttributeReturnsOnCall == nil {
		fake.modifyVolumeAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVolumeAttributeOutput
			result2 error
		})
	}
	fake.modifyVolumeAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeAttributeRequest(arg1 *ec2.ModifyVolumeAttributeInput) (*request.Request, *ec2.ModifyVolumeAttributeOutput) {
	fake.modifyVolumeAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyVolumeAttributeRequestReturnsOnCall[len(fake.modifyVolumeAttributeRequestArgsForCall)]
	fake.modifyVolumeAttributeRequestArgsForCall = append(fake.modifyVolumeAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifyVolumeAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyVolumeAttributeRequest", []interface{}{arg1})
	fake.modifyVolumeAttributeRequestMutex.Unlock()
	if fake.ModifyVolumeAttributeRequestStub != nil {
		return fake.ModifyVolumeAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVolumeAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVolumeAttributeRequestCallCount() int {
	fake.modifyVolumeAttributeRequestMutex.RLock()
	defer fake.modifyVolumeAttributeRequestMutex.RUnlock()
	return len(fake.modifyVolumeAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVolumeAttributeRequestCalls(stub func(*ec2.ModifyVolumeAttributeInput) (*request.Request, *ec2.ModifyVolumeAttributeOutput)) {
	fake.modifyVolumeAttributeRequestMutex.Lock()
	defer fake.modifyVolumeAttributeRequestMutex.Unlock()
	fake.ModifyVolumeAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifyVolumeAttributeRequestArgsForCall(i int) *ec2.ModifyVolumeAttributeInput {
	fake.modifyVolumeAttributeRequestMutex.RLock()
	defer fake.modifyVolumeAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyVolumeAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVolumeAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifyVolumeAttributeOutput) {
	fake.modifyVolumeAttributeRequestMutex.Lock()
	defer fake.modifyVolumeAttributeRequestMutex.Unlock()
	fake.ModifyVolumeAttributeRequestStub = nil
	fake.modifyVolumeAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVolumeAttributeOutput) {
	fake.modifyVolumeAttributeRequestMutex.Lock()
	defer fake.modifyVolumeAttributeRequestMutex.Unlock()
	fake.ModifyVolumeAttributeRequestStub = nil
	if fake.modifyVolumeAttributeRequestReturnsOnCall == nil {
		fake.modifyVolumeAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVolumeAttributeOutput
		})
	}
	fake.modifyVolumeAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifyVolumeAttributeInput, arg3 ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error) {
	fake.modifyVolumeAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVolumeAttributeWithContextReturnsOnCall[len(fake.modifyVolumeAttributeWithContextArgsForCall)]
	fake.modifyVolumeAttributeWithContextArgsForCall = append(fake.modifyVolumeAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVolumeAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVolumeAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVolumeAttributeWithContextMutex.Unlock()
	if fake.ModifyVolumeAttributeWithContextStub != nil {
		return fake.ModifyVolumeAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVolumeAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVolumeAttributeWithContextCallCount() int {
	fake.modifyVolumeAttributeWithContextMutex.RLock()
	defer fake.modifyVolumeAttributeWithContextMutex.RUnlock()
	return len(fake.modifyVolumeAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVolumeAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifyVolumeAttributeInput, ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error)) {
	fake.modifyVolumeAttributeWithContextMutex.Lock()
	defer fake.modifyVolumeAttributeWithContextMutex.Unlock()
	fake.ModifyVolumeAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVolumeAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVolumeAttributeInput, []request.Option) {
	fake.modifyVolumeAttributeWithContextMutex.RLock()
	defer fake.modifyVolumeAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyVolumeAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVolumeAttributeWithContextReturns(result1 *ec2.ModifyVolumeAttributeOutput, result2 error) {
	fake.modifyVolumeAttributeWithContextMutex.Lock()
	defer fake.modifyVolumeAttributeWithContextMutex.Unlock()
	fake.ModifyVolumeAttributeWithContextStub = nil
	fake.modifyVolumeAttributeWithContextReturns = struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifyVolumeAttributeOutput, result2 error) {
	fake.modifyVolumeAttributeWithContextMutex.Lock()
	defer fake.modifyVolumeAttributeWithContextMutex.Unlock()
	fake.ModifyVolumeAttributeWithContextStub = nil
	if fake.modifyVolumeAttributeWithContextReturnsOnCall == nil {
		fake.modifyVolumeAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVolumeAttributeOutput
			result2 error
		})
	}
	fake.modifyVolumeAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVolumeAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeRequest(arg1 *ec2.ModifyVolumeInput) (*request.Request, *ec2.ModifyVolumeOutput) {
	fake.modifyVolumeRequestMutex.Lock()
	ret, specificReturn := fake.modifyVolumeRequestReturnsOnCall[len(fake.modifyVolumeRequestArgsForCall)]
	fake.modifyVolumeRequestArgsForCall = append(fake.modifyVolumeRequestArgsForCall, struct {
		arg1 *ec2.ModifyVolumeInput
	}{arg1})
	fake.recordInvocation("ModifyVolumeRequest", []interface{}{arg1})
	fake.modifyVolumeRequestMutex.Unlock()
	if fake.ModifyVolumeRequestStub != nil {
		return fake.ModifyVolumeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVolumeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVolumeRequestCallCount() int {
	fake.modifyVolumeRequestMutex.RLock()
	defer fake.modifyVolumeRequestMutex.RUnlock()
	return len(fake.modifyVolumeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVolumeRequestCalls(stub func(*ec2.ModifyVolumeInput) (*request.Request, *ec2.ModifyVolumeOutput)) {
	fake.modifyVolumeRequestMutex.Lock()
	defer fake.modifyVolumeRequestMutex.Unlock()
	fake.ModifyVolumeRequestStub = stub
}

func (fake *FakeEC2API) ModifyVolumeRequestArgsForCall(i int) *ec2.ModifyVolumeInput {
	fake.modifyVolumeRequestMutex.RLock()
	defer fake.modifyVolumeRequestMutex.RUnlock()
	argsForCall := fake.modifyVolumeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVolumeRequestReturns(result1 *request.Request, result2 *ec2.ModifyVolumeOutput) {
	fake.modifyVolumeRequestMutex.Lock()
	defer fake.modifyVolumeRequestMutex.Unlock()
	fake.ModifyVolumeRequestStub = nil
	fake.modifyVolumeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVolumeOutput) {
	fake.modifyVolumeRequestMutex.Lock()
	defer fake.modifyVolumeRequestMutex.Unlock()
	fake.ModifyVolumeRequestStub = nil
	if fake.modifyVolumeRequestReturnsOnCall == nil {
		fake.modifyVolumeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVolumeOutput
		})
	}
	fake.modifyVolumeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVolumeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeWithContext(arg1 aws.Context, arg2 *ec2.ModifyVolumeInput, arg3 ...request.Option) (*ec2.ModifyVolumeOutput, error) {
	fake.modifyVolumeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVolumeWithContextReturnsOnCall[len(fake.modifyVolumeWithContextArgsForCall)]
	fake.modifyVolumeWithContextArgsForCall = append(fake.modifyVolumeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVolumeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVolumeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVolumeWithContextMutex.Unlock()
	if fake.ModifyVolumeWithContextStub != nil {
		return fake.ModifyVolumeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVolumeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVolumeWithContextCallCount() int {
	fake.modifyVolumeWithContextMutex.RLock()
	defer fake.modifyVolumeWithContextMutex.RUnlock()
	return len(fake.modifyVolumeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVolumeWithContextCalls(stub func(aws.Context, *ec2.ModifyVolumeInput, ...request.Option) (*ec2.ModifyVolumeOutput, error)) {
	fake.modifyVolumeWithContextMutex.Lock()
	defer fake.modifyVolumeWithContextMutex.Unlock()
	fake.ModifyVolumeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVolumeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVolumeInput, []request.Option) {
	fake.modifyVolumeWithContextMutex.RLock()
	defer fake.modifyVolumeWithContextMutex.RUnlock()
	argsForCall := fake.modifyVolumeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVolumeWithContextReturns(result1 *ec2.ModifyVolumeOutput, result2 error) {
	fake.modifyVolumeWithContextMutex.Lock()
	defer fake.modifyVolumeWithContextMutex.Unlock()
	fake.ModifyVolumeWithContextStub = nil
	fake.modifyVolumeWithContextReturns = struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVolumeWithContextReturnsOnCall(i int, result1 *ec2.ModifyVolumeOutput, result2 error) {
	fake.modifyVolumeWithContextMutex.Lock()
	defer fake.modifyVolumeWithContextMutex.Unlock()
	fake.ModifyVolumeWithContextStub = nil
	if fake.modifyVolumeWithContextReturnsOnCall == nil {
		fake.modifyVolumeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVolumeOutput
			result2 error
		})
	}
	fake.modifyVolumeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVolumeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcAttribute(arg1 *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
	fake.modifyVpcAttributeMutex.Lock()
	ret, specificReturn := fake.modifyVpcAttributeReturnsOnCall[len(fake.modifyVpcAttributeArgsForCall)]
	fake.modifyVpcAttributeArgsForCall = append(fake.modifyVpcAttributeArgsForCall, struct {
		arg1 *ec2.ModifyVpcAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyVpcAttribute", []interface{}{arg1})
	fake.modifyVpcAttributeMutex.Unlock()
	if fake.ModifyVpcAttributeStub != nil {
		return fake.ModifyVpcAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcAttributeCallCount() int {
	fake.modifyVpcAttributeMutex.RLock()
	defer fake.modifyVpcAttributeMutex.RUnlock()
	return len(fake.modifyVpcAttributeArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcAttributeCalls(stub func(*ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error)) {
	fake.modifyVpcAttributeMutex.Lock()
	defer fake.modifyVpcAttributeMutex.Unlock()
	fake.ModifyVpcAttributeStub = stub
}

func (fake *FakeEC2API) ModifyVpcAttributeArgsForCall(i int) *ec2.ModifyVpcAttributeInput {
	fake.modifyVpcAttributeMutex.RLock()
	defer fake.modifyVpcAttributeMutex.RUnlock()
	argsForCall := fake.modifyVpcAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcAttributeReturns(result1 *ec2.ModifyVpcAttributeOutput, result2 error) {
	fake.modifyVpcAttributeMutex.Lock()
	defer fake.modifyVpcAttributeMutex.Unlock()
	fake.ModifyVpcAttributeStub = nil
	fake.modifyVpcAttributeReturns = struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcAttributeReturnsOnCall(i int, result1 *ec2.ModifyVpcAttributeOutput, result2 error) {
	fake.modifyVpcAttributeMutex.Lock()
	defer fake.modifyVpcAttributeMutex.Unlock()
	fake.ModifyVpcAttributeStub = nil
	if fake.modifyVpcAttributeReturnsOnCall == nil {
		fake.modifyVpcAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcAttributeOutput
			result2 error
		})
	}
	fake.modifyVpcAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcAttributeRequest(arg1 *ec2.ModifyVpcAttributeInput) (*request.Request, *ec2.ModifyVpcAttributeOutput) {
	fake.modifyVpcAttributeRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcAttributeRequestReturnsOnCall[len(fake.modifyVpcAttributeRequestArgsForCall)]
	fake.modifyVpcAttributeRequestArgsForCall = append(fake.modifyVpcAttributeRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcAttributeInput
	}{arg1})
	fake.recordInvocation("ModifyVpcAttributeRequest", []interface{}{arg1})
	fake.modifyVpcAttributeRequestMutex.Unlock()
	if fake.ModifyVpcAttributeRequestStub != nil {
		return fake.ModifyVpcAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcAttributeRequestCallCount() int {
	fake.modifyVpcAttributeRequestMutex.RLock()
	defer fake.modifyVpcAttributeRequestMutex.RUnlock()
	return len(fake.modifyVpcAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcAttributeRequestCalls(stub func(*ec2.ModifyVpcAttributeInput) (*request.Request, *ec2.ModifyVpcAttributeOutput)) {
	fake.modifyVpcAttributeRequestMutex.Lock()
	defer fake.modifyVpcAttributeRequestMutex.Unlock()
	fake.ModifyVpcAttributeRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcAttributeRequestArgsForCall(i int) *ec2.ModifyVpcAttributeInput {
	fake.modifyVpcAttributeRequestMutex.RLock()
	defer fake.modifyVpcAttributeRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcAttributeRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcAttributeOutput) {
	fake.modifyVpcAttributeRequestMutex.Lock()
	defer fake.modifyVpcAttributeRequestMutex.Unlock()
	fake.ModifyVpcAttributeRequestStub = nil
	fake.modifyVpcAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcAttributeOutput) {
	fake.modifyVpcAttributeRequestMutex.Lock()
	defer fake.modifyVpcAttributeRequestMutex.Unlock()
	fake.ModifyVpcAttributeRequestStub = nil
	if fake.modifyVpcAttributeRequestReturnsOnCall == nil {
		fake.modifyVpcAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcAttributeOutput
		})
	}
	fake.modifyVpcAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcAttributeWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcAttributeInput, arg3 ...request.Option) (*ec2.ModifyVpcAttributeOutput, error) {
	fake.modifyVpcAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcAttributeWithContextReturnsOnCall[len(fake.modifyVpcAttributeWithContextArgsForCall)]
	fake.modifyVpcAttributeWithContextArgsForCall = append(fake.modifyVpcAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcAttributeWithContextMutex.Unlock()
	if fake.ModifyVpcAttributeWithContextStub != nil {
		return fake.ModifyVpcAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcAttributeWithContextCallCount() int {
	fake.modifyVpcAttributeWithContextMutex.RLock()
	defer fake.modifyVpcAttributeWithContextMutex.RUnlock()
	return len(fake.modifyVpcAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcAttributeWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcAttributeInput, ...request.Option) (*ec2.ModifyVpcAttributeOutput, error)) {
	fake.modifyVpcAttributeWithContextMutex.Lock()
	defer fake.modifyVpcAttributeWithContextMutex.Unlock()
	fake.ModifyVpcAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcAttributeInput, []request.Option) {
	fake.modifyVpcAttributeWithContextMutex.RLock()
	defer fake.modifyVpcAttributeWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcAttributeWithContextReturns(result1 *ec2.ModifyVpcAttributeOutput, result2 error) {
	fake.modifyVpcAttributeWithContextMutex.Lock()
	defer fake.modifyVpcAttributeWithContextMutex.Unlock()
	fake.ModifyVpcAttributeWithContextStub = nil
	fake.modifyVpcAttributeWithContextReturns = struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcAttributeWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcAttributeOutput, result2 error) {
	fake.modifyVpcAttributeWithContextMutex.Lock()
	defer fake.modifyVpcAttributeWithContextMutex.Unlock()
	fake.ModifyVpcAttributeWithContextStub = nil
	if fake.modifyVpcAttributeWithContextReturnsOnCall == nil {
		fake.modifyVpcAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcAttributeOutput
			result2 error
		})
	}
	fake.modifyVpcAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpoint(arg1 *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
	fake.modifyVpcEndpointMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointReturnsOnCall[len(fake.modifyVpcEndpointArgsForCall)]
	fake.modifyVpcEndpointArgsForCall = append(fake.modifyVpcEndpointArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpoint", []interface{}{arg1})
	fake.modifyVpcEndpointMutex.Unlock()
	if fake.ModifyVpcEndpointStub != nil {
		return fake.ModifyVpcEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointCallCount() int {
	fake.modifyVpcEndpointMutex.RLock()
	defer fake.modifyVpcEndpointMutex.RUnlock()
	return len(fake.modifyVpcEndpointArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointCalls(stub func(*ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error)) {
	fake.modifyVpcEndpointMutex.Lock()
	defer fake.modifyVpcEndpointMutex.Unlock()
	fake.ModifyVpcEndpointStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointArgsForCall(i int) *ec2.ModifyVpcEndpointInput {
	fake.modifyVpcEndpointMutex.RLock()
	defer fake.modifyVpcEndpointMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointReturns(result1 *ec2.ModifyVpcEndpointOutput, result2 error) {
	fake.modifyVpcEndpointMutex.Lock()
	defer fake.modifyVpcEndpointMutex.Unlock()
	fake.ModifyVpcEndpointStub = nil
	fake.modifyVpcEndpointReturns = struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointOutput, result2 error) {
	fake.modifyVpcEndpointMutex.Lock()
	defer fake.modifyVpcEndpointMutex.Unlock()
	fake.ModifyVpcEndpointStub = nil
	if fake.modifyVpcEndpointReturnsOnCall == nil {
		fake.modifyVpcEndpointReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotification(arg1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	fake.modifyVpcEndpointConnectionNotificationMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointConnectionNotificationReturnsOnCall[len(fake.modifyVpcEndpointConnectionNotificationArgsForCall)]
	fake.modifyVpcEndpointConnectionNotificationArgsForCall = append(fake.modifyVpcEndpointConnectionNotificationArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointConnectionNotification", []interface{}{arg1})
	fake.modifyVpcEndpointConnectionNotificationMutex.Unlock()
	if fake.ModifyVpcEndpointConnectionNotificationStub != nil {
		return fake.ModifyVpcEndpointConnectionNotificationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointConnectionNotificationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationCallCount() int {
	fake.modifyVpcEndpointConnectionNotificationMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationMutex.RUnlock()
	return len(fake.modifyVpcEndpointConnectionNotificationArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationCalls(stub func(*ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)) {
	fake.modifyVpcEndpointConnectionNotificationMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationArgsForCall(i int) *ec2.ModifyVpcEndpointConnectionNotificationInput {
	fake.modifyVpcEndpointConnectionNotificationMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointConnectionNotificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationReturns(result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.modifyVpcEndpointConnectionNotificationMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationStub = nil
	fake.modifyVpcEndpointConnectionNotificationReturns = struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.modifyVpcEndpointConnectionNotificationMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationStub = nil
	if fake.modifyVpcEndpointConnectionNotificationReturnsOnCall == nil {
		fake.modifyVpcEndpointConnectionNotificationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointConnectionNotificationReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationRequest(arg1 *ec2.ModifyVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointConnectionNotificationRequestReturnsOnCall[len(fake.modifyVpcEndpointConnectionNotificationRequestArgsForCall)]
	fake.modifyVpcEndpointConnectionNotificationRequestArgsForCall = append(fake.modifyVpcEndpointConnectionNotificationRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointConnectionNotificationInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointConnectionNotificationRequest", []interface{}{arg1})
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.Unlock()
	if fake.ModifyVpcEndpointConnectionNotificationRequestStub != nil {
		return fake.ModifyVpcEndpointConnectionNotificationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointConnectionNotificationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationRequestCallCount() int {
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationRequestMutex.RUnlock()
	return len(fake.modifyVpcEndpointConnectionNotificationRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationRequestCalls(stub func(*ec2.ModifyVpcEndpointConnectionNotificationInput) (*request.Request, *ec2.ModifyVpcEndpointConnectionNotificationOutput)) {
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationRequestMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationRequestArgsForCall(i int) *ec2.ModifyVpcEndpointConnectionNotificationInput {
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointConnectionNotificationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationRequestMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationRequestStub = nil
	fake.modifyVpcEndpointConnectionNotificationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationRequestMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationRequestStub = nil
	if fake.modifyVpcEndpointConnectionNotificationRequestReturnsOnCall == nil {
		fake.modifyVpcEndpointConnectionNotificationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		})
	}
	fake.modifyVpcEndpointConnectionNotificationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcEndpointConnectionNotificationInput, arg3 ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointConnectionNotificationWithContextReturnsOnCall[len(fake.modifyVpcEndpointConnectionNotificationWithContextArgsForCall)]
	fake.modifyVpcEndpointConnectionNotificationWithContextArgsForCall = append(fake.modifyVpcEndpointConnectionNotificationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointConnectionNotificationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcEndpointConnectionNotificationWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	if fake.ModifyVpcEndpointConnectionNotificationWithContextStub != nil {
		return fake.ModifyVpcEndpointConnectionNotificationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointConnectionNotificationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationWithContextCallCount() int {
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationWithContextMutex.RUnlock()
	return len(fake.modifyVpcEndpointConnectionNotificationWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcEndpointConnectionNotificationInput, ...request.Option) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)) {
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcEndpointConnectionNotificationInput, []request.Option) {
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointConnectionNotificationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationWithContextReturns(result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationWithContextStub = nil
	fake.modifyVpcEndpointConnectionNotificationWithContextReturns = struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointConnectionNotificationWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput, result2 error) {
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Lock()
	defer fake.modifyVpcEndpointConnectionNotificationWithContextMutex.Unlock()
	fake.ModifyVpcEndpointConnectionNotificationWithContextStub = nil
	if fake.modifyVpcEndpointConnectionNotificationWithContextReturnsOnCall == nil {
		fake.modifyVpcEndpointConnectionNotificationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointConnectionNotificationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointRequest(arg1 *ec2.ModifyVpcEndpointInput) (*request.Request, *ec2.ModifyVpcEndpointOutput) {
	fake.modifyVpcEndpointRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointRequestReturnsOnCall[len(fake.modifyVpcEndpointRequestArgsForCall)]
	fake.modifyVpcEndpointRequestArgsForCall = append(fake.modifyVpcEndpointRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointRequest", []interface{}{arg1})
	fake.modifyVpcEndpointRequestMutex.Unlock()
	if fake.ModifyVpcEndpointRequestStub != nil {
		return fake.ModifyVpcEndpointRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointRequestCallCount() int {
	fake.modifyVpcEndpointRequestMutex.RLock()
	defer fake.modifyVpcEndpointRequestMutex.RUnlock()
	return len(fake.modifyVpcEndpointRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointRequestCalls(stub func(*ec2.ModifyVpcEndpointInput) (*request.Request, *ec2.ModifyVpcEndpointOutput)) {
	fake.modifyVpcEndpointRequestMutex.Lock()
	defer fake.modifyVpcEndpointRequestMutex.Unlock()
	fake.ModifyVpcEndpointRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointRequestArgsForCall(i int) *ec2.ModifyVpcEndpointInput {
	fake.modifyVpcEndpointRequestMutex.RLock()
	defer fake.modifyVpcEndpointRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcEndpointOutput) {
	fake.modifyVpcEndpointRequestMutex.Lock()
	defer fake.modifyVpcEndpointRequestMutex.Unlock()
	fake.ModifyVpcEndpointRequestStub = nil
	fake.modifyVpcEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcEndpointOutput) {
	fake.modifyVpcEndpointRequestMutex.Lock()
	defer fake.modifyVpcEndpointRequestMutex.Unlock()
	fake.ModifyVpcEndpointRequestStub = nil
	if fake.modifyVpcEndpointRequestReturnsOnCall == nil {
		fake.modifyVpcEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcEndpointOutput
		})
	}
	fake.modifyVpcEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfiguration(arg1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	fake.modifyVpcEndpointServiceConfigurationMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServiceConfigurationReturnsOnCall[len(fake.modifyVpcEndpointServiceConfigurationArgsForCall)]
	fake.modifyVpcEndpointServiceConfigurationArgsForCall = append(fake.modifyVpcEndpointServiceConfigurationArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointServiceConfiguration", []interface{}{arg1})
	fake.modifyVpcEndpointServiceConfigurationMutex.Unlock()
	if fake.ModifyVpcEndpointServiceConfigurationStub != nil {
		return fake.ModifyVpcEndpointServiceConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointServiceConfigurationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationCallCount() int {
	fake.modifyVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationMutex.RUnlock()
	return len(fake.modifyVpcEndpointServiceConfigurationArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationCalls(stub func(*ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)) {
	fake.modifyVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationArgsForCall(i int) *ec2.ModifyVpcEndpointServiceConfigurationInput {
	fake.modifyVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServiceConfigurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationReturns(result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.modifyVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationStub = nil
	fake.modifyVpcEndpointServiceConfigurationReturns = struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.modifyVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationStub = nil
	if fake.modifyVpcEndpointServiceConfigurationReturnsOnCall == nil {
		fake.modifyVpcEndpointServiceConfigurationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointServiceConfigurationReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationRequest(arg1 *ec2.ModifyVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServiceConfigurationRequestReturnsOnCall[len(fake.modifyVpcEndpointServiceConfigurationRequestArgsForCall)]
	fake.modifyVpcEndpointServiceConfigurationRequestArgsForCall = append(fake.modifyVpcEndpointServiceConfigurationRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointServiceConfigurationInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointServiceConfigurationRequest", []interface{}{arg1})
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.Unlock()
	if fake.ModifyVpcEndpointServiceConfigurationRequestStub != nil {
		return fake.ModifyVpcEndpointServiceConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointServiceConfigurationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationRequestCallCount() int {
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationRequestMutex.RUnlock()
	return len(fake.modifyVpcEndpointServiceConfigurationRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationRequestCalls(stub func(*ec2.ModifyVpcEndpointServiceConfigurationInput) (*request.Request, *ec2.ModifyVpcEndpointServiceConfigurationOutput)) {
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationRequestMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationRequestArgsForCall(i int) *ec2.ModifyVpcEndpointServiceConfigurationInput {
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServiceConfigurationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationRequestMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationRequestStub = nil
	fake.modifyVpcEndpointServiceConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationRequestMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationRequestStub = nil
	if fake.modifyVpcEndpointServiceConfigurationRequestReturnsOnCall == nil {
		fake.modifyVpcEndpointServiceConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		})
	}
	fake.modifyVpcEndpointServiceConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcEndpointServiceConfigurationInput, arg3 ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServiceConfigurationWithContextReturnsOnCall[len(fake.modifyVpcEndpointServiceConfigurationWithContextArgsForCall)]
	fake.modifyVpcEndpointServiceConfigurationWithContextArgsForCall = append(fake.modifyVpcEndpointServiceConfigurationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointServiceConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcEndpointServiceConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	if fake.ModifyVpcEndpointServiceConfigurationWithContextStub != nil {
		return fake.ModifyVpcEndpointServiceConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointServiceConfigurationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationWithContextCallCount() int {
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationWithContextMutex.RUnlock()
	return len(fake.modifyVpcEndpointServiceConfigurationWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcEndpointServiceConfigurationInput, ...request.Option) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)) {
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcEndpointServiceConfigurationInput, []request.Option) {
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServiceConfigurationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationWithContextReturns(result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationWithContextStub = nil
	fake.modifyVpcEndpointServiceConfigurationWithContextReturns = struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServiceConfigurationWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Lock()
	defer fake.modifyVpcEndpointServiceConfigurationWithContextMutex.Unlock()
	fake.ModifyVpcEndpointServiceConfigurationWithContextStub = nil
	if fake.modifyVpcEndpointServiceConfigurationWithContextReturnsOnCall == nil {
		fake.modifyVpcEndpointServiceConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointServiceConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissions(arg1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServicePermissionsReturnsOnCall[len(fake.modifyVpcEndpointServicePermissionsArgsForCall)]
	fake.modifyVpcEndpointServicePermissionsArgsForCall = append(fake.modifyVpcEndpointServicePermissionsArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointServicePermissions", []interface{}{arg1})
	fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	if fake.ModifyVpcEndpointServicePermissionsStub != nil {
		return fake.ModifyVpcEndpointServicePermissionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointServicePermissionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsCallCount() int {
	fake.modifyVpcEndpointServicePermissionsMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.RUnlock()
	return len(fake.modifyVpcEndpointServicePermissionsArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsCalls(stub func(*ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsArgsForCall(i int) *ec2.ModifyVpcEndpointServicePermissionsInput {
	fake.modifyVpcEndpointServicePermissionsMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServicePermissionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsReturns(result1 *ec2.ModifyVpcEndpointServicePermissionsOutput, result2 error) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsStub = nil
	fake.modifyVpcEndpointServicePermissionsReturns = struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointServicePermissionsOutput, result2 error) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsStub = nil
	if fake.modifyVpcEndpointServicePermissionsReturnsOnCall == nil {
		fake.modifyVpcEndpointServicePermissionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointServicePermissionsReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsRequest(arg1 *ec2.ModifyVpcEndpointServicePermissionsInput) (*request.Request, *ec2.ModifyVpcEndpointServicePermissionsOutput) {
	fake.modifyVpcEndpointServicePermissionsRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServicePermissionsRequestReturnsOnCall[len(fake.modifyVpcEndpointServicePermissionsRequestArgsForCall)]
	fake.modifyVpcEndpointServicePermissionsRequestArgsForCall = append(fake.modifyVpcEndpointServicePermissionsRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcEndpointServicePermissionsInput
	}{arg1})
	fake.recordInvocation("ModifyVpcEndpointServicePermissionsRequest", []interface{}{arg1})
	fake.modifyVpcEndpointServicePermissionsRequestMutex.Unlock()
	if fake.ModifyVpcEndpointServicePermissionsRequestStub != nil {
		return fake.ModifyVpcEndpointServicePermissionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointServicePermissionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsRequestCallCount() int {
	fake.modifyVpcEndpointServicePermissionsRequestMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsRequestMutex.RUnlock()
	return len(fake.modifyVpcEndpointServicePermissionsRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsRequestCalls(stub func(*ec2.ModifyVpcEndpointServicePermissionsInput) (*request.Request, *ec2.ModifyVpcEndpointServicePermissionsOutput)) {
	fake.modifyVpcEndpointServicePermissionsRequestMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsRequestMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsRequestArgsForCall(i int) *ec2.ModifyVpcEndpointServicePermissionsInput {
	fake.modifyVpcEndpointServicePermissionsRequestMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServicePermissionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcEndpointServicePermissionsOutput) {
	fake.modifyVpcEndpointServicePermissionsRequestMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsRequestMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsRequestStub = nil
	fake.modifyVpcEndpointServicePermissionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServicePermissionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcEndpointServicePermissionsOutput) {
	fake.modifyVpcEndpointServicePermissionsRequestMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsRequestMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsRequestStub = nil
	if fake.modifyVpcEndpointServicePermissionsRequestReturnsOnCall == nil {
		fake.modifyVpcEndpointServicePermissionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcEndpointServicePermissionsOutput
		})
	}
	fake.modifyVpcEndpointServicePermissionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcEndpointServicePermissionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcEndpointServicePermissionsInput, arg3 ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServicePermissionsWithContextReturnsOnCall[len(fake.modifyVpcEndpointServicePermissionsWithContextArgsForCall)]
	fake.modifyVpcEndpointServicePermissionsWithContextArgsForCall = append(fake.modifyVpcEndpointServicePermissionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointServicePermissionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcEndpointServicePermissionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.Unlock()
	if fake.ModifyVpcEndpointServicePermissionsWithContextStub != nil {
		return fake.ModifyVpcEndpointServicePermissionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointServicePermissionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsWithContextCallCount() int {
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsWithContextMutex.RUnlock()
	return len(fake.modifyVpcEndpointServicePermissionsWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, ...request.Option) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)) {
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsWithContextMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, []request.Option) {
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServicePermissionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsWithContextReturns(result1 *ec2.ModifyVpcEndpointServicePermissionsOutput, result2 error) {
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsWithContextMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsWithContextStub = nil
	fake.modifyVpcEndpointServicePermissionsWithContextReturns = struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointServicePermissionsOutput, result2 error) {
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsWithContextMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsWithContextStub = nil
	if fake.modifyVpcEndpointServicePermissionsWithContextReturnsOnCall == nil {
		fake.modifyVpcEndpointServicePermissionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointServicePermissionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcEndpointInput, arg3 ...request.Option) (*ec2.ModifyVpcEndpointOutput, error) {
	fake.modifyVpcEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointWithContextReturnsOnCall[len(fake.modifyVpcEndpointWithContextArgsForCall)]
	fake.modifyVpcEndpointWithContextArgsForCall = append(fake.modifyVpcEndpointWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcEndpointWithContextMutex.Unlock()
	if fake.ModifyVpcEndpointWithContextStub != nil {
		return fake.ModifyVpcEndpointWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcEndpointWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointWithContextCallCount() int {
	fake.modifyVpcEndpointWithContextMutex.RLock()
	defer fake.modifyVpcEndpointWithContextMutex.RUnlock()
	return len(fake.modifyVpcEndpointWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcEndpointInput, ...request.Option) (*ec2.ModifyVpcEndpointOutput, error)) {
	fake.modifyVpcEndpointWithContextMutex.Lock()
	defer fake.modifyVpcEndpointWithContextMutex.Unlock()
	fake.ModifyVpcEndpointWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcEndpointInput, []request.Option) {
	fake.modifyVpcEndpointWithContextMutex.RLock()
	defer fake.modifyVpcEndpointWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcEndpointWithContextReturns(result1 *ec2.ModifyVpcEndpointOutput, result2 error) {
	fake.modifyVpcEndpointWithContextMutex.Lock()
	defer fake.modifyVpcEndpointWithContextMutex.Unlock()
	fake.ModifyVpcEndpointWithContextStub = nil
	fake.modifyVpcEndpointWithContextReturns = struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointOutput, result2 error) {
	fake.modifyVpcEndpointWithContextMutex.Lock()
	defer fake.modifyVpcEndpointWithContextMutex.Unlock()
	fake.ModifyVpcEndpointWithContextStub = nil
	if fake.modifyVpcEndpointWithContextReturnsOnCall == nil {
		fake.modifyVpcEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptions(arg1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	fake.modifyVpcPeeringConnectionOptionsMutex.Lock()
	ret, specificReturn := fake.modifyVpcPeeringConnectionOptionsReturnsOnCall[len(fake.modifyVpcPeeringConnectionOptionsArgsForCall)]
	fake.modifyVpcPeeringConnectionOptionsArgsForCall = append(fake.modifyVpcPeeringConnectionOptionsArgsForCall, struct {
		arg1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}{arg1})
	fake.recordInvocation("ModifyVpcPeeringConnectionOptions", []interface{}{arg1})
	fake.modifyVpcPeeringConnectionOptionsMutex.Unlock()
	if fake.ModifyVpcPeeringConnectionOptionsStub != nil {
		return fake.ModifyVpcPeeringConnectionOptionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcPeeringConnectionOptionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsCallCount() int {
	fake.modifyVpcPeeringConnectionOptionsMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsMutex.RUnlock()
	return len(fake.modifyVpcPeeringConnectionOptionsArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsCalls(stub func(*ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)) {
	fake.modifyVpcPeeringConnectionOptionsMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsStub = stub
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsArgsForCall(i int) *ec2.ModifyVpcPeeringConnectionOptionsInput {
	fake.modifyVpcPeeringConnectionOptionsMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsMutex.RUnlock()
	argsForCall := fake.modifyVpcPeeringConnectionOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsReturns(result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput, result2 error) {
	fake.modifyVpcPeeringConnectionOptionsMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsStub = nil
	fake.modifyVpcPeeringConnectionOptionsReturns = struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsReturnsOnCall(i int, result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput, result2 error) {
	fake.modifyVpcPeeringConnectionOptionsMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsStub = nil
	if fake.modifyVpcPeeringConnectionOptionsReturnsOnCall == nil {
		fake.modifyVpcPeeringConnectionOptionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
			result2 error
		})
	}
	fake.modifyVpcPeeringConnectionOptionsReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsRequest(arg1 *ec2.ModifyVpcPeeringConnectionOptionsInput) (*request.Request, *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcPeeringConnectionOptionsRequestReturnsOnCall[len(fake.modifyVpcPeeringConnectionOptionsRequestArgsForCall)]
	fake.modifyVpcPeeringConnectionOptionsRequestArgsForCall = append(fake.modifyVpcPeeringConnectionOptionsRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcPeeringConnectionOptionsInput
	}{arg1})
	fake.recordInvocation("ModifyVpcPeeringConnectionOptionsRequest", []interface{}{arg1})
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.Unlock()
	if fake.ModifyVpcPeeringConnectionOptionsRequestStub != nil {
		return fake.ModifyVpcPeeringConnectionOptionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcPeeringConnectionOptionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsRequestCallCount() int {
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsRequestMutex.RUnlock()
	return len(fake.modifyVpcPeeringConnectionOptionsRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsRequestCalls(stub func(*ec2.ModifyVpcPeeringConnectionOptionsInput) (*request.Request, *ec2.ModifyVpcPeeringConnectionOptionsOutput)) {
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsRequestMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsRequestArgsForCall(i int) *ec2.ModifyVpcPeeringConnectionOptionsInput {
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcPeeringConnectionOptionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsRequestMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsRequestStub = nil
	fake.modifyVpcPeeringConnectionOptionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsRequestMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsRequestStub = nil
	if fake.modifyVpcPeeringConnectionOptionsRequestReturnsOnCall == nil {
		fake.modifyVpcPeeringConnectionOptionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		})
	}
	fake.modifyVpcPeeringConnectionOptionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcPeeringConnectionOptionsInput, arg3 ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcPeeringConnectionOptionsWithContextReturnsOnCall[len(fake.modifyVpcPeeringConnectionOptionsWithContextArgsForCall)]
	fake.modifyVpcPeeringConnectionOptionsWithContextArgsForCall = append(fake.modifyVpcPeeringConnectionOptionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcPeeringConnectionOptionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcPeeringConnectionOptionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Unlock()
	if fake.ModifyVpcPeeringConnectionOptionsWithContextStub != nil {
		return fake.ModifyVpcPeeringConnectionOptionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcPeeringConnectionOptionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsWithContextCallCount() int {
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsWithContextMutex.RUnlock()
	return len(fake.modifyVpcPeeringConnectionOptionsWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcPeeringConnectionOptionsInput, ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)) {
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcPeeringConnectionOptionsInput, []request.Option) {
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcPeeringConnectionOptionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsWithContextReturns(result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput, result2 error) {
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsWithContextStub = nil
	fake.modifyVpcPeeringConnectionOptionsWithContextReturns = struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcPeeringConnectionOptionsWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput, result2 error) {
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Lock()
	defer fake.modifyVpcPeeringConnectionOptionsWithContextMutex.Unlock()
	fake.ModifyVpcPeeringConnectionOptionsWithContextStub = nil
	if fake.modifyVpcPeeringConnectionOptionsWithContextReturnsOnCall == nil {
		fake.modifyVpcPeeringConnectionOptionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
			result2 error
		})
	}
	fake.modifyVpcPeeringConnectionOptionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcTenancy(arg1 *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
	fake.modifyVpcTenancyMutex.Lock()
	ret, specificReturn := fake.modifyVpcTenancyReturnsOnCall[len(fake.modifyVpcTenancyArgsForCall)]
	fake.modifyVpcTenancyArgsForCall = append(fake.modifyVpcTenancyArgsForCall, struct {
		arg1 *ec2.ModifyVpcTenancyInput
	}{arg1})
	fake.recordInvocation("ModifyVpcTenancy", []interface{}{arg1})
	fake.modifyVpcTenancyMutex.Unlock()
	if fake.ModifyVpcTenancyStub != nil {
		return fake.ModifyVpcTenancyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcTenancyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcTenancyCallCount() int {
	fake.modifyVpcTenancyMutex.RLock()
	defer fake.modifyVpcTenancyMutex.RUnlock()
	return len(fake.modifyVpcTenancyArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcTenancyCalls(stub func(*ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error)) {
	fake.modifyVpcTenancyMutex.Lock()
	defer fake.modifyVpcTenancyMutex.Unlock()
	fake.ModifyVpcTenancyStub = stub
}

func (fake *FakeEC2API) ModifyVpcTenancyArgsForCall(i int) *ec2.ModifyVpcTenancyInput {
	fake.modifyVpcTenancyMutex.RLock()
	defer fake.modifyVpcTenancyMutex.RUnlock()
	argsForCall := fake.modifyVpcTenancyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcTenancyReturns(result1 *ec2.ModifyVpcTenancyOutput, result2 error) {
	fake.modifyVpcTenancyMutex.Lock()
	defer fake.modifyVpcTenancyMutex.Unlock()
	fake.ModifyVpcTenancyStub = nil
	fake.modifyVpcTenancyReturns = struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcTenancyReturnsOnCall(i int, result1 *ec2.ModifyVpcTenancyOutput, result2 error) {
	fake.modifyVpcTenancyMutex.Lock()
	defer fake.modifyVpcTenancyMutex.Unlock()
	fake.ModifyVpcTenancyStub = nil
	if fake.modifyVpcTenancyReturnsOnCall == nil {
		fake.modifyVpcTenancyReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcTenancyOutput
			result2 error
		})
	}
	fake.modifyVpcTenancyReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcTenancyRequest(arg1 *ec2.ModifyVpcTenancyInput) (*request.Request, *ec2.ModifyVpcTenancyOutput) {
	fake.modifyVpcTenancyRequestMutex.Lock()
	ret, specificReturn := fake.modifyVpcTenancyRequestReturnsOnCall[len(fake.modifyVpcTenancyRequestArgsForCall)]
	fake.modifyVpcTenancyRequestArgsForCall = append(fake.modifyVpcTenancyRequestArgsForCall, struct {
		arg1 *ec2.ModifyVpcTenancyInput
	}{arg1})
	fake.recordInvocation("ModifyVpcTenancyRequest", []interface{}{arg1})
	fake.modifyVpcTenancyRequestMutex.Unlock()
	if fake.ModifyVpcTenancyRequestStub != nil {
		return fake.ModifyVpcTenancyRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcTenancyRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcTenancyRequestCallCount() int {
	fake.modifyVpcTenancyRequestMutex.RLock()
	defer fake.modifyVpcTenancyRequestMutex.RUnlock()
	return len(fake.modifyVpcTenancyRequestArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcTenancyRequestCalls(stub func(*ec2.ModifyVpcTenancyInput) (*request.Request, *ec2.ModifyVpcTenancyOutput)) {
	fake.modifyVpcTenancyRequestMutex.Lock()
	defer fake.modifyVpcTenancyRequestMutex.Unlock()
	fake.ModifyVpcTenancyRequestStub = stub
}

func (fake *FakeEC2API) ModifyVpcTenancyRequestArgsForCall(i int) *ec2.ModifyVpcTenancyInput {
	fake.modifyVpcTenancyRequestMutex.RLock()
	defer fake.modifyVpcTenancyRequestMutex.RUnlock()
	argsForCall := fake.modifyVpcTenancyRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ModifyVpcTenancyRequestReturns(result1 *request.Request, result2 *ec2.ModifyVpcTenancyOutput) {
	fake.modifyVpcTenancyRequestMutex.Lock()
	defer fake.modifyVpcTenancyRequestMutex.Unlock()
	fake.ModifyVpcTenancyRequestStub = nil
	fake.modifyVpcTenancyRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcTenancyOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcTenancyRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ModifyVpcTenancyOutput) {
	fake.modifyVpcTenancyRequestMutex.Lock()
	defer fake.modifyVpcTenancyRequestMutex.Unlock()
	fake.ModifyVpcTenancyRequestStub = nil
	if fake.modifyVpcTenancyRequestReturnsOnCall == nil {
		fake.modifyVpcTenancyRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ModifyVpcTenancyOutput
		})
	}
	fake.modifyVpcTenancyRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ModifyVpcTenancyOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcTenancyWithContext(arg1 aws.Context, arg2 *ec2.ModifyVpcTenancyInput, arg3 ...request.Option) (*ec2.ModifyVpcTenancyOutput, error) {
	fake.modifyVpcTenancyWithContextMutex.Lock()
	ret, specificReturn := fake.modifyVpcTenancyWithContextReturnsOnCall[len(fake.modifyVpcTenancyWithContextArgsForCall)]
	fake.modifyVpcTenancyWithContextArgsForCall = append(fake.modifyVpcTenancyWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ModifyVpcTenancyInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyVpcTenancyWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcTenancyWithContextMutex.Unlock()
	if fake.ModifyVpcTenancyWithContextStub != nil {
		return fake.ModifyVpcTenancyWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyVpcTenancyWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcTenancyWithContextCallCount() int {
	fake.modifyVpcTenancyWithContextMutex.RLock()
	defer fake.modifyVpcTenancyWithContextMutex.RUnlock()
	return len(fake.modifyVpcTenancyWithContextArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcTenancyWithContextCalls(stub func(aws.Context, *ec2.ModifyVpcTenancyInput, ...request.Option) (*ec2.ModifyVpcTenancyOutput, error)) {
	fake.modifyVpcTenancyWithContextMutex.Lock()
	defer fake.modifyVpcTenancyWithContextMutex.Unlock()
	fake.ModifyVpcTenancyWithContextStub = stub
}

func (fake *FakeEC2API) ModifyVpcTenancyWithContextArgsForCall(i int) (aws.Context, *ec2.ModifyVpcTenancyInput, []request.Option) {
	fake.modifyVpcTenancyWithContextMutex.RLock()
	defer fake.modifyVpcTenancyWithContextMutex.RUnlock()
	argsForCall := fake.modifyVpcTenancyWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcTenancyWithContextReturns(result1 *ec2.ModifyVpcTenancyOutput, result2 error) {
	fake.modifyVpcTenancyWithContextMutex.Lock()
	defer fake.modifyVpcTenancyWithContextMutex.Unlock()
	fake.ModifyVpcTenancyWithContextStub = nil
	fake.modifyVpcTenancyWithContextReturns = struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcTenancyWithContextReturnsOnCall(i int, result1 *ec2.ModifyVpcTenancyOutput, result2 error) {
	fake.modifyVpcTenancyWithContextMutex.Lock()
	defer fake.modifyVpcTenancyWithContextMutex.Unlock()
	fake.ModifyVpcTenancyWithContextStub = nil
	if fake.modifyVpcTenancyWithContextReturnsOnCall == nil {
		fake.modifyVpcTenancyWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcTenancyOutput
			result2 error
		})
	}
	fake.modifyVpcTenancyWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcTenancyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MonitorInstances(arg1 *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	fake.monitorInstancesMutex.Lock()
	ret, specificReturn := fake.monitorInstancesReturnsOnCall[len(fake.monitorInstancesArgsForCall)]
	fake.monitorInstancesArgsForCall = append(fake.monitorInstancesArgsForCall, struct {
		arg1 *ec2.MonitorInstancesInput
	}{arg1})
	fake.recordInvocation("MonitorInstances", []interface{}{arg1})
	fake.monitorInstancesMutex.Unlock()
	if fake.MonitorInstancesStub != nil {
		return fake.MonitorInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.monitorInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) MonitorInstancesCallCount() int {
	fake.monitorInstancesMutex.RLock()
	defer fake.monitorInstancesMutex.RUnlock()
	return len(fake.monitorInstancesArgsForCall)
}

func (fake *FakeEC2API) MonitorInstancesCalls(stub func(*ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error)) {
	fake.monitorInstancesMutex.Lock()
	defer fake.monitorInstancesMutex.Unlock()
	fake.MonitorInstancesStub = stub
}

func (fake *FakeEC2API) MonitorInstancesArgsForCall(i int) *ec2.MonitorInstancesInput {
	fake.monitorInstancesMutex.RLock()
	defer fake.monitorInstancesMutex.RUnlock()
	argsForCall := fake.monitorInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) MonitorInstancesReturns(result1 *ec2.MonitorInstancesOutput, result2 error) {
	fake.monitorInstancesMutex.Lock()
	defer fake.monitorInstancesMutex.Unlock()
	fake.MonitorInstancesStub = nil
	fake.monitorInstancesReturns = struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MonitorInstancesReturnsOnCall(i int, result1 *ec2.MonitorInstancesOutput, result2 error) {
	fake.monitorInstancesMutex.Lock()
	defer fake.monitorInstancesMutex.Unlock()
	fake.MonitorInstancesStub = nil
	if fake.monitorInstancesReturnsOnCall == nil {
		fake.monitorInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.MonitorInstancesOutput
			result2 error
		})
	}
	fake.monitorInstancesReturnsOnCall[i] = struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MonitorInstancesRequest(arg1 *ec2.MonitorInstancesInput) (*request.Request, *ec2.MonitorInstancesOutput) {
	fake.monitorInstancesRequestMutex.Lock()
	ret, specificReturn := fake.monitorInstancesRequestReturnsOnCall[len(fake.monitorInstancesRequestArgsForCall)]
	fake.monitorInstancesRequestArgsForCall = append(fake.monitorInstancesRequestArgsForCall, struct {
		arg1 *ec2.MonitorInstancesInput
	}{arg1})
	fake.recordInvocation("MonitorInstancesRequest", []interface{}{arg1})
	fake.monitorInstancesRequestMutex.Unlock()
	if fake.MonitorInstancesRequestStub != nil {
		return fake.MonitorInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.monitorInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) MonitorInstancesRequestCallCount() int {
	fake.monitorInstancesRequestMutex.RLock()
	defer fake.monitorInstancesRequestMutex.RUnlock()
	return len(fake.monitorInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) MonitorInstancesRequestCalls(stub func(*ec2.MonitorInstancesInput) (*request.Request, *ec2.MonitorInstancesOutput)) {
	fake.monitorInstancesRequestMutex.Lock()
	defer fake.monitorInstancesRequestMutex.Unlock()
	fake.MonitorInstancesRequestStub = stub
}

func (fake *FakeEC2API) MonitorInstancesRequestArgsForCall(i int) *ec2.MonitorInstancesInput {
	fake.monitorInstancesRequestMutex.RLock()
	defer fake.monitorInstancesRequestMutex.RUnlock()
	argsForCall := fake.monitorInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) MonitorInstancesRequestReturns(result1 *request.Request, result2 *ec2.MonitorInstancesOutput) {
	fake.monitorInstancesRequestMutex.Lock()
	defer fake.monitorInstancesRequestMutex.Unlock()
	fake.MonitorInstancesRequestStub = nil
	fake.monitorInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.MonitorInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) MonitorInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.MonitorInstancesOutput) {
	fake.monitorInstancesRequestMutex.Lock()
	defer fake.monitorInstancesRequestMutex.Unlock()
	fake.MonitorInstancesRequestStub = nil
	if fake.monitorInstancesRequestReturnsOnCall == nil {
		fake.monitorInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.MonitorInstancesOutput
		})
	}
	fake.monitorInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.MonitorInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) MonitorInstancesWithContext(arg1 aws.Context, arg2 *ec2.MonitorInstancesInput, arg3 ...request.Option) (*ec2.MonitorInstancesOutput, error) {
	fake.monitorInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.monitorInstancesWithContextReturnsOnCall[len(fake.monitorInstancesWithContextArgsForCall)]
	fake.monitorInstancesWithContextArgsForCall = append(fake.monitorInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.MonitorInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("MonitorInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.monitorInstancesWithContextMutex.Unlock()
	if fake.MonitorInstancesWithContextStub != nil {
		return fake.MonitorInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.monitorInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) MonitorInstancesWithContextCallCount() int {
	fake.monitorInstancesWithContextMutex.RLock()
	defer fake.monitorInstancesWithContextMutex.RUnlock()
	return len(fake.monitorInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) MonitorInstancesWithContextCalls(stub func(aws.Context, *ec2.MonitorInstancesInput, ...request.Option) (*ec2.MonitorInstancesOutput, error)) {
	fake.monitorInstancesWithContextMutex.Lock()
	defer fake.monitorInstancesWithContextMutex.Unlock()
	fake.MonitorInstancesWithContextStub = stub
}

func (fake *FakeEC2API) MonitorInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.MonitorInstancesInput, []request.Option) {
	fake.monitorInstancesWithContextMutex.RLock()
	defer fake.monitorInstancesWithContextMutex.RUnlock()
	argsForCall := fake.monitorInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) MonitorInstancesWithContextReturns(result1 *ec2.MonitorInstancesOutput, result2 error) {
	fake.monitorInstancesWithContextMutex.Lock()
	defer fake.monitorInstancesWithContextMutex.Unlock()
	fake.MonitorInstancesWithContextStub = nil
	fake.monitorInstancesWithContextReturns = struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MonitorInstancesWithContextReturnsOnCall(i int, result1 *ec2.MonitorInstancesOutput, result2 error) {
	fake.monitorInstancesWithContextMutex.Lock()
	defer fake.monitorInstancesWithContextMutex.Unlock()
	fake.MonitorInstancesWithContextStub = nil
	if fake.monitorInstancesWithContextReturnsOnCall == nil {
		fake.monitorInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.MonitorInstancesOutput
			result2 error
		})
	}
	fake.monitorInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.MonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MoveAddressToVpc(arg1 *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
	fake.moveAddressToVpcMutex.Lock()
	ret, specificReturn := fake.moveAddressToVpcReturnsOnCall[len(fake.moveAddressToVpcArgsForCall)]
	fake.moveAddressToVpcArgsForCall = append(fake.moveAddressToVpcArgsForCall, struct {
		arg1 *ec2.MoveAddressToVpcInput
	}{arg1})
	fake.recordInvocation("MoveAddressToVpc", []interface{}{arg1})
	fake.moveAddressToVpcMutex.Unlock()
	if fake.MoveAddressToVpcStub != nil {
		return fake.MoveAddressToVpcStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.moveAddressToVpcReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) MoveAddressToVpcCallCount() int {
	fake.moveAddressToVpcMutex.RLock()
	defer fake.moveAddressToVpcMutex.RUnlock()
	return len(fake.moveAddressToVpcArgsForCall)
}

func (fake *FakeEC2API) MoveAddressToVpcCalls(stub func(*ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error)) {
	fake.moveAddressToVpcMutex.Lock()
	defer fake.moveAddressToVpcMutex.Unlock()
	fake.MoveAddressToVpcStub = stub
}

func (fake *FakeEC2API) MoveAddressToVpcArgsForCall(i int) *ec2.MoveAddressToVpcInput {
	fake.moveAddressToVpcMutex.RLock()
	defer fake.moveAddressToVpcMutex.RUnlock()
	argsForCall := fake.moveAddressToVpcArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) MoveAddressToVpcReturns(result1 *ec2.MoveAddressToVpcOutput, result2 error) {
	fake.moveAddressToVpcMutex.Lock()
	defer fake.moveAddressToVpcMutex.Unlock()
	fake.MoveAddressToVpcStub = nil
	fake.moveAddressToVpcReturns = struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MoveAddressToVpcReturnsOnCall(i int, result1 *ec2.MoveAddressToVpcOutput, result2 error) {
	fake.moveAddressToVpcMutex.Lock()
	defer fake.moveAddressToVpcMutex.Unlock()
	fake.MoveAddressToVpcStub = nil
	if fake.moveAddressToVpcReturnsOnCall == nil {
		fake.moveAddressToVpcReturnsOnCall = make(map[int]struct {
			result1 *ec2.MoveAddressToVpcOutput
			result2 error
		})
	}
	fake.moveAddressToVpcReturnsOnCall[i] = struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MoveAddressToVpcRequest(arg1 *ec2.MoveAddressToVpcInput) (*request.Request, *ec2.MoveAddressToVpcOutput) {
	fake.moveAddressToVpcRequestMutex.Lock()
	ret, specificReturn := fake.moveAddressToVpcRequestReturnsOnCall[len(fake.moveAddressToVpcRequestArgsForCall)]
	fake.moveAddressToVpcRequestArgsForCall = append(fake.moveAddressToVpcRequestArgsForCall, struct {
		arg1 *ec2.MoveAddressToVpcInput
	}{arg1})
	fake.recordInvocation("MoveAddressToVpcRequest", []interface{}{arg1})
	fake.moveAddressToVpcRequestMutex.Unlock()
	if fake.MoveAddressToVpcRequestStub != nil {
		return fake.MoveAddressToVpcRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.moveAddressToVpcRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) MoveAddressToVpcRequestCallCount() int {
	fake.moveAddressToVpcRequestMutex.RLock()
	defer fake.moveAddressToVpcRequestMutex.RUnlock()
	return len(fake.moveAddressToVpcRequestArgsForCall)
}

func (fake *FakeEC2API) MoveAddressToVpcRequestCalls(stub func(*ec2.MoveAddressToVpcInput) (*request.Request, *ec2.MoveAddressToVpcOutput)) {
	fake.moveAddressToVpcRequestMutex.Lock()
	defer fake.moveAddressToVpcRequestMutex.Unlock()
	fake.MoveAddressToVpcRequestStub = stub
}

func (fake *FakeEC2API) MoveAddressToVpcRequestArgsForCall(i int) *ec2.MoveAddressToVpcInput {
	fake.moveAddressToVpcRequestMutex.RLock()
	defer fake.moveAddressToVpcRequestMutex.RUnlock()
	argsForCall := fake.moveAddressToVpcRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) MoveAddressToVpcRequestReturns(result1 *request.Request, result2 *ec2.MoveAddressToVpcOutput) {
	fake.moveAddressToVpcRequestMutex.Lock()
	defer fake.moveAddressToVpcRequestMutex.Unlock()
	fake.MoveAddressToVpcRequestStub = nil
	fake.moveAddressToVpcRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.MoveAddressToVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) MoveAddressToVpcRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.MoveAddressToVpcOutput) {
	fake.moveAddressToVpcRequestMutex.Lock()
	defer fake.moveAddressToVpcRequestMutex.Unlock()
	fake.MoveAddressToVpcRequestStub = nil
	if fake.moveAddressToVpcRequestReturnsOnCall == nil {
		fake.moveAddressToVpcRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.MoveAddressToVpcOutput
		})
	}
	fake.moveAddressToVpcRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.MoveAddressToVpcOutput
	}{result1, result2}
}

func (fake *FakeEC2API) MoveAddressToVpcWithContext(arg1 aws.Context, arg2 *ec2.MoveAddressToVpcInput, arg3 ...request.Option) (*ec2.MoveAddressToVpcOutput, error) {
	fake.moveAddressToVpcWithContextMutex.Lock()
	ret, specificReturn := fake.moveAddressToVpcWithContextReturnsOnCall[len(fake.moveAddressToVpcWithContextArgsForCall)]
	fake.moveAddressToVpcWithContextArgsForCall = append(fake.moveAddressToVpcWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.MoveAddressToVpcInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("MoveAddressToVpcWithContext", []interface{}{arg1, arg2, arg3})
	fake.moveAddressToVpcWithContextMutex.Unlock()
	if fake.MoveAddressToVpcWithContextStub != nil {
		return fake.MoveAddressToVpcWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.moveAddressToVpcWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) MoveAddressToVpcWithContextCallCount() int {
	fake.moveAddressToVpcWithContextMutex.RLock()
	defer fake.moveAddressToVpcWithContextMutex.RUnlock()
	return len(fake.moveAddressToVpcWithContextArgsForCall)
}

func (fake *FakeEC2API) MoveAddressToVpcWithContextCalls(stub func(aws.Context, *ec2.MoveAddressToVpcInput, ...request.Option) (*ec2.MoveAddressToVpcOutput, error)) {
	fake.moveAddressToVpcWithContextMutex.Lock()
	defer fake.moveAddressToVpcWithContextMutex.Unlock()
	fake.MoveAddressToVpcWithContextStub = stub
}

func (fake *FakeEC2API) MoveAddressToVpcWithContextArgsForCall(i int) (aws.Context, *ec2.MoveAddressToVpcInput, []request.Option) {
	fake.moveAddressToVpcWithContextMutex.RLock()
	defer fake.moveAddressToVpcWithContextMutex.RUnlock()
	argsForCall := fake.moveAddressToVpcWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) MoveAddressToVpcWithContextReturns(result1 *ec2.MoveAddressToVpcOutput, result2 error) {
	fake.moveAddressToVpcWithContextMutex.Lock()
	defer fake.moveAddressToVpcWithContextMutex.Unlock()
	fake.MoveAddressToVpcWithContextStub = nil
	fake.moveAddressToVpcWithContextReturns = struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) MoveAddressToVpcWithContextReturnsOnCall(i int, result1 *ec2.MoveAddressToVpcOutput, result2 error) {
	fake.moveAddressToVpcWithContextMutex.Lock()
	defer fake.moveAddressToVpcWithContextMutex.Unlock()
	fake.MoveAddressToVpcWithContextStub = nil
	if fake.moveAddressToVpcWithContextReturnsOnCall == nil {
		fake.moveAddressToVpcWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.MoveAddressToVpcOutput
			result2 error
		})
	}
	fake.moveAddressToVpcWithContextReturnsOnCall[i] = struct {
		result1 *ec2.MoveAddressToVpcOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ProvisionByoipCidr(arg1 *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error) {
	fake.provisionByoipCidrMutex.Lock()
	ret, specificReturn := fake.provisionByoipCidrReturnsOnCall[len(fake.provisionByoipCidrArgsForCall)]
	fake.provisionByoipCidrArgsForCall = append(fake.provisionByoipCidrArgsForCall, struct {
		arg1 *ec2.ProvisionByoipCidrInput
	}{arg1})
	fake.recordInvocation("ProvisionByoipCidr", []interface{}{arg1})
	fake.provisionByoipCidrMutex.Unlock()
	if fake.ProvisionByoipCidrStub != nil {
		return fake.ProvisionByoipCidrStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.provisionByoipCidrReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ProvisionByoipCidrCallCount() int {
	fake.provisionByoipCidrMutex.RLock()
	defer fake.provisionByoipCidrMutex.RUnlock()
	return len(fake.provisionByoipCidrArgsForCall)
}

func (fake *FakeEC2API) ProvisionByoipCidrCalls(stub func(*ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error)) {
	fake.provisionByoipCidrMutex.Lock()
	defer fake.provisionByoipCidrMutex.Unlock()
	fake.ProvisionByoipCidrStub = stub
}

func (fake *FakeEC2API) ProvisionByoipCidrArgsForCall(i int) *ec2.ProvisionByoipCidrInput {
	fake.provisionByoipCidrMutex.RLock()
	defer fake.provisionByoipCidrMutex.RUnlock()
	argsForCall := fake.provisionByoipCidrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ProvisionByoipCidrReturns(result1 *ec2.ProvisionByoipCidrOutput, result2 error) {
	fake.provisionByoipCidrMutex.Lock()
	defer fake.provisionByoipCidrMutex.Unlock()
	fake.ProvisionByoipCidrStub = nil
	fake.provisionByoipCidrReturns = struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ProvisionByoipCidrReturnsOnCall(i int, result1 *ec2.ProvisionByoipCidrOutput, result2 error) {
	fake.provisionByoipCidrMutex.Lock()
	defer fake.provisionByoipCidrMutex.Unlock()
	fake.ProvisionByoipCidrStub = nil
	if fake.provisionByoipCidrReturnsOnCall == nil {
		fake.provisionByoipCidrReturnsOnCall = make(map[int]struct {
			result1 *ec2.ProvisionByoipCidrOutput
			result2 error
		})
	}
	fake.provisionByoipCidrReturnsOnCall[i] = struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ProvisionByoipCidrRequest(arg1 *ec2.ProvisionByoipCidrInput) (*request.Request, *ec2.ProvisionByoipCidrOutput) {
	fake.provisionByoipCidrRequestMutex.Lock()
	ret, specificReturn := fake.provisionByoipCidrRequestReturnsOnCall[len(fake.provisionByoipCidrRequestArgsForCall)]
	fake.provisionByoipCidrRequestArgsForCall = append(fake.provisionByoipCidrRequestArgsForCall, struct {
		arg1 *ec2.ProvisionByoipCidrInput
	}{arg1})
	fake.recordInvocation("ProvisionByoipCidrRequest", []interface{}{arg1})
	fake.provisionByoipCidrRequestMutex.Unlock()
	if fake.ProvisionByoipCidrRequestStub != nil {
		return fake.ProvisionByoipCidrRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.provisionByoipCidrRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ProvisionByoipCidrRequestCallCount() int {
	fake.provisionByoipCidrRequestMutex.RLock()
	defer fake.provisionByoipCidrRequestMutex.RUnlock()
	return len(fake.provisionByoipCidrRequestArgsForCall)
}

func (fake *FakeEC2API) ProvisionByoipCidrRequestCalls(stub func(*ec2.ProvisionByoipCidrInput) (*request.Request, *ec2.ProvisionByoipCidrOutput)) {
	fake.provisionByoipCidrRequestMutex.Lock()
	defer fake.provisionByoipCidrRequestMutex.Unlock()
	fake.ProvisionByoipCidrRequestStub = stub
}

func (fake *FakeEC2API) ProvisionByoipCidrRequestArgsForCall(i int) *ec2.ProvisionByoipCidrInput {
	fake.provisionByoipCidrRequestMutex.RLock()
	defer fake.provisionByoipCidrRequestMutex.RUnlock()
	argsForCall := fake.provisionByoipCidrRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ProvisionByoipCidrRequestReturns(result1 *request.Request, result2 *ec2.ProvisionByoipCidrOutput) {
	fake.provisionByoipCidrRequestMutex.Lock()
	defer fake.provisionByoipCidrRequestMutex.Unlock()
	fake.ProvisionByoipCidrRequestStub = nil
	fake.provisionByoipCidrRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ProvisionByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ProvisionByoipCidrRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ProvisionByoipCidrOutput) {
	fake.provisionByoipCidrRequestMutex.Lock()
	defer fake.provisionByoipCidrRequestMutex.Unlock()
	fake.ProvisionByoipCidrRequestStub = nil
	if fake.provisionByoipCidrRequestReturnsOnCall == nil {
		fake.provisionByoipCidrRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ProvisionByoipCidrOutput
		})
	}
	fake.provisionByoipCidrRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ProvisionByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ProvisionByoipCidrWithContext(arg1 aws.Context, arg2 *ec2.ProvisionByoipCidrInput, arg3 ...request.Option) (*ec2.ProvisionByoipCidrOutput, error) {
	fake.provisionByoipCidrWithContextMutex.Lock()
	ret, specificReturn := fake.provisionByoipCidrWithContextReturnsOnCall[len(fake.provisionByoipCidrWithContextArgsForCall)]
	fake.provisionByoipCidrWithContextArgsForCall = append(fake.provisionByoipCidrWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ProvisionByoipCidrInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ProvisionByoipCidrWithContext", []interface{}{arg1, arg2, arg3})
	fake.provisionByoipCidrWithContextMutex.Unlock()
	if fake.ProvisionByoipCidrWithContextStub != nil {
		return fake.ProvisionByoipCidrWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.provisionByoipCidrWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ProvisionByoipCidrWithContextCallCount() int {
	fake.provisionByoipCidrWithContextMutex.RLock()
	defer fake.provisionByoipCidrWithContextMutex.RUnlock()
	return len(fake.provisionByoipCidrWithContextArgsForCall)
}

func (fake *FakeEC2API) ProvisionByoipCidrWithContextCalls(stub func(aws.Context, *ec2.ProvisionByoipCidrInput, ...request.Option) (*ec2.ProvisionByoipCidrOutput, error)) {
	fake.provisionByoipCidrWithContextMutex.Lock()
	defer fake.provisionByoipCidrWithContextMutex.Unlock()
	fake.ProvisionByoipCidrWithContextStub = stub
}

func (fake *FakeEC2API) ProvisionByoipCidrWithContextArgsForCall(i int) (aws.Context, *ec2.ProvisionByoipCidrInput, []request.Option) {
	fake.provisionByoipCidrWithContextMutex.RLock()
	defer fake.provisionByoipCidrWithContextMutex.RUnlock()
	argsForCall := fake.provisionByoipCidrWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ProvisionByoipCidrWithContextReturns(result1 *ec2.ProvisionByoipCidrOutput, result2 error) {
	fake.provisionByoipCidrWithContextMutex.Lock()
	defer fake.provisionByoipCidrWithContextMutex.Unlock()
	fake.ProvisionByoipCidrWithContextStub = nil
	fake.provisionByoipCidrWithContextReturns = struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ProvisionByoipCidrWithContextReturnsOnCall(i int, result1 *ec2.ProvisionByoipCidrOutput, result2 error) {
	fake.provisionByoipCidrWithContextMutex.Lock()
	defer fake.provisionByoipCidrWithContextMutex.Unlock()
	fake.ProvisionByoipCidrWithContextStub = nil
	if fake.provisionByoipCidrWithContextReturnsOnCall == nil {
		fake.provisionByoipCidrWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ProvisionByoipCidrOutput
			result2 error
		})
	}
	fake.provisionByoipCidrWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ProvisionByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseHostReservation(arg1 *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
	fake.purchaseHostReservationMutex.Lock()
	ret, specificReturn := fake.purchaseHostReservationReturnsOnCall[len(fake.purchaseHostReservationArgsForCall)]
	fake.purchaseHostReservationArgsForCall = append(fake.purchaseHostReservationArgsForCall, struct {
		arg1 *ec2.PurchaseHostReservationInput
	}{arg1})
	fake.recordInvocation("PurchaseHostReservation", []interface{}{arg1})
	fake.purchaseHostReservationMutex.Unlock()
	if fake.PurchaseHostReservationStub != nil {
		return fake.PurchaseHostReservationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseHostReservationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseHostReservationCallCount() int {
	fake.purchaseHostReservationMutex.RLock()
	defer fake.purchaseHostReservationMutex.RUnlock()
	return len(fake.purchaseHostReservationArgsForCall)
}

func (fake *FakeEC2API) PurchaseHostReservationCalls(stub func(*ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error)) {
	fake.purchaseHostReservationMutex.Lock()
	defer fake.purchaseHostReservationMutex.Unlock()
	fake.PurchaseHostReservationStub = stub
}

func (fake *FakeEC2API) PurchaseHostReservationArgsForCall(i int) *ec2.PurchaseHostReservationInput {
	fake.purchaseHostReservationMutex.RLock()
	defer fake.purchaseHostReservationMutex.RUnlock()
	argsForCall := fake.purchaseHostReservationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) PurchaseHostReservationReturns(result1 *ec2.PurchaseHostReservationOutput, result2 error) {
	fake.purchaseHostReservationMutex.Lock()
	defer fake.purchaseHostReservationMutex.Unlock()
	fake.PurchaseHostReservationStub = nil
	fake.purchaseHostReservationReturns = struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseHostReservationReturnsOnCall(i int, result1 *ec2.PurchaseHostReservationOutput, result2 error) {
	fake.purchaseHostReservationMutex.Lock()
	defer fake.purchaseHostReservationMutex.Unlock()
	fake.PurchaseHostReservationStub = nil
	if fake.purchaseHostReservationReturnsOnCall == nil {
		fake.purchaseHostReservationReturnsOnCall = make(map[int]struct {
			result1 *ec2.PurchaseHostReservationOutput
			result2 error
		})
	}
	fake.purchaseHostReservationReturnsOnCall[i] = struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseHostReservationRequest(arg1 *ec2.PurchaseHostReservationInput) (*request.Request, *ec2.PurchaseHostReservationOutput) {
	fake.purchaseHostReservationRequestMutex.Lock()
	ret, specificReturn := fake.purchaseHostReservationRequestReturnsOnCall[len(fake.purchaseHostReservationRequestArgsForCall)]
	fake.purchaseHostReservationRequestArgsForCall = append(fake.purchaseHostReservationRequestArgsForCall, struct {
		arg1 *ec2.PurchaseHostReservationInput
	}{arg1})
	fake.recordInvocation("PurchaseHostReservationRequest", []interface{}{arg1})
	fake.purchaseHostReservationRequestMutex.Unlock()
	if fake.PurchaseHostReservationRequestStub != nil {
		return fake.PurchaseHostReservationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseHostReservationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseHostReservationRequestCallCount() int {
	fake.purchaseHostReservationRequestMutex.RLock()
	defer fake.purchaseHostReservationRequestMutex.RUnlock()
	return len(fake.purchaseHostReservationRequestArgsForCall)
}

func (fake *FakeEC2API) PurchaseHostReservationRequestCalls(stub func(*ec2.PurchaseHostReservationInput) (*request.Request, *ec2.PurchaseHostReservationOutput)) {
	fake.purchaseHostReservationRequestMutex.Lock()
	defer fake.purchaseHostReservationRequestMutex.Unlock()
	fake.PurchaseHostReservationRequestStub = stub
}

func (fake *FakeEC2API) PurchaseHostReservationRequestArgsForCall(i int) *ec2.PurchaseHostReservationInput {
	fake.purchaseHostReservationRequestMutex.RLock()
	defer fake.purchaseHostReservationRequestMutex.RUnlock()
	argsForCall := fake.purchaseHostReservationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) PurchaseHostReservationRequestReturns(result1 *request.Request, result2 *ec2.PurchaseHostReservationOutput) {
	fake.purchaseHostReservationRequestMutex.Lock()
	defer fake.purchaseHostReservationRequestMutex.Unlock()
	fake.PurchaseHostReservationRequestStub = nil
	fake.purchaseHostReservationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.PurchaseHostReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseHostReservationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.PurchaseHostReservationOutput) {
	fake.purchaseHostReservationRequestMutex.Lock()
	defer fake.purchaseHostReservationRequestMutex.Unlock()
	fake.PurchaseHostReservationRequestStub = nil
	if fake.purchaseHostReservationRequestReturnsOnCall == nil {
		fake.purchaseHostReservationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.PurchaseHostReservationOutput
		})
	}
	fake.purchaseHostReservationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.PurchaseHostReservationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseHostReservationWithContext(arg1 aws.Context, arg2 *ec2.PurchaseHostReservationInput, arg3 ...request.Option) (*ec2.PurchaseHostReservationOutput, error) {
	fake.purchaseHostReservationWithContextMutex.Lock()
	ret, specificReturn := fake.purchaseHostReservationWithContextReturnsOnCall[len(fake.purchaseHostReservationWithContextArgsForCall)]
	fake.purchaseHostReservationWithContextArgsForCall = append(fake.purchaseHostReservationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.PurchaseHostReservationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PurchaseHostReservationWithContext", []interface{}{arg1, arg2, arg3})
	fake.purchaseHostReservationWithContextMutex.Unlock()
	if fake.PurchaseHostReservationWithContextStub != nil {
		return fake.PurchaseHostReservationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseHostReservationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseHostReservationWithContextCallCount() int {
	fake.purchaseHostReservationWithContextMutex.RLock()
	defer fake.purchaseHostReservationWithContextMutex.RUnlock()
	return len(fake.purchaseHostReservationWithContextArgsForCall)
}

func (fake *FakeEC2API) PurchaseHostReservationWithContextCalls(stub func(aws.Context, *ec2.PurchaseHostReservationInput, ...request.Option) (*ec2.PurchaseHostReservationOutput, error)) {
	fake.purchaseHostReservationWithContextMutex.Lock()
	defer fake.purchaseHostReservationWithContextMutex.Unlock()
	fake.PurchaseHostReservationWithContextStub = stub
}

func (fake *FakeEC2API) PurchaseHostReservationWithContextArgsForCall(i int) (aws.Context, *ec2.PurchaseHostReservationInput, []request.Option) {
	fake.purchaseHostReservationWithContextMutex.RLock()
	defer fake.purchaseHostReservationWithContextMutex.RUnlock()
	argsForCall := fake.purchaseHostReservationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) PurchaseHostReservationWithContextReturns(result1 *ec2.PurchaseHostReservationOutput, result2 error) {
	fake.purchaseHostReservationWithContextMutex.Lock()
	defer fake.purchaseHostReservationWithContextMutex.Unlock()
	fake.PurchaseHostReservationWithContextStub = nil
	fake.purchaseHostReservationWithContextReturns = struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseHostReservationWithContextReturnsOnCall(i int, result1 *ec2.PurchaseHostReservationOutput, result2 error) {
	fake.purchaseHostReservationWithContextMutex.Lock()
	defer fake.purchaseHostReservationWithContextMutex.Unlock()
	fake.PurchaseHostReservationWithContextStub = nil
	if fake.purchaseHostReservationWithContextReturnsOnCall == nil {
		fake.purchaseHostReservationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.PurchaseHostReservationOutput
			result2 error
		})
	}
	fake.purchaseHostReservationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.PurchaseHostReservationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseReservedInstancesOffering(arg1 *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	fake.purchaseReservedInstancesOfferingMutex.Lock()
	ret, specificReturn := fake.purchaseReservedInstancesOfferingReturnsOnCall[len(fake.purchaseReservedInstancesOfferingArgsForCall)]
	fake.purchaseReservedInstancesOfferingArgsForCall = append(fake.purchaseReservedInstancesOfferingArgsForCall, struct {
		arg1 *ec2.PurchaseReservedInstancesOfferingInput
	}{arg1})
	fake.recordInvocation("PurchaseReservedInstancesOffering", []interface{}{arg1})
	fake.purchaseReservedInstancesOfferingMutex.Unlock()
	if fake.PurchaseReservedInstancesOfferingStub != nil {
		return fake.PurchaseReservedInstancesOfferingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseReservedInstancesOfferingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingCallCount() int {
	fake.purchaseReservedInstancesOfferingMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingMutex.RUnlock()
	return len(fake.purchaseReservedInstancesOfferingArgsForCall)
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingCalls(stub func(*ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error)) {
	fake.purchaseReservedInstancesOfferingMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingStub = stub
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingArgsForCall(i int) *ec2.PurchaseReservedInstancesOfferingInput {
	fake.purchaseReservedInstancesOfferingMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingMutex.RUnlock()
	argsForCall := fake.purchaseReservedInstancesOfferingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingReturns(result1 *ec2.PurchaseReservedInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedInstancesOfferingMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingStub = nil
	fake.purchaseReservedInstancesOfferingReturns = struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingReturnsOnCall(i int, result1 *ec2.PurchaseReservedInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedInstancesOfferingMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingStub = nil
	if fake.purchaseReservedInstancesOfferingReturnsOnCall == nil {
		fake.purchaseReservedInstancesOfferingReturnsOnCall = make(map[int]struct {
			result1 *ec2.PurchaseReservedInstancesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedInstancesOfferingReturnsOnCall[i] = struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingRequest(arg1 *ec2.PurchaseReservedInstancesOfferingInput) (*request.Request, *ec2.PurchaseReservedInstancesOfferingOutput) {
	fake.purchaseReservedInstancesOfferingRequestMutex.Lock()
	ret, specificReturn := fake.purchaseReservedInstancesOfferingRequestReturnsOnCall[len(fake.purchaseReservedInstancesOfferingRequestArgsForCall)]
	fake.purchaseReservedInstancesOfferingRequestArgsForCall = append(fake.purchaseReservedInstancesOfferingRequestArgsForCall, struct {
		arg1 *ec2.PurchaseReservedInstancesOfferingInput
	}{arg1})
	fake.recordInvocation("PurchaseReservedInstancesOfferingRequest", []interface{}{arg1})
	fake.purchaseReservedInstancesOfferingRequestMutex.Unlock()
	if fake.PurchaseReservedInstancesOfferingRequestStub != nil {
		return fake.PurchaseReservedInstancesOfferingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseReservedInstancesOfferingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingRequestCallCount() int {
	fake.purchaseReservedInstancesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingRequestMutex.RUnlock()
	return len(fake.purchaseReservedInstancesOfferingRequestArgsForCall)
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingRequestCalls(stub func(*ec2.PurchaseReservedInstancesOfferingInput) (*request.Request, *ec2.PurchaseReservedInstancesOfferingOutput)) {
	fake.purchaseReservedInstancesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingRequestStub = stub
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingRequestArgsForCall(i int) *ec2.PurchaseReservedInstancesOfferingInput {
	fake.purchaseReservedInstancesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingRequestMutex.RUnlock()
	argsForCall := fake.purchaseReservedInstancesOfferingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingRequestReturns(result1 *request.Request, result2 *ec2.PurchaseReservedInstancesOfferingOutput) {
	fake.purchaseReservedInstancesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingRequestStub = nil
	fake.purchaseReservedInstancesOfferingRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.PurchaseReservedInstancesOfferingOutput
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.PurchaseReservedInstancesOfferingOutput) {
	fake.purchaseReservedInstancesOfferingRequestMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingRequestMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingRequestStub = nil
	if fake.purchaseReservedInstancesOfferingRequestReturnsOnCall == nil {
		fake.purchaseReservedInstancesOfferingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.PurchaseReservedInstancesOfferingOutput
		})
	}
	fake.purchaseReservedInstancesOfferingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.PurchaseReservedInstancesOfferingOutput
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingWithContext(arg1 aws.Context, arg2 *ec2.PurchaseReservedInstancesOfferingInput, arg3 ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	fake.purchaseReservedInstancesOfferingWithContextMutex.Lock()
	ret, specificReturn := fake.purchaseReservedInstancesOfferingWithContextReturnsOnCall[len(fake.purchaseReservedInstancesOfferingWithContextArgsForCall)]
	fake.purchaseReservedInstancesOfferingWithContextArgsForCall = append(fake.purchaseReservedInstancesOfferingWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.PurchaseReservedInstancesOfferingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PurchaseReservedInstancesOfferingWithContext", []interface{}{arg1, arg2, arg3})
	fake.purchaseReservedInstancesOfferingWithContextMutex.Unlock()
	if fake.PurchaseReservedInstancesOfferingWithContextStub != nil {
		return fake.PurchaseReservedInstancesOfferingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseReservedInstancesOfferingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingWithContextCallCount() int {
	fake.purchaseReservedInstancesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingWithContextMutex.RUnlock()
	return len(fake.purchaseReservedInstancesOfferingWithContextArgsForCall)
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingWithContextCalls(stub func(aws.Context, *ec2.PurchaseReservedInstancesOfferingInput, ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error)) {
	fake.purchaseReservedInstancesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingWithContextStub = stub
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingWithContextArgsForCall(i int) (aws.Context, *ec2.PurchaseReservedInstancesOfferingInput, []request.Option) {
	fake.purchaseReservedInstancesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingWithContextMutex.RUnlock()
	argsForCall := fake.purchaseReservedInstancesOfferingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingWithContextReturns(result1 *ec2.PurchaseReservedInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedInstancesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingWithContextStub = nil
	fake.purchaseReservedInstancesOfferingWithContextReturns = struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseReservedInstancesOfferingWithContextReturnsOnCall(i int, result1 *ec2.PurchaseReservedInstancesOfferingOutput, result2 error) {
	fake.purchaseReservedInstancesOfferingWithContextMutex.Lock()
	defer fake.purchaseReservedInstancesOfferingWithContextMutex.Unlock()
	fake.PurchaseReservedInstancesOfferingWithContextStub = nil
	if fake.purchaseReservedInstancesOfferingWithContextReturnsOnCall == nil {
		fake.purchaseReservedInstancesOfferingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.PurchaseReservedInstancesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedInstancesOfferingWithContextReturnsOnCall[i] = struct {
		result1 *ec2.PurchaseReservedInstancesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseScheduledInstances(arg1 *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
	fake.purchaseScheduledInstancesMutex.Lock()
	ret, specificReturn := fake.purchaseScheduledInstancesReturnsOnCall[len(fake.purchaseScheduledInstancesArgsForCall)]
	fake.purchaseScheduledInstancesArgsForCall = append(fake.purchaseScheduledInstancesArgsForCall, struct {
		arg1 *ec2.PurchaseScheduledInstancesInput
	}{arg1})
	fake.recordInvocation("PurchaseScheduledInstances", []interface{}{arg1})
	fake.purchaseScheduledInstancesMutex.Unlock()
	if fake.PurchaseScheduledInstancesStub != nil {
		return fake.PurchaseScheduledInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseScheduledInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseScheduledInstancesCallCount() int {
	fake.purchaseScheduledInstancesMutex.RLock()
	defer fake.purchaseScheduledInstancesMutex.RUnlock()
	return len(fake.purchaseScheduledInstancesArgsForCall)
}

func (fake *FakeEC2API) PurchaseScheduledInstancesCalls(stub func(*ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error)) {
	fake.purchaseScheduledInstancesMutex.Lock()
	defer fake.purchaseScheduledInstancesMutex.Unlock()
	fake.PurchaseScheduledInstancesStub = stub
}

func (fake *FakeEC2API) PurchaseScheduledInstancesArgsForCall(i int) *ec2.PurchaseScheduledInstancesInput {
	fake.purchaseScheduledInstancesMutex.RLock()
	defer fake.purchaseScheduledInstancesMutex.RUnlock()
	argsForCall := fake.purchaseScheduledInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) PurchaseScheduledInstancesReturns(result1 *ec2.PurchaseScheduledInstancesOutput, result2 error) {
	fake.purchaseScheduledInstancesMutex.Lock()
	defer fake.purchaseScheduledInstancesMutex.Unlock()
	fake.PurchaseScheduledInstancesStub = nil
	fake.purchaseScheduledInstancesReturns = struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseScheduledInstancesReturnsOnCall(i int, result1 *ec2.PurchaseScheduledInstancesOutput, result2 error) {
	fake.purchaseScheduledInstancesMutex.Lock()
	defer fake.purchaseScheduledInstancesMutex.Unlock()
	fake.PurchaseScheduledInstancesStub = nil
	if fake.purchaseScheduledInstancesReturnsOnCall == nil {
		fake.purchaseScheduledInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.PurchaseScheduledInstancesOutput
			result2 error
		})
	}
	fake.purchaseScheduledInstancesReturnsOnCall[i] = struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseScheduledInstancesRequest(arg1 *ec2.PurchaseScheduledInstancesInput) (*request.Request, *ec2.PurchaseScheduledInstancesOutput) {
	fake.purchaseScheduledInstancesRequestMutex.Lock()
	ret, specificReturn := fake.purchaseScheduledInstancesRequestReturnsOnCall[len(fake.purchaseScheduledInstancesRequestArgsForCall)]
	fake.purchaseScheduledInstancesRequestArgsForCall = append(fake.purchaseScheduledInstancesRequestArgsForCall, struct {
		arg1 *ec2.PurchaseScheduledInstancesInput
	}{arg1})
	fake.recordInvocation("PurchaseScheduledInstancesRequest", []interface{}{arg1})
	fake.purchaseScheduledInstancesRequestMutex.Unlock()
	if fake.PurchaseScheduledInstancesRequestStub != nil {
		return fake.PurchaseScheduledInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseScheduledInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseScheduledInstancesRequestCallCount() int {
	fake.purchaseScheduledInstancesRequestMutex.RLock()
	defer fake.purchaseScheduledInstancesRequestMutex.RUnlock()
	return len(fake.purchaseScheduledInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) PurchaseScheduledInstancesRequestCalls(stub func(*ec2.PurchaseScheduledInstancesInput) (*request.Request, *ec2.PurchaseScheduledInstancesOutput)) {
	fake.purchaseScheduledInstancesRequestMutex.Lock()
	defer fake.purchaseScheduledInstancesRequestMutex.Unlock()
	fake.PurchaseScheduledInstancesRequestStub = stub
}

func (fake *FakeEC2API) PurchaseScheduledInstancesRequestArgsForCall(i int) *ec2.PurchaseScheduledInstancesInput {
	fake.purchaseScheduledInstancesRequestMutex.RLock()
	defer fake.purchaseScheduledInstancesRequestMutex.RUnlock()
	argsForCall := fake.purchaseScheduledInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) PurchaseScheduledInstancesRequestReturns(result1 *request.Request, result2 *ec2.PurchaseScheduledInstancesOutput) {
	fake.purchaseScheduledInstancesRequestMutex.Lock()
	defer fake.purchaseScheduledInstancesRequestMutex.Unlock()
	fake.PurchaseScheduledInstancesRequestStub = nil
	fake.purchaseScheduledInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.PurchaseScheduledInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseScheduledInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.PurchaseScheduledInstancesOutput) {
	fake.purchaseScheduledInstancesRequestMutex.Lock()
	defer fake.purchaseScheduledInstancesRequestMutex.Unlock()
	fake.PurchaseScheduledInstancesRequestStub = nil
	if fake.purchaseScheduledInstancesRequestReturnsOnCall == nil {
		fake.purchaseScheduledInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.PurchaseScheduledInstancesOutput
		})
	}
	fake.purchaseScheduledInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.PurchaseScheduledInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseScheduledInstancesWithContext(arg1 aws.Context, arg2 *ec2.PurchaseScheduledInstancesInput, arg3 ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error) {
	fake.purchaseScheduledInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.purchaseScheduledInstancesWithContextReturnsOnCall[len(fake.purchaseScheduledInstancesWithContextArgsForCall)]
	fake.purchaseScheduledInstancesWithContextArgsForCall = append(fake.purchaseScheduledInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.PurchaseScheduledInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PurchaseScheduledInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.purchaseScheduledInstancesWithContextMutex.Unlock()
	if fake.PurchaseScheduledInstancesWithContextStub != nil {
		return fake.PurchaseScheduledInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.purchaseScheduledInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) PurchaseScheduledInstancesWithContextCallCount() int {
	fake.purchaseScheduledInstancesWithContextMutex.RLock()
	defer fake.purchaseScheduledInstancesWithContextMutex.RUnlock()
	return len(fake.purchaseScheduledInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) PurchaseScheduledInstancesWithContextCalls(stub func(aws.Context, *ec2.PurchaseScheduledInstancesInput, ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error)) {
	fake.purchaseScheduledInstancesWithContextMutex.Lock()
	defer fake.purchaseScheduledInstancesWithContextMutex.Unlock()
	fake.PurchaseScheduledInstancesWithContextStub = stub
}

func (fake *FakeEC2API) PurchaseScheduledInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.PurchaseScheduledInstancesInput, []request.Option) {
	fake.purchaseScheduledInstancesWithContextMutex.RLock()
	defer fake.purchaseScheduledInstancesWithContextMutex.RUnlock()
	argsForCall := fake.purchaseScheduledInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) PurchaseScheduledInstancesWithContextReturns(result1 *ec2.PurchaseScheduledInstancesOutput, result2 error) {
	fake.purchaseScheduledInstancesWithContextMutex.Lock()
	defer fake.purchaseScheduledInstancesWithContextMutex.Unlock()
	fake.PurchaseScheduledInstancesWithContextStub = nil
	fake.purchaseScheduledInstancesWithContextReturns = struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) PurchaseScheduledInstancesWithContextReturnsOnCall(i int, result1 *ec2.PurchaseScheduledInstancesOutput, result2 error) {
	fake.purchaseScheduledInstancesWithContextMutex.Lock()
	defer fake.purchaseScheduledInstancesWithContextMutex.Unlock()
	fake.PurchaseScheduledInstancesWithContextStub = nil
	if fake.purchaseScheduledInstancesWithContextReturnsOnCall == nil {
		fake.purchaseScheduledInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.PurchaseScheduledInstancesOutput
			result2 error
		})
	}
	fake.purchaseScheduledInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.PurchaseScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RebootInstances(arg1 *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	fake.rebootInstancesMutex.Lock()
	ret, specificReturn := fake.rebootInstancesReturnsOnCall[len(fake.rebootInstancesArgsForCall)]
	fake.rebootInstancesArgsForCall = append(fake.rebootInstancesArgsForCall, struct {
		arg1 *ec2.RebootInstancesInput
	}{arg1})
	fake.recordInvocation("RebootInstances", []interface{}{arg1})
	fake.rebootInstancesMutex.Unlock()
	if fake.RebootInstancesStub != nil {
		return fake.RebootInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rebootInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RebootInstancesCallCount() int {
	fake.rebootInstancesMutex.RLock()
	defer fake.rebootInstancesMutex.RUnlock()
	return len(fake.rebootInstancesArgsForCall)
}

func (fake *FakeEC2API) RebootInstancesCalls(stub func(*ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error)) {
	fake.rebootInstancesMutex.Lock()
	defer fake.rebootInstancesMutex.Unlock()
	fake.RebootInstancesStub = stub
}

func (fake *FakeEC2API) RebootInstancesArgsForCall(i int) *ec2.RebootInstancesInput {
	fake.rebootInstancesMutex.RLock()
	defer fake.rebootInstancesMutex.RUnlock()
	argsForCall := fake.rebootInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RebootInstancesReturns(result1 *ec2.RebootInstancesOutput, result2 error) {
	fake.rebootInstancesMutex.Lock()
	defer fake.rebootInstancesMutex.Unlock()
	fake.RebootInstancesStub = nil
	fake.rebootInstancesReturns = struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RebootInstancesReturnsOnCall(i int, result1 *ec2.RebootInstancesOutput, result2 error) {
	fake.rebootInstancesMutex.Lock()
	defer fake.rebootInstancesMutex.Unlock()
	fake.RebootInstancesStub = nil
	if fake.rebootInstancesReturnsOnCall == nil {
		fake.rebootInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.RebootInstancesOutput
			result2 error
		})
	}
	fake.rebootInstancesReturnsOnCall[i] = struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RebootInstancesRequest(arg1 *ec2.RebootInstancesInput) (*request.Request, *ec2.RebootInstancesOutput) {
	fake.rebootInstancesRequestMutex.Lock()
	ret, specificReturn := fake.rebootInstancesRequestReturnsOnCall[len(fake.rebootInstancesRequestArgsForCall)]
	fake.rebootInstancesRequestArgsForCall = append(fake.rebootInstancesRequestArgsForCall, struct {
		arg1 *ec2.RebootInstancesInput
	}{arg1})
	fake.recordInvocation("RebootInstancesRequest", []interface{}{arg1})
	fake.rebootInstancesRequestMutex.Unlock()
	if fake.RebootInstancesRequestStub != nil {
		return fake.RebootInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rebootInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RebootInstancesRequestCallCount() int {
	fake.rebootInstancesRequestMutex.RLock()
	defer fake.rebootInstancesRequestMutex.RUnlock()
	return len(fake.rebootInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) RebootInstancesRequestCalls(stub func(*ec2.RebootInstancesInput) (*request.Request, *ec2.RebootInstancesOutput)) {
	fake.rebootInstancesRequestMutex.Lock()
	defer fake.rebootInstancesRequestMutex.Unlock()
	fake.RebootInstancesRequestStub = stub
}

func (fake *FakeEC2API) RebootInstancesRequestArgsForCall(i int) *ec2.RebootInstancesInput {
	fake.rebootInstancesRequestMutex.RLock()
	defer fake.rebootInstancesRequestMutex.RUnlock()
	argsForCall := fake.rebootInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RebootInstancesRequestReturns(result1 *request.Request, result2 *ec2.RebootInstancesOutput) {
	fake.rebootInstancesRequestMutex.Lock()
	defer fake.rebootInstancesRequestMutex.Unlock()
	fake.RebootInstancesRequestStub = nil
	fake.rebootInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RebootInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RebootInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RebootInstancesOutput) {
	fake.rebootInstancesRequestMutex.Lock()
	defer fake.rebootInstancesRequestMutex.Unlock()
	fake.RebootInstancesRequestStub = nil
	if fake.rebootInstancesRequestReturnsOnCall == nil {
		fake.rebootInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RebootInstancesOutput
		})
	}
	fake.rebootInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RebootInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RebootInstancesWithContext(arg1 aws.Context, arg2 *ec2.RebootInstancesInput, arg3 ...request.Option) (*ec2.RebootInstancesOutput, error) {
	fake.rebootInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.rebootInstancesWithContextReturnsOnCall[len(fake.rebootInstancesWithContextArgsForCall)]
	fake.rebootInstancesWithContextArgsForCall = append(fake.rebootInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RebootInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RebootInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.rebootInstancesWithContextMutex.Unlock()
	if fake.RebootInstancesWithContextStub != nil {
		return fake.RebootInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rebootInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RebootInstancesWithContextCallCount() int {
	fake.rebootInstancesWithContextMutex.RLock()
	defer fake.rebootInstancesWithContextMutex.RUnlock()
	return len(fake.rebootInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) RebootInstancesWithContextCalls(stub func(aws.Context, *ec2.RebootInstancesInput, ...request.Option) (*ec2.RebootInstancesOutput, error)) {
	fake.rebootInstancesWithContextMutex.Lock()
	defer fake.rebootInstancesWithContextMutex.Unlock()
	fake.RebootInstancesWithContextStub = stub
}

func (fake *FakeEC2API) RebootInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.RebootInstancesInput, []request.Option) {
	fake.rebootInstancesWithContextMutex.RLock()
	defer fake.rebootInstancesWithContextMutex.RUnlock()
	argsForCall := fake.rebootInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RebootInstancesWithContextReturns(result1 *ec2.RebootInstancesOutput, result2 error) {
	fake.rebootInstancesWithContextMutex.Lock()
	defer fake.rebootInstancesWithContextMutex.Unlock()
	fake.RebootInstancesWithContextStub = nil
	fake.rebootInstancesWithContextReturns = struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RebootInstancesWithContextReturnsOnCall(i int, result1 *ec2.RebootInstancesOutput, result2 error) {
	fake.rebootInstancesWithContextMutex.Lock()
	defer fake.rebootInstancesWithContextMutex.Unlock()
	fake.RebootInstancesWithContextStub = nil
	if fake.rebootInstancesWithContextReturnsOnCall == nil {
		fake.rebootInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RebootInstancesOutput
			result2 error
		})
	}
	fake.rebootInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RebootInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RegisterImage(arg1 *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	fake.registerImageMutex.Lock()
	ret, specificReturn := fake.registerImageReturnsOnCall[len(fake.registerImageArgsForCall)]
	fake.registerImageArgsForCall = append(fake.registerImageArgsForCall, struct {
		arg1 *ec2.RegisterImageInput
	}{arg1})
	fake.recordInvocation("RegisterImage", []interface{}{arg1})
	fake.registerImageMutex.Unlock()
	if fake.RegisterImageStub != nil {
		return fake.RegisterImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RegisterImageCallCount() int {
	fake.registerImageMutex.RLock()
	defer fake.registerImageMutex.RUnlock()
	return len(fake.registerImageArgsForCall)
}

func (fake *FakeEC2API) RegisterImageCalls(stub func(*ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error)) {
	fake.registerImageMutex.Lock()
	defer fake.registerImageMutex.Unlock()
	fake.RegisterImageStub = stub
}

func (fake *FakeEC2API) RegisterImageArgsForCall(i int) *ec2.RegisterImageInput {
	fake.registerImageMutex.RLock()
	defer fake.registerImageMutex.RUnlock()
	argsForCall := fake.registerImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RegisterImageReturns(result1 *ec2.RegisterImageOutput, result2 error) {
	fake.registerImageMutex.Lock()
	defer fake.registerImageMutex.Unlock()
	fake.RegisterImageStub = nil
	fake.registerImageReturns = struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RegisterImageReturnsOnCall(i int, result1 *ec2.RegisterImageOutput, result2 error) {
	fake.registerImageMutex.Lock()
	defer fake.registerImageMutex.Unlock()
	fake.RegisterImageStub = nil
	if fake.registerImageReturnsOnCall == nil {
		fake.registerImageReturnsOnCall = make(map[int]struct {
			result1 *ec2.RegisterImageOutput
			result2 error
		})
	}
	fake.registerImageReturnsOnCall[i] = struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RegisterImageRequest(arg1 *ec2.RegisterImageInput) (*request.Request, *ec2.RegisterImageOutput) {
	fake.registerImageRequestMutex.Lock()
	ret, specificReturn := fake.registerImageRequestReturnsOnCall[len(fake.registerImageRequestArgsForCall)]
	fake.registerImageRequestArgsForCall = append(fake.registerImageRequestArgsForCall, struct {
		arg1 *ec2.RegisterImageInput
	}{arg1})
	fake.recordInvocation("RegisterImageRequest", []interface{}{arg1})
	fake.registerImageRequestMutex.Unlock()
	if fake.RegisterImageRequestStub != nil {
		return fake.RegisterImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RegisterImageRequestCallCount() int {
	fake.registerImageRequestMutex.RLock()
	defer fake.registerImageRequestMutex.RUnlock()
	return len(fake.registerImageRequestArgsForCall)
}

func (fake *FakeEC2API) RegisterImageRequestCalls(stub func(*ec2.RegisterImageInput) (*request.Request, *ec2.RegisterImageOutput)) {
	fake.registerImageRequestMutex.Lock()
	defer fake.registerImageRequestMutex.Unlock()
	fake.RegisterImageRequestStub = stub
}

func (fake *FakeEC2API) RegisterImageRequestArgsForCall(i int) *ec2.RegisterImageInput {
	fake.registerImageRequestMutex.RLock()
	defer fake.registerImageRequestMutex.RUnlock()
	argsForCall := fake.registerImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RegisterImageRequestReturns(result1 *request.Request, result2 *ec2.RegisterImageOutput) {
	fake.registerImageRequestMutex.Lock()
	defer fake.registerImageRequestMutex.Unlock()
	fake.RegisterImageRequestStub = nil
	fake.registerImageRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RegisterImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RegisterImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RegisterImageOutput) {
	fake.registerImageRequestMutex.Lock()
	defer fake.registerImageRequestMutex.Unlock()
	fake.RegisterImageRequestStub = nil
	if fake.registerImageRequestReturnsOnCall == nil {
		fake.registerImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RegisterImageOutput
		})
	}
	fake.registerImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RegisterImageOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RegisterImageWithContext(arg1 aws.Context, arg2 *ec2.RegisterImageInput, arg3 ...request.Option) (*ec2.RegisterImageOutput, error) {
	fake.registerImageWithContextMutex.Lock()
	ret, specificReturn := fake.registerImageWithContextReturnsOnCall[len(fake.registerImageWithContextArgsForCall)]
	fake.registerImageWithContextArgsForCall = append(fake.registerImageWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RegisterImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RegisterImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerImageWithContextMutex.Unlock()
	if fake.RegisterImageWithContextStub != nil {
		return fake.RegisterImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RegisterImageWithContextCallCount() int {
	fake.registerImageWithContextMutex.RLock()
	defer fake.registerImageWithContextMutex.RUnlock()
	return len(fake.registerImageWithContextArgsForCall)
}

func (fake *FakeEC2API) RegisterImageWithContextCalls(stub func(aws.Context, *ec2.RegisterImageInput, ...request.Option) (*ec2.RegisterImageOutput, error)) {
	fake.registerImageWithContextMutex.Lock()
	defer fake.registerImageWithContextMutex.Unlock()
	fake.RegisterImageWithContextStub = stub
}

func (fake *FakeEC2API) RegisterImageWithContextArgsForCall(i int) (aws.Context, *ec2.RegisterImageInput, []request.Option) {
	fake.registerImageWithContextMutex.RLock()
	defer fake.registerImageWithContextMutex.RUnlock()
	argsForCall := fake.registerImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RegisterImageWithContextReturns(result1 *ec2.RegisterImageOutput, result2 error) {
	fake.registerImageWithContextMutex.Lock()
	defer fake.registerImageWithContextMutex.Unlock()
	fake.RegisterImageWithContextStub = nil
	fake.registerImageWithContextReturns = struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RegisterImageWithContextReturnsOnCall(i int, result1 *ec2.RegisterImageOutput, result2 error) {
	fake.registerImageWithContextMutex.Lock()
	defer fake.registerImageWithContextMutex.Unlock()
	fake.RegisterImageWithContextStub = nil
	if fake.registerImageWithContextReturnsOnCall == nil {
		fake.registerImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RegisterImageOutput
			result2 error
		})
	}
	fake.registerImageWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RegisterImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachment(arg1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	ret, specificReturn := fake.rejectTransitGatewayVpcAttachmentReturnsOnCall[len(fake.rejectTransitGatewayVpcAttachmentArgsForCall)]
	fake.rejectTransitGatewayVpcAttachmentArgsForCall = append(fake.rejectTransitGatewayVpcAttachmentArgsForCall, struct {
		arg1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("RejectTransitGatewayVpcAttachment", []interface{}{arg1})
	fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	if fake.RejectTransitGatewayVpcAttachmentStub != nil {
		return fake.RejectTransitGatewayVpcAttachmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectTransitGatewayVpcAttachmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentCallCount() int {
	fake.rejectTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.RUnlock()
	return len(fake.rejectTransitGatewayVpcAttachmentArgsForCall)
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentCalls(stub func(*ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentStub = stub
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentArgsForCall(i int) *ec2.RejectTransitGatewayVpcAttachmentInput {
	fake.rejectTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.RUnlock()
	argsForCall := fake.rejectTransitGatewayVpcAttachmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentReturns(result1 *ec2.RejectTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentStub = nil
	fake.rejectTransitGatewayVpcAttachmentReturns = struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentReturnsOnCall(i int, result1 *ec2.RejectTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.rejectTransitGatewayVpcAttachmentMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentStub = nil
	if fake.rejectTransitGatewayVpcAttachmentReturnsOnCall == nil {
		fake.rejectTransitGatewayVpcAttachmentReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.rejectTransitGatewayVpcAttachmentReturnsOnCall[i] = struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentRequest(arg1 *ec2.RejectTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayVpcAttachmentOutput) {
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.Lock()
	ret, specificReturn := fake.rejectTransitGatewayVpcAttachmentRequestReturnsOnCall[len(fake.rejectTransitGatewayVpcAttachmentRequestArgsForCall)]
	fake.rejectTransitGatewayVpcAttachmentRequestArgsForCall = append(fake.rejectTransitGatewayVpcAttachmentRequestArgsForCall, struct {
		arg1 *ec2.RejectTransitGatewayVpcAttachmentInput
	}{arg1})
	fake.recordInvocation("RejectTransitGatewayVpcAttachmentRequest", []interface{}{arg1})
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.Unlock()
	if fake.RejectTransitGatewayVpcAttachmentRequestStub != nil {
		return fake.RejectTransitGatewayVpcAttachmentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectTransitGatewayVpcAttachmentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentRequestCallCount() int {
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	return len(fake.rejectTransitGatewayVpcAttachmentRequestArgsForCall)
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentRequestCalls(stub func(*ec2.RejectTransitGatewayVpcAttachmentInput) (*request.Request, *ec2.RejectTransitGatewayVpcAttachmentOutput)) {
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentRequestStub = stub
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentRequestArgsForCall(i int) *ec2.RejectTransitGatewayVpcAttachmentInput {
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	argsForCall := fake.rejectTransitGatewayVpcAttachmentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentRequestReturns(result1 *request.Request, result2 *ec2.RejectTransitGatewayVpcAttachmentOutput) {
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentRequestStub = nil
	fake.rejectTransitGatewayVpcAttachmentRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RejectTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RejectTransitGatewayVpcAttachmentOutput) {
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentRequestMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentRequestStub = nil
	if fake.rejectTransitGatewayVpcAttachmentRequestReturnsOnCall == nil {
		fake.rejectTransitGatewayVpcAttachmentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RejectTransitGatewayVpcAttachmentOutput
		})
	}
	fake.rejectTransitGatewayVpcAttachmentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RejectTransitGatewayVpcAttachmentOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentWithContext(arg1 aws.Context, arg2 *ec2.RejectTransitGatewayVpcAttachmentInput, arg3 ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Lock()
	ret, specificReturn := fake.rejectTransitGatewayVpcAttachmentWithContextReturnsOnCall[len(fake.rejectTransitGatewayVpcAttachmentWithContextArgsForCall)]
	fake.rejectTransitGatewayVpcAttachmentWithContextArgsForCall = append(fake.rejectTransitGatewayVpcAttachmentWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RejectTransitGatewayVpcAttachmentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RejectTransitGatewayVpcAttachmentWithContext", []interface{}{arg1, arg2, arg3})
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	if fake.RejectTransitGatewayVpcAttachmentWithContextStub != nil {
		return fake.RejectTransitGatewayVpcAttachmentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectTransitGatewayVpcAttachmentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentWithContextCallCount() int {
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	return len(fake.rejectTransitGatewayVpcAttachmentWithContextArgsForCall)
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentWithContextCalls(stub func(aws.Context, *ec2.RejectTransitGatewayVpcAttachmentInput, ...request.Option) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)) {
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentWithContextStub = stub
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentWithContextArgsForCall(i int) (aws.Context, *ec2.RejectTransitGatewayVpcAttachmentInput, []request.Option) {
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	argsForCall := fake.rejectTransitGatewayVpcAttachmentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentWithContextReturns(result1 *ec2.RejectTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentWithContextStub = nil
	fake.rejectTransitGatewayVpcAttachmentWithContextReturns = struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectTransitGatewayVpcAttachmentWithContextReturnsOnCall(i int, result1 *ec2.RejectTransitGatewayVpcAttachmentOutput, result2 error) {
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Lock()
	defer fake.rejectTransitGatewayVpcAttachmentWithContextMutex.Unlock()
	fake.RejectTransitGatewayVpcAttachmentWithContextStub = nil
	if fake.rejectTransitGatewayVpcAttachmentWithContextReturnsOnCall == nil {
		fake.rejectTransitGatewayVpcAttachmentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
			result2 error
		})
	}
	fake.rejectTransitGatewayVpcAttachmentWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RejectTransitGatewayVpcAttachmentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcEndpointConnections(arg1 *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	fake.rejectVpcEndpointConnectionsMutex.Lock()
	ret, specificReturn := fake.rejectVpcEndpointConnectionsReturnsOnCall[len(fake.rejectVpcEndpointConnectionsArgsForCall)]
	fake.rejectVpcEndpointConnectionsArgsForCall = append(fake.rejectVpcEndpointConnectionsArgsForCall, struct {
		arg1 *ec2.RejectVpcEndpointConnectionsInput
	}{arg1})
	fake.recordInvocation("RejectVpcEndpointConnections", []interface{}{arg1})
	fake.rejectVpcEndpointConnectionsMutex.Unlock()
	if fake.RejectVpcEndpointConnectionsStub != nil {
		return fake.RejectVpcEndpointConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectVpcEndpointConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsCallCount() int {
	fake.rejectVpcEndpointConnectionsMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsMutex.RUnlock()
	return len(fake.rejectVpcEndpointConnectionsArgsForCall)
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsCalls(stub func(*ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error)) {
	fake.rejectVpcEndpointConnectionsMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsMutex.Unlock()
	fake.RejectVpcEndpointConnectionsStub = stub
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsArgsForCall(i int) *ec2.RejectVpcEndpointConnectionsInput {
	fake.rejectVpcEndpointConnectionsMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsMutex.RUnlock()
	argsForCall := fake.rejectVpcEndpointConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsReturns(result1 *ec2.RejectVpcEndpointConnectionsOutput, result2 error) {
	fake.rejectVpcEndpointConnectionsMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsMutex.Unlock()
	fake.RejectVpcEndpointConnectionsStub = nil
	fake.rejectVpcEndpointConnectionsReturns = struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsReturnsOnCall(i int, result1 *ec2.RejectVpcEndpointConnectionsOutput, result2 error) {
	fake.rejectVpcEndpointConnectionsMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsMutex.Unlock()
	fake.RejectVpcEndpointConnectionsStub = nil
	if fake.rejectVpcEndpointConnectionsReturnsOnCall == nil {
		fake.rejectVpcEndpointConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectVpcEndpointConnectionsOutput
			result2 error
		})
	}
	fake.rejectVpcEndpointConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsRequest(arg1 *ec2.RejectVpcEndpointConnectionsInput) (*request.Request, *ec2.RejectVpcEndpointConnectionsOutput) {
	fake.rejectVpcEndpointConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.rejectVpcEndpointConnectionsRequestReturnsOnCall[len(fake.rejectVpcEndpointConnectionsRequestArgsForCall)]
	fake.rejectVpcEndpointConnectionsRequestArgsForCall = append(fake.rejectVpcEndpointConnectionsRequestArgsForCall, struct {
		arg1 *ec2.RejectVpcEndpointConnectionsInput
	}{arg1})
	fake.recordInvocation("RejectVpcEndpointConnectionsRequest", []interface{}{arg1})
	fake.rejectVpcEndpointConnectionsRequestMutex.Unlock()
	if fake.RejectVpcEndpointConnectionsRequestStub != nil {
		return fake.RejectVpcEndpointConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectVpcEndpointConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsRequestCallCount() int {
	fake.rejectVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsRequestMutex.RUnlock()
	return len(fake.rejectVpcEndpointConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsRequestCalls(stub func(*ec2.RejectVpcEndpointConnectionsInput) (*request.Request, *ec2.RejectVpcEndpointConnectionsOutput)) {
	fake.rejectVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsRequestMutex.Unlock()
	fake.RejectVpcEndpointConnectionsRequestStub = stub
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsRequestArgsForCall(i int) *ec2.RejectVpcEndpointConnectionsInput {
	fake.rejectVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsRequestMutex.RUnlock()
	argsForCall := fake.rejectVpcEndpointConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsRequestReturns(result1 *request.Request, result2 *ec2.RejectVpcEndpointConnectionsOutput) {
	fake.rejectVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsRequestMutex.Unlock()
	fake.RejectVpcEndpointConnectionsRequestStub = nil
	fake.rejectVpcEndpointConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RejectVpcEndpointConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RejectVpcEndpointConnectionsOutput) {
	fake.rejectVpcEndpointConnectionsRequestMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsRequestMutex.Unlock()
	fake.RejectVpcEndpointConnectionsRequestStub = nil
	if fake.rejectVpcEndpointConnectionsRequestReturnsOnCall == nil {
		fake.rejectVpcEndpointConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RejectVpcEndpointConnectionsOutput
		})
	}
	fake.rejectVpcEndpointConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RejectVpcEndpointConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsWithContext(arg1 aws.Context, arg2 *ec2.RejectVpcEndpointConnectionsInput, arg3 ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	fake.rejectVpcEndpointConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.rejectVpcEndpointConnectionsWithContextReturnsOnCall[len(fake.rejectVpcEndpointConnectionsWithContextArgsForCall)]
	fake.rejectVpcEndpointConnectionsWithContextArgsForCall = append(fake.rejectVpcEndpointConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RejectVpcEndpointConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RejectVpcEndpointConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.rejectVpcEndpointConnectionsWithContextMutex.Unlock()
	if fake.RejectVpcEndpointConnectionsWithContextStub != nil {
		return fake.RejectVpcEndpointConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectVpcEndpointConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsWithContextCallCount() int {
	fake.rejectVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsWithContextMutex.RUnlock()
	return len(fake.rejectVpcEndpointConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsWithContextCalls(stub func(aws.Context, *ec2.RejectVpcEndpointConnectionsInput, ...request.Option) (*ec2.RejectVpcEndpointConnectionsOutput, error)) {
	fake.rejectVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.RejectVpcEndpointConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.RejectVpcEndpointConnectionsInput, []request.Option) {
	fake.rejectVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.rejectVpcEndpointConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsWithContextReturns(result1 *ec2.RejectVpcEndpointConnectionsOutput, result2 error) {
	fake.rejectVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.RejectVpcEndpointConnectionsWithContextStub = nil
	fake.rejectVpcEndpointConnectionsWithContextReturns = struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcEndpointConnectionsWithContextReturnsOnCall(i int, result1 *ec2.RejectVpcEndpointConnectionsOutput, result2 error) {
	fake.rejectVpcEndpointConnectionsWithContextMutex.Lock()
	defer fake.rejectVpcEndpointConnectionsWithContextMutex.Unlock()
	fake.RejectVpcEndpointConnectionsWithContextStub = nil
	if fake.rejectVpcEndpointConnectionsWithContextReturnsOnCall == nil {
		fake.rejectVpcEndpointConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectVpcEndpointConnectionsOutput
			result2 error
		})
	}
	fake.rejectVpcEndpointConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RejectVpcEndpointConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcPeeringConnection(arg1 *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	fake.rejectVpcPeeringConnectionMutex.Lock()
	ret, specificReturn := fake.rejectVpcPeeringConnectionReturnsOnCall[len(fake.rejectVpcPeeringConnectionArgsForCall)]
	fake.rejectVpcPeeringConnectionArgsForCall = append(fake.rejectVpcPeeringConnectionArgsForCall, struct {
		arg1 *ec2.RejectVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("RejectVpcPeeringConnection", []interface{}{arg1})
	fake.rejectVpcPeeringConnectionMutex.Unlock()
	if fake.RejectVpcPeeringConnectionStub != nil {
		return fake.RejectVpcPeeringConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectVpcPeeringConnectionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionCallCount() int {
	fake.rejectVpcPeeringConnectionMutex.RLock()
	defer fake.rejectVpcPeeringConnectionMutex.RUnlock()
	return len(fake.rejectVpcPeeringConnectionArgsForCall)
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionCalls(stub func(*ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error)) {
	fake.rejectVpcPeeringConnectionMutex.Lock()
	defer fake.rejectVpcPeeringConnectionMutex.Unlock()
	fake.RejectVpcPeeringConnectionStub = stub
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionArgsForCall(i int) *ec2.RejectVpcPeeringConnectionInput {
	fake.rejectVpcPeeringConnectionMutex.RLock()
	defer fake.rejectVpcPeeringConnectionMutex.RUnlock()
	argsForCall := fake.rejectVpcPeeringConnectionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionReturns(result1 *ec2.RejectVpcPeeringConnectionOutput, result2 error) {
	fake.rejectVpcPeeringConnectionMutex.Lock()
	defer fake.rejectVpcPeeringConnectionMutex.Unlock()
	fake.RejectVpcPeeringConnectionStub = nil
	fake.rejectVpcPeeringConnectionReturns = struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionReturnsOnCall(i int, result1 *ec2.RejectVpcPeeringConnectionOutput, result2 error) {
	fake.rejectVpcPeeringConnectionMutex.Lock()
	defer fake.rejectVpcPeeringConnectionMutex.Unlock()
	fake.RejectVpcPeeringConnectionStub = nil
	if fake.rejectVpcPeeringConnectionReturnsOnCall == nil {
		fake.rejectVpcPeeringConnectionReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.rejectVpcPeeringConnectionReturnsOnCall[i] = struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionRequest(arg1 *ec2.RejectVpcPeeringConnectionInput) (*request.Request, *ec2.RejectVpcPeeringConnectionOutput) {
	fake.rejectVpcPeeringConnectionRequestMutex.Lock()
	ret, specificReturn := fake.rejectVpcPeeringConnectionRequestReturnsOnCall[len(fake.rejectVpcPeeringConnectionRequestArgsForCall)]
	fake.rejectVpcPeeringConnectionRequestArgsForCall = append(fake.rejectVpcPeeringConnectionRequestArgsForCall, struct {
		arg1 *ec2.RejectVpcPeeringConnectionInput
	}{arg1})
	fake.recordInvocation("RejectVpcPeeringConnectionRequest", []interface{}{arg1})
	fake.rejectVpcPeeringConnectionRequestMutex.Unlock()
	if fake.RejectVpcPeeringConnectionRequestStub != nil {
		return fake.RejectVpcPeeringConnectionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectVpcPeeringConnectionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionRequestCallCount() int {
	fake.rejectVpcPeeringConnectionRequestMutex.RLock()
	defer fake.rejectVpcPeeringConnectionRequestMutex.RUnlock()
	return len(fake.rejectVpcPeeringConnectionRequestArgsForCall)
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionRequestCalls(stub func(*ec2.RejectVpcPeeringConnectionInput) (*request.Request, *ec2.RejectVpcPeeringConnectionOutput)) {
	fake.rejectVpcPeeringConnectionRequestMutex.Lock()
	defer fake.rejectVpcPeeringConnectionRequestMutex.Unlock()
	fake.RejectVpcPeeringConnectionRequestStub = stub
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionRequestArgsForCall(i int) *ec2.RejectVpcPeeringConnectionInput {
	fake.rejectVpcPeeringConnectionRequestMutex.RLock()
	defer fake.rejectVpcPeeringConnectionRequestMutex.RUnlock()
	argsForCall := fake.rejectVpcPeeringConnectionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionRequestReturns(result1 *request.Request, result2 *ec2.RejectVpcPeeringConnectionOutput) {
	fake.rejectVpcPeeringConnectionRequestMutex.Lock()
	defer fake.rejectVpcPeeringConnectionRequestMutex.Unlock()
	fake.RejectVpcPeeringConnectionRequestStub = nil
	fake.rejectVpcPeeringConnectionRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RejectVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RejectVpcPeeringConnectionOutput) {
	fake.rejectVpcPeeringConnectionRequestMutex.Lock()
	defer fake.rejectVpcPeeringConnectionRequestMutex.Unlock()
	fake.RejectVpcPeeringConnectionRequestStub = nil
	if fake.rejectVpcPeeringConnectionRequestReturnsOnCall == nil {
		fake.rejectVpcPeeringConnectionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RejectVpcPeeringConnectionOutput
		})
	}
	fake.rejectVpcPeeringConnectionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RejectVpcPeeringConnectionOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionWithContext(arg1 aws.Context, arg2 *ec2.RejectVpcPeeringConnectionInput, arg3 ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	fake.rejectVpcPeeringConnectionWithContextMutex.Lock()
	ret, specificReturn := fake.rejectVpcPeeringConnectionWithContextReturnsOnCall[len(fake.rejectVpcPeeringConnectionWithContextArgsForCall)]
	fake.rejectVpcPeeringConnectionWithContextArgsForCall = append(fake.rejectVpcPeeringConnectionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RejectVpcPeeringConnectionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RejectVpcPeeringConnectionWithContext", []interface{}{arg1, arg2, arg3})
	fake.rejectVpcPeeringConnectionWithContextMutex.Unlock()
	if fake.RejectVpcPeeringConnectionWithContextStub != nil {
		return fake.RejectVpcPeeringConnectionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.rejectVpcPeeringConnectionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionWithContextCallCount() int {
	fake.rejectVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.rejectVpcPeeringConnectionWithContextMutex.RUnlock()
	return len(fake.rejectVpcPeeringConnectionWithContextArgsForCall)
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionWithContextCalls(stub func(aws.Context, *ec2.RejectVpcPeeringConnectionInput, ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error)) {
	fake.rejectVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.rejectVpcPeeringConnectionWithContextMutex.Unlock()
	fake.RejectVpcPeeringConnectionWithContextStub = stub
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionWithContextArgsForCall(i int) (aws.Context, *ec2.RejectVpcPeeringConnectionInput, []request.Option) {
	fake.rejectVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.rejectVpcPeeringConnectionWithContextMutex.RUnlock()
	argsForCall := fake.rejectVpcPeeringConnectionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionWithContextReturns(result1 *ec2.RejectVpcPeeringConnectionOutput, result2 error) {
	fake.rejectVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.rejectVpcPeeringConnectionWithContextMutex.Unlock()
	fake.RejectVpcPeeringConnectionWithContextStub = nil
	fake.rejectVpcPeeringConnectionWithContextReturns = struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RejectVpcPeeringConnectionWithContextReturnsOnCall(i int, result1 *ec2.RejectVpcPeeringConnectionOutput, result2 error) {
	fake.rejectVpcPeeringConnectionWithContextMutex.Lock()
	defer fake.rejectVpcPeeringConnectionWithContextMutex.Unlock()
	fake.RejectVpcPeeringConnectionWithContextStub = nil
	if fake.rejectVpcPeeringConnectionWithContextReturnsOnCall == nil {
		fake.rejectVpcPeeringConnectionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RejectVpcPeeringConnectionOutput
			result2 error
		})
	}
	fake.rejectVpcPeeringConnectionWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RejectVpcPeeringConnectionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseAddress(arg1 *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	fake.releaseAddressMutex.Lock()
	ret, specificReturn := fake.releaseAddressReturnsOnCall[len(fake.releaseAddressArgsForCall)]
	fake.releaseAddressArgsForCall = append(fake.releaseAddressArgsForCall, struct {
		arg1 *ec2.ReleaseAddressInput
	}{arg1})
	fake.recordInvocation("ReleaseAddress", []interface{}{arg1})
	fake.releaseAddressMutex.Unlock()
	if fake.ReleaseAddressStub != nil {
		return fake.ReleaseAddressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseAddressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReleaseAddressCallCount() int {
	fake.releaseAddressMutex.RLock()
	defer fake.releaseAddressMutex.RUnlock()
	return len(fake.releaseAddressArgsForCall)
}

func (fake *FakeEC2API) ReleaseAddressCalls(stub func(*ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error)) {
	fake.releaseAddressMutex.Lock()
	defer fake.releaseAddressMutex.Unlock()
	fake.ReleaseAddressStub = stub
}

func (fake *FakeEC2API) ReleaseAddressArgsForCall(i int) *ec2.ReleaseAddressInput {
	fake.releaseAddressMutex.RLock()
	defer fake.releaseAddressMutex.RUnlock()
	argsForCall := fake.releaseAddressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReleaseAddressReturns(result1 *ec2.ReleaseAddressOutput, result2 error) {
	fake.releaseAddressMutex.Lock()
	defer fake.releaseAddressMutex.Unlock()
	fake.ReleaseAddressStub = nil
	fake.releaseAddressReturns = struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseAddressReturnsOnCall(i int, result1 *ec2.ReleaseAddressOutput, result2 error) {
	fake.releaseAddressMutex.Lock()
	defer fake.releaseAddressMutex.Unlock()
	fake.ReleaseAddressStub = nil
	if fake.releaseAddressReturnsOnCall == nil {
		fake.releaseAddressReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReleaseAddressOutput
			result2 error
		})
	}
	fake.releaseAddressReturnsOnCall[i] = struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseAddressRequest(arg1 *ec2.ReleaseAddressInput) (*request.Request, *ec2.ReleaseAddressOutput) {
	fake.releaseAddressRequestMutex.Lock()
	ret, specificReturn := fake.releaseAddressRequestReturnsOnCall[len(fake.releaseAddressRequestArgsForCall)]
	fake.releaseAddressRequestArgsForCall = append(fake.releaseAddressRequestArgsForCall, struct {
		arg1 *ec2.ReleaseAddressInput
	}{arg1})
	fake.recordInvocation("ReleaseAddressRequest", []interface{}{arg1})
	fake.releaseAddressRequestMutex.Unlock()
	if fake.ReleaseAddressRequestStub != nil {
		return fake.ReleaseAddressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseAddressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReleaseAddressRequestCallCount() int {
	fake.releaseAddressRequestMutex.RLock()
	defer fake.releaseAddressRequestMutex.RUnlock()
	return len(fake.releaseAddressRequestArgsForCall)
}

func (fake *FakeEC2API) ReleaseAddressRequestCalls(stub func(*ec2.ReleaseAddressInput) (*request.Request, *ec2.ReleaseAddressOutput)) {
	fake.releaseAddressRequestMutex.Lock()
	defer fake.releaseAddressRequestMutex.Unlock()
	fake.ReleaseAddressRequestStub = stub
}

func (fake *FakeEC2API) ReleaseAddressRequestArgsForCall(i int) *ec2.ReleaseAddressInput {
	fake.releaseAddressRequestMutex.RLock()
	defer fake.releaseAddressRequestMutex.RUnlock()
	argsForCall := fake.releaseAddressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReleaseAddressRequestReturns(result1 *request.Request, result2 *ec2.ReleaseAddressOutput) {
	fake.releaseAddressRequestMutex.Lock()
	defer fake.releaseAddressRequestMutex.Unlock()
	fake.ReleaseAddressRequestStub = nil
	fake.releaseAddressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReleaseAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseAddressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReleaseAddressOutput) {
	fake.releaseAddressRequestMutex.Lock()
	defer fake.releaseAddressRequestMutex.Unlock()
	fake.ReleaseAddressRequestStub = nil
	if fake.releaseAddressRequestReturnsOnCall == nil {
		fake.releaseAddressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReleaseAddressOutput
		})
	}
	fake.releaseAddressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReleaseAddressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseAddressWithContext(arg1 aws.Context, arg2 *ec2.ReleaseAddressInput, arg3 ...request.Option) (*ec2.ReleaseAddressOutput, error) {
	fake.releaseAddressWithContextMutex.Lock()
	ret, specificReturn := fake.releaseAddressWithContextReturnsOnCall[len(fake.releaseAddressWithContextArgsForCall)]
	fake.releaseAddressWithContextArgsForCall = append(fake.releaseAddressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReleaseAddressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReleaseAddressWithContext", []interface{}{arg1, arg2, arg3})
	fake.releaseAddressWithContextMutex.Unlock()
	if fake.ReleaseAddressWithContextStub != nil {
		return fake.ReleaseAddressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseAddressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReleaseAddressWithContextCallCount() int {
	fake.releaseAddressWithContextMutex.RLock()
	defer fake.releaseAddressWithContextMutex.RUnlock()
	return len(fake.releaseAddressWithContextArgsForCall)
}

func (fake *FakeEC2API) ReleaseAddressWithContextCalls(stub func(aws.Context, *ec2.ReleaseAddressInput, ...request.Option) (*ec2.ReleaseAddressOutput, error)) {
	fake.releaseAddressWithContextMutex.Lock()
	defer fake.releaseAddressWithContextMutex.Unlock()
	fake.ReleaseAddressWithContextStub = stub
}

func (fake *FakeEC2API) ReleaseAddressWithContextArgsForCall(i int) (aws.Context, *ec2.ReleaseAddressInput, []request.Option) {
	fake.releaseAddressWithContextMutex.RLock()
	defer fake.releaseAddressWithContextMutex.RUnlock()
	argsForCall := fake.releaseAddressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReleaseAddressWithContextReturns(result1 *ec2.ReleaseAddressOutput, result2 error) {
	fake.releaseAddressWithContextMutex.Lock()
	defer fake.releaseAddressWithContextMutex.Unlock()
	fake.ReleaseAddressWithContextStub = nil
	fake.releaseAddressWithContextReturns = struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseAddressWithContextReturnsOnCall(i int, result1 *ec2.ReleaseAddressOutput, result2 error) {
	fake.releaseAddressWithContextMutex.Lock()
	defer fake.releaseAddressWithContextMutex.Unlock()
	fake.ReleaseAddressWithContextStub = nil
	if fake.releaseAddressWithContextReturnsOnCall == nil {
		fake.releaseAddressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReleaseAddressOutput
			result2 error
		})
	}
	fake.releaseAddressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReleaseAddressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseHosts(arg1 *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
	fake.releaseHostsMutex.Lock()
	ret, specificReturn := fake.releaseHostsReturnsOnCall[len(fake.releaseHostsArgsForCall)]
	fake.releaseHostsArgsForCall = append(fake.releaseHostsArgsForCall, struct {
		arg1 *ec2.ReleaseHostsInput
	}{arg1})
	fake.recordInvocation("ReleaseHosts", []interface{}{arg1})
	fake.releaseHostsMutex.Unlock()
	if fake.ReleaseHostsStub != nil {
		return fake.ReleaseHostsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseHostsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReleaseHostsCallCount() int {
	fake.releaseHostsMutex.RLock()
	defer fake.releaseHostsMutex.RUnlock()
	return len(fake.releaseHostsArgsForCall)
}

func (fake *FakeEC2API) ReleaseHostsCalls(stub func(*ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error)) {
	fake.releaseHostsMutex.Lock()
	defer fake.releaseHostsMutex.Unlock()
	fake.ReleaseHostsStub = stub
}

func (fake *FakeEC2API) ReleaseHostsArgsForCall(i int) *ec2.ReleaseHostsInput {
	fake.releaseHostsMutex.RLock()
	defer fake.releaseHostsMutex.RUnlock()
	argsForCall := fake.releaseHostsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReleaseHostsReturns(result1 *ec2.ReleaseHostsOutput, result2 error) {
	fake.releaseHostsMutex.Lock()
	defer fake.releaseHostsMutex.Unlock()
	fake.ReleaseHostsStub = nil
	fake.releaseHostsReturns = struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseHostsReturnsOnCall(i int, result1 *ec2.ReleaseHostsOutput, result2 error) {
	fake.releaseHostsMutex.Lock()
	defer fake.releaseHostsMutex.Unlock()
	fake.ReleaseHostsStub = nil
	if fake.releaseHostsReturnsOnCall == nil {
		fake.releaseHostsReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReleaseHostsOutput
			result2 error
		})
	}
	fake.releaseHostsReturnsOnCall[i] = struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseHostsRequest(arg1 *ec2.ReleaseHostsInput) (*request.Request, *ec2.ReleaseHostsOutput) {
	fake.releaseHostsRequestMutex.Lock()
	ret, specificReturn := fake.releaseHostsRequestReturnsOnCall[len(fake.releaseHostsRequestArgsForCall)]
	fake.releaseHostsRequestArgsForCall = append(fake.releaseHostsRequestArgsForCall, struct {
		arg1 *ec2.ReleaseHostsInput
	}{arg1})
	fake.recordInvocation("ReleaseHostsRequest", []interface{}{arg1})
	fake.releaseHostsRequestMutex.Unlock()
	if fake.ReleaseHostsRequestStub != nil {
		return fake.ReleaseHostsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseHostsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReleaseHostsRequestCallCount() int {
	fake.releaseHostsRequestMutex.RLock()
	defer fake.releaseHostsRequestMutex.RUnlock()
	return len(fake.releaseHostsRequestArgsForCall)
}

func (fake *FakeEC2API) ReleaseHostsRequestCalls(stub func(*ec2.ReleaseHostsInput) (*request.Request, *ec2.ReleaseHostsOutput)) {
	fake.releaseHostsRequestMutex.Lock()
	defer fake.releaseHostsRequestMutex.Unlock()
	fake.ReleaseHostsRequestStub = stub
}

func (fake *FakeEC2API) ReleaseHostsRequestArgsForCall(i int) *ec2.ReleaseHostsInput {
	fake.releaseHostsRequestMutex.RLock()
	defer fake.releaseHostsRequestMutex.RUnlock()
	argsForCall := fake.releaseHostsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReleaseHostsRequestReturns(result1 *request.Request, result2 *ec2.ReleaseHostsOutput) {
	fake.releaseHostsRequestMutex.Lock()
	defer fake.releaseHostsRequestMutex.Unlock()
	fake.ReleaseHostsRequestStub = nil
	fake.releaseHostsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReleaseHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseHostsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReleaseHostsOutput) {
	fake.releaseHostsRequestMutex.Lock()
	defer fake.releaseHostsRequestMutex.Unlock()
	fake.ReleaseHostsRequestStub = nil
	if fake.releaseHostsRequestReturnsOnCall == nil {
		fake.releaseHostsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReleaseHostsOutput
		})
	}
	fake.releaseHostsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReleaseHostsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseHostsWithContext(arg1 aws.Context, arg2 *ec2.ReleaseHostsInput, arg3 ...request.Option) (*ec2.ReleaseHostsOutput, error) {
	fake.releaseHostsWithContextMutex.Lock()
	ret, specificReturn := fake.releaseHostsWithContextReturnsOnCall[len(fake.releaseHostsWithContextArgsForCall)]
	fake.releaseHostsWithContextArgsForCall = append(fake.releaseHostsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReleaseHostsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReleaseHostsWithContext", []interface{}{arg1, arg2, arg3})
	fake.releaseHostsWithContextMutex.Unlock()
	if fake.ReleaseHostsWithContextStub != nil {
		return fake.ReleaseHostsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseHostsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReleaseHostsWithContextCallCount() int {
	fake.releaseHostsWithContextMutex.RLock()
	defer fake.releaseHostsWithContextMutex.RUnlock()
	return len(fake.releaseHostsWithContextArgsForCall)
}

func (fake *FakeEC2API) ReleaseHostsWithContextCalls(stub func(aws.Context, *ec2.ReleaseHostsInput, ...request.Option) (*ec2.ReleaseHostsOutput, error)) {
	fake.releaseHostsWithContextMutex.Lock()
	defer fake.releaseHostsWithContextMutex.Unlock()
	fake.ReleaseHostsWithContextStub = stub
}

func (fake *FakeEC2API) ReleaseHostsWithContextArgsForCall(i int) (aws.Context, *ec2.ReleaseHostsInput, []request.Option) {
	fake.releaseHostsWithContextMutex.RLock()
	defer fake.releaseHostsWithContextMutex.RUnlock()
	argsForCall := fake.releaseHostsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReleaseHostsWithContextReturns(result1 *ec2.ReleaseHostsOutput, result2 error) {
	fake.releaseHostsWithContextMutex.Lock()
	defer fake.releaseHostsWithContextMutex.Unlock()
	fake.ReleaseHostsWithContextStub = nil
	fake.releaseHostsWithContextReturns = struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReleaseHostsWithContextReturnsOnCall(i int, result1 *ec2.ReleaseHostsOutput, result2 error) {
	fake.releaseHostsWithContextMutex.Lock()
	defer fake.releaseHostsWithContextMutex.Unlock()
	fake.ReleaseHostsWithContextStub = nil
	if fake.releaseHostsWithContextReturnsOnCall == nil {
		fake.releaseHostsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReleaseHostsOutput
			result2 error
		})
	}
	fake.releaseHostsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReleaseHostsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociation(arg1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	fake.replaceIamInstanceProfileAssociationMutex.Lock()
	ret, specificReturn := fake.replaceIamInstanceProfileAssociationReturnsOnCall[len(fake.replaceIamInstanceProfileAssociationArgsForCall)]
	fake.replaceIamInstanceProfileAssociationArgsForCall = append(fake.replaceIamInstanceProfileAssociationArgsForCall, struct {
		arg1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}{arg1})
	fake.recordInvocation("ReplaceIamInstanceProfileAssociation", []interface{}{arg1})
	fake.replaceIamInstanceProfileAssociationMutex.Unlock()
	if fake.ReplaceIamInstanceProfileAssociationStub != nil {
		return fake.ReplaceIamInstanceProfileAssociationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceIamInstanceProfileAssociationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationCallCount() int {
	fake.replaceIamInstanceProfileAssociationMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationMutex.RUnlock()
	return len(fake.replaceIamInstanceProfileAssociationArgsForCall)
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationCalls(stub func(*ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)) {
	fake.replaceIamInstanceProfileAssociationMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationStub = stub
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationArgsForCall(i int) *ec2.ReplaceIamInstanceProfileAssociationInput {
	fake.replaceIamInstanceProfileAssociationMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationMutex.RUnlock()
	argsForCall := fake.replaceIamInstanceProfileAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationReturns(result1 *ec2.ReplaceIamInstanceProfileAssociationOutput, result2 error) {
	fake.replaceIamInstanceProfileAssociationMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationStub = nil
	fake.replaceIamInstanceProfileAssociationReturns = struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationReturnsOnCall(i int, result1 *ec2.ReplaceIamInstanceProfileAssociationOutput, result2 error) {
	fake.replaceIamInstanceProfileAssociationMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationStub = nil
	if fake.replaceIamInstanceProfileAssociationReturnsOnCall == nil {
		fake.replaceIamInstanceProfileAssociationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
			result2 error
		})
	}
	fake.replaceIamInstanceProfileAssociationReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationRequest(arg1 *ec2.ReplaceIamInstanceProfileAssociationInput) (*request.Request, *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	fake.replaceIamInstanceProfileAssociationRequestMutex.Lock()
	ret, specificReturn := fake.replaceIamInstanceProfileAssociationRequestReturnsOnCall[len(fake.replaceIamInstanceProfileAssociationRequestArgsForCall)]
	fake.replaceIamInstanceProfileAssociationRequestArgsForCall = append(fake.replaceIamInstanceProfileAssociationRequestArgsForCall, struct {
		arg1 *ec2.ReplaceIamInstanceProfileAssociationInput
	}{arg1})
	fake.recordInvocation("ReplaceIamInstanceProfileAssociationRequest", []interface{}{arg1})
	fake.replaceIamInstanceProfileAssociationRequestMutex.Unlock()
	if fake.ReplaceIamInstanceProfileAssociationRequestStub != nil {
		return fake.ReplaceIamInstanceProfileAssociationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceIamInstanceProfileAssociationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationRequestCallCount() int {
	fake.replaceIamInstanceProfileAssociationRequestMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationRequestMutex.RUnlock()
	return len(fake.replaceIamInstanceProfileAssociationRequestArgsForCall)
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationRequestCalls(stub func(*ec2.ReplaceIamInstanceProfileAssociationInput) (*request.Request, *ec2.ReplaceIamInstanceProfileAssociationOutput)) {
	fake.replaceIamInstanceProfileAssociationRequestMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationRequestMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationRequestStub = stub
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationRequestArgsForCall(i int) *ec2.ReplaceIamInstanceProfileAssociationInput {
	fake.replaceIamInstanceProfileAssociationRequestMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationRequestMutex.RUnlock()
	argsForCall := fake.replaceIamInstanceProfileAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationRequestReturns(result1 *request.Request, result2 *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	fake.replaceIamInstanceProfileAssociationRequestMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationRequestMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationRequestStub = nil
	fake.replaceIamInstanceProfileAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReplaceIamInstanceProfileAssociationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	fake.replaceIamInstanceProfileAssociationRequestMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationRequestMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationRequestStub = nil
	if fake.replaceIamInstanceProfileAssociationRequestReturnsOnCall == nil {
		fake.replaceIamInstanceProfileAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReplaceIamInstanceProfileAssociationOutput
		})
	}
	fake.replaceIamInstanceProfileAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReplaceIamInstanceProfileAssociationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationWithContext(arg1 aws.Context, arg2 *ec2.ReplaceIamInstanceProfileAssociationInput, arg3 ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	fake.replaceIamInstanceProfileAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.replaceIamInstanceProfileAssociationWithContextReturnsOnCall[len(fake.replaceIamInstanceProfileAssociationWithContextArgsForCall)]
	fake.replaceIamInstanceProfileAssociationWithContextArgsForCall = append(fake.replaceIamInstanceProfileAssociationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceIamInstanceProfileAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReplaceIamInstanceProfileAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.replaceIamInstanceProfileAssociationWithContextMutex.Unlock()
	if fake.ReplaceIamInstanceProfileAssociationWithContextStub != nil {
		return fake.ReplaceIamInstanceProfileAssociationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceIamInstanceProfileAssociationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationWithContextCallCount() int {
	fake.replaceIamInstanceProfileAssociationWithContextMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationWithContextMutex.RUnlock()
	return len(fake.replaceIamInstanceProfileAssociationWithContextArgsForCall)
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationWithContextCalls(stub func(aws.Context, *ec2.ReplaceIamInstanceProfileAssociationInput, ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)) {
	fake.replaceIamInstanceProfileAssociationWithContextMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationWithContextMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationWithContextStub = stub
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationWithContextArgsForCall(i int) (aws.Context, *ec2.ReplaceIamInstanceProfileAssociationInput, []request.Option) {
	fake.replaceIamInstanceProfileAssociationWithContextMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationWithContextMutex.RUnlock()
	argsForCall := fake.replaceIamInstanceProfileAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationWithContextReturns(result1 *ec2.ReplaceIamInstanceProfileAssociationOutput, result2 error) {
	fake.replaceIamInstanceProfileAssociationWithContextMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationWithContextMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationWithContextStub = nil
	fake.replaceIamInstanceProfileAssociationWithContextReturns = struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceIamInstanceProfileAssociationWithContextReturnsOnCall(i int, result1 *ec2.ReplaceIamInstanceProfileAssociationOutput, result2 error) {
	fake.replaceIamInstanceProfileAssociationWithContextMutex.Lock()
	defer fake.replaceIamInstanceProfileAssociationWithContextMutex.Unlock()
	fake.ReplaceIamInstanceProfileAssociationWithContextStub = nil
	if fake.replaceIamInstanceProfileAssociationWithContextReturnsOnCall == nil {
		fake.replaceIamInstanceProfileAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
			result2 error
		})
	}
	fake.replaceIamInstanceProfileAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceIamInstanceProfileAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociation(arg1 *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	fake.replaceNetworkAclAssociationMutex.Lock()
	ret, specificReturn := fake.replaceNetworkAclAssociationReturnsOnCall[len(fake.replaceNetworkAclAssociationArgsForCall)]
	fake.replaceNetworkAclAssociationArgsForCall = append(fake.replaceNetworkAclAssociationArgsForCall, struct {
		arg1 *ec2.ReplaceNetworkAclAssociationInput
	}{arg1})
	fake.recordInvocation("ReplaceNetworkAclAssociation", []interface{}{arg1})
	fake.replaceNetworkAclAssociationMutex.Unlock()
	if fake.ReplaceNetworkAclAssociationStub != nil {
		return fake.ReplaceNetworkAclAssociationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceNetworkAclAssociationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationCallCount() int {
	fake.replaceNetworkAclAssociationMutex.RLock()
	defer fake.replaceNetworkAclAssociationMutex.RUnlock()
	return len(fake.replaceNetworkAclAssociationArgsForCall)
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationCalls(stub func(*ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error)) {
	fake.replaceNetworkAclAssociationMutex.Lock()
	defer fake.replaceNetworkAclAssociationMutex.Unlock()
	fake.ReplaceNetworkAclAssociationStub = stub
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationArgsForCall(i int) *ec2.ReplaceNetworkAclAssociationInput {
	fake.replaceNetworkAclAssociationMutex.RLock()
	defer fake.replaceNetworkAclAssociationMutex.RUnlock()
	argsForCall := fake.replaceNetworkAclAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationReturns(result1 *ec2.ReplaceNetworkAclAssociationOutput, result2 error) {
	fake.replaceNetworkAclAssociationMutex.Lock()
	defer fake.replaceNetworkAclAssociationMutex.Unlock()
	fake.ReplaceNetworkAclAssociationStub = nil
	fake.replaceNetworkAclAssociationReturns = struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationReturnsOnCall(i int, result1 *ec2.ReplaceNetworkAclAssociationOutput, result2 error) {
	fake.replaceNetworkAclAssociationMutex.Lock()
	defer fake.replaceNetworkAclAssociationMutex.Unlock()
	fake.ReplaceNetworkAclAssociationStub = nil
	if fake.replaceNetworkAclAssociationReturnsOnCall == nil {
		fake.replaceNetworkAclAssociationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceNetworkAclAssociationOutput
			result2 error
		})
	}
	fake.replaceNetworkAclAssociationReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationRequest(arg1 *ec2.ReplaceNetworkAclAssociationInput) (*request.Request, *ec2.ReplaceNetworkAclAssociationOutput) {
	fake.replaceNetworkAclAssociationRequestMutex.Lock()
	ret, specificReturn := fake.replaceNetworkAclAssociationRequestReturnsOnCall[len(fake.replaceNetworkAclAssociationRequestArgsForCall)]
	fake.replaceNetworkAclAssociationRequestArgsForCall = append(fake.replaceNetworkAclAssociationRequestArgsForCall, struct {
		arg1 *ec2.ReplaceNetworkAclAssociationInput
	}{arg1})
	fake.recordInvocation("ReplaceNetworkAclAssociationRequest", []interface{}{arg1})
	fake.replaceNetworkAclAssociationRequestMutex.Unlock()
	if fake.ReplaceNetworkAclAssociationRequestStub != nil {
		return fake.ReplaceNetworkAclAssociationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceNetworkAclAssociationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationRequestCallCount() int {
	fake.replaceNetworkAclAssociationRequestMutex.RLock()
	defer fake.replaceNetworkAclAssociationRequestMutex.RUnlock()
	return len(fake.replaceNetworkAclAssociationRequestArgsForCall)
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationRequestCalls(stub func(*ec2.ReplaceNetworkAclAssociationInput) (*request.Request, *ec2.ReplaceNetworkAclAssociationOutput)) {
	fake.replaceNetworkAclAssociationRequestMutex.Lock()
	defer fake.replaceNetworkAclAssociationRequestMutex.Unlock()
	fake.ReplaceNetworkAclAssociationRequestStub = stub
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationRequestArgsForCall(i int) *ec2.ReplaceNetworkAclAssociationInput {
	fake.replaceNetworkAclAssociationRequestMutex.RLock()
	defer fake.replaceNetworkAclAssociationRequestMutex.RUnlock()
	argsForCall := fake.replaceNetworkAclAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationRequestReturns(result1 *request.Request, result2 *ec2.ReplaceNetworkAclAssociationOutput) {
	fake.replaceNetworkAclAssociationRequestMutex.Lock()
	defer fake.replaceNetworkAclAssociationRequestMutex.Unlock()
	fake.ReplaceNetworkAclAssociationRequestStub = nil
	fake.replaceNetworkAclAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclAssociationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReplaceNetworkAclAssociationOutput) {
	fake.replaceNetworkAclAssociationRequestMutex.Lock()
	defer fake.replaceNetworkAclAssociationRequestMutex.Unlock()
	fake.ReplaceNetworkAclAssociationRequestStub = nil
	if fake.replaceNetworkAclAssociationRequestReturnsOnCall == nil {
		fake.replaceNetworkAclAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReplaceNetworkAclAssociationOutput
		})
	}
	fake.replaceNetworkAclAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclAssociationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationWithContext(arg1 aws.Context, arg2 *ec2.ReplaceNetworkAclAssociationInput, arg3 ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	fake.replaceNetworkAclAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.replaceNetworkAclAssociationWithContextReturnsOnCall[len(fake.replaceNetworkAclAssociationWithContextArgsForCall)]
	fake.replaceNetworkAclAssociationWithContextArgsForCall = append(fake.replaceNetworkAclAssociationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceNetworkAclAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReplaceNetworkAclAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.replaceNetworkAclAssociationWithContextMutex.Unlock()
	if fake.ReplaceNetworkAclAssociationWithContextStub != nil {
		return fake.ReplaceNetworkAclAssociationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceNetworkAclAssociationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationWithContextCallCount() int {
	fake.replaceNetworkAclAssociationWithContextMutex.RLock()
	defer fake.replaceNetworkAclAssociationWithContextMutex.RUnlock()
	return len(fake.replaceNetworkAclAssociationWithContextArgsForCall)
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationWithContextCalls(stub func(aws.Context, *ec2.ReplaceNetworkAclAssociationInput, ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error)) {
	fake.replaceNetworkAclAssociationWithContextMutex.Lock()
	defer fake.replaceNetworkAclAssociationWithContextMutex.Unlock()
	fake.ReplaceNetworkAclAssociationWithContextStub = stub
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationWithContextArgsForCall(i int) (aws.Context, *ec2.ReplaceNetworkAclAssociationInput, []request.Option) {
	fake.replaceNetworkAclAssociationWithContextMutex.RLock()
	defer fake.replaceNetworkAclAssociationWithContextMutex.RUnlock()
	argsForCall := fake.replaceNetworkAclAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationWithContextReturns(result1 *ec2.ReplaceNetworkAclAssociationOutput, result2 error) {
	fake.replaceNetworkAclAssociationWithContextMutex.Lock()
	defer fake.replaceNetworkAclAssociationWithContextMutex.Unlock()
	fake.ReplaceNetworkAclAssociationWithContextStub = nil
	fake.replaceNetworkAclAssociationWithContextReturns = struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclAssociationWithContextReturnsOnCall(i int, result1 *ec2.ReplaceNetworkAclAssociationOutput, result2 error) {
	fake.replaceNetworkAclAssociationWithContextMutex.Lock()
	defer fake.replaceNetworkAclAssociationWithContextMutex.Unlock()
	fake.ReplaceNetworkAclAssociationWithContextStub = nil
	if fake.replaceNetworkAclAssociationWithContextReturnsOnCall == nil {
		fake.replaceNetworkAclAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceNetworkAclAssociationOutput
			result2 error
		})
	}
	fake.replaceNetworkAclAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceNetworkAclAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclEntry(arg1 *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	fake.replaceNetworkAclEntryMutex.Lock()
	ret, specificReturn := fake.replaceNetworkAclEntryReturnsOnCall[len(fake.replaceNetworkAclEntryArgsForCall)]
	fake.replaceNetworkAclEntryArgsForCall = append(fake.replaceNetworkAclEntryArgsForCall, struct {
		arg1 *ec2.ReplaceNetworkAclEntryInput
	}{arg1})
	fake.recordInvocation("ReplaceNetworkAclEntry", []interface{}{arg1})
	fake.replaceNetworkAclEntryMutex.Unlock()
	if fake.ReplaceNetworkAclEntryStub != nil {
		return fake.ReplaceNetworkAclEntryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceNetworkAclEntryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryCallCount() int {
	fake.replaceNetworkAclEntryMutex.RLock()
	defer fake.replaceNetworkAclEntryMutex.RUnlock()
	return len(fake.replaceNetworkAclEntryArgsForCall)
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryCalls(stub func(*ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error)) {
	fake.replaceNetworkAclEntryMutex.Lock()
	defer fake.replaceNetworkAclEntryMutex.Unlock()
	fake.ReplaceNetworkAclEntryStub = stub
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryArgsForCall(i int) *ec2.ReplaceNetworkAclEntryInput {
	fake.replaceNetworkAclEntryMutex.RLock()
	defer fake.replaceNetworkAclEntryMutex.RUnlock()
	argsForCall := fake.replaceNetworkAclEntryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryReturns(result1 *ec2.ReplaceNetworkAclEntryOutput, result2 error) {
	fake.replaceNetworkAclEntryMutex.Lock()
	defer fake.replaceNetworkAclEntryMutex.Unlock()
	fake.ReplaceNetworkAclEntryStub = nil
	fake.replaceNetworkAclEntryReturns = struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryReturnsOnCall(i int, result1 *ec2.ReplaceNetworkAclEntryOutput, result2 error) {
	fake.replaceNetworkAclEntryMutex.Lock()
	defer fake.replaceNetworkAclEntryMutex.Unlock()
	fake.ReplaceNetworkAclEntryStub = nil
	if fake.replaceNetworkAclEntryReturnsOnCall == nil {
		fake.replaceNetworkAclEntryReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceNetworkAclEntryOutput
			result2 error
		})
	}
	fake.replaceNetworkAclEntryReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryRequest(arg1 *ec2.ReplaceNetworkAclEntryInput) (*request.Request, *ec2.ReplaceNetworkAclEntryOutput) {
	fake.replaceNetworkAclEntryRequestMutex.Lock()
	ret, specificReturn := fake.replaceNetworkAclEntryRequestReturnsOnCall[len(fake.replaceNetworkAclEntryRequestArgsForCall)]
	fake.replaceNetworkAclEntryRequestArgsForCall = append(fake.replaceNetworkAclEntryRequestArgsForCall, struct {
		arg1 *ec2.ReplaceNetworkAclEntryInput
	}{arg1})
	fake.recordInvocation("ReplaceNetworkAclEntryRequest", []interface{}{arg1})
	fake.replaceNetworkAclEntryRequestMutex.Unlock()
	if fake.ReplaceNetworkAclEntryRequestStub != nil {
		return fake.ReplaceNetworkAclEntryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceNetworkAclEntryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryRequestCallCount() int {
	fake.replaceNetworkAclEntryRequestMutex.RLock()
	defer fake.replaceNetworkAclEntryRequestMutex.RUnlock()
	return len(fake.replaceNetworkAclEntryRequestArgsForCall)
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryRequestCalls(stub func(*ec2.ReplaceNetworkAclEntryInput) (*request.Request, *ec2.ReplaceNetworkAclEntryOutput)) {
	fake.replaceNetworkAclEntryRequestMutex.Lock()
	defer fake.replaceNetworkAclEntryRequestMutex.Unlock()
	fake.ReplaceNetworkAclEntryRequestStub = stub
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryRequestArgsForCall(i int) *ec2.ReplaceNetworkAclEntryInput {
	fake.replaceNetworkAclEntryRequestMutex.RLock()
	defer fake.replaceNetworkAclEntryRequestMutex.RUnlock()
	argsForCall := fake.replaceNetworkAclEntryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryRequestReturns(result1 *request.Request, result2 *ec2.ReplaceNetworkAclEntryOutput) {
	fake.replaceNetworkAclEntryRequestMutex.Lock()
	defer fake.replaceNetworkAclEntryRequestMutex.Unlock()
	fake.ReplaceNetworkAclEntryRequestStub = nil
	fake.replaceNetworkAclEntryRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclEntryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReplaceNetworkAclEntryOutput) {
	fake.replaceNetworkAclEntryRequestMutex.Lock()
	defer fake.replaceNetworkAclEntryRequestMutex.Unlock()
	fake.ReplaceNetworkAclEntryRequestStub = nil
	if fake.replaceNetworkAclEntryRequestReturnsOnCall == nil {
		fake.replaceNetworkAclEntryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReplaceNetworkAclEntryOutput
		})
	}
	fake.replaceNetworkAclEntryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReplaceNetworkAclEntryOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryWithContext(arg1 aws.Context, arg2 *ec2.ReplaceNetworkAclEntryInput, arg3 ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	fake.replaceNetworkAclEntryWithContextMutex.Lock()
	ret, specificReturn := fake.replaceNetworkAclEntryWithContextReturnsOnCall[len(fake.replaceNetworkAclEntryWithContextArgsForCall)]
	fake.replaceNetworkAclEntryWithContextArgsForCall = append(fake.replaceNetworkAclEntryWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceNetworkAclEntryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReplaceNetworkAclEntryWithContext", []interface{}{arg1, arg2, arg3})
	fake.replaceNetworkAclEntryWithContextMutex.Unlock()
	if fake.ReplaceNetworkAclEntryWithContextStub != nil {
		return fake.ReplaceNetworkAclEntryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceNetworkAclEntryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryWithContextCallCount() int {
	fake.replaceNetworkAclEntryWithContextMutex.RLock()
	defer fake.replaceNetworkAclEntryWithContextMutex.RUnlock()
	return len(fake.replaceNetworkAclEntryWithContextArgsForCall)
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryWithContextCalls(stub func(aws.Context, *ec2.ReplaceNetworkAclEntryInput, ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error)) {
	fake.replaceNetworkAclEntryWithContextMutex.Lock()
	defer fake.replaceNetworkAclEntryWithContextMutex.Unlock()
	fake.ReplaceNetworkAclEntryWithContextStub = stub
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryWithContextArgsForCall(i int) (aws.Context, *ec2.ReplaceNetworkAclEntryInput, []request.Option) {
	fake.replaceNetworkAclEntryWithContextMutex.RLock()
	defer fake.replaceNetworkAclEntryWithContextMutex.RUnlock()
	argsForCall := fake.replaceNetworkAclEntryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryWithContextReturns(result1 *ec2.ReplaceNetworkAclEntryOutput, result2 error) {
	fake.replaceNetworkAclEntryWithContextMutex.Lock()
	defer fake.replaceNetworkAclEntryWithContextMutex.Unlock()
	fake.ReplaceNetworkAclEntryWithContextStub = nil
	fake.replaceNetworkAclEntryWithContextReturns = struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceNetworkAclEntryWithContextReturnsOnCall(i int, result1 *ec2.ReplaceNetworkAclEntryOutput, result2 error) {
	fake.replaceNetworkAclEntryWithContextMutex.Lock()
	defer fake.replaceNetworkAclEntryWithContextMutex.Unlock()
	fake.ReplaceNetworkAclEntryWithContextStub = nil
	if fake.replaceNetworkAclEntryWithContextReturnsOnCall == nil {
		fake.replaceNetworkAclEntryWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceNetworkAclEntryOutput
			result2 error
		})
	}
	fake.replaceNetworkAclEntryWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceNetworkAclEntryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRoute(arg1 *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	fake.replaceRouteMutex.Lock()
	ret, specificReturn := fake.replaceRouteReturnsOnCall[len(fake.replaceRouteArgsForCall)]
	fake.replaceRouteArgsForCall = append(fake.replaceRouteArgsForCall, struct {
		arg1 *ec2.ReplaceRouteInput
	}{arg1})
	fake.recordInvocation("ReplaceRoute", []interface{}{arg1})
	fake.replaceRouteMutex.Unlock()
	if fake.ReplaceRouteStub != nil {
		return fake.ReplaceRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceRouteCallCount() int {
	fake.replaceRouteMutex.RLock()
	defer fake.replaceRouteMutex.RUnlock()
	return len(fake.replaceRouteArgsForCall)
}

func (fake *FakeEC2API) ReplaceRouteCalls(stub func(*ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error)) {
	fake.replaceRouteMutex.Lock()
	defer fake.replaceRouteMutex.Unlock()
	fake.ReplaceRouteStub = stub
}

func (fake *FakeEC2API) ReplaceRouteArgsForCall(i int) *ec2.ReplaceRouteInput {
	fake.replaceRouteMutex.RLock()
	defer fake.replaceRouteMutex.RUnlock()
	argsForCall := fake.replaceRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceRouteReturns(result1 *ec2.ReplaceRouteOutput, result2 error) {
	fake.replaceRouteMutex.Lock()
	defer fake.replaceRouteMutex.Unlock()
	fake.ReplaceRouteStub = nil
	fake.replaceRouteReturns = struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteReturnsOnCall(i int, result1 *ec2.ReplaceRouteOutput, result2 error) {
	fake.replaceRouteMutex.Lock()
	defer fake.replaceRouteMutex.Unlock()
	fake.ReplaceRouteStub = nil
	if fake.replaceRouteReturnsOnCall == nil {
		fake.replaceRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceRouteOutput
			result2 error
		})
	}
	fake.replaceRouteReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteRequest(arg1 *ec2.ReplaceRouteInput) (*request.Request, *ec2.ReplaceRouteOutput) {
	fake.replaceRouteRequestMutex.Lock()
	ret, specificReturn := fake.replaceRouteRequestReturnsOnCall[len(fake.replaceRouteRequestArgsForCall)]
	fake.replaceRouteRequestArgsForCall = append(fake.replaceRouteRequestArgsForCall, struct {
		arg1 *ec2.ReplaceRouteInput
	}{arg1})
	fake.recordInvocation("ReplaceRouteRequest", []interface{}{arg1})
	fake.replaceRouteRequestMutex.Unlock()
	if fake.ReplaceRouteRequestStub != nil {
		return fake.ReplaceRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceRouteRequestCallCount() int {
	fake.replaceRouteRequestMutex.RLock()
	defer fake.replaceRouteRequestMutex.RUnlock()
	return len(fake.replaceRouteRequestArgsForCall)
}

func (fake *FakeEC2API) ReplaceRouteRequestCalls(stub func(*ec2.ReplaceRouteInput) (*request.Request, *ec2.ReplaceRouteOutput)) {
	fake.replaceRouteRequestMutex.Lock()
	defer fake.replaceRouteRequestMutex.Unlock()
	fake.ReplaceRouteRequestStub = stub
}

func (fake *FakeEC2API) ReplaceRouteRequestArgsForCall(i int) *ec2.ReplaceRouteInput {
	fake.replaceRouteRequestMutex.RLock()
	defer fake.replaceRouteRequestMutex.RUnlock()
	argsForCall := fake.replaceRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceRouteRequestReturns(result1 *request.Request, result2 *ec2.ReplaceRouteOutput) {
	fake.replaceRouteRequestMutex.Lock()
	defer fake.replaceRouteRequestMutex.Unlock()
	fake.ReplaceRouteRequestStub = nil
	fake.replaceRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReplaceRouteOutput) {
	fake.replaceRouteRequestMutex.Lock()
	defer fake.replaceRouteRequestMutex.Unlock()
	fake.ReplaceRouteRequestStub = nil
	if fake.replaceRouteRequestReturnsOnCall == nil {
		fake.replaceRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReplaceRouteOutput
		})
	}
	fake.replaceRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteTableAssociation(arg1 *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	fake.replaceRouteTableAssociationMutex.Lock()
	ret, specificReturn := fake.replaceRouteTableAssociationReturnsOnCall[len(fake.replaceRouteTableAssociationArgsForCall)]
	fake.replaceRouteTableAssociationArgsForCall = append(fake.replaceRouteTableAssociationArgsForCall, struct {
		arg1 *ec2.ReplaceRouteTableAssociationInput
	}{arg1})
	fake.recordInvocation("ReplaceRouteTableAssociation", []interface{}{arg1})
	fake.replaceRouteTableAssociationMutex.Unlock()
	if fake.ReplaceRouteTableAssociationStub != nil {
		return fake.ReplaceRouteTableAssociationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceRouteTableAssociationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationCallCount() int {
	fake.replaceRouteTableAssociationMutex.RLock()
	defer fake.replaceRouteTableAssociationMutex.RUnlock()
	return len(fake.replaceRouteTableAssociationArgsForCall)
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationCalls(stub func(*ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error)) {
	fake.replaceRouteTableAssociationMutex.Lock()
	defer fake.replaceRouteTableAssociationMutex.Unlock()
	fake.ReplaceRouteTableAssociationStub = stub
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationArgsForCall(i int) *ec2.ReplaceRouteTableAssociationInput {
	fake.replaceRouteTableAssociationMutex.RLock()
	defer fake.replaceRouteTableAssociationMutex.RUnlock()
	argsForCall := fake.replaceRouteTableAssociationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationReturns(result1 *ec2.ReplaceRouteTableAssociationOutput, result2 error) {
	fake.replaceRouteTableAssociationMutex.Lock()
	defer fake.replaceRouteTableAssociationMutex.Unlock()
	fake.ReplaceRouteTableAssociationStub = nil
	fake.replaceRouteTableAssociationReturns = struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationReturnsOnCall(i int, result1 *ec2.ReplaceRouteTableAssociationOutput, result2 error) {
	fake.replaceRouteTableAssociationMutex.Lock()
	defer fake.replaceRouteTableAssociationMutex.Unlock()
	fake.ReplaceRouteTableAssociationStub = nil
	if fake.replaceRouteTableAssociationReturnsOnCall == nil {
		fake.replaceRouteTableAssociationReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceRouteTableAssociationOutput
			result2 error
		})
	}
	fake.replaceRouteTableAssociationReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationRequest(arg1 *ec2.ReplaceRouteTableAssociationInput) (*request.Request, *ec2.ReplaceRouteTableAssociationOutput) {
	fake.replaceRouteTableAssociationRequestMutex.Lock()
	ret, specificReturn := fake.replaceRouteTableAssociationRequestReturnsOnCall[len(fake.replaceRouteTableAssociationRequestArgsForCall)]
	fake.replaceRouteTableAssociationRequestArgsForCall = append(fake.replaceRouteTableAssociationRequestArgsForCall, struct {
		arg1 *ec2.ReplaceRouteTableAssociationInput
	}{arg1})
	fake.recordInvocation("ReplaceRouteTableAssociationRequest", []interface{}{arg1})
	fake.replaceRouteTableAssociationRequestMutex.Unlock()
	if fake.ReplaceRouteTableAssociationRequestStub != nil {
		return fake.ReplaceRouteTableAssociationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceRouteTableAssociationRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationRequestCallCount() int {
	fake.replaceRouteTableAssociationRequestMutex.RLock()
	defer fake.replaceRouteTableAssociationRequestMutex.RUnlock()
	return len(fake.replaceRouteTableAssociationRequestArgsForCall)
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationRequestCalls(stub func(*ec2.ReplaceRouteTableAssociationInput) (*request.Request, *ec2.ReplaceRouteTableAssociationOutput)) {
	fake.replaceRouteTableAssociationRequestMutex.Lock()
	defer fake.replaceRouteTableAssociationRequestMutex.Unlock()
	fake.ReplaceRouteTableAssociationRequestStub = stub
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationRequestArgsForCall(i int) *ec2.ReplaceRouteTableAssociationInput {
	fake.replaceRouteTableAssociationRequestMutex.RLock()
	defer fake.replaceRouteTableAssociationRequestMutex.RUnlock()
	argsForCall := fake.replaceRouteTableAssociationRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationRequestReturns(result1 *request.Request, result2 *ec2.ReplaceRouteTableAssociationOutput) {
	fake.replaceRouteTableAssociationRequestMutex.Lock()
	defer fake.replaceRouteTableAssociationRequestMutex.Unlock()
	fake.ReplaceRouteTableAssociationRequestStub = nil
	fake.replaceRouteTableAssociationRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteTableAssociationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReplaceRouteTableAssociationOutput) {
	fake.replaceRouteTableAssociationRequestMutex.Lock()
	defer fake.replaceRouteTableAssociationRequestMutex.Unlock()
	fake.ReplaceRouteTableAssociationRequestStub = nil
	if fake.replaceRouteTableAssociationRequestReturnsOnCall == nil {
		fake.replaceRouteTableAssociationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReplaceRouteTableAssociationOutput
		})
	}
	fake.replaceRouteTableAssociationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReplaceRouteTableAssociationOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationWithContext(arg1 aws.Context, arg2 *ec2.ReplaceRouteTableAssociationInput, arg3 ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	fake.replaceRouteTableAssociationWithContextMutex.Lock()
	ret, specificReturn := fake.replaceRouteTableAssociationWithContextReturnsOnCall[len(fake.replaceRouteTableAssociationWithContextArgsForCall)]
	fake.replaceRouteTableAssociationWithContextArgsForCall = append(fake.replaceRouteTableAssociationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceRouteTableAssociationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReplaceRouteTableAssociationWithContext", []interface{}{arg1, arg2, arg3})
	fake.replaceRouteTableAssociationWithContextMutex.Unlock()
	if fake.ReplaceRouteTableAssociationWithContextStub != nil {
		return fake.ReplaceRouteTableAssociationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceRouteTableAssociationWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationWithContextCallCount() int {
	fake.replaceRouteTableAssociationWithContextMutex.RLock()
	defer fake.replaceRouteTableAssociationWithContextMutex.RUnlock()
	return len(fake.replaceRouteTableAssociationWithContextArgsForCall)
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationWithContextCalls(stub func(aws.Context, *ec2.ReplaceRouteTableAssociationInput, ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error)) {
	fake.replaceRouteTableAssociationWithContextMutex.Lock()
	defer fake.replaceRouteTableAssociationWithContextMutex.Unlock()
	fake.ReplaceRouteTableAssociationWithContextStub = stub
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationWithContextArgsForCall(i int) (aws.Context, *ec2.ReplaceRouteTableAssociationInput, []request.Option) {
	fake.replaceRouteTableAssociationWithContextMutex.RLock()
	defer fake.replaceRouteTableAssociationWithContextMutex.RUnlock()
	argsForCall := fake.replaceRouteTableAssociationWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationWithContextReturns(result1 *ec2.ReplaceRouteTableAssociationOutput, result2 error) {
	fake.replaceRouteTableAssociationWithContextMutex.Lock()
	defer fake.replaceRouteTableAssociationWithContextMutex.Unlock()
	fake.ReplaceRouteTableAssociationWithContextStub = nil
	fake.replaceRouteTableAssociationWithContextReturns = struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteTableAssociationWithContextReturnsOnCall(i int, result1 *ec2.ReplaceRouteTableAssociationOutput, result2 error) {
	fake.replaceRouteTableAssociationWithContextMutex.Lock()
	defer fake.replaceRouteTableAssociationWithContextMutex.Unlock()
	fake.ReplaceRouteTableAssociationWithContextStub = nil
	if fake.replaceRouteTableAssociationWithContextReturnsOnCall == nil {
		fake.replaceRouteTableAssociationWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceRouteTableAssociationOutput
			result2 error
		})
	}
	fake.replaceRouteTableAssociationWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceRouteTableAssociationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteWithContext(arg1 aws.Context, arg2 *ec2.ReplaceRouteInput, arg3 ...request.Option) (*ec2.ReplaceRouteOutput, error) {
	fake.replaceRouteWithContextMutex.Lock()
	ret, specificReturn := fake.replaceRouteWithContextReturnsOnCall[len(fake.replaceRouteWithContextArgsForCall)]
	fake.replaceRouteWithContextArgsForCall = append(fake.replaceRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReplaceRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.replaceRouteWithContextMutex.Unlock()
	if fake.ReplaceRouteWithContextStub != nil {
		return fake.ReplaceRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceRouteWithContextCallCount() int {
	fake.replaceRouteWithContextMutex.RLock()
	defer fake.replaceRouteWithContextMutex.RUnlock()
	return len(fake.replaceRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) ReplaceRouteWithContextCalls(stub func(aws.Context, *ec2.ReplaceRouteInput, ...request.Option) (*ec2.ReplaceRouteOutput, error)) {
	fake.replaceRouteWithContextMutex.Lock()
	defer fake.replaceRouteWithContextMutex.Unlock()
	fake.ReplaceRouteWithContextStub = stub
}

func (fake *FakeEC2API) ReplaceRouteWithContextArgsForCall(i int) (aws.Context, *ec2.ReplaceRouteInput, []request.Option) {
	fake.replaceRouteWithContextMutex.RLock()
	defer fake.replaceRouteWithContextMutex.RUnlock()
	argsForCall := fake.replaceRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReplaceRouteWithContextReturns(result1 *ec2.ReplaceRouteOutput, result2 error) {
	fake.replaceRouteWithContextMutex.Lock()
	defer fake.replaceRouteWithContextMutex.Unlock()
	fake.ReplaceRouteWithContextStub = nil
	fake.replaceRouteWithContextReturns = struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceRouteWithContextReturnsOnCall(i int, result1 *ec2.ReplaceRouteOutput, result2 error) {
	fake.replaceRouteWithContextMutex.Lock()
	defer fake.replaceRouteWithContextMutex.Unlock()
	fake.ReplaceRouteWithContextStub = nil
	if fake.replaceRouteWithContextReturnsOnCall == nil {
		fake.replaceRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceRouteOutput
			result2 error
		})
	}
	fake.replaceRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceTransitGatewayRoute(arg1 *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	fake.replaceTransitGatewayRouteMutex.Lock()
	ret, specificReturn := fake.replaceTransitGatewayRouteReturnsOnCall[len(fake.replaceTransitGatewayRouteArgsForCall)]
	fake.replaceTransitGatewayRouteArgsForCall = append(fake.replaceTransitGatewayRouteArgsForCall, struct {
		arg1 *ec2.ReplaceTransitGatewayRouteInput
	}{arg1})
	fake.recordInvocation("ReplaceTransitGatewayRoute", []interface{}{arg1})
	fake.replaceTransitGatewayRouteMutex.Unlock()
	if fake.ReplaceTransitGatewayRouteStub != nil {
		return fake.ReplaceTransitGatewayRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceTransitGatewayRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteCallCount() int {
	fake.replaceTransitGatewayRouteMutex.RLock()
	defer fake.replaceTransitGatewayRouteMutex.RUnlock()
	return len(fake.replaceTransitGatewayRouteArgsForCall)
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteCalls(stub func(*ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error)) {
	fake.replaceTransitGatewayRouteMutex.Lock()
	defer fake.replaceTransitGatewayRouteMutex.Unlock()
	fake.ReplaceTransitGatewayRouteStub = stub
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteArgsForCall(i int) *ec2.ReplaceTransitGatewayRouteInput {
	fake.replaceTransitGatewayRouteMutex.RLock()
	defer fake.replaceTransitGatewayRouteMutex.RUnlock()
	argsForCall := fake.replaceTransitGatewayRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteReturns(result1 *ec2.ReplaceTransitGatewayRouteOutput, result2 error) {
	fake.replaceTransitGatewayRouteMutex.Lock()
	defer fake.replaceTransitGatewayRouteMutex.Unlock()
	fake.ReplaceTransitGatewayRouteStub = nil
	fake.replaceTransitGatewayRouteReturns = struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteReturnsOnCall(i int, result1 *ec2.ReplaceTransitGatewayRouteOutput, result2 error) {
	fake.replaceTransitGatewayRouteMutex.Lock()
	defer fake.replaceTransitGatewayRouteMutex.Unlock()
	fake.ReplaceTransitGatewayRouteStub = nil
	if fake.replaceTransitGatewayRouteReturnsOnCall == nil {
		fake.replaceTransitGatewayRouteReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceTransitGatewayRouteOutput
			result2 error
		})
	}
	fake.replaceTransitGatewayRouteReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteRequest(arg1 *ec2.ReplaceTransitGatewayRouteInput) (*request.Request, *ec2.ReplaceTransitGatewayRouteOutput) {
	fake.replaceTransitGatewayRouteRequestMutex.Lock()
	ret, specificReturn := fake.replaceTransitGatewayRouteRequestReturnsOnCall[len(fake.replaceTransitGatewayRouteRequestArgsForCall)]
	fake.replaceTransitGatewayRouteRequestArgsForCall = append(fake.replaceTransitGatewayRouteRequestArgsForCall, struct {
		arg1 *ec2.ReplaceTransitGatewayRouteInput
	}{arg1})
	fake.recordInvocation("ReplaceTransitGatewayRouteRequest", []interface{}{arg1})
	fake.replaceTransitGatewayRouteRequestMutex.Unlock()
	if fake.ReplaceTransitGatewayRouteRequestStub != nil {
		return fake.ReplaceTransitGatewayRouteRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceTransitGatewayRouteRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteRequestCallCount() int {
	fake.replaceTransitGatewayRouteRequestMutex.RLock()
	defer fake.replaceTransitGatewayRouteRequestMutex.RUnlock()
	return len(fake.replaceTransitGatewayRouteRequestArgsForCall)
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteRequestCalls(stub func(*ec2.ReplaceTransitGatewayRouteInput) (*request.Request, *ec2.ReplaceTransitGatewayRouteOutput)) {
	fake.replaceTransitGatewayRouteRequestMutex.Lock()
	defer fake.replaceTransitGatewayRouteRequestMutex.Unlock()
	fake.ReplaceTransitGatewayRouteRequestStub = stub
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteRequestArgsForCall(i int) *ec2.ReplaceTransitGatewayRouteInput {
	fake.replaceTransitGatewayRouteRequestMutex.RLock()
	defer fake.replaceTransitGatewayRouteRequestMutex.RUnlock()
	argsForCall := fake.replaceTransitGatewayRouteRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteRequestReturns(result1 *request.Request, result2 *ec2.ReplaceTransitGatewayRouteOutput) {
	fake.replaceTransitGatewayRouteRequestMutex.Lock()
	defer fake.replaceTransitGatewayRouteRequestMutex.Unlock()
	fake.ReplaceTransitGatewayRouteRequestStub = nil
	fake.replaceTransitGatewayRouteRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReplaceTransitGatewayRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReplaceTransitGatewayRouteOutput) {
	fake.replaceTransitGatewayRouteRequestMutex.Lock()
	defer fake.replaceTransitGatewayRouteRequestMutex.Unlock()
	fake.ReplaceTransitGatewayRouteRequestStub = nil
	if fake.replaceTransitGatewayRouteRequestReturnsOnCall == nil {
		fake.replaceTransitGatewayRouteRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReplaceTransitGatewayRouteOutput
		})
	}
	fake.replaceTransitGatewayRouteRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReplaceTransitGatewayRouteOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteWithContext(arg1 aws.Context, arg2 *ec2.ReplaceTransitGatewayRouteInput, arg3 ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	fake.replaceTransitGatewayRouteWithContextMutex.Lock()
	ret, specificReturn := fake.replaceTransitGatewayRouteWithContextReturnsOnCall[len(fake.replaceTransitGatewayRouteWithContextArgsForCall)]
	fake.replaceTransitGatewayRouteWithContextArgsForCall = append(fake.replaceTransitGatewayRouteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReplaceTransitGatewayRouteInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReplaceTransitGatewayRouteWithContext", []interface{}{arg1, arg2, arg3})
	fake.replaceTransitGatewayRouteWithContextMutex.Unlock()
	if fake.ReplaceTransitGatewayRouteWithContextStub != nil {
		return fake.ReplaceTransitGatewayRouteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.replaceTransitGatewayRouteWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteWithContextCallCount() int {
	fake.replaceTransitGatewayRouteWithContextMutex.RLock()
	defer fake.replaceTransitGatewayRouteWithContextMutex.RUnlock()
	return len(fake.replaceTransitGatewayRouteWithContextArgsForCall)
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteWithContextCalls(stub func(aws.Context, *ec2.ReplaceTransitGatewayRouteInput, ...request.Option) (*ec2.ReplaceTransitGatewayRouteOutput, error)) {
	fake.replaceTransitGatewayRouteWithContextMutex.Lock()
	defer fake.replaceTransitGatewayRouteWithContextMutex.Unlock()
	fake.ReplaceTransitGatewayRouteWithContextStub = stub
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteWithContextArgsForCall(i int) (aws.Context, *ec2.ReplaceTransitGatewayRouteInput, []request.Option) {
	fake.replaceTransitGatewayRouteWithContextMutex.RLock()
	defer fake.replaceTransitGatewayRouteWithContextMutex.RUnlock()
	argsForCall := fake.replaceTransitGatewayRouteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteWithContextReturns(result1 *ec2.ReplaceTransitGatewayRouteOutput, result2 error) {
	fake.replaceTransitGatewayRouteWithContextMutex.Lock()
	defer fake.replaceTransitGatewayRouteWithContextMutex.Unlock()
	fake.ReplaceTransitGatewayRouteWithContextStub = nil
	fake.replaceTransitGatewayRouteWithContextReturns = struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReplaceTransitGatewayRouteWithContextReturnsOnCall(i int, result1 *ec2.ReplaceTransitGatewayRouteOutput, result2 error) {
	fake.replaceTransitGatewayRouteWithContextMutex.Lock()
	defer fake.replaceTransitGatewayRouteWithContextMutex.Unlock()
	fake.ReplaceTransitGatewayRouteWithContextStub = nil
	if fake.replaceTransitGatewayRouteWithContextReturnsOnCall == nil {
		fake.replaceTransitGatewayRouteWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReplaceTransitGatewayRouteOutput
			result2 error
		})
	}
	fake.replaceTransitGatewayRouteWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReplaceTransitGatewayRouteOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReportInstanceStatus(arg1 *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	fake.reportInstanceStatusMutex.Lock()
	ret, specificReturn := fake.reportInstanceStatusReturnsOnCall[len(fake.reportInstanceStatusArgsForCall)]
	fake.reportInstanceStatusArgsForCall = append(fake.reportInstanceStatusArgsForCall, struct {
		arg1 *ec2.ReportInstanceStatusInput
	}{arg1})
	fake.recordInvocation("ReportInstanceStatus", []interface{}{arg1})
	fake.reportInstanceStatusMutex.Unlock()
	if fake.ReportInstanceStatusStub != nil {
		return fake.ReportInstanceStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.reportInstanceStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReportInstanceStatusCallCount() int {
	fake.reportInstanceStatusMutex.RLock()
	defer fake.reportInstanceStatusMutex.RUnlock()
	return len(fake.reportInstanceStatusArgsForCall)
}

func (fake *FakeEC2API) ReportInstanceStatusCalls(stub func(*ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error)) {
	fake.reportInstanceStatusMutex.Lock()
	defer fake.reportInstanceStatusMutex.Unlock()
	fake.ReportInstanceStatusStub = stub
}

func (fake *FakeEC2API) ReportInstanceStatusArgsForCall(i int) *ec2.ReportInstanceStatusInput {
	fake.reportInstanceStatusMutex.RLock()
	defer fake.reportInstanceStatusMutex.RUnlock()
	argsForCall := fake.reportInstanceStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReportInstanceStatusReturns(result1 *ec2.ReportInstanceStatusOutput, result2 error) {
	fake.reportInstanceStatusMutex.Lock()
	defer fake.reportInstanceStatusMutex.Unlock()
	fake.ReportInstanceStatusStub = nil
	fake.reportInstanceStatusReturns = struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReportInstanceStatusReturnsOnCall(i int, result1 *ec2.ReportInstanceStatusOutput, result2 error) {
	fake.reportInstanceStatusMutex.Lock()
	defer fake.reportInstanceStatusMutex.Unlock()
	fake.ReportInstanceStatusStub = nil
	if fake.reportInstanceStatusReturnsOnCall == nil {
		fake.reportInstanceStatusReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReportInstanceStatusOutput
			result2 error
		})
	}
	fake.reportInstanceStatusReturnsOnCall[i] = struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReportInstanceStatusRequest(arg1 *ec2.ReportInstanceStatusInput) (*request.Request, *ec2.ReportInstanceStatusOutput) {
	fake.reportInstanceStatusRequestMutex.Lock()
	ret, specificReturn := fake.reportInstanceStatusRequestReturnsOnCall[len(fake.reportInstanceStatusRequestArgsForCall)]
	fake.reportInstanceStatusRequestArgsForCall = append(fake.reportInstanceStatusRequestArgsForCall, struct {
		arg1 *ec2.ReportInstanceStatusInput
	}{arg1})
	fake.recordInvocation("ReportInstanceStatusRequest", []interface{}{arg1})
	fake.reportInstanceStatusRequestMutex.Unlock()
	if fake.ReportInstanceStatusRequestStub != nil {
		return fake.ReportInstanceStatusRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.reportInstanceStatusRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReportInstanceStatusRequestCallCount() int {
	fake.reportInstanceStatusRequestMutex.RLock()
	defer fake.reportInstanceStatusRequestMutex.RUnlock()
	return len(fake.reportInstanceStatusRequestArgsForCall)
}

func (fake *FakeEC2API) ReportInstanceStatusRequestCalls(stub func(*ec2.ReportInstanceStatusInput) (*request.Request, *ec2.ReportInstanceStatusOutput)) {
	fake.reportInstanceStatusRequestMutex.Lock()
	defer fake.reportInstanceStatusRequestMutex.Unlock()
	fake.ReportInstanceStatusRequestStub = stub
}

func (fake *FakeEC2API) ReportInstanceStatusRequestArgsForCall(i int) *ec2.ReportInstanceStatusInput {
	fake.reportInstanceStatusRequestMutex.RLock()
	defer fake.reportInstanceStatusRequestMutex.RUnlock()
	argsForCall := fake.reportInstanceStatusRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ReportInstanceStatusRequestReturns(result1 *request.Request, result2 *ec2.ReportInstanceStatusOutput) {
	fake.reportInstanceStatusRequestMutex.Lock()
	defer fake.reportInstanceStatusRequestMutex.Unlock()
	fake.ReportInstanceStatusRequestStub = nil
	fake.reportInstanceStatusRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ReportInstanceStatusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReportInstanceStatusRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ReportInstanceStatusOutput) {
	fake.reportInstanceStatusRequestMutex.Lock()
	defer fake.reportInstanceStatusRequestMutex.Unlock()
	fake.ReportInstanceStatusRequestStub = nil
	if fake.reportInstanceStatusRequestReturnsOnCall == nil {
		fake.reportInstanceStatusRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ReportInstanceStatusOutput
		})
	}
	fake.reportInstanceStatusRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ReportInstanceStatusOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ReportInstanceStatusWithContext(arg1 aws.Context, arg2 *ec2.ReportInstanceStatusInput, arg3 ...request.Option) (*ec2.ReportInstanceStatusOutput, error) {
	fake.reportInstanceStatusWithContextMutex.Lock()
	ret, specificReturn := fake.reportInstanceStatusWithContextReturnsOnCall[len(fake.reportInstanceStatusWithContextArgsForCall)]
	fake.reportInstanceStatusWithContextArgsForCall = append(fake.reportInstanceStatusWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ReportInstanceStatusInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReportInstanceStatusWithContext", []interface{}{arg1, arg2, arg3})
	fake.reportInstanceStatusWithContextMutex.Unlock()
	if fake.ReportInstanceStatusWithContextStub != nil {
		return fake.ReportInstanceStatusWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.reportInstanceStatusWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ReportInstanceStatusWithContextCallCount() int {
	fake.reportInstanceStatusWithContextMutex.RLock()
	defer fake.reportInstanceStatusWithContextMutex.RUnlock()
	return len(fake.reportInstanceStatusWithContextArgsForCall)
}

func (fake *FakeEC2API) ReportInstanceStatusWithContextCalls(stub func(aws.Context, *ec2.ReportInstanceStatusInput, ...request.Option) (*ec2.ReportInstanceStatusOutput, error)) {
	fake.reportInstanceStatusWithContextMutex.Lock()
	defer fake.reportInstanceStatusWithContextMutex.Unlock()
	fake.ReportInstanceStatusWithContextStub = stub
}

func (fake *FakeEC2API) ReportInstanceStatusWithContextArgsForCall(i int) (aws.Context, *ec2.ReportInstanceStatusInput, []request.Option) {
	fake.reportInstanceStatusWithContextMutex.RLock()
	defer fake.reportInstanceStatusWithContextMutex.RUnlock()
	argsForCall := fake.reportInstanceStatusWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ReportInstanceStatusWithContextReturns(result1 *ec2.ReportInstanceStatusOutput, result2 error) {
	fake.reportInstanceStatusWithContextMutex.Lock()
	defer fake.reportInstanceStatusWithContextMutex.Unlock()
	fake.ReportInstanceStatusWithContextStub = nil
	fake.reportInstanceStatusWithContextReturns = struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ReportInstanceStatusWithContextReturnsOnCall(i int, result1 *ec2.ReportInstanceStatusOutput, result2 error) {
	fake.reportInstanceStatusWithContextMutex.Lock()
	defer fake.reportInstanceStatusWithContextMutex.Unlock()
	fake.ReportInstanceStatusWithContextStub = nil
	if fake.reportInstanceStatusWithContextReturnsOnCall == nil {
		fake.reportInstanceStatusWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ReportInstanceStatusOutput
			result2 error
		})
	}
	fake.reportInstanceStatusWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ReportInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotFleet(arg1 *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	fake.requestSpotFleetMutex.Lock()
	ret, specificReturn := fake.requestSpotFleetReturnsOnCall[len(fake.requestSpotFleetArgsForCall)]
	fake.requestSpotFleetArgsForCall = append(fake.requestSpotFleetArgsForCall, struct {
		arg1 *ec2.RequestSpotFleetInput
	}{arg1})
	fake.recordInvocation("RequestSpotFleet", []interface{}{arg1})
	fake.requestSpotFleetMutex.Unlock()
	if fake.RequestSpotFleetStub != nil {
		return fake.RequestSpotFleetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestSpotFleetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RequestSpotFleetCallCount() int {
	fake.requestSpotFleetMutex.RLock()
	defer fake.requestSpotFleetMutex.RUnlock()
	return len(fake.requestSpotFleetArgsForCall)
}

func (fake *FakeEC2API) RequestSpotFleetCalls(stub func(*ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error)) {
	fake.requestSpotFleetMutex.Lock()
	defer fake.requestSpotFleetMutex.Unlock()
	fake.RequestSpotFleetStub = stub
}

func (fake *FakeEC2API) RequestSpotFleetArgsForCall(i int) *ec2.RequestSpotFleetInput {
	fake.requestSpotFleetMutex.RLock()
	defer fake.requestSpotFleetMutex.RUnlock()
	argsForCall := fake.requestSpotFleetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RequestSpotFleetReturns(result1 *ec2.RequestSpotFleetOutput, result2 error) {
	fake.requestSpotFleetMutex.Lock()
	defer fake.requestSpotFleetMutex.Unlock()
	fake.RequestSpotFleetStub = nil
	fake.requestSpotFleetReturns = struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotFleetReturnsOnCall(i int, result1 *ec2.RequestSpotFleetOutput, result2 error) {
	fake.requestSpotFleetMutex.Lock()
	defer fake.requestSpotFleetMutex.Unlock()
	fake.RequestSpotFleetStub = nil
	if fake.requestSpotFleetReturnsOnCall == nil {
		fake.requestSpotFleetReturnsOnCall = make(map[int]struct {
			result1 *ec2.RequestSpotFleetOutput
			result2 error
		})
	}
	fake.requestSpotFleetReturnsOnCall[i] = struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotFleetRequest(arg1 *ec2.RequestSpotFleetInput) (*request.Request, *ec2.RequestSpotFleetOutput) {
	fake.requestSpotFleetRequestMutex.Lock()
	ret, specificReturn := fake.requestSpotFleetRequestReturnsOnCall[len(fake.requestSpotFleetRequestArgsForCall)]
	fake.requestSpotFleetRequestArgsForCall = append(fake.requestSpotFleetRequestArgsForCall, struct {
		arg1 *ec2.RequestSpotFleetInput
	}{arg1})
	fake.recordInvocation("RequestSpotFleetRequest", []interface{}{arg1})
	fake.requestSpotFleetRequestMutex.Unlock()
	if fake.RequestSpotFleetRequestStub != nil {
		return fake.RequestSpotFleetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestSpotFleetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RequestSpotFleetRequestCallCount() int {
	fake.requestSpotFleetRequestMutex.RLock()
	defer fake.requestSpotFleetRequestMutex.RUnlock()
	return len(fake.requestSpotFleetRequestArgsForCall)
}

func (fake *FakeEC2API) RequestSpotFleetRequestCalls(stub func(*ec2.RequestSpotFleetInput) (*request.Request, *ec2.RequestSpotFleetOutput)) {
	fake.requestSpotFleetRequestMutex.Lock()
	defer fake.requestSpotFleetRequestMutex.Unlock()
	fake.RequestSpotFleetRequestStub = stub
}

func (fake *FakeEC2API) RequestSpotFleetRequestArgsForCall(i int) *ec2.RequestSpotFleetInput {
	fake.requestSpotFleetRequestMutex.RLock()
	defer fake.requestSpotFleetRequestMutex.RUnlock()
	argsForCall := fake.requestSpotFleetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RequestSpotFleetRequestReturns(result1 *request.Request, result2 *ec2.RequestSpotFleetOutput) {
	fake.requestSpotFleetRequestMutex.Lock()
	defer fake.requestSpotFleetRequestMutex.Unlock()
	fake.RequestSpotFleetRequestStub = nil
	fake.requestSpotFleetRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RequestSpotFleetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotFleetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RequestSpotFleetOutput) {
	fake.requestSpotFleetRequestMutex.Lock()
	defer fake.requestSpotFleetRequestMutex.Unlock()
	fake.RequestSpotFleetRequestStub = nil
	if fake.requestSpotFleetRequestReturnsOnCall == nil {
		fake.requestSpotFleetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RequestSpotFleetOutput
		})
	}
	fake.requestSpotFleetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RequestSpotFleetOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotFleetWithContext(arg1 aws.Context, arg2 *ec2.RequestSpotFleetInput, arg3 ...request.Option) (*ec2.RequestSpotFleetOutput, error) {
	fake.requestSpotFleetWithContextMutex.Lock()
	ret, specificReturn := fake.requestSpotFleetWithContextReturnsOnCall[len(fake.requestSpotFleetWithContextArgsForCall)]
	fake.requestSpotFleetWithContextArgsForCall = append(fake.requestSpotFleetWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RequestSpotFleetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RequestSpotFleetWithContext", []interface{}{arg1, arg2, arg3})
	fake.requestSpotFleetWithContextMutex.Unlock()
	if fake.RequestSpotFleetWithContextStub != nil {
		return fake.RequestSpotFleetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestSpotFleetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RequestSpotFleetWithContextCallCount() int {
	fake.requestSpotFleetWithContextMutex.RLock()
	defer fake.requestSpotFleetWithContextMutex.RUnlock()
	return len(fake.requestSpotFleetWithContextArgsForCall)
}

func (fake *FakeEC2API) RequestSpotFleetWithContextCalls(stub func(aws.Context, *ec2.RequestSpotFleetInput, ...request.Option) (*ec2.RequestSpotFleetOutput, error)) {
	fake.requestSpotFleetWithContextMutex.Lock()
	defer fake.requestSpotFleetWithContextMutex.Unlock()
	fake.RequestSpotFleetWithContextStub = stub
}

func (fake *FakeEC2API) RequestSpotFleetWithContextArgsForCall(i int) (aws.Context, *ec2.RequestSpotFleetInput, []request.Option) {
	fake.requestSpotFleetWithContextMutex.RLock()
	defer fake.requestSpotFleetWithContextMutex.RUnlock()
	argsForCall := fake.requestSpotFleetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RequestSpotFleetWithContextReturns(result1 *ec2.RequestSpotFleetOutput, result2 error) {
	fake.requestSpotFleetWithContextMutex.Lock()
	defer fake.requestSpotFleetWithContextMutex.Unlock()
	fake.RequestSpotFleetWithContextStub = nil
	fake.requestSpotFleetWithContextReturns = struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotFleetWithContextReturnsOnCall(i int, result1 *ec2.RequestSpotFleetOutput, result2 error) {
	fake.requestSpotFleetWithContextMutex.Lock()
	defer fake.requestSpotFleetWithContextMutex.Unlock()
	fake.RequestSpotFleetWithContextStub = nil
	if fake.requestSpotFleetWithContextReturnsOnCall == nil {
		fake.requestSpotFleetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RequestSpotFleetOutput
			result2 error
		})
	}
	fake.requestSpotFleetWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RequestSpotFleetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotInstances(arg1 *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	fake.requestSpotInstancesMutex.Lock()
	ret, specificReturn := fake.requestSpotInstancesReturnsOnCall[len(fake.requestSpotInstancesArgsForCall)]
	fake.requestSpotInstancesArgsForCall = append(fake.requestSpotInstancesArgsForCall, struct {
		arg1 *ec2.RequestSpotInstancesInput
	}{arg1})
	fake.recordInvocation("RequestSpotInstances", []interface{}{arg1})
	fake.requestSpotInstancesMutex.Unlock()
	if fake.RequestSpotInstancesStub != nil {
		return fake.RequestSpotInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestSpotInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RequestSpotInstancesCallCount() int {
	fake.requestSpotInstancesMutex.RLock()
	defer fake.requestSpotInstancesMutex.RUnlock()
	return len(fake.requestSpotInstancesArgsForCall)
}

func (fake *FakeEC2API) RequestSpotInstancesCalls(stub func(*ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error)) {
	fake.requestSpotInstancesMutex.Lock()
	defer fake.requestSpotInstancesMutex.Unlock()
	fake.RequestSpotInstancesStub = stub
}

func (fake *FakeEC2API) RequestSpotInstancesArgsForCall(i int) *ec2.RequestSpotInstancesInput {
	fake.requestSpotInstancesMutex.RLock()
	defer fake.requestSpotInstancesMutex.RUnlock()
	argsForCall := fake.requestSpotInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RequestSpotInstancesReturns(result1 *ec2.RequestSpotInstancesOutput, result2 error) {
	fake.requestSpotInstancesMutex.Lock()
	defer fake.requestSpotInstancesMutex.Unlock()
	fake.RequestSpotInstancesStub = nil
	fake.requestSpotInstancesReturns = struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotInstancesReturnsOnCall(i int, result1 *ec2.RequestSpotInstancesOutput, result2 error) {
	fake.requestSpotInstancesMutex.Lock()
	defer fake.requestSpotInstancesMutex.Unlock()
	fake.RequestSpotInstancesStub = nil
	if fake.requestSpotInstancesReturnsOnCall == nil {
		fake.requestSpotInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.RequestSpotInstancesOutput
			result2 error
		})
	}
	fake.requestSpotInstancesReturnsOnCall[i] = struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotInstancesRequest(arg1 *ec2.RequestSpotInstancesInput) (*request.Request, *ec2.RequestSpotInstancesOutput) {
	fake.requestSpotInstancesRequestMutex.Lock()
	ret, specificReturn := fake.requestSpotInstancesRequestReturnsOnCall[len(fake.requestSpotInstancesRequestArgsForCall)]
	fake.requestSpotInstancesRequestArgsForCall = append(fake.requestSpotInstancesRequestArgsForCall, struct {
		arg1 *ec2.RequestSpotInstancesInput
	}{arg1})
	fake.recordInvocation("RequestSpotInstancesRequest", []interface{}{arg1})
	fake.requestSpotInstancesRequestMutex.Unlock()
	if fake.RequestSpotInstancesRequestStub != nil {
		return fake.RequestSpotInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestSpotInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RequestSpotInstancesRequestCallCount() int {
	fake.requestSpotInstancesRequestMutex.RLock()
	defer fake.requestSpotInstancesRequestMutex.RUnlock()
	return len(fake.requestSpotInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) RequestSpotInstancesRequestCalls(stub func(*ec2.RequestSpotInstancesInput) (*request.Request, *ec2.RequestSpotInstancesOutput)) {
	fake.requestSpotInstancesRequestMutex.Lock()
	defer fake.requestSpotInstancesRequestMutex.Unlock()
	fake.RequestSpotInstancesRequestStub = stub
}

func (fake *FakeEC2API) RequestSpotInstancesRequestArgsForCall(i int) *ec2.RequestSpotInstancesInput {
	fake.requestSpotInstancesRequestMutex.RLock()
	defer fake.requestSpotInstancesRequestMutex.RUnlock()
	argsForCall := fake.requestSpotInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RequestSpotInstancesRequestReturns(result1 *request.Request, result2 *ec2.RequestSpotInstancesOutput) {
	fake.requestSpotInstancesRequestMutex.Lock()
	defer fake.requestSpotInstancesRequestMutex.Unlock()
	fake.RequestSpotInstancesRequestStub = nil
	fake.requestSpotInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RequestSpotInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RequestSpotInstancesOutput) {
	fake.requestSpotInstancesRequestMutex.Lock()
	defer fake.requestSpotInstancesRequestMutex.Unlock()
	fake.RequestSpotInstancesRequestStub = nil
	if fake.requestSpotInstancesRequestReturnsOnCall == nil {
		fake.requestSpotInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RequestSpotInstancesOutput
		})
	}
	fake.requestSpotInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RequestSpotInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotInstancesWithContext(arg1 aws.Context, arg2 *ec2.RequestSpotInstancesInput, arg3 ...request.Option) (*ec2.RequestSpotInstancesOutput, error) {
	fake.requestSpotInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.requestSpotInstancesWithContextReturnsOnCall[len(fake.requestSpotInstancesWithContextArgsForCall)]
	fake.requestSpotInstancesWithContextArgsForCall = append(fake.requestSpotInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RequestSpotInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RequestSpotInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.requestSpotInstancesWithContextMutex.Unlock()
	if fake.RequestSpotInstancesWithContextStub != nil {
		return fake.RequestSpotInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestSpotInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RequestSpotInstancesWithContextCallCount() int {
	fake.requestSpotInstancesWithContextMutex.RLock()
	defer fake.requestSpotInstancesWithContextMutex.RUnlock()
	return len(fake.requestSpotInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) RequestSpotInstancesWithContextCalls(stub func(aws.Context, *ec2.RequestSpotInstancesInput, ...request.Option) (*ec2.RequestSpotInstancesOutput, error)) {
	fake.requestSpotInstancesWithContextMutex.Lock()
	defer fake.requestSpotInstancesWithContextMutex.Unlock()
	fake.RequestSpotInstancesWithContextStub = stub
}

func (fake *FakeEC2API) RequestSpotInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.RequestSpotInstancesInput, []request.Option) {
	fake.requestSpotInstancesWithContextMutex.RLock()
	defer fake.requestSpotInstancesWithContextMutex.RUnlock()
	argsForCall := fake.requestSpotInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RequestSpotInstancesWithContextReturns(result1 *ec2.RequestSpotInstancesOutput, result2 error) {
	fake.requestSpotInstancesWithContextMutex.Lock()
	defer fake.requestSpotInstancesWithContextMutex.Unlock()
	fake.RequestSpotInstancesWithContextStub = nil
	fake.requestSpotInstancesWithContextReturns = struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RequestSpotInstancesWithContextReturnsOnCall(i int, result1 *ec2.RequestSpotInstancesOutput, result2 error) {
	fake.requestSpotInstancesWithContextMutex.Lock()
	defer fake.requestSpotInstancesWithContextMutex.Unlock()
	fake.RequestSpotInstancesWithContextStub = nil
	if fake.requestSpotInstancesWithContextReturnsOnCall == nil {
		fake.requestSpotInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RequestSpotInstancesOutput
			result2 error
		})
	}
	fake.requestSpotInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RequestSpotInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetFpgaImageAttribute(arg1 *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
	fake.resetFpgaImageAttributeMutex.Lock()
	ret, specificReturn := fake.resetFpgaImageAttributeReturnsOnCall[len(fake.resetFpgaImageAttributeArgsForCall)]
	fake.resetFpgaImageAttributeArgsForCall = append(fake.resetFpgaImageAttributeArgsForCall, struct {
		arg1 *ec2.ResetFpgaImageAttributeInput
	}{arg1})
	fake.recordInvocation("ResetFpgaImageAttribute", []interface{}{arg1})
	fake.resetFpgaImageAttributeMutex.Unlock()
	if fake.ResetFpgaImageAttributeStub != nil {
		return fake.ResetFpgaImageAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetFpgaImageAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetFpgaImageAttributeCallCount() int {
	fake.resetFpgaImageAttributeMutex.RLock()
	defer fake.resetFpgaImageAttributeMutex.RUnlock()
	return len(fake.resetFpgaImageAttributeArgsForCall)
}

func (fake *FakeEC2API) ResetFpgaImageAttributeCalls(stub func(*ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error)) {
	fake.resetFpgaImageAttributeMutex.Lock()
	defer fake.resetFpgaImageAttributeMutex.Unlock()
	fake.ResetFpgaImageAttributeStub = stub
}

func (fake *FakeEC2API) ResetFpgaImageAttributeArgsForCall(i int) *ec2.ResetFpgaImageAttributeInput {
	fake.resetFpgaImageAttributeMutex.RLock()
	defer fake.resetFpgaImageAttributeMutex.RUnlock()
	argsForCall := fake.resetFpgaImageAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetFpgaImageAttributeReturns(result1 *ec2.ResetFpgaImageAttributeOutput, result2 error) {
	fake.resetFpgaImageAttributeMutex.Lock()
	defer fake.resetFpgaImageAttributeMutex.Unlock()
	fake.ResetFpgaImageAttributeStub = nil
	fake.resetFpgaImageAttributeReturns = struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetFpgaImageAttributeReturnsOnCall(i int, result1 *ec2.ResetFpgaImageAttributeOutput, result2 error) {
	fake.resetFpgaImageAttributeMutex.Lock()
	defer fake.resetFpgaImageAttributeMutex.Unlock()
	fake.ResetFpgaImageAttributeStub = nil
	if fake.resetFpgaImageAttributeReturnsOnCall == nil {
		fake.resetFpgaImageAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetFpgaImageAttributeOutput
			result2 error
		})
	}
	fake.resetFpgaImageAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetFpgaImageAttributeRequest(arg1 *ec2.ResetFpgaImageAttributeInput) (*request.Request, *ec2.ResetFpgaImageAttributeOutput) {
	fake.resetFpgaImageAttributeRequestMutex.Lock()
	ret, specificReturn := fake.resetFpgaImageAttributeRequestReturnsOnCall[len(fake.resetFpgaImageAttributeRequestArgsForCall)]
	fake.resetFpgaImageAttributeRequestArgsForCall = append(fake.resetFpgaImageAttributeRequestArgsForCall, struct {
		arg1 *ec2.ResetFpgaImageAttributeInput
	}{arg1})
	fake.recordInvocation("ResetFpgaImageAttributeRequest", []interface{}{arg1})
	fake.resetFpgaImageAttributeRequestMutex.Unlock()
	if fake.ResetFpgaImageAttributeRequestStub != nil {
		return fake.ResetFpgaImageAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetFpgaImageAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetFpgaImageAttributeRequestCallCount() int {
	fake.resetFpgaImageAttributeRequestMutex.RLock()
	defer fake.resetFpgaImageAttributeRequestMutex.RUnlock()
	return len(fake.resetFpgaImageAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ResetFpgaImageAttributeRequestCalls(stub func(*ec2.ResetFpgaImageAttributeInput) (*request.Request, *ec2.ResetFpgaImageAttributeOutput)) {
	fake.resetFpgaImageAttributeRequestMutex.Lock()
	defer fake.resetFpgaImageAttributeRequestMutex.Unlock()
	fake.ResetFpgaImageAttributeRequestStub = stub
}

func (fake *FakeEC2API) ResetFpgaImageAttributeRequestArgsForCall(i int) *ec2.ResetFpgaImageAttributeInput {
	fake.resetFpgaImageAttributeRequestMutex.RLock()
	defer fake.resetFpgaImageAttributeRequestMutex.RUnlock()
	argsForCall := fake.resetFpgaImageAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetFpgaImageAttributeRequestReturns(result1 *request.Request, result2 *ec2.ResetFpgaImageAttributeOutput) {
	fake.resetFpgaImageAttributeRequestMutex.Lock()
	defer fake.resetFpgaImageAttributeRequestMutex.Unlock()
	fake.ResetFpgaImageAttributeRequestStub = nil
	fake.resetFpgaImageAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ResetFpgaImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetFpgaImageAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ResetFpgaImageAttributeOutput) {
	fake.resetFpgaImageAttributeRequestMutex.Lock()
	defer fake.resetFpgaImageAttributeRequestMutex.Unlock()
	fake.ResetFpgaImageAttributeRequestStub = nil
	if fake.resetFpgaImageAttributeRequestReturnsOnCall == nil {
		fake.resetFpgaImageAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ResetFpgaImageAttributeOutput
		})
	}
	fake.resetFpgaImageAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ResetFpgaImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetFpgaImageAttributeWithContext(arg1 aws.Context, arg2 *ec2.ResetFpgaImageAttributeInput, arg3 ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error) {
	fake.resetFpgaImageAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.resetFpgaImageAttributeWithContextReturnsOnCall[len(fake.resetFpgaImageAttributeWithContextArgsForCall)]
	fake.resetFpgaImageAttributeWithContextArgsForCall = append(fake.resetFpgaImageAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ResetFpgaImageAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetFpgaImageAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetFpgaImageAttributeWithContextMutex.Unlock()
	if fake.ResetFpgaImageAttributeWithContextStub != nil {
		return fake.ResetFpgaImageAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetFpgaImageAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetFpgaImageAttributeWithContextCallCount() int {
	fake.resetFpgaImageAttributeWithContextMutex.RLock()
	defer fake.resetFpgaImageAttributeWithContextMutex.RUnlock()
	return len(fake.resetFpgaImageAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ResetFpgaImageAttributeWithContextCalls(stub func(aws.Context, *ec2.ResetFpgaImageAttributeInput, ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error)) {
	fake.resetFpgaImageAttributeWithContextMutex.Lock()
	defer fake.resetFpgaImageAttributeWithContextMutex.Unlock()
	fake.ResetFpgaImageAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ResetFpgaImageAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ResetFpgaImageAttributeInput, []request.Option) {
	fake.resetFpgaImageAttributeWithContextMutex.RLock()
	defer fake.resetFpgaImageAttributeWithContextMutex.RUnlock()
	argsForCall := fake.resetFpgaImageAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ResetFpgaImageAttributeWithContextReturns(result1 *ec2.ResetFpgaImageAttributeOutput, result2 error) {
	fake.resetFpgaImageAttributeWithContextMutex.Lock()
	defer fake.resetFpgaImageAttributeWithContextMutex.Unlock()
	fake.ResetFpgaImageAttributeWithContextStub = nil
	fake.resetFpgaImageAttributeWithContextReturns = struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetFpgaImageAttributeWithContextReturnsOnCall(i int, result1 *ec2.ResetFpgaImageAttributeOutput, result2 error) {
	fake.resetFpgaImageAttributeWithContextMutex.Lock()
	defer fake.resetFpgaImageAttributeWithContextMutex.Unlock()
	fake.ResetFpgaImageAttributeWithContextStub = nil
	if fake.resetFpgaImageAttributeWithContextReturnsOnCall == nil {
		fake.resetFpgaImageAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetFpgaImageAttributeOutput
			result2 error
		})
	}
	fake.resetFpgaImageAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ResetFpgaImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetImageAttribute(arg1 *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	fake.resetImageAttributeMutex.Lock()
	ret, specificReturn := fake.resetImageAttributeReturnsOnCall[len(fake.resetImageAttributeArgsForCall)]
	fake.resetImageAttributeArgsForCall = append(fake.resetImageAttributeArgsForCall, struct {
		arg1 *ec2.ResetImageAttributeInput
	}{arg1})
	fake.recordInvocation("ResetImageAttribute", []interface{}{arg1})
	fake.resetImageAttributeMutex.Unlock()
	if fake.ResetImageAttributeStub != nil {
		return fake.ResetImageAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetImageAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetImageAttributeCallCount() int {
	fake.resetImageAttributeMutex.RLock()
	defer fake.resetImageAttributeMutex.RUnlock()
	return len(fake.resetImageAttributeArgsForCall)
}

func (fake *FakeEC2API) ResetImageAttributeCalls(stub func(*ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error)) {
	fake.resetImageAttributeMutex.Lock()
	defer fake.resetImageAttributeMutex.Unlock()
	fake.ResetImageAttributeStub = stub
}

func (fake *FakeEC2API) ResetImageAttributeArgsForCall(i int) *ec2.ResetImageAttributeInput {
	fake.resetImageAttributeMutex.RLock()
	defer fake.resetImageAttributeMutex.RUnlock()
	argsForCall := fake.resetImageAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetImageAttributeReturns(result1 *ec2.ResetImageAttributeOutput, result2 error) {
	fake.resetImageAttributeMutex.Lock()
	defer fake.resetImageAttributeMutex.Unlock()
	fake.ResetImageAttributeStub = nil
	fake.resetImageAttributeReturns = struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetImageAttributeReturnsOnCall(i int, result1 *ec2.ResetImageAttributeOutput, result2 error) {
	fake.resetImageAttributeMutex.Lock()
	defer fake.resetImageAttributeMutex.Unlock()
	fake.ResetImageAttributeStub = nil
	if fake.resetImageAttributeReturnsOnCall == nil {
		fake.resetImageAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetImageAttributeOutput
			result2 error
		})
	}
	fake.resetImageAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetImageAttributeRequest(arg1 *ec2.ResetImageAttributeInput) (*request.Request, *ec2.ResetImageAttributeOutput) {
	fake.resetImageAttributeRequestMutex.Lock()
	ret, specificReturn := fake.resetImageAttributeRequestReturnsOnCall[len(fake.resetImageAttributeRequestArgsForCall)]
	fake.resetImageAttributeRequestArgsForCall = append(fake.resetImageAttributeRequestArgsForCall, struct {
		arg1 *ec2.ResetImageAttributeInput
	}{arg1})
	fake.recordInvocation("ResetImageAttributeRequest", []interface{}{arg1})
	fake.resetImageAttributeRequestMutex.Unlock()
	if fake.ResetImageAttributeRequestStub != nil {
		return fake.ResetImageAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetImageAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetImageAttributeRequestCallCount() int {
	fake.resetImageAttributeRequestMutex.RLock()
	defer fake.resetImageAttributeRequestMutex.RUnlock()
	return len(fake.resetImageAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ResetImageAttributeRequestCalls(stub func(*ec2.ResetImageAttributeInput) (*request.Request, *ec2.ResetImageAttributeOutput)) {
	fake.resetImageAttributeRequestMutex.Lock()
	defer fake.resetImageAttributeRequestMutex.Unlock()
	fake.ResetImageAttributeRequestStub = stub
}

func (fake *FakeEC2API) ResetImageAttributeRequestArgsForCall(i int) *ec2.ResetImageAttributeInput {
	fake.resetImageAttributeRequestMutex.RLock()
	defer fake.resetImageAttributeRequestMutex.RUnlock()
	argsForCall := fake.resetImageAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetImageAttributeRequestReturns(result1 *request.Request, result2 *ec2.ResetImageAttributeOutput) {
	fake.resetImageAttributeRequestMutex.Lock()
	defer fake.resetImageAttributeRequestMutex.Unlock()
	fake.ResetImageAttributeRequestStub = nil
	fake.resetImageAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ResetImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetImageAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ResetImageAttributeOutput) {
	fake.resetImageAttributeRequestMutex.Lock()
	defer fake.resetImageAttributeRequestMutex.Unlock()
	fake.ResetImageAttributeRequestStub = nil
	if fake.resetImageAttributeRequestReturnsOnCall == nil {
		fake.resetImageAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ResetImageAttributeOutput
		})
	}
	fake.resetImageAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ResetImageAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetImageAttributeWithContext(arg1 aws.Context, arg2 *ec2.ResetImageAttributeInput, arg3 ...request.Option) (*ec2.ResetImageAttributeOutput, error) {
	fake.resetImageAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.resetImageAttributeWithContextReturnsOnCall[len(fake.resetImageAttributeWithContextArgsForCall)]
	fake.resetImageAttributeWithContextArgsForCall = append(fake.resetImageAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ResetImageAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetImageAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetImageAttributeWithContextMutex.Unlock()
	if fake.ResetImageAttributeWithContextStub != nil {
		return fake.ResetImageAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetImageAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetImageAttributeWithContextCallCount() int {
	fake.resetImageAttributeWithContextMutex.RLock()
	defer fake.resetImageAttributeWithContextMutex.RUnlock()
	return len(fake.resetImageAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ResetImageAttributeWithContextCalls(stub func(aws.Context, *ec2.ResetImageAttributeInput, ...request.Option) (*ec2.ResetImageAttributeOutput, error)) {
	fake.resetImageAttributeWithContextMutex.Lock()
	defer fake.resetImageAttributeWithContextMutex.Unlock()
	fake.ResetImageAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ResetImageAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ResetImageAttributeInput, []request.Option) {
	fake.resetImageAttributeWithContextMutex.RLock()
	defer fake.resetImageAttributeWithContextMutex.RUnlock()
	argsForCall := fake.resetImageAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ResetImageAttributeWithContextReturns(result1 *ec2.ResetImageAttributeOutput, result2 error) {
	fake.resetImageAttributeWithContextMutex.Lock()
	defer fake.resetImageAttributeWithContextMutex.Unlock()
	fake.ResetImageAttributeWithContextStub = nil
	fake.resetImageAttributeWithContextReturns = struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetImageAttributeWithContextReturnsOnCall(i int, result1 *ec2.ResetImageAttributeOutput, result2 error) {
	fake.resetImageAttributeWithContextMutex.Lock()
	defer fake.resetImageAttributeWithContextMutex.Unlock()
	fake.ResetImageAttributeWithContextStub = nil
	if fake.resetImageAttributeWithContextReturnsOnCall == nil {
		fake.resetImageAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetImageAttributeOutput
			result2 error
		})
	}
	fake.resetImageAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ResetImageAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetInstanceAttribute(arg1 *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	fake.resetInstanceAttributeMutex.Lock()
	ret, specificReturn := fake.resetInstanceAttributeReturnsOnCall[len(fake.resetInstanceAttributeArgsForCall)]
	fake.resetInstanceAttributeArgsForCall = append(fake.resetInstanceAttributeArgsForCall, struct {
		arg1 *ec2.ResetInstanceAttributeInput
	}{arg1})
	fake.recordInvocation("ResetInstanceAttribute", []interface{}{arg1})
	fake.resetInstanceAttributeMutex.Unlock()
	if fake.ResetInstanceAttributeStub != nil {
		return fake.ResetInstanceAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetInstanceAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetInstanceAttributeCallCount() int {
	fake.resetInstanceAttributeMutex.RLock()
	defer fake.resetInstanceAttributeMutex.RUnlock()
	return len(fake.resetInstanceAttributeArgsForCall)
}

func (fake *FakeEC2API) ResetInstanceAttributeCalls(stub func(*ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error)) {
	fake.resetInstanceAttributeMutex.Lock()
	defer fake.resetInstanceAttributeMutex.Unlock()
	fake.ResetInstanceAttributeStub = stub
}

func (fake *FakeEC2API) ResetInstanceAttributeArgsForCall(i int) *ec2.ResetInstanceAttributeInput {
	fake.resetInstanceAttributeMutex.RLock()
	defer fake.resetInstanceAttributeMutex.RUnlock()
	argsForCall := fake.resetInstanceAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetInstanceAttributeReturns(result1 *ec2.ResetInstanceAttributeOutput, result2 error) {
	fake.resetInstanceAttributeMutex.Lock()
	defer fake.resetInstanceAttributeMutex.Unlock()
	fake.ResetInstanceAttributeStub = nil
	fake.resetInstanceAttributeReturns = struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetInstanceAttributeReturnsOnCall(i int, result1 *ec2.ResetInstanceAttributeOutput, result2 error) {
	fake.resetInstanceAttributeMutex.Lock()
	defer fake.resetInstanceAttributeMutex.Unlock()
	fake.ResetInstanceAttributeStub = nil
	if fake.resetInstanceAttributeReturnsOnCall == nil {
		fake.resetInstanceAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetInstanceAttributeOutput
			result2 error
		})
	}
	fake.resetInstanceAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetInstanceAttributeRequest(arg1 *ec2.ResetInstanceAttributeInput) (*request.Request, *ec2.ResetInstanceAttributeOutput) {
	fake.resetInstanceAttributeRequestMutex.Lock()
	ret, specificReturn := fake.resetInstanceAttributeRequestReturnsOnCall[len(fake.resetInstanceAttributeRequestArgsForCall)]
	fake.resetInstanceAttributeRequestArgsForCall = append(fake.resetInstanceAttributeRequestArgsForCall, struct {
		arg1 *ec2.ResetInstanceAttributeInput
	}{arg1})
	fake.recordInvocation("ResetInstanceAttributeRequest", []interface{}{arg1})
	fake.resetInstanceAttributeRequestMutex.Unlock()
	if fake.ResetInstanceAttributeRequestStub != nil {
		return fake.ResetInstanceAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetInstanceAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetInstanceAttributeRequestCallCount() int {
	fake.resetInstanceAttributeRequestMutex.RLock()
	defer fake.resetInstanceAttributeRequestMutex.RUnlock()
	return len(fake.resetInstanceAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ResetInstanceAttributeRequestCalls(stub func(*ec2.ResetInstanceAttributeInput) (*request.Request, *ec2.ResetInstanceAttributeOutput)) {
	fake.resetInstanceAttributeRequestMutex.Lock()
	defer fake.resetInstanceAttributeRequestMutex.Unlock()
	fake.ResetInstanceAttributeRequestStub = stub
}

func (fake *FakeEC2API) ResetInstanceAttributeRequestArgsForCall(i int) *ec2.ResetInstanceAttributeInput {
	fake.resetInstanceAttributeRequestMutex.RLock()
	defer fake.resetInstanceAttributeRequestMutex.RUnlock()
	argsForCall := fake.resetInstanceAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetInstanceAttributeRequestReturns(result1 *request.Request, result2 *ec2.ResetInstanceAttributeOutput) {
	fake.resetInstanceAttributeRequestMutex.Lock()
	defer fake.resetInstanceAttributeRequestMutex.Unlock()
	fake.ResetInstanceAttributeRequestStub = nil
	fake.resetInstanceAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ResetInstanceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetInstanceAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ResetInstanceAttributeOutput) {
	fake.resetInstanceAttributeRequestMutex.Lock()
	defer fake.resetInstanceAttributeRequestMutex.Unlock()
	fake.ResetInstanceAttributeRequestStub = nil
	if fake.resetInstanceAttributeRequestReturnsOnCall == nil {
		fake.resetInstanceAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ResetInstanceAttributeOutput
		})
	}
	fake.resetInstanceAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ResetInstanceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetInstanceAttributeWithContext(arg1 aws.Context, arg2 *ec2.ResetInstanceAttributeInput, arg3 ...request.Option) (*ec2.ResetInstanceAttributeOutput, error) {
	fake.resetInstanceAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.resetInstanceAttributeWithContextReturnsOnCall[len(fake.resetInstanceAttributeWithContextArgsForCall)]
	fake.resetInstanceAttributeWithContextArgsForCall = append(fake.resetInstanceAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ResetInstanceAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetInstanceAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetInstanceAttributeWithContextMutex.Unlock()
	if fake.ResetInstanceAttributeWithContextStub != nil {
		return fake.ResetInstanceAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetInstanceAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetInstanceAttributeWithContextCallCount() int {
	fake.resetInstanceAttributeWithContextMutex.RLock()
	defer fake.resetInstanceAttributeWithContextMutex.RUnlock()
	return len(fake.resetInstanceAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ResetInstanceAttributeWithContextCalls(stub func(aws.Context, *ec2.ResetInstanceAttributeInput, ...request.Option) (*ec2.ResetInstanceAttributeOutput, error)) {
	fake.resetInstanceAttributeWithContextMutex.Lock()
	defer fake.resetInstanceAttributeWithContextMutex.Unlock()
	fake.ResetInstanceAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ResetInstanceAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ResetInstanceAttributeInput, []request.Option) {
	fake.resetInstanceAttributeWithContextMutex.RLock()
	defer fake.resetInstanceAttributeWithContextMutex.RUnlock()
	argsForCall := fake.resetInstanceAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ResetInstanceAttributeWithContextReturns(result1 *ec2.ResetInstanceAttributeOutput, result2 error) {
	fake.resetInstanceAttributeWithContextMutex.Lock()
	defer fake.resetInstanceAttributeWithContextMutex.Unlock()
	fake.ResetInstanceAttributeWithContextStub = nil
	fake.resetInstanceAttributeWithContextReturns = struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetInstanceAttributeWithContextReturnsOnCall(i int, result1 *ec2.ResetInstanceAttributeOutput, result2 error) {
	fake.resetInstanceAttributeWithContextMutex.Lock()
	defer fake.resetInstanceAttributeWithContextMutex.Unlock()
	fake.ResetInstanceAttributeWithContextStub = nil
	if fake.resetInstanceAttributeWithContextReturnsOnCall == nil {
		fake.resetInstanceAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetInstanceAttributeOutput
			result2 error
		})
	}
	fake.resetInstanceAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ResetInstanceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttribute(arg1 *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	fake.resetNetworkInterfaceAttributeMutex.Lock()
	ret, specificReturn := fake.resetNetworkInterfaceAttributeReturnsOnCall[len(fake.resetNetworkInterfaceAttributeArgsForCall)]
	fake.resetNetworkInterfaceAttributeArgsForCall = append(fake.resetNetworkInterfaceAttributeArgsForCall, struct {
		arg1 *ec2.ResetNetworkInterfaceAttributeInput
	}{arg1})
	fake.recordInvocation("ResetNetworkInterfaceAttribute", []interface{}{arg1})
	fake.resetNetworkInterfaceAttributeMutex.Unlock()
	if fake.ResetNetworkInterfaceAttributeStub != nil {
		return fake.ResetNetworkInterfaceAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetNetworkInterfaceAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeCallCount() int {
	fake.resetNetworkInterfaceAttributeMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeMutex.RUnlock()
	return len(fake.resetNetworkInterfaceAttributeArgsForCall)
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeCalls(stub func(*ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error)) {
	fake.resetNetworkInterfaceAttributeMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeStub = stub
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeArgsForCall(i int) *ec2.ResetNetworkInterfaceAttributeInput {
	fake.resetNetworkInterfaceAttributeMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeMutex.RUnlock()
	argsForCall := fake.resetNetworkInterfaceAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeReturns(result1 *ec2.ResetNetworkInterfaceAttributeOutput, result2 error) {
	fake.resetNetworkInterfaceAttributeMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeStub = nil
	fake.resetNetworkInterfaceAttributeReturns = struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeReturnsOnCall(i int, result1 *ec2.ResetNetworkInterfaceAttributeOutput, result2 error) {
	fake.resetNetworkInterfaceAttributeMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeStub = nil
	if fake.resetNetworkInterfaceAttributeReturnsOnCall == nil {
		fake.resetNetworkInterfaceAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetNetworkInterfaceAttributeOutput
			result2 error
		})
	}
	fake.resetNetworkInterfaceAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeRequest(arg1 *ec2.ResetNetworkInterfaceAttributeInput) (*request.Request, *ec2.ResetNetworkInterfaceAttributeOutput) {
	fake.resetNetworkInterfaceAttributeRequestMutex.Lock()
	ret, specificReturn := fake.resetNetworkInterfaceAttributeRequestReturnsOnCall[len(fake.resetNetworkInterfaceAttributeRequestArgsForCall)]
	fake.resetNetworkInterfaceAttributeRequestArgsForCall = append(fake.resetNetworkInterfaceAttributeRequestArgsForCall, struct {
		arg1 *ec2.ResetNetworkInterfaceAttributeInput
	}{arg1})
	fake.recordInvocation("ResetNetworkInterfaceAttributeRequest", []interface{}{arg1})
	fake.resetNetworkInterfaceAttributeRequestMutex.Unlock()
	if fake.ResetNetworkInterfaceAttributeRequestStub != nil {
		return fake.ResetNetworkInterfaceAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetNetworkInterfaceAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeRequestCallCount() int {
	fake.resetNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeRequestMutex.RUnlock()
	return len(fake.resetNetworkInterfaceAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeRequestCalls(stub func(*ec2.ResetNetworkInterfaceAttributeInput) (*request.Request, *ec2.ResetNetworkInterfaceAttributeOutput)) {
	fake.resetNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeRequestStub = stub
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeRequestArgsForCall(i int) *ec2.ResetNetworkInterfaceAttributeInput {
	fake.resetNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeRequestMutex.RUnlock()
	argsForCall := fake.resetNetworkInterfaceAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeRequestReturns(result1 *request.Request, result2 *ec2.ResetNetworkInterfaceAttributeOutput) {
	fake.resetNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeRequestStub = nil
	fake.resetNetworkInterfaceAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ResetNetworkInterfaceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ResetNetworkInterfaceAttributeOutput) {
	fake.resetNetworkInterfaceAttributeRequestMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeRequestMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeRequestStub = nil
	if fake.resetNetworkInterfaceAttributeRequestReturnsOnCall == nil {
		fake.resetNetworkInterfaceAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ResetNetworkInterfaceAttributeOutput
		})
	}
	fake.resetNetworkInterfaceAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ResetNetworkInterfaceAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeWithContext(arg1 aws.Context, arg2 *ec2.ResetNetworkInterfaceAttributeInput, arg3 ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	fake.resetNetworkInterfaceAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.resetNetworkInterfaceAttributeWithContextReturnsOnCall[len(fake.resetNetworkInterfaceAttributeWithContextArgsForCall)]
	fake.resetNetworkInterfaceAttributeWithContextArgsForCall = append(fake.resetNetworkInterfaceAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ResetNetworkInterfaceAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetNetworkInterfaceAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetNetworkInterfaceAttributeWithContextMutex.Unlock()
	if fake.ResetNetworkInterfaceAttributeWithContextStub != nil {
		return fake.ResetNetworkInterfaceAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetNetworkInterfaceAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeWithContextCallCount() int {
	fake.resetNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeWithContextMutex.RUnlock()
	return len(fake.resetNetworkInterfaceAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeWithContextCalls(stub func(aws.Context, *ec2.ResetNetworkInterfaceAttributeInput, ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error)) {
	fake.resetNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ResetNetworkInterfaceAttributeInput, []request.Option) {
	fake.resetNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeWithContextMutex.RUnlock()
	argsForCall := fake.resetNetworkInterfaceAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeWithContextReturns(result1 *ec2.ResetNetworkInterfaceAttributeOutput, result2 error) {
	fake.resetNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeWithContextStub = nil
	fake.resetNetworkInterfaceAttributeWithContextReturns = struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetNetworkInterfaceAttributeWithContextReturnsOnCall(i int, result1 *ec2.ResetNetworkInterfaceAttributeOutput, result2 error) {
	fake.resetNetworkInterfaceAttributeWithContextMutex.Lock()
	defer fake.resetNetworkInterfaceAttributeWithContextMutex.Unlock()
	fake.ResetNetworkInterfaceAttributeWithContextStub = nil
	if fake.resetNetworkInterfaceAttributeWithContextReturnsOnCall == nil {
		fake.resetNetworkInterfaceAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetNetworkInterfaceAttributeOutput
			result2 error
		})
	}
	fake.resetNetworkInterfaceAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ResetNetworkInterfaceAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetSnapshotAttribute(arg1 *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	fake.resetSnapshotAttributeMutex.Lock()
	ret, specificReturn := fake.resetSnapshotAttributeReturnsOnCall[len(fake.resetSnapshotAttributeArgsForCall)]
	fake.resetSnapshotAttributeArgsForCall = append(fake.resetSnapshotAttributeArgsForCall, struct {
		arg1 *ec2.ResetSnapshotAttributeInput
	}{arg1})
	fake.recordInvocation("ResetSnapshotAttribute", []interface{}{arg1})
	fake.resetSnapshotAttributeMutex.Unlock()
	if fake.ResetSnapshotAttributeStub != nil {
		return fake.ResetSnapshotAttributeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetSnapshotAttributeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetSnapshotAttributeCallCount() int {
	fake.resetSnapshotAttributeMutex.RLock()
	defer fake.resetSnapshotAttributeMutex.RUnlock()
	return len(fake.resetSnapshotAttributeArgsForCall)
}

func (fake *FakeEC2API) ResetSnapshotAttributeCalls(stub func(*ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error)) {
	fake.resetSnapshotAttributeMutex.Lock()
	defer fake.resetSnapshotAttributeMutex.Unlock()
	fake.ResetSnapshotAttributeStub = stub
}

func (fake *FakeEC2API) ResetSnapshotAttributeArgsForCall(i int) *ec2.ResetSnapshotAttributeInput {
	fake.resetSnapshotAttributeMutex.RLock()
	defer fake.resetSnapshotAttributeMutex.RUnlock()
	argsForCall := fake.resetSnapshotAttributeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetSnapshotAttributeReturns(result1 *ec2.ResetSnapshotAttributeOutput, result2 error) {
	fake.resetSnapshotAttributeMutex.Lock()
	defer fake.resetSnapshotAttributeMutex.Unlock()
	fake.ResetSnapshotAttributeStub = nil
	fake.resetSnapshotAttributeReturns = struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetSnapshotAttributeReturnsOnCall(i int, result1 *ec2.ResetSnapshotAttributeOutput, result2 error) {
	fake.resetSnapshotAttributeMutex.Lock()
	defer fake.resetSnapshotAttributeMutex.Unlock()
	fake.ResetSnapshotAttributeStub = nil
	if fake.resetSnapshotAttributeReturnsOnCall == nil {
		fake.resetSnapshotAttributeReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetSnapshotAttributeOutput
			result2 error
		})
	}
	fake.resetSnapshotAttributeReturnsOnCall[i] = struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetSnapshotAttributeRequest(arg1 *ec2.ResetSnapshotAttributeInput) (*request.Request, *ec2.ResetSnapshotAttributeOutput) {
	fake.resetSnapshotAttributeRequestMutex.Lock()
	ret, specificReturn := fake.resetSnapshotAttributeRequestReturnsOnCall[len(fake.resetSnapshotAttributeRequestArgsForCall)]
	fake.resetSnapshotAttributeRequestArgsForCall = append(fake.resetSnapshotAttributeRequestArgsForCall, struct {
		arg1 *ec2.ResetSnapshotAttributeInput
	}{arg1})
	fake.recordInvocation("ResetSnapshotAttributeRequest", []interface{}{arg1})
	fake.resetSnapshotAttributeRequestMutex.Unlock()
	if fake.ResetSnapshotAttributeRequestStub != nil {
		return fake.ResetSnapshotAttributeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetSnapshotAttributeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetSnapshotAttributeRequestCallCount() int {
	fake.resetSnapshotAttributeRequestMutex.RLock()
	defer fake.resetSnapshotAttributeRequestMutex.RUnlock()
	return len(fake.resetSnapshotAttributeRequestArgsForCall)
}

func (fake *FakeEC2API) ResetSnapshotAttributeRequestCalls(stub func(*ec2.ResetSnapshotAttributeInput) (*request.Request, *ec2.ResetSnapshotAttributeOutput)) {
	fake.resetSnapshotAttributeRequestMutex.Lock()
	defer fake.resetSnapshotAttributeRequestMutex.Unlock()
	fake.ResetSnapshotAttributeRequestStub = stub
}

func (fake *FakeEC2API) ResetSnapshotAttributeRequestArgsForCall(i int) *ec2.ResetSnapshotAttributeInput {
	fake.resetSnapshotAttributeRequestMutex.RLock()
	defer fake.resetSnapshotAttributeRequestMutex.RUnlock()
	argsForCall := fake.resetSnapshotAttributeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) ResetSnapshotAttributeRequestReturns(result1 *request.Request, result2 *ec2.ResetSnapshotAttributeOutput) {
	fake.resetSnapshotAttributeRequestMutex.Lock()
	defer fake.resetSnapshotAttributeRequestMutex.Unlock()
	fake.ResetSnapshotAttributeRequestStub = nil
	fake.resetSnapshotAttributeRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.ResetSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetSnapshotAttributeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.ResetSnapshotAttributeOutput) {
	fake.resetSnapshotAttributeRequestMutex.Lock()
	defer fake.resetSnapshotAttributeRequestMutex.Unlock()
	fake.ResetSnapshotAttributeRequestStub = nil
	if fake.resetSnapshotAttributeRequestReturnsOnCall == nil {
		fake.resetSnapshotAttributeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.ResetSnapshotAttributeOutput
		})
	}
	fake.resetSnapshotAttributeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.ResetSnapshotAttributeOutput
	}{result1, result2}
}

func (fake *FakeEC2API) ResetSnapshotAttributeWithContext(arg1 aws.Context, arg2 *ec2.ResetSnapshotAttributeInput, arg3 ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error) {
	fake.resetSnapshotAttributeWithContextMutex.Lock()
	ret, specificReturn := fake.resetSnapshotAttributeWithContextReturnsOnCall[len(fake.resetSnapshotAttributeWithContextArgsForCall)]
	fake.resetSnapshotAttributeWithContextArgsForCall = append(fake.resetSnapshotAttributeWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.ResetSnapshotAttributeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetSnapshotAttributeWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetSnapshotAttributeWithContextMutex.Unlock()
	if fake.ResetSnapshotAttributeWithContextStub != nil {
		return fake.ResetSnapshotAttributeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetSnapshotAttributeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ResetSnapshotAttributeWithContextCallCount() int {
	fake.resetSnapshotAttributeWithContextMutex.RLock()
	defer fake.resetSnapshotAttributeWithContextMutex.RUnlock()
	return len(fake.resetSnapshotAttributeWithContextArgsForCall)
}

func (fake *FakeEC2API) ResetSnapshotAttributeWithContextCalls(stub func(aws.Context, *ec2.ResetSnapshotAttributeInput, ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error)) {
	fake.resetSnapshotAttributeWithContextMutex.Lock()
	defer fake.resetSnapshotAttributeWithContextMutex.Unlock()
	fake.ResetSnapshotAttributeWithContextStub = stub
}

func (fake *FakeEC2API) ResetSnapshotAttributeWithContextArgsForCall(i int) (aws.Context, *ec2.ResetSnapshotAttributeInput, []request.Option) {
	fake.resetSnapshotAttributeWithContextMutex.RLock()
	defer fake.resetSnapshotAttributeWithContextMutex.RUnlock()
	argsForCall := fake.resetSnapshotAttributeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ResetSnapshotAttributeWithContextReturns(result1 *ec2.ResetSnapshotAttributeOutput, result2 error) {
	fake.resetSnapshotAttributeWithContextMutex.Lock()
	defer fake.resetSnapshotAttributeWithContextMutex.Unlock()
	fake.ResetSnapshotAttributeWithContextStub = nil
	fake.resetSnapshotAttributeWithContextReturns = struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ResetSnapshotAttributeWithContextReturnsOnCall(i int, result1 *ec2.ResetSnapshotAttributeOutput, result2 error) {
	fake.resetSnapshotAttributeWithContextMutex.Lock()
	defer fake.resetSnapshotAttributeWithContextMutex.Unlock()
	fake.ResetSnapshotAttributeWithContextStub = nil
	if fake.resetSnapshotAttributeWithContextReturnsOnCall == nil {
		fake.resetSnapshotAttributeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.ResetSnapshotAttributeOutput
			result2 error
		})
	}
	fake.resetSnapshotAttributeWithContextReturnsOnCall[i] = struct {
		result1 *ec2.ResetSnapshotAttributeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RestoreAddressToClassic(arg1 *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	fake.restoreAddressToClassicMutex.Lock()
	ret, specificReturn := fake.restoreAddressToClassicReturnsOnCall[len(fake.restoreAddressToClassicArgsForCall)]
	fake.restoreAddressToClassicArgsForCall = append(fake.restoreAddressToClassicArgsForCall, struct {
		arg1 *ec2.RestoreAddressToClassicInput
	}{arg1})
	fake.recordInvocation("RestoreAddressToClassic", []interface{}{arg1})
	fake.restoreAddressToClassicMutex.Unlock()
	if fake.RestoreAddressToClassicStub != nil {
		return fake.RestoreAddressToClassicStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restoreAddressToClassicReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RestoreAddressToClassicCallCount() int {
	fake.restoreAddressToClassicMutex.RLock()
	defer fake.restoreAddressToClassicMutex.RUnlock()
	return len(fake.restoreAddressToClassicArgsForCall)
}

func (fake *FakeEC2API) RestoreAddressToClassicCalls(stub func(*ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error)) {
	fake.restoreAddressToClassicMutex.Lock()
	defer fake.restoreAddressToClassicMutex.Unlock()
	fake.RestoreAddressToClassicStub = stub
}

func (fake *FakeEC2API) RestoreAddressToClassicArgsForCall(i int) *ec2.RestoreAddressToClassicInput {
	fake.restoreAddressToClassicMutex.RLock()
	defer fake.restoreAddressToClassicMutex.RUnlock()
	argsForCall := fake.restoreAddressToClassicArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RestoreAddressToClassicReturns(result1 *ec2.RestoreAddressToClassicOutput, result2 error) {
	fake.restoreAddressToClassicMutex.Lock()
	defer fake.restoreAddressToClassicMutex.Unlock()
	fake.RestoreAddressToClassicStub = nil
	fake.restoreAddressToClassicReturns = struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RestoreAddressToClassicReturnsOnCall(i int, result1 *ec2.RestoreAddressToClassicOutput, result2 error) {
	fake.restoreAddressToClassicMutex.Lock()
	defer fake.restoreAddressToClassicMutex.Unlock()
	fake.RestoreAddressToClassicStub = nil
	if fake.restoreAddressToClassicReturnsOnCall == nil {
		fake.restoreAddressToClassicReturnsOnCall = make(map[int]struct {
			result1 *ec2.RestoreAddressToClassicOutput
			result2 error
		})
	}
	fake.restoreAddressToClassicReturnsOnCall[i] = struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RestoreAddressToClassicRequest(arg1 *ec2.RestoreAddressToClassicInput) (*request.Request, *ec2.RestoreAddressToClassicOutput) {
	fake.restoreAddressToClassicRequestMutex.Lock()
	ret, specificReturn := fake.restoreAddressToClassicRequestReturnsOnCall[len(fake.restoreAddressToClassicRequestArgsForCall)]
	fake.restoreAddressToClassicRequestArgsForCall = append(fake.restoreAddressToClassicRequestArgsForCall, struct {
		arg1 *ec2.RestoreAddressToClassicInput
	}{arg1})
	fake.recordInvocation("RestoreAddressToClassicRequest", []interface{}{arg1})
	fake.restoreAddressToClassicRequestMutex.Unlock()
	if fake.RestoreAddressToClassicRequestStub != nil {
		return fake.RestoreAddressToClassicRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restoreAddressToClassicRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RestoreAddressToClassicRequestCallCount() int {
	fake.restoreAddressToClassicRequestMutex.RLock()
	defer fake.restoreAddressToClassicRequestMutex.RUnlock()
	return len(fake.restoreAddressToClassicRequestArgsForCall)
}

func (fake *FakeEC2API) RestoreAddressToClassicRequestCalls(stub func(*ec2.RestoreAddressToClassicInput) (*request.Request, *ec2.RestoreAddressToClassicOutput)) {
	fake.restoreAddressToClassicRequestMutex.Lock()
	defer fake.restoreAddressToClassicRequestMutex.Unlock()
	fake.RestoreAddressToClassicRequestStub = stub
}

func (fake *FakeEC2API) RestoreAddressToClassicRequestArgsForCall(i int) *ec2.RestoreAddressToClassicInput {
	fake.restoreAddressToClassicRequestMutex.RLock()
	defer fake.restoreAddressToClassicRequestMutex.RUnlock()
	argsForCall := fake.restoreAddressToClassicRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RestoreAddressToClassicRequestReturns(result1 *request.Request, result2 *ec2.RestoreAddressToClassicOutput) {
	fake.restoreAddressToClassicRequestMutex.Lock()
	defer fake.restoreAddressToClassicRequestMutex.Unlock()
	fake.RestoreAddressToClassicRequestStub = nil
	fake.restoreAddressToClassicRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RestoreAddressToClassicOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RestoreAddressToClassicRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RestoreAddressToClassicOutput) {
	fake.restoreAddressToClassicRequestMutex.Lock()
	defer fake.restoreAddressToClassicRequestMutex.Unlock()
	fake.RestoreAddressToClassicRequestStub = nil
	if fake.restoreAddressToClassicRequestReturnsOnCall == nil {
		fake.restoreAddressToClassicRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RestoreAddressToClassicOutput
		})
	}
	fake.restoreAddressToClassicRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RestoreAddressToClassicOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RestoreAddressToClassicWithContext(arg1 aws.Context, arg2 *ec2.RestoreAddressToClassicInput, arg3 ...request.Option) (*ec2.RestoreAddressToClassicOutput, error) {
	fake.restoreAddressToClassicWithContextMutex.Lock()
	ret, specificReturn := fake.restoreAddressToClassicWithContextReturnsOnCall[len(fake.restoreAddressToClassicWithContextArgsForCall)]
	fake.restoreAddressToClassicWithContextArgsForCall = append(fake.restoreAddressToClassicWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RestoreAddressToClassicInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RestoreAddressToClassicWithContext", []interface{}{arg1, arg2, arg3})
	fake.restoreAddressToClassicWithContextMutex.Unlock()
	if fake.RestoreAddressToClassicWithContextStub != nil {
		return fake.RestoreAddressToClassicWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.restoreAddressToClassicWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RestoreAddressToClassicWithContextCallCount() int {
	fake.restoreAddressToClassicWithContextMutex.RLock()
	defer fake.restoreAddressToClassicWithContextMutex.RUnlock()
	return len(fake.restoreAddressToClassicWithContextArgsForCall)
}

func (fake *FakeEC2API) RestoreAddressToClassicWithContextCalls(stub func(aws.Context, *ec2.RestoreAddressToClassicInput, ...request.Option) (*ec2.RestoreAddressToClassicOutput, error)) {
	fake.restoreAddressToClassicWithContextMutex.Lock()
	defer fake.restoreAddressToClassicWithContextMutex.Unlock()
	fake.RestoreAddressToClassicWithContextStub = stub
}

func (fake *FakeEC2API) RestoreAddressToClassicWithContextArgsForCall(i int) (aws.Context, *ec2.RestoreAddressToClassicInput, []request.Option) {
	fake.restoreAddressToClassicWithContextMutex.RLock()
	defer fake.restoreAddressToClassicWithContextMutex.RUnlock()
	argsForCall := fake.restoreAddressToClassicWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RestoreAddressToClassicWithContextReturns(result1 *ec2.RestoreAddressToClassicOutput, result2 error) {
	fake.restoreAddressToClassicWithContextMutex.Lock()
	defer fake.restoreAddressToClassicWithContextMutex.Unlock()
	fake.RestoreAddressToClassicWithContextStub = nil
	fake.restoreAddressToClassicWithContextReturns = struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RestoreAddressToClassicWithContextReturnsOnCall(i int, result1 *ec2.RestoreAddressToClassicOutput, result2 error) {
	fake.restoreAddressToClassicWithContextMutex.Lock()
	defer fake.restoreAddressToClassicWithContextMutex.Unlock()
	fake.RestoreAddressToClassicWithContextStub = nil
	if fake.restoreAddressToClassicWithContextReturnsOnCall == nil {
		fake.restoreAddressToClassicWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RestoreAddressToClassicOutput
			result2 error
		})
	}
	fake.restoreAddressToClassicWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RestoreAddressToClassicOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeClientVpnIngress(arg1 *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error) {
	fake.revokeClientVpnIngressMutex.Lock()
	ret, specificReturn := fake.revokeClientVpnIngressReturnsOnCall[len(fake.revokeClientVpnIngressArgsForCall)]
	fake.revokeClientVpnIngressArgsForCall = append(fake.revokeClientVpnIngressArgsForCall, struct {
		arg1 *ec2.RevokeClientVpnIngressInput
	}{arg1})
	fake.recordInvocation("RevokeClientVpnIngress", []interface{}{arg1})
	fake.revokeClientVpnIngressMutex.Unlock()
	if fake.RevokeClientVpnIngressStub != nil {
		return fake.RevokeClientVpnIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeClientVpnIngressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeClientVpnIngressCallCount() int {
	fake.revokeClientVpnIngressMutex.RLock()
	defer fake.revokeClientVpnIngressMutex.RUnlock()
	return len(fake.revokeClientVpnIngressArgsForCall)
}

func (fake *FakeEC2API) RevokeClientVpnIngressCalls(stub func(*ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error)) {
	fake.revokeClientVpnIngressMutex.Lock()
	defer fake.revokeClientVpnIngressMutex.Unlock()
	fake.RevokeClientVpnIngressStub = stub
}

func (fake *FakeEC2API) RevokeClientVpnIngressArgsForCall(i int) *ec2.RevokeClientVpnIngressInput {
	fake.revokeClientVpnIngressMutex.RLock()
	defer fake.revokeClientVpnIngressMutex.RUnlock()
	argsForCall := fake.revokeClientVpnIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RevokeClientVpnIngressReturns(result1 *ec2.RevokeClientVpnIngressOutput, result2 error) {
	fake.revokeClientVpnIngressMutex.Lock()
	defer fake.revokeClientVpnIngressMutex.Unlock()
	fake.RevokeClientVpnIngressStub = nil
	fake.revokeClientVpnIngressReturns = struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeClientVpnIngressReturnsOnCall(i int, result1 *ec2.RevokeClientVpnIngressOutput, result2 error) {
	fake.revokeClientVpnIngressMutex.Lock()
	defer fake.revokeClientVpnIngressMutex.Unlock()
	fake.RevokeClientVpnIngressStub = nil
	if fake.revokeClientVpnIngressReturnsOnCall == nil {
		fake.revokeClientVpnIngressReturnsOnCall = make(map[int]struct {
			result1 *ec2.RevokeClientVpnIngressOutput
			result2 error
		})
	}
	fake.revokeClientVpnIngressReturnsOnCall[i] = struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeClientVpnIngressRequest(arg1 *ec2.RevokeClientVpnIngressInput) (*request.Request, *ec2.RevokeClientVpnIngressOutput) {
	fake.revokeClientVpnIngressRequestMutex.Lock()
	ret, specificReturn := fake.revokeClientVpnIngressRequestReturnsOnCall[len(fake.revokeClientVpnIngressRequestArgsForCall)]
	fake.revokeClientVpnIngressRequestArgsForCall = append(fake.revokeClientVpnIngressRequestArgsForCall, struct {
		arg1 *ec2.RevokeClientVpnIngressInput
	}{arg1})
	fake.recordInvocation("RevokeClientVpnIngressRequest", []interface{}{arg1})
	fake.revokeClientVpnIngressRequestMutex.Unlock()
	if fake.RevokeClientVpnIngressRequestStub != nil {
		return fake.RevokeClientVpnIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeClientVpnIngressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeClientVpnIngressRequestCallCount() int {
	fake.revokeClientVpnIngressRequestMutex.RLock()
	defer fake.revokeClientVpnIngressRequestMutex.RUnlock()
	return len(fake.revokeClientVpnIngressRequestArgsForCall)
}

func (fake *FakeEC2API) RevokeClientVpnIngressRequestCalls(stub func(*ec2.RevokeClientVpnIngressInput) (*request.Request, *ec2.RevokeClientVpnIngressOutput)) {
	fake.revokeClientVpnIngressRequestMutex.Lock()
	defer fake.revokeClientVpnIngressRequestMutex.Unlock()
	fake.RevokeClientVpnIngressRequestStub = stub
}

func (fake *FakeEC2API) RevokeClientVpnIngressRequestArgsForCall(i int) *ec2.RevokeClientVpnIngressInput {
	fake.revokeClientVpnIngressRequestMutex.RLock()
	defer fake.revokeClientVpnIngressRequestMutex.RUnlock()
	argsForCall := fake.revokeClientVpnIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RevokeClientVpnIngressRequestReturns(result1 *request.Request, result2 *ec2.RevokeClientVpnIngressOutput) {
	fake.revokeClientVpnIngressRequestMutex.Lock()
	defer fake.revokeClientVpnIngressRequestMutex.Unlock()
	fake.RevokeClientVpnIngressRequestStub = nil
	fake.revokeClientVpnIngressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RevokeClientVpnIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeClientVpnIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RevokeClientVpnIngressOutput) {
	fake.revokeClientVpnIngressRequestMutex.Lock()
	defer fake.revokeClientVpnIngressRequestMutex.Unlock()
	fake.RevokeClientVpnIngressRequestStub = nil
	if fake.revokeClientVpnIngressRequestReturnsOnCall == nil {
		fake.revokeClientVpnIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RevokeClientVpnIngressOutput
		})
	}
	fake.revokeClientVpnIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RevokeClientVpnIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeClientVpnIngressWithContext(arg1 aws.Context, arg2 *ec2.RevokeClientVpnIngressInput, arg3 ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error) {
	fake.revokeClientVpnIngressWithContextMutex.Lock()
	ret, specificReturn := fake.revokeClientVpnIngressWithContextReturnsOnCall[len(fake.revokeClientVpnIngressWithContextArgsForCall)]
	fake.revokeClientVpnIngressWithContextArgsForCall = append(fake.revokeClientVpnIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RevokeClientVpnIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RevokeClientVpnIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.revokeClientVpnIngressWithContextMutex.Unlock()
	if fake.RevokeClientVpnIngressWithContextStub != nil {
		return fake.RevokeClientVpnIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeClientVpnIngressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeClientVpnIngressWithContextCallCount() int {
	fake.revokeClientVpnIngressWithContextMutex.RLock()
	defer fake.revokeClientVpnIngressWithContextMutex.RUnlock()
	return len(fake.revokeClientVpnIngressWithContextArgsForCall)
}

func (fake *FakeEC2API) RevokeClientVpnIngressWithContextCalls(stub func(aws.Context, *ec2.RevokeClientVpnIngressInput, ...request.Option) (*ec2.RevokeClientVpnIngressOutput, error)) {
	fake.revokeClientVpnIngressWithContextMutex.Lock()
	defer fake.revokeClientVpnIngressWithContextMutex.Unlock()
	fake.RevokeClientVpnIngressWithContextStub = stub
}

func (fake *FakeEC2API) RevokeClientVpnIngressWithContextArgsForCall(i int) (aws.Context, *ec2.RevokeClientVpnIngressInput, []request.Option) {
	fake.revokeClientVpnIngressWithContextMutex.RLock()
	defer fake.revokeClientVpnIngressWithContextMutex.RUnlock()
	argsForCall := fake.revokeClientVpnIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RevokeClientVpnIngressWithContextReturns(result1 *ec2.RevokeClientVpnIngressOutput, result2 error) {
	fake.revokeClientVpnIngressWithContextMutex.Lock()
	defer fake.revokeClientVpnIngressWithContextMutex.Unlock()
	fake.RevokeClientVpnIngressWithContextStub = nil
	fake.revokeClientVpnIngressWithContextReturns = struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeClientVpnIngressWithContextReturnsOnCall(i int, result1 *ec2.RevokeClientVpnIngressOutput, result2 error) {
	fake.revokeClientVpnIngressWithContextMutex.Lock()
	defer fake.revokeClientVpnIngressWithContextMutex.Unlock()
	fake.RevokeClientVpnIngressWithContextStub = nil
	if fake.revokeClientVpnIngressWithContextReturnsOnCall == nil {
		fake.revokeClientVpnIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RevokeClientVpnIngressOutput
			result2 error
		})
	}
	fake.revokeClientVpnIngressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RevokeClientVpnIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupEgress(arg1 *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	fake.revokeSecurityGroupEgressMutex.Lock()
	ret, specificReturn := fake.revokeSecurityGroupEgressReturnsOnCall[len(fake.revokeSecurityGroupEgressArgsForCall)]
	fake.revokeSecurityGroupEgressArgsForCall = append(fake.revokeSecurityGroupEgressArgsForCall, struct {
		arg1 *ec2.RevokeSecurityGroupEgressInput
	}{arg1})
	fake.recordInvocation("RevokeSecurityGroupEgress", []interface{}{arg1})
	fake.revokeSecurityGroupEgressMutex.Unlock()
	if fake.RevokeSecurityGroupEgressStub != nil {
		return fake.RevokeSecurityGroupEgressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeSecurityGroupEgressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressCallCount() int {
	fake.revokeSecurityGroupEgressMutex.RLock()
	defer fake.revokeSecurityGroupEgressMutex.RUnlock()
	return len(fake.revokeSecurityGroupEgressArgsForCall)
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressCalls(stub func(*ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error)) {
	fake.revokeSecurityGroupEgressMutex.Lock()
	defer fake.revokeSecurityGroupEgressMutex.Unlock()
	fake.RevokeSecurityGroupEgressStub = stub
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressArgsForCall(i int) *ec2.RevokeSecurityGroupEgressInput {
	fake.revokeSecurityGroupEgressMutex.RLock()
	defer fake.revokeSecurityGroupEgressMutex.RUnlock()
	argsForCall := fake.revokeSecurityGroupEgressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressReturns(result1 *ec2.RevokeSecurityGroupEgressOutput, result2 error) {
	fake.revokeSecurityGroupEgressMutex.Lock()
	defer fake.revokeSecurityGroupEgressMutex.Unlock()
	fake.RevokeSecurityGroupEgressStub = nil
	fake.revokeSecurityGroupEgressReturns = struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressReturnsOnCall(i int, result1 *ec2.RevokeSecurityGroupEgressOutput, result2 error) {
	fake.revokeSecurityGroupEgressMutex.Lock()
	defer fake.revokeSecurityGroupEgressMutex.Unlock()
	fake.RevokeSecurityGroupEgressStub = nil
	if fake.revokeSecurityGroupEgressReturnsOnCall == nil {
		fake.revokeSecurityGroupEgressReturnsOnCall = make(map[int]struct {
			result1 *ec2.RevokeSecurityGroupEgressOutput
			result2 error
		})
	}
	fake.revokeSecurityGroupEgressReturnsOnCall[i] = struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressRequest(arg1 *ec2.RevokeSecurityGroupEgressInput) (*request.Request, *ec2.RevokeSecurityGroupEgressOutput) {
	fake.revokeSecurityGroupEgressRequestMutex.Lock()
	ret, specificReturn := fake.revokeSecurityGroupEgressRequestReturnsOnCall[len(fake.revokeSecurityGroupEgressRequestArgsForCall)]
	fake.revokeSecurityGroupEgressRequestArgsForCall = append(fake.revokeSecurityGroupEgressRequestArgsForCall, struct {
		arg1 *ec2.RevokeSecurityGroupEgressInput
	}{arg1})
	fake.recordInvocation("RevokeSecurityGroupEgressRequest", []interface{}{arg1})
	fake.revokeSecurityGroupEgressRequestMutex.Unlock()
	if fake.RevokeSecurityGroupEgressRequestStub != nil {
		return fake.RevokeSecurityGroupEgressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeSecurityGroupEgressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressRequestCallCount() int {
	fake.revokeSecurityGroupEgressRequestMutex.RLock()
	defer fake.revokeSecurityGroupEgressRequestMutex.RUnlock()
	return len(fake.revokeSecurityGroupEgressRequestArgsForCall)
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressRequestCalls(stub func(*ec2.RevokeSecurityGroupEgressInput) (*request.Request, *ec2.RevokeSecurityGroupEgressOutput)) {
	fake.revokeSecurityGroupEgressRequestMutex.Lock()
	defer fake.revokeSecurityGroupEgressRequestMutex.Unlock()
	fake.RevokeSecurityGroupEgressRequestStub = stub
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressRequestArgsForCall(i int) *ec2.RevokeSecurityGroupEgressInput {
	fake.revokeSecurityGroupEgressRequestMutex.RLock()
	defer fake.revokeSecurityGroupEgressRequestMutex.RUnlock()
	argsForCall := fake.revokeSecurityGroupEgressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressRequestReturns(result1 *request.Request, result2 *ec2.RevokeSecurityGroupEgressOutput) {
	fake.revokeSecurityGroupEgressRequestMutex.Lock()
	defer fake.revokeSecurityGroupEgressRequestMutex.Unlock()
	fake.RevokeSecurityGroupEgressRequestStub = nil
	fake.revokeSecurityGroupEgressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupEgressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RevokeSecurityGroupEgressOutput) {
	fake.revokeSecurityGroupEgressRequestMutex.Lock()
	defer fake.revokeSecurityGroupEgressRequestMutex.Unlock()
	fake.RevokeSecurityGroupEgressRequestStub = nil
	if fake.revokeSecurityGroupEgressRequestReturnsOnCall == nil {
		fake.revokeSecurityGroupEgressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RevokeSecurityGroupEgressOutput
		})
	}
	fake.revokeSecurityGroupEgressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupEgressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressWithContext(arg1 aws.Context, arg2 *ec2.RevokeSecurityGroupEgressInput, arg3 ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	fake.revokeSecurityGroupEgressWithContextMutex.Lock()
	ret, specificReturn := fake.revokeSecurityGroupEgressWithContextReturnsOnCall[len(fake.revokeSecurityGroupEgressWithContextArgsForCall)]
	fake.revokeSecurityGroupEgressWithContextArgsForCall = append(fake.revokeSecurityGroupEgressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RevokeSecurityGroupEgressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RevokeSecurityGroupEgressWithContext", []interface{}{arg1, arg2, arg3})
	fake.revokeSecurityGroupEgressWithContextMutex.Unlock()
	if fake.RevokeSecurityGroupEgressWithContextStub != nil {
		return fake.RevokeSecurityGroupEgressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeSecurityGroupEgressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressWithContextCallCount() int {
	fake.revokeSecurityGroupEgressWithContextMutex.RLock()
	defer fake.revokeSecurityGroupEgressWithContextMutex.RUnlock()
	return len(fake.revokeSecurityGroupEgressWithContextArgsForCall)
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressWithContextCalls(stub func(aws.Context, *ec2.RevokeSecurityGroupEgressInput, ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error)) {
	fake.revokeSecurityGroupEgressWithContextMutex.Lock()
	defer fake.revokeSecurityGroupEgressWithContextMutex.Unlock()
	fake.RevokeSecurityGroupEgressWithContextStub = stub
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressWithContextArgsForCall(i int) (aws.Context, *ec2.RevokeSecurityGroupEgressInput, []request.Option) {
	fake.revokeSecurityGroupEgressWithContextMutex.RLock()
	defer fake.revokeSecurityGroupEgressWithContextMutex.RUnlock()
	argsForCall := fake.revokeSecurityGroupEgressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressWithContextReturns(result1 *ec2.RevokeSecurityGroupEgressOutput, result2 error) {
	fake.revokeSecurityGroupEgressWithContextMutex.Lock()
	defer fake.revokeSecurityGroupEgressWithContextMutex.Unlock()
	fake.RevokeSecurityGroupEgressWithContextStub = nil
	fake.revokeSecurityGroupEgressWithContextReturns = struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupEgressWithContextReturnsOnCall(i int, result1 *ec2.RevokeSecurityGroupEgressOutput, result2 error) {
	fake.revokeSecurityGroupEgressWithContextMutex.Lock()
	defer fake.revokeSecurityGroupEgressWithContextMutex.Unlock()
	fake.RevokeSecurityGroupEgressWithContextStub = nil
	if fake.revokeSecurityGroupEgressWithContextReturnsOnCall == nil {
		fake.revokeSecurityGroupEgressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RevokeSecurityGroupEgressOutput
			result2 error
		})
	}
	fake.revokeSecurityGroupEgressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RevokeSecurityGroupEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupIngress(arg1 *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	fake.revokeSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.revokeSecurityGroupIngressReturnsOnCall[len(fake.revokeSecurityGroupIngressArgsForCall)]
	fake.revokeSecurityGroupIngressArgsForCall = append(fake.revokeSecurityGroupIngressArgsForCall, struct {
		arg1 *ec2.RevokeSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("RevokeSecurityGroupIngress", []interface{}{arg1})
	fake.revokeSecurityGroupIngressMutex.Unlock()
	if fake.RevokeSecurityGroupIngressStub != nil {
		return fake.RevokeSecurityGroupIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeSecurityGroupIngressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressCallCount() int {
	fake.revokeSecurityGroupIngressMutex.RLock()
	defer fake.revokeSecurityGroupIngressMutex.RUnlock()
	return len(fake.revokeSecurityGroupIngressArgsForCall)
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressCalls(stub func(*ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error)) {
	fake.revokeSecurityGroupIngressMutex.Lock()
	defer fake.revokeSecurityGroupIngressMutex.Unlock()
	fake.RevokeSecurityGroupIngressStub = stub
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressArgsForCall(i int) *ec2.RevokeSecurityGroupIngressInput {
	fake.revokeSecurityGroupIngressMutex.RLock()
	defer fake.revokeSecurityGroupIngressMutex.RUnlock()
	argsForCall := fake.revokeSecurityGroupIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressReturns(result1 *ec2.RevokeSecurityGroupIngressOutput, result2 error) {
	fake.revokeSecurityGroupIngressMutex.Lock()
	defer fake.revokeSecurityGroupIngressMutex.Unlock()
	fake.RevokeSecurityGroupIngressStub = nil
	fake.revokeSecurityGroupIngressReturns = struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressReturnsOnCall(i int, result1 *ec2.RevokeSecurityGroupIngressOutput, result2 error) {
	fake.revokeSecurityGroupIngressMutex.Lock()
	defer fake.revokeSecurityGroupIngressMutex.Unlock()
	fake.RevokeSecurityGroupIngressStub = nil
	if fake.revokeSecurityGroupIngressReturnsOnCall == nil {
		fake.revokeSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *ec2.RevokeSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressRequest(arg1 *ec2.RevokeSecurityGroupIngressInput) (*request.Request, *ec2.RevokeSecurityGroupIngressOutput) {
	fake.revokeSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.revokeSecurityGroupIngressRequestReturnsOnCall[len(fake.revokeSecurityGroupIngressRequestArgsForCall)]
	fake.revokeSecurityGroupIngressRequestArgsForCall = append(fake.revokeSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *ec2.RevokeSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("RevokeSecurityGroupIngressRequest", []interface{}{arg1})
	fake.revokeSecurityGroupIngressRequestMutex.Unlock()
	if fake.RevokeSecurityGroupIngressRequestStub != nil {
		return fake.RevokeSecurityGroupIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeSecurityGroupIngressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressRequestCallCount() int {
	fake.revokeSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.revokeSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressRequestCalls(stub func(*ec2.RevokeSecurityGroupIngressInput) (*request.Request, *ec2.RevokeSecurityGroupIngressOutput)) {
	fake.revokeSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeSecurityGroupIngressRequestStub = stub
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressRequestArgsForCall(i int) *ec2.RevokeSecurityGroupIngressInput {
	fake.revokeSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeSecurityGroupIngressRequestMutex.RUnlock()
	argsForCall := fake.revokeSecurityGroupIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *ec2.RevokeSecurityGroupIngressOutput) {
	fake.revokeSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeSecurityGroupIngressRequestStub = nil
	fake.revokeSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RevokeSecurityGroupIngressOutput) {
	fake.revokeSecurityGroupIngressRequestMutex.Lock()
	defer fake.revokeSecurityGroupIngressRequestMutex.Unlock()
	fake.RevokeSecurityGroupIngressRequestStub = nil
	if fake.revokeSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.revokeSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RevokeSecurityGroupIngressOutput
		})
	}
	fake.revokeSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RevokeSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressWithContext(arg1 aws.Context, arg2 *ec2.RevokeSecurityGroupIngressInput, arg3 ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	fake.revokeSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.revokeSecurityGroupIngressWithContextReturnsOnCall[len(fake.revokeSecurityGroupIngressWithContextArgsForCall)]
	fake.revokeSecurityGroupIngressWithContextArgsForCall = append(fake.revokeSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RevokeSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RevokeSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.revokeSecurityGroupIngressWithContextMutex.Unlock()
	if fake.RevokeSecurityGroupIngressWithContextStub != nil {
		return fake.RevokeSecurityGroupIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.revokeSecurityGroupIngressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressWithContextCallCount() int {
	fake.revokeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.revokeSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressWithContextCalls(stub func(aws.Context, *ec2.RevokeSecurityGroupIngressInput, ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error)) {
	fake.revokeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeSecurityGroupIngressWithContextStub = stub
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressWithContextArgsForCall(i int) (aws.Context, *ec2.RevokeSecurityGroupIngressInput, []request.Option) {
	fake.revokeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeSecurityGroupIngressWithContextMutex.RUnlock()
	argsForCall := fake.revokeSecurityGroupIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressWithContextReturns(result1 *ec2.RevokeSecurityGroupIngressOutput, result2 error) {
	fake.revokeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeSecurityGroupIngressWithContextStub = nil
	fake.revokeSecurityGroupIngressWithContextReturns = struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RevokeSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *ec2.RevokeSecurityGroupIngressOutput, result2 error) {
	fake.revokeSecurityGroupIngressWithContextMutex.Lock()
	defer fake.revokeSecurityGroupIngressWithContextMutex.Unlock()
	fake.RevokeSecurityGroupIngressWithContextStub = nil
	if fake.revokeSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.revokeSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RevokeSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RevokeSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunInstances(arg1 *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	fake.runInstancesMutex.Lock()
	ret, specificReturn := fake.runInstancesReturnsOnCall[len(fake.runInstancesArgsForCall)]
	fake.runInstancesArgsForCall = append(fake.runInstancesArgsForCall, struct {
		arg1 *ec2.RunInstancesInput
	}{arg1})
	fake.recordInvocation("RunInstances", []interface{}{arg1})
	fake.runInstancesMutex.Unlock()
	if fake.RunInstancesStub != nil {
		return fake.RunInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RunInstancesCallCount() int {
	fake.runInstancesMutex.RLock()
	defer fake.runInstancesMutex.RUnlock()
	return len(fake.runInstancesArgsForCall)
}

func (fake *FakeEC2API) RunInstancesCalls(stub func(*ec2.RunInstancesInput) (*ec2.Reservation, error)) {
	fake.runInstancesMutex.Lock()
	defer fake.runInstancesMutex.Unlock()
	fake.RunInstancesStub = stub
}

func (fake *FakeEC2API) RunInstancesArgsForCall(i int) *ec2.RunInstancesInput {
	fake.runInstancesMutex.RLock()
	defer fake.runInstancesMutex.RUnlock()
	argsForCall := fake.runInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RunInstancesReturns(result1 *ec2.Reservation, result2 error) {
	fake.runInstancesMutex.Lock()
	defer fake.runInstancesMutex.Unlock()
	fake.RunInstancesStub = nil
	fake.runInstancesReturns = struct {
		result1 *ec2.Reservation
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunInstancesReturnsOnCall(i int, result1 *ec2.Reservation, result2 error) {
	fake.runInstancesMutex.Lock()
	defer fake.runInstancesMutex.Unlock()
	fake.RunInstancesStub = nil
	if fake.runInstancesReturnsOnCall == nil {
		fake.runInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.Reservation
			result2 error
		})
	}
	fake.runInstancesReturnsOnCall[i] = struct {
		result1 *ec2.Reservation
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunInstancesRequest(arg1 *ec2.RunInstancesInput) (*request.Request, *ec2.Reservation) {
	fake.runInstancesRequestMutex.Lock()
	ret, specificReturn := fake.runInstancesRequestReturnsOnCall[len(fake.runInstancesRequestArgsForCall)]
	fake.runInstancesRequestArgsForCall = append(fake.runInstancesRequestArgsForCall, struct {
		arg1 *ec2.RunInstancesInput
	}{arg1})
	fake.recordInvocation("RunInstancesRequest", []interface{}{arg1})
	fake.runInstancesRequestMutex.Unlock()
	if fake.RunInstancesRequestStub != nil {
		return fake.RunInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RunInstancesRequestCallCount() int {
	fake.runInstancesRequestMutex.RLock()
	defer fake.runInstancesRequestMutex.RUnlock()
	return len(fake.runInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) RunInstancesRequestCalls(stub func(*ec2.RunInstancesInput) (*request.Request, *ec2.Reservation)) {
	fake.runInstancesRequestMutex.Lock()
	defer fake.runInstancesRequestMutex.Unlock()
	fake.RunInstancesRequestStub = stub
}

func (fake *FakeEC2API) RunInstancesRequestArgsForCall(i int) *ec2.RunInstancesInput {
	fake.runInstancesRequestMutex.RLock()
	defer fake.runInstancesRequestMutex.RUnlock()
	argsForCall := fake.runInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RunInstancesRequestReturns(result1 *request.Request, result2 *ec2.Reservation) {
	fake.runInstancesRequestMutex.Lock()
	defer fake.runInstancesRequestMutex.Unlock()
	fake.RunInstancesRequestStub = nil
	fake.runInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.Reservation
	}{result1, result2}
}

func (fake *FakeEC2API) RunInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.Reservation) {
	fake.runInstancesRequestMutex.Lock()
	defer fake.runInstancesRequestMutex.Unlock()
	fake.RunInstancesRequestStub = nil
	if fake.runInstancesRequestReturnsOnCall == nil {
		fake.runInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.Reservation
		})
	}
	fake.runInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.Reservation
	}{result1, result2}
}

func (fake *FakeEC2API) RunInstancesWithContext(arg1 aws.Context, arg2 *ec2.RunInstancesInput, arg3 ...request.Option) (*ec2.Reservation, error) {
	fake.runInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.runInstancesWithContextReturnsOnCall[len(fake.runInstancesWithContextArgsForCall)]
	fake.runInstancesWithContextArgsForCall = append(fake.runInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RunInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RunInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.runInstancesWithContextMutex.Unlock()
	if fake.RunInstancesWithContextStub != nil {
		return fake.RunInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RunInstancesWithContextCallCount() int {
	fake.runInstancesWithContextMutex.RLock()
	defer fake.runInstancesWithContextMutex.RUnlock()
	return len(fake.runInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) RunInstancesWithContextCalls(stub func(aws.Context, *ec2.RunInstancesInput, ...request.Option) (*ec2.Reservation, error)) {
	fake.runInstancesWithContextMutex.Lock()
	defer fake.runInstancesWithContextMutex.Unlock()
	fake.RunInstancesWithContextStub = stub
}

func (fake *FakeEC2API) RunInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.RunInstancesInput, []request.Option) {
	fake.runInstancesWithContextMutex.RLock()
	defer fake.runInstancesWithContextMutex.RUnlock()
	argsForCall := fake.runInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RunInstancesWithContextReturns(result1 *ec2.Reservation, result2 error) {
	fake.runInstancesWithContextMutex.Lock()
	defer fake.runInstancesWithContextMutex.Unlock()
	fake.RunInstancesWithContextStub = nil
	fake.runInstancesWithContextReturns = struct {
		result1 *ec2.Reservation
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunInstancesWithContextReturnsOnCall(i int, result1 *ec2.Reservation, result2 error) {
	fake.runInstancesWithContextMutex.Lock()
	defer fake.runInstancesWithContextMutex.Unlock()
	fake.RunInstancesWithContextStub = nil
	if fake.runInstancesWithContextReturnsOnCall == nil {
		fake.runInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.Reservation
			result2 error
		})
	}
	fake.runInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.Reservation
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunScheduledInstances(arg1 *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
	fake.runScheduledInstancesMutex.Lock()
	ret, specificReturn := fake.runScheduledInstancesReturnsOnCall[len(fake.runScheduledInstancesArgsForCall)]
	fake.runScheduledInstancesArgsForCall = append(fake.runScheduledInstancesArgsForCall, struct {
		arg1 *ec2.RunScheduledInstancesInput
	}{arg1})
	fake.recordInvocation("RunScheduledInstances", []interface{}{arg1})
	fake.runScheduledInstancesMutex.Unlock()
	if fake.RunScheduledInstancesStub != nil {
		return fake.RunScheduledInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runScheduledInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RunScheduledInstancesCallCount() int {
	fake.runScheduledInstancesMutex.RLock()
	defer fake.runScheduledInstancesMutex.RUnlock()
	return len(fake.runScheduledInstancesArgsForCall)
}

func (fake *FakeEC2API) RunScheduledInstancesCalls(stub func(*ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error)) {
	fake.runScheduledInstancesMutex.Lock()
	defer fake.runScheduledInstancesMutex.Unlock()
	fake.RunScheduledInstancesStub = stub
}

func (fake *FakeEC2API) RunScheduledInstancesArgsForCall(i int) *ec2.RunScheduledInstancesInput {
	fake.runScheduledInstancesMutex.RLock()
	defer fake.runScheduledInstancesMutex.RUnlock()
	argsForCall := fake.runScheduledInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RunScheduledInstancesReturns(result1 *ec2.RunScheduledInstancesOutput, result2 error) {
	fake.runScheduledInstancesMutex.Lock()
	defer fake.runScheduledInstancesMutex.Unlock()
	fake.RunScheduledInstancesStub = nil
	fake.runScheduledInstancesReturns = struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunScheduledInstancesReturnsOnCall(i int, result1 *ec2.RunScheduledInstancesOutput, result2 error) {
	fake.runScheduledInstancesMutex.Lock()
	defer fake.runScheduledInstancesMutex.Unlock()
	fake.RunScheduledInstancesStub = nil
	if fake.runScheduledInstancesReturnsOnCall == nil {
		fake.runScheduledInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.RunScheduledInstancesOutput
			result2 error
		})
	}
	fake.runScheduledInstancesReturnsOnCall[i] = struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunScheduledInstancesRequest(arg1 *ec2.RunScheduledInstancesInput) (*request.Request, *ec2.RunScheduledInstancesOutput) {
	fake.runScheduledInstancesRequestMutex.Lock()
	ret, specificReturn := fake.runScheduledInstancesRequestReturnsOnCall[len(fake.runScheduledInstancesRequestArgsForCall)]
	fake.runScheduledInstancesRequestArgsForCall = append(fake.runScheduledInstancesRequestArgsForCall, struct {
		arg1 *ec2.RunScheduledInstancesInput
	}{arg1})
	fake.recordInvocation("RunScheduledInstancesRequest", []interface{}{arg1})
	fake.runScheduledInstancesRequestMutex.Unlock()
	if fake.RunScheduledInstancesRequestStub != nil {
		return fake.RunScheduledInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runScheduledInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RunScheduledInstancesRequestCallCount() int {
	fake.runScheduledInstancesRequestMutex.RLock()
	defer fake.runScheduledInstancesRequestMutex.RUnlock()
	return len(fake.runScheduledInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) RunScheduledInstancesRequestCalls(stub func(*ec2.RunScheduledInstancesInput) (*request.Request, *ec2.RunScheduledInstancesOutput)) {
	fake.runScheduledInstancesRequestMutex.Lock()
	defer fake.runScheduledInstancesRequestMutex.Unlock()
	fake.RunScheduledInstancesRequestStub = stub
}

func (fake *FakeEC2API) RunScheduledInstancesRequestArgsForCall(i int) *ec2.RunScheduledInstancesInput {
	fake.runScheduledInstancesRequestMutex.RLock()
	defer fake.runScheduledInstancesRequestMutex.RUnlock()
	argsForCall := fake.runScheduledInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) RunScheduledInstancesRequestReturns(result1 *request.Request, result2 *ec2.RunScheduledInstancesOutput) {
	fake.runScheduledInstancesRequestMutex.Lock()
	defer fake.runScheduledInstancesRequestMutex.Unlock()
	fake.RunScheduledInstancesRequestStub = nil
	fake.runScheduledInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.RunScheduledInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RunScheduledInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.RunScheduledInstancesOutput) {
	fake.runScheduledInstancesRequestMutex.Lock()
	defer fake.runScheduledInstancesRequestMutex.Unlock()
	fake.RunScheduledInstancesRequestStub = nil
	if fake.runScheduledInstancesRequestReturnsOnCall == nil {
		fake.runScheduledInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.RunScheduledInstancesOutput
		})
	}
	fake.runScheduledInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.RunScheduledInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) RunScheduledInstancesWithContext(arg1 aws.Context, arg2 *ec2.RunScheduledInstancesInput, arg3 ...request.Option) (*ec2.RunScheduledInstancesOutput, error) {
	fake.runScheduledInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.runScheduledInstancesWithContextReturnsOnCall[len(fake.runScheduledInstancesWithContextArgsForCall)]
	fake.runScheduledInstancesWithContextArgsForCall = append(fake.runScheduledInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.RunScheduledInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RunScheduledInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.runScheduledInstancesWithContextMutex.Unlock()
	if fake.RunScheduledInstancesWithContextStub != nil {
		return fake.RunScheduledInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runScheduledInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) RunScheduledInstancesWithContextCallCount() int {
	fake.runScheduledInstancesWithContextMutex.RLock()
	defer fake.runScheduledInstancesWithContextMutex.RUnlock()
	return len(fake.runScheduledInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) RunScheduledInstancesWithContextCalls(stub func(aws.Context, *ec2.RunScheduledInstancesInput, ...request.Option) (*ec2.RunScheduledInstancesOutput, error)) {
	fake.runScheduledInstancesWithContextMutex.Lock()
	defer fake.runScheduledInstancesWithContextMutex.Unlock()
	fake.RunScheduledInstancesWithContextStub = stub
}

func (fake *FakeEC2API) RunScheduledInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.RunScheduledInstancesInput, []request.Option) {
	fake.runScheduledInstancesWithContextMutex.RLock()
	defer fake.runScheduledInstancesWithContextMutex.RUnlock()
	argsForCall := fake.runScheduledInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) RunScheduledInstancesWithContextReturns(result1 *ec2.RunScheduledInstancesOutput, result2 error) {
	fake.runScheduledInstancesWithContextMutex.Lock()
	defer fake.runScheduledInstancesWithContextMutex.Unlock()
	fake.RunScheduledInstancesWithContextStub = nil
	fake.runScheduledInstancesWithContextReturns = struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) RunScheduledInstancesWithContextReturnsOnCall(i int, result1 *ec2.RunScheduledInstancesOutput, result2 error) {
	fake.runScheduledInstancesWithContextMutex.Lock()
	defer fake.runScheduledInstancesWithContextMutex.Unlock()
	fake.RunScheduledInstancesWithContextStub = nil
	if fake.runScheduledInstancesWithContextReturnsOnCall == nil {
		fake.runScheduledInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.RunScheduledInstancesOutput
			result2 error
		})
	}
	fake.runScheduledInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.RunScheduledInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutes(arg1 *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	ret, specificReturn := fake.searchTransitGatewayRoutesReturnsOnCall[len(fake.searchTransitGatewayRoutesArgsForCall)]
	fake.searchTransitGatewayRoutesArgsForCall = append(fake.searchTransitGatewayRoutesArgsForCall, struct {
		arg1 *ec2.SearchTransitGatewayRoutesInput
	}{arg1})
	fake.recordInvocation("SearchTransitGatewayRoutes", []interface{}{arg1})
	fake.searchTransitGatewayRoutesMutex.Unlock()
	if fake.SearchTransitGatewayRoutesStub != nil {
		return fake.SearchTransitGatewayRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchTransitGatewayRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesCallCount() int {
	fake.searchTransitGatewayRoutesMutex.RLock()
	defer fake.searchTransitGatewayRoutesMutex.RUnlock()
	return len(fake.searchTransitGatewayRoutesArgsForCall)
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesCalls(stub func(*ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error)) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	defer fake.searchTransitGatewayRoutesMutex.Unlock()
	fake.SearchTransitGatewayRoutesStub = stub
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesArgsForCall(i int) *ec2.SearchTransitGatewayRoutesInput {
	fake.searchTransitGatewayRoutesMutex.RLock()
	defer fake.searchTransitGatewayRoutesMutex.RUnlock()
	argsForCall := fake.searchTransitGatewayRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesReturns(result1 *ec2.SearchTransitGatewayRoutesOutput, result2 error) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	defer fake.searchTransitGatewayRoutesMutex.Unlock()
	fake.SearchTransitGatewayRoutesStub = nil
	fake.searchTransitGatewayRoutesReturns = struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesReturnsOnCall(i int, result1 *ec2.SearchTransitGatewayRoutesOutput, result2 error) {
	fake.searchTransitGatewayRoutesMutex.Lock()
	defer fake.searchTransitGatewayRoutesMutex.Unlock()
	fake.SearchTransitGatewayRoutesStub = nil
	if fake.searchTransitGatewayRoutesReturnsOnCall == nil {
		fake.searchTransitGatewayRoutesReturnsOnCall = make(map[int]struct {
			result1 *ec2.SearchTransitGatewayRoutesOutput
			result2 error
		})
	}
	fake.searchTransitGatewayRoutesReturnsOnCall[i] = struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesRequest(arg1 *ec2.SearchTransitGatewayRoutesInput) (*request.Request, *ec2.SearchTransitGatewayRoutesOutput) {
	fake.searchTransitGatewayRoutesRequestMutex.Lock()
	ret, specificReturn := fake.searchTransitGatewayRoutesRequestReturnsOnCall[len(fake.searchTransitGatewayRoutesRequestArgsForCall)]
	fake.searchTransitGatewayRoutesRequestArgsForCall = append(fake.searchTransitGatewayRoutesRequestArgsForCall, struct {
		arg1 *ec2.SearchTransitGatewayRoutesInput
	}{arg1})
	fake.recordInvocation("SearchTransitGatewayRoutesRequest", []interface{}{arg1})
	fake.searchTransitGatewayRoutesRequestMutex.Unlock()
	if fake.SearchTransitGatewayRoutesRequestStub != nil {
		return fake.SearchTransitGatewayRoutesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchTransitGatewayRoutesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesRequestCallCount() int {
	fake.searchTransitGatewayRoutesRequestMutex.RLock()
	defer fake.searchTransitGatewayRoutesRequestMutex.RUnlock()
	return len(fake.searchTransitGatewayRoutesRequestArgsForCall)
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesRequestCalls(stub func(*ec2.SearchTransitGatewayRoutesInput) (*request.Request, *ec2.SearchTransitGatewayRoutesOutput)) {
	fake.searchTransitGatewayRoutesRequestMutex.Lock()
	defer fake.searchTransitGatewayRoutesRequestMutex.Unlock()
	fake.SearchTransitGatewayRoutesRequestStub = stub
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesRequestArgsForCall(i int) *ec2.SearchTransitGatewayRoutesInput {
	fake.searchTransitGatewayRoutesRequestMutex.RLock()
	defer fake.searchTransitGatewayRoutesRequestMutex.RUnlock()
	argsForCall := fake.searchTransitGatewayRoutesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesRequestReturns(result1 *request.Request, result2 *ec2.SearchTransitGatewayRoutesOutput) {
	fake.searchTransitGatewayRoutesRequestMutex.Lock()
	defer fake.searchTransitGatewayRoutesRequestMutex.Unlock()
	fake.SearchTransitGatewayRoutesRequestStub = nil
	fake.searchTransitGatewayRoutesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.SearchTransitGatewayRoutesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.SearchTransitGatewayRoutesOutput) {
	fake.searchTransitGatewayRoutesRequestMutex.Lock()
	defer fake.searchTransitGatewayRoutesRequestMutex.Unlock()
	fake.SearchTransitGatewayRoutesRequestStub = nil
	if fake.searchTransitGatewayRoutesRequestReturnsOnCall == nil {
		fake.searchTransitGatewayRoutesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.SearchTransitGatewayRoutesOutput
		})
	}
	fake.searchTransitGatewayRoutesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.SearchTransitGatewayRoutesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesWithContext(arg1 aws.Context, arg2 *ec2.SearchTransitGatewayRoutesInput, arg3 ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	fake.searchTransitGatewayRoutesWithContextMutex.Lock()
	ret, specificReturn := fake.searchTransitGatewayRoutesWithContextReturnsOnCall[len(fake.searchTransitGatewayRoutesWithContextArgsForCall)]
	fake.searchTransitGatewayRoutesWithContextArgsForCall = append(fake.searchTransitGatewayRoutesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.SearchTransitGatewayRoutesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SearchTransitGatewayRoutesWithContext", []interface{}{arg1, arg2, arg3})
	fake.searchTransitGatewayRoutesWithContextMutex.Unlock()
	if fake.SearchTransitGatewayRoutesWithContextStub != nil {
		return fake.SearchTransitGatewayRoutesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.searchTransitGatewayRoutesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesWithContextCallCount() int {
	fake.searchTransitGatewayRoutesWithContextMutex.RLock()
	defer fake.searchTransitGatewayRoutesWithContextMutex.RUnlock()
	return len(fake.searchTransitGatewayRoutesWithContextArgsForCall)
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesWithContextCalls(stub func(aws.Context, *ec2.SearchTransitGatewayRoutesInput, ...request.Option) (*ec2.SearchTransitGatewayRoutesOutput, error)) {
	fake.searchTransitGatewayRoutesWithContextMutex.Lock()
	defer fake.searchTransitGatewayRoutesWithContextMutex.Unlock()
	fake.SearchTransitGatewayRoutesWithContextStub = stub
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesWithContextArgsForCall(i int) (aws.Context, *ec2.SearchTransitGatewayRoutesInput, []request.Option) {
	fake.searchTransitGatewayRoutesWithContextMutex.RLock()
	defer fake.searchTransitGatewayRoutesWithContextMutex.RUnlock()
	argsForCall := fake.searchTransitGatewayRoutesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesWithContextReturns(result1 *ec2.SearchTransitGatewayRoutesOutput, result2 error) {
	fake.searchTransitGatewayRoutesWithContextMutex.Lock()
	defer fake.searchTransitGatewayRoutesWithContextMutex.Unlock()
	fake.SearchTransitGatewayRoutesWithContextStub = nil
	fake.searchTransitGatewayRoutesWithContextReturns = struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) SearchTransitGatewayRoutesWithContextReturnsOnCall(i int, result1 *ec2.SearchTransitGatewayRoutesOutput, result2 error) {
	fake.searchTransitGatewayRoutesWithContextMutex.Lock()
	defer fake.searchTransitGatewayRoutesWithContextMutex.Unlock()
	fake.SearchTransitGatewayRoutesWithContextStub = nil
	if fake.searchTransitGatewayRoutesWithContextReturnsOnCall == nil {
		fake.searchTransitGatewayRoutesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.SearchTransitGatewayRoutesOutput
			result2 error
		})
	}
	fake.searchTransitGatewayRoutesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.SearchTransitGatewayRoutesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StartInstances(arg1 *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	fake.startInstancesMutex.Lock()
	ret, specificReturn := fake.startInstancesReturnsOnCall[len(fake.startInstancesArgsForCall)]
	fake.startInstancesArgsForCall = append(fake.startInstancesArgsForCall, struct {
		arg1 *ec2.StartInstancesInput
	}{arg1})
	fake.recordInvocation("StartInstances", []interface{}{arg1})
	fake.startInstancesMutex.Unlock()
	if fake.StartInstancesStub != nil {
		return fake.StartInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) StartInstancesCallCount() int {
	fake.startInstancesMutex.RLock()
	defer fake.startInstancesMutex.RUnlock()
	return len(fake.startInstancesArgsForCall)
}

func (fake *FakeEC2API) StartInstancesCalls(stub func(*ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error)) {
	fake.startInstancesMutex.Lock()
	defer fake.startInstancesMutex.Unlock()
	fake.StartInstancesStub = stub
}

func (fake *FakeEC2API) StartInstancesArgsForCall(i int) *ec2.StartInstancesInput {
	fake.startInstancesMutex.RLock()
	defer fake.startInstancesMutex.RUnlock()
	argsForCall := fake.startInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) StartInstancesReturns(result1 *ec2.StartInstancesOutput, result2 error) {
	fake.startInstancesMutex.Lock()
	defer fake.startInstancesMutex.Unlock()
	fake.StartInstancesStub = nil
	fake.startInstancesReturns = struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StartInstancesReturnsOnCall(i int, result1 *ec2.StartInstancesOutput, result2 error) {
	fake.startInstancesMutex.Lock()
	defer fake.startInstancesMutex.Unlock()
	fake.StartInstancesStub = nil
	if fake.startInstancesReturnsOnCall == nil {
		fake.startInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.StartInstancesOutput
			result2 error
		})
	}
	fake.startInstancesReturnsOnCall[i] = struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StartInstancesRequest(arg1 *ec2.StartInstancesInput) (*request.Request, *ec2.StartInstancesOutput) {
	fake.startInstancesRequestMutex.Lock()
	ret, specificReturn := fake.startInstancesRequestReturnsOnCall[len(fake.startInstancesRequestArgsForCall)]
	fake.startInstancesRequestArgsForCall = append(fake.startInstancesRequestArgsForCall, struct {
		arg1 *ec2.StartInstancesInput
	}{arg1})
	fake.recordInvocation("StartInstancesRequest", []interface{}{arg1})
	fake.startInstancesRequestMutex.Unlock()
	if fake.StartInstancesRequestStub != nil {
		return fake.StartInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) StartInstancesRequestCallCount() int {
	fake.startInstancesRequestMutex.RLock()
	defer fake.startInstancesRequestMutex.RUnlock()
	return len(fake.startInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) StartInstancesRequestCalls(stub func(*ec2.StartInstancesInput) (*request.Request, *ec2.StartInstancesOutput)) {
	fake.startInstancesRequestMutex.Lock()
	defer fake.startInstancesRequestMutex.Unlock()
	fake.StartInstancesRequestStub = stub
}

func (fake *FakeEC2API) StartInstancesRequestArgsForCall(i int) *ec2.StartInstancesInput {
	fake.startInstancesRequestMutex.RLock()
	defer fake.startInstancesRequestMutex.RUnlock()
	argsForCall := fake.startInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) StartInstancesRequestReturns(result1 *request.Request, result2 *ec2.StartInstancesOutput) {
	fake.startInstancesRequestMutex.Lock()
	defer fake.startInstancesRequestMutex.Unlock()
	fake.StartInstancesRequestStub = nil
	fake.startInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.StartInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) StartInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.StartInstancesOutput) {
	fake.startInstancesRequestMutex.Lock()
	defer fake.startInstancesRequestMutex.Unlock()
	fake.StartInstancesRequestStub = nil
	if fake.startInstancesRequestReturnsOnCall == nil {
		fake.startInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.StartInstancesOutput
		})
	}
	fake.startInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.StartInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) StartInstancesWithContext(arg1 aws.Context, arg2 *ec2.StartInstancesInput, arg3 ...request.Option) (*ec2.StartInstancesOutput, error) {
	fake.startInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.startInstancesWithContextReturnsOnCall[len(fake.startInstancesWithContextArgsForCall)]
	fake.startInstancesWithContextArgsForCall = append(fake.startInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.StartInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("StartInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.startInstancesWithContextMutex.Unlock()
	if fake.StartInstancesWithContextStub != nil {
		return fake.StartInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) StartInstancesWithContextCallCount() int {
	fake.startInstancesWithContextMutex.RLock()
	defer fake.startInstancesWithContextMutex.RUnlock()
	return len(fake.startInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) StartInstancesWithContextCalls(stub func(aws.Context, *ec2.StartInstancesInput, ...request.Option) (*ec2.StartInstancesOutput, error)) {
	fake.startInstancesWithContextMutex.Lock()
	defer fake.startInstancesWithContextMutex.Unlock()
	fake.StartInstancesWithContextStub = stub
}

func (fake *FakeEC2API) StartInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.StartInstancesInput, []request.Option) {
	fake.startInstancesWithContextMutex.RLock()
	defer fake.startInstancesWithContextMutex.RUnlock()
	argsForCall := fake.startInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) StartInstancesWithContextReturns(result1 *ec2.StartInstancesOutput, result2 error) {
	fake.startInstancesWithContextMutex.Lock()
	defer fake.startInstancesWithContextMutex.Unlock()
	fake.StartInstancesWithContextStub = nil
	fake.startInstancesWithContextReturns = struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StartInstancesWithContextReturnsOnCall(i int, result1 *ec2.StartInstancesOutput, result2 error) {
	fake.startInstancesWithContextMutex.Lock()
	defer fake.startInstancesWithContextMutex.Unlock()
	fake.StartInstancesWithContextStub = nil
	if fake.startInstancesWithContextReturnsOnCall == nil {
		fake.startInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.StartInstancesOutput
			result2 error
		})
	}
	fake.startInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.StartInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StopInstances(arg1 *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	fake.stopInstancesMutex.Lock()
	ret, specificReturn := fake.stopInstancesReturnsOnCall[len(fake.stopInstancesArgsForCall)]
	fake.stopInstancesArgsForCall = append(fake.stopInstancesArgsForCall, struct {
		arg1 *ec2.StopInstancesInput
	}{arg1})
	fake.recordInvocation("StopInstances", []interface{}{arg1})
	fake.stopInstancesMutex.Unlock()
	if fake.StopInstancesStub != nil {
		return fake.StopInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) StopInstancesCallCount() int {
	fake.stopInstancesMutex.RLock()
	defer fake.stopInstancesMutex.RUnlock()
	return len(fake.stopInstancesArgsForCall)
}

func (fake *FakeEC2API) StopInstancesCalls(stub func(*ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error)) {
	fake.stopInstancesMutex.Lock()
	defer fake.stopInstancesMutex.Unlock()
	fake.StopInstancesStub = stub
}

func (fake *FakeEC2API) StopInstancesArgsForCall(i int) *ec2.StopInstancesInput {
	fake.stopInstancesMutex.RLock()
	defer fake.stopInstancesMutex.RUnlock()
	argsForCall := fake.stopInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) StopInstancesReturns(result1 *ec2.StopInstancesOutput, result2 error) {
	fake.stopInstancesMutex.Lock()
	defer fake.stopInstancesMutex.Unlock()
	fake.StopInstancesStub = nil
	fake.stopInstancesReturns = struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StopInstancesReturnsOnCall(i int, result1 *ec2.StopInstancesOutput, result2 error) {
	fake.stopInstancesMutex.Lock()
	defer fake.stopInstancesMutex.Unlock()
	fake.StopInstancesStub = nil
	if fake.stopInstancesReturnsOnCall == nil {
		fake.stopInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.StopInstancesOutput
			result2 error
		})
	}
	fake.stopInstancesReturnsOnCall[i] = struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StopInstancesRequest(arg1 *ec2.StopInstancesInput) (*request.Request, *ec2.StopInstancesOutput) {
	fake.stopInstancesRequestMutex.Lock()
	ret, specificReturn := fake.stopInstancesRequestReturnsOnCall[len(fake.stopInstancesRequestArgsForCall)]
	fake.stopInstancesRequestArgsForCall = append(fake.stopInstancesRequestArgsForCall, struct {
		arg1 *ec2.StopInstancesInput
	}{arg1})
	fake.recordInvocation("StopInstancesRequest", []interface{}{arg1})
	fake.stopInstancesRequestMutex.Unlock()
	if fake.StopInstancesRequestStub != nil {
		return fake.StopInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) StopInstancesRequestCallCount() int {
	fake.stopInstancesRequestMutex.RLock()
	defer fake.stopInstancesRequestMutex.RUnlock()
	return len(fake.stopInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) StopInstancesRequestCalls(stub func(*ec2.StopInstancesInput) (*request.Request, *ec2.StopInstancesOutput)) {
	fake.stopInstancesRequestMutex.Lock()
	defer fake.stopInstancesRequestMutex.Unlock()
	fake.StopInstancesRequestStub = stub
}

func (fake *FakeEC2API) StopInstancesRequestArgsForCall(i int) *ec2.StopInstancesInput {
	fake.stopInstancesRequestMutex.RLock()
	defer fake.stopInstancesRequestMutex.RUnlock()
	argsForCall := fake.stopInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) StopInstancesRequestReturns(result1 *request.Request, result2 *ec2.StopInstancesOutput) {
	fake.stopInstancesRequestMutex.Lock()
	defer fake.stopInstancesRequestMutex.Unlock()
	fake.StopInstancesRequestStub = nil
	fake.stopInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.StopInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) StopInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.StopInstancesOutput) {
	fake.stopInstancesRequestMutex.Lock()
	defer fake.stopInstancesRequestMutex.Unlock()
	fake.StopInstancesRequestStub = nil
	if fake.stopInstancesRequestReturnsOnCall == nil {
		fake.stopInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.StopInstancesOutput
		})
	}
	fake.stopInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.StopInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) StopInstancesWithContext(arg1 aws.Context, arg2 *ec2.StopInstancesInput, arg3 ...request.Option) (*ec2.StopInstancesOutput, error) {
	fake.stopInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.stopInstancesWithContextReturnsOnCall[len(fake.stopInstancesWithContextArgsForCall)]
	fake.stopInstancesWithContextArgsForCall = append(fake.stopInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.StopInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("StopInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopInstancesWithContextMutex.Unlock()
	if fake.StopInstancesWithContextStub != nil {
		return fake.StopInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) StopInstancesWithContextCallCount() int {
	fake.stopInstancesWithContextMutex.RLock()
	defer fake.stopInstancesWithContextMutex.RUnlock()
	return len(fake.stopInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) StopInstancesWithContextCalls(stub func(aws.Context, *ec2.StopInstancesInput, ...request.Option) (*ec2.StopInstancesOutput, error)) {
	fake.stopInstancesWithContextMutex.Lock()
	defer fake.stopInstancesWithContextMutex.Unlock()
	fake.StopInstancesWithContextStub = stub
}

func (fake *FakeEC2API) StopInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.StopInstancesInput, []request.Option) {
	fake.stopInstancesWithContextMutex.RLock()
	defer fake.stopInstancesWithContextMutex.RUnlock()
	argsForCall := fake.stopInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) StopInstancesWithContextReturns(result1 *ec2.StopInstancesOutput, result2 error) {
	fake.stopInstancesWithContextMutex.Lock()
	defer fake.stopInstancesWithContextMutex.Unlock()
	fake.StopInstancesWithContextStub = nil
	fake.stopInstancesWithContextReturns = struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) StopInstancesWithContextReturnsOnCall(i int, result1 *ec2.StopInstancesOutput, result2 error) {
	fake.stopInstancesWithContextMutex.Lock()
	defer fake.stopInstancesWithContextMutex.Unlock()
	fake.StopInstancesWithContextStub = nil
	if fake.stopInstancesWithContextReturnsOnCall == nil {
		fake.stopInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.StopInstancesOutput
			result2 error
		})
	}
	fake.stopInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.StopInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateClientVpnConnections(arg1 *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	fake.terminateClientVpnConnectionsMutex.Lock()
	ret, specificReturn := fake.terminateClientVpnConnectionsReturnsOnCall[len(fake.terminateClientVpnConnectionsArgsForCall)]
	fake.terminateClientVpnConnectionsArgsForCall = append(fake.terminateClientVpnConnectionsArgsForCall, struct {
		arg1 *ec2.TerminateClientVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("TerminateClientVpnConnections", []interface{}{arg1})
	fake.terminateClientVpnConnectionsMutex.Unlock()
	if fake.TerminateClientVpnConnectionsStub != nil {
		return fake.TerminateClientVpnConnectionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.terminateClientVpnConnectionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsCallCount() int {
	fake.terminateClientVpnConnectionsMutex.RLock()
	defer fake.terminateClientVpnConnectionsMutex.RUnlock()
	return len(fake.terminateClientVpnConnectionsArgsForCall)
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsCalls(stub func(*ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error)) {
	fake.terminateClientVpnConnectionsMutex.Lock()
	defer fake.terminateClientVpnConnectionsMutex.Unlock()
	fake.TerminateClientVpnConnectionsStub = stub
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsArgsForCall(i int) *ec2.TerminateClientVpnConnectionsInput {
	fake.terminateClientVpnConnectionsMutex.RLock()
	defer fake.terminateClientVpnConnectionsMutex.RUnlock()
	argsForCall := fake.terminateClientVpnConnectionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsReturns(result1 *ec2.TerminateClientVpnConnectionsOutput, result2 error) {
	fake.terminateClientVpnConnectionsMutex.Lock()
	defer fake.terminateClientVpnConnectionsMutex.Unlock()
	fake.TerminateClientVpnConnectionsStub = nil
	fake.terminateClientVpnConnectionsReturns = struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsReturnsOnCall(i int, result1 *ec2.TerminateClientVpnConnectionsOutput, result2 error) {
	fake.terminateClientVpnConnectionsMutex.Lock()
	defer fake.terminateClientVpnConnectionsMutex.Unlock()
	fake.TerminateClientVpnConnectionsStub = nil
	if fake.terminateClientVpnConnectionsReturnsOnCall == nil {
		fake.terminateClientVpnConnectionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.TerminateClientVpnConnectionsOutput
			result2 error
		})
	}
	fake.terminateClientVpnConnectionsReturnsOnCall[i] = struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsRequest(arg1 *ec2.TerminateClientVpnConnectionsInput) (*request.Request, *ec2.TerminateClientVpnConnectionsOutput) {
	fake.terminateClientVpnConnectionsRequestMutex.Lock()
	ret, specificReturn := fake.terminateClientVpnConnectionsRequestReturnsOnCall[len(fake.terminateClientVpnConnectionsRequestArgsForCall)]
	fake.terminateClientVpnConnectionsRequestArgsForCall = append(fake.terminateClientVpnConnectionsRequestArgsForCall, struct {
		arg1 *ec2.TerminateClientVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("TerminateClientVpnConnectionsRequest", []interface{}{arg1})
	fake.terminateClientVpnConnectionsRequestMutex.Unlock()
	if fake.TerminateClientVpnConnectionsRequestStub != nil {
		return fake.TerminateClientVpnConnectionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.terminateClientVpnConnectionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsRequestCallCount() int {
	fake.terminateClientVpnConnectionsRequestMutex.RLock()
	defer fake.terminateClientVpnConnectionsRequestMutex.RUnlock()
	return len(fake.terminateClientVpnConnectionsRequestArgsForCall)
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsRequestCalls(stub func(*ec2.TerminateClientVpnConnectionsInput) (*request.Request, *ec2.TerminateClientVpnConnectionsOutput)) {
	fake.terminateClientVpnConnectionsRequestMutex.Lock()
	defer fake.terminateClientVpnConnectionsRequestMutex.Unlock()
	fake.TerminateClientVpnConnectionsRequestStub = stub
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsRequestArgsForCall(i int) *ec2.TerminateClientVpnConnectionsInput {
	fake.terminateClientVpnConnectionsRequestMutex.RLock()
	defer fake.terminateClientVpnConnectionsRequestMutex.RUnlock()
	argsForCall := fake.terminateClientVpnConnectionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsRequestReturns(result1 *request.Request, result2 *ec2.TerminateClientVpnConnectionsOutput) {
	fake.terminateClientVpnConnectionsRequestMutex.Lock()
	defer fake.terminateClientVpnConnectionsRequestMutex.Unlock()
	fake.TerminateClientVpnConnectionsRequestStub = nil
	fake.terminateClientVpnConnectionsRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.TerminateClientVpnConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.TerminateClientVpnConnectionsOutput) {
	fake.terminateClientVpnConnectionsRequestMutex.Lock()
	defer fake.terminateClientVpnConnectionsRequestMutex.Unlock()
	fake.TerminateClientVpnConnectionsRequestStub = nil
	if fake.terminateClientVpnConnectionsRequestReturnsOnCall == nil {
		fake.terminateClientVpnConnectionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.TerminateClientVpnConnectionsOutput
		})
	}
	fake.terminateClientVpnConnectionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.TerminateClientVpnConnectionsOutput
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsWithContext(arg1 aws.Context, arg2 *ec2.TerminateClientVpnConnectionsInput, arg3 ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	fake.terminateClientVpnConnectionsWithContextMutex.Lock()
	ret, specificReturn := fake.terminateClientVpnConnectionsWithContextReturnsOnCall[len(fake.terminateClientVpnConnectionsWithContextArgsForCall)]
	fake.terminateClientVpnConnectionsWithContextArgsForCall = append(fake.terminateClientVpnConnectionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.TerminateClientVpnConnectionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TerminateClientVpnConnectionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.terminateClientVpnConnectionsWithContextMutex.Unlock()
	if fake.TerminateClientVpnConnectionsWithContextStub != nil {
		return fake.TerminateClientVpnConnectionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.terminateClientVpnConnectionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsWithContextCallCount() int {
	fake.terminateClientVpnConnectionsWithContextMutex.RLock()
	defer fake.terminateClientVpnConnectionsWithContextMutex.RUnlock()
	return len(fake.terminateClientVpnConnectionsWithContextArgsForCall)
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsWithContextCalls(stub func(aws.Context, *ec2.TerminateClientVpnConnectionsInput, ...request.Option) (*ec2.TerminateClientVpnConnectionsOutput, error)) {
	fake.terminateClientVpnConnectionsWithContextMutex.Lock()
	defer fake.terminateClientVpnConnectionsWithContextMutex.Unlock()
	fake.TerminateClientVpnConnectionsWithContextStub = stub
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsWithContextArgsForCall(i int) (aws.Context, *ec2.TerminateClientVpnConnectionsInput, []request.Option) {
	fake.terminateClientVpnConnectionsWithContextMutex.RLock()
	defer fake.terminateClientVpnConnectionsWithContextMutex.RUnlock()
	argsForCall := fake.terminateClientVpnConnectionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsWithContextReturns(result1 *ec2.TerminateClientVpnConnectionsOutput, result2 error) {
	fake.terminateClientVpnConnectionsWithContextMutex.Lock()
	defer fake.terminateClientVpnConnectionsWithContextMutex.Unlock()
	fake.TerminateClientVpnConnectionsWithContextStub = nil
	fake.terminateClientVpnConnectionsWithContextReturns = struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateClientVpnConnectionsWithContextReturnsOnCall(i int, result1 *ec2.TerminateClientVpnConnectionsOutput, result2 error) {
	fake.terminateClientVpnConnectionsWithContextMutex.Lock()
	defer fake.terminateClientVpnConnectionsWithContextMutex.Unlock()
	fake.TerminateClientVpnConnectionsWithContextStub = nil
	if fake.terminateClientVpnConnectionsWithContextReturnsOnCall == nil {
		fake.terminateClientVpnConnectionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.TerminateClientVpnConnectionsOutput
			result2 error
		})
	}
	fake.terminateClientVpnConnectionsWithContextReturnsOnCall[i] = struct {
		result1 *ec2.TerminateClientVpnConnectionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateInstances(arg1 *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	fake.terminateInstancesMutex.Lock()
	ret, specificReturn := fake.terminateInstancesReturnsOnCall[len(fake.terminateInstancesArgsForCall)]
	fake.terminateInstancesArgsForCall = append(fake.terminateInstancesArgsForCall, struct {
		arg1 *ec2.TerminateInstancesInput
	}{arg1})
	fake.recordInvocation("TerminateInstances", []interface{}{arg1})
	fake.terminateInstancesMutex.Unlock()
	if fake.TerminateInstancesStub != nil {
		return fake.TerminateInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.terminateInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) TerminateInstancesCallCount() int {
	fake.terminateInstancesMutex.RLock()
	defer fake.terminateInstancesMutex.RUnlock()
	return len(fake.terminateInstancesArgsForCall)
}

func (fake *FakeEC2API) TerminateInstancesCalls(stub func(*ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)) {
	fake.terminateInstancesMutex.Lock()
	defer fake.terminateInstancesMutex.Unlock()
	fake.TerminateInstancesStub = stub
}

func (fake *FakeEC2API) TerminateInstancesArgsForCall(i int) *ec2.TerminateInstancesInput {
	fake.terminateInstancesMutex.RLock()
	defer fake.terminateInstancesMutex.RUnlock()
	argsForCall := fake.terminateInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) TerminateInstancesReturns(result1 *ec2.TerminateInstancesOutput, result2 error) {
	fake.terminateInstancesMutex.Lock()
	defer fake.terminateInstancesMutex.Unlock()
	fake.TerminateInstancesStub = nil
	fake.terminateInstancesReturns = struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateInstancesReturnsOnCall(i int, result1 *ec2.TerminateInstancesOutput, result2 error) {
	fake.terminateInstancesMutex.Lock()
	defer fake.terminateInstancesMutex.Unlock()
	fake.TerminateInstancesStub = nil
	if fake.terminateInstancesReturnsOnCall == nil {
		fake.terminateInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.TerminateInstancesOutput
			result2 error
		})
	}
	fake.terminateInstancesReturnsOnCall[i] = struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateInstancesRequest(arg1 *ec2.TerminateInstancesInput) (*request.Request, *ec2.TerminateInstancesOutput) {
	fake.terminateInstancesRequestMutex.Lock()
	ret, specificReturn := fake.terminateInstancesRequestReturnsOnCall[len(fake.terminateInstancesRequestArgsForCall)]
	fake.terminateInstancesRequestArgsForCall = append(fake.terminateInstancesRequestArgsForCall, struct {
		arg1 *ec2.TerminateInstancesInput
	}{arg1})
	fake.recordInvocation("TerminateInstancesRequest", []interface{}{arg1})
	fake.terminateInstancesRequestMutex.Unlock()
	if fake.TerminateInstancesRequestStub != nil {
		return fake.TerminateInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.terminateInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) TerminateInstancesRequestCallCount() int {
	fake.terminateInstancesRequestMutex.RLock()
	defer fake.terminateInstancesRequestMutex.RUnlock()
	return len(fake.terminateInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) TerminateInstancesRequestCalls(stub func(*ec2.TerminateInstancesInput) (*request.Request, *ec2.TerminateInstancesOutput)) {
	fake.terminateInstancesRequestMutex.Lock()
	defer fake.terminateInstancesRequestMutex.Unlock()
	fake.TerminateInstancesRequestStub = stub
}

func (fake *FakeEC2API) TerminateInstancesRequestArgsForCall(i int) *ec2.TerminateInstancesInput {
	fake.terminateInstancesRequestMutex.RLock()
	defer fake.terminateInstancesRequestMutex.RUnlock()
	argsForCall := fake.terminateInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) TerminateInstancesRequestReturns(result1 *request.Request, result2 *ec2.TerminateInstancesOutput) {
	fake.terminateInstancesRequestMutex.Lock()
	defer fake.terminateInstancesRequestMutex.Unlock()
	fake.TerminateInstancesRequestStub = nil
	fake.terminateInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.TerminateInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.TerminateInstancesOutput) {
	fake.terminateInstancesRequestMutex.Lock()
	defer fake.terminateInstancesRequestMutex.Unlock()
	fake.TerminateInstancesRequestStub = nil
	if fake.terminateInstancesRequestReturnsOnCall == nil {
		fake.terminateInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.TerminateInstancesOutput
		})
	}
	fake.terminateInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.TerminateInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateInstancesWithContext(arg1 aws.Context, arg2 *ec2.TerminateInstancesInput, arg3 ...request.Option) (*ec2.TerminateInstancesOutput, error) {
	fake.terminateInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.terminateInstancesWithContextReturnsOnCall[len(fake.terminateInstancesWithContextArgsForCall)]
	fake.terminateInstancesWithContextArgsForCall = append(fake.terminateInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.TerminateInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TerminateInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.terminateInstancesWithContextMutex.Unlock()
	if fake.TerminateInstancesWithContextStub != nil {
		return fake.TerminateInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.terminateInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) TerminateInstancesWithContextCallCount() int {
	fake.terminateInstancesWithContextMutex.RLock()
	defer fake.terminateInstancesWithContextMutex.RUnlock()
	return len(fake.terminateInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) TerminateInstancesWithContextCalls(stub func(aws.Context, *ec2.TerminateInstancesInput, ...request.Option) (*ec2.TerminateInstancesOutput, error)) {
	fake.terminateInstancesWithContextMutex.Lock()
	defer fake.terminateInstancesWithContextMutex.Unlock()
	fake.TerminateInstancesWithContextStub = stub
}

func (fake *FakeEC2API) TerminateInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.TerminateInstancesInput, []request.Option) {
	fake.terminateInstancesWithContextMutex.RLock()
	defer fake.terminateInstancesWithContextMutex.RUnlock()
	argsForCall := fake.terminateInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) TerminateInstancesWithContextReturns(result1 *ec2.TerminateInstancesOutput, result2 error) {
	fake.terminateInstancesWithContextMutex.Lock()
	defer fake.terminateInstancesWithContextMutex.Unlock()
	fake.TerminateInstancesWithContextStub = nil
	fake.terminateInstancesWithContextReturns = struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) TerminateInstancesWithContextReturnsOnCall(i int, result1 *ec2.TerminateInstancesOutput, result2 error) {
	fake.terminateInstancesWithContextMutex.Lock()
	defer fake.terminateInstancesWithContextMutex.Unlock()
	fake.TerminateInstancesWithContextStub = nil
	if fake.terminateInstancesWithContextReturnsOnCall == nil {
		fake.terminateInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.TerminateInstancesOutput
			result2 error
		})
	}
	fake.terminateInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.TerminateInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignIpv6Addresses(arg1 *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
	fake.unassignIpv6AddressesMutex.Lock()
	ret, specificReturn := fake.unassignIpv6AddressesReturnsOnCall[len(fake.unassignIpv6AddressesArgsForCall)]
	fake.unassignIpv6AddressesArgsForCall = append(fake.unassignIpv6AddressesArgsForCall, struct {
		arg1 *ec2.UnassignIpv6AddressesInput
	}{arg1})
	fake.recordInvocation("UnassignIpv6Addresses", []interface{}{arg1})
	fake.unassignIpv6AddressesMutex.Unlock()
	if fake.UnassignIpv6AddressesStub != nil {
		return fake.UnassignIpv6AddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unassignIpv6AddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnassignIpv6AddressesCallCount() int {
	fake.unassignIpv6AddressesMutex.RLock()
	defer fake.unassignIpv6AddressesMutex.RUnlock()
	return len(fake.unassignIpv6AddressesArgsForCall)
}

func (fake *FakeEC2API) UnassignIpv6AddressesCalls(stub func(*ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error)) {
	fake.unassignIpv6AddressesMutex.Lock()
	defer fake.unassignIpv6AddressesMutex.Unlock()
	fake.UnassignIpv6AddressesStub = stub
}

func (fake *FakeEC2API) UnassignIpv6AddressesArgsForCall(i int) *ec2.UnassignIpv6AddressesInput {
	fake.unassignIpv6AddressesMutex.RLock()
	defer fake.unassignIpv6AddressesMutex.RUnlock()
	argsForCall := fake.unassignIpv6AddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UnassignIpv6AddressesReturns(result1 *ec2.UnassignIpv6AddressesOutput, result2 error) {
	fake.unassignIpv6AddressesMutex.Lock()
	defer fake.unassignIpv6AddressesMutex.Unlock()
	fake.UnassignIpv6AddressesStub = nil
	fake.unassignIpv6AddressesReturns = struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignIpv6AddressesReturnsOnCall(i int, result1 *ec2.UnassignIpv6AddressesOutput, result2 error) {
	fake.unassignIpv6AddressesMutex.Lock()
	defer fake.unassignIpv6AddressesMutex.Unlock()
	fake.UnassignIpv6AddressesStub = nil
	if fake.unassignIpv6AddressesReturnsOnCall == nil {
		fake.unassignIpv6AddressesReturnsOnCall = make(map[int]struct {
			result1 *ec2.UnassignIpv6AddressesOutput
			result2 error
		})
	}
	fake.unassignIpv6AddressesReturnsOnCall[i] = struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignIpv6AddressesRequest(arg1 *ec2.UnassignIpv6AddressesInput) (*request.Request, *ec2.UnassignIpv6AddressesOutput) {
	fake.unassignIpv6AddressesRequestMutex.Lock()
	ret, specificReturn := fake.unassignIpv6AddressesRequestReturnsOnCall[len(fake.unassignIpv6AddressesRequestArgsForCall)]
	fake.unassignIpv6AddressesRequestArgsForCall = append(fake.unassignIpv6AddressesRequestArgsForCall, struct {
		arg1 *ec2.UnassignIpv6AddressesInput
	}{arg1})
	fake.recordInvocation("UnassignIpv6AddressesRequest", []interface{}{arg1})
	fake.unassignIpv6AddressesRequestMutex.Unlock()
	if fake.UnassignIpv6AddressesRequestStub != nil {
		return fake.UnassignIpv6AddressesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unassignIpv6AddressesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnassignIpv6AddressesRequestCallCount() int {
	fake.unassignIpv6AddressesRequestMutex.RLock()
	defer fake.unassignIpv6AddressesRequestMutex.RUnlock()
	return len(fake.unassignIpv6AddressesRequestArgsForCall)
}

func (fake *FakeEC2API) UnassignIpv6AddressesRequestCalls(stub func(*ec2.UnassignIpv6AddressesInput) (*request.Request, *ec2.UnassignIpv6AddressesOutput)) {
	fake.unassignIpv6AddressesRequestMutex.Lock()
	defer fake.unassignIpv6AddressesRequestMutex.Unlock()
	fake.UnassignIpv6AddressesRequestStub = stub
}

func (fake *FakeEC2API) UnassignIpv6AddressesRequestArgsForCall(i int) *ec2.UnassignIpv6AddressesInput {
	fake.unassignIpv6AddressesRequestMutex.RLock()
	defer fake.unassignIpv6AddressesRequestMutex.RUnlock()
	argsForCall := fake.unassignIpv6AddressesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UnassignIpv6AddressesRequestReturns(result1 *request.Request, result2 *ec2.UnassignIpv6AddressesOutput) {
	fake.unassignIpv6AddressesRequestMutex.Lock()
	defer fake.unassignIpv6AddressesRequestMutex.Unlock()
	fake.UnassignIpv6AddressesRequestStub = nil
	fake.unassignIpv6AddressesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.UnassignIpv6AddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignIpv6AddressesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.UnassignIpv6AddressesOutput) {
	fake.unassignIpv6AddressesRequestMutex.Lock()
	defer fake.unassignIpv6AddressesRequestMutex.Unlock()
	fake.UnassignIpv6AddressesRequestStub = nil
	if fake.unassignIpv6AddressesRequestReturnsOnCall == nil {
		fake.unassignIpv6AddressesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.UnassignIpv6AddressesOutput
		})
	}
	fake.unassignIpv6AddressesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.UnassignIpv6AddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignIpv6AddressesWithContext(arg1 aws.Context, arg2 *ec2.UnassignIpv6AddressesInput, arg3 ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error) {
	fake.unassignIpv6AddressesWithContextMutex.Lock()
	ret, specificReturn := fake.unassignIpv6AddressesWithContextReturnsOnCall[len(fake.unassignIpv6AddressesWithContextArgsForCall)]
	fake.unassignIpv6AddressesWithContextArgsForCall = append(fake.unassignIpv6AddressesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.UnassignIpv6AddressesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UnassignIpv6AddressesWithContext", []interface{}{arg1, arg2, arg3})
	fake.unassignIpv6AddressesWithContextMutex.Unlock()
	if fake.UnassignIpv6AddressesWithContextStub != nil {
		return fake.UnassignIpv6AddressesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unassignIpv6AddressesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnassignIpv6AddressesWithContextCallCount() int {
	fake.unassignIpv6AddressesWithContextMutex.RLock()
	defer fake.unassignIpv6AddressesWithContextMutex.RUnlock()
	return len(fake.unassignIpv6AddressesWithContextArgsForCall)
}

func (fake *FakeEC2API) UnassignIpv6AddressesWithContextCalls(stub func(aws.Context, *ec2.UnassignIpv6AddressesInput, ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error)) {
	fake.unassignIpv6AddressesWithContextMutex.Lock()
	defer fake.unassignIpv6AddressesWithContextMutex.Unlock()
	fake.UnassignIpv6AddressesWithContextStub = stub
}

func (fake *FakeEC2API) UnassignIpv6AddressesWithContextArgsForCall(i int) (aws.Context, *ec2.UnassignIpv6AddressesInput, []request.Option) {
	fake.unassignIpv6AddressesWithContextMutex.RLock()
	defer fake.unassignIpv6AddressesWithContextMutex.RUnlock()
	argsForCall := fake.unassignIpv6AddressesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) UnassignIpv6AddressesWithContextReturns(result1 *ec2.UnassignIpv6AddressesOutput, result2 error) {
	fake.unassignIpv6AddressesWithContextMutex.Lock()
	defer fake.unassignIpv6AddressesWithContextMutex.Unlock()
	fake.UnassignIpv6AddressesWithContextStub = nil
	fake.unassignIpv6AddressesWithContextReturns = struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignIpv6AddressesWithContextReturnsOnCall(i int, result1 *ec2.UnassignIpv6AddressesOutput, result2 error) {
	fake.unassignIpv6AddressesWithContextMutex.Lock()
	defer fake.unassignIpv6AddressesWithContextMutex.Unlock()
	fake.UnassignIpv6AddressesWithContextStub = nil
	if fake.unassignIpv6AddressesWithContextReturnsOnCall == nil {
		fake.unassignIpv6AddressesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.UnassignIpv6AddressesOutput
			result2 error
		})
	}
	fake.unassignIpv6AddressesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.UnassignIpv6AddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignPrivateIpAddresses(arg1 *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	fake.unassignPrivateIpAddressesMutex.Lock()
	ret, specificReturn := fake.unassignPrivateIpAddressesReturnsOnCall[len(fake.unassignPrivateIpAddressesArgsForCall)]
	fake.unassignPrivateIpAddressesArgsForCall = append(fake.unassignPrivateIpAddressesArgsForCall, struct {
		arg1 *ec2.UnassignPrivateIpAddressesInput
	}{arg1})
	fake.recordInvocation("UnassignPrivateIpAddresses", []interface{}{arg1})
	fake.unassignPrivateIpAddressesMutex.Unlock()
	if fake.UnassignPrivateIpAddressesStub != nil {
		return fake.UnassignPrivateIpAddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unassignPrivateIpAddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesCallCount() int {
	fake.unassignPrivateIpAddressesMutex.RLock()
	defer fake.unassignPrivateIpAddressesMutex.RUnlock()
	return len(fake.unassignPrivateIpAddressesArgsForCall)
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesCalls(stub func(*ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error)) {
	fake.unassignPrivateIpAddressesMutex.Lock()
	defer fake.unassignPrivateIpAddressesMutex.Unlock()
	fake.UnassignPrivateIpAddressesStub = stub
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesArgsForCall(i int) *ec2.UnassignPrivateIpAddressesInput {
	fake.unassignPrivateIpAddressesMutex.RLock()
	defer fake.unassignPrivateIpAddressesMutex.RUnlock()
	argsForCall := fake.unassignPrivateIpAddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesReturns(result1 *ec2.UnassignPrivateIpAddressesOutput, result2 error) {
	fake.unassignPrivateIpAddressesMutex.Lock()
	defer fake.unassignPrivateIpAddressesMutex.Unlock()
	fake.UnassignPrivateIpAddressesStub = nil
	fake.unassignPrivateIpAddressesReturns = struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesReturnsOnCall(i int, result1 *ec2.UnassignPrivateIpAddressesOutput, result2 error) {
	fake.unassignPrivateIpAddressesMutex.Lock()
	defer fake.unassignPrivateIpAddressesMutex.Unlock()
	fake.UnassignPrivateIpAddressesStub = nil
	if fake.unassignPrivateIpAddressesReturnsOnCall == nil {
		fake.unassignPrivateIpAddressesReturnsOnCall = make(map[int]struct {
			result1 *ec2.UnassignPrivateIpAddressesOutput
			result2 error
		})
	}
	fake.unassignPrivateIpAddressesReturnsOnCall[i] = struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesRequest(arg1 *ec2.UnassignPrivateIpAddressesInput) (*request.Request, *ec2.UnassignPrivateIpAddressesOutput) {
	fake.unassignPrivateIpAddressesRequestMutex.Lock()
	ret, specificReturn := fake.unassignPrivateIpAddressesRequestReturnsOnCall[len(fake.unassignPrivateIpAddressesRequestArgsForCall)]
	fake.unassignPrivateIpAddressesRequestArgsForCall = append(fake.unassignPrivateIpAddressesRequestArgsForCall, struct {
		arg1 *ec2.UnassignPrivateIpAddressesInput
	}{arg1})
	fake.recordInvocation("UnassignPrivateIpAddressesRequest", []interface{}{arg1})
	fake.unassignPrivateIpAddressesRequestMutex.Unlock()
	if fake.UnassignPrivateIpAddressesRequestStub != nil {
		return fake.UnassignPrivateIpAddressesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unassignPrivateIpAddressesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesRequestCallCount() int {
	fake.unassignPrivateIpAddressesRequestMutex.RLock()
	defer fake.unassignPrivateIpAddressesRequestMutex.RUnlock()
	return len(fake.unassignPrivateIpAddressesRequestArgsForCall)
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesRequestCalls(stub func(*ec2.UnassignPrivateIpAddressesInput) (*request.Request, *ec2.UnassignPrivateIpAddressesOutput)) {
	fake.unassignPrivateIpAddressesRequestMutex.Lock()
	defer fake.unassignPrivateIpAddressesRequestMutex.Unlock()
	fake.UnassignPrivateIpAddressesRequestStub = stub
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesRequestArgsForCall(i int) *ec2.UnassignPrivateIpAddressesInput {
	fake.unassignPrivateIpAddressesRequestMutex.RLock()
	defer fake.unassignPrivateIpAddressesRequestMutex.RUnlock()
	argsForCall := fake.unassignPrivateIpAddressesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesRequestReturns(result1 *request.Request, result2 *ec2.UnassignPrivateIpAddressesOutput) {
	fake.unassignPrivateIpAddressesRequestMutex.Lock()
	defer fake.unassignPrivateIpAddressesRequestMutex.Unlock()
	fake.UnassignPrivateIpAddressesRequestStub = nil
	fake.unassignPrivateIpAddressesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.UnassignPrivateIpAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.UnassignPrivateIpAddressesOutput) {
	fake.unassignPrivateIpAddressesRequestMutex.Lock()
	defer fake.unassignPrivateIpAddressesRequestMutex.Unlock()
	fake.UnassignPrivateIpAddressesRequestStub = nil
	if fake.unassignPrivateIpAddressesRequestReturnsOnCall == nil {
		fake.unassignPrivateIpAddressesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.UnassignPrivateIpAddressesOutput
		})
	}
	fake.unassignPrivateIpAddressesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.UnassignPrivateIpAddressesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesWithContext(arg1 aws.Context, arg2 *ec2.UnassignPrivateIpAddressesInput, arg3 ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	fake.unassignPrivateIpAddressesWithContextMutex.Lock()
	ret, specificReturn := fake.unassignPrivateIpAddressesWithContextReturnsOnCall[len(fake.unassignPrivateIpAddressesWithContextArgsForCall)]
	fake.unassignPrivateIpAddressesWithContextArgsForCall = append(fake.unassignPrivateIpAddressesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.UnassignPrivateIpAddressesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UnassignPrivateIpAddressesWithContext", []interface{}{arg1, arg2, arg3})
	fake.unassignPrivateIpAddressesWithContextMutex.Unlock()
	if fake.UnassignPrivateIpAddressesWithContextStub != nil {
		return fake.UnassignPrivateIpAddressesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unassignPrivateIpAddressesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesWithContextCallCount() int {
	fake.unassignPrivateIpAddressesWithContextMutex.RLock()
	defer fake.unassignPrivateIpAddressesWithContextMutex.RUnlock()
	return len(fake.unassignPrivateIpAddressesWithContextArgsForCall)
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesWithContextCalls(stub func(aws.Context, *ec2.UnassignPrivateIpAddressesInput, ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error)) {
	fake.unassignPrivateIpAddressesWithContextMutex.Lock()
	defer fake.unassignPrivateIpAddressesWithContextMutex.Unlock()
	fake.UnassignPrivateIpAddressesWithContextStub = stub
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesWithContextArgsForCall(i int) (aws.Context, *ec2.UnassignPrivateIpAddressesInput, []request.Option) {
	fake.unassignPrivateIpAddressesWithContextMutex.RLock()
	defer fake.unassignPrivateIpAddressesWithContextMutex.RUnlock()
	argsForCall := fake.unassignPrivateIpAddressesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesWithContextReturns(result1 *ec2.UnassignPrivateIpAddressesOutput, result2 error) {
	fake.unassignPrivateIpAddressesWithContextMutex.Lock()
	defer fake.unassignPrivateIpAddressesWithContextMutex.Unlock()
	fake.UnassignPrivateIpAddressesWithContextStub = nil
	fake.unassignPrivateIpAddressesWithContextReturns = struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnassignPrivateIpAddressesWithContextReturnsOnCall(i int, result1 *ec2.UnassignPrivateIpAddressesOutput, result2 error) {
	fake.unassignPrivateIpAddressesWithContextMutex.Lock()
	defer fake.unassignPrivateIpAddressesWithContextMutex.Unlock()
	fake.UnassignPrivateIpAddressesWithContextStub = nil
	if fake.unassignPrivateIpAddressesWithContextReturnsOnCall == nil {
		fake.unassignPrivateIpAddressesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.UnassignPrivateIpAddressesOutput
			result2 error
		})
	}
	fake.unassignPrivateIpAddressesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.UnassignPrivateIpAddressesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnmonitorInstances(arg1 *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	fake.unmonitorInstancesMutex.Lock()
	ret, specificReturn := fake.unmonitorInstancesReturnsOnCall[len(fake.unmonitorInstancesArgsForCall)]
	fake.unmonitorInstancesArgsForCall = append(fake.unmonitorInstancesArgsForCall, struct {
		arg1 *ec2.UnmonitorInstancesInput
	}{arg1})
	fake.recordInvocation("UnmonitorInstances", []interface{}{arg1})
	fake.unmonitorInstancesMutex.Unlock()
	if fake.UnmonitorInstancesStub != nil {
		return fake.UnmonitorInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unmonitorInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnmonitorInstancesCallCount() int {
	fake.unmonitorInstancesMutex.RLock()
	defer fake.unmonitorInstancesMutex.RUnlock()
	return len(fake.unmonitorInstancesArgsForCall)
}

func (fake *FakeEC2API) UnmonitorInstancesCalls(stub func(*ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error)) {
	fake.unmonitorInstancesMutex.Lock()
	defer fake.unmonitorInstancesMutex.Unlock()
	fake.UnmonitorInstancesStub = stub
}

func (fake *FakeEC2API) UnmonitorInstancesArgsForCall(i int) *ec2.UnmonitorInstancesInput {
	fake.unmonitorInstancesMutex.RLock()
	defer fake.unmonitorInstancesMutex.RUnlock()
	argsForCall := fake.unmonitorInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UnmonitorInstancesReturns(result1 *ec2.UnmonitorInstancesOutput, result2 error) {
	fake.unmonitorInstancesMutex.Lock()
	defer fake.unmonitorInstancesMutex.Unlock()
	fake.UnmonitorInstancesStub = nil
	fake.unmonitorInstancesReturns = struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnmonitorInstancesReturnsOnCall(i int, result1 *ec2.UnmonitorInstancesOutput, result2 error) {
	fake.unmonitorInstancesMutex.Lock()
	defer fake.unmonitorInstancesMutex.Unlock()
	fake.UnmonitorInstancesStub = nil
	if fake.unmonitorInstancesReturnsOnCall == nil {
		fake.unmonitorInstancesReturnsOnCall = make(map[int]struct {
			result1 *ec2.UnmonitorInstancesOutput
			result2 error
		})
	}
	fake.unmonitorInstancesReturnsOnCall[i] = struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnmonitorInstancesRequest(arg1 *ec2.UnmonitorInstancesInput) (*request.Request, *ec2.UnmonitorInstancesOutput) {
	fake.unmonitorInstancesRequestMutex.Lock()
	ret, specificReturn := fake.unmonitorInstancesRequestReturnsOnCall[len(fake.unmonitorInstancesRequestArgsForCall)]
	fake.unmonitorInstancesRequestArgsForCall = append(fake.unmonitorInstancesRequestArgsForCall, struct {
		arg1 *ec2.UnmonitorInstancesInput
	}{arg1})
	fake.recordInvocation("UnmonitorInstancesRequest", []interface{}{arg1})
	fake.unmonitorInstancesRequestMutex.Unlock()
	if fake.UnmonitorInstancesRequestStub != nil {
		return fake.UnmonitorInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unmonitorInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnmonitorInstancesRequestCallCount() int {
	fake.unmonitorInstancesRequestMutex.RLock()
	defer fake.unmonitorInstancesRequestMutex.RUnlock()
	return len(fake.unmonitorInstancesRequestArgsForCall)
}

func (fake *FakeEC2API) UnmonitorInstancesRequestCalls(stub func(*ec2.UnmonitorInstancesInput) (*request.Request, *ec2.UnmonitorInstancesOutput)) {
	fake.unmonitorInstancesRequestMutex.Lock()
	defer fake.unmonitorInstancesRequestMutex.Unlock()
	fake.UnmonitorInstancesRequestStub = stub
}

func (fake *FakeEC2API) UnmonitorInstancesRequestArgsForCall(i int) *ec2.UnmonitorInstancesInput {
	fake.unmonitorInstancesRequestMutex.RLock()
	defer fake.unmonitorInstancesRequestMutex.RUnlock()
	argsForCall := fake.unmonitorInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UnmonitorInstancesRequestReturns(result1 *request.Request, result2 *ec2.UnmonitorInstancesOutput) {
	fake.unmonitorInstancesRequestMutex.Lock()
	defer fake.unmonitorInstancesRequestMutex.Unlock()
	fake.UnmonitorInstancesRequestStub = nil
	fake.unmonitorInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.UnmonitorInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UnmonitorInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.UnmonitorInstancesOutput) {
	fake.unmonitorInstancesRequestMutex.Lock()
	defer fake.unmonitorInstancesRequestMutex.Unlock()
	fake.UnmonitorInstancesRequestStub = nil
	if fake.unmonitorInstancesRequestReturnsOnCall == nil {
		fake.unmonitorInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.UnmonitorInstancesOutput
		})
	}
	fake.unmonitorInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.UnmonitorInstancesOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UnmonitorInstancesWithContext(arg1 aws.Context, arg2 *ec2.UnmonitorInstancesInput, arg3 ...request.Option) (*ec2.UnmonitorInstancesOutput, error) {
	fake.unmonitorInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.unmonitorInstancesWithContextReturnsOnCall[len(fake.unmonitorInstancesWithContextArgsForCall)]
	fake.unmonitorInstancesWithContextArgsForCall = append(fake.unmonitorInstancesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.UnmonitorInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UnmonitorInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.unmonitorInstancesWithContextMutex.Unlock()
	if fake.UnmonitorInstancesWithContextStub != nil {
		return fake.UnmonitorInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unmonitorInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UnmonitorInstancesWithContextCallCount() int {
	fake.unmonitorInstancesWithContextMutex.RLock()
	defer fake.unmonitorInstancesWithContextMutex.RUnlock()
	return len(fake.unmonitorInstancesWithContextArgsForCall)
}

func (fake *FakeEC2API) UnmonitorInstancesWithContextCalls(stub func(aws.Context, *ec2.UnmonitorInstancesInput, ...request.Option) (*ec2.UnmonitorInstancesOutput, error)) {
	fake.unmonitorInstancesWithContextMutex.Lock()
	defer fake.unmonitorInstancesWithContextMutex.Unlock()
	fake.UnmonitorInstancesWithContextStub = stub
}

func (fake *FakeEC2API) UnmonitorInstancesWithContextArgsForCall(i int) (aws.Context, *ec2.UnmonitorInstancesInput, []request.Option) {
	fake.unmonitorInstancesWithContextMutex.RLock()
	defer fake.unmonitorInstancesWithContextMutex.RUnlock()
	argsForCall := fake.unmonitorInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) UnmonitorInstancesWithContextReturns(result1 *ec2.UnmonitorInstancesOutput, result2 error) {
	fake.unmonitorInstancesWithContextMutex.Lock()
	defer fake.unmonitorInstancesWithContextMutex.Unlock()
	fake.UnmonitorInstancesWithContextStub = nil
	fake.unmonitorInstancesWithContextReturns = struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UnmonitorInstancesWithContextReturnsOnCall(i int, result1 *ec2.UnmonitorInstancesOutput, result2 error) {
	fake.unmonitorInstancesWithContextMutex.Lock()
	defer fake.unmonitorInstancesWithContextMutex.Unlock()
	fake.UnmonitorInstancesWithContextStub = nil
	if fake.unmonitorInstancesWithContextReturnsOnCall == nil {
		fake.unmonitorInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.UnmonitorInstancesOutput
			result2 error
		})
	}
	fake.unmonitorInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ec2.UnmonitorInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgress(arg1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupRuleDescriptionsEgressReturnsOnCall[len(fake.updateSecurityGroupRuleDescriptionsEgressArgsForCall)]
	fake.updateSecurityGroupRuleDescriptionsEgressArgsForCall = append(fake.updateSecurityGroupRuleDescriptionsEgressArgsForCall, struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}{arg1})
	fake.recordInvocation("UpdateSecurityGroupRuleDescriptionsEgress", []interface{}{arg1})
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.Unlock()
	if fake.UpdateSecurityGroupRuleDescriptionsEgressStub != nil {
		return fake.UpdateSecurityGroupRuleDescriptionsEgressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecurityGroupRuleDescriptionsEgressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressCallCount() int {
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressMutex.RUnlock()
	return len(fake.updateSecurityGroupRuleDescriptionsEgressArgsForCall)
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressCalls(stub func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)) {
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressStub = stub
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressArgsForCall(i int) *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput {
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupRuleDescriptionsEgressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressReturns(result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressStub = nil
	fake.updateSecurityGroupRuleDescriptionsEgressReturns = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressReturnsOnCall(i int, result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressStub = nil
	if fake.updateSecurityGroupRuleDescriptionsEgressReturnsOnCall == nil {
		fake.updateSecurityGroupRuleDescriptionsEgressReturnsOnCall = make(map[int]struct {
			result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
			result2 error
		})
	}
	fake.updateSecurityGroupRuleDescriptionsEgressReturnsOnCall[i] = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressRequest(arg1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupRuleDescriptionsEgressRequestReturnsOnCall[len(fake.updateSecurityGroupRuleDescriptionsEgressRequestArgsForCall)]
	fake.updateSecurityGroupRuleDescriptionsEgressRequestArgsForCall = append(fake.updateSecurityGroupRuleDescriptionsEgressRequestArgsForCall, struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	}{arg1})
	fake.recordInvocation("UpdateSecurityGroupRuleDescriptionsEgressRequest", []interface{}{arg1})
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Unlock()
	if fake.UpdateSecurityGroupRuleDescriptionsEgressRequestStub != nil {
		return fake.UpdateSecurityGroupRuleDescriptionsEgressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecurityGroupRuleDescriptionsEgressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressRequestCallCount() int {
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.RUnlock()
	return len(fake.updateSecurityGroupRuleDescriptionsEgressRequestArgsForCall)
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressRequestCalls(stub func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)) {
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressRequestStub = stub
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressRequestArgsForCall(i int) *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput {
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupRuleDescriptionsEgressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressRequestReturns(result1 *request.Request, result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressRequestStub = nil
	fake.updateSecurityGroupRuleDescriptionsEgressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressRequestStub = nil
	if fake.updateSecurityGroupRuleDescriptionsEgressRequestReturnsOnCall == nil {
		fake.updateSecurityGroupRuleDescriptionsEgressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		})
	}
	fake.updateSecurityGroupRuleDescriptionsEgressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressWithContext(arg1 aws.Context, arg2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, arg3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupRuleDescriptionsEgressWithContextReturnsOnCall[len(fake.updateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall)]
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall = append(fake.updateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateSecurityGroupRuleDescriptionsEgressWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Unlock()
	if fake.UpdateSecurityGroupRuleDescriptionsEgressWithContextStub != nil {
		return fake.UpdateSecurityGroupRuleDescriptionsEgressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecurityGroupRuleDescriptionsEgressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressWithContextCallCount() int {
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.RUnlock()
	return len(fake.updateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall)
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressWithContextCalls(stub func(aws.Context, *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)) {
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressWithContextStub = stub
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall(i int) (aws.Context, *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, []request.Option) {
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupRuleDescriptionsEgressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressWithContextReturns(result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressWithContextStub = nil
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextReturns = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsEgressWithContextReturnsOnCall(i int, result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsEgressWithContextStub = nil
	if fake.updateSecurityGroupRuleDescriptionsEgressWithContextReturnsOnCall == nil {
		fake.updateSecurityGroupRuleDescriptionsEgressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
			result2 error
		})
	}
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngress(arg1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupRuleDescriptionsIngressReturnsOnCall[len(fake.updateSecurityGroupRuleDescriptionsIngressArgsForCall)]
	fake.updateSecurityGroupRuleDescriptionsIngressArgsForCall = append(fake.updateSecurityGroupRuleDescriptionsIngressArgsForCall, struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}{arg1})
	fake.recordInvocation("UpdateSecurityGroupRuleDescriptionsIngress", []interface{}{arg1})
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.Unlock()
	if fake.UpdateSecurityGroupRuleDescriptionsIngressStub != nil {
		return fake.UpdateSecurityGroupRuleDescriptionsIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecurityGroupRuleDescriptionsIngressReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressCallCount() int {
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressMutex.RUnlock()
	return len(fake.updateSecurityGroupRuleDescriptionsIngressArgsForCall)
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressCalls(stub func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)) {
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressStub = stub
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressArgsForCall(i int) *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput {
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupRuleDescriptionsIngressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressReturns(result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressStub = nil
	fake.updateSecurityGroupRuleDescriptionsIngressReturns = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressReturnsOnCall(i int, result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressStub = nil
	if fake.updateSecurityGroupRuleDescriptionsIngressReturnsOnCall == nil {
		fake.updateSecurityGroupRuleDescriptionsIngressReturnsOnCall = make(map[int]struct {
			result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
			result2 error
		})
	}
	fake.updateSecurityGroupRuleDescriptionsIngressReturnsOnCall[i] = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressRequest(arg1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupRuleDescriptionsIngressRequestReturnsOnCall[len(fake.updateSecurityGroupRuleDescriptionsIngressRequestArgsForCall)]
	fake.updateSecurityGroupRuleDescriptionsIngressRequestArgsForCall = append(fake.updateSecurityGroupRuleDescriptionsIngressRequestArgsForCall, struct {
		arg1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	}{arg1})
	fake.recordInvocation("UpdateSecurityGroupRuleDescriptionsIngressRequest", []interface{}{arg1})
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Unlock()
	if fake.UpdateSecurityGroupRuleDescriptionsIngressRequestStub != nil {
		return fake.UpdateSecurityGroupRuleDescriptionsIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecurityGroupRuleDescriptionsIngressRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressRequestCallCount() int {
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.RUnlock()
	return len(fake.updateSecurityGroupRuleDescriptionsIngressRequestArgsForCall)
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressRequestCalls(stub func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*request.Request, *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)) {
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressRequestStub = stub
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressRequestArgsForCall(i int) *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput {
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupRuleDescriptionsIngressRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressRequestReturns(result1 *request.Request, result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressRequestStub = nil
	fake.updateSecurityGroupRuleDescriptionsIngressRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressRequestStub = nil
	if fake.updateSecurityGroupRuleDescriptionsIngressRequestReturnsOnCall == nil {
		fake.updateSecurityGroupRuleDescriptionsIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		})
	}
	fake.updateSecurityGroupRuleDescriptionsIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressWithContext(arg1 aws.Context, arg2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, arg3 ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Lock()
	ret, specificReturn := fake.updateSecurityGroupRuleDescriptionsIngressWithContextReturnsOnCall[len(fake.updateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall)]
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall = append(fake.updateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateSecurityGroupRuleDescriptionsIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Unlock()
	if fake.UpdateSecurityGroupRuleDescriptionsIngressWithContextStub != nil {
		return fake.UpdateSecurityGroupRuleDescriptionsIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecurityGroupRuleDescriptionsIngressWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressWithContextCallCount() int {
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.RUnlock()
	return len(fake.updateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall)
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressWithContextCalls(stub func(aws.Context, *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)) {
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressWithContextStub = stub
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall(i int) (aws.Context, *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, []request.Option) {
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.RUnlock()
	argsForCall := fake.updateSecurityGroupRuleDescriptionsIngressWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressWithContextReturns(result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressWithContextStub = nil
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextReturns = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) UpdateSecurityGroupRuleDescriptionsIngressWithContextReturnsOnCall(i int, result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, result2 error) {
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Lock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.Unlock()
	fake.UpdateSecurityGroupRuleDescriptionsIngressWithContextStub = nil
	if fake.updateSecurityGroupRuleDescriptionsIngressWithContextReturnsOnCall == nil {
		fake.updateSecurityGroupRuleDescriptionsIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
			result2 error
		})
	}
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextReturnsOnCall[i] = struct {
		result1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) WaitUntilBundleTaskComplete(arg1 *ec2.DescribeBundleTasksInput) error {
	fake.waitUntilBundleTaskCompleteMutex.Lock()
	ret, specificReturn := fake.waitUntilBundleTaskCompleteReturnsOnCall[len(fake.waitUntilBundleTaskCompleteArgsForCall)]
	fake.waitUntilBundleTaskCompleteArgsForCall = append(fake.waitUntilBundleTaskCompleteArgsForCall, struct {
		arg1 *ec2.DescribeBundleTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilBundleTaskComplete", []interface{}{arg1})
	fake.waitUntilBundleTaskCompleteMutex.Unlock()
	if fake.WaitUntilBundleTaskCompleteStub != nil {
		return fake.WaitUntilBundleTaskCompleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilBundleTaskCompleteReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteCallCount() int {
	fake.waitUntilBundleTaskCompleteMutex.RLock()
	defer fake.waitUntilBundleTaskCompleteMutex.RUnlock()
	return len(fake.waitUntilBundleTaskCompleteArgsForCall)
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteCalls(stub func(*ec2.DescribeBundleTasksInput) error) {
	fake.waitUntilBundleTaskCompleteMutex.Lock()
	defer fake.waitUntilBundleTaskCompleteMutex.Unlock()
	fake.WaitUntilBundleTaskCompleteStub = stub
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteArgsForCall(i int) *ec2.DescribeBundleTasksInput {
	fake.waitUntilBundleTaskCompleteMutex.RLock()
	defer fake.waitUntilBundleTaskCompleteMutex.RUnlock()
	argsForCall := fake.waitUntilBundleTaskCompleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteReturns(result1 error) {
	fake.waitUntilBundleTaskCompleteMutex.Lock()
	defer fake.waitUntilBundleTaskCompleteMutex.Unlock()
	fake.WaitUntilBundleTaskCompleteStub = nil
	fake.waitUntilBundleTaskCompleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteReturnsOnCall(i int, result1 error) {
	fake.waitUntilBundleTaskCompleteMutex.Lock()
	defer fake.waitUntilBundleTaskCompleteMutex.Unlock()
	fake.WaitUntilBundleTaskCompleteStub = nil
	if fake.waitUntilBundleTaskCompleteReturnsOnCall == nil {
		fake.waitUntilBundleTaskCompleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilBundleTaskCompleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteWithContext(arg1 aws.Context, arg2 *ec2.DescribeBundleTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilBundleTaskCompleteWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilBundleTaskCompleteWithContextReturnsOnCall[len(fake.waitUntilBundleTaskCompleteWithContextArgsForCall)]
	fake.waitUntilBundleTaskCompleteWithContextArgsForCall = append(fake.waitUntilBundleTaskCompleteWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeBundleTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilBundleTaskCompleteWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilBundleTaskCompleteWithContextMutex.Unlock()
	if fake.WaitUntilBundleTaskCompleteWithContextStub != nil {
		return fake.WaitUntilBundleTaskCompleteWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilBundleTaskCompleteWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteWithContextCallCount() int {
	fake.waitUntilBundleTaskCompleteWithContextMutex.RLock()
	defer fake.waitUntilBundleTaskCompleteWithContextMutex.RUnlock()
	return len(fake.waitUntilBundleTaskCompleteWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteWithContextCalls(stub func(aws.Context, *ec2.DescribeBundleTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilBundleTaskCompleteWithContextMutex.Lock()
	defer fake.waitUntilBundleTaskCompleteWithContextMutex.Unlock()
	fake.WaitUntilBundleTaskCompleteWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeBundleTasksInput, []request.WaiterOption) {
	fake.waitUntilBundleTaskCompleteWithContextMutex.RLock()
	defer fake.waitUntilBundleTaskCompleteWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilBundleTaskCompleteWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteWithContextReturns(result1 error) {
	fake.waitUntilBundleTaskCompleteWithContextMutex.Lock()
	defer fake.waitUntilBundleTaskCompleteWithContextMutex.Unlock()
	fake.WaitUntilBundleTaskCompleteWithContextStub = nil
	fake.waitUntilBundleTaskCompleteWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilBundleTaskCompleteWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilBundleTaskCompleteWithContextMutex.Lock()
	defer fake.waitUntilBundleTaskCompleteWithContextMutex.Unlock()
	fake.WaitUntilBundleTaskCompleteWithContextStub = nil
	if fake.waitUntilBundleTaskCompleteWithContextReturnsOnCall == nil {
		fake.waitUntilBundleTaskCompleteWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilBundleTaskCompleteWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelled(arg1 *ec2.DescribeConversionTasksInput) error {
	fake.waitUntilConversionTaskCancelledMutex.Lock()
	ret, specificReturn := fake.waitUntilConversionTaskCancelledReturnsOnCall[len(fake.waitUntilConversionTaskCancelledArgsForCall)]
	fake.waitUntilConversionTaskCancelledArgsForCall = append(fake.waitUntilConversionTaskCancelledArgsForCall, struct {
		arg1 *ec2.DescribeConversionTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilConversionTaskCancelled", []interface{}{arg1})
	fake.waitUntilConversionTaskCancelledMutex.Unlock()
	if fake.WaitUntilConversionTaskCancelledStub != nil {
		return fake.WaitUntilConversionTaskCancelledStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilConversionTaskCancelledReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledCallCount() int {
	fake.waitUntilConversionTaskCancelledMutex.RLock()
	defer fake.waitUntilConversionTaskCancelledMutex.RUnlock()
	return len(fake.waitUntilConversionTaskCancelledArgsForCall)
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledCalls(stub func(*ec2.DescribeConversionTasksInput) error) {
	fake.waitUntilConversionTaskCancelledMutex.Lock()
	defer fake.waitUntilConversionTaskCancelledMutex.Unlock()
	fake.WaitUntilConversionTaskCancelledStub = stub
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledArgsForCall(i int) *ec2.DescribeConversionTasksInput {
	fake.waitUntilConversionTaskCancelledMutex.RLock()
	defer fake.waitUntilConversionTaskCancelledMutex.RUnlock()
	argsForCall := fake.waitUntilConversionTaskCancelledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledReturns(result1 error) {
	fake.waitUntilConversionTaskCancelledMutex.Lock()
	defer fake.waitUntilConversionTaskCancelledMutex.Unlock()
	fake.WaitUntilConversionTaskCancelledStub = nil
	fake.waitUntilConversionTaskCancelledReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledReturnsOnCall(i int, result1 error) {
	fake.waitUntilConversionTaskCancelledMutex.Lock()
	defer fake.waitUntilConversionTaskCancelledMutex.Unlock()
	fake.WaitUntilConversionTaskCancelledStub = nil
	if fake.waitUntilConversionTaskCancelledReturnsOnCall == nil {
		fake.waitUntilConversionTaskCancelledReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilConversionTaskCancelledReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledWithContext(arg1 aws.Context, arg2 *ec2.DescribeConversionTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilConversionTaskCancelledWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilConversionTaskCancelledWithContextReturnsOnCall[len(fake.waitUntilConversionTaskCancelledWithContextArgsForCall)]
	fake.waitUntilConversionTaskCancelledWithContextArgsForCall = append(fake.waitUntilConversionTaskCancelledWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilConversionTaskCancelledWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilConversionTaskCancelledWithContextMutex.Unlock()
	if fake.WaitUntilConversionTaskCancelledWithContextStub != nil {
		return fake.WaitUntilConversionTaskCancelledWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilConversionTaskCancelledWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledWithContextCallCount() int {
	fake.waitUntilConversionTaskCancelledWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskCancelledWithContextMutex.RUnlock()
	return len(fake.waitUntilConversionTaskCancelledWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledWithContextCalls(stub func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilConversionTaskCancelledWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskCancelledWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskCancelledWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeConversionTasksInput, []request.WaiterOption) {
	fake.waitUntilConversionTaskCancelledWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskCancelledWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilConversionTaskCancelledWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledWithContextReturns(result1 error) {
	fake.waitUntilConversionTaskCancelledWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskCancelledWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskCancelledWithContextStub = nil
	fake.waitUntilConversionTaskCancelledWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCancelledWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilConversionTaskCancelledWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskCancelledWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskCancelledWithContextStub = nil
	if fake.waitUntilConversionTaskCancelledWithContextReturnsOnCall == nil {
		fake.waitUntilConversionTaskCancelledWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilConversionTaskCancelledWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompleted(arg1 *ec2.DescribeConversionTasksInput) error {
	fake.waitUntilConversionTaskCompletedMutex.Lock()
	ret, specificReturn := fake.waitUntilConversionTaskCompletedReturnsOnCall[len(fake.waitUntilConversionTaskCompletedArgsForCall)]
	fake.waitUntilConversionTaskCompletedArgsForCall = append(fake.waitUntilConversionTaskCompletedArgsForCall, struct {
		arg1 *ec2.DescribeConversionTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilConversionTaskCompleted", []interface{}{arg1})
	fake.waitUntilConversionTaskCompletedMutex.Unlock()
	if fake.WaitUntilConversionTaskCompletedStub != nil {
		return fake.WaitUntilConversionTaskCompletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilConversionTaskCompletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedCallCount() int {
	fake.waitUntilConversionTaskCompletedMutex.RLock()
	defer fake.waitUntilConversionTaskCompletedMutex.RUnlock()
	return len(fake.waitUntilConversionTaskCompletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedCalls(stub func(*ec2.DescribeConversionTasksInput) error) {
	fake.waitUntilConversionTaskCompletedMutex.Lock()
	defer fake.waitUntilConversionTaskCompletedMutex.Unlock()
	fake.WaitUntilConversionTaskCompletedStub = stub
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedArgsForCall(i int) *ec2.DescribeConversionTasksInput {
	fake.waitUntilConversionTaskCompletedMutex.RLock()
	defer fake.waitUntilConversionTaskCompletedMutex.RUnlock()
	argsForCall := fake.waitUntilConversionTaskCompletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedReturns(result1 error) {
	fake.waitUntilConversionTaskCompletedMutex.Lock()
	defer fake.waitUntilConversionTaskCompletedMutex.Unlock()
	fake.WaitUntilConversionTaskCompletedStub = nil
	fake.waitUntilConversionTaskCompletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilConversionTaskCompletedMutex.Lock()
	defer fake.waitUntilConversionTaskCompletedMutex.Unlock()
	fake.WaitUntilConversionTaskCompletedStub = nil
	if fake.waitUntilConversionTaskCompletedReturnsOnCall == nil {
		fake.waitUntilConversionTaskCompletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilConversionTaskCompletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeConversionTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilConversionTaskCompletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilConversionTaskCompletedWithContextReturnsOnCall[len(fake.waitUntilConversionTaskCompletedWithContextArgsForCall)]
	fake.waitUntilConversionTaskCompletedWithContextArgsForCall = append(fake.waitUntilConversionTaskCompletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilConversionTaskCompletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilConversionTaskCompletedWithContextMutex.Unlock()
	if fake.WaitUntilConversionTaskCompletedWithContextStub != nil {
		return fake.WaitUntilConversionTaskCompletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilConversionTaskCompletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedWithContextCallCount() int {
	fake.waitUntilConversionTaskCompletedWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskCompletedWithContextMutex.RUnlock()
	return len(fake.waitUntilConversionTaskCompletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedWithContextCalls(stub func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilConversionTaskCompletedWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskCompletedWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskCompletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeConversionTasksInput, []request.WaiterOption) {
	fake.waitUntilConversionTaskCompletedWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskCompletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilConversionTaskCompletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedWithContextReturns(result1 error) {
	fake.waitUntilConversionTaskCompletedWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskCompletedWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskCompletedWithContextStub = nil
	fake.waitUntilConversionTaskCompletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskCompletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilConversionTaskCompletedWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskCompletedWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskCompletedWithContextStub = nil
	if fake.waitUntilConversionTaskCompletedWithContextReturnsOnCall == nil {
		fake.waitUntilConversionTaskCompletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilConversionTaskCompletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeleted(arg1 *ec2.DescribeConversionTasksInput) error {
	fake.waitUntilConversionTaskDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilConversionTaskDeletedReturnsOnCall[len(fake.waitUntilConversionTaskDeletedArgsForCall)]
	fake.waitUntilConversionTaskDeletedArgsForCall = append(fake.waitUntilConversionTaskDeletedArgsForCall, struct {
		arg1 *ec2.DescribeConversionTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilConversionTaskDeleted", []interface{}{arg1})
	fake.waitUntilConversionTaskDeletedMutex.Unlock()
	if fake.WaitUntilConversionTaskDeletedStub != nil {
		return fake.WaitUntilConversionTaskDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilConversionTaskDeletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedCallCount() int {
	fake.waitUntilConversionTaskDeletedMutex.RLock()
	defer fake.waitUntilConversionTaskDeletedMutex.RUnlock()
	return len(fake.waitUntilConversionTaskDeletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedCalls(stub func(*ec2.DescribeConversionTasksInput) error) {
	fake.waitUntilConversionTaskDeletedMutex.Lock()
	defer fake.waitUntilConversionTaskDeletedMutex.Unlock()
	fake.WaitUntilConversionTaskDeletedStub = stub
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedArgsForCall(i int) *ec2.DescribeConversionTasksInput {
	fake.waitUntilConversionTaskDeletedMutex.RLock()
	defer fake.waitUntilConversionTaskDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilConversionTaskDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedReturns(result1 error) {
	fake.waitUntilConversionTaskDeletedMutex.Lock()
	defer fake.waitUntilConversionTaskDeletedMutex.Unlock()
	fake.WaitUntilConversionTaskDeletedStub = nil
	fake.waitUntilConversionTaskDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilConversionTaskDeletedMutex.Lock()
	defer fake.waitUntilConversionTaskDeletedMutex.Unlock()
	fake.WaitUntilConversionTaskDeletedStub = nil
	if fake.waitUntilConversionTaskDeletedReturnsOnCall == nil {
		fake.waitUntilConversionTaskDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilConversionTaskDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeConversionTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilConversionTaskDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilConversionTaskDeletedWithContextReturnsOnCall[len(fake.waitUntilConversionTaskDeletedWithContextArgsForCall)]
	fake.waitUntilConversionTaskDeletedWithContextArgsForCall = append(fake.waitUntilConversionTaskDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeConversionTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilConversionTaskDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilConversionTaskDeletedWithContextMutex.Unlock()
	if fake.WaitUntilConversionTaskDeletedWithContextStub != nil {
		return fake.WaitUntilConversionTaskDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilConversionTaskDeletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedWithContextCallCount() int {
	fake.waitUntilConversionTaskDeletedWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilConversionTaskDeletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedWithContextCalls(stub func(aws.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilConversionTaskDeletedWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskDeletedWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskDeletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeConversionTasksInput, []request.WaiterOption) {
	fake.waitUntilConversionTaskDeletedWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilConversionTaskDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedWithContextReturns(result1 error) {
	fake.waitUntilConversionTaskDeletedWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskDeletedWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskDeletedWithContextStub = nil
	fake.waitUntilConversionTaskDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilConversionTaskDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilConversionTaskDeletedWithContextMutex.Lock()
	defer fake.waitUntilConversionTaskDeletedWithContextMutex.Unlock()
	fake.WaitUntilConversionTaskDeletedWithContextStub = nil
	if fake.waitUntilConversionTaskDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilConversionTaskDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilConversionTaskDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailable(arg1 *ec2.DescribeCustomerGatewaysInput) error {
	fake.waitUntilCustomerGatewayAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilCustomerGatewayAvailableReturnsOnCall[len(fake.waitUntilCustomerGatewayAvailableArgsForCall)]
	fake.waitUntilCustomerGatewayAvailableArgsForCall = append(fake.waitUntilCustomerGatewayAvailableArgsForCall, struct {
		arg1 *ec2.DescribeCustomerGatewaysInput
	}{arg1})
	fake.recordInvocation("WaitUntilCustomerGatewayAvailable", []interface{}{arg1})
	fake.waitUntilCustomerGatewayAvailableMutex.Unlock()
	if fake.WaitUntilCustomerGatewayAvailableStub != nil {
		return fake.WaitUntilCustomerGatewayAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilCustomerGatewayAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableCallCount() int {
	fake.waitUntilCustomerGatewayAvailableMutex.RLock()
	defer fake.waitUntilCustomerGatewayAvailableMutex.RUnlock()
	return len(fake.waitUntilCustomerGatewayAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableCalls(stub func(*ec2.DescribeCustomerGatewaysInput) error) {
	fake.waitUntilCustomerGatewayAvailableMutex.Lock()
	defer fake.waitUntilCustomerGatewayAvailableMutex.Unlock()
	fake.WaitUntilCustomerGatewayAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableArgsForCall(i int) *ec2.DescribeCustomerGatewaysInput {
	fake.waitUntilCustomerGatewayAvailableMutex.RLock()
	defer fake.waitUntilCustomerGatewayAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilCustomerGatewayAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableReturns(result1 error) {
	fake.waitUntilCustomerGatewayAvailableMutex.Lock()
	defer fake.waitUntilCustomerGatewayAvailableMutex.Unlock()
	fake.WaitUntilCustomerGatewayAvailableStub = nil
	fake.waitUntilCustomerGatewayAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilCustomerGatewayAvailableMutex.Lock()
	defer fake.waitUntilCustomerGatewayAvailableMutex.Unlock()
	fake.WaitUntilCustomerGatewayAvailableStub = nil
	if fake.waitUntilCustomerGatewayAvailableReturnsOnCall == nil {
		fake.waitUntilCustomerGatewayAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCustomerGatewayAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeCustomerGatewaysInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCustomerGatewayAvailableWithContextReturnsOnCall[len(fake.waitUntilCustomerGatewayAvailableWithContextArgsForCall)]
	fake.waitUntilCustomerGatewayAvailableWithContextArgsForCall = append(fake.waitUntilCustomerGatewayAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeCustomerGatewaysInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilCustomerGatewayAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.Unlock()
	if fake.WaitUntilCustomerGatewayAvailableWithContextStub != nil {
		return fake.WaitUntilCustomerGatewayAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilCustomerGatewayAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableWithContextCallCount() int {
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.RLock()
	defer fake.waitUntilCustomerGatewayAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilCustomerGatewayAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeCustomerGatewaysInput, ...request.WaiterOption) error) {
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.Lock()
	defer fake.waitUntilCustomerGatewayAvailableWithContextMutex.Unlock()
	fake.WaitUntilCustomerGatewayAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeCustomerGatewaysInput, []request.WaiterOption) {
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.RLock()
	defer fake.waitUntilCustomerGatewayAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilCustomerGatewayAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableWithContextReturns(result1 error) {
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.Lock()
	defer fake.waitUntilCustomerGatewayAvailableWithContextMutex.Unlock()
	fake.WaitUntilCustomerGatewayAvailableWithContextStub = nil
	fake.waitUntilCustomerGatewayAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilCustomerGatewayAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.Lock()
	defer fake.waitUntilCustomerGatewayAvailableWithContextMutex.Unlock()
	fake.WaitUntilCustomerGatewayAvailableWithContextStub = nil
	if fake.waitUntilCustomerGatewayAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilCustomerGatewayAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCustomerGatewayAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelled(arg1 *ec2.DescribeExportTasksInput) error {
	fake.waitUntilExportTaskCancelledMutex.Lock()
	ret, specificReturn := fake.waitUntilExportTaskCancelledReturnsOnCall[len(fake.waitUntilExportTaskCancelledArgsForCall)]
	fake.waitUntilExportTaskCancelledArgsForCall = append(fake.waitUntilExportTaskCancelledArgsForCall, struct {
		arg1 *ec2.DescribeExportTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilExportTaskCancelled", []interface{}{arg1})
	fake.waitUntilExportTaskCancelledMutex.Unlock()
	if fake.WaitUntilExportTaskCancelledStub != nil {
		return fake.WaitUntilExportTaskCancelledStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilExportTaskCancelledReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledCallCount() int {
	fake.waitUntilExportTaskCancelledMutex.RLock()
	defer fake.waitUntilExportTaskCancelledMutex.RUnlock()
	return len(fake.waitUntilExportTaskCancelledArgsForCall)
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledCalls(stub func(*ec2.DescribeExportTasksInput) error) {
	fake.waitUntilExportTaskCancelledMutex.Lock()
	defer fake.waitUntilExportTaskCancelledMutex.Unlock()
	fake.WaitUntilExportTaskCancelledStub = stub
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledArgsForCall(i int) *ec2.DescribeExportTasksInput {
	fake.waitUntilExportTaskCancelledMutex.RLock()
	defer fake.waitUntilExportTaskCancelledMutex.RUnlock()
	argsForCall := fake.waitUntilExportTaskCancelledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledReturns(result1 error) {
	fake.waitUntilExportTaskCancelledMutex.Lock()
	defer fake.waitUntilExportTaskCancelledMutex.Unlock()
	fake.WaitUntilExportTaskCancelledStub = nil
	fake.waitUntilExportTaskCancelledReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledReturnsOnCall(i int, result1 error) {
	fake.waitUntilExportTaskCancelledMutex.Lock()
	defer fake.waitUntilExportTaskCancelledMutex.Unlock()
	fake.WaitUntilExportTaskCancelledStub = nil
	if fake.waitUntilExportTaskCancelledReturnsOnCall == nil {
		fake.waitUntilExportTaskCancelledReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilExportTaskCancelledReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledWithContext(arg1 aws.Context, arg2 *ec2.DescribeExportTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilExportTaskCancelledWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilExportTaskCancelledWithContextReturnsOnCall[len(fake.waitUntilExportTaskCancelledWithContextArgsForCall)]
	fake.waitUntilExportTaskCancelledWithContextArgsForCall = append(fake.waitUntilExportTaskCancelledWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeExportTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilExportTaskCancelledWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilExportTaskCancelledWithContextMutex.Unlock()
	if fake.WaitUntilExportTaskCancelledWithContextStub != nil {
		return fake.WaitUntilExportTaskCancelledWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilExportTaskCancelledWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledWithContextCallCount() int {
	fake.waitUntilExportTaskCancelledWithContextMutex.RLock()
	defer fake.waitUntilExportTaskCancelledWithContextMutex.RUnlock()
	return len(fake.waitUntilExportTaskCancelledWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledWithContextCalls(stub func(aws.Context, *ec2.DescribeExportTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilExportTaskCancelledWithContextMutex.Lock()
	defer fake.waitUntilExportTaskCancelledWithContextMutex.Unlock()
	fake.WaitUntilExportTaskCancelledWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeExportTasksInput, []request.WaiterOption) {
	fake.waitUntilExportTaskCancelledWithContextMutex.RLock()
	defer fake.waitUntilExportTaskCancelledWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilExportTaskCancelledWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledWithContextReturns(result1 error) {
	fake.waitUntilExportTaskCancelledWithContextMutex.Lock()
	defer fake.waitUntilExportTaskCancelledWithContextMutex.Unlock()
	fake.WaitUntilExportTaskCancelledWithContextStub = nil
	fake.waitUntilExportTaskCancelledWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCancelledWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilExportTaskCancelledWithContextMutex.Lock()
	defer fake.waitUntilExportTaskCancelledWithContextMutex.Unlock()
	fake.WaitUntilExportTaskCancelledWithContextStub = nil
	if fake.waitUntilExportTaskCancelledWithContextReturnsOnCall == nil {
		fake.waitUntilExportTaskCancelledWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilExportTaskCancelledWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCompleted(arg1 *ec2.DescribeExportTasksInput) error {
	fake.waitUntilExportTaskCompletedMutex.Lock()
	ret, specificReturn := fake.waitUntilExportTaskCompletedReturnsOnCall[len(fake.waitUntilExportTaskCompletedArgsForCall)]
	fake.waitUntilExportTaskCompletedArgsForCall = append(fake.waitUntilExportTaskCompletedArgsForCall, struct {
		arg1 *ec2.DescribeExportTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilExportTaskCompleted", []interface{}{arg1})
	fake.waitUntilExportTaskCompletedMutex.Unlock()
	if fake.WaitUntilExportTaskCompletedStub != nil {
		return fake.WaitUntilExportTaskCompletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilExportTaskCompletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedCallCount() int {
	fake.waitUntilExportTaskCompletedMutex.RLock()
	defer fake.waitUntilExportTaskCompletedMutex.RUnlock()
	return len(fake.waitUntilExportTaskCompletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedCalls(stub func(*ec2.DescribeExportTasksInput) error) {
	fake.waitUntilExportTaskCompletedMutex.Lock()
	defer fake.waitUntilExportTaskCompletedMutex.Unlock()
	fake.WaitUntilExportTaskCompletedStub = stub
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedArgsForCall(i int) *ec2.DescribeExportTasksInput {
	fake.waitUntilExportTaskCompletedMutex.RLock()
	defer fake.waitUntilExportTaskCompletedMutex.RUnlock()
	argsForCall := fake.waitUntilExportTaskCompletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedReturns(result1 error) {
	fake.waitUntilExportTaskCompletedMutex.Lock()
	defer fake.waitUntilExportTaskCompletedMutex.Unlock()
	fake.WaitUntilExportTaskCompletedStub = nil
	fake.waitUntilExportTaskCompletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilExportTaskCompletedMutex.Lock()
	defer fake.waitUntilExportTaskCompletedMutex.Unlock()
	fake.WaitUntilExportTaskCompletedStub = nil
	if fake.waitUntilExportTaskCompletedReturnsOnCall == nil {
		fake.waitUntilExportTaskCompletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilExportTaskCompletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeExportTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilExportTaskCompletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilExportTaskCompletedWithContextReturnsOnCall[len(fake.waitUntilExportTaskCompletedWithContextArgsForCall)]
	fake.waitUntilExportTaskCompletedWithContextArgsForCall = append(fake.waitUntilExportTaskCompletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeExportTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilExportTaskCompletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilExportTaskCompletedWithContextMutex.Unlock()
	if fake.WaitUntilExportTaskCompletedWithContextStub != nil {
		return fake.WaitUntilExportTaskCompletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilExportTaskCompletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedWithContextCallCount() int {
	fake.waitUntilExportTaskCompletedWithContextMutex.RLock()
	defer fake.waitUntilExportTaskCompletedWithContextMutex.RUnlock()
	return len(fake.waitUntilExportTaskCompletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedWithContextCalls(stub func(aws.Context, *ec2.DescribeExportTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilExportTaskCompletedWithContextMutex.Lock()
	defer fake.waitUntilExportTaskCompletedWithContextMutex.Unlock()
	fake.WaitUntilExportTaskCompletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeExportTasksInput, []request.WaiterOption) {
	fake.waitUntilExportTaskCompletedWithContextMutex.RLock()
	defer fake.waitUntilExportTaskCompletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilExportTaskCompletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedWithContextReturns(result1 error) {
	fake.waitUntilExportTaskCompletedWithContextMutex.Lock()
	defer fake.waitUntilExportTaskCompletedWithContextMutex.Unlock()
	fake.WaitUntilExportTaskCompletedWithContextStub = nil
	fake.waitUntilExportTaskCompletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilExportTaskCompletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilExportTaskCompletedWithContextMutex.Lock()
	defer fake.waitUntilExportTaskCompletedWithContextMutex.Unlock()
	fake.WaitUntilExportTaskCompletedWithContextStub = nil
	if fake.waitUntilExportTaskCompletedWithContextReturnsOnCall == nil {
		fake.waitUntilExportTaskCompletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilExportTaskCompletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageAvailable(arg1 *ec2.DescribeImagesInput) error {
	fake.waitUntilImageAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilImageAvailableReturnsOnCall[len(fake.waitUntilImageAvailableArgsForCall)]
	fake.waitUntilImageAvailableArgsForCall = append(fake.waitUntilImageAvailableArgsForCall, struct {
		arg1 *ec2.DescribeImagesInput
	}{arg1})
	fake.recordInvocation("WaitUntilImageAvailable", []interface{}{arg1})
	fake.waitUntilImageAvailableMutex.Unlock()
	if fake.WaitUntilImageAvailableStub != nil {
		return fake.WaitUntilImageAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilImageAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilImageAvailableCallCount() int {
	fake.waitUntilImageAvailableMutex.RLock()
	defer fake.waitUntilImageAvailableMutex.RUnlock()
	return len(fake.waitUntilImageAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilImageAvailableCalls(stub func(*ec2.DescribeImagesInput) error) {
	fake.waitUntilImageAvailableMutex.Lock()
	defer fake.waitUntilImageAvailableMutex.Unlock()
	fake.WaitUntilImageAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilImageAvailableArgsForCall(i int) *ec2.DescribeImagesInput {
	fake.waitUntilImageAvailableMutex.RLock()
	defer fake.waitUntilImageAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilImageAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilImageAvailableReturns(result1 error) {
	fake.waitUntilImageAvailableMutex.Lock()
	defer fake.waitUntilImageAvailableMutex.Unlock()
	fake.WaitUntilImageAvailableStub = nil
	fake.waitUntilImageAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilImageAvailableMutex.Lock()
	defer fake.waitUntilImageAvailableMutex.Unlock()
	fake.WaitUntilImageAvailableStub = nil
	if fake.waitUntilImageAvailableReturnsOnCall == nil {
		fake.waitUntilImageAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilImageAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeImagesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilImageAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilImageAvailableWithContextReturnsOnCall[len(fake.waitUntilImageAvailableWithContextArgsForCall)]
	fake.waitUntilImageAvailableWithContextArgsForCall = append(fake.waitUntilImageAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImagesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilImageAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilImageAvailableWithContextMutex.Unlock()
	if fake.WaitUntilImageAvailableWithContextStub != nil {
		return fake.WaitUntilImageAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilImageAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilImageAvailableWithContextCallCount() int {
	fake.waitUntilImageAvailableWithContextMutex.RLock()
	defer fake.waitUntilImageAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilImageAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilImageAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeImagesInput, ...request.WaiterOption) error) {
	fake.waitUntilImageAvailableWithContextMutex.Lock()
	defer fake.waitUntilImageAvailableWithContextMutex.Unlock()
	fake.WaitUntilImageAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilImageAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeImagesInput, []request.WaiterOption) {
	fake.waitUntilImageAvailableWithContextMutex.RLock()
	defer fake.waitUntilImageAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilImageAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilImageAvailableWithContextReturns(result1 error) {
	fake.waitUntilImageAvailableWithContextMutex.Lock()
	defer fake.waitUntilImageAvailableWithContextMutex.Unlock()
	fake.WaitUntilImageAvailableWithContextStub = nil
	fake.waitUntilImageAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilImageAvailableWithContextMutex.Lock()
	defer fake.waitUntilImageAvailableWithContextMutex.Unlock()
	fake.WaitUntilImageAvailableWithContextStub = nil
	if fake.waitUntilImageAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilImageAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilImageAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageExists(arg1 *ec2.DescribeImagesInput) error {
	fake.waitUntilImageExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilImageExistsReturnsOnCall[len(fake.waitUntilImageExistsArgsForCall)]
	fake.waitUntilImageExistsArgsForCall = append(fake.waitUntilImageExistsArgsForCall, struct {
		arg1 *ec2.DescribeImagesInput
	}{arg1})
	fake.recordInvocation("WaitUntilImageExists", []interface{}{arg1})
	fake.waitUntilImageExistsMutex.Unlock()
	if fake.WaitUntilImageExistsStub != nil {
		return fake.WaitUntilImageExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilImageExistsReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilImageExistsCallCount() int {
	fake.waitUntilImageExistsMutex.RLock()
	defer fake.waitUntilImageExistsMutex.RUnlock()
	return len(fake.waitUntilImageExistsArgsForCall)
}

func (fake *FakeEC2API) WaitUntilImageExistsCalls(stub func(*ec2.DescribeImagesInput) error) {
	fake.waitUntilImageExistsMutex.Lock()
	defer fake.waitUntilImageExistsMutex.Unlock()
	fake.WaitUntilImageExistsStub = stub
}

func (fake *FakeEC2API) WaitUntilImageExistsArgsForCall(i int) *ec2.DescribeImagesInput {
	fake.waitUntilImageExistsMutex.RLock()
	defer fake.waitUntilImageExistsMutex.RUnlock()
	argsForCall := fake.waitUntilImageExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilImageExistsReturns(result1 error) {
	fake.waitUntilImageExistsMutex.Lock()
	defer fake.waitUntilImageExistsMutex.Unlock()
	fake.WaitUntilImageExistsStub = nil
	fake.waitUntilImageExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilImageExistsMutex.Lock()
	defer fake.waitUntilImageExistsMutex.Unlock()
	fake.WaitUntilImageExistsStub = nil
	if fake.waitUntilImageExistsReturnsOnCall == nil {
		fake.waitUntilImageExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilImageExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageExistsWithContext(arg1 aws.Context, arg2 *ec2.DescribeImagesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilImageExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilImageExistsWithContextReturnsOnCall[len(fake.waitUntilImageExistsWithContextArgsForCall)]
	fake.waitUntilImageExistsWithContextArgsForCall = append(fake.waitUntilImageExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeImagesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilImageExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilImageExistsWithContextMutex.Unlock()
	if fake.WaitUntilImageExistsWithContextStub != nil {
		return fake.WaitUntilImageExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilImageExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilImageExistsWithContextCallCount() int {
	fake.waitUntilImageExistsWithContextMutex.RLock()
	defer fake.waitUntilImageExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilImageExistsWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilImageExistsWithContextCalls(stub func(aws.Context, *ec2.DescribeImagesInput, ...request.WaiterOption) error) {
	fake.waitUntilImageExistsWithContextMutex.Lock()
	defer fake.waitUntilImageExistsWithContextMutex.Unlock()
	fake.WaitUntilImageExistsWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilImageExistsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeImagesInput, []request.WaiterOption) {
	fake.waitUntilImageExistsWithContextMutex.RLock()
	defer fake.waitUntilImageExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilImageExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilImageExistsWithContextReturns(result1 error) {
	fake.waitUntilImageExistsWithContextMutex.Lock()
	defer fake.waitUntilImageExistsWithContextMutex.Unlock()
	fake.WaitUntilImageExistsWithContextStub = nil
	fake.waitUntilImageExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilImageExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilImageExistsWithContextMutex.Lock()
	defer fake.waitUntilImageExistsWithContextMutex.Unlock()
	fake.WaitUntilImageExistsWithContextStub = nil
	if fake.waitUntilImageExistsWithContextReturnsOnCall == nil {
		fake.waitUntilImageExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilImageExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceExists(arg1 *ec2.DescribeInstancesInput) error {
	fake.waitUntilInstanceExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceExistsReturnsOnCall[len(fake.waitUntilInstanceExistsArgsForCall)]
	fake.waitUntilInstanceExistsArgsForCall = append(fake.waitUntilInstanceExistsArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("WaitUntilInstanceExists", []interface{}{arg1})
	fake.waitUntilInstanceExistsMutex.Unlock()
	if fake.WaitUntilInstanceExistsStub != nil {
		return fake.WaitUntilInstanceExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceExistsReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceExistsCallCount() int {
	fake.waitUntilInstanceExistsMutex.RLock()
	defer fake.waitUntilInstanceExistsMutex.RUnlock()
	return len(fake.waitUntilInstanceExistsArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceExistsCalls(stub func(*ec2.DescribeInstancesInput) error) {
	fake.waitUntilInstanceExistsMutex.Lock()
	defer fake.waitUntilInstanceExistsMutex.Unlock()
	fake.WaitUntilInstanceExistsStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceExistsArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.waitUntilInstanceExistsMutex.RLock()
	defer fake.waitUntilInstanceExistsMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilInstanceExistsReturns(result1 error) {
	fake.waitUntilInstanceExistsMutex.Lock()
	defer fake.waitUntilInstanceExistsMutex.Unlock()
	fake.WaitUntilInstanceExistsStub = nil
	fake.waitUntilInstanceExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceExistsMutex.Lock()
	defer fake.waitUntilInstanceExistsMutex.Unlock()
	fake.WaitUntilInstanceExistsStub = nil
	if fake.waitUntilInstanceExistsReturnsOnCall == nil {
		fake.waitUntilInstanceExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceExistsWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstancesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInstanceExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceExistsWithContextReturnsOnCall[len(fake.waitUntilInstanceExistsWithContextArgsForCall)]
	fake.waitUntilInstanceExistsWithContextArgsForCall = append(fake.waitUntilInstanceExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInstanceExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInstanceExistsWithContextMutex.Unlock()
	if fake.WaitUntilInstanceExistsWithContextStub != nil {
		return fake.WaitUntilInstanceExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceExistsWithContextCallCount() int {
	fake.waitUntilInstanceExistsWithContextMutex.RLock()
	defer fake.waitUntilInstanceExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilInstanceExistsWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceExistsWithContextCalls(stub func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error) {
	fake.waitUntilInstanceExistsWithContextMutex.Lock()
	defer fake.waitUntilInstanceExistsWithContextMutex.Unlock()
	fake.WaitUntilInstanceExistsWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceExistsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstancesInput, []request.WaiterOption) {
	fake.waitUntilInstanceExistsWithContextMutex.RLock()
	defer fake.waitUntilInstanceExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilInstanceExistsWithContextReturns(result1 error) {
	fake.waitUntilInstanceExistsWithContextMutex.Lock()
	defer fake.waitUntilInstanceExistsWithContextMutex.Unlock()
	fake.WaitUntilInstanceExistsWithContextStub = nil
	fake.waitUntilInstanceExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceExistsWithContextMutex.Lock()
	defer fake.waitUntilInstanceExistsWithContextMutex.Unlock()
	fake.WaitUntilInstanceExistsWithContextStub = nil
	if fake.waitUntilInstanceExistsWithContextReturnsOnCall == nil {
		fake.waitUntilInstanceExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceRunning(arg1 *ec2.DescribeInstancesInput) error {
	fake.waitUntilInstanceRunningMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceRunningReturnsOnCall[len(fake.waitUntilInstanceRunningArgsForCall)]
	fake.waitUntilInstanceRunningArgsForCall = append(fake.waitUntilInstanceRunningArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("WaitUntilInstanceRunning", []interface{}{arg1})
	fake.waitUntilInstanceRunningMutex.Unlock()
	if fake.WaitUntilInstanceRunningStub != nil {
		return fake.WaitUntilInstanceRunningStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceRunningReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceRunningCallCount() int {
	fake.waitUntilInstanceRunningMutex.RLock()
	defer fake.waitUntilInstanceRunningMutex.RUnlock()
	return len(fake.waitUntilInstanceRunningArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceRunningCalls(stub func(*ec2.DescribeInstancesInput) error) {
	fake.waitUntilInstanceRunningMutex.Lock()
	defer fake.waitUntilInstanceRunningMutex.Unlock()
	fake.WaitUntilInstanceRunningStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceRunningArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.waitUntilInstanceRunningMutex.RLock()
	defer fake.waitUntilInstanceRunningMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceRunningArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilInstanceRunningReturns(result1 error) {
	fake.waitUntilInstanceRunningMutex.Lock()
	defer fake.waitUntilInstanceRunningMutex.Unlock()
	fake.WaitUntilInstanceRunningStub = nil
	fake.waitUntilInstanceRunningReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceRunningReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceRunningMutex.Lock()
	defer fake.waitUntilInstanceRunningMutex.Unlock()
	fake.WaitUntilInstanceRunningStub = nil
	if fake.waitUntilInstanceRunningReturnsOnCall == nil {
		fake.waitUntilInstanceRunningReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceRunningReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceRunningWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstancesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInstanceRunningWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceRunningWithContextReturnsOnCall[len(fake.waitUntilInstanceRunningWithContextArgsForCall)]
	fake.waitUntilInstanceRunningWithContextArgsForCall = append(fake.waitUntilInstanceRunningWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInstanceRunningWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInstanceRunningWithContextMutex.Unlock()
	if fake.WaitUntilInstanceRunningWithContextStub != nil {
		return fake.WaitUntilInstanceRunningWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceRunningWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceRunningWithContextCallCount() int {
	fake.waitUntilInstanceRunningWithContextMutex.RLock()
	defer fake.waitUntilInstanceRunningWithContextMutex.RUnlock()
	return len(fake.waitUntilInstanceRunningWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceRunningWithContextCalls(stub func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error) {
	fake.waitUntilInstanceRunningWithContextMutex.Lock()
	defer fake.waitUntilInstanceRunningWithContextMutex.Unlock()
	fake.WaitUntilInstanceRunningWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceRunningWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstancesInput, []request.WaiterOption) {
	fake.waitUntilInstanceRunningWithContextMutex.RLock()
	defer fake.waitUntilInstanceRunningWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceRunningWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilInstanceRunningWithContextReturns(result1 error) {
	fake.waitUntilInstanceRunningWithContextMutex.Lock()
	defer fake.waitUntilInstanceRunningWithContextMutex.Unlock()
	fake.WaitUntilInstanceRunningWithContextStub = nil
	fake.waitUntilInstanceRunningWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceRunningWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceRunningWithContextMutex.Lock()
	defer fake.waitUntilInstanceRunningWithContextMutex.Unlock()
	fake.WaitUntilInstanceRunningWithContextStub = nil
	if fake.waitUntilInstanceRunningWithContextReturnsOnCall == nil {
		fake.waitUntilInstanceRunningWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceRunningWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOk(arg1 *ec2.DescribeInstanceStatusInput) error {
	fake.waitUntilInstanceStatusOkMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceStatusOkReturnsOnCall[len(fake.waitUntilInstanceStatusOkArgsForCall)]
	fake.waitUntilInstanceStatusOkArgsForCall = append(fake.waitUntilInstanceStatusOkArgsForCall, struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}{arg1})
	fake.recordInvocation("WaitUntilInstanceStatusOk", []interface{}{arg1})
	fake.waitUntilInstanceStatusOkMutex.Unlock()
	if fake.WaitUntilInstanceStatusOkStub != nil {
		return fake.WaitUntilInstanceStatusOkStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceStatusOkReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkCallCount() int {
	fake.waitUntilInstanceStatusOkMutex.RLock()
	defer fake.waitUntilInstanceStatusOkMutex.RUnlock()
	return len(fake.waitUntilInstanceStatusOkArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkCalls(stub func(*ec2.DescribeInstanceStatusInput) error) {
	fake.waitUntilInstanceStatusOkMutex.Lock()
	defer fake.waitUntilInstanceStatusOkMutex.Unlock()
	fake.WaitUntilInstanceStatusOkStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkArgsForCall(i int) *ec2.DescribeInstanceStatusInput {
	fake.waitUntilInstanceStatusOkMutex.RLock()
	defer fake.waitUntilInstanceStatusOkMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceStatusOkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkReturns(result1 error) {
	fake.waitUntilInstanceStatusOkMutex.Lock()
	defer fake.waitUntilInstanceStatusOkMutex.Unlock()
	fake.WaitUntilInstanceStatusOkStub = nil
	fake.waitUntilInstanceStatusOkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceStatusOkMutex.Lock()
	defer fake.waitUntilInstanceStatusOkMutex.Unlock()
	fake.WaitUntilInstanceStatusOkStub = nil
	if fake.waitUntilInstanceStatusOkReturnsOnCall == nil {
		fake.waitUntilInstanceStatusOkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceStatusOkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstanceStatusInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInstanceStatusOkWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceStatusOkWithContextReturnsOnCall[len(fake.waitUntilInstanceStatusOkWithContextArgsForCall)]
	fake.waitUntilInstanceStatusOkWithContextArgsForCall = append(fake.waitUntilInstanceStatusOkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInstanceStatusOkWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInstanceStatusOkWithContextMutex.Unlock()
	if fake.WaitUntilInstanceStatusOkWithContextStub != nil {
		return fake.WaitUntilInstanceStatusOkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceStatusOkWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkWithContextCallCount() int {
	fake.waitUntilInstanceStatusOkWithContextMutex.RLock()
	defer fake.waitUntilInstanceStatusOkWithContextMutex.RUnlock()
	return len(fake.waitUntilInstanceStatusOkWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkWithContextCalls(stub func(aws.Context, *ec2.DescribeInstanceStatusInput, ...request.WaiterOption) error) {
	fake.waitUntilInstanceStatusOkWithContextMutex.Lock()
	defer fake.waitUntilInstanceStatusOkWithContextMutex.Unlock()
	fake.WaitUntilInstanceStatusOkWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstanceStatusInput, []request.WaiterOption) {
	fake.waitUntilInstanceStatusOkWithContextMutex.RLock()
	defer fake.waitUntilInstanceStatusOkWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceStatusOkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkWithContextReturns(result1 error) {
	fake.waitUntilInstanceStatusOkWithContextMutex.Lock()
	defer fake.waitUntilInstanceStatusOkWithContextMutex.Unlock()
	fake.WaitUntilInstanceStatusOkWithContextStub = nil
	fake.waitUntilInstanceStatusOkWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStatusOkWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceStatusOkWithContextMutex.Lock()
	defer fake.waitUntilInstanceStatusOkWithContextMutex.Unlock()
	fake.WaitUntilInstanceStatusOkWithContextStub = nil
	if fake.waitUntilInstanceStatusOkWithContextReturnsOnCall == nil {
		fake.waitUntilInstanceStatusOkWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceStatusOkWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStopped(arg1 *ec2.DescribeInstancesInput) error {
	fake.waitUntilInstanceStoppedMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceStoppedReturnsOnCall[len(fake.waitUntilInstanceStoppedArgsForCall)]
	fake.waitUntilInstanceStoppedArgsForCall = append(fake.waitUntilInstanceStoppedArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("WaitUntilInstanceStopped", []interface{}{arg1})
	fake.waitUntilInstanceStoppedMutex.Unlock()
	if fake.WaitUntilInstanceStoppedStub != nil {
		return fake.WaitUntilInstanceStoppedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceStoppedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedCallCount() int {
	fake.waitUntilInstanceStoppedMutex.RLock()
	defer fake.waitUntilInstanceStoppedMutex.RUnlock()
	return len(fake.waitUntilInstanceStoppedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedCalls(stub func(*ec2.DescribeInstancesInput) error) {
	fake.waitUntilInstanceStoppedMutex.Lock()
	defer fake.waitUntilInstanceStoppedMutex.Unlock()
	fake.WaitUntilInstanceStoppedStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.waitUntilInstanceStoppedMutex.RLock()
	defer fake.waitUntilInstanceStoppedMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceStoppedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedReturns(result1 error) {
	fake.waitUntilInstanceStoppedMutex.Lock()
	defer fake.waitUntilInstanceStoppedMutex.Unlock()
	fake.WaitUntilInstanceStoppedStub = nil
	fake.waitUntilInstanceStoppedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceStoppedMutex.Lock()
	defer fake.waitUntilInstanceStoppedMutex.Unlock()
	fake.WaitUntilInstanceStoppedStub = nil
	if fake.waitUntilInstanceStoppedReturnsOnCall == nil {
		fake.waitUntilInstanceStoppedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceStoppedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstancesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInstanceStoppedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceStoppedWithContextReturnsOnCall[len(fake.waitUntilInstanceStoppedWithContextArgsForCall)]
	fake.waitUntilInstanceStoppedWithContextArgsForCall = append(fake.waitUntilInstanceStoppedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInstanceStoppedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInstanceStoppedWithContextMutex.Unlock()
	if fake.WaitUntilInstanceStoppedWithContextStub != nil {
		return fake.WaitUntilInstanceStoppedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceStoppedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedWithContextCallCount() int {
	fake.waitUntilInstanceStoppedWithContextMutex.RLock()
	defer fake.waitUntilInstanceStoppedWithContextMutex.RUnlock()
	return len(fake.waitUntilInstanceStoppedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedWithContextCalls(stub func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error) {
	fake.waitUntilInstanceStoppedWithContextMutex.Lock()
	defer fake.waitUntilInstanceStoppedWithContextMutex.Unlock()
	fake.WaitUntilInstanceStoppedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstancesInput, []request.WaiterOption) {
	fake.waitUntilInstanceStoppedWithContextMutex.RLock()
	defer fake.waitUntilInstanceStoppedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceStoppedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedWithContextReturns(result1 error) {
	fake.waitUntilInstanceStoppedWithContextMutex.Lock()
	defer fake.waitUntilInstanceStoppedWithContextMutex.Unlock()
	fake.WaitUntilInstanceStoppedWithContextStub = nil
	fake.waitUntilInstanceStoppedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceStoppedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceStoppedWithContextMutex.Lock()
	defer fake.waitUntilInstanceStoppedWithContextMutex.Unlock()
	fake.WaitUntilInstanceStoppedWithContextStub = nil
	if fake.waitUntilInstanceStoppedWithContextReturnsOnCall == nil {
		fake.waitUntilInstanceStoppedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceStoppedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceTerminated(arg1 *ec2.DescribeInstancesInput) error {
	fake.waitUntilInstanceTerminatedMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceTerminatedReturnsOnCall[len(fake.waitUntilInstanceTerminatedArgsForCall)]
	fake.waitUntilInstanceTerminatedArgsForCall = append(fake.waitUntilInstanceTerminatedArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("WaitUntilInstanceTerminated", []interface{}{arg1})
	fake.waitUntilInstanceTerminatedMutex.Unlock()
	if fake.WaitUntilInstanceTerminatedStub != nil {
		return fake.WaitUntilInstanceTerminatedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceTerminatedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedCallCount() int {
	fake.waitUntilInstanceTerminatedMutex.RLock()
	defer fake.waitUntilInstanceTerminatedMutex.RUnlock()
	return len(fake.waitUntilInstanceTerminatedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedCalls(stub func(*ec2.DescribeInstancesInput) error) {
	fake.waitUntilInstanceTerminatedMutex.Lock()
	defer fake.waitUntilInstanceTerminatedMutex.Unlock()
	fake.WaitUntilInstanceTerminatedStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.waitUntilInstanceTerminatedMutex.RLock()
	defer fake.waitUntilInstanceTerminatedMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceTerminatedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedReturns(result1 error) {
	fake.waitUntilInstanceTerminatedMutex.Lock()
	defer fake.waitUntilInstanceTerminatedMutex.Unlock()
	fake.WaitUntilInstanceTerminatedStub = nil
	fake.waitUntilInstanceTerminatedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceTerminatedMutex.Lock()
	defer fake.waitUntilInstanceTerminatedMutex.Unlock()
	fake.WaitUntilInstanceTerminatedStub = nil
	if fake.waitUntilInstanceTerminatedReturnsOnCall == nil {
		fake.waitUntilInstanceTerminatedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceTerminatedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstancesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInstanceTerminatedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInstanceTerminatedWithContextReturnsOnCall[len(fake.waitUntilInstanceTerminatedWithContextArgsForCall)]
	fake.waitUntilInstanceTerminatedWithContextArgsForCall = append(fake.waitUntilInstanceTerminatedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstancesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInstanceTerminatedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInstanceTerminatedWithContextMutex.Unlock()
	if fake.WaitUntilInstanceTerminatedWithContextStub != nil {
		return fake.WaitUntilInstanceTerminatedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilInstanceTerminatedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedWithContextCallCount() int {
	fake.waitUntilInstanceTerminatedWithContextMutex.RLock()
	defer fake.waitUntilInstanceTerminatedWithContextMutex.RUnlock()
	return len(fake.waitUntilInstanceTerminatedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedWithContextCalls(stub func(aws.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error) {
	fake.waitUntilInstanceTerminatedWithContextMutex.Lock()
	defer fake.waitUntilInstanceTerminatedWithContextMutex.Unlock()
	fake.WaitUntilInstanceTerminatedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstancesInput, []request.WaiterOption) {
	fake.waitUntilInstanceTerminatedWithContextMutex.RLock()
	defer fake.waitUntilInstanceTerminatedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilInstanceTerminatedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedWithContextReturns(result1 error) {
	fake.waitUntilInstanceTerminatedWithContextMutex.Lock()
	defer fake.waitUntilInstanceTerminatedWithContextMutex.Unlock()
	fake.WaitUntilInstanceTerminatedWithContextStub = nil
	fake.waitUntilInstanceTerminatedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilInstanceTerminatedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilInstanceTerminatedWithContextMutex.Lock()
	defer fake.waitUntilInstanceTerminatedWithContextMutex.Unlock()
	fake.WaitUntilInstanceTerminatedWithContextStub = nil
	if fake.waitUntilInstanceTerminatedWithContextReturnsOnCall == nil {
		fake.waitUntilInstanceTerminatedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInstanceTerminatedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilKeyPairExists(arg1 *ec2.DescribeKeyPairsInput) error {
	fake.waitUntilKeyPairExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilKeyPairExistsReturnsOnCall[len(fake.waitUntilKeyPairExistsArgsForCall)]
	fake.waitUntilKeyPairExistsArgsForCall = append(fake.waitUntilKeyPairExistsArgsForCall, struct {
		arg1 *ec2.DescribeKeyPairsInput
	}{arg1})
	fake.recordInvocation("WaitUntilKeyPairExists", []interface{}{arg1})
	fake.waitUntilKeyPairExistsMutex.Unlock()
	if fake.WaitUntilKeyPairExistsStub != nil {
		return fake.WaitUntilKeyPairExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilKeyPairExistsReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsCallCount() int {
	fake.waitUntilKeyPairExistsMutex.RLock()
	defer fake.waitUntilKeyPairExistsMutex.RUnlock()
	return len(fake.waitUntilKeyPairExistsArgsForCall)
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsCalls(stub func(*ec2.DescribeKeyPairsInput) error) {
	fake.waitUntilKeyPairExistsMutex.Lock()
	defer fake.waitUntilKeyPairExistsMutex.Unlock()
	fake.WaitUntilKeyPairExistsStub = stub
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsArgsForCall(i int) *ec2.DescribeKeyPairsInput {
	fake.waitUntilKeyPairExistsMutex.RLock()
	defer fake.waitUntilKeyPairExistsMutex.RUnlock()
	argsForCall := fake.waitUntilKeyPairExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsReturns(result1 error) {
	fake.waitUntilKeyPairExistsMutex.Lock()
	defer fake.waitUntilKeyPairExistsMutex.Unlock()
	fake.WaitUntilKeyPairExistsStub = nil
	fake.waitUntilKeyPairExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilKeyPairExistsMutex.Lock()
	defer fake.waitUntilKeyPairExistsMutex.Unlock()
	fake.WaitUntilKeyPairExistsStub = nil
	if fake.waitUntilKeyPairExistsReturnsOnCall == nil {
		fake.waitUntilKeyPairExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilKeyPairExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsWithContext(arg1 aws.Context, arg2 *ec2.DescribeKeyPairsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilKeyPairExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilKeyPairExistsWithContextReturnsOnCall[len(fake.waitUntilKeyPairExistsWithContextArgsForCall)]
	fake.waitUntilKeyPairExistsWithContextArgsForCall = append(fake.waitUntilKeyPairExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeKeyPairsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilKeyPairExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilKeyPairExistsWithContextMutex.Unlock()
	if fake.WaitUntilKeyPairExistsWithContextStub != nil {
		return fake.WaitUntilKeyPairExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilKeyPairExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsWithContextCallCount() int {
	fake.waitUntilKeyPairExistsWithContextMutex.RLock()
	defer fake.waitUntilKeyPairExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilKeyPairExistsWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsWithContextCalls(stub func(aws.Context, *ec2.DescribeKeyPairsInput, ...request.WaiterOption) error) {
	fake.waitUntilKeyPairExistsWithContextMutex.Lock()
	defer fake.waitUntilKeyPairExistsWithContextMutex.Unlock()
	fake.WaitUntilKeyPairExistsWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeKeyPairsInput, []request.WaiterOption) {
	fake.waitUntilKeyPairExistsWithContextMutex.RLock()
	defer fake.waitUntilKeyPairExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilKeyPairExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsWithContextReturns(result1 error) {
	fake.waitUntilKeyPairExistsWithContextMutex.Lock()
	defer fake.waitUntilKeyPairExistsWithContextMutex.Unlock()
	fake.WaitUntilKeyPairExistsWithContextStub = nil
	fake.waitUntilKeyPairExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilKeyPairExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilKeyPairExistsWithContextMutex.Lock()
	defer fake.waitUntilKeyPairExistsWithContextMutex.Unlock()
	fake.WaitUntilKeyPairExistsWithContextStub = nil
	if fake.waitUntilKeyPairExistsWithContextReturnsOnCall == nil {
		fake.waitUntilKeyPairExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilKeyPairExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailable(arg1 *ec2.DescribeNatGatewaysInput) error {
	fake.waitUntilNatGatewayAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilNatGatewayAvailableReturnsOnCall[len(fake.waitUntilNatGatewayAvailableArgsForCall)]
	fake.waitUntilNatGatewayAvailableArgsForCall = append(fake.waitUntilNatGatewayAvailableArgsForCall, struct {
		arg1 *ec2.DescribeNatGatewaysInput
	}{arg1})
	fake.recordInvocation("WaitUntilNatGatewayAvailable", []interface{}{arg1})
	fake.waitUntilNatGatewayAvailableMutex.Unlock()
	if fake.WaitUntilNatGatewayAvailableStub != nil {
		return fake.WaitUntilNatGatewayAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilNatGatewayAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableCallCount() int {
	fake.waitUntilNatGatewayAvailableMutex.RLock()
	defer fake.waitUntilNatGatewayAvailableMutex.RUnlock()
	return len(fake.waitUntilNatGatewayAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableCalls(stub func(*ec2.DescribeNatGatewaysInput) error) {
	fake.waitUntilNatGatewayAvailableMutex.Lock()
	defer fake.waitUntilNatGatewayAvailableMutex.Unlock()
	fake.WaitUntilNatGatewayAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableArgsForCall(i int) *ec2.DescribeNatGatewaysInput {
	fake.waitUntilNatGatewayAvailableMutex.RLock()
	defer fake.waitUntilNatGatewayAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilNatGatewayAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableReturns(result1 error) {
	fake.waitUntilNatGatewayAvailableMutex.Lock()
	defer fake.waitUntilNatGatewayAvailableMutex.Unlock()
	fake.WaitUntilNatGatewayAvailableStub = nil
	fake.waitUntilNatGatewayAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilNatGatewayAvailableMutex.Lock()
	defer fake.waitUntilNatGatewayAvailableMutex.Unlock()
	fake.WaitUntilNatGatewayAvailableStub = nil
	if fake.waitUntilNatGatewayAvailableReturnsOnCall == nil {
		fake.waitUntilNatGatewayAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilNatGatewayAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeNatGatewaysInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilNatGatewayAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilNatGatewayAvailableWithContextReturnsOnCall[len(fake.waitUntilNatGatewayAvailableWithContextArgsForCall)]
	fake.waitUntilNatGatewayAvailableWithContextArgsForCall = append(fake.waitUntilNatGatewayAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNatGatewaysInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilNatGatewayAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilNatGatewayAvailableWithContextMutex.Unlock()
	if fake.WaitUntilNatGatewayAvailableWithContextStub != nil {
		return fake.WaitUntilNatGatewayAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilNatGatewayAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableWithContextCallCount() int {
	fake.waitUntilNatGatewayAvailableWithContextMutex.RLock()
	defer fake.waitUntilNatGatewayAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilNatGatewayAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeNatGatewaysInput, ...request.WaiterOption) error) {
	fake.waitUntilNatGatewayAvailableWithContextMutex.Lock()
	defer fake.waitUntilNatGatewayAvailableWithContextMutex.Unlock()
	fake.WaitUntilNatGatewayAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNatGatewaysInput, []request.WaiterOption) {
	fake.waitUntilNatGatewayAvailableWithContextMutex.RLock()
	defer fake.waitUntilNatGatewayAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilNatGatewayAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableWithContextReturns(result1 error) {
	fake.waitUntilNatGatewayAvailableWithContextMutex.Lock()
	defer fake.waitUntilNatGatewayAvailableWithContextMutex.Unlock()
	fake.WaitUntilNatGatewayAvailableWithContextStub = nil
	fake.waitUntilNatGatewayAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNatGatewayAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilNatGatewayAvailableWithContextMutex.Lock()
	defer fake.waitUntilNatGatewayAvailableWithContextMutex.Unlock()
	fake.WaitUntilNatGatewayAvailableWithContextStub = nil
	if fake.waitUntilNatGatewayAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilNatGatewayAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilNatGatewayAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailable(arg1 *ec2.DescribeNetworkInterfacesInput) error {
	fake.waitUntilNetworkInterfaceAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilNetworkInterfaceAvailableReturnsOnCall[len(fake.waitUntilNetworkInterfaceAvailableArgsForCall)]
	fake.waitUntilNetworkInterfaceAvailableArgsForCall = append(fake.waitUntilNetworkInterfaceAvailableArgsForCall, struct {
		arg1 *ec2.DescribeNetworkInterfacesInput
	}{arg1})
	fake.recordInvocation("WaitUntilNetworkInterfaceAvailable", []interface{}{arg1})
	fake.waitUntilNetworkInterfaceAvailableMutex.Unlock()
	if fake.WaitUntilNetworkInterfaceAvailableStub != nil {
		return fake.WaitUntilNetworkInterfaceAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilNetworkInterfaceAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableCallCount() int {
	fake.waitUntilNetworkInterfaceAvailableMutex.RLock()
	defer fake.waitUntilNetworkInterfaceAvailableMutex.RUnlock()
	return len(fake.waitUntilNetworkInterfaceAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableCalls(stub func(*ec2.DescribeNetworkInterfacesInput) error) {
	fake.waitUntilNetworkInterfaceAvailableMutex.Lock()
	defer fake.waitUntilNetworkInterfaceAvailableMutex.Unlock()
	fake.WaitUntilNetworkInterfaceAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableArgsForCall(i int) *ec2.DescribeNetworkInterfacesInput {
	fake.waitUntilNetworkInterfaceAvailableMutex.RLock()
	defer fake.waitUntilNetworkInterfaceAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilNetworkInterfaceAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableReturns(result1 error) {
	fake.waitUntilNetworkInterfaceAvailableMutex.Lock()
	defer fake.waitUntilNetworkInterfaceAvailableMutex.Unlock()
	fake.WaitUntilNetworkInterfaceAvailableStub = nil
	fake.waitUntilNetworkInterfaceAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilNetworkInterfaceAvailableMutex.Lock()
	defer fake.waitUntilNetworkInterfaceAvailableMutex.Unlock()
	fake.WaitUntilNetworkInterfaceAvailableStub = nil
	if fake.waitUntilNetworkInterfaceAvailableReturnsOnCall == nil {
		fake.waitUntilNetworkInterfaceAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilNetworkInterfaceAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeNetworkInterfacesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilNetworkInterfaceAvailableWithContextReturnsOnCall[len(fake.waitUntilNetworkInterfaceAvailableWithContextArgsForCall)]
	fake.waitUntilNetworkInterfaceAvailableWithContextArgsForCall = append(fake.waitUntilNetworkInterfaceAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeNetworkInterfacesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilNetworkInterfaceAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Unlock()
	if fake.WaitUntilNetworkInterfaceAvailableWithContextStub != nil {
		return fake.WaitUntilNetworkInterfaceAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilNetworkInterfaceAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableWithContextCallCount() int {
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.RLock()
	defer fake.waitUntilNetworkInterfaceAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilNetworkInterfaceAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeNetworkInterfacesInput, ...request.WaiterOption) error) {
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Lock()
	defer fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Unlock()
	fake.WaitUntilNetworkInterfaceAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeNetworkInterfacesInput, []request.WaiterOption) {
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.RLock()
	defer fake.waitUntilNetworkInterfaceAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilNetworkInterfaceAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableWithContextReturns(result1 error) {
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Lock()
	defer fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Unlock()
	fake.WaitUntilNetworkInterfaceAvailableWithContextStub = nil
	fake.waitUntilNetworkInterfaceAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilNetworkInterfaceAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Lock()
	defer fake.waitUntilNetworkInterfaceAvailableWithContextMutex.Unlock()
	fake.WaitUntilNetworkInterfaceAvailableWithContextStub = nil
	if fake.waitUntilNetworkInterfaceAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilNetworkInterfaceAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilNetworkInterfaceAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailable(arg1 *ec2.GetPasswordDataInput) error {
	fake.waitUntilPasswordDataAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilPasswordDataAvailableReturnsOnCall[len(fake.waitUntilPasswordDataAvailableArgsForCall)]
	fake.waitUntilPasswordDataAvailableArgsForCall = append(fake.waitUntilPasswordDataAvailableArgsForCall, struct {
		arg1 *ec2.GetPasswordDataInput
	}{arg1})
	fake.recordInvocation("WaitUntilPasswordDataAvailable", []interface{}{arg1})
	fake.waitUntilPasswordDataAvailableMutex.Unlock()
	if fake.WaitUntilPasswordDataAvailableStub != nil {
		return fake.WaitUntilPasswordDataAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilPasswordDataAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableCallCount() int {
	fake.waitUntilPasswordDataAvailableMutex.RLock()
	defer fake.waitUntilPasswordDataAvailableMutex.RUnlock()
	return len(fake.waitUntilPasswordDataAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableCalls(stub func(*ec2.GetPasswordDataInput) error) {
	fake.waitUntilPasswordDataAvailableMutex.Lock()
	defer fake.waitUntilPasswordDataAvailableMutex.Unlock()
	fake.WaitUntilPasswordDataAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableArgsForCall(i int) *ec2.GetPasswordDataInput {
	fake.waitUntilPasswordDataAvailableMutex.RLock()
	defer fake.waitUntilPasswordDataAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilPasswordDataAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableReturns(result1 error) {
	fake.waitUntilPasswordDataAvailableMutex.Lock()
	defer fake.waitUntilPasswordDataAvailableMutex.Unlock()
	fake.WaitUntilPasswordDataAvailableStub = nil
	fake.waitUntilPasswordDataAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilPasswordDataAvailableMutex.Lock()
	defer fake.waitUntilPasswordDataAvailableMutex.Unlock()
	fake.WaitUntilPasswordDataAvailableStub = nil
	if fake.waitUntilPasswordDataAvailableReturnsOnCall == nil {
		fake.waitUntilPasswordDataAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilPasswordDataAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableWithContext(arg1 aws.Context, arg2 *ec2.GetPasswordDataInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilPasswordDataAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilPasswordDataAvailableWithContextReturnsOnCall[len(fake.waitUntilPasswordDataAvailableWithContextArgsForCall)]
	fake.waitUntilPasswordDataAvailableWithContextArgsForCall = append(fake.waitUntilPasswordDataAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.GetPasswordDataInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilPasswordDataAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilPasswordDataAvailableWithContextMutex.Unlock()
	if fake.WaitUntilPasswordDataAvailableWithContextStub != nil {
		return fake.WaitUntilPasswordDataAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilPasswordDataAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableWithContextCallCount() int {
	fake.waitUntilPasswordDataAvailableWithContextMutex.RLock()
	defer fake.waitUntilPasswordDataAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilPasswordDataAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableWithContextCalls(stub func(aws.Context, *ec2.GetPasswordDataInput, ...request.WaiterOption) error) {
	fake.waitUntilPasswordDataAvailableWithContextMutex.Lock()
	defer fake.waitUntilPasswordDataAvailableWithContextMutex.Unlock()
	fake.WaitUntilPasswordDataAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.GetPasswordDataInput, []request.WaiterOption) {
	fake.waitUntilPasswordDataAvailableWithContextMutex.RLock()
	defer fake.waitUntilPasswordDataAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilPasswordDataAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableWithContextReturns(result1 error) {
	fake.waitUntilPasswordDataAvailableWithContextMutex.Lock()
	defer fake.waitUntilPasswordDataAvailableWithContextMutex.Unlock()
	fake.WaitUntilPasswordDataAvailableWithContextStub = nil
	fake.waitUntilPasswordDataAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilPasswordDataAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilPasswordDataAvailableWithContextMutex.Lock()
	defer fake.waitUntilPasswordDataAvailableWithContextMutex.Unlock()
	fake.WaitUntilPasswordDataAvailableWithContextStub = nil
	if fake.waitUntilPasswordDataAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilPasswordDataAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilPasswordDataAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSnapshotCompleted(arg1 *ec2.DescribeSnapshotsInput) error {
	fake.waitUntilSnapshotCompletedMutex.Lock()
	ret, specificReturn := fake.waitUntilSnapshotCompletedReturnsOnCall[len(fake.waitUntilSnapshotCompletedArgsForCall)]
	fake.waitUntilSnapshotCompletedArgsForCall = append(fake.waitUntilSnapshotCompletedArgsForCall, struct {
		arg1 *ec2.DescribeSnapshotsInput
	}{arg1})
	fake.recordInvocation("WaitUntilSnapshotCompleted", []interface{}{arg1})
	fake.waitUntilSnapshotCompletedMutex.Unlock()
	if fake.WaitUntilSnapshotCompletedStub != nil {
		return fake.WaitUntilSnapshotCompletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSnapshotCompletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedCallCount() int {
	fake.waitUntilSnapshotCompletedMutex.RLock()
	defer fake.waitUntilSnapshotCompletedMutex.RUnlock()
	return len(fake.waitUntilSnapshotCompletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedCalls(stub func(*ec2.DescribeSnapshotsInput) error) {
	fake.waitUntilSnapshotCompletedMutex.Lock()
	defer fake.waitUntilSnapshotCompletedMutex.Unlock()
	fake.WaitUntilSnapshotCompletedStub = stub
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedArgsForCall(i int) *ec2.DescribeSnapshotsInput {
	fake.waitUntilSnapshotCompletedMutex.RLock()
	defer fake.waitUntilSnapshotCompletedMutex.RUnlock()
	argsForCall := fake.waitUntilSnapshotCompletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedReturns(result1 error) {
	fake.waitUntilSnapshotCompletedMutex.Lock()
	defer fake.waitUntilSnapshotCompletedMutex.Unlock()
	fake.WaitUntilSnapshotCompletedStub = nil
	fake.waitUntilSnapshotCompletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilSnapshotCompletedMutex.Lock()
	defer fake.waitUntilSnapshotCompletedMutex.Unlock()
	fake.WaitUntilSnapshotCompletedStub = nil
	if fake.waitUntilSnapshotCompletedReturnsOnCall == nil {
		fake.waitUntilSnapshotCompletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSnapshotCompletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeSnapshotsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilSnapshotCompletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilSnapshotCompletedWithContextReturnsOnCall[len(fake.waitUntilSnapshotCompletedWithContextArgsForCall)]
	fake.waitUntilSnapshotCompletedWithContextArgsForCall = append(fake.waitUntilSnapshotCompletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSnapshotsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilSnapshotCompletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilSnapshotCompletedWithContextMutex.Unlock()
	if fake.WaitUntilSnapshotCompletedWithContextStub != nil {
		return fake.WaitUntilSnapshotCompletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSnapshotCompletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedWithContextCallCount() int {
	fake.waitUntilSnapshotCompletedWithContextMutex.RLock()
	defer fake.waitUntilSnapshotCompletedWithContextMutex.RUnlock()
	return len(fake.waitUntilSnapshotCompletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedWithContextCalls(stub func(aws.Context, *ec2.DescribeSnapshotsInput, ...request.WaiterOption) error) {
	fake.waitUntilSnapshotCompletedWithContextMutex.Lock()
	defer fake.waitUntilSnapshotCompletedWithContextMutex.Unlock()
	fake.WaitUntilSnapshotCompletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSnapshotsInput, []request.WaiterOption) {
	fake.waitUntilSnapshotCompletedWithContextMutex.RLock()
	defer fake.waitUntilSnapshotCompletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilSnapshotCompletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedWithContextReturns(result1 error) {
	fake.waitUntilSnapshotCompletedWithContextMutex.Lock()
	defer fake.waitUntilSnapshotCompletedWithContextMutex.Unlock()
	fake.WaitUntilSnapshotCompletedWithContextStub = nil
	fake.waitUntilSnapshotCompletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSnapshotCompletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilSnapshotCompletedWithContextMutex.Lock()
	defer fake.waitUntilSnapshotCompletedWithContextMutex.Unlock()
	fake.WaitUntilSnapshotCompletedWithContextStub = nil
	if fake.waitUntilSnapshotCompletedWithContextReturnsOnCall == nil {
		fake.waitUntilSnapshotCompletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSnapshotCompletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilled(arg1 *ec2.DescribeSpotInstanceRequestsInput) error {
	fake.waitUntilSpotInstanceRequestFulfilledMutex.Lock()
	ret, specificReturn := fake.waitUntilSpotInstanceRequestFulfilledReturnsOnCall[len(fake.waitUntilSpotInstanceRequestFulfilledArgsForCall)]
	fake.waitUntilSpotInstanceRequestFulfilledArgsForCall = append(fake.waitUntilSpotInstanceRequestFulfilledArgsForCall, struct {
		arg1 *ec2.DescribeSpotInstanceRequestsInput
	}{arg1})
	fake.recordInvocation("WaitUntilSpotInstanceRequestFulfilled", []interface{}{arg1})
	fake.waitUntilSpotInstanceRequestFulfilledMutex.Unlock()
	if fake.WaitUntilSpotInstanceRequestFulfilledStub != nil {
		return fake.WaitUntilSpotInstanceRequestFulfilledStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSpotInstanceRequestFulfilledReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledCallCount() int {
	fake.waitUntilSpotInstanceRequestFulfilledMutex.RLock()
	defer fake.waitUntilSpotInstanceRequestFulfilledMutex.RUnlock()
	return len(fake.waitUntilSpotInstanceRequestFulfilledArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledCalls(stub func(*ec2.DescribeSpotInstanceRequestsInput) error) {
	fake.waitUntilSpotInstanceRequestFulfilledMutex.Lock()
	defer fake.waitUntilSpotInstanceRequestFulfilledMutex.Unlock()
	fake.WaitUntilSpotInstanceRequestFulfilledStub = stub
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledArgsForCall(i int) *ec2.DescribeSpotInstanceRequestsInput {
	fake.waitUntilSpotInstanceRequestFulfilledMutex.RLock()
	defer fake.waitUntilSpotInstanceRequestFulfilledMutex.RUnlock()
	argsForCall := fake.waitUntilSpotInstanceRequestFulfilledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledReturns(result1 error) {
	fake.waitUntilSpotInstanceRequestFulfilledMutex.Lock()
	defer fake.waitUntilSpotInstanceRequestFulfilledMutex.Unlock()
	fake.WaitUntilSpotInstanceRequestFulfilledStub = nil
	fake.waitUntilSpotInstanceRequestFulfilledReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledReturnsOnCall(i int, result1 error) {
	fake.waitUntilSpotInstanceRequestFulfilledMutex.Lock()
	defer fake.waitUntilSpotInstanceRequestFulfilledMutex.Unlock()
	fake.WaitUntilSpotInstanceRequestFulfilledStub = nil
	if fake.waitUntilSpotInstanceRequestFulfilledReturnsOnCall == nil {
		fake.waitUntilSpotInstanceRequestFulfilledReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSpotInstanceRequestFulfilledReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledWithContext(arg1 aws.Context, arg2 *ec2.DescribeSpotInstanceRequestsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilSpotInstanceRequestFulfilledWithContextReturnsOnCall[len(fake.waitUntilSpotInstanceRequestFulfilledWithContextArgsForCall)]
	fake.waitUntilSpotInstanceRequestFulfilledWithContextArgsForCall = append(fake.waitUntilSpotInstanceRequestFulfilledWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSpotInstanceRequestsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilSpotInstanceRequestFulfilledWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Unlock()
	if fake.WaitUntilSpotInstanceRequestFulfilledWithContextStub != nil {
		return fake.WaitUntilSpotInstanceRequestFulfilledWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSpotInstanceRequestFulfilledWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledWithContextCallCount() int {
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.RLock()
	defer fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.RUnlock()
	return len(fake.waitUntilSpotInstanceRequestFulfilledWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledWithContextCalls(stub func(aws.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.WaiterOption) error) {
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Lock()
	defer fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Unlock()
	fake.WaitUntilSpotInstanceRequestFulfilledWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSpotInstanceRequestsInput, []request.WaiterOption) {
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.RLock()
	defer fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilSpotInstanceRequestFulfilledWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledWithContextReturns(result1 error) {
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Lock()
	defer fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Unlock()
	fake.WaitUntilSpotInstanceRequestFulfilledWithContextStub = nil
	fake.waitUntilSpotInstanceRequestFulfilledWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSpotInstanceRequestFulfilledWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Lock()
	defer fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.Unlock()
	fake.WaitUntilSpotInstanceRequestFulfilledWithContextStub = nil
	if fake.waitUntilSpotInstanceRequestFulfilledWithContextReturnsOnCall == nil {
		fake.waitUntilSpotInstanceRequestFulfilledWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSpotInstanceRequestFulfilledWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSubnetAvailable(arg1 *ec2.DescribeSubnetsInput) error {
	fake.waitUntilSubnetAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilSubnetAvailableReturnsOnCall[len(fake.waitUntilSubnetAvailableArgsForCall)]
	fake.waitUntilSubnetAvailableArgsForCall = append(fake.waitUntilSubnetAvailableArgsForCall, struct {
		arg1 *ec2.DescribeSubnetsInput
	}{arg1})
	fake.recordInvocation("WaitUntilSubnetAvailable", []interface{}{arg1})
	fake.waitUntilSubnetAvailableMutex.Unlock()
	if fake.WaitUntilSubnetAvailableStub != nil {
		return fake.WaitUntilSubnetAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSubnetAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableCallCount() int {
	fake.waitUntilSubnetAvailableMutex.RLock()
	defer fake.waitUntilSubnetAvailableMutex.RUnlock()
	return len(fake.waitUntilSubnetAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableCalls(stub func(*ec2.DescribeSubnetsInput) error) {
	fake.waitUntilSubnetAvailableMutex.Lock()
	defer fake.waitUntilSubnetAvailableMutex.Unlock()
	fake.WaitUntilSubnetAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableArgsForCall(i int) *ec2.DescribeSubnetsInput {
	fake.waitUntilSubnetAvailableMutex.RLock()
	defer fake.waitUntilSubnetAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilSubnetAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableReturns(result1 error) {
	fake.waitUntilSubnetAvailableMutex.Lock()
	defer fake.waitUntilSubnetAvailableMutex.Unlock()
	fake.WaitUntilSubnetAvailableStub = nil
	fake.waitUntilSubnetAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilSubnetAvailableMutex.Lock()
	defer fake.waitUntilSubnetAvailableMutex.Unlock()
	fake.WaitUntilSubnetAvailableStub = nil
	if fake.waitUntilSubnetAvailableReturnsOnCall == nil {
		fake.waitUntilSubnetAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSubnetAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeSubnetsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilSubnetAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilSubnetAvailableWithContextReturnsOnCall[len(fake.waitUntilSubnetAvailableWithContextArgsForCall)]
	fake.waitUntilSubnetAvailableWithContextArgsForCall = append(fake.waitUntilSubnetAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeSubnetsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilSubnetAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilSubnetAvailableWithContextMutex.Unlock()
	if fake.WaitUntilSubnetAvailableWithContextStub != nil {
		return fake.WaitUntilSubnetAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSubnetAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableWithContextCallCount() int {
	fake.waitUntilSubnetAvailableWithContextMutex.RLock()
	defer fake.waitUntilSubnetAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilSubnetAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeSubnetsInput, ...request.WaiterOption) error) {
	fake.waitUntilSubnetAvailableWithContextMutex.Lock()
	defer fake.waitUntilSubnetAvailableWithContextMutex.Unlock()
	fake.WaitUntilSubnetAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeSubnetsInput, []request.WaiterOption) {
	fake.waitUntilSubnetAvailableWithContextMutex.RLock()
	defer fake.waitUntilSubnetAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilSubnetAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableWithContextReturns(result1 error) {
	fake.waitUntilSubnetAvailableWithContextMutex.Lock()
	defer fake.waitUntilSubnetAvailableWithContextMutex.Unlock()
	fake.WaitUntilSubnetAvailableWithContextStub = nil
	fake.waitUntilSubnetAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSubnetAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilSubnetAvailableWithContextMutex.Lock()
	defer fake.waitUntilSubnetAvailableWithContextMutex.Unlock()
	fake.WaitUntilSubnetAvailableWithContextStub = nil
	if fake.waitUntilSubnetAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilSubnetAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSubnetAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSystemStatusOk(arg1 *ec2.DescribeInstanceStatusInput) error {
	fake.waitUntilSystemStatusOkMutex.Lock()
	ret, specificReturn := fake.waitUntilSystemStatusOkReturnsOnCall[len(fake.waitUntilSystemStatusOkArgsForCall)]
	fake.waitUntilSystemStatusOkArgsForCall = append(fake.waitUntilSystemStatusOkArgsForCall, struct {
		arg1 *ec2.DescribeInstanceStatusInput
	}{arg1})
	fake.recordInvocation("WaitUntilSystemStatusOk", []interface{}{arg1})
	fake.waitUntilSystemStatusOkMutex.Unlock()
	if fake.WaitUntilSystemStatusOkStub != nil {
		return fake.WaitUntilSystemStatusOkStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSystemStatusOkReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkCallCount() int {
	fake.waitUntilSystemStatusOkMutex.RLock()
	defer fake.waitUntilSystemStatusOkMutex.RUnlock()
	return len(fake.waitUntilSystemStatusOkArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkCalls(stub func(*ec2.DescribeInstanceStatusInput) error) {
	fake.waitUntilSystemStatusOkMutex.Lock()
	defer fake.waitUntilSystemStatusOkMutex.Unlock()
	fake.WaitUntilSystemStatusOkStub = stub
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkArgsForCall(i int) *ec2.DescribeInstanceStatusInput {
	fake.waitUntilSystemStatusOkMutex.RLock()
	defer fake.waitUntilSystemStatusOkMutex.RUnlock()
	argsForCall := fake.waitUntilSystemStatusOkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkReturns(result1 error) {
	fake.waitUntilSystemStatusOkMutex.Lock()
	defer fake.waitUntilSystemStatusOkMutex.Unlock()
	fake.WaitUntilSystemStatusOkStub = nil
	fake.waitUntilSystemStatusOkReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkReturnsOnCall(i int, result1 error) {
	fake.waitUntilSystemStatusOkMutex.Lock()
	defer fake.waitUntilSystemStatusOkMutex.Unlock()
	fake.WaitUntilSystemStatusOkStub = nil
	if fake.waitUntilSystemStatusOkReturnsOnCall == nil {
		fake.waitUntilSystemStatusOkReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSystemStatusOkReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkWithContext(arg1 aws.Context, arg2 *ec2.DescribeInstanceStatusInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilSystemStatusOkWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilSystemStatusOkWithContextReturnsOnCall[len(fake.waitUntilSystemStatusOkWithContextArgsForCall)]
	fake.waitUntilSystemStatusOkWithContextArgsForCall = append(fake.waitUntilSystemStatusOkWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeInstanceStatusInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilSystemStatusOkWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilSystemStatusOkWithContextMutex.Unlock()
	if fake.WaitUntilSystemStatusOkWithContextStub != nil {
		return fake.WaitUntilSystemStatusOkWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilSystemStatusOkWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkWithContextCallCount() int {
	fake.waitUntilSystemStatusOkWithContextMutex.RLock()
	defer fake.waitUntilSystemStatusOkWithContextMutex.RUnlock()
	return len(fake.waitUntilSystemStatusOkWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkWithContextCalls(stub func(aws.Context, *ec2.DescribeInstanceStatusInput, ...request.WaiterOption) error) {
	fake.waitUntilSystemStatusOkWithContextMutex.Lock()
	defer fake.waitUntilSystemStatusOkWithContextMutex.Unlock()
	fake.WaitUntilSystemStatusOkWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeInstanceStatusInput, []request.WaiterOption) {
	fake.waitUntilSystemStatusOkWithContextMutex.RLock()
	defer fake.waitUntilSystemStatusOkWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilSystemStatusOkWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkWithContextReturns(result1 error) {
	fake.waitUntilSystemStatusOkWithContextMutex.Lock()
	defer fake.waitUntilSystemStatusOkWithContextMutex.Unlock()
	fake.WaitUntilSystemStatusOkWithContextStub = nil
	fake.waitUntilSystemStatusOkWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilSystemStatusOkWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilSystemStatusOkWithContextMutex.Lock()
	defer fake.waitUntilSystemStatusOkWithContextMutex.Unlock()
	fake.WaitUntilSystemStatusOkWithContextStub = nil
	if fake.waitUntilSystemStatusOkWithContextReturnsOnCall == nil {
		fake.waitUntilSystemStatusOkWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilSystemStatusOkWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeAvailable(arg1 *ec2.DescribeVolumesInput) error {
	fake.waitUntilVolumeAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilVolumeAvailableReturnsOnCall[len(fake.waitUntilVolumeAvailableArgsForCall)]
	fake.waitUntilVolumeAvailableArgsForCall = append(fake.waitUntilVolumeAvailableArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
	}{arg1})
	fake.recordInvocation("WaitUntilVolumeAvailable", []interface{}{arg1})
	fake.waitUntilVolumeAvailableMutex.Unlock()
	if fake.WaitUntilVolumeAvailableStub != nil {
		return fake.WaitUntilVolumeAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVolumeAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableCallCount() int {
	fake.waitUntilVolumeAvailableMutex.RLock()
	defer fake.waitUntilVolumeAvailableMutex.RUnlock()
	return len(fake.waitUntilVolumeAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableCalls(stub func(*ec2.DescribeVolumesInput) error) {
	fake.waitUntilVolumeAvailableMutex.Lock()
	defer fake.waitUntilVolumeAvailableMutex.Unlock()
	fake.WaitUntilVolumeAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableArgsForCall(i int) *ec2.DescribeVolumesInput {
	fake.waitUntilVolumeAvailableMutex.RLock()
	defer fake.waitUntilVolumeAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilVolumeAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableReturns(result1 error) {
	fake.waitUntilVolumeAvailableMutex.Lock()
	defer fake.waitUntilVolumeAvailableMutex.Unlock()
	fake.WaitUntilVolumeAvailableStub = nil
	fake.waitUntilVolumeAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilVolumeAvailableMutex.Lock()
	defer fake.waitUntilVolumeAvailableMutex.Unlock()
	fake.WaitUntilVolumeAvailableStub = nil
	if fake.waitUntilVolumeAvailableReturnsOnCall == nil {
		fake.waitUntilVolumeAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVolumeAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVolumeAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVolumeAvailableWithContextReturnsOnCall[len(fake.waitUntilVolumeAvailableWithContextArgsForCall)]
	fake.waitUntilVolumeAvailableWithContextArgsForCall = append(fake.waitUntilVolumeAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVolumeAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVolumeAvailableWithContextMutex.Unlock()
	if fake.WaitUntilVolumeAvailableWithContextStub != nil {
		return fake.WaitUntilVolumeAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVolumeAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableWithContextCallCount() int {
	fake.waitUntilVolumeAvailableWithContextMutex.RLock()
	defer fake.waitUntilVolumeAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilVolumeAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error) {
	fake.waitUntilVolumeAvailableWithContextMutex.Lock()
	defer fake.waitUntilVolumeAvailableWithContextMutex.Unlock()
	fake.WaitUntilVolumeAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumesInput, []request.WaiterOption) {
	fake.waitUntilVolumeAvailableWithContextMutex.RLock()
	defer fake.waitUntilVolumeAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVolumeAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableWithContextReturns(result1 error) {
	fake.waitUntilVolumeAvailableWithContextMutex.Lock()
	defer fake.waitUntilVolumeAvailableWithContextMutex.Unlock()
	fake.WaitUntilVolumeAvailableWithContextStub = nil
	fake.waitUntilVolumeAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVolumeAvailableWithContextMutex.Lock()
	defer fake.waitUntilVolumeAvailableWithContextMutex.Unlock()
	fake.WaitUntilVolumeAvailableWithContextStub = nil
	if fake.waitUntilVolumeAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilVolumeAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVolumeAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeDeleted(arg1 *ec2.DescribeVolumesInput) error {
	fake.waitUntilVolumeDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilVolumeDeletedReturnsOnCall[len(fake.waitUntilVolumeDeletedArgsForCall)]
	fake.waitUntilVolumeDeletedArgsForCall = append(fake.waitUntilVolumeDeletedArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
	}{arg1})
	fake.recordInvocation("WaitUntilVolumeDeleted", []interface{}{arg1})
	fake.waitUntilVolumeDeletedMutex.Unlock()
	if fake.WaitUntilVolumeDeletedStub != nil {
		return fake.WaitUntilVolumeDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVolumeDeletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedCallCount() int {
	fake.waitUntilVolumeDeletedMutex.RLock()
	defer fake.waitUntilVolumeDeletedMutex.RUnlock()
	return len(fake.waitUntilVolumeDeletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedCalls(stub func(*ec2.DescribeVolumesInput) error) {
	fake.waitUntilVolumeDeletedMutex.Lock()
	defer fake.waitUntilVolumeDeletedMutex.Unlock()
	fake.WaitUntilVolumeDeletedStub = stub
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedArgsForCall(i int) *ec2.DescribeVolumesInput {
	fake.waitUntilVolumeDeletedMutex.RLock()
	defer fake.waitUntilVolumeDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilVolumeDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedReturns(result1 error) {
	fake.waitUntilVolumeDeletedMutex.Lock()
	defer fake.waitUntilVolumeDeletedMutex.Unlock()
	fake.WaitUntilVolumeDeletedStub = nil
	fake.waitUntilVolumeDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilVolumeDeletedMutex.Lock()
	defer fake.waitUntilVolumeDeletedMutex.Unlock()
	fake.WaitUntilVolumeDeletedStub = nil
	if fake.waitUntilVolumeDeletedReturnsOnCall == nil {
		fake.waitUntilVolumeDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVolumeDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVolumeDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVolumeDeletedWithContextReturnsOnCall[len(fake.waitUntilVolumeDeletedWithContextArgsForCall)]
	fake.waitUntilVolumeDeletedWithContextArgsForCall = append(fake.waitUntilVolumeDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVolumeDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVolumeDeletedWithContextMutex.Unlock()
	if fake.WaitUntilVolumeDeletedWithContextStub != nil {
		return fake.WaitUntilVolumeDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVolumeDeletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedWithContextCallCount() int {
	fake.waitUntilVolumeDeletedWithContextMutex.RLock()
	defer fake.waitUntilVolumeDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilVolumeDeletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error) {
	fake.waitUntilVolumeDeletedWithContextMutex.Lock()
	defer fake.waitUntilVolumeDeletedWithContextMutex.Unlock()
	fake.WaitUntilVolumeDeletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumesInput, []request.WaiterOption) {
	fake.waitUntilVolumeDeletedWithContextMutex.RLock()
	defer fake.waitUntilVolumeDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVolumeDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedWithContextReturns(result1 error) {
	fake.waitUntilVolumeDeletedWithContextMutex.Lock()
	defer fake.waitUntilVolumeDeletedWithContextMutex.Unlock()
	fake.WaitUntilVolumeDeletedWithContextStub = nil
	fake.waitUntilVolumeDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVolumeDeletedWithContextMutex.Lock()
	defer fake.waitUntilVolumeDeletedWithContextMutex.Unlock()
	fake.WaitUntilVolumeDeletedWithContextStub = nil
	if fake.waitUntilVolumeDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilVolumeDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVolumeDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeInUse(arg1 *ec2.DescribeVolumesInput) error {
	fake.waitUntilVolumeInUseMutex.Lock()
	ret, specificReturn := fake.waitUntilVolumeInUseReturnsOnCall[len(fake.waitUntilVolumeInUseArgsForCall)]
	fake.waitUntilVolumeInUseArgsForCall = append(fake.waitUntilVolumeInUseArgsForCall, struct {
		arg1 *ec2.DescribeVolumesInput
	}{arg1})
	fake.recordInvocation("WaitUntilVolumeInUse", []interface{}{arg1})
	fake.waitUntilVolumeInUseMutex.Unlock()
	if fake.WaitUntilVolumeInUseStub != nil {
		return fake.WaitUntilVolumeInUseStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVolumeInUseReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVolumeInUseCallCount() int {
	fake.waitUntilVolumeInUseMutex.RLock()
	defer fake.waitUntilVolumeInUseMutex.RUnlock()
	return len(fake.waitUntilVolumeInUseArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVolumeInUseCalls(stub func(*ec2.DescribeVolumesInput) error) {
	fake.waitUntilVolumeInUseMutex.Lock()
	defer fake.waitUntilVolumeInUseMutex.Unlock()
	fake.WaitUntilVolumeInUseStub = stub
}

func (fake *FakeEC2API) WaitUntilVolumeInUseArgsForCall(i int) *ec2.DescribeVolumesInput {
	fake.waitUntilVolumeInUseMutex.RLock()
	defer fake.waitUntilVolumeInUseMutex.RUnlock()
	argsForCall := fake.waitUntilVolumeInUseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVolumeInUseReturns(result1 error) {
	fake.waitUntilVolumeInUseMutex.Lock()
	defer fake.waitUntilVolumeInUseMutex.Unlock()
	fake.WaitUntilVolumeInUseStub = nil
	fake.waitUntilVolumeInUseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeInUseReturnsOnCall(i int, result1 error) {
	fake.waitUntilVolumeInUseMutex.Lock()
	defer fake.waitUntilVolumeInUseMutex.Unlock()
	fake.WaitUntilVolumeInUseStub = nil
	if fake.waitUntilVolumeInUseReturnsOnCall == nil {
		fake.waitUntilVolumeInUseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVolumeInUseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeInUseWithContext(arg1 aws.Context, arg2 *ec2.DescribeVolumesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVolumeInUseWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVolumeInUseWithContextReturnsOnCall[len(fake.waitUntilVolumeInUseWithContextArgsForCall)]
	fake.waitUntilVolumeInUseWithContextArgsForCall = append(fake.waitUntilVolumeInUseWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVolumesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVolumeInUseWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVolumeInUseWithContextMutex.Unlock()
	if fake.WaitUntilVolumeInUseWithContextStub != nil {
		return fake.WaitUntilVolumeInUseWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVolumeInUseWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVolumeInUseWithContextCallCount() int {
	fake.waitUntilVolumeInUseWithContextMutex.RLock()
	defer fake.waitUntilVolumeInUseWithContextMutex.RUnlock()
	return len(fake.waitUntilVolumeInUseWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVolumeInUseWithContextCalls(stub func(aws.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error) {
	fake.waitUntilVolumeInUseWithContextMutex.Lock()
	defer fake.waitUntilVolumeInUseWithContextMutex.Unlock()
	fake.WaitUntilVolumeInUseWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVolumeInUseWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVolumesInput, []request.WaiterOption) {
	fake.waitUntilVolumeInUseWithContextMutex.RLock()
	defer fake.waitUntilVolumeInUseWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVolumeInUseWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVolumeInUseWithContextReturns(result1 error) {
	fake.waitUntilVolumeInUseWithContextMutex.Lock()
	defer fake.waitUntilVolumeInUseWithContextMutex.Unlock()
	fake.WaitUntilVolumeInUseWithContextStub = nil
	fake.waitUntilVolumeInUseWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVolumeInUseWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVolumeInUseWithContextMutex.Lock()
	defer fake.waitUntilVolumeInUseWithContextMutex.Unlock()
	fake.WaitUntilVolumeInUseWithContextStub = nil
	if fake.waitUntilVolumeInUseWithContextReturnsOnCall == nil {
		fake.waitUntilVolumeInUseWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVolumeInUseWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcAvailable(arg1 *ec2.DescribeVpcsInput) error {
	fake.waitUntilVpcAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcAvailableReturnsOnCall[len(fake.waitUntilVpcAvailableArgsForCall)]
	fake.waitUntilVpcAvailableArgsForCall = append(fake.waitUntilVpcAvailableArgsForCall, struct {
		arg1 *ec2.DescribeVpcsInput
	}{arg1})
	fake.recordInvocation("WaitUntilVpcAvailable", []interface{}{arg1})
	fake.waitUntilVpcAvailableMutex.Unlock()
	if fake.WaitUntilVpcAvailableStub != nil {
		return fake.WaitUntilVpcAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcAvailableCallCount() int {
	fake.waitUntilVpcAvailableMutex.RLock()
	defer fake.waitUntilVpcAvailableMutex.RUnlock()
	return len(fake.waitUntilVpcAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcAvailableCalls(stub func(*ec2.DescribeVpcsInput) error) {
	fake.waitUntilVpcAvailableMutex.Lock()
	defer fake.waitUntilVpcAvailableMutex.Unlock()
	fake.WaitUntilVpcAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcAvailableArgsForCall(i int) *ec2.DescribeVpcsInput {
	fake.waitUntilVpcAvailableMutex.RLock()
	defer fake.waitUntilVpcAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilVpcAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVpcAvailableReturns(result1 error) {
	fake.waitUntilVpcAvailableMutex.Lock()
	defer fake.waitUntilVpcAvailableMutex.Unlock()
	fake.WaitUntilVpcAvailableStub = nil
	fake.waitUntilVpcAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcAvailableMutex.Lock()
	defer fake.waitUntilVpcAvailableMutex.Unlock()
	fake.WaitUntilVpcAvailableStub = nil
	if fake.waitUntilVpcAvailableReturnsOnCall == nil {
		fake.waitUntilVpcAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVpcAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcAvailableWithContextReturnsOnCall[len(fake.waitUntilVpcAvailableWithContextArgsForCall)]
	fake.waitUntilVpcAvailableWithContextArgsForCall = append(fake.waitUntilVpcAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVpcAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVpcAvailableWithContextMutex.Unlock()
	if fake.WaitUntilVpcAvailableWithContextStub != nil {
		return fake.WaitUntilVpcAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcAvailableWithContextCallCount() int {
	fake.waitUntilVpcAvailableWithContextMutex.RLock()
	defer fake.waitUntilVpcAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilVpcAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcsInput, ...request.WaiterOption) error) {
	fake.waitUntilVpcAvailableWithContextMutex.Lock()
	defer fake.waitUntilVpcAvailableWithContextMutex.Unlock()
	fake.WaitUntilVpcAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcsInput, []request.WaiterOption) {
	fake.waitUntilVpcAvailableWithContextMutex.RLock()
	defer fake.waitUntilVpcAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVpcAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVpcAvailableWithContextReturns(result1 error) {
	fake.waitUntilVpcAvailableWithContextMutex.Lock()
	defer fake.waitUntilVpcAvailableWithContextMutex.Unlock()
	fake.WaitUntilVpcAvailableWithContextStub = nil
	fake.waitUntilVpcAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcAvailableWithContextMutex.Lock()
	defer fake.waitUntilVpcAvailableWithContextMutex.Unlock()
	fake.WaitUntilVpcAvailableWithContextStub = nil
	if fake.waitUntilVpcAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilVpcAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcExists(arg1 *ec2.DescribeVpcsInput) error {
	fake.waitUntilVpcExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcExistsReturnsOnCall[len(fake.waitUntilVpcExistsArgsForCall)]
	fake.waitUntilVpcExistsArgsForCall = append(fake.waitUntilVpcExistsArgsForCall, struct {
		arg1 *ec2.DescribeVpcsInput
	}{arg1})
	fake.recordInvocation("WaitUntilVpcExists", []interface{}{arg1})
	fake.waitUntilVpcExistsMutex.Unlock()
	if fake.WaitUntilVpcExistsStub != nil {
		return fake.WaitUntilVpcExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcExistsReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcExistsCallCount() int {
	fake.waitUntilVpcExistsMutex.RLock()
	defer fake.waitUntilVpcExistsMutex.RUnlock()
	return len(fake.waitUntilVpcExistsArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcExistsCalls(stub func(*ec2.DescribeVpcsInput) error) {
	fake.waitUntilVpcExistsMutex.Lock()
	defer fake.waitUntilVpcExistsMutex.Unlock()
	fake.WaitUntilVpcExistsStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcExistsArgsForCall(i int) *ec2.DescribeVpcsInput {
	fake.waitUntilVpcExistsMutex.RLock()
	defer fake.waitUntilVpcExistsMutex.RUnlock()
	argsForCall := fake.waitUntilVpcExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVpcExistsReturns(result1 error) {
	fake.waitUntilVpcExistsMutex.Lock()
	defer fake.waitUntilVpcExistsMutex.Unlock()
	fake.WaitUntilVpcExistsStub = nil
	fake.waitUntilVpcExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcExistsMutex.Lock()
	defer fake.waitUntilVpcExistsMutex.Unlock()
	fake.WaitUntilVpcExistsStub = nil
	if fake.waitUntilVpcExistsReturnsOnCall == nil {
		fake.waitUntilVpcExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcExistsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVpcExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcExistsWithContextReturnsOnCall[len(fake.waitUntilVpcExistsWithContextArgsForCall)]
	fake.waitUntilVpcExistsWithContextArgsForCall = append(fake.waitUntilVpcExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVpcExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVpcExistsWithContextMutex.Unlock()
	if fake.WaitUntilVpcExistsWithContextStub != nil {
		return fake.WaitUntilVpcExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcExistsWithContextCallCount() int {
	fake.waitUntilVpcExistsWithContextMutex.RLock()
	defer fake.waitUntilVpcExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilVpcExistsWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcExistsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcsInput, ...request.WaiterOption) error) {
	fake.waitUntilVpcExistsWithContextMutex.Lock()
	defer fake.waitUntilVpcExistsWithContextMutex.Unlock()
	fake.WaitUntilVpcExistsWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcExistsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcsInput, []request.WaiterOption) {
	fake.waitUntilVpcExistsWithContextMutex.RLock()
	defer fake.waitUntilVpcExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVpcExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVpcExistsWithContextReturns(result1 error) {
	fake.waitUntilVpcExistsWithContextMutex.Lock()
	defer fake.waitUntilVpcExistsWithContextMutex.Unlock()
	fake.WaitUntilVpcExistsWithContextStub = nil
	fake.waitUntilVpcExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcExistsWithContextMutex.Lock()
	defer fake.waitUntilVpcExistsWithContextMutex.Unlock()
	fake.WaitUntilVpcExistsWithContextStub = nil
	if fake.waitUntilVpcExistsWithContextReturnsOnCall == nil {
		fake.waitUntilVpcExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeleted(arg1 *ec2.DescribeVpcPeeringConnectionsInput) error {
	fake.waitUntilVpcPeeringConnectionDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcPeeringConnectionDeletedReturnsOnCall[len(fake.waitUntilVpcPeeringConnectionDeletedArgsForCall)]
	fake.waitUntilVpcPeeringConnectionDeletedArgsForCall = append(fake.waitUntilVpcPeeringConnectionDeletedArgsForCall, struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}{arg1})
	fake.recordInvocation("WaitUntilVpcPeeringConnectionDeleted", []interface{}{arg1})
	fake.waitUntilVpcPeeringConnectionDeletedMutex.Unlock()
	if fake.WaitUntilVpcPeeringConnectionDeletedStub != nil {
		return fake.WaitUntilVpcPeeringConnectionDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcPeeringConnectionDeletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedCallCount() int {
	fake.waitUntilVpcPeeringConnectionDeletedMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionDeletedMutex.RUnlock()
	return len(fake.waitUntilVpcPeeringConnectionDeletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedCalls(stub func(*ec2.DescribeVpcPeeringConnectionsInput) error) {
	fake.waitUntilVpcPeeringConnectionDeletedMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionDeletedMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionDeletedStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedArgsForCall(i int) *ec2.DescribeVpcPeeringConnectionsInput {
	fake.waitUntilVpcPeeringConnectionDeletedMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilVpcPeeringConnectionDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedReturns(result1 error) {
	fake.waitUntilVpcPeeringConnectionDeletedMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionDeletedMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionDeletedStub = nil
	fake.waitUntilVpcPeeringConnectionDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcPeeringConnectionDeletedMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionDeletedMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionDeletedStub = nil
	if fake.waitUntilVpcPeeringConnectionDeletedReturnsOnCall == nil {
		fake.waitUntilVpcPeeringConnectionDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcPeeringConnectionDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcPeeringConnectionsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcPeeringConnectionDeletedWithContextReturnsOnCall[len(fake.waitUntilVpcPeeringConnectionDeletedWithContextArgsForCall)]
	fake.waitUntilVpcPeeringConnectionDeletedWithContextArgsForCall = append(fake.waitUntilVpcPeeringConnectionDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcPeeringConnectionsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVpcPeeringConnectionDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Unlock()
	if fake.WaitUntilVpcPeeringConnectionDeletedWithContextStub != nil {
		return fake.WaitUntilVpcPeeringConnectionDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcPeeringConnectionDeletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedWithContextCallCount() int {
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilVpcPeeringConnectionDeletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.WaiterOption) error) {
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionDeletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, []request.WaiterOption) {
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVpcPeeringConnectionDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedWithContextReturns(result1 error) {
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionDeletedWithContextStub = nil
	fake.waitUntilVpcPeeringConnectionDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionDeletedWithContextStub = nil
	if fake.waitUntilVpcPeeringConnectionDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilVpcPeeringConnectionDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcPeeringConnectionDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExists(arg1 *ec2.DescribeVpcPeeringConnectionsInput) error {
	fake.waitUntilVpcPeeringConnectionExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcPeeringConnectionExistsReturnsOnCall[len(fake.waitUntilVpcPeeringConnectionExistsArgsForCall)]
	fake.waitUntilVpcPeeringConnectionExistsArgsForCall = append(fake.waitUntilVpcPeeringConnectionExistsArgsForCall, struct {
		arg1 *ec2.DescribeVpcPeeringConnectionsInput
	}{arg1})
	fake.recordInvocation("WaitUntilVpcPeeringConnectionExists", []interface{}{arg1})
	fake.waitUntilVpcPeeringConnectionExistsMutex.Unlock()
	if fake.WaitUntilVpcPeeringConnectionExistsStub != nil {
		return fake.WaitUntilVpcPeeringConnectionExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcPeeringConnectionExistsReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsCallCount() int {
	fake.waitUntilVpcPeeringConnectionExistsMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionExistsMutex.RUnlock()
	return len(fake.waitUntilVpcPeeringConnectionExistsArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsCalls(stub func(*ec2.DescribeVpcPeeringConnectionsInput) error) {
	fake.waitUntilVpcPeeringConnectionExistsMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionExistsMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionExistsStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsArgsForCall(i int) *ec2.DescribeVpcPeeringConnectionsInput {
	fake.waitUntilVpcPeeringConnectionExistsMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionExistsMutex.RUnlock()
	argsForCall := fake.waitUntilVpcPeeringConnectionExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsReturns(result1 error) {
	fake.waitUntilVpcPeeringConnectionExistsMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionExistsMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionExistsStub = nil
	fake.waitUntilVpcPeeringConnectionExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcPeeringConnectionExistsMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionExistsMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionExistsStub = nil
	if fake.waitUntilVpcPeeringConnectionExistsReturnsOnCall == nil {
		fake.waitUntilVpcPeeringConnectionExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcPeeringConnectionExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpcPeeringConnectionsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVpcPeeringConnectionExistsWithContextReturnsOnCall[len(fake.waitUntilVpcPeeringConnectionExistsWithContextArgsForCall)]
	fake.waitUntilVpcPeeringConnectionExistsWithContextArgsForCall = append(fake.waitUntilVpcPeeringConnectionExistsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpcPeeringConnectionsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVpcPeeringConnectionExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Unlock()
	if fake.WaitUntilVpcPeeringConnectionExistsWithContextStub != nil {
		return fake.WaitUntilVpcPeeringConnectionExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpcPeeringConnectionExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsWithContextCallCount() int {
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilVpcPeeringConnectionExistsWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsWithContextCalls(stub func(aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.WaiterOption) error) {
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionExistsWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpcPeeringConnectionsInput, []request.WaiterOption) {
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVpcPeeringConnectionExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsWithContextReturns(result1 error) {
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionExistsWithContextStub = nil
	fake.waitUntilVpcPeeringConnectionExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpcPeeringConnectionExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Lock()
	defer fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.Unlock()
	fake.WaitUntilVpcPeeringConnectionExistsWithContextStub = nil
	if fake.waitUntilVpcPeeringConnectionExistsWithContextReturnsOnCall == nil {
		fake.waitUntilVpcPeeringConnectionExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpcPeeringConnectionExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailable(arg1 *ec2.DescribeVpnConnectionsInput) error {
	fake.waitUntilVpnConnectionAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilVpnConnectionAvailableReturnsOnCall[len(fake.waitUntilVpnConnectionAvailableArgsForCall)]
	fake.waitUntilVpnConnectionAvailableArgsForCall = append(fake.waitUntilVpnConnectionAvailableArgsForCall, struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("WaitUntilVpnConnectionAvailable", []interface{}{arg1})
	fake.waitUntilVpnConnectionAvailableMutex.Unlock()
	if fake.WaitUntilVpnConnectionAvailableStub != nil {
		return fake.WaitUntilVpnConnectionAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpnConnectionAvailableReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableCallCount() int {
	fake.waitUntilVpnConnectionAvailableMutex.RLock()
	defer fake.waitUntilVpnConnectionAvailableMutex.RUnlock()
	return len(fake.waitUntilVpnConnectionAvailableArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableCalls(stub func(*ec2.DescribeVpnConnectionsInput) error) {
	fake.waitUntilVpnConnectionAvailableMutex.Lock()
	defer fake.waitUntilVpnConnectionAvailableMutex.Unlock()
	fake.WaitUntilVpnConnectionAvailableStub = stub
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableArgsForCall(i int) *ec2.DescribeVpnConnectionsInput {
	fake.waitUntilVpnConnectionAvailableMutex.RLock()
	defer fake.waitUntilVpnConnectionAvailableMutex.RUnlock()
	argsForCall := fake.waitUntilVpnConnectionAvailableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableReturns(result1 error) {
	fake.waitUntilVpnConnectionAvailableMutex.Lock()
	defer fake.waitUntilVpnConnectionAvailableMutex.Unlock()
	fake.WaitUntilVpnConnectionAvailableStub = nil
	fake.waitUntilVpnConnectionAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpnConnectionAvailableMutex.Lock()
	defer fake.waitUntilVpnConnectionAvailableMutex.Unlock()
	fake.WaitUntilVpnConnectionAvailableStub = nil
	if fake.waitUntilVpnConnectionAvailableReturnsOnCall == nil {
		fake.waitUntilVpnConnectionAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpnConnectionAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpnConnectionsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVpnConnectionAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVpnConnectionAvailableWithContextReturnsOnCall[len(fake.waitUntilVpnConnectionAvailableWithContextArgsForCall)]
	fake.waitUntilVpnConnectionAvailableWithContextArgsForCall = append(fake.waitUntilVpnConnectionAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnConnectionsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVpnConnectionAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVpnConnectionAvailableWithContextMutex.Unlock()
	if fake.WaitUntilVpnConnectionAvailableWithContextStub != nil {
		return fake.WaitUntilVpnConnectionAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpnConnectionAvailableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableWithContextCallCount() int {
	fake.waitUntilVpnConnectionAvailableWithContextMutex.RLock()
	defer fake.waitUntilVpnConnectionAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilVpnConnectionAvailableWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableWithContextCalls(stub func(aws.Context, *ec2.DescribeVpnConnectionsInput, ...request.WaiterOption) error) {
	fake.waitUntilVpnConnectionAvailableWithContextMutex.Lock()
	defer fake.waitUntilVpnConnectionAvailableWithContextMutex.Unlock()
	fake.WaitUntilVpnConnectionAvailableWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpnConnectionsInput, []request.WaiterOption) {
	fake.waitUntilVpnConnectionAvailableWithContextMutex.RLock()
	defer fake.waitUntilVpnConnectionAvailableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVpnConnectionAvailableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableWithContextReturns(result1 error) {
	fake.waitUntilVpnConnectionAvailableWithContextMutex.Lock()
	defer fake.waitUntilVpnConnectionAvailableWithContextMutex.Unlock()
	fake.WaitUntilVpnConnectionAvailableWithContextStub = nil
	fake.waitUntilVpnConnectionAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpnConnectionAvailableWithContextMutex.Lock()
	defer fake.waitUntilVpnConnectionAvailableWithContextMutex.Unlock()
	fake.WaitUntilVpnConnectionAvailableWithContextStub = nil
	if fake.waitUntilVpnConnectionAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilVpnConnectionAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpnConnectionAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeleted(arg1 *ec2.DescribeVpnConnectionsInput) error {
	fake.waitUntilVpnConnectionDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilVpnConnectionDeletedReturnsOnCall[len(fake.waitUntilVpnConnectionDeletedArgsForCall)]
	fake.waitUntilVpnConnectionDeletedArgsForCall = append(fake.waitUntilVpnConnectionDeletedArgsForCall, struct {
		arg1 *ec2.DescribeVpnConnectionsInput
	}{arg1})
	fake.recordInvocation("WaitUntilVpnConnectionDeleted", []interface{}{arg1})
	fake.waitUntilVpnConnectionDeletedMutex.Unlock()
	if fake.WaitUntilVpnConnectionDeletedStub != nil {
		return fake.WaitUntilVpnConnectionDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpnConnectionDeletedReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedCallCount() int {
	fake.waitUntilVpnConnectionDeletedMutex.RLock()
	defer fake.waitUntilVpnConnectionDeletedMutex.RUnlock()
	return len(fake.waitUntilVpnConnectionDeletedArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedCalls(stub func(*ec2.DescribeVpnConnectionsInput) error) {
	fake.waitUntilVpnConnectionDeletedMutex.Lock()
	defer fake.waitUntilVpnConnectionDeletedMutex.Unlock()
	fake.WaitUntilVpnConnectionDeletedStub = stub
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedArgsForCall(i int) *ec2.DescribeVpnConnectionsInput {
	fake.waitUntilVpnConnectionDeletedMutex.RLock()
	defer fake.waitUntilVpnConnectionDeletedMutex.RUnlock()
	argsForCall := fake.waitUntilVpnConnectionDeletedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedReturns(result1 error) {
	fake.waitUntilVpnConnectionDeletedMutex.Lock()
	defer fake.waitUntilVpnConnectionDeletedMutex.Unlock()
	fake.WaitUntilVpnConnectionDeletedStub = nil
	fake.waitUntilVpnConnectionDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpnConnectionDeletedMutex.Lock()
	defer fake.waitUntilVpnConnectionDeletedMutex.Unlock()
	fake.WaitUntilVpnConnectionDeletedStub = nil
	if fake.waitUntilVpnConnectionDeletedReturnsOnCall == nil {
		fake.waitUntilVpnConnectionDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpnConnectionDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedWithContext(arg1 aws.Context, arg2 *ec2.DescribeVpnConnectionsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilVpnConnectionDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilVpnConnectionDeletedWithContextReturnsOnCall[len(fake.waitUntilVpnConnectionDeletedWithContextArgsForCall)]
	fake.waitUntilVpnConnectionDeletedWithContextArgsForCall = append(fake.waitUntilVpnConnectionDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.DescribeVpnConnectionsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilVpnConnectionDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilVpnConnectionDeletedWithContextMutex.Unlock()
	if fake.WaitUntilVpnConnectionDeletedWithContextStub != nil {
		return fake.WaitUntilVpnConnectionDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilVpnConnectionDeletedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedWithContextCallCount() int {
	fake.waitUntilVpnConnectionDeletedWithContextMutex.RLock()
	defer fake.waitUntilVpnConnectionDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilVpnConnectionDeletedWithContextArgsForCall)
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedWithContextCalls(stub func(aws.Context, *ec2.DescribeVpnConnectionsInput, ...request.WaiterOption) error) {
	fake.waitUntilVpnConnectionDeletedWithContextMutex.Lock()
	defer fake.waitUntilVpnConnectionDeletedWithContextMutex.Unlock()
	fake.WaitUntilVpnConnectionDeletedWithContextStub = stub
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedWithContextArgsForCall(i int) (aws.Context, *ec2.DescribeVpnConnectionsInput, []request.WaiterOption) {
	fake.waitUntilVpnConnectionDeletedWithContextMutex.RLock()
	defer fake.waitUntilVpnConnectionDeletedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilVpnConnectionDeletedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedWithContextReturns(result1 error) {
	fake.waitUntilVpnConnectionDeletedWithContextMutex.Lock()
	defer fake.waitUntilVpnConnectionDeletedWithContextMutex.Unlock()
	fake.WaitUntilVpnConnectionDeletedWithContextStub = nil
	fake.waitUntilVpnConnectionDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WaitUntilVpnConnectionDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilVpnConnectionDeletedWithContextMutex.Lock()
	defer fake.waitUntilVpnConnectionDeletedWithContextMutex.Unlock()
	fake.WaitUntilVpnConnectionDeletedWithContextStub = nil
	if fake.waitUntilVpnConnectionDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilVpnConnectionDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilVpnConnectionDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEC2API) WithdrawByoipCidr(arg1 *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error) {
	fake.withdrawByoipCidrMutex.Lock()
	ret, specificReturn := fake.withdrawByoipCidrReturnsOnCall[len(fake.withdrawByoipCidrArgsForCall)]
	fake.withdrawByoipCidrArgsForCall = append(fake.withdrawByoipCidrArgsForCall, struct {
		arg1 *ec2.WithdrawByoipCidrInput
	}{arg1})
	fake.recordInvocation("WithdrawByoipCidr", []interface{}{arg1})
	fake.withdrawByoipCidrMutex.Unlock()
	if fake.WithdrawByoipCidrStub != nil {
		return fake.WithdrawByoipCidrStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.withdrawByoipCidrReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) WithdrawByoipCidrCallCount() int {
	fake.withdrawByoipCidrMutex.RLock()
	defer fake.withdrawByoipCidrMutex.RUnlock()
	return len(fake.withdrawByoipCidrArgsForCall)
}

func (fake *FakeEC2API) WithdrawByoipCidrCalls(stub func(*ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error)) {
	fake.withdrawByoipCidrMutex.Lock()
	defer fake.withdrawByoipCidrMutex.Unlock()
	fake.WithdrawByoipCidrStub = stub
}

func (fake *FakeEC2API) WithdrawByoipCidrArgsForCall(i int) *ec2.WithdrawByoipCidrInput {
	fake.withdrawByoipCidrMutex.RLock()
	defer fake.withdrawByoipCidrMutex.RUnlock()
	argsForCall := fake.withdrawByoipCidrArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WithdrawByoipCidrReturns(result1 *ec2.WithdrawByoipCidrOutput, result2 error) {
	fake.withdrawByoipCidrMutex.Lock()
	defer fake.withdrawByoipCidrMutex.Unlock()
	fake.WithdrawByoipCidrStub = nil
	fake.withdrawByoipCidrReturns = struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) WithdrawByoipCidrReturnsOnCall(i int, result1 *ec2.WithdrawByoipCidrOutput, result2 error) {
	fake.withdrawByoipCidrMutex.Lock()
	defer fake.withdrawByoipCidrMutex.Unlock()
	fake.WithdrawByoipCidrStub = nil
	if fake.withdrawByoipCidrReturnsOnCall == nil {
		fake.withdrawByoipCidrReturnsOnCall = make(map[int]struct {
			result1 *ec2.WithdrawByoipCidrOutput
			result2 error
		})
	}
	fake.withdrawByoipCidrReturnsOnCall[i] = struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) WithdrawByoipCidrRequest(arg1 *ec2.WithdrawByoipCidrInput) (*request.Request, *ec2.WithdrawByoipCidrOutput) {
	fake.withdrawByoipCidrRequestMutex.Lock()
	ret, specificReturn := fake.withdrawByoipCidrRequestReturnsOnCall[len(fake.withdrawByoipCidrRequestArgsForCall)]
	fake.withdrawByoipCidrRequestArgsForCall = append(fake.withdrawByoipCidrRequestArgsForCall, struct {
		arg1 *ec2.WithdrawByoipCidrInput
	}{arg1})
	fake.recordInvocation("WithdrawByoipCidrRequest", []interface{}{arg1})
	fake.withdrawByoipCidrRequestMutex.Unlock()
	if fake.WithdrawByoipCidrRequestStub != nil {
		return fake.WithdrawByoipCidrRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.withdrawByoipCidrRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) WithdrawByoipCidrRequestCallCount() int {
	fake.withdrawByoipCidrRequestMutex.RLock()
	defer fake.withdrawByoipCidrRequestMutex.RUnlock()
	return len(fake.withdrawByoipCidrRequestArgsForCall)
}

func (fake *FakeEC2API) WithdrawByoipCidrRequestCalls(stub func(*ec2.WithdrawByoipCidrInput) (*request.Request, *ec2.WithdrawByoipCidrOutput)) {
	fake.withdrawByoipCidrRequestMutex.Lock()
	defer fake.withdrawByoipCidrRequestMutex.Unlock()
	fake.WithdrawByoipCidrRequestStub = stub
}

func (fake *FakeEC2API) WithdrawByoipCidrRequestArgsForCall(i int) *ec2.WithdrawByoipCidrInput {
	fake.withdrawByoipCidrRequestMutex.RLock()
	defer fake.withdrawByoipCidrRequestMutex.RUnlock()
	argsForCall := fake.withdrawByoipCidrRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEC2API) WithdrawByoipCidrRequestReturns(result1 *request.Request, result2 *ec2.WithdrawByoipCidrOutput) {
	fake.withdrawByoipCidrRequestMutex.Lock()
	defer fake.withdrawByoipCidrRequestMutex.Unlock()
	fake.WithdrawByoipCidrRequestStub = nil
	fake.withdrawByoipCidrRequestReturns = struct {
		result1 *request.Request
		result2 *ec2.WithdrawByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) WithdrawByoipCidrRequestReturnsOnCall(i int, result1 *request.Request, result2 *ec2.WithdrawByoipCidrOutput) {
	fake.withdrawByoipCidrRequestMutex.Lock()
	defer fake.withdrawByoipCidrRequestMutex.Unlock()
	fake.WithdrawByoipCidrRequestStub = nil
	if fake.withdrawByoipCidrRequestReturnsOnCall == nil {
		fake.withdrawByoipCidrRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ec2.WithdrawByoipCidrOutput
		})
	}
	fake.withdrawByoipCidrRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ec2.WithdrawByoipCidrOutput
	}{result1, result2}
}

func (fake *FakeEC2API) WithdrawByoipCidrWithContext(arg1 aws.Context, arg2 *ec2.WithdrawByoipCidrInput, arg3 ...request.Option) (*ec2.WithdrawByoipCidrOutput, error) {
	fake.withdrawByoipCidrWithContextMutex.Lock()
	ret, specificReturn := fake.withdrawByoipCidrWithContextReturnsOnCall[len(fake.withdrawByoipCidrWithContextArgsForCall)]
	fake.withdrawByoipCidrWithContextArgsForCall = append(fake.withdrawByoipCidrWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *ec2.WithdrawByoipCidrInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("WithdrawByoipCidrWithContext", []interface{}{arg1, arg2, arg3})
	fake.withdrawByoipCidrWithContextMutex.Unlock()
	if fake.WithdrawByoipCidrWithContextStub != nil {
		return fake.WithdrawByoipCidrWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.withdrawByoipCidrWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) WithdrawByoipCidrWithContextCallCount() int {
	fake.withdrawByoipCidrWithContextMutex.RLock()
	defer fake.withdrawByoipCidrWithContextMutex.RUnlock()
	return len(fake.withdrawByoipCidrWithContextArgsForCall)
}

func (fake *FakeEC2API) WithdrawByoipCidrWithContextCalls(stub func(aws.Context, *ec2.WithdrawByoipCidrInput, ...request.Option) (*ec2.WithdrawByoipCidrOutput, error)) {
	fake.withdrawByoipCidrWithContextMutex.Lock()
	defer fake.withdrawByoipCidrWithContextMutex.Unlock()
	fake.WithdrawByoipCidrWithContextStub = stub
}

func (fake *FakeEC2API) WithdrawByoipCidrWithContextArgsForCall(i int) (aws.Context, *ec2.WithdrawByoipCidrInput, []request.Option) {
	fake.withdrawByoipCidrWithContextMutex.RLock()
	defer fake.withdrawByoipCidrWithContextMutex.RUnlock()
	argsForCall := fake.withdrawByoipCidrWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) WithdrawByoipCidrWithContextReturns(result1 *ec2.WithdrawByoipCidrOutput, result2 error) {
	fake.withdrawByoipCidrWithContextMutex.Lock()
	defer fake.withdrawByoipCidrWithContextMutex.Unlock()
	fake.WithdrawByoipCidrWithContextStub = nil
	fake.withdrawByoipCidrWithContextReturns = struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) WithdrawByoipCidrWithContextReturnsOnCall(i int, result1 *ec2.WithdrawByoipCidrOutput, result2 error) {
	fake.withdrawByoipCidrWithContextMutex.Lock()
	defer fake.withdrawByoipCidrWithContextMutex.Unlock()
	fake.WithdrawByoipCidrWithContextStub = nil
	if fake.withdrawByoipCidrWithContextReturnsOnCall == nil {
		fake.withdrawByoipCidrWithContextReturnsOnCall = make(map[int]struct {
			result1 *ec2.WithdrawByoipCidrOutput
			result2 error
		})
	}
	fake.withdrawByoipCidrWithContextReturnsOnCall[i] = struct {
		result1 *ec2.WithdrawByoipCidrOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acceptReservedInstancesExchangeQuoteMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteMutex.RUnlock()
	fake.acceptReservedInstancesExchangeQuoteRequestMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteRequestMutex.RUnlock()
	fake.acceptReservedInstancesExchangeQuoteWithContextMutex.RLock()
	defer fake.acceptReservedInstancesExchangeQuoteWithContextMutex.RUnlock()
	fake.acceptTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.acceptTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	fake.acceptTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.acceptTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	fake.acceptVpcEndpointConnectionsMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsMutex.RUnlock()
	fake.acceptVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsRequestMutex.RUnlock()
	fake.acceptVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.acceptVpcEndpointConnectionsWithContextMutex.RUnlock()
	fake.acceptVpcPeeringConnectionMutex.RLock()
	defer fake.acceptVpcPeeringConnectionMutex.RUnlock()
	fake.acceptVpcPeeringConnectionRequestMutex.RLock()
	defer fake.acceptVpcPeeringConnectionRequestMutex.RUnlock()
	fake.acceptVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.acceptVpcPeeringConnectionWithContextMutex.RUnlock()
	fake.advertiseByoipCidrMutex.RLock()
	defer fake.advertiseByoipCidrMutex.RUnlock()
	fake.advertiseByoipCidrRequestMutex.RLock()
	defer fake.advertiseByoipCidrRequestMutex.RUnlock()
	fake.advertiseByoipCidrWithContextMutex.RLock()
	defer fake.advertiseByoipCidrWithContextMutex.RUnlock()
	fake.allocateAddressMutex.RLock()
	defer fake.allocateAddressMutex.RUnlock()
	fake.allocateAddressRequestMutex.RLock()
	defer fake.allocateAddressRequestMutex.RUnlock()
	fake.allocateAddressWithContextMutex.RLock()
	defer fake.allocateAddressWithContextMutex.RUnlock()
	fake.allocateHostsMutex.RLock()
	defer fake.allocateHostsMutex.RUnlock()
	fake.allocateHostsRequestMutex.RLock()
	defer fake.allocateHostsRequestMutex.RUnlock()
	fake.allocateHostsWithContextMutex.RLock()
	defer fake.allocateHostsWithContextMutex.RUnlock()
	fake.applySecurityGroupsToClientVpnTargetNetworkMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkMutex.RUnlock()
	fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkRequestMutex.RUnlock()
	fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.applySecurityGroupsToClientVpnTargetNetworkWithContextMutex.RUnlock()
	fake.assignIpv6AddressesMutex.RLock()
	defer fake.assignIpv6AddressesMutex.RUnlock()
	fake.assignIpv6AddressesRequestMutex.RLock()
	defer fake.assignIpv6AddressesRequestMutex.RUnlock()
	fake.assignIpv6AddressesWithContextMutex.RLock()
	defer fake.assignIpv6AddressesWithContextMutex.RUnlock()
	fake.assignPrivateIpAddressesMutex.RLock()
	defer fake.assignPrivateIpAddressesMutex.RUnlock()
	fake.assignPrivateIpAddressesRequestMutex.RLock()
	defer fake.assignPrivateIpAddressesRequestMutex.RUnlock()
	fake.assignPrivateIpAddressesWithContextMutex.RLock()
	defer fake.assignPrivateIpAddressesWithContextMutex.RUnlock()
	fake.associateAddressMutex.RLock()
	defer fake.associateAddressMutex.RUnlock()
	fake.associateAddressRequestMutex.RLock()
	defer fake.associateAddressRequestMutex.RUnlock()
	fake.associateAddressWithContextMutex.RLock()
	defer fake.associateAddressWithContextMutex.RUnlock()
	fake.associateClientVpnTargetNetworkMutex.RLock()
	defer fake.associateClientVpnTargetNetworkMutex.RUnlock()
	fake.associateClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.associateClientVpnTargetNetworkRequestMutex.RUnlock()
	fake.associateClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.associateClientVpnTargetNetworkWithContextMutex.RUnlock()
	fake.associateDhcpOptionsMutex.RLock()
	defer fake.associateDhcpOptionsMutex.RUnlock()
	fake.associateDhcpOptionsRequestMutex.RLock()
	defer fake.associateDhcpOptionsRequestMutex.RUnlock()
	fake.associateDhcpOptionsWithContextMutex.RLock()
	defer fake.associateDhcpOptionsWithContextMutex.RUnlock()
	fake.associateIamInstanceProfileMutex.RLock()
	defer fake.associateIamInstanceProfileMutex.RUnlock()
	fake.associateIamInstanceProfileRequestMutex.RLock()
	defer fake.associateIamInstanceProfileRequestMutex.RUnlock()
	fake.associateIamInstanceProfileWithContextMutex.RLock()
	defer fake.associateIamInstanceProfileWithContextMutex.RUnlock()
	fake.associateRouteTableMutex.RLock()
	defer fake.associateRouteTableMutex.RUnlock()
	fake.associateRouteTableRequestMutex.RLock()
	defer fake.associateRouteTableRequestMutex.RUnlock()
	fake.associateRouteTableWithContextMutex.RLock()
	defer fake.associateRouteTableWithContextMutex.RUnlock()
	fake.associateSubnetCidrBlockMutex.RLock()
	defer fake.associateSubnetCidrBlockMutex.RUnlock()
	fake.associateSubnetCidrBlockRequestMutex.RLock()
	defer fake.associateSubnetCidrBlockRequestMutex.RUnlock()
	fake.associateSubnetCidrBlockWithContextMutex.RLock()
	defer fake.associateSubnetCidrBlockWithContextMutex.RUnlock()
	fake.associateTransitGatewayRouteTableMutex.RLock()
	defer fake.associateTransitGatewayRouteTableMutex.RUnlock()
	fake.associateTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.associateTransitGatewayRouteTableRequestMutex.RUnlock()
	fake.associateTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.associateTransitGatewayRouteTableWithContextMutex.RUnlock()
	fake.associateVpcCidrBlockMutex.RLock()
	defer fake.associateVpcCidrBlockMutex.RUnlock()
	fake.associateVpcCidrBlockRequestMutex.RLock()
	defer fake.associateVpcCidrBlockRequestMutex.RUnlock()
	fake.associateVpcCidrBlockWithContextMutex.RLock()
	defer fake.associateVpcCidrBlockWithContextMutex.RUnlock()
	fake.attachClassicLinkVpcMutex.RLock()
	defer fake.attachClassicLinkVpcMutex.RUnlock()
	fake.attachClassicLinkVpcRequestMutex.RLock()
	defer fake.attachClassicLinkVpcRequestMutex.RUnlock()
	fake.attachClassicLinkVpcWithContextMutex.RLock()
	defer fake.attachClassicLinkVpcWithContextMutex.RUnlock()
	fake.attachInternetGatewayMutex.RLock()
	defer fake.attachInternetGatewayMutex.RUnlock()
	fake.attachInternetGatewayRequestMutex.RLock()
	defer fake.attachInternetGatewayRequestMutex.RUnlock()
	fake.attachInternetGatewayWithContextMutex.RLock()
	defer fake.attachInternetGatewayWithContextMutex.RUnlock()
	fake.attachNetworkInterfaceMutex.RLock()
	defer fake.attachNetworkInterfaceMutex.RUnlock()
	fake.attachNetworkInterfaceRequestMutex.RLock()
	defer fake.attachNetworkInterfaceRequestMutex.RUnlock()
	fake.attachNetworkInterfaceWithContextMutex.RLock()
	defer fake.attachNetworkInterfaceWithContextMutex.RUnlock()
	fake.attachVolumeMutex.RLock()
	defer fake.attachVolumeMutex.RUnlock()
	fake.attachVolumeRequestMutex.RLock()
	defer fake.attachVolumeRequestMutex.RUnlock()
	fake.attachVolumeWithContextMutex.RLock()
	defer fake.attachVolumeWithContextMutex.RUnlock()
	fake.attachVpnGatewayMutex.RLock()
	defer fake.attachVpnGatewayMutex.RUnlock()
	fake.attachVpnGatewayRequestMutex.RLock()
	defer fake.attachVpnGatewayRequestMutex.RUnlock()
	fake.attachVpnGatewayWithContextMutex.RLock()
	defer fake.attachVpnGatewayWithContextMutex.RUnlock()
	fake.authorizeClientVpnIngressMutex.RLock()
	defer fake.authorizeClientVpnIngressMutex.RUnlock()
	fake.authorizeClientVpnIngressRequestMutex.RLock()
	defer fake.authorizeClientVpnIngressRequestMutex.RUnlock()
	fake.authorizeClientVpnIngressWithContextMutex.RLock()
	defer fake.authorizeClientVpnIngressWithContextMutex.RUnlock()
	fake.authorizeSecurityGroupEgressMutex.RLock()
	defer fake.authorizeSecurityGroupEgressMutex.RUnlock()
	fake.authorizeSecurityGroupEgressRequestMutex.RLock()
	defer fake.authorizeSecurityGroupEgressRequestMutex.RUnlock()
	fake.authorizeSecurityGroupEgressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupEgressWithContextMutex.RUnlock()
	fake.authorizeSecurityGroupIngressMutex.RLock()
	defer fake.authorizeSecurityGroupIngressMutex.RUnlock()
	fake.authorizeSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeSecurityGroupIngressRequestMutex.RUnlock()
	fake.authorizeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeSecurityGroupIngressWithContextMutex.RUnlock()
	fake.bundleInstanceMutex.RLock()
	defer fake.bundleInstanceMutex.RUnlock()
	fake.bundleInstanceRequestMutex.RLock()
	defer fake.bundleInstanceRequestMutex.RUnlock()
	fake.bundleInstanceWithContextMutex.RLock()
	defer fake.bundleInstanceWithContextMutex.RUnlock()
	fake.cancelBundleTaskMutex.RLock()
	defer fake.cancelBundleTaskMutex.RUnlock()
	fake.cancelBundleTaskRequestMutex.RLock()
	defer fake.cancelBundleTaskRequestMutex.RUnlock()
	fake.cancelBundleTaskWithContextMutex.RLock()
	defer fake.cancelBundleTaskWithContextMutex.RUnlock()
	fake.cancelCapacityReservationMutex.RLock()
	defer fake.cancelCapacityReservationMutex.RUnlock()
	fake.cancelCapacityReservationRequestMutex.RLock()
	defer fake.cancelCapacityReservationRequestMutex.RUnlock()
	fake.cancelCapacityReservationWithContextMutex.RLock()
	defer fake.cancelCapacityReservationWithContextMutex.RUnlock()
	fake.cancelConversionTaskMutex.RLock()
	defer fake.cancelConversionTaskMutex.RUnlock()
	fake.cancelConversionTaskRequestMutex.RLock()
	defer fake.cancelConversionTaskRequestMutex.RUnlock()
	fake.cancelConversionTaskWithContextMutex.RLock()
	defer fake.cancelConversionTaskWithContextMutex.RUnlock()
	fake.cancelExportTaskMutex.RLock()
	defer fake.cancelExportTaskMutex.RUnlock()
	fake.cancelExportTaskRequestMutex.RLock()
	defer fake.cancelExportTaskRequestMutex.RUnlock()
	fake.cancelExportTaskWithContextMutex.RLock()
	defer fake.cancelExportTaskWithContextMutex.RUnlock()
	fake.cancelImportTaskMutex.RLock()
	defer fake.cancelImportTaskMutex.RUnlock()
	fake.cancelImportTaskRequestMutex.RLock()
	defer fake.cancelImportTaskRequestMutex.RUnlock()
	fake.cancelImportTaskWithContextMutex.RLock()
	defer fake.cancelImportTaskWithContextMutex.RUnlock()
	fake.cancelReservedInstancesListingMutex.RLock()
	defer fake.cancelReservedInstancesListingMutex.RUnlock()
	fake.cancelReservedInstancesListingRequestMutex.RLock()
	defer fake.cancelReservedInstancesListingRequestMutex.RUnlock()
	fake.cancelReservedInstancesListingWithContextMutex.RLock()
	defer fake.cancelReservedInstancesListingWithContextMutex.RUnlock()
	fake.cancelSpotFleetRequestsMutex.RLock()
	defer fake.cancelSpotFleetRequestsMutex.RUnlock()
	fake.cancelSpotFleetRequestsRequestMutex.RLock()
	defer fake.cancelSpotFleetRequestsRequestMutex.RUnlock()
	fake.cancelSpotFleetRequestsWithContextMutex.RLock()
	defer fake.cancelSpotFleetRequestsWithContextMutex.RUnlock()
	fake.cancelSpotInstanceRequestsMutex.RLock()
	defer fake.cancelSpotInstanceRequestsMutex.RUnlock()
	fake.cancelSpotInstanceRequestsRequestMutex.RLock()
	defer fake.cancelSpotInstanceRequestsRequestMutex.RUnlock()
	fake.cancelSpotInstanceRequestsWithContextMutex.RLock()
	defer fake.cancelSpotInstanceRequestsWithContextMutex.RUnlock()
	fake.confirmProductInstanceMutex.RLock()
	defer fake.confirmProductInstanceMutex.RUnlock()
	fake.confirmProductInstanceRequestMutex.RLock()
	defer fake.confirmProductInstanceRequestMutex.RUnlock()
	fake.confirmProductInstanceWithContextMutex.RLock()
	defer fake.confirmProductInstanceWithContextMutex.RUnlock()
	fake.copyFpgaImageMutex.RLock()
	defer fake.copyFpgaImageMutex.RUnlock()
	fake.copyFpgaImageRequestMutex.RLock()
	defer fake.copyFpgaImageRequestMutex.RUnlock()
	fake.copyFpgaImageWithContextMutex.RLock()
	defer fake.copyFpgaImageWithContextMutex.RUnlock()
	fake.copyImageMutex.RLock()
	defer fake.copyImageMutex.RUnlock()
	fake.copyImageRequestMutex.RLock()
	defer fake.copyImageRequestMutex.RUnlock()
	fake.copyImageWithContextMutex.RLock()
	defer fake.copyImageWithContextMutex.RUnlock()
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	fake.createCapacityReservationMutex.RLock()
	defer fake.createCapacityReservationMutex.RUnlock()
	fake.createCapacityReservationRequestMutex.RLock()
	defer fake.createCapacityReservationRequestMutex.RUnlock()
	fake.createCapacityReservationWithContextMutex.RLock()
	defer fake.createCapacityReservationWithContextMutex.RUnlock()
	fake.createClientVpnEndpointMutex.RLock()
	defer fake.createClientVpnEndpointMutex.RUnlock()
	fake.createClientVpnEndpointRequestMutex.RLock()
	defer fake.createClientVpnEndpointRequestMutex.RUnlock()
	fake.createClientVpnEndpointWithContextMutex.RLock()
	defer fake.createClientVpnEndpointWithContextMutex.RUnlock()
	fake.createClientVpnRouteMutex.RLock()
	defer fake.createClientVpnRouteMutex.RUnlock()
	fake.createClientVpnRouteRequestMutex.RLock()
	defer fake.createClientVpnRouteRequestMutex.RUnlock()
	fake.createClientVpnRouteWithContextMutex.RLock()
	defer fake.createClientVpnRouteWithContextMutex.RUnlock()
	fake.createCustomerGatewayMutex.RLock()
	defer fake.createCustomerGatewayMutex.RUnlock()
	fake.createCustomerGatewayRequestMutex.RLock()
	defer fake.createCustomerGatewayRequestMutex.RUnlock()
	fake.createCustomerGatewayWithContextMutex.RLock()
	defer fake.createCustomerGatewayWithContextMutex.RUnlock()
	fake.createDefaultSubnetMutex.RLock()
	defer fake.createDefaultSubnetMutex.RUnlock()
	fake.createDefaultSubnetRequestMutex.RLock()
	defer fake.createDefaultSubnetRequestMutex.RUnlock()
	fake.createDefaultSubnetWithContextMutex.RLock()
	defer fake.createDefaultSubnetWithContextMutex.RUnlock()
	fake.createDefaultVpcMutex.RLock()
	defer fake.createDefaultVpcMutex.RUnlock()
	fake.createDefaultVpcRequestMutex.RLock()
	defer fake.createDefaultVpcRequestMutex.RUnlock()
	fake.createDefaultVpcWithContextMutex.RLock()
	defer fake.createDefaultVpcWithContextMutex.RUnlock()
	fake.createDhcpOptionsMutex.RLock()
	defer fake.createDhcpOptionsMutex.RUnlock()
	fake.createDhcpOptionsRequestMutex.RLock()
	defer fake.createDhcpOptionsRequestMutex.RUnlock()
	fake.createDhcpOptionsWithContextMutex.RLock()
	defer fake.createDhcpOptionsWithContextMutex.RUnlock()
	fake.createEgressOnlyInternetGatewayMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayMutex.RUnlock()
	fake.createEgressOnlyInternetGatewayRequestMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayRequestMutex.RUnlock()
	fake.createEgressOnlyInternetGatewayWithContextMutex.RLock()
	defer fake.createEgressOnlyInternetGatewayWithContextMutex.RUnlock()
	fake.createFleetMutex.RLock()
	defer fake.createFleetMutex.RUnlock()
	fake.createFleetRequestMutex.RLock()
	defer fake.createFleetRequestMutex.RUnlock()
	fake.createFleetWithContextMutex.RLock()
	defer fake.createFleetWithContextMutex.RUnlock()
	fake.createFlowLogsMutex.RLock()
	defer fake.createFlowLogsMutex.RUnlock()
	fake.createFlowLogsRequestMutex.RLock()
	defer fake.createFlowLogsRequestMutex.RUnlock()
	fake.createFlowLogsWithContextMutex.RLock()
	defer fake.createFlowLogsWithContextMutex.RUnlock()
	fake.createFpgaImageMutex.RLock()
	defer fake.createFpgaImageMutex.RUnlock()
	fake.createFpgaImageRequestMutex.RLock()
	defer fake.createFpgaImageRequestMutex.RUnlock()
	fake.createFpgaImageWithContextMutex.RLock()
	defer fake.createFpgaImageWithContextMutex.RUnlock()
	fake.createImageMutex.RLock()
	defer fake.createImageMutex.RUnlock()
	fake.createImageRequestMutex.RLock()
	defer fake.createImageRequestMutex.RUnlock()
	fake.createImageWithContextMutex.RLock()
	defer fake.createImageWithContextMutex.RUnlock()
	fake.createInstanceExportTaskMutex.RLock()
	defer fake.createInstanceExportTaskMutex.RUnlock()
	fake.createInstanceExportTaskRequestMutex.RLock()
	defer fake.createInstanceExportTaskRequestMutex.RUnlock()
	fake.createInstanceExportTaskWithContextMutex.RLock()
	defer fake.createInstanceExportTaskWithContextMutex.RUnlock()
	fake.createInternetGatewayMutex.RLock()
	defer fake.createInternetGatewayMutex.RUnlock()
	fake.createInternetGatewayRequestMutex.RLock()
	defer fake.createInternetGatewayRequestMutex.RUnlock()
	fake.createInternetGatewayWithContextMutex.RLock()
	defer fake.createInternetGatewayWithContextMutex.RUnlock()
	fake.createKeyPairMutex.RLock()
	defer fake.createKeyPairMutex.RUnlock()
	fake.createKeyPairRequestMutex.RLock()
	defer fake.createKeyPairRequestMutex.RUnlock()
	fake.createKeyPairWithContextMutex.RLock()
	defer fake.createKeyPairWithContextMutex.RUnlock()
	fake.createLaunchTemplateMutex.RLock()
	defer fake.createLaunchTemplateMutex.RUnlock()
	fake.createLaunchTemplateRequestMutex.RLock()
	defer fake.createLaunchTemplateRequestMutex.RUnlock()
	fake.createLaunchTemplateVersionMutex.RLock()
	defer fake.createLaunchTemplateVersionMutex.RUnlock()
	fake.createLaunchTemplateVersionRequestMutex.RLock()
	defer fake.createLaunchTemplateVersionRequestMutex.RUnlock()
	fake.createLaunchTemplateVersionWithContextMutex.RLock()
	defer fake.createLaunchTemplateVersionWithContextMutex.RUnlock()
	fake.createLaunchTemplateWithContextMutex.RLock()
	defer fake.createLaunchTemplateWithContextMutex.RUnlock()
	fake.createNatGatewayMutex.RLock()
	defer fake.createNatGatewayMutex.RUnlock()
	fake.createNatGatewayRequestMutex.RLock()
	defer fake.createNatGatewayRequestMutex.RUnlock()
	fake.createNatGatewayWithContextMutex.RLock()
	defer fake.createNatGatewayWithContextMutex.RUnlock()
	fake.createNetworkAclMutex.RLock()
	defer fake.createNetworkAclMutex.RUnlock()
	fake.createNetworkAclEntryMutex.RLock()
	defer fake.createNetworkAclEntryMutex.RUnlock()
	fake.createNetworkAclEntryRequestMutex.RLock()
	defer fake.createNetworkAclEntryRequestMutex.RUnlock()
	fake.createNetworkAclEntryWithContextMutex.RLock()
	defer fake.createNetworkAclEntryWithContextMutex.RUnlock()
	fake.createNetworkAclRequestMutex.RLock()
	defer fake.createNetworkAclRequestMutex.RUnlock()
	fake.createNetworkAclWithContextMutex.RLock()
	defer fake.createNetworkAclWithContextMutex.RUnlock()
	fake.createNetworkInterfaceMutex.RLock()
	defer fake.createNetworkInterfaceMutex.RUnlock()
	fake.createNetworkInterfacePermissionMutex.RLock()
	defer fake.createNetworkInterfacePermissionMutex.RUnlock()
	fake.createNetworkInterfacePermissionRequestMutex.RLock()
	defer fake.createNetworkInterfacePermissionRequestMutex.RUnlock()
	fake.createNetworkInterfacePermissionWithContextMutex.RLock()
	defer fake.createNetworkInterfacePermissionWithContextMutex.RUnlock()
	fake.createNetworkInterfaceRequestMutex.RLock()
	defer fake.createNetworkInterfaceRequestMutex.RUnlock()
	fake.createNetworkInterfaceWithContextMutex.RLock()
	defer fake.createNetworkInterfaceWithContextMutex.RUnlock()
	fake.createPlacementGroupMutex.RLock()
	defer fake.createPlacementGroupMutex.RUnlock()
	fake.createPlacementGroupRequestMutex.RLock()
	defer fake.createPlacementGroupRequestMutex.RUnlock()
	fake.createPlacementGroupWithContextMutex.RLock()
	defer fake.createPlacementGroupWithContextMutex.RUnlock()
	fake.createReservedInstancesListingMutex.RLock()
	defer fake.createReservedInstancesListingMutex.RUnlock()
	fake.createReservedInstancesListingRequestMutex.RLock()
	defer fake.createReservedInstancesListingRequestMutex.RUnlock()
	fake.createReservedInstancesListingWithContextMutex.RLock()
	defer fake.createReservedInstancesListingWithContextMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.createRouteRequestMutex.RLock()
	defer fake.createRouteRequestMutex.RUnlock()
	fake.createRouteTableMutex.RLock()
	defer fake.createRouteTableMutex.RUnlock()
	fake.createRouteTableRequestMutex.RLock()
	defer fake.createRouteTableRequestMutex.RUnlock()
	fake.createRouteTableWithContextMutex.RLock()
	defer fake.createRouteTableWithContextMutex.RUnlock()
	fake.createRouteWithContextMutex.RLock()
	defer fake.createRouteWithContextMutex.RUnlock()
	fake.createSecurityGroupMutex.RLock()
	defer fake.createSecurityGroupMutex.RUnlock()
	fake.createSecurityGroupRequestMutex.RLock()
	defer fake.createSecurityGroupRequestMutex.RUnlock()
	fake.createSecurityGroupWithContextMutex.RLock()
	defer fake.createSecurityGroupWithContextMutex.RUnlock()
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	fake.createSpotDatafeedSubscriptionMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionMutex.RUnlock()
	fake.createSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionRequestMutex.RUnlock()
	fake.createSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.createSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	fake.createSubnetMutex.RLock()
	defer fake.createSubnetMutex.RUnlock()
	fake.createSubnetRequestMutex.RLock()
	defer fake.createSubnetRequestMutex.RUnlock()
	fake.createSubnetWithContextMutex.RLock()
	defer fake.createSubnetWithContextMutex.RUnlock()
	fake.createTagsMutex.RLock()
	defer fake.createTagsMutex.RUnlock()
	fake.createTagsRequestMutex.RLock()
	defer fake.createTagsRequestMutex.RUnlock()
	fake.createTagsWithContextMutex.RLock()
	defer fake.createTagsWithContextMutex.RUnlock()
	fake.createTransitGatewayMutex.RLock()
	defer fake.createTransitGatewayMutex.RUnlock()
	fake.createTransitGatewayRequestMutex.RLock()
	defer fake.createTransitGatewayRequestMutex.RUnlock()
	fake.createTransitGatewayRouteMutex.RLock()
	defer fake.createTransitGatewayRouteMutex.RUnlock()
	fake.createTransitGatewayRouteRequestMutex.RLock()
	defer fake.createTransitGatewayRouteRequestMutex.RUnlock()
	fake.createTransitGatewayRouteTableMutex.RLock()
	defer fake.createTransitGatewayRouteTableMutex.RUnlock()
	fake.createTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.createTransitGatewayRouteTableRequestMutex.RUnlock()
	fake.createTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.createTransitGatewayRouteTableWithContextMutex.RUnlock()
	fake.createTransitGatewayRouteWithContextMutex.RLock()
	defer fake.createTransitGatewayRouteWithContextMutex.RUnlock()
	fake.createTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.createTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	fake.createTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.createTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	fake.createTransitGatewayWithContextMutex.RLock()
	defer fake.createTransitGatewayWithContextMutex.RUnlock()
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	fake.createVolumeRequestMutex.RLock()
	defer fake.createVolumeRequestMutex.RUnlock()
	fake.createVolumeWithContextMutex.RLock()
	defer fake.createVolumeWithContextMutex.RUnlock()
	fake.createVpcMutex.RLock()
	defer fake.createVpcMutex.RUnlock()
	fake.createVpcEndpointMutex.RLock()
	defer fake.createVpcEndpointMutex.RUnlock()
	fake.createVpcEndpointConnectionNotificationMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationMutex.RUnlock()
	fake.createVpcEndpointConnectionNotificationRequestMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationRequestMutex.RUnlock()
	fake.createVpcEndpointConnectionNotificationWithContextMutex.RLock()
	defer fake.createVpcEndpointConnectionNotificationWithContextMutex.RUnlock()
	fake.createVpcEndpointRequestMutex.RLock()
	defer fake.createVpcEndpointRequestMutex.RUnlock()
	fake.createVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationMutex.RUnlock()
	fake.createVpcEndpointServiceConfigurationRequestMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationRequestMutex.RUnlock()
	fake.createVpcEndpointServiceConfigurationWithContextMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationWithContextMutex.RUnlock()
	fake.createVpcEndpointWithContextMutex.RLock()
	defer fake.createVpcEndpointWithContextMutex.RUnlock()
	fake.createVpcPeeringConnectionMutex.RLock()
	defer fake.createVpcPeeringConnectionMutex.RUnlock()
	fake.createVpcPeeringConnectionRequestMutex.RLock()
	defer fake.createVpcPeeringConnectionRequestMutex.RUnlock()
	fake.createVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.createVpcPeeringConnectionWithContextMutex.RUnlock()
	fake.createVpcRequestMutex.RLock()
	defer fake.createVpcRequestMutex.RUnlock()
	fake.createVpcWithContextMutex.RLock()
	defer fake.createVpcWithContextMutex.RUnlock()
	fake.createVpnConnectionMutex.RLock()
	defer fake.createVpnConnectionMutex.RUnlock()
	fake.createVpnConnectionRequestMutex.RLock()
	defer fake.createVpnConnectionRequestMutex.RUnlock()
	fake.createVpnConnectionRouteMutex.RLock()
	defer fake.createVpnConnectionRouteMutex.RUnlock()
	fake.createVpnConnectionRouteRequestMutex.RLock()
	defer fake.createVpnConnectionRouteRequestMutex.RUnlock()
	fake.createVpnConnectionRouteWithContextMutex.RLock()
	defer fake.createVpnConnectionRouteWithContextMutex.RUnlock()
	fake.createVpnConnectionWithContextMutex.RLock()
	defer fake.createVpnConnectionWithContextMutex.RUnlock()
	fake.createVpnGatewayMutex.RLock()
	defer fake.createVpnGatewayMutex.RUnlock()
	fake.createVpnGatewayRequestMutex.RLock()
	defer fake.createVpnGatewayRequestMutex.RUnlock()
	fake.createVpnGatewayWithContextMutex.RLock()
	defer fake.createVpnGatewayWithContextMutex.RUnlock()
	fake.deleteClientVpnEndpointMutex.RLock()
	defer fake.deleteClientVpnEndpointMutex.RUnlock()
	fake.deleteClientVpnEndpointRequestMutex.RLock()
	defer fake.deleteClientVpnEndpointRequestMutex.RUnlock()
	fake.deleteClientVpnEndpointWithContextMutex.RLock()
	defer fake.deleteClientVpnEndpointWithContextMutex.RUnlock()
	fake.deleteClientVpnRouteMutex.RLock()
	defer fake.deleteClientVpnRouteMutex.RUnlock()
	fake.deleteClientVpnRouteRequestMutex.RLock()
	defer fake.deleteClientVpnRouteRequestMutex.RUnlock()
	fake.deleteClientVpnRouteWithContextMutex.RLock()
	defer fake.deleteClientVpnRouteWithContextMutex.RUnlock()
	fake.deleteCustomerGatewayMutex.RLock()
	defer fake.deleteCustomerGatewayMutex.RUnlock()
	fake.deleteCustomerGatewayRequestMutex.RLock()
	defer fake.deleteCustomerGatewayRequestMutex.RUnlock()
	fake.deleteCustomerGatewayWithContextMutex.RLock()
	defer fake.deleteCustomerGatewayWithContextMutex.RUnlock()
	fake.deleteDhcpOptionsMutex.RLock()
	defer fake.deleteDhcpOptionsMutex.RUnlock()
	fake.deleteDhcpOptionsRequestMutex.RLock()
	defer fake.deleteDhcpOptionsRequestMutex.RUnlock()
	fake.deleteDhcpOptionsWithContextMutex.RLock()
	defer fake.deleteDhcpOptionsWithContextMutex.RUnlock()
	fake.deleteEgressOnlyInternetGatewayMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayMutex.RUnlock()
	fake.deleteEgressOnlyInternetGatewayRequestMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayRequestMutex.RUnlock()
	fake.deleteEgressOnlyInternetGatewayWithContextMutex.RLock()
	defer fake.deleteEgressOnlyInternetGatewayWithContextMutex.RUnlock()
	fake.deleteFleetsMutex.RLock()
	defer fake.deleteFleetsMutex.RUnlock()
	fake.deleteFleetsRequestMutex.RLock()
	defer fake.deleteFleetsRequestMutex.RUnlock()
	fake.deleteFleetsWithContextMutex.RLock()
	defer fake.deleteFleetsWithContextMutex.RUnlock()
	fake.deleteFlowLogsMutex.RLock()
	defer fake.deleteFlowLogsMutex.RUnlock()
	fake.deleteFlowLogsRequestMutex.RLock()
	defer fake.deleteFlowLogsRequestMutex.RUnlock()
	fake.deleteFlowLogsWithContextMutex.RLock()
	defer fake.deleteFlowLogsWithContextMutex.RUnlock()
	fake.deleteFpgaImageMutex.RLock()
	defer fake.deleteFpgaImageMutex.RUnlock()
	fake.deleteFpgaImageRequestMutex.RLock()
	defer fake.deleteFpgaImageRequestMutex.RUnlock()
	fake.deleteFpgaImageWithContextMutex.RLock()
	defer fake.deleteFpgaImageWithContextMutex.RUnlock()
	fake.deleteInternetGatewayMutex.RLock()
	defer fake.deleteInternetGatewayMutex.RUnlock()
	fake.deleteInternetGatewayRequestMutex.RLock()
	defer fake.deleteInternetGatewayRequestMutex.RUnlock()
	fake.deleteInternetGatewayWithContextMutex.RLock()
	defer fake.deleteInternetGatewayWithContextMutex.RUnlock()
	fake.deleteKeyPairMutex.RLock()
	defer fake.deleteKeyPairMutex.RUnlock()
	fake.deleteKeyPairRequestMutex.RLock()
	defer fake.deleteKeyPairRequestMutex.RUnlock()
	fake.deleteKeyPairWithContextMutex.RLock()
	defer fake.deleteKeyPairWithContextMutex.RUnlock()
	fake.deleteLaunchTemplateMutex.RLock()
	defer fake.deleteLaunchTemplateMutex.RUnlock()
	fake.deleteLaunchTemplateRequestMutex.RLock()
	defer fake.deleteLaunchTemplateRequestMutex.RUnlock()
	fake.deleteLaunchTemplateVersionsMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsMutex.RUnlock()
	fake.deleteLaunchTemplateVersionsRequestMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsRequestMutex.RUnlock()
	fake.deleteLaunchTemplateVersionsWithContextMutex.RLock()
	defer fake.deleteLaunchTemplateVersionsWithContextMutex.RUnlock()
	fake.deleteLaunchTemplateWithContextMutex.RLock()
	defer fake.deleteLaunchTemplateWithContextMutex.RUnlock()
	fake.deleteNatGatewayMutex.RLock()
	defer fake.deleteNatGatewayMutex.RUnlock()
	fake.deleteNatGatewayRequestMutex.RLock()
	defer fake.deleteNatGatewayRequestMutex.RUnlock()
	fake.deleteNatGatewayWithContextMutex.RLock()
	defer fake.deleteNatGatewayWithContextMutex.RUnlock()
	fake.deleteNetworkAclMutex.RLock()
	defer fake.deleteNetworkAclMutex.RUnlock()
	fake.deleteNetworkAclEntryMutex.RLock()
	defer fake.deleteNetworkAclEntryMutex.RUnlock()
	fake.deleteNetworkAclEntryRequestMutex.RLock()
	defer fake.deleteNetworkAclEntryRequestMutex.RUnlock()
	fake.deleteNetworkAclEntryWithContextMutex.RLock()
	defer fake.deleteNetworkAclEntryWithContextMutex.RUnlock()
	fake.deleteNetworkAclRequestMutex.RLock()
	defer fake.deleteNetworkAclRequestMutex.RUnlock()
	fake.deleteNetworkAclWithContextMutex.RLock()
	defer fake.deleteNetworkAclWithContextMutex.RUnlock()
	fake.deleteNetworkInterfaceMutex.RLock()
	defer fake.deleteNetworkInterfaceMutex.RUnlock()
	fake.deleteNetworkInterfacePermissionMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionMutex.RUnlock()
	fake.deleteNetworkInterfacePermissionRequestMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionRequestMutex.RUnlock()
	fake.deleteNetworkInterfacePermissionWithContextMutex.RLock()
	defer fake.deleteNetworkInterfacePermissionWithContextMutex.RUnlock()
	fake.deleteNetworkInterfaceRequestMutex.RLock()
	defer fake.deleteNetworkInterfaceRequestMutex.RUnlock()
	fake.deleteNetworkInterfaceWithContextMutex.RLock()
	defer fake.deleteNetworkInterfaceWithContextMutex.RUnlock()
	fake.deletePlacementGroupMutex.RLock()
	defer fake.deletePlacementGroupMutex.RUnlock()
	fake.deletePlacementGroupRequestMutex.RLock()
	defer fake.deletePlacementGroupRequestMutex.RUnlock()
	fake.deletePlacementGroupWithContextMutex.RLock()
	defer fake.deletePlacementGroupWithContextMutex.RUnlock()
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	fake.deleteRouteRequestMutex.RLock()
	defer fake.deleteRouteRequestMutex.RUnlock()
	fake.deleteRouteTableMutex.RLock()
	defer fake.deleteRouteTableMutex.RUnlock()
	fake.deleteRouteTableRequestMutex.RLock()
	defer fake.deleteRouteTableRequestMutex.RUnlock()
	fake.deleteRouteTableWithContextMutex.RLock()
	defer fake.deleteRouteTableWithContextMutex.RUnlock()
	fake.deleteRouteWithContextMutex.RLock()
	defer fake.deleteRouteWithContextMutex.RUnlock()
	fake.deleteSecurityGroupMutex.RLock()
	defer fake.deleteSecurityGroupMutex.RUnlock()
	fake.deleteSecurityGroupRequestMutex.RLock()
	defer fake.deleteSecurityGroupRequestMutex.RUnlock()
	fake.deleteSecurityGroupWithContextMutex.RLock()
	defer fake.deleteSecurityGroupWithContextMutex.RUnlock()
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	fake.deleteSpotDatafeedSubscriptionMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionMutex.RUnlock()
	fake.deleteSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionRequestMutex.RUnlock()
	fake.deleteSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.deleteSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	fake.deleteSubnetMutex.RLock()
	defer fake.deleteSubnetMutex.RUnlock()
	fake.deleteSubnetRequestMutex.RLock()
	defer fake.deleteSubnetRequestMutex.RUnlock()
	fake.deleteSubnetWithContextMutex.RLock()
	defer fake.deleteSubnetWithContextMutex.RUnlock()
	fake.deleteTagsMutex.RLock()
	defer fake.deleteTagsMutex.RUnlock()
	fake.deleteTagsRequestMutex.RLock()
	defer fake.deleteTagsRequestMutex.RUnlock()
	fake.deleteTagsWithContextMutex.RLock()
	defer fake.deleteTagsWithContextMutex.RUnlock()
	fake.deleteTransitGatewayMutex.RLock()
	defer fake.deleteTransitGatewayMutex.RUnlock()
	fake.deleteTransitGatewayRequestMutex.RLock()
	defer fake.deleteTransitGatewayRequestMutex.RUnlock()
	fake.deleteTransitGatewayRouteMutex.RLock()
	defer fake.deleteTransitGatewayRouteMutex.RUnlock()
	fake.deleteTransitGatewayRouteRequestMutex.RLock()
	defer fake.deleteTransitGatewayRouteRequestMutex.RUnlock()
	fake.deleteTransitGatewayRouteTableMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableMutex.RUnlock()
	fake.deleteTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableRequestMutex.RUnlock()
	fake.deleteTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.deleteTransitGatewayRouteTableWithContextMutex.RUnlock()
	fake.deleteTransitGatewayRouteWithContextMutex.RLock()
	defer fake.deleteTransitGatewayRouteWithContextMutex.RUnlock()
	fake.deleteTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.deleteTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	fake.deleteTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.deleteTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	fake.deleteTransitGatewayWithContextMutex.RLock()
	defer fake.deleteTransitGatewayWithContextMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.deleteVolumeRequestMutex.RLock()
	defer fake.deleteVolumeRequestMutex.RUnlock()
	fake.deleteVolumeWithContextMutex.RLock()
	defer fake.deleteVolumeWithContextMutex.RUnlock()
	fake.deleteVpcMutex.RLock()
	defer fake.deleteVpcMutex.RUnlock()
	fake.deleteVpcEndpointConnectionNotificationsMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsMutex.RUnlock()
	fake.deleteVpcEndpointConnectionNotificationsRequestMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsRequestMutex.RUnlock()
	fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointConnectionNotificationsWithContextMutex.RUnlock()
	fake.deleteVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.RUnlock()
	fake.deleteVpcEndpointServiceConfigurationsRequestMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsRequestMutex.RUnlock()
	fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsWithContextMutex.RUnlock()
	fake.deleteVpcEndpointsMutex.RLock()
	defer fake.deleteVpcEndpointsMutex.RUnlock()
	fake.deleteVpcEndpointsRequestMutex.RLock()
	defer fake.deleteVpcEndpointsRequestMutex.RUnlock()
	fake.deleteVpcEndpointsWithContextMutex.RLock()
	defer fake.deleteVpcEndpointsWithContextMutex.RUnlock()
	fake.deleteVpcPeeringConnectionMutex.RLock()
	defer fake.deleteVpcPeeringConnectionMutex.RUnlock()
	fake.deleteVpcPeeringConnectionRequestMutex.RLock()
	defer fake.deleteVpcPeeringConnectionRequestMutex.RUnlock()
	fake.deleteVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.deleteVpcPeeringConnectionWithContextMutex.RUnlock()
	fake.deleteVpcRequestMutex.RLock()
	defer fake.deleteVpcRequestMutex.RUnlock()
	fake.deleteVpcWithContextMutex.RLock()
	defer fake.deleteVpcWithContextMutex.RUnlock()
	fake.deleteVpnConnectionMutex.RLock()
	defer fake.deleteVpnConnectionMutex.RUnlock()
	fake.deleteVpnConnectionRequestMutex.RLock()
	defer fake.deleteVpnConnectionRequestMutex.RUnlock()
	fake.deleteVpnConnectionRouteMutex.RLock()
	defer fake.deleteVpnConnectionRouteMutex.RUnlock()
	fake.deleteVpnConnectionRouteRequestMutex.RLock()
	defer fake.deleteVpnConnectionRouteRequestMutex.RUnlock()
	fake.deleteVpnConnectionRouteWithContextMutex.RLock()
	defer fake.deleteVpnConnectionRouteWithContextMutex.RUnlock()
	fake.deleteVpnConnectionWithContextMutex.RLock()
	defer fake.deleteVpnConnectionWithContextMutex.RUnlock()
	fake.deleteVpnGatewayMutex.RLock()
	defer fake.deleteVpnGatewayMutex.RUnlock()
	fake.deleteVpnGatewayRequestMutex.RLock()
	defer fake.deleteVpnGatewayRequestMutex.RUnlock()
	fake.deleteVpnGatewayWithContextMutex.RLock()
	defer fake.deleteVpnGatewayWithContextMutex.RUnlock()
	fake.deprovisionByoipCidrMutex.RLock()
	defer fake.deprovisionByoipCidrMutex.RUnlock()
	fake.deprovisionByoipCidrRequestMutex.RLock()
	defer fake.deprovisionByoipCidrRequestMutex.RUnlock()
	fake.deprovisionByoipCidrWithContextMutex.RLock()
	defer fake.deprovisionByoipCidrWithContextMutex.RUnlock()
	fake.deregisterImageMutex.RLock()
	defer fake.deregisterImageMutex.RUnlock()
	fake.deregisterImageRequestMutex.RLock()
	defer fake.deregisterImageRequestMutex.RUnlock()
	fake.deregisterImageWithContextMutex.RLock()
	defer fake.deregisterImageWithContextMutex.RUnlock()
	fake.describeAccountAttributesMutex.RLock()
	defer fake.describeAccountAttributesMutex.RUnlock()
	fake.describeAccountAttributesRequestMutex.RLock()
	defer fake.describeAccountAttributesRequestMutex.RUnlock()
	fake.describeAccountAttributesWithContextMutex.RLock()
	defer fake.describeAccountAttributesWithContextMutex.RUnlock()
	fake.describeAddressesMutex.RLock()
	defer fake.describeAddressesMutex.RUnlock()
	fake.describeAddressesRequestMutex.RLock()
	defer fake.describeAddressesRequestMutex.RUnlock()
	fake.describeAddressesWithContextMutex.RLock()
	defer fake.describeAddressesWithContextMutex.RUnlock()
	fake.describeAggregateIdFormatMutex.RLock()
	defer fake.describeAggregateIdFormatMutex.RUnlock()
	fake.describeAggregateIdFormatRequestMutex.RLock()
	defer fake.describeAggregateIdFormatRequestMutex.RUnlock()
	fake.describeAggregateIdFormatWithContextMutex.RLock()
	defer fake.describeAggregateIdFormatWithContextMutex.RUnlock()
	fake.describeAvailabilityZonesMutex.RLock()
	defer fake.describeAvailabilityZonesMutex.RUnlock()
	fake.describeAvailabilityZonesRequestMutex.RLock()
	defer fake.describeAvailabilityZonesRequestMutex.RUnlock()
	fake.describeAvailabilityZonesWithContextMutex.RLock()
	defer fake.describeAvailabilityZonesWithContextMutex.RUnlock()
	fake.describeBundleTasksMutex.RLock()
	defer fake.describeBundleTasksMutex.RUnlock()
	fake.describeBundleTasksRequestMutex.RLock()
	defer fake.describeBundleTasksRequestMutex.RUnlock()
	fake.describeBundleTasksWithContextMutex.RLock()
	defer fake.describeBundleTasksWithContextMutex.RUnlock()
	fake.describeByoipCidrsMutex.RLock()
	defer fake.describeByoipCidrsMutex.RUnlock()
	fake.describeByoipCidrsRequestMutex.RLock()
	defer fake.describeByoipCidrsRequestMutex.RUnlock()
	fake.describeByoipCidrsWithContextMutex.RLock()
	defer fake.describeByoipCidrsWithContextMutex.RUnlock()
	fake.describeCapacityReservationsMutex.RLock()
	defer fake.describeCapacityReservationsMutex.RUnlock()
	fake.describeCapacityReservationsRequestMutex.RLock()
	defer fake.describeCapacityReservationsRequestMutex.RUnlock()
	fake.describeCapacityReservationsWithContextMutex.RLock()
	defer fake.describeCapacityReservationsWithContextMutex.RUnlock()
	fake.describeClassicLinkInstancesMutex.RLock()
	defer fake.describeClassicLinkInstancesMutex.RUnlock()
	fake.describeClassicLinkInstancesRequestMutex.RLock()
	defer fake.describeClassicLinkInstancesRequestMutex.RUnlock()
	fake.describeClassicLinkInstancesWithContextMutex.RLock()
	defer fake.describeClassicLinkInstancesWithContextMutex.RUnlock()
	fake.describeClientVpnAuthorizationRulesMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesMutex.RUnlock()
	fake.describeClientVpnAuthorizationRulesRequestMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesRequestMutex.RUnlock()
	fake.describeClientVpnAuthorizationRulesWithContextMutex.RLock()
	defer fake.describeClientVpnAuthorizationRulesWithContextMutex.RUnlock()
	fake.describeClientVpnConnectionsMutex.RLock()
	defer fake.describeClientVpnConnectionsMutex.RUnlock()
	fake.describeClientVpnConnectionsRequestMutex.RLock()
	defer fake.describeClientVpnConnectionsRequestMutex.RUnlock()
	fake.describeClientVpnConnectionsWithContextMutex.RLock()
	defer fake.describeClientVpnConnectionsWithContextMutex.RUnlock()
	fake.describeClientVpnEndpointsMutex.RLock()
	defer fake.describeClientVpnEndpointsMutex.RUnlock()
	fake.describeClientVpnEndpointsRequestMutex.RLock()
	defer fake.describeClientVpnEndpointsRequestMutex.RUnlock()
	fake.describeClientVpnEndpointsWithContextMutex.RLock()
	defer fake.describeClientVpnEndpointsWithContextMutex.RUnlock()
	fake.describeClientVpnRoutesMutex.RLock()
	defer fake.describeClientVpnRoutesMutex.RUnlock()
	fake.describeClientVpnRoutesRequestMutex.RLock()
	defer fake.describeClientVpnRoutesRequestMutex.RUnlock()
	fake.describeClientVpnRoutesWithContextMutex.RLock()
	defer fake.describeClientVpnRoutesWithContextMutex.RUnlock()
	fake.describeClientVpnTargetNetworksMutex.RLock()
	defer fake.describeClientVpnTargetNetworksMutex.RUnlock()
	fake.describeClientVpnTargetNetworksRequestMutex.RLock()
	defer fake.describeClientVpnTargetNetworksRequestMutex.RUnlock()
	fake.describeClientVpnTargetNetworksWithContextMutex.RLock()
	defer fake.describeClientVpnTargetNetworksWithContextMutex.RUnlock()
	fake.describeConversionTasksMutex.RLock()
	defer fake.describeConversionTasksMutex.RUnlock()
	fake.describeConversionTasksRequestMutex.RLock()
	defer fake.describeConversionTasksRequestMutex.RUnlock()
	fake.describeConversionTasksWithContextMutex.RLock()
	defer fake.describeConversionTasksWithContextMutex.RUnlock()
	fake.describeCustomerGatewaysMutex.RLock()
	defer fake.describeCustomerGatewaysMutex.RUnlock()
	fake.describeCustomerGatewaysRequestMutex.RLock()
	defer fake.describeCustomerGatewaysRequestMutex.RUnlock()
	fake.describeCustomerGatewaysWithContextMutex.RLock()
	defer fake.describeCustomerGatewaysWithContextMutex.RUnlock()
	fake.describeDhcpOptionsMutex.RLock()
	defer fake.describeDhcpOptionsMutex.RUnlock()
	fake.describeDhcpOptionsRequestMutex.RLock()
	defer fake.describeDhcpOptionsRequestMutex.RUnlock()
	fake.describeDhcpOptionsWithContextMutex.RLock()
	defer fake.describeDhcpOptionsWithContextMutex.RUnlock()
	fake.describeEgressOnlyInternetGatewaysMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysMutex.RUnlock()
	fake.describeEgressOnlyInternetGatewaysRequestMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysRequestMutex.RUnlock()
	fake.describeEgressOnlyInternetGatewaysWithContextMutex.RLock()
	defer fake.describeEgressOnlyInternetGatewaysWithContextMutex.RUnlock()
	fake.describeElasticGpusMutex.RLock()
	defer fake.describeElasticGpusMutex.RUnlock()
	fake.describeElasticGpusRequestMutex.RLock()
	defer fake.describeElasticGpusRequestMutex.RUnlock()
	fake.describeElasticGpusWithContextMutex.RLock()
	defer fake.describeElasticGpusWithContextMutex.RUnlock()
	fake.describeExportTasksMutex.RLock()
	defer fake.describeExportTasksMutex.RUnlock()
	fake.describeExportTasksRequestMutex.RLock()
	defer fake.describeExportTasksRequestMutex.RUnlock()
	fake.describeExportTasksWithContextMutex.RLock()
	defer fake.describeExportTasksWithContextMutex.RUnlock()
	fake.describeFleetHistoryMutex.RLock()
	defer fake.describeFleetHistoryMutex.RUnlock()
	fake.describeFleetHistoryRequestMutex.RLock()
	defer fake.describeFleetHistoryRequestMutex.RUnlock()
	fake.describeFleetHistoryWithContextMutex.RLock()
	defer fake.describeFleetHistoryWithContextMutex.RUnlock()
	fake.describeFleetInstancesMutex.RLock()
	defer fake.describeFleetInstancesMutex.RUnlock()
	fake.describeFleetInstancesRequestMutex.RLock()
	defer fake.describeFleetInstancesRequestMutex.RUnlock()
	fake.describeFleetInstancesWithContextMutex.RLock()
	defer fake.describeFleetInstancesWithContextMutex.RUnlock()
	fake.describeFleetsMutex.RLock()
	defer fake.describeFleetsMutex.RUnlock()
	fake.describeFleetsRequestMutex.RLock()
	defer fake.describeFleetsRequestMutex.RUnlock()
	fake.describeFleetsWithContextMutex.RLock()
	defer fake.describeFleetsWithContextMutex.RUnlock()
	fake.describeFlowLogsMutex.RLock()
	defer fake.describeFlowLogsMutex.RUnlock()
	fake.describeFlowLogsRequestMutex.RLock()
	defer fake.describeFlowLogsRequestMutex.RUnlock()
	fake.describeFlowLogsWithContextMutex.RLock()
	defer fake.describeFlowLogsWithContextMutex.RUnlock()
	fake.describeFpgaImageAttributeMutex.RLock()
	defer fake.describeFpgaImageAttributeMutex.RUnlock()
	fake.describeFpgaImageAttributeRequestMutex.RLock()
	defer fake.describeFpgaImageAttributeRequestMutex.RUnlock()
	fake.describeFpgaImageAttributeWithContextMutex.RLock()
	defer fake.describeFpgaImageAttributeWithContextMutex.RUnlock()
	fake.describeFpgaImagesMutex.RLock()
	defer fake.describeFpgaImagesMutex.RUnlock()
	fake.describeFpgaImagesRequestMutex.RLock()
	defer fake.describeFpgaImagesRequestMutex.RUnlock()
	fake.describeFpgaImagesWithContextMutex.RLock()
	defer fake.describeFpgaImagesWithContextMutex.RUnlock()
	fake.describeHostReservationOfferingsMutex.RLock()
	defer fake.describeHostReservationOfferingsMutex.RUnlock()
	fake.describeHostReservationOfferingsRequestMutex.RLock()
	defer fake.describeHostReservationOfferingsRequestMutex.RUnlock()
	fake.describeHostReservationOfferingsWithContextMutex.RLock()
	defer fake.describeHostReservationOfferingsWithContextMutex.RUnlock()
	fake.describeHostReservationsMutex.RLock()
	defer fake.describeHostReservationsMutex.RUnlock()
	fake.describeHostReservationsRequestMutex.RLock()
	defer fake.describeHostReservationsRequestMutex.RUnlock()
	fake.describeHostReservationsWithContextMutex.RLock()
	defer fake.describeHostReservationsWithContextMutex.RUnlock()
	fake.describeHostsMutex.RLock()
	defer fake.describeHostsMutex.RUnlock()
	fake.describeHostsRequestMutex.RLock()
	defer fake.describeHostsRequestMutex.RUnlock()
	fake.describeHostsWithContextMutex.RLock()
	defer fake.describeHostsWithContextMutex.RUnlock()
	fake.describeIamInstanceProfileAssociationsMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsMutex.RUnlock()
	fake.describeIamInstanceProfileAssociationsRequestMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsRequestMutex.RUnlock()
	fake.describeIamInstanceProfileAssociationsWithContextMutex.RLock()
	defer fake.describeIamInstanceProfileAssociationsWithContextMutex.RUnlock()
	fake.describeIdFormatMutex.RLock()
	defer fake.describeIdFormatMutex.RUnlock()
	fake.describeIdFormatRequestMutex.RLock()
	defer fake.describeIdFormatRequestMutex.RUnlock()
	fake.describeIdFormatWithContextMutex.RLock()
	defer fake.describeIdFormatWithContextMutex.RUnlock()
	fake.describeIdentityIdFormatMutex.RLock()
	defer fake.describeIdentityIdFormatMutex.RUnlock()
	fake.describeIdentityIdFormatRequestMutex.RLock()
	defer fake.describeIdentityIdFormatRequestMutex.RUnlock()
	fake.describeIdentityIdFormatWithContextMutex.RLock()
	defer fake.describeIdentityIdFormatWithContextMutex.RUnlock()
	fake.describeImageAttributeMutex.RLock()
	defer fake.describeImageAttributeMutex.RUnlock()
	fake.describeImageAttributeRequestMutex.RLock()
	defer fake.describeImageAttributeRequestMutex.RUnlock()
	fake.describeImageAttributeWithContextMutex.RLock()
	defer fake.describeImageAttributeWithContextMutex.RUnlock()
	fake.describeImagesMutex.RLock()
	defer fake.describeImagesMutex.RUnlock()
	fake.describeImagesRequestMutex.RLock()
	defer fake.describeImagesRequestMutex.RUnlock()
	fake.describeImagesWithContextMutex.RLock()
	defer fake.describeImagesWithContextMutex.RUnlock()
	fake.describeImportImageTasksMutex.RLock()
	defer fake.describeImportImageTasksMutex.RUnlock()
	fake.describeImportImageTasksRequestMutex.RLock()
	defer fake.describeImportImageTasksRequestMutex.RUnlock()
	fake.describeImportImageTasksWithContextMutex.RLock()
	defer fake.describeImportImageTasksWithContextMutex.RUnlock()
	fake.describeImportSnapshotTasksMutex.RLock()
	defer fake.describeImportSnapshotTasksMutex.RUnlock()
	fake.describeImportSnapshotTasksRequestMutex.RLock()
	defer fake.describeImportSnapshotTasksRequestMutex.RUnlock()
	fake.describeImportSnapshotTasksWithContextMutex.RLock()
	defer fake.describeImportSnapshotTasksWithContextMutex.RUnlock()
	fake.describeInstanceAttributeMutex.RLock()
	defer fake.describeInstanceAttributeMutex.RUnlock()
	fake.describeInstanceAttributeRequestMutex.RLock()
	defer fake.describeInstanceAttributeRequestMutex.RUnlock()
	fake.describeInstanceAttributeWithContextMutex.RLock()
	defer fake.describeInstanceAttributeWithContextMutex.RUnlock()
	fake.describeInstanceCreditSpecificationsMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsMutex.RUnlock()
	fake.describeInstanceCreditSpecificationsRequestMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsRequestMutex.RUnlock()
	fake.describeInstanceCreditSpecificationsWithContextMutex.RLock()
	defer fake.describeInstanceCreditSpecificationsWithContextMutex.RUnlock()
	fake.describeInstanceStatusMutex.RLock()
	defer fake.describeInstanceStatusMutex.RUnlock()
	fake.describeInstanceStatusPagesMutex.RLock()
	defer fake.describeInstanceStatusPagesMutex.RUnlock()
	fake.describeInstanceStatusPagesWithContextMutex.RLock()
	defer fake.describeInstanceStatusPagesWithContextMutex.RUnlock()
	fake.describeInstanceStatusRequestMutex.RLock()
	defer fake.describeInstanceStatusRequestMutex.RUnlock()
	fake.describeInstanceStatusWithContextMutex.RLock()
	defer fake.describeInstanceStatusWithContextMutex.RUnlock()
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	fake.describeInstancesPagesMutex.RLock()
	defer fake.describeInstancesPagesMutex.RUnlock()
	fake.describeInstancesPagesWithContextMutex.RLock()
	defer fake.describeInstancesPagesWithContextMutex.RUnlock()
	fake.describeInstancesRequestMutex.RLock()
	defer fake.describeInstancesRequestMutex.RUnlock()
	fake.describeInstancesWithContextMutex.RLock()
	defer fake.describeInstancesWithContextMutex.RUnlock()
	fake.describeInternetGatewaysMutex.RLock()
	defer fake.describeInternetGatewaysMutex.RUnlock()
	fake.describeInternetGatewaysRequestMutex.RLock()
	defer fake.describeInternetGatewaysRequestMutex.RUnlock()
	fake.describeInternetGatewaysWithContextMutex.RLock()
	defer fake.describeInternetGatewaysWithContextMutex.RUnlock()
	fake.describeKeyPairsMutex.RLock()
	defer fake.describeKeyPairsMutex.RUnlock()
	fake.describeKeyPairsRequestMutex.RLock()
	defer fake.describeKeyPairsRequestMutex.RUnlock()
	fake.describeKeyPairsWithContextMutex.RLock()
	defer fake.describeKeyPairsWithContextMutex.RUnlock()
	fake.describeLaunchTemplateVersionsMutex.RLock()
	defer fake.describeLaunchTemplateVersionsMutex.RUnlock()
	fake.describeLaunchTemplateVersionsRequestMutex.RLock()
	defer fake.describeLaunchTemplateVersionsRequestMutex.RUnlock()
	fake.describeLaunchTemplateVersionsWithContextMutex.RLock()
	defer fake.describeLaunchTemplateVersionsWithContextMutex.RUnlock()
	fake.describeLaunchTemplatesMutex.RLock()
	defer fake.describeLaunchTemplatesMutex.RUnlock()
	fake.describeLaunchTemplatesRequestMutex.RLock()
	defer fake.describeLaunchTemplatesRequestMutex.RUnlock()
	fake.describeLaunchTemplatesWithContextMutex.RLock()
	defer fake.describeLaunchTemplatesWithContextMutex.RUnlock()
	fake.describeMovingAddressesMutex.RLock()
	defer fake.describeMovingAddressesMutex.RUnlock()
	fake.describeMovingAddressesRequestMutex.RLock()
	defer fake.describeMovingAddressesRequestMutex.RUnlock()
	fake.describeMovingAddressesWithContextMutex.RLock()
	defer fake.describeMovingAddressesWithContextMutex.RUnlock()
	fake.describeNatGatewaysMutex.RLock()
	defer fake.describeNatGatewaysMutex.RUnlock()
	fake.describeNatGatewaysPagesMutex.RLock()
	defer fake.describeNatGatewaysPagesMutex.RUnlock()
	fake.describeNatGatewaysPagesWithContextMutex.RLock()
	defer fake.describeNatGatewaysPagesWithContextMutex.RUnlock()
	fake.describeNatGatewaysRequestMutex.RLock()
	defer fake.describeNatGatewaysRequestMutex.RUnlock()
	fake.describeNatGatewaysWithContextMutex.RLock()
	defer fake.describeNatGatewaysWithContextMutex.RUnlock()
	fake.describeNetworkAclsMutex.RLock()
	defer fake.describeNetworkAclsMutex.RUnlock()
	fake.describeNetworkAclsRequestMutex.RLock()
	defer fake.describeNetworkAclsRequestMutex.RUnlock()
	fake.describeNetworkAclsWithContextMutex.RLock()
	defer fake.describeNetworkAclsWithContextMutex.RUnlock()
	fake.describeNetworkInterfaceAttributeMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeMutex.RUnlock()
	fake.describeNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeRequestMutex.RUnlock()
	fake.describeNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.describeNetworkInterfaceAttributeWithContextMutex.RUnlock()
	fake.describeNetworkInterfacePermissionsMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsMutex.RUnlock()
	fake.describeNetworkInterfacePermissionsRequestMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsRequestMutex.RUnlock()
	fake.describeNetworkInterfacePermissionsWithContextMutex.RLock()
	defer fake.describeNetworkInterfacePermissionsWithContextMutex.RUnlock()
	fake.describeNetworkInterfacesMutex.RLock()
	defer fake.describeNetworkInterfacesMutex.RUnlock()
	fake.describeNetworkInterfacesPagesMutex.RLock()
	defer fake.describeNetworkInterfacesPagesMutex.RUnlock()
	fake.describeNetworkInterfacesPagesWithContextMutex.RLock()
	defer fake.describeNetworkInterfacesPagesWithContextMutex.RUnlock()
	fake.describeNetworkInterfacesRequestMutex.RLock()
	defer fake.describeNetworkInterfacesRequestMutex.RUnlock()
	fake.describeNetworkInterfacesWithContextMutex.RLock()
	defer fake.describeNetworkInterfacesWithContextMutex.RUnlock()
	fake.describePlacementGroupsMutex.RLock()
	defer fake.describePlacementGroupsMutex.RUnlock()
	fake.describePlacementGroupsRequestMutex.RLock()
	defer fake.describePlacementGroupsRequestMutex.RUnlock()
	fake.describePlacementGroupsWithContextMutex.RLock()
	defer fake.describePlacementGroupsWithContextMutex.RUnlock()
	fake.describePrefixListsMutex.RLock()
	defer fake.describePrefixListsMutex.RUnlock()
	fake.describePrefixListsRequestMutex.RLock()
	defer fake.describePrefixListsRequestMutex.RUnlock()
	fake.describePrefixListsWithContextMutex.RLock()
	defer fake.describePrefixListsWithContextMutex.RUnlock()
	fake.describePrincipalIdFormatMutex.RLock()
	defer fake.describePrincipalIdFormatMutex.RUnlock()
	fake.describePrincipalIdFormatRequestMutex.RLock()
	defer fake.describePrincipalIdFormatRequestMutex.RUnlock()
	fake.describePrincipalIdFormatWithContextMutex.RLock()
	defer fake.describePrincipalIdFormatWithContextMutex.RUnlock()
	fake.describePublicIpv4PoolsMutex.RLock()
	defer fake.describePublicIpv4PoolsMutex.RUnlock()
	fake.describePublicIpv4PoolsRequestMutex.RLock()
	defer fake.describePublicIpv4PoolsRequestMutex.RUnlock()
	fake.describePublicIpv4PoolsWithContextMutex.RLock()
	defer fake.describePublicIpv4PoolsWithContextMutex.RUnlock()
	fake.describeRegionsMutex.RLock()
	defer fake.describeRegionsMutex.RUnlock()
	fake.describeRegionsRequestMutex.RLock()
	defer fake.describeRegionsRequestMutex.RUnlock()
	fake.describeRegionsWithContextMutex.RLock()
	defer fake.describeRegionsWithContextMutex.RUnlock()
	fake.describeReservedInstancesMutex.RLock()
	defer fake.describeReservedInstancesMutex.RUnlock()
	fake.describeReservedInstancesListingsMutex.RLock()
	defer fake.describeReservedInstancesListingsMutex.RUnlock()
	fake.describeReservedInstancesListingsRequestMutex.RLock()
	defer fake.describeReservedInstancesListingsRequestMutex.RUnlock()
	fake.describeReservedInstancesListingsWithContextMutex.RLock()
	defer fake.describeReservedInstancesListingsWithContextMutex.RUnlock()
	fake.describeReservedInstancesModificationsMutex.RLock()
	defer fake.describeReservedInstancesModificationsMutex.RUnlock()
	fake.describeReservedInstancesModificationsPagesMutex.RLock()
	defer fake.describeReservedInstancesModificationsPagesMutex.RUnlock()
	fake.describeReservedInstancesModificationsPagesWithContextMutex.RLock()
	defer fake.describeReservedInstancesModificationsPagesWithContextMutex.RUnlock()
	fake.describeReservedInstancesModificationsRequestMutex.RLock()
	defer fake.describeReservedInstancesModificationsRequestMutex.RUnlock()
	fake.describeReservedInstancesModificationsWithContextMutex.RLock()
	defer fake.describeReservedInstancesModificationsWithContextMutex.RUnlock()
	fake.describeReservedInstancesOfferingsMutex.RLock()
	defer fake.describeReservedInstancesOfferingsMutex.RUnlock()
	fake.describeReservedInstancesOfferingsPagesMutex.RLock()
	defer fake.describeReservedInstancesOfferingsPagesMutex.RUnlock()
	fake.describeReservedInstancesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedInstancesOfferingsPagesWithContextMutex.RUnlock()
	fake.describeReservedInstancesOfferingsRequestMutex.RLock()
	defer fake.describeReservedInstancesOfferingsRequestMutex.RUnlock()
	fake.describeReservedInstancesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedInstancesOfferingsWithContextMutex.RUnlock()
	fake.describeReservedInstancesRequestMutex.RLock()
	defer fake.describeReservedInstancesRequestMutex.RUnlock()
	fake.describeReservedInstancesWithContextMutex.RLock()
	defer fake.describeReservedInstancesWithContextMutex.RUnlock()
	fake.describeRouteTablesMutex.RLock()
	defer fake.describeRouteTablesMutex.RUnlock()
	fake.describeRouteTablesPagesMutex.RLock()
	defer fake.describeRouteTablesPagesMutex.RUnlock()
	fake.describeRouteTablesPagesWithContextMutex.RLock()
	defer fake.describeRouteTablesPagesWithContextMutex.RUnlock()
	fake.describeRouteTablesRequestMutex.RLock()
	defer fake.describeRouteTablesRequestMutex.RUnlock()
	fake.describeRouteTablesWithContextMutex.RLock()
	defer fake.describeRouteTablesWithContextMutex.RUnlock()
	fake.describeScheduledInstanceAvailabilityMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityMutex.RUnlock()
	fake.describeScheduledInstanceAvailabilityRequestMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityRequestMutex.RUnlock()
	fake.describeScheduledInstanceAvailabilityWithContextMutex.RLock()
	defer fake.describeScheduledInstanceAvailabilityWithContextMutex.RUnlock()
	fake.describeScheduledInstancesMutex.RLock()
	defer fake.describeScheduledInstancesMutex.RUnlock()
	fake.describeScheduledInstancesRequestMutex.RLock()
	defer fake.describeScheduledInstancesRequestMutex.RUnlock()
	fake.describeScheduledInstancesWithContextMutex.RLock()
	defer fake.describeScheduledInstancesWithContextMutex.RUnlock()
	fake.describeSecurityGroupReferencesMutex.RLock()
	defer fake.describeSecurityGroupReferencesMutex.RUnlock()
	fake.describeSecurityGroupReferencesRequestMutex.RLock()
	defer fake.describeSecurityGroupReferencesRequestMutex.RUnlock()
	fake.describeSecurityGroupReferencesWithContextMutex.RLock()
	defer fake.describeSecurityGroupReferencesWithContextMutex.RUnlock()
	fake.describeSecurityGroupsMutex.RLock()
	defer fake.describeSecurityGroupsMutex.RUnlock()
	fake.describeSecurityGroupsPagesMutex.RLock()
	defer fake.describeSecurityGroupsPagesMutex.RUnlock()
	fake.describeSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeSecurityGroupsPagesWithContextMutex.RUnlock()
	fake.describeSecurityGroupsRequestMutex.RLock()
	defer fake.describeSecurityGroupsRequestMutex.RUnlock()
	fake.describeSecurityGroupsWithContextMutex.RLock()
	defer fake.describeSecurityGroupsWithContextMutex.RUnlock()
	fake.describeSnapshotAttributeMutex.RLock()
	defer fake.describeSnapshotAttributeMutex.RUnlock()
	fake.describeSnapshotAttributeRequestMutex.RLock()
	defer fake.describeSnapshotAttributeRequestMutex.RUnlock()
	fake.describeSnapshotAttributeWithContextMutex.RLock()
	defer fake.describeSnapshotAttributeWithContextMutex.RUnlock()
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	fake.describeSpotDatafeedSubscriptionMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionMutex.RUnlock()
	fake.describeSpotDatafeedSubscriptionRequestMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionRequestMutex.RUnlock()
	fake.describeSpotDatafeedSubscriptionWithContextMutex.RLock()
	defer fake.describeSpotDatafeedSubscriptionWithContextMutex.RUnlock()
	fake.describeSpotFleetInstancesMutex.RLock()
	defer fake.describeSpotFleetInstancesMutex.RUnlock()
	fake.describeSpotFleetInstancesRequestMutex.RLock()
	defer fake.describeSpotFleetInstancesRequestMutex.RUnlock()
	fake.describeSpotFleetInstancesWithContextMutex.RLock()
	defer fake.describeSpotFleetInstancesWithContextMutex.RUnlock()
	fake.describeSpotFleetRequestHistoryMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryMutex.RUnlock()
	fake.describeSpotFleetRequestHistoryRequestMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryRequestMutex.RUnlock()
	fake.describeSpotFleetRequestHistoryWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestHistoryWithContextMutex.RUnlock()
	fake.describeSpotFleetRequestsMutex.RLock()
	defer fake.describeSpotFleetRequestsMutex.RUnlock()
	fake.describeSpotFleetRequestsPagesMutex.RLock()
	defer fake.describeSpotFleetRequestsPagesMutex.RUnlock()
	fake.describeSpotFleetRequestsPagesWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestsPagesWithContextMutex.RUnlock()
	fake.describeSpotFleetRequestsRequestMutex.RLock()
	defer fake.describeSpotFleetRequestsRequestMutex.RUnlock()
	fake.describeSpotFleetRequestsWithContextMutex.RLock()
	defer fake.describeSpotFleetRequestsWithContextMutex.RUnlock()
	fake.describeSpotInstanceRequestsMutex.RLock()
	defer fake.describeSpotInstanceRequestsMutex.RUnlock()
	fake.describeSpotInstanceRequestsRequestMutex.RLock()
	defer fake.describeSpotInstanceRequestsRequestMutex.RUnlock()
	fake.describeSpotInstanceRequestsWithContextMutex.RLock()
	defer fake.describeSpotInstanceRequestsWithContextMutex.RUnlock()
	fake.describeSpotPriceHistoryMutex.RLock()
	defer fake.describeSpotPriceHistoryMutex.RUnlock()
	fake.describeSpotPriceHistoryPagesMutex.RLock()
	defer fake.describeSpotPriceHistoryPagesMutex.RUnlock()
	fake.describeSpotPriceHistoryPagesWithContextMutex.RLock()
	defer fake.describeSpotPriceHistoryPagesWithContextMutex.RUnlock()
	fake.describeSpotPriceHistoryRequestMutex.RLock()
	defer fake.describeSpotPriceHistoryRequestMutex.RUnlock()
	fake.describeSpotPriceHistoryWithContextMutex.RLock()
	defer fake.describeSpotPriceHistoryWithContextMutex.RUnlock()
	fake.describeStaleSecurityGroupsMutex.RLock()
	defer fake.describeStaleSecurityGroupsMutex.RUnlock()
	fake.describeStaleSecurityGroupsRequestMutex.RLock()
	defer fake.describeStaleSecurityGroupsRequestMutex.RUnlock()
	fake.describeStaleSecurityGroupsWithContextMutex.RLock()
	defer fake.describeStaleSecurityGroupsWithContextMutex.RUnlock()
	fake.describeSubnetsMutex.RLock()
	defer fake.describeSubnetsMutex.RUnlock()
	fake.describeSubnetsRequestMutex.RLock()
	defer fake.describeSubnetsRequestMutex.RUnlock()
	fake.describeSubnetsWithContextMutex.RLock()
	defer fake.describeSubnetsWithContextMutex.RUnlock()
	fake.describeTagsMutex.RLock()
	defer fake.describeTagsMutex.RUnlock()
	fake.describeTagsPagesMutex.RLock()
	defer fake.describeTagsPagesMutex.RUnlock()
	fake.describeTagsPagesWithContextMutex.RLock()
	defer fake.describeTagsPagesWithContextMutex.RUnlock()
	fake.describeTagsRequestMutex.RLock()
	defer fake.describeTagsRequestMutex.RUnlock()
	fake.describeTagsWithContextMutex.RLock()
	defer fake.describeTagsWithContextMutex.RUnlock()
	fake.describeTransitGatewayAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsMutex.RUnlock()
	fake.describeTransitGatewayAttachmentsRequestMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsRequestMutex.RUnlock()
	fake.describeTransitGatewayAttachmentsWithContextMutex.RLock()
	defer fake.describeTransitGatewayAttachmentsWithContextMutex.RUnlock()
	fake.describeTransitGatewayRouteTablesMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesMutex.RUnlock()
	fake.describeTransitGatewayRouteTablesRequestMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesRequestMutex.RUnlock()
	fake.describeTransitGatewayRouteTablesWithContextMutex.RLock()
	defer fake.describeTransitGatewayRouteTablesWithContextMutex.RUnlock()
	fake.describeTransitGatewayVpcAttachmentsMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsMutex.RUnlock()
	fake.describeTransitGatewayVpcAttachmentsRequestMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsRequestMutex.RUnlock()
	fake.describeTransitGatewayVpcAttachmentsWithContextMutex.RLock()
	defer fake.describeTransitGatewayVpcAttachmentsWithContextMutex.RUnlock()
	fake.describeTransitGatewaysMutex.RLock()
	defer fake.describeTransitGatewaysMutex.RUnlock()
	fake.describeTransitGatewaysRequestMutex.RLock()
	defer fake.describeTransitGatewaysRequestMutex.RUnlock()
	fake.describeTransitGatewaysWithContextMutex.RLock()
	defer fake.describeTransitGatewaysWithContextMutex.RUnlock()
	fake.describeVolumeAttributeMutex.RLock()
	defer fake.describeVolumeAttributeMutex.RUnlock()
	fake.describeVolumeAttributeRequestMutex.RLock()
	defer fake.describeVolumeAttributeRequestMutex.RUnlock()
	fake.describeVolumeAttributeWithContextMutex.RLock()
	defer fake.describeVolumeAttributeWithContextMutex.RUnlock()
	fake.describeVolumeStatusMutex.RLock()
	defer fake.describeVolumeStatusMutex.RUnlock()
	fake.describeVolumeStatusPagesMutex.RLock()
	defer fake.describeVolumeStatusPagesMutex.RUnlock()
	fake.describeVolumeStatusPagesWithContextMutex.RLock()
	defer fake.describeVolumeStatusPagesWithContextMutex.RUnlock()
	fake.describeVolumeStatusRequestMutex.RLock()
	defer fake.describeVolumeStatusRequestMutex.RUnlock()
	fake.describeVolumeStatusWithContextMutex.RLock()
	defer fake.describeVolumeStatusWithContextMutex.RUnlock()
	fake.describeVolumesMutex.RLock()
	defer fake.describeVolumesMutex.RUnlock()
	fake.describeVolumesModificationsMutex.RLock()
	defer fake.describeVolumesModificationsMutex.RUnlock()
	fake.describeVolumesModificationsRequestMutex.RLock()
	defer fake.describeVolumesModificationsRequestMutex.RUnlock()
	fake.describeVolumesModificationsWithContextMutex.RLock()
	defer fake.describeVolumesModificationsWithContextMutex.RUnlock()
	fake.describeVolumesPagesMutex.RLock()
	defer fake.describeVolumesPagesMutex.RUnlock()
	fake.describeVolumesPagesWithContextMutex.RLock()
	defer fake.describeVolumesPagesWithContextMutex.RUnlock()
	fake.describeVolumesRequestMutex.RLock()
	defer fake.describeVolumesRequestMutex.RUnlock()
	fake.describeVolumesWithContextMutex.RLock()
	defer fake.describeVolumesWithContextMutex.RUnlock()
	fake.describeVpcAttributeMutex.RLock()
	defer fake.describeVpcAttributeMutex.RUnlock()
	fake.describeVpcAttributeRequestMutex.RLock()
	defer fake.describeVpcAttributeRequestMutex.RUnlock()
	fake.describeVpcAttributeWithContextMutex.RLock()
	defer fake.describeVpcAttributeWithContextMutex.RUnlock()
	fake.describeVpcClassicLinkMutex.RLock()
	defer fake.describeVpcClassicLinkMutex.RUnlock()
	fake.describeVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportMutex.RUnlock()
	fake.describeVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	fake.describeVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.describeVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	fake.describeVpcClassicLinkRequestMutex.RLock()
	defer fake.describeVpcClassicLinkRequestMutex.RUnlock()
	fake.describeVpcClassicLinkWithContextMutex.RLock()
	defer fake.describeVpcClassicLinkWithContextMutex.RUnlock()
	fake.describeVpcEndpointConnectionNotificationsMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsMutex.RUnlock()
	fake.describeVpcEndpointConnectionNotificationsRequestMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsRequestMutex.RUnlock()
	fake.describeVpcEndpointConnectionNotificationsWithContextMutex.RLock()
	defer fake.describeVpcEndpointConnectionNotificationsWithContextMutex.RUnlock()
	fake.describeVpcEndpointConnectionsMutex.RLock()
	defer fake.describeVpcEndpointConnectionsMutex.RUnlock()
	fake.describeVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.describeVpcEndpointConnectionsRequestMutex.RUnlock()
	fake.describeVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.describeVpcEndpointConnectionsWithContextMutex.RUnlock()
	fake.describeVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.RUnlock()
	fake.describeVpcEndpointServiceConfigurationsRequestMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsRequestMutex.RUnlock()
	fake.describeVpcEndpointServiceConfigurationsWithContextMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsWithContextMutex.RUnlock()
	fake.describeVpcEndpointServicePermissionsMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsMutex.RUnlock()
	fake.describeVpcEndpointServicePermissionsRequestMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsRequestMutex.RUnlock()
	fake.describeVpcEndpointServicePermissionsWithContextMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsWithContextMutex.RUnlock()
	fake.describeVpcEndpointServicesMutex.RLock()
	defer fake.describeVpcEndpointServicesMutex.RUnlock()
	fake.describeVpcEndpointServicesRequestMutex.RLock()
	defer fake.describeVpcEndpointServicesRequestMutex.RUnlock()
	fake.describeVpcEndpointServicesWithContextMutex.RLock()
	defer fake.describeVpcEndpointServicesWithContextMutex.RUnlock()
	fake.describeVpcEndpointsMutex.RLock()
	defer fake.describeVpcEndpointsMutex.RUnlock()
	fake.describeVpcEndpointsRequestMutex.RLock()
	defer fake.describeVpcEndpointsRequestMutex.RUnlock()
	fake.describeVpcEndpointsWithContextMutex.RLock()
	defer fake.describeVpcEndpointsWithContextMutex.RUnlock()
	fake.describeVpcPeeringConnectionsMutex.RLock()
	defer fake.describeVpcPeeringConnectionsMutex.RUnlock()
	fake.describeVpcPeeringConnectionsRequestMutex.RLock()
	defer fake.describeVpcPeeringConnectionsRequestMutex.RUnlock()
	fake.describeVpcPeeringConnectionsWithContextMutex.RLock()
	defer fake.describeVpcPeeringConnectionsWithContextMutex.RUnlock()
	fake.describeVpcsMutex.RLock()
	defer fake.describeVpcsMutex.RUnlock()
	fake.describeVpcsRequestMutex.RLock()
	defer fake.describeVpcsRequestMutex.RUnlock()
	fake.describeVpcsWithContextMutex.RLock()
	defer fake.describeVpcsWithContextMutex.RUnlock()
	fake.describeVpnConnectionsMutex.RLock()
	defer fake.describeVpnConnectionsMutex.RUnlock()
	fake.describeVpnConnectionsRequestMutex.RLock()
	defer fake.describeVpnConnectionsRequestMutex.RUnlock()
	fake.describeVpnConnectionsWithContextMutex.RLock()
	defer fake.describeVpnConnectionsWithContextMutex.RUnlock()
	fake.describeVpnGatewaysMutex.RLock()
	defer fake.describeVpnGatewaysMutex.RUnlock()
	fake.describeVpnGatewaysRequestMutex.RLock()
	defer fake.describeVpnGatewaysRequestMutex.RUnlock()
	fake.describeVpnGatewaysWithContextMutex.RLock()
	defer fake.describeVpnGatewaysWithContextMutex.RUnlock()
	fake.detachClassicLinkVpcMutex.RLock()
	defer fake.detachClassicLinkVpcMutex.RUnlock()
	fake.detachClassicLinkVpcRequestMutex.RLock()
	defer fake.detachClassicLinkVpcRequestMutex.RUnlock()
	fake.detachClassicLinkVpcWithContextMutex.RLock()
	defer fake.detachClassicLinkVpcWithContextMutex.RUnlock()
	fake.detachInternetGatewayMutex.RLock()
	defer fake.detachInternetGatewayMutex.RUnlock()
	fake.detachInternetGatewayRequestMutex.RLock()
	defer fake.detachInternetGatewayRequestMutex.RUnlock()
	fake.detachInternetGatewayWithContextMutex.RLock()
	defer fake.detachInternetGatewayWithContextMutex.RUnlock()
	fake.detachNetworkInterfaceMutex.RLock()
	defer fake.detachNetworkInterfaceMutex.RUnlock()
	fake.detachNetworkInterfaceRequestMutex.RLock()
	defer fake.detachNetworkInterfaceRequestMutex.RUnlock()
	fake.detachNetworkInterfaceWithContextMutex.RLock()
	defer fake.detachNetworkInterfaceWithContextMutex.RUnlock()
	fake.detachVolumeMutex.RLock()
	defer fake.detachVolumeMutex.RUnlock()
	fake.detachVolumeRequestMutex.RLock()
	defer fake.detachVolumeRequestMutex.RUnlock()
	fake.detachVolumeWithContextMutex.RLock()
	defer fake.detachVolumeWithContextMutex.RUnlock()
	fake.detachVpnGatewayMutex.RLock()
	defer fake.detachVpnGatewayMutex.RUnlock()
	fake.detachVpnGatewayRequestMutex.RLock()
	defer fake.detachVpnGatewayRequestMutex.RUnlock()
	fake.detachVpnGatewayWithContextMutex.RLock()
	defer fake.detachVpnGatewayWithContextMutex.RUnlock()
	fake.disableTransitGatewayRouteTablePropagationMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationMutex.RUnlock()
	fake.disableTransitGatewayRouteTablePropagationRequestMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationRequestMutex.RUnlock()
	fake.disableTransitGatewayRouteTablePropagationWithContextMutex.RLock()
	defer fake.disableTransitGatewayRouteTablePropagationWithContextMutex.RUnlock()
	fake.disableVgwRoutePropagationMutex.RLock()
	defer fake.disableVgwRoutePropagationMutex.RUnlock()
	fake.disableVgwRoutePropagationRequestMutex.RLock()
	defer fake.disableVgwRoutePropagationRequestMutex.RUnlock()
	fake.disableVgwRoutePropagationWithContextMutex.RLock()
	defer fake.disableVgwRoutePropagationWithContextMutex.RUnlock()
	fake.disableVpcClassicLinkMutex.RLock()
	defer fake.disableVpcClassicLinkMutex.RUnlock()
	fake.disableVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportMutex.RUnlock()
	fake.disableVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	fake.disableVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.disableVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	fake.disableVpcClassicLinkRequestMutex.RLock()
	defer fake.disableVpcClassicLinkRequestMutex.RUnlock()
	fake.disableVpcClassicLinkWithContextMutex.RLock()
	defer fake.disableVpcClassicLinkWithContextMutex.RUnlock()
	fake.disassociateAddressMutex.RLock()
	defer fake.disassociateAddressMutex.RUnlock()
	fake.disassociateAddressRequestMutex.RLock()
	defer fake.disassociateAddressRequestMutex.RUnlock()
	fake.disassociateAddressWithContextMutex.RLock()
	defer fake.disassociateAddressWithContextMutex.RUnlock()
	fake.disassociateClientVpnTargetNetworkMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkMutex.RUnlock()
	fake.disassociateClientVpnTargetNetworkRequestMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkRequestMutex.RUnlock()
	fake.disassociateClientVpnTargetNetworkWithContextMutex.RLock()
	defer fake.disassociateClientVpnTargetNetworkWithContextMutex.RUnlock()
	fake.disassociateIamInstanceProfileMutex.RLock()
	defer fake.disassociateIamInstanceProfileMutex.RUnlock()
	fake.disassociateIamInstanceProfileRequestMutex.RLock()
	defer fake.disassociateIamInstanceProfileRequestMutex.RUnlock()
	fake.disassociateIamInstanceProfileWithContextMutex.RLock()
	defer fake.disassociateIamInstanceProfileWithContextMutex.RUnlock()
	fake.disassociateRouteTableMutex.RLock()
	defer fake.disassociateRouteTableMutex.RUnlock()
	fake.disassociateRouteTableRequestMutex.RLock()
	defer fake.disassociateRouteTableRequestMutex.RUnlock()
	fake.disassociateRouteTableWithContextMutex.RLock()
	defer fake.disassociateRouteTableWithContextMutex.RUnlock()
	fake.disassociateSubnetCidrBlockMutex.RLock()
	defer fake.disassociateSubnetCidrBlockMutex.RUnlock()
	fake.disassociateSubnetCidrBlockRequestMutex.RLock()
	defer fake.disassociateSubnetCidrBlockRequestMutex.RUnlock()
	fake.disassociateSubnetCidrBlockWithContextMutex.RLock()
	defer fake.disassociateSubnetCidrBlockWithContextMutex.RUnlock()
	fake.disassociateTransitGatewayRouteTableMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableMutex.RUnlock()
	fake.disassociateTransitGatewayRouteTableRequestMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableRequestMutex.RUnlock()
	fake.disassociateTransitGatewayRouteTableWithContextMutex.RLock()
	defer fake.disassociateTransitGatewayRouteTableWithContextMutex.RUnlock()
	fake.disassociateVpcCidrBlockMutex.RLock()
	defer fake.disassociateVpcCidrBlockMutex.RUnlock()
	fake.disassociateVpcCidrBlockRequestMutex.RLock()
	defer fake.disassociateVpcCidrBlockRequestMutex.RUnlock()
	fake.disassociateVpcCidrBlockWithContextMutex.RLock()
	defer fake.disassociateVpcCidrBlockWithContextMutex.RUnlock()
	fake.enableTransitGatewayRouteTablePropagationMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationMutex.RUnlock()
	fake.enableTransitGatewayRouteTablePropagationRequestMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationRequestMutex.RUnlock()
	fake.enableTransitGatewayRouteTablePropagationWithContextMutex.RLock()
	defer fake.enableTransitGatewayRouteTablePropagationWithContextMutex.RUnlock()
	fake.enableVgwRoutePropagationMutex.RLock()
	defer fake.enableVgwRoutePropagationMutex.RUnlock()
	fake.enableVgwRoutePropagationRequestMutex.RLock()
	defer fake.enableVgwRoutePropagationRequestMutex.RUnlock()
	fake.enableVgwRoutePropagationWithContextMutex.RLock()
	defer fake.enableVgwRoutePropagationWithContextMutex.RUnlock()
	fake.enableVolumeIOMutex.RLock()
	defer fake.enableVolumeIOMutex.RUnlock()
	fake.enableVolumeIORequestMutex.RLock()
	defer fake.enableVolumeIORequestMutex.RUnlock()
	fake.enableVolumeIOWithContextMutex.RLock()
	defer fake.enableVolumeIOWithContextMutex.RUnlock()
	fake.enableVpcClassicLinkMutex.RLock()
	defer fake.enableVpcClassicLinkMutex.RUnlock()
	fake.enableVpcClassicLinkDnsSupportMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportMutex.RUnlock()
	fake.enableVpcClassicLinkDnsSupportRequestMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportRequestMutex.RUnlock()
	fake.enableVpcClassicLinkDnsSupportWithContextMutex.RLock()
	defer fake.enableVpcClassicLinkDnsSupportWithContextMutex.RUnlock()
	fake.enableVpcClassicLinkRequestMutex.RLock()
	defer fake.enableVpcClassicLinkRequestMutex.RUnlock()
	fake.enableVpcClassicLinkWithContextMutex.RLock()
	defer fake.enableVpcClassicLinkWithContextMutex.RUnlock()
	fake.exportClientVpnClientCertificateRevocationListMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListMutex.RUnlock()
	fake.exportClientVpnClientCertificateRevocationListRequestMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListRequestMutex.RUnlock()
	fake.exportClientVpnClientCertificateRevocationListWithContextMutex.RLock()
	defer fake.exportClientVpnClientCertificateRevocationListWithContextMutex.RUnlock()
	fake.exportClientVpnClientConfigurationMutex.RLock()
	defer fake.exportClientVpnClientConfigurationMutex.RUnlock()
	fake.exportClientVpnClientConfigurationRequestMutex.RLock()
	defer fake.exportClientVpnClientConfigurationRequestMutex.RUnlock()
	fake.exportClientVpnClientConfigurationWithContextMutex.RLock()
	defer fake.exportClientVpnClientConfigurationWithContextMutex.RUnlock()
	fake.exportTransitGatewayRoutesMutex.RLock()
	defer fake.exportTransitGatewayRoutesMutex.RUnlock()
	fake.exportTransitGatewayRoutesRequestMutex.RLock()
	defer fake.exportTransitGatewayRoutesRequestMutex.RUnlock()
	fake.exportTransitGatewayRoutesWithContextMutex.RLock()
	defer fake.exportTransitGatewayRoutesWithContextMutex.RUnlock()
	fake.getConsoleOutputMutex.RLock()
	defer fake.getConsoleOutputMutex.RUnlock()
	fake.getConsoleOutputRequestMutex.RLock()
	defer fake.getConsoleOutputRequestMutex.RUnlock()
	fake.getConsoleOutputWithContextMutex.RLock()
	defer fake.getConsoleOutputWithContextMutex.RUnlock()
	fake.getConsoleScreenshotMutex.RLock()
	defer fake.getConsoleScreenshotMutex.RUnlock()
	fake.getConsoleScreenshotRequestMutex.RLock()
	defer fake.getConsoleScreenshotRequestMutex.RUnlock()
	fake.getConsoleScreenshotWithContextMutex.RLock()
	defer fake.getConsoleScreenshotWithContextMutex.RUnlock()
	fake.getHostReservationPurchasePreviewMutex.RLock()
	defer fake.getHostReservationPurchasePreviewMutex.RUnlock()
	fake.getHostReservationPurchasePreviewRequestMutex.RLock()
	defer fake.getHostReservationPurchasePreviewRequestMutex.RUnlock()
	fake.getHostReservationPurchasePreviewWithContextMutex.RLock()
	defer fake.getHostReservationPurchasePreviewWithContextMutex.RUnlock()
	fake.getLaunchTemplateDataMutex.RLock()
	defer fake.getLaunchTemplateDataMutex.RUnlock()
	fake.getLaunchTemplateDataRequestMutex.RLock()
	defer fake.getLaunchTemplateDataRequestMutex.RUnlock()
	fake.getLaunchTemplateDataWithContextMutex.RLock()
	defer fake.getLaunchTemplateDataWithContextMutex.RUnlock()
	fake.getPasswordDataMutex.RLock()
	defer fake.getPasswordDataMutex.RUnlock()
	fake.getPasswordDataRequestMutex.RLock()
	defer fake.getPasswordDataRequestMutex.RUnlock()
	fake.getPasswordDataWithContextMutex.RLock()
	defer fake.getPasswordDataWithContextMutex.RUnlock()
	fake.getReservedInstancesExchangeQuoteMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteMutex.RUnlock()
	fake.getReservedInstancesExchangeQuoteRequestMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteRequestMutex.RUnlock()
	fake.getReservedInstancesExchangeQuoteWithContextMutex.RLock()
	defer fake.getReservedInstancesExchangeQuoteWithContextMutex.RUnlock()
	fake.getTransitGatewayAttachmentPropagationsMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsMutex.RUnlock()
	fake.getTransitGatewayAttachmentPropagationsRequestMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsRequestMutex.RUnlock()
	fake.getTransitGatewayAttachmentPropagationsWithContextMutex.RLock()
	defer fake.getTransitGatewayAttachmentPropagationsWithContextMutex.RUnlock()
	fake.getTransitGatewayRouteTableAssociationsMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsMutex.RUnlock()
	fake.getTransitGatewayRouteTableAssociationsRequestMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsRequestMutex.RUnlock()
	fake.getTransitGatewayRouteTableAssociationsWithContextMutex.RLock()
	defer fake.getTransitGatewayRouteTableAssociationsWithContextMutex.RUnlock()
	fake.getTransitGatewayRouteTablePropagationsMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsMutex.RUnlock()
	fake.getTransitGatewayRouteTablePropagationsRequestMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsRequestMutex.RUnlock()
	fake.getTransitGatewayRouteTablePropagationsWithContextMutex.RLock()
	defer fake.getTransitGatewayRouteTablePropagationsWithContextMutex.RUnlock()
	fake.importClientVpnClientCertificateRevocationListMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListMutex.RUnlock()
	fake.importClientVpnClientCertificateRevocationListRequestMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListRequestMutex.RUnlock()
	fake.importClientVpnClientCertificateRevocationListWithContextMutex.RLock()
	defer fake.importClientVpnClientCertificateRevocationListWithContextMutex.RUnlock()
	fake.importImageMutex.RLock()
	defer fake.importImageMutex.RUnlock()
	fake.importImageRequestMutex.RLock()
	defer fake.importImageRequestMutex.RUnlock()
	fake.importImageWithContextMutex.RLock()
	defer fake.importImageWithContextMutex.RUnlock()
	fake.importInstanceMutex.RLock()
	defer fake.importInstanceMutex.RUnlock()
	fake.importInstanceRequestMutex.RLock()
	defer fake.importInstanceRequestMutex.RUnlock()
	fake.importInstanceWithContextMutex.RLock()
	defer fake.importInstanceWithContextMutex.RUnlock()
	fake.importKeyPairMutex.RLock()
	defer fake.importKeyPairMutex.RUnlock()
	fake.importKeyPairRequestMutex.RLock()
	defer fake.importKeyPairRequestMutex.RUnlock()
	fake.importKeyPairWithContextMutex.RLock()
	defer fake.importKeyPairWithContextMutex.RUnlock()
	fake.importSnapshotMutex.RLock()
	defer fake.importSnapshotMutex.RUnlock()
	fake.importSnapshotRequestMutex.RLock()
	defer fake.importSnapshotRequestMutex.RUnlock()
	fake.importSnapshotWithContextMutex.RLock()
	defer fake.importSnapshotWithContextMutex.RUnlock()
	fake.importVolumeMutex.RLock()
	defer fake.importVolumeMutex.RUnlock()
	fake.importVolumeRequestMutex.RLock()
	defer fake.importVolumeRequestMutex.RUnlock()
	fake.importVolumeWithContextMutex.RLock()
	defer fake.importVolumeWithContextMutex.RUnlock()
	fake.modifyCapacityReservationMutex.RLock()
	defer fake.modifyCapacityReservationMutex.RUnlock()
	fake.modifyCapacityReservationRequestMutex.RLock()
	defer fake.modifyCapacityReservationRequestMutex.RUnlock()
	fake.modifyCapacityReservationWithContextMutex.RLock()
	defer fake.modifyCapacityReservationWithContextMutex.RUnlock()
	fake.modifyClientVpnEndpointMutex.RLock()
	defer fake.modifyClientVpnEndpointMutex.RUnlock()
	fake.modifyClientVpnEndpointRequestMutex.RLock()
	defer fake.modifyClientVpnEndpointRequestMutex.RUnlock()
	fake.modifyClientVpnEndpointWithContextMutex.RLock()
	defer fake.modifyClientVpnEndpointWithContextMutex.RUnlock()
	fake.modifyFleetMutex.RLock()
	defer fake.modifyFleetMutex.RUnlock()
	fake.modifyFleetRequestMutex.RLock()
	defer fake.modifyFleetRequestMutex.RUnlock()
	fake.modifyFleetWithContextMutex.RLock()
	defer fake.modifyFleetWithContextMutex.RUnlock()
	fake.modifyFpgaImageAttributeMutex.RLock()
	defer fake.modifyFpgaImageAttributeMutex.RUnlock()
	fake.modifyFpgaImageAttributeRequestMutex.RLock()
	defer fake.modifyFpgaImageAttributeRequestMutex.RUnlock()
	fake.modifyFpgaImageAttributeWithContextMutex.RLock()
	defer fake.modifyFpgaImageAttributeWithContextMutex.RUnlock()
	fake.modifyHostsMutex.RLock()
	defer fake.modifyHostsMutex.RUnlock()
	fake.modifyHostsRequestMutex.RLock()
	defer fake.modifyHostsRequestMutex.RUnlock()
	fake.modifyHostsWithContextMutex.RLock()
	defer fake.modifyHostsWithContextMutex.RUnlock()
	fake.modifyIdFormatMutex.RLock()
	defer fake.modifyIdFormatMutex.RUnlock()
	fake.modifyIdFormatRequestMutex.RLock()
	defer fake.modifyIdFormatRequestMutex.RUnlock()
	fake.modifyIdFormatWithContextMutex.RLock()
	defer fake.modifyIdFormatWithContextMutex.RUnlock()
	fake.modifyIdentityIdFormatMutex.RLock()
	defer fake.modifyIdentityIdFormatMutex.RUnlock()
	fake.modifyIdentityIdFormatRequestMutex.RLock()
	defer fake.modifyIdentityIdFormatRequestMutex.RUnlock()
	fake.modifyIdentityIdFormatWithContextMutex.RLock()
	defer fake.modifyIdentityIdFormatWithContextMutex.RUnlock()
	fake.modifyImageAttributeMutex.RLock()
	defer fake.modifyImageAttributeMutex.RUnlock()
	fake.modifyImageAttributeRequestMutex.RLock()
	defer fake.modifyImageAttributeRequestMutex.RUnlock()
	fake.modifyImageAttributeWithContextMutex.RLock()
	defer fake.modifyImageAttributeWithContextMutex.RUnlock()
	fake.modifyInstanceAttributeMutex.RLock()
	defer fake.modifyInstanceAttributeMutex.RUnlock()
	fake.modifyInstanceAttributeRequestMutex.RLock()
	defer fake.modifyInstanceAttributeRequestMutex.RUnlock()
	fake.modifyInstanceAttributeWithContextMutex.RLock()
	defer fake.modifyInstanceAttributeWithContextMutex.RUnlock()
	fake.modifyInstanceCapacityReservationAttributesMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesMutex.RUnlock()
	fake.modifyInstanceCapacityReservationAttributesRequestMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesRequestMutex.RUnlock()
	fake.modifyInstanceCapacityReservationAttributesWithContextMutex.RLock()
	defer fake.modifyInstanceCapacityReservationAttributesWithContextMutex.RUnlock()
	fake.modifyInstanceCreditSpecificationMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationMutex.RUnlock()
	fake.modifyInstanceCreditSpecificationRequestMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationRequestMutex.RUnlock()
	fake.modifyInstanceCreditSpecificationWithContextMutex.RLock()
	defer fake.modifyInstanceCreditSpecificationWithContextMutex.RUnlock()
	fake.modifyInstancePlacementMutex.RLock()
	defer fake.modifyInstancePlacementMutex.RUnlock()
	fake.modifyInstancePlacementRequestMutex.RLock()
	defer fake.modifyInstancePlacementRequestMutex.RUnlock()
	fake.modifyInstancePlacementWithContextMutex.RLock()
	defer fake.modifyInstancePlacementWithContextMutex.RUnlock()
	fake.modifyLaunchTemplateMutex.RLock()
	defer fake.modifyLaunchTemplateMutex.RUnlock()
	fake.modifyLaunchTemplateRequestMutex.RLock()
	defer fake.modifyLaunchTemplateRequestMutex.RUnlock()
	fake.modifyLaunchTemplateWithContextMutex.RLock()
	defer fake.modifyLaunchTemplateWithContextMutex.RUnlock()
	fake.modifyNetworkInterfaceAttributeMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeMutex.RUnlock()
	fake.modifyNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeRequestMutex.RUnlock()
	fake.modifyNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.modifyNetworkInterfaceAttributeWithContextMutex.RUnlock()
	fake.modifyReservedInstancesMutex.RLock()
	defer fake.modifyReservedInstancesMutex.RUnlock()
	fake.modifyReservedInstancesRequestMutex.RLock()
	defer fake.modifyReservedInstancesRequestMutex.RUnlock()
	fake.modifyReservedInstancesWithContextMutex.RLock()
	defer fake.modifyReservedInstancesWithContextMutex.RUnlock()
	fake.modifySnapshotAttributeMutex.RLock()
	defer fake.modifySnapshotAttributeMutex.RUnlock()
	fake.modifySnapshotAttributeRequestMutex.RLock()
	defer fake.modifySnapshotAttributeRequestMutex.RUnlock()
	fake.modifySnapshotAttributeWithContextMutex.RLock()
	defer fake.modifySnapshotAttributeWithContextMutex.RUnlock()
	fake.modifySpotFleetRequestMutex.RLock()
	defer fake.modifySpotFleetRequestMutex.RUnlock()
	fake.modifySpotFleetRequestRequestMutex.RLock()
	defer fake.modifySpotFleetRequestRequestMutex.RUnlock()
	fake.modifySpotFleetRequestWithContextMutex.RLock()
	defer fake.modifySpotFleetRequestWithContextMutex.RUnlock()
	fake.modifySubnetAttributeMutex.RLock()
	defer fake.modifySubnetAttributeMutex.RUnlock()
	fake.modifySubnetAttributeRequestMutex.RLock()
	defer fake.modifySubnetAttributeRequestMutex.RUnlock()
	fake.modifySubnetAttributeWithContextMutex.RLock()
	defer fake.modifySubnetAttributeWithContextMutex.RUnlock()
	fake.modifyTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.modifyTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	fake.modifyTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.modifyTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	fake.modifyVolumeMutex.RLock()
	defer fake.modifyVolumeMutex.RUnlock()
	fake.modifyVolumeAttributeMutex.RLock()
	defer fake.modifyVolumeAttributeMutex.RUnlock()
	fake.modifyVolumeAttributeRequestMutex.RLock()
	defer fake.modifyVolumeAttributeRequestMutex.RUnlock()
	fake.modifyVolumeAttributeWithContextMutex.RLock()
	defer fake.modifyVolumeAttributeWithContextMutex.RUnlock()
	fake.modifyVolumeRequestMutex.RLock()
	defer fake.modifyVolumeRequestMutex.RUnlock()
	fake.modifyVolumeWithContextMutex.RLock()
	defer fake.modifyVolumeWithContextMutex.RUnlock()
	fake.modifyVpcAttributeMutex.RLock()
	defer fake.modifyVpcAttributeMutex.RUnlock()
	fake.modifyVpcAttributeRequestMutex.RLock()
	defer fake.modifyVpcAttributeRequestMutex.RUnlock()
	fake.modifyVpcAttributeWithContextMutex.RLock()
	defer fake.modifyVpcAttributeWithContextMutex.RUnlock()
	fake.modifyVpcEndpointMutex.RLock()
	defer fake.modifyVpcEndpointMutex.RUnlock()
	fake.modifyVpcEndpointConnectionNotificationMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationMutex.RUnlock()
	fake.modifyVpcEndpointConnectionNotificationRequestMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationRequestMutex.RUnlock()
	fake.modifyVpcEndpointConnectionNotificationWithContextMutex.RLock()
	defer fake.modifyVpcEndpointConnectionNotificationWithContextMutex.RUnlock()
	fake.modifyVpcEndpointRequestMutex.RLock()
	defer fake.modifyVpcEndpointRequestMutex.RUnlock()
	fake.modifyVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationMutex.RUnlock()
	fake.modifyVpcEndpointServiceConfigurationRequestMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationRequestMutex.RUnlock()
	fake.modifyVpcEndpointServiceConfigurationWithContextMutex.RLock()
	defer fake.modifyVpcEndpointServiceConfigurationWithContextMutex.RUnlock()
	fake.modifyVpcEndpointServicePermissionsMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.RUnlock()
	fake.modifyVpcEndpointServicePermissionsRequestMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsRequestMutex.RUnlock()
	fake.modifyVpcEndpointServicePermissionsWithContextMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsWithContextMutex.RUnlock()
	fake.modifyVpcEndpointWithContextMutex.RLock()
	defer fake.modifyVpcEndpointWithContextMutex.RUnlock()
	fake.modifyVpcPeeringConnectionOptionsMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsMutex.RUnlock()
	fake.modifyVpcPeeringConnectionOptionsRequestMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsRequestMutex.RUnlock()
	fake.modifyVpcPeeringConnectionOptionsWithContextMutex.RLock()
	defer fake.modifyVpcPeeringConnectionOptionsWithContextMutex.RUnlock()
	fake.modifyVpcTenancyMutex.RLock()
	defer fake.modifyVpcTenancyMutex.RUnlock()
	fake.modifyVpcTenancyRequestMutex.RLock()
	defer fake.modifyVpcTenancyRequestMutex.RUnlock()
	fake.modifyVpcTenancyWithContextMutex.RLock()
	defer fake.modifyVpcTenancyWithContextMutex.RUnlock()
	fake.monitorInstancesMutex.RLock()
	defer fake.monitorInstancesMutex.RUnlock()
	fake.monitorInstancesRequestMutex.RLock()
	defer fake.monitorInstancesRequestMutex.RUnlock()
	fake.monitorInstancesWithContextMutex.RLock()
	defer fake.monitorInstancesWithContextMutex.RUnlock()
	fake.moveAddressToVpcMutex.RLock()
	defer fake.moveAddressToVpcMutex.RUnlock()
	fake.moveAddressToVpcRequestMutex.RLock()
	defer fake.moveAddressToVpcRequestMutex.RUnlock()
	fake.moveAddressToVpcWithContextMutex.RLock()
	defer fake.moveAddressToVpcWithContextMutex.RUnlock()
	fake.provisionByoipCidrMutex.RLock()
	defer fake.provisionByoipCidrMutex.RUnlock()
	fake.provisionByoipCidrRequestMutex.RLock()
	defer fake.provisionByoipCidrRequestMutex.RUnlock()
	fake.provisionByoipCidrWithContextMutex.RLock()
	defer fake.provisionByoipCidrWithContextMutex.RUnlock()
	fake.purchaseHostReservationMutex.RLock()
	defer fake.purchaseHostReservationMutex.RUnlock()
	fake.purchaseHostReservationRequestMutex.RLock()
	defer fake.purchaseHostReservationRequestMutex.RUnlock()
	fake.purchaseHostReservationWithContextMutex.RLock()
	defer fake.purchaseHostReservationWithContextMutex.RUnlock()
	fake.purchaseReservedInstancesOfferingMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingMutex.RUnlock()
	fake.purchaseReservedInstancesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingRequestMutex.RUnlock()
	fake.purchaseReservedInstancesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedInstancesOfferingWithContextMutex.RUnlock()
	fake.purchaseScheduledInstancesMutex.RLock()
	defer fake.purchaseScheduledInstancesMutex.RUnlock()
	fake.purchaseScheduledInstancesRequestMutex.RLock()
	defer fake.purchaseScheduledInstancesRequestMutex.RUnlock()
	fake.purchaseScheduledInstancesWithContextMutex.RLock()
	defer fake.purchaseScheduledInstancesWithContextMutex.RUnlock()
	fake.rebootInstancesMutex.RLock()
	defer fake.rebootInstancesMutex.RUnlock()
	fake.rebootInstancesRequestMutex.RLock()
	defer fake.rebootInstancesRequestMutex.RUnlock()
	fake.rebootInstancesWithContextMutex.RLock()
	defer fake.rebootInstancesWithContextMutex.RUnlock()
	fake.registerImageMutex.RLock()
	defer fake.registerImageMutex.RUnlock()
	fake.registerImageRequestMutex.RLock()
	defer fake.registerImageRequestMutex.RUnlock()
	fake.registerImageWithContextMutex.RLock()
	defer fake.registerImageWithContextMutex.RUnlock()
	fake.rejectTransitGatewayVpcAttachmentMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentMutex.RUnlock()
	fake.rejectTransitGatewayVpcAttachmentRequestMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentRequestMutex.RUnlock()
	fake.rejectTransitGatewayVpcAttachmentWithContextMutex.RLock()
	defer fake.rejectTransitGatewayVpcAttachmentWithContextMutex.RUnlock()
	fake.rejectVpcEndpointConnectionsMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsMutex.RUnlock()
	fake.rejectVpcEndpointConnectionsRequestMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsRequestMutex.RUnlock()
	fake.rejectVpcEndpointConnectionsWithContextMutex.RLock()
	defer fake.rejectVpcEndpointConnectionsWithContextMutex.RUnlock()
	fake.rejectVpcPeeringConnectionMutex.RLock()
	defer fake.rejectVpcPeeringConnectionMutex.RUnlock()
	fake.rejectVpcPeeringConnectionRequestMutex.RLock()
	defer fake.rejectVpcPeeringConnectionRequestMutex.RUnlock()
	fake.rejectVpcPeeringConnectionWithContextMutex.RLock()
	defer fake.rejectVpcPeeringConnectionWithContextMutex.RUnlock()
	fake.releaseAddressMutex.RLock()
	defer fake.releaseAddressMutex.RUnlock()
	fake.releaseAddressRequestMutex.RLock()
	defer fake.releaseAddressRequestMutex.RUnlock()
	fake.releaseAddressWithContextMutex.RLock()
	defer fake.releaseAddressWithContextMutex.RUnlock()
	fake.releaseHostsMutex.RLock()
	defer fake.releaseHostsMutex.RUnlock()
	fake.releaseHostsRequestMutex.RLock()
	defer fake.releaseHostsRequestMutex.RUnlock()
	fake.releaseHostsWithContextMutex.RLock()
	defer fake.releaseHostsWithContextMutex.RUnlock()
	fake.replaceIamInstanceProfileAssociationMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationMutex.RUnlock()
	fake.replaceIamInstanceProfileAssociationRequestMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationRequestMutex.RUnlock()
	fake.replaceIamInstanceProfileAssociationWithContextMutex.RLock()
	defer fake.replaceIamInstanceProfileAssociationWithContextMutex.RUnlock()
	fake.replaceNetworkAclAssociationMutex.RLock()
	defer fake.replaceNetworkAclAssociationMutex.RUnlock()
	fake.replaceNetworkAclAssociationRequestMutex.RLock()
	defer fake.replaceNetworkAclAssociationRequestMutex.RUnlock()
	fake.replaceNetworkAclAssociationWithContextMutex.RLock()
	defer fake.replaceNetworkAclAssociationWithContextMutex.RUnlock()
	fake.replaceNetworkAclEntryMutex.RLock()
	defer fake.replaceNetworkAclEntryMutex.RUnlock()
	fake.replaceNetworkAclEntryRequestMutex.RLock()
	defer fake.replaceNetworkAclEntryRequestMutex.RUnlock()
	fake.replaceNetworkAclEntryWithContextMutex.RLock()
	defer fake.replaceNetworkAclEntryWithContextMutex.RUnlock()
	fake.replaceRouteMutex.RLock()
	defer fake.replaceRouteMutex.RUnlock()
	fake.replaceRouteRequestMutex.RLock()
	defer fake.replaceRouteRequestMutex.RUnlock()
	fake.replaceRouteTableAssociationMutex.RLock()
	defer fake.replaceRouteTableAssociationMutex.RUnlock()
	fake.replaceRouteTableAssociationRequestMutex.RLock()
	defer fake.replaceRouteTableAssociationRequestMutex.RUnlock()
	fake.replaceRouteTableAssociationWithContextMutex.RLock()
	defer fake.replaceRouteTableAssociationWithContextMutex.RUnlock()
	fake.replaceRouteWithContextMutex.RLock()
	defer fake.replaceRouteWithContextMutex.RUnlock()
	fake.replaceTransitGatewayRouteMutex.RLock()
	defer fake.replaceTransitGatewayRouteMutex.RUnlock()
	fake.replaceTransitGatewayRouteRequestMutex.RLock()
	defer fake.replaceTransitGatewayRouteRequestMutex.RUnlock()
	fake.replaceTransitGatewayRouteWithContextMutex.RLock()
	defer fake.replaceTransitGatewayRouteWithContextMutex.RUnlock()
	fake.reportInstanceStatusMutex.RLock()
	defer fake.reportInstanceStatusMutex.RUnlock()
	fake.reportInstanceStatusRequestMutex.RLock()
	defer fake.reportInstanceStatusRequestMutex.RUnlock()
	fake.reportInstanceStatusWithContextMutex.RLock()
	defer fake.reportInstanceStatusWithContextMutex.RUnlock()
	fake.requestSpotFleetMutex.RLock()
	defer fake.requestSpotFleetMutex.RUnlock()
	fake.requestSpotFleetRequestMutex.RLock()
	defer fake.requestSpotFleetRequestMutex.RUnlock()
	fake.requestSpotFleetWithContextMutex.RLock()
	defer fake.requestSpotFleetWithContextMutex.RUnlock()
	fake.requestSpotInstancesMutex.RLock()
	defer fake.requestSpotInstancesMutex.RUnlock()
	fake.requestSpotInstancesRequestMutex.RLock()
	defer fake.requestSpotInstancesRequestMutex.RUnlock()
	fake.requestSpotInstancesWithContextMutex.RLock()
	defer fake.requestSpotInstancesWithContextMutex.RUnlock()
	fake.resetFpgaImageAttributeMutex.RLock()
	defer fake.resetFpgaImageAttributeMutex.RUnlock()
	fake.resetFpgaImageAttributeRequestMutex.RLock()
	defer fake.resetFpgaImageAttributeRequestMutex.RUnlock()
	fake.resetFpgaImageAttributeWithContextMutex.RLock()
	defer fake.resetFpgaImageAttributeWithContextMutex.RUnlock()
	fake.resetImageAttributeMutex.RLock()
	defer fake.resetImageAttributeMutex.RUnlock()
	fake.resetImageAttributeRequestMutex.RLock()
	defer fake.resetImageAttributeRequestMutex.RUnlock()
	fake.resetImageAttributeWithContextMutex.RLock()
	defer fake.resetImageAttributeWithContextMutex.RUnlock()
	fake.resetInstanceAttributeMutex.RLock()
	defer fake.resetInstanceAttributeMutex.RUnlock()
	fake.resetInstanceAttributeRequestMutex.RLock()
	defer fake.resetInstanceAttributeRequestMutex.RUnlock()
	fake.resetInstanceAttributeWithContextMutex.RLock()
	defer fake.resetInstanceAttributeWithContextMutex.RUnlock()
	fake.resetNetworkInterfaceAttributeMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeMutex.RUnlock()
	fake.resetNetworkInterfaceAttributeRequestMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeRequestMutex.RUnlock()
	fake.resetNetworkInterfaceAttributeWithContextMutex.RLock()
	defer fake.resetNetworkInterfaceAttributeWithContextMutex.RUnlock()
	fake.resetSnapshotAttributeMutex.RLock()
	defer fake.resetSnapshotAttributeMutex.RUnlock()
	fake.resetSnapshotAttributeRequestMutex.RLock()
	defer fake.resetSnapshotAttributeRequestMutex.RUnlock()
	fake.resetSnapshotAttributeWithContextMutex.RLock()
	defer fake.resetSnapshotAttributeWithContextMutex.RUnlock()
	fake.restoreAddressToClassicMutex.RLock()
	defer fake.restoreAddressToClassicMutex.RUnlock()
	fake.restoreAddressToClassicRequestMutex.RLock()
	defer fake.restoreAddressToClassicRequestMutex.RUnlock()
	fake.restoreAddressToClassicWithContextMutex.RLock()
	defer fake.restoreAddressToClassicWithContextMutex.RUnlock()
	fake.revokeClientVpnIngressMutex.RLock()
	defer fake.revokeClientVpnIngressMutex.RUnlock()
	fake.revokeClientVpnIngressRequestMutex.RLock()
	defer fake.revokeClientVpnIngressRequestMutex.RUnlock()
	fake.revokeClientVpnIngressWithContextMutex.RLock()
	defer fake.revokeClientVpnIngressWithContextMutex.RUnlock()
	fake.revokeSecurityGroupEgressMutex.RLock()
	defer fake.revokeSecurityGroupEgressMutex.RUnlock()
	fake.revokeSecurityGroupEgressRequestMutex.RLock()
	defer fake.revokeSecurityGroupEgressRequestMutex.RUnlock()
	fake.revokeSecurityGroupEgressWithContextMutex.RLock()
	defer fake.revokeSecurityGroupEgressWithContextMutex.RUnlock()
	fake.revokeSecurityGroupIngressMutex.RLock()
	defer fake.revokeSecurityGroupIngressMutex.RUnlock()
	fake.revokeSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeSecurityGroupIngressRequestMutex.RUnlock()
	fake.revokeSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeSecurityGroupIngressWithContextMutex.RUnlock()
	fake.runInstancesMutex.RLock()
	defer fake.runInstancesMutex.RUnlock()
	fake.runInstancesRequestMutex.RLock()
	defer fake.runInstancesRequestMutex.RUnlock()
	fake.runInstancesWithContextMutex.RLock()
	defer fake.runInstancesWithContextMutex.RUnlock()
	fake.runScheduledInstancesMutex.RLock()
	defer fake.runScheduledInstancesMutex.RUnlock()
	fake.runScheduledInstancesRequestMutex.RLock()
	defer fake.runScheduledInstancesRequestMutex.RUnlock()
	fake.runScheduledInstancesWithContextMutex.RLock()
	defer fake.runScheduledInstancesWithContextMutex.RUnlock()
	fake.searchTransitGatewayRoutesMutex.RLock()
	defer fake.searchTransitGatewayRoutesMutex.RUnlock()
	fake.searchTransitGatewayRoutesRequestMutex.RLock()
	defer fake.searchTransitGatewayRoutesRequestMutex.RUnlock()
	fake.searchTransitGatewayRoutesWithContextMutex.RLock()
	defer fake.searchTransitGatewayRoutesWithContextMutex.RUnlock()
	fake.startInstancesMutex.RLock()
	defer fake.startInstancesMutex.RUnlock()
	fake.startInstancesRequestMutex.RLock()
	defer fake.startInstancesRequestMutex.RUnlock()
	fake.startInstancesWithContextMutex.RLock()
	defer fake.startInstancesWithContextMutex.RUnlock()
	fake.stopInstancesMutex.RLock()
	defer fake.stopInstancesMutex.RUnlock()
	fake.stopInstancesRequestMutex.RLock()
	defer fake.stopInstancesRequestMutex.RUnlock()
	fake.stopInstancesWithContextMutex.RLock()
	defer fake.stopInstancesWithContextMutex.RUnlock()
	fake.terminateClientVpnConnectionsMutex.RLock()
	defer fake.terminateClientVpnConnectionsMutex.RUnlock()
	fake.terminateClientVpnConnectionsRequestMutex.RLock()
	defer fake.terminateClientVpnConnectionsRequestMutex.RUnlock()
	fake.terminateClientVpnConnectionsWithContextMutex.RLock()
	defer fake.terminateClientVpnConnectionsWithContextMutex.RUnlock()
	fake.terminateInstancesMutex.RLock()
	defer fake.terminateInstancesMutex.RUnlock()
	fake.terminateInstancesRequestMutex.RLock()
	defer fake.terminateInstancesRequestMutex.RUnlock()
	fake.terminateInstancesWithContextMutex.RLock()
	defer fake.terminateInstancesWithContextMutex.RUnlock()
	fake.unassignIpv6AddressesMutex.RLock()
	defer fake.unassignIpv6AddressesMutex.RUnlock()
	fake.unassignIpv6AddressesRequestMutex.RLock()
	defer fake.unassignIpv6AddressesRequestMutex.RUnlock()
	fake.unassignIpv6AddressesWithContextMutex.RLock()
	defer fake.unassignIpv6AddressesWithContextMutex.RUnlock()
	fake.unassignPrivateIpAddressesMutex.RLock()
	defer fake.unassignPrivateIpAddressesMutex.RUnlock()
	fake.unassignPrivateIpAddressesRequestMutex.RLock()
	defer fake.unassignPrivateIpAddressesRequestMutex.RUnlock()
	fake.unassignPrivateIpAddressesWithContextMutex.RLock()
	defer fake.unassignPrivateIpAddressesWithContextMutex.RUnlock()
	fake.unmonitorInstancesMutex.RLock()
	defer fake.unmonitorInstancesMutex.RUnlock()
	fake.unmonitorInstancesRequestMutex.RLock()
	defer fake.unmonitorInstancesRequestMutex.RUnlock()
	fake.unmonitorInstancesWithContextMutex.RLock()
	defer fake.unmonitorInstancesWithContextMutex.RUnlock()
	fake.updateSecurityGroupRuleDescriptionsEgressMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressMutex.RUnlock()
	fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressRequestMutex.RUnlock()
	fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsEgressWithContextMutex.RUnlock()
	fake.updateSecurityGroupRuleDescriptionsIngressMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressMutex.RUnlock()
	fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressRequestMutex.RUnlock()
	fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.RLock()
	defer fake.updateSecurityGroupRuleDescriptionsIngressWithContextMutex.RUnlock()
	fake.waitUntilBundleTaskCompleteMutex.RLock()
	defer fake.waitUntilBundleTaskCompleteMutex.RUnlock()
	fake.waitUntilBundleTaskCompleteWithContextMutex.RLock()
	defer fake.waitUntilBundleTaskCompleteWithContextMutex.RUnlock()
	fake.waitUntilConversionTaskCancelledMutex.RLock()
	defer fake.waitUntilConversionTaskCancelledMutex.RUnlock()
	fake.waitUntilConversionTaskCancelledWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskCancelledWithContextMutex.RUnlock()
	fake.waitUntilConversionTaskCompletedMutex.RLock()
	defer fake.waitUntilConversionTaskCompletedMutex.RUnlock()
	fake.waitUntilConversionTaskCompletedWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskCompletedWithContextMutex.RUnlock()
	fake.waitUntilConversionTaskDeletedMutex.RLock()
	defer fake.waitUntilConversionTaskDeletedMutex.RUnlock()
	fake.waitUntilConversionTaskDeletedWithContextMutex.RLock()
	defer fake.waitUntilConversionTaskDeletedWithContextMutex.RUnlock()
	fake.waitUntilCustomerGatewayAvailableMutex.RLock()
	defer fake.waitUntilCustomerGatewayAvailableMutex.RUnlock()
	fake.waitUntilCustomerGatewayAvailableWithContextMutex.RLock()
	defer fake.waitUntilCustomerGatewayAvailableWithContextMutex.RUnlock()
	fake.waitUntilExportTaskCancelledMutex.RLock()
	defer fake.waitUntilExportTaskCancelledMutex.RUnlock()
	fake.waitUntilExportTaskCancelledWithContextMutex.RLock()
	defer fake.waitUntilExportTaskCancelledWithContextMutex.RUnlock()
	fake.waitUntilExportTaskCompletedMutex.RLock()
	defer fake.waitUntilExportTaskCompletedMutex.RUnlock()
	fake.waitUntilExportTaskCompletedWithContextMutex.RLock()
	defer fake.waitUntilExportTaskCompletedWithContextMutex.RUnlock()
	fake.waitUntilImageAvailableMutex.RLock()
	defer fake.waitUntilImageAvailableMutex.RUnlock()
	fake.waitUntilImageAvailableWithContextMutex.RLock()
	defer fake.waitUntilImageAvailableWithContextMutex.RUnlock()
	fake.waitUntilImageExistsMutex.RLock()
	defer fake.waitUntilImageExistsMutex.RUnlock()
	fake.waitUntilImageExistsWithContextMutex.RLock()
	defer fake.waitUntilImageExistsWithContextMutex.RUnlock()
	fake.waitUntilInstanceExistsMutex.RLock()
	defer fake.waitUntilInstanceExistsMutex.RUnlock()
	fake.waitUntilInstanceExistsWithContextMutex.RLock()
	defer fake.waitUntilInstanceExistsWithContextMutex.RUnlock()
	fake.waitUntilInstanceRunningMutex.RLock()
	defer fake.waitUntilInstanceRunningMutex.RUnlock()
	fake.waitUntilInstanceRunningWithContextMutex.RLock()
	defer fake.waitUntilInstanceRunningWithContextMutex.RUnlock()
	fake.waitUntilInstanceStatusOkMutex.RLock()
	defer fake.waitUntilInstanceStatusOkMutex.RUnlock()
	fake.waitUntilInstanceStatusOkWithContextMutex.RLock()
	defer fake.waitUntilInstanceStatusOkWithContextMutex.RUnlock()
	fake.waitUntilInstanceStoppedMutex.RLock()
	defer fake.waitUntilInstanceStoppedMutex.RUnlock()
	fake.waitUntilInstanceStoppedWithContextMutex.RLock()
	defer fake.waitUntilInstanceStoppedWithContextMutex.RUnlock()
	fake.waitUntilInstanceTerminatedMutex.RLock()
	defer fake.waitUntilInstanceTerminatedMutex.RUnlock()
	fake.waitUntilInstanceTerminatedWithContextMutex.RLock()
	defer fake.waitUntilInstanceTerminatedWithContextMutex.RUnlock()
	fake.waitUntilKeyPairExistsMutex.RLock()
	defer fake.waitUntilKeyPairExistsMutex.RUnlock()
	fake.waitUntilKeyPairExistsWithContextMutex.RLock()
	defer fake.waitUntilKeyPairExistsWithContextMutex.RUnlock()
	fake.waitUntilNatGatewayAvailableMutex.RLock()
	defer fake.waitUntilNatGatewayAvailableMutex.RUnlock()
	fake.waitUntilNatGatewayAvailableWithContextMutex.RLock()
	defer fake.waitUntilNatGatewayAvailableWithContextMutex.RUnlock()
	fake.waitUntilNetworkInterfaceAvailableMutex.RLock()
	defer fake.waitUntilNetworkInterfaceAvailableMutex.RUnlock()
	fake.waitUntilNetworkInterfaceAvailableWithContextMutex.RLock()
	defer fake.waitUntilNetworkInterfaceAvailableWithContextMutex.RUnlock()
	fake.waitUntilPasswordDataAvailableMutex.RLock()
	defer fake.waitUntilPasswordDataAvailableMutex.RUnlock()
	fake.waitUntilPasswordDataAvailableWithContextMutex.RLock()
	defer fake.waitUntilPasswordDataAvailableWithContextMutex.RUnlock()
	fake.waitUntilSnapshotCompletedMutex.RLock()
	defer fake.waitUntilSnapshotCompletedMutex.RUnlock()
	fake.waitUntilSnapshotCompletedWithContextMutex.RLock()
	defer fake.waitUntilSnapshotCompletedWithContextMutex.RUnlock()
	fake.waitUntilSpotInstanceRequestFulfilledMutex.RLock()
	defer fake.waitUntilSpotInstanceRequestFulfilledMutex.RUnlock()
	fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.RLock()
	defer fake.waitUntilSpotInstanceRequestFulfilledWithContextMutex.RUnlock()
	fake.waitUntilSubnetAvailableMutex.RLock()
	defer fake.waitUntilSubnetAvailableMutex.RUnlock()
	fake.waitUntilSubnetAvailableWithContextMutex.RLock()
	defer fake.waitUntilSubnetAvailableWithContextMutex.RUnlock()
	fake.waitUntilSystemStatusOkMutex.RLock()
	defer fake.waitUntilSystemStatusOkMutex.RUnlock()
	fake.waitUntilSystemStatusOkWithContextMutex.RLock()
	defer fake.waitUntilSystemStatusOkWithContextMutex.RUnlock()
	fake.waitUntilVolumeAvailableMutex.RLock()
	defer fake.waitUntilVolumeAvailableMutex.RUnlock()
	fake.waitUntilVolumeAvailableWithContextMutex.RLock()
	defer fake.waitUntilVolumeAvailableWithContextMutex.RUnlock()
	fake.waitUntilVolumeDeletedMutex.RLock()
	defer fake.waitUntilVolumeDeletedMutex.RUnlock()
	fake.waitUntilVolumeDeletedWithContextMutex.RLock()
	defer fake.waitUntilVolumeDeletedWithContextMutex.RUnlock()
	fake.waitUntilVolumeInUseMutex.RLock()
	defer fake.waitUntilVolumeInUseMutex.RUnlock()
	fake.waitUntilVolumeInUseWithContextMutex.RLock()
	defer fake.waitUntilVolumeInUseWithContextMutex.RUnlock()
	fake.waitUntilVpcAvailableMutex.RLock()
	defer fake.waitUntilVpcAvailableMutex.RUnlock()
	fake.waitUntilVpcAvailableWithContextMutex.RLock()
	defer fake.waitUntilVpcAvailableWithContextMutex.RUnlock()
	fake.waitUntilVpcExistsMutex.RLock()
	defer fake.waitUntilVpcExistsMutex.RUnlock()
	fake.waitUntilVpcExistsWithContextMutex.RLock()
	defer fake.waitUntilVpcExistsWithContextMutex.RUnlock()
	fake.waitUntilVpcPeeringConnectionDeletedMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionDeletedMutex.RUnlock()
	fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionDeletedWithContextMutex.RUnlock()
	fake.waitUntilVpcPeeringConnectionExistsMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionExistsMutex.RUnlock()
	fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.RLock()
	defer fake.waitUntilVpcPeeringConnectionExistsWithContextMutex.RUnlock()
	fake.waitUntilVpnConnectionAvailableMutex.RLock()
	defer fake.waitUntilVpnConnectionAvailableMutex.RUnlock()
	fake.waitUntilVpnConnectionAvailableWithContextMutex.RLock()
	defer fake.waitUntilVpnConnectionAvailableWithContextMutex.RUnlock()
	fake.waitUntilVpnConnectionDeletedMutex.RLock()
	defer fake.waitUntilVpnConnectionDeletedMutex.RUnlock()
	fake.waitUntilVpnConnectionDeletedWithContextMutex.RLock()
	defer fake.waitUntilVpnConnectionDeletedWithContextMutex.RUnlock()
	fake.withdrawByoipCidrMutex.RLock()
	defer fake.withdrawByoipCidrMutex.RUnlock()
	fake.withdrawByoipCidrRequestMutex.RLock()
	defer fake.withdrawByoipCidrRequestMutex.RUnlock()
	fake.withdrawByoipCidrWithContextMutex.RLock()
	defer fake.withdrawByoipCidrWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEC2API) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ec2iface.EC2API = new(FakeEC2API)
